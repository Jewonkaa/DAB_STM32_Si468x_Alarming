
DAB_STM32_Si468x_Alarming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d378  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036b8  0800d500  0800d500  0000e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010bb8  08010bb8  00012188  2**0
                  CONTENTS
  4 .ARM          00000008  08010bb8  08010bb8  00011bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010bc0  08010bc0  00012188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010bc0  08010bc0  00011bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010bc4  08010bc4  00011bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08010bc8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012188  2**0
                  CONTENTS
 10 .bss          00007050  20000188  20000188  00012188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200071d8  200071d8  00012188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012188  2**0
                  CONTENTS, READONLY
 13 .debug_info   000182fb  00000000  00000000  000121b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c9e  00000000  00000000  0002a4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d1  00000000  00000000  0002f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247d3  00000000  00000000  00030789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc0e  00000000  00000000  00054f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d31c6  00000000  00000000  00072b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145d30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005950  00000000  00000000  00145d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0014b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d4e8 	.word	0x0800d4e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d4e8 	.word	0x0800d4e8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 800051c:	f000 f914 	bl	8000748 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fb97 	bl	8000c54 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8000526:	20cb      	movs	r0, #203	@ 0xcb
 8000528:	f000 fb94 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800052c:	2039      	movs	r0, #57	@ 0x39
 800052e:	f000 fba0 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8000532:	202c      	movs	r0, #44	@ 0x2c
 8000534:	f000 fb9d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fb9a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800053e:	2034      	movs	r0, #52	@ 0x34
 8000540:	f000 fb97 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fb94 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800054a:	20cf      	movs	r0, #207	@ 0xcf
 800054c:	f000 fb82 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fb8e 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000556:	20c1      	movs	r0, #193	@ 0xc1
 8000558:	f000 fb8b 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 800055c:	2030      	movs	r0, #48	@ 0x30
 800055e:	f000 fb88 	bl	8000c72 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000562:	20e8      	movs	r0, #232	@ 0xe8
 8000564:	f000 fb76 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000568:	2085      	movs	r0, #133	@ 0x85
 800056a:	f000 fb82 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fb7f 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000574:	2078      	movs	r0, #120	@ 0x78
 8000576:	f000 fb7c 	bl	8000c72 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800057a:	20ea      	movs	r0, #234	@ 0xea
 800057c:	f000 fb6a 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fb76 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fb73 	bl	8000c72 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 800058c:	20ed      	movs	r0, #237	@ 0xed
 800058e:	f000 fb61 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000592:	2064      	movs	r0, #100	@ 0x64
 8000594:	f000 fb6d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fb6a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800059e:	2012      	movs	r0, #18
 80005a0:	f000 fb67 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80005a4:	2081      	movs	r0, #129	@ 0x81
 80005a6:	f000 fb64 	bl	8000c72 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80005aa:	20f7      	movs	r0, #247	@ 0xf7
 80005ac:	f000 fb52 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80005b0:	2020      	movs	r0, #32
 80005b2:	f000 fb5e 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80005b6:	20c0      	movs	r0, #192	@ 0xc0
 80005b8:	f000 fb4c 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 fb58 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80005c2:	20c1      	movs	r0, #193	@ 0xc1
 80005c4:	f000 fb46 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f000 fb52 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80005ce:	20c5      	movs	r0, #197	@ 0xc5
 80005d0:	f000 fb40 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80005d4:	203e      	movs	r0, #62	@ 0x3e
 80005d6:	f000 fb4c 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80005da:	2028      	movs	r0, #40	@ 0x28
 80005dc:	f000 fb49 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005e0:	20c7      	movs	r0, #199	@ 0xc7
 80005e2:	f000 fb37 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005e6:	2086      	movs	r0, #134	@ 0x86
 80005e8:	f000 fb43 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005ec:	2036      	movs	r0, #54	@ 0x36
 80005ee:	f000 fb31 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005f2:	2048      	movs	r0, #72	@ 0x48
 80005f4:	f000 fb3d 	bl	8000c72 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f000 fb2b 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005fe:	2055      	movs	r0, #85	@ 0x55
 8000600:	f000 fb37 	bl	8000c72 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8000604:	20b1      	movs	r0, #177	@ 0xb1
 8000606:	f000 fb25 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fb31 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8000610:	2018      	movs	r0, #24
 8000612:	f000 fb2e 	bl	8000c72 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8000616:	20b6      	movs	r0, #182	@ 0xb6
 8000618:	f000 fb1c 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800061c:	2008      	movs	r0, #8
 800061e:	f000 fb28 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8000622:	2082      	movs	r0, #130	@ 0x82
 8000624:	f000 fb25 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000628:	2027      	movs	r0, #39	@ 0x27
 800062a:	f000 fb22 	bl	8000c72 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800062e:	20f2      	movs	r0, #242	@ 0xf2
 8000630:	f000 fb10 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fb1c 	bl	8000c72 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800063a:	2026      	movs	r0, #38	@ 0x26
 800063c:	f000 fb0a 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fb16 	bl	8000c72 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8000646:	20e0      	movs	r0, #224	@ 0xe0
 8000648:	f000 fb04 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800064c:	200f      	movs	r0, #15
 800064e:	f000 fb10 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000652:	2031      	movs	r0, #49	@ 0x31
 8000654:	f000 fb0d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000658:	202b      	movs	r0, #43	@ 0x2b
 800065a:	f000 fb0a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800065e:	200c      	movs	r0, #12
 8000660:	f000 fb07 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000664:	200e      	movs	r0, #14
 8000666:	f000 fb04 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800066a:	2008      	movs	r0, #8
 800066c:	f000 fb01 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000670:	204e      	movs	r0, #78	@ 0x4e
 8000672:	f000 fafe 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8000676:	20f1      	movs	r0, #241	@ 0xf1
 8000678:	f000 fafb 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 800067c:	2037      	movs	r0, #55	@ 0x37
 800067e:	f000 faf8 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000682:	2007      	movs	r0, #7
 8000684:	f000 faf5 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000688:	2010      	movs	r0, #16
 800068a:	f000 faf2 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800068e:	2003      	movs	r0, #3
 8000690:	f000 faef 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000694:	200e      	movs	r0, #14
 8000696:	f000 faec 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800069a:	2009      	movs	r0, #9
 800069c:	f000 fae9 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fae6 	bl	8000c72 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80006a6:	20e1      	movs	r0, #225	@ 0xe1
 80006a8:	f000 fad4 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fae0 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80006b2:	200e      	movs	r0, #14
 80006b4:	f000 fadd 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80006b8:	2014      	movs	r0, #20
 80006ba:	f000 fada 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80006be:	2003      	movs	r0, #3
 80006c0:	f000 fad7 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80006c4:	2011      	movs	r0, #17
 80006c6:	f000 fad4 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80006ca:	2007      	movs	r0, #7
 80006cc:	f000 fad1 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006d0:	2031      	movs	r0, #49	@ 0x31
 80006d2:	f000 face 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80006d6:	20c1      	movs	r0, #193	@ 0xc1
 80006d8:	f000 facb 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006dc:	2048      	movs	r0, #72	@ 0x48
 80006de:	f000 fac8 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006e2:	2008      	movs	r0, #8
 80006e4:	f000 fac5 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006e8:	200f      	movs	r0, #15
 80006ea:	f000 fac2 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006ee:	200c      	movs	r0, #12
 80006f0:	f000 fabf 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006f4:	2031      	movs	r0, #49	@ 0x31
 80006f6:	f000 fabc 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006fa:	2036      	movs	r0, #54	@ 0x36
 80006fc:	f000 fab9 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000700:	200f      	movs	r0, #15
 8000702:	f000 fab6 	bl	8000c72 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8000706:	2011      	movs	r0, #17
 8000708:	f000 faa4 	bl	8000c54 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800070c:	2029      	movs	r0, #41	@ 0x29
 800070e:	f000 faa1 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8000712:	202c      	movs	r0, #44	@ 0x2c
 8000714:	f000 faad 	bl	8000c72 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f83d 	bl	8000798 <ILI9341_Set_Rotation>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	2301      	movs	r3, #1
 8000732:	2201      	movs	r2, #1
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <ILI9341_SPI_Send+0x20>)
 8000736:	f00a fe60 	bl	800b3fa <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20006f54 	.word	0x20006f54

08000748 <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	RESET_ON;
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000752:	4810      	ldr	r0, [pc, #64]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000754:	f007 fc7c 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000758:	2032      	movs	r0, #50	@ 0x32
 800075a:	f006 fe75 	bl	8007448 <HAL_Delay>
	RESET_OFF;
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000766:	f007 fc73 	bl	8008050 <HAL_GPIO_WritePin>
	CS_ON;
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000772:	f007 fc6d 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f006 fe66 	bl	8007448 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fa69 	bl	8000c54 <ILI9341_Send_Command>
	CS_OFF;
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <ILI9341_Reset+0x4c>)
 800078a:	f007 fc61 	bl	8008050 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020c00 	.word	0x40020c00

08000798 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 80007a2:	2036      	movs	r0, #54	@ 0x36
 80007a4:	f000 fa56 	bl	8000c54 <ILI9341_Send_Command>
	switch (rotation) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d836      	bhi.n	800081c <ILI9341_Set_Rotation+0x84>
 80007ae:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <ILI9341_Set_Rotation+0x1c>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007c5 	.word	0x080007c5
 80007b8:	080007db 	.word	0x080007db
 80007bc:	080007f1 	.word	0x080007f1
 80007c0:	08000807 	.word	0x08000807
	case 0:
		ILI9341_Send_Data(0x48);
 80007c4:	2048      	movs	r0, #72	@ 0x48
 80007c6:	f000 fa54 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007cc:	22f0      	movs	r2, #240	@ 0xf0
 80007ce:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		break;
 80007d8:	e020      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80007da:	2028      	movs	r0, #40	@ 0x28
 80007dc:	f000 fa49 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007e6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007ea:	22f0      	movs	r2, #240	@ 0xf0
 80007ec:	601a      	str	r2, [r3, #0]
		break;
 80007ee:	e015      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007f0:	2088      	movs	r0, #136	@ 0x88
 80007f2:	f000 fa3e 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007f8:	22f0      	movs	r2, #240	@ 0xf0
 80007fa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000802:	601a      	str	r2, [r3, #0]
		break;
 8000804:	e00a      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 8000806:	20e8      	movs	r0, #232	@ 0xe8
 8000808:	f000 fa33 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 320;
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 800080e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000812:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 8000816:	22f0      	movs	r2, #240	@ 0xf0
 8000818:	601a      	str	r2, [r3, #0]
		break;
 800081a:	bf00      	nop
	}
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000004 	.word	0x20000004

0800082c <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083e:	4817      	ldr	r0, [pc, #92]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 8000840:	f007 fc06 	bl	8008050 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084a:	4814      	ldr	r0, [pc, #80]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 800084c:	f007 fc00 	bl	8008050 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff66 	bl	8000724 <ILI9341_SPI_Send>

	DC_DATA;
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085e:	480f      	ldr	r0, [pc, #60]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 8000860:	f007 fbf6 	bl	8008050 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0e1b      	lsrs	r3, r3, #24
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff5a 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff54 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff4e 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff49 	bl	8000724 <ILI9341_SPI_Send>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00

080008a0 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	617b      	str	r3, [r7, #20]
	t |= x2;
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4313      	orrs	r3, r2
 80008be:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 80008c0:	6979      	ldr	r1, [r7, #20]
 80008c2:	202a      	movs	r0, #42	@ 0x2a
 80008c4:	f7ff ffb2 	bl	800082c <ILI9341_SPI_Send_32>
	t = y1;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	617b      	str	r3, [r7, #20]
	t |= y2;
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80008da:	6979      	ldr	r1, [r7, #20]
 80008dc:	202b      	movs	r0, #43	@ 0x2b
 80008de:	f7ff ffa5 	bl	800082c <ILI9341_SPI_Send_32>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <ILI9341_Fill_Screen+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <ILI9341_Fill_Screen+0x44>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ffcc 	bl	80008a0 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	b29b      	uxth	r3, r3
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <ILI9341_Fill_Screen+0x40>)
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	4611      	mov	r1, r2
 8000912:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <ILI9341_Fill_Screen+0x44>)
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	fb01 f202 	mul.w	r2, r1, r2
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f9b7 	bl	8000c90 <ILI9341_Send_Burst>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004

08000934 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db31      	blt.n	80009aa <ILI9341_Draw_Pixel+0x76>
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db2e      	blt.n	80009aa <ILI9341_Draw_Pixel+0x76>
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <ILI9341_Draw_Pixel+0x80>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	d229      	bcs.n	80009aa <ILI9341_Draw_Pixel+0x76>
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <ILI9341_Draw_Pixel+0x84>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d224      	bcs.n	80009aa <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <ILI9341_Draw_Pixel+0x80>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <ILI9341_Draw_Pixel+0x84>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3b01      	subs	r3, #1
 8000970:	f7ff ff96 	bl	80008a0 <ILI9341_Set_Address>
	DC_COMMAND;
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097a:	4810      	ldr	r0, [pc, #64]	@ (80009bc <ILI9341_Draw_Pixel+0x88>)
 800097c:	f007 fb68 	bl	8008050 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000980:	202c      	movs	r0, #44	@ 0x2c
 8000982:	f7ff fecf 	bl	8000724 <ILI9341_SPI_Send>
	DC_DATA;
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098c:	480b      	ldr	r0, [pc, #44]	@ (80009bc <ILI9341_Draw_Pixel+0x88>)
 800098e:	f007 fb5f 	bl	8008050 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fec3 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff febe 	bl	8000724 <ILI9341_SPI_Send>
 80009a8:	e000      	b.n	80009ac <ILI9341_Draw_Pixel+0x78>
		return;
 80009aa:	bf00      	nop
}
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f7ff ff63 	bl	80008a0 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	b298      	uxth	r0, r3
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	4619      	mov	r1, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	fb01 f303 	mul.w	r3, r1, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	f000 f94b 	bl	8000c90 <ILI9341_Send_Burst>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b08c      	sub	sp, #48	@ 0x30
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1acb      	subs	r3, r1, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bfb8      	it	lt
 8000a28:	425b      	neglt	r3, r3
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	bfcc      	ite	gt
 8000a2e:	2301      	movgt	r3, #1
 8000a30:	2300      	movle	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24

	if (steep)
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00d      	beq.n	8000a58 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000a48:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	843b      	strh	r3, [r7, #32]
 8000a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a56:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	if(x1>x2)
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d90d      	bls.n	8000a7c <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	83fb      	strh	r3, [r7, #30]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a6c:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	83bb      	strh	r3, [r7, #28]
 8000a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bfb8      	it	lt
 8000a8e:	425b      	neglt	r3, r3
 8000a90:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	0fda      	lsrs	r2, r3, #31
 8000a96:	4413      	add	r3, r2
 8000a98:	105b      	asrs	r3, r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ystep;
	if(y1 < y2)
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d202      	bcs.n	8000aaa <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	e023      	b.n	8000af2 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	for (; x1 <= x2; x1++)
 8000ab0:	e01f      	b.n	8000af2 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff38 	bl	8000934 <ILI9341_Draw_Pixel>
 8000ac4:	e005      	b.n	8000ad2 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff31 	bl	8000934 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (err < 0)
 8000ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	da05      	bge.n	8000aec <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
			err = dx;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (; x1 <= x2; x1++)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d9db      	bls.n	8000ab2 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	@ 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b12:	7f3b      	ldrb	r3, [r7, #28]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d061      	beq.n	8000bdc <ILI9341_Draw_String+0xd8>
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	f300 8092 	bgt.w	8000c42 <ILI9341_Draw_String+0x13e>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d028      	beq.n	8000b74 <ILI9341_Draw_String+0x70>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d02b      	beq.n	8000b7e <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b26:	e08c      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b28:	7f3b      	ldrb	r3, [r7, #28]
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	441a      	add	r2, r3
 8000b32:	4b46      	ldr	r3, [pc, #280]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d907      	bls.n	8000b4a <ILI9341_Draw_String+0x46>
				x = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b3e:	7f3b      	ldrb	r3, [r7, #28]
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	461a      	mov	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4413      	add	r3, r2
 8000b48:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	7f3a      	ldrb	r2, [r7, #28]
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	f000 f95a 	bl	8000e14 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	3b02      	subs	r3, #2
 8000b6c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3301      	adds	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1d5      	bne.n	8000b28 <ILI9341_Draw_String+0x24>
	break;
 8000b7c:	e061      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b7e:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b84:	e025      	b.n	8000bd2 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b86:	7f3b      	ldrb	r3, [r7, #28]
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	441a      	add	r2, r3
 8000b90:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d907      	bls.n	8000ba8 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b9c:	7f3b      	ldrb	r3, [r7, #28]
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	7f3a      	ldrb	r2, [r7, #28]
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	f000 f92b 	bl	8000e14 <ILI9341_Draw_Char>
			x += hh*8;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1d5      	bne.n	8000b86 <ILI9341_Draw_String+0x82>
	break;
 8000bda:	e032      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000be2:	e029      	b.n	8000c38 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000be4:	7f3b      	ldrb	r3, [r7, #28]
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	461a      	mov	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	441a      	add	r2, r3
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d907      	bls.n	8000c06 <ILI9341_Draw_String+0x102>
				x = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4413      	add	r3, r2
 8000c04:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	7f3a      	ldrb	r2, [r7, #28]
 8000c10:	9201      	str	r2, [sp, #4]
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f000 f8fc 	bl	8000e14 <ILI9341_Draw_Char>
			x += hh*10;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1d1      	bne.n	8000be4 <ILI9341_Draw_String+0xe0>
	break;
 8000c40:	bf00      	nop
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	200001a4 	.word	0x200001a4

08000c54 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c5e:	f000 fa09 	bl	8001074 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd5d 	bl	8000724 <ILI9341_SPI_Send>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c7c:	f000 f9e8 	bl	8001050 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd4e 	bl	8000724 <ILI9341_SPI_Send>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	733b      	strb	r3, [r7, #12]
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cae:	4858      	ldr	r0, [pc, #352]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cb0:	f007 f9ce 	bl	8008050 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cba:	4855      	ldr	r0, [pc, #340]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cbc:	f007 f9c8 	bl	8008050 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cc0:	202c      	movs	r0, #44	@ 0x2c
 8000cc2:	f7ff fd2f 	bl	8000724 <ILI9341_SPI_Send>
	DC_DATA;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ccc:	4850      	ldr	r0, [pc, #320]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cce:	f007 f9bf 	bl	8008050 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cd2:	7b3b      	ldrb	r3, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd25 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd21 	bl	8000724 <ILI9341_SPI_Send>
	len--;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cee:	7b3a      	ldrb	r2, [r7, #12]
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d169      	bne.n	8000dca <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cf6:	e027      	b.n	8000d48 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd10 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fd0c 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fd08 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd04 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd00 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d24:	7afb      	ldrb	r3, [r7, #11]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcfc 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fcf8 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcf4 	bl	8000724 <ILI9341_SPI_Send>
			} while (--i);
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	737b      	strb	r3, [r7, #13]
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1d9      	bne.n	8000cfc <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	81fa      	strh	r2, [r7, #14]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1d2      	bne.n	8000cf8 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d5a:	737b      	strb	r3, [r7, #13]
 8000d5c:	e007      	b.n	8000d6e <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fcdf 	bl	8000724 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcdb 	bl	8000724 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	7b7b      	ldrb	r3, [r7, #13]
 8000d70:	1e5a      	subs	r2, r3, #1
 8000d72:	737a      	strb	r2, [r7, #13]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f2      	bne.n	8000d5e <ILI9341_Send_Burst+0xce>
 8000d78:	e03f      	b.n	8000dfa <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d7e:	7b3b      	ldrb	r3, [r7, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fccf 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fccb 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcc7 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcc3 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fcbf 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fcbb 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dae:	7b3b      	ldrb	r3, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fcb7 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fcb3 	bl	8000724 <ILI9341_SPI_Send>
			} while (--i);
 8000dbe:	7b7b      	ldrb	r3, [r7, #13]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	737b      	strb	r3, [r7, #13]
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1d9      	bne.n	8000d7e <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	1e5a      	subs	r2, r3, #1
 8000dce:	81fa      	strh	r2, [r7, #14]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1d2      	bne.n	8000d7a <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ddc:	737b      	strb	r3, [r7, #13]
 8000dde:	e007      	b.n	8000df0 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc9e 	bl	8000724 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fc9a 	bl	8000724 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	7b7b      	ldrb	r3, [r7, #13]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	737a      	strb	r2, [r7, #13]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f2      	bne.n	8000de0 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000e02:	f007 f925 	bl	8008050 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40020c00 	.word	0x40020c00

08000e14 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	f000 80b2 	beq.w	8000f90 <ILI9341_Draw_Char+0x17c>
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	f300 8104 	bgt.w	800103a <ILI9341_Draw_Char+0x226>
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d002      	beq.n	8000e3c <ILI9341_Draw_Char+0x28>
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d055      	beq.n	8000ee6 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e3a:	e0fe      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3305      	adds	r3, #5
 8000e44:	461a      	mov	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3308      	adds	r3, #8
 8000e4a:	f7ff fd29 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e54:	487b      	ldr	r0, [pc, #492]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000e56:	f007 f8fb 	bl	8008050 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e5a:	202c      	movs	r0, #44	@ 0x2c
 8000e5c:	f7ff fc62 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e66:	4877      	ldr	r0, [pc, #476]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000e68:	f007 f8f2 	bl	8008050 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	e035      	b.n	8000ede <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e72:	2302      	movs	r3, #2
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e02c      	b.n	8000ed2 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e7c:	3b20      	subs	r3, #32
 8000e7e:	4a72      	ldr	r2, [pc, #456]	@ (8001048 <ILI9341_Draw_Char+0x234>)
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	441a      	add	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	fa42 f303 	asr.w	r3, r2, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc3d 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fc38 	bl	8000724 <ILI9341_SPI_Send>
 8000eb4:	e00a      	b.n	8000ecc <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc31 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fc2c 	bl	8000724 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	ddcf      	ble.n	8000e78 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	3301      	adds	r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	ddc6      	ble.n	8000e72 <ILI9341_Draw_Char+0x5e>
			break;
 8000ee4:	e0a9      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3307      	adds	r3, #7
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	f7ff fcd4 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efe:	4851      	ldr	r0, [pc, #324]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000f00:	f007 f8a6 	bl	8008050 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f04:	202c      	movs	r0, #44	@ 0x2c
 8000f06:	f7ff fc0d 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f10:	484c      	ldr	r0, [pc, #304]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000f12:	f007 f89d 	bl	8008050 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	e035      	b.n	8000f88 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e02c      	b.n	8000f7c <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f26:	3b20      	subs	r3, #32
 8000f28:	4a48      	ldr	r2, [pc, #288]	@ (800104c <ILI9341_Draw_Char+0x238>)
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	441a      	add	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f1c3 0307 	rsb	r3, r3, #7
 8000f3c:	fa42 f303 	asr.w	r3, r2, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00b      	beq.n	8000f60 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fbe8 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbe3 	bl	8000724 <ILI9341_SPI_Send>
 8000f5e:	e00a      	b.n	8000f76 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fbdc 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fbd7 	bl	8000724 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	ddcf      	ble.n	8000f22 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	3301      	adds	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	ddc6      	ble.n	8000f1c <ILI9341_Draw_Char+0x108>
		break;
 8000f8e:	e054      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3309      	adds	r3, #9
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3310      	adds	r3, #16
 8000f9e:	f7ff fc7f 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa8:	4826      	ldr	r0, [pc, #152]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000faa:	f007 f851 	bl	8008050 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fae:	202c      	movs	r0, #44	@ 0x2c
 8000fb0:	f7ff fbb8 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fba:	4822      	ldr	r0, [pc, #136]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000fbc:	f007 f848 	bl	8008050 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e035      	b.n	8001032 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e02c      	b.n	8001026 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <ILI9341_Draw_Char+0x238>)
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	441a      	add	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	fa42 f303 	asr.w	r3, r2, r3
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fb93 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fb8e 	bl	8000724 <ILI9341_SPI_Send>
 8001008:	e00a      	b.n	8001020 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fb87 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fb82 	bl	8000724 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b07      	cmp	r3, #7
 800102a:	ddcf      	ble.n	8000fcc <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3301      	adds	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b1d      	cmp	r3, #29
 8001036:	ddc6      	ble.n	8000fc6 <ILI9341_Draw_Char+0x1b2>
		break;
 8001038:	bf00      	nop
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020c00 	.word	0x40020c00
 8001048:	0800ebb0 	.word	0x0800ebb0
 800104c:	0800ee88 	.word	0x0800ee88

08001050 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <Before_Sending_Data+0x20>)
 800105c:	f006 fff8 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001066:	4802      	ldr	r0, [pc, #8]	@ (8001070 <Before_Sending_Data+0x20>)
 8001068:	f006 fff2 	bl	8008050 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020c00 	.word	0x40020c00

08001074 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <Before_Sending_Command+0x20>)
 8001080:	f006 ffe6 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800108a:	4802      	ldr	r0, [pc, #8]	@ (8001094 <Before_Sending_Command+0x20>)
 800108c:	f006 ffe0 	bl	8008050 <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020c00 	.word	0x40020c00

08001098 <Si468x_dab_init>:

static uint16_t rssi_hi_res;


void Si468x_dab_init()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 800109c:	2101      	movs	r1, #1
 800109e:	4828      	ldr	r0, [pc, #160]	@ (8001140 <Si468x_dab_init+0xa8>)
 80010a0:	f002 fcbc 	bl	8003a1c <send_debug_msg>
	Si468x_reset();
 80010a4:	f000 f84e 	bl	8001144 <Si468x_reset>
	Si468x_power_up();
 80010a8:	f000 f868 	bl	800117c <Si468x_power_up>
	Si468x_bootloader_load_host();
 80010ac:	f000 f8ea 	bl	8001284 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_6_0_9_START_ADDR);
 80010b0:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 80010b4:	f000 f95a 	bl	800136c <Si468x_firmware_load_flash>
	Si468x_boot();
 80010b8:	f000 f9f8 	bl	80014ac <Si468x_boot>
	Si468x_get_part_info();
 80010bc:	f000 fbb0 	bl	8001820 <Si468x_get_part_info>
	Si468x_get_sys_state();
 80010c0:	f000 fb28 	bl	8001714 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, dla FM dać 0x00 (otwarty), dla DAB 0x01 (zamkniety)
 80010c4:	2101      	movs	r1, #1
 80010c6:	f241 7012 	movw	r0, #5906	@ 0x1712
 80010ca:	f000 fc17 	bl	80018fc <Si468x_set_property>
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF468); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5. Wartość z kalibracji DAB: 0xF468 (-2968)
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x250); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3. Wartość z kalibracji DAB: 0x0250 (592)
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x5); 				//prog RSSI od kiedy łapie kanał, default 12
 80010ce:	2105      	movs	r1, #5
 80010d0:	f24b 2001 	movw	r0, #45569	@ 0xb201
 80010d4:	f000 fc12 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010d8:	2130      	movs	r1, #48	@ 0x30
 80010da:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 80010de:	f000 fc0d 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010e2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80010e6:	f24b 2002 	movw	r0, #45570	@ 0xb202
 80010ea:	f000 fc07 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta. bylo 0x4005
 80010ee:	f244 0105 	movw	r1, #16389	@ 0x4005
 80010f2:	f44f 4034 	mov.w	r0, #46080	@ 0xb400
 80010f6:	f000 fc01 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010fa:	2101      	movs	r1, #1
 80010fc:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8001100:	f000 fbfc 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001104:	2101      	movs	r1, #1
 8001106:	f24b 3002 	movw	r0, #45826	@ 0xb302
 800110a:	f000 fbf7 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 800110e:	2101      	movs	r1, #1
 8001110:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8001114:	f000 fbf2 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001118:	2105      	movs	r1, #5
 800111a:	f24b 5001 	movw	r0, #46337	@ 0xb501
 800111e:	f000 fbed 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001122:	f24e 21c4 	movw	r1, #58052	@ 0xe2c4
 8001126:	f24b 5003 	movw	r0, #46339	@ 0xb503
 800112a:	f000 fbe7 	bl	80018fc <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800112e:	2101      	movs	r1, #1
 8001130:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 8001134:	f000 fbe2 	bl	80018fc <Si468x_set_property>
	//Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001138:	f000 faec 	bl	8001714 <Si468x_get_sys_state>

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	0800d5b0 	.word	0x0800d5b0

08001144 <Si468x_reset>:

void Si468x_reset()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001148:	2101      	movs	r1, #1
 800114a:	480a      	ldr	r0, [pc, #40]	@ (8001174 <Si468x_reset+0x30>)
 800114c:	f002 fc66 	bl	8003a1c <send_debug_msg>
	RESET_PIN_LOW;
 8001150:	2200      	movs	r2, #0
 8001152:	2120      	movs	r1, #32
 8001154:	4808      	ldr	r0, [pc, #32]	@ (8001178 <Si468x_reset+0x34>)
 8001156:	f006 ff7b 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800115a:	2064      	movs	r0, #100	@ 0x64
 800115c:	f006 f974 	bl	8007448 <HAL_Delay>
	RESET_PIN_HIGH;
 8001160:	2201      	movs	r2, #1
 8001162:	2120      	movs	r1, #32
 8001164:	4804      	ldr	r0, [pc, #16]	@ (8001178 <Si468x_reset+0x34>)
 8001166:	f006 ff73 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800116a:	20c8      	movs	r0, #200	@ 0xc8
 800116c:	f006 f96c 	bl	8007448 <HAL_Delay>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0800d600 	.word	0x0800d600
 8001178:	40020800 	.word	0x40020800

0800117c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001180:	2101      	movs	r1, #1
 8001182:	4826      	ldr	r0, [pc, #152]	@ (800121c <Si468x_power_up+0xa0>)
 8001184:	f002 fc4a 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001188:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <Si468x_power_up+0xa4>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800118e:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <Si468x_power_up+0xa4>)
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001194:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <Si468x_power_up+0xa4>)
 8001196:	2217      	movs	r2, #23
 8001198:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <Si468x_power_up+0xa4>)
 800119c:	2250      	movs	r2, #80	@ 0x50
 800119e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <Si468x_power_up+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 80011a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <Si468x_power_up+0xa4>)
 80011a8:	22f8      	movs	r2, #248	@ 0xf8
 80011aa:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <Si468x_power_up+0xa4>)
 80011ae:	2224      	movs	r2, #36	@ 0x24
 80011b0:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <Si468x_power_up+0xa4>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <Si468x_power_up+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <Si468x_power_up+0xa4>)
 80011c0:	2210      	movs	r2, #16
 80011c2:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <Si468x_power_up+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <Si468x_power_up+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <Si468x_power_up+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011d6:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <Si468x_power_up+0xa4>)
 80011d8:	2228      	movs	r2, #40	@ 0x28
 80011da:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011dc:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <Si468x_power_up+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <Si468x_power_up+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011e8:	490d      	ldr	r1, [pc, #52]	@ (8001220 <Si468x_power_up+0xa4>)
 80011ea:	2010      	movs	r0, #16
 80011ec:	f000 fa58 	bl	80016a0 <Si468x_write_command>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <Si468x_power_up+0xa8>)
 80011f6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f006 f925 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011fe:	490a      	ldr	r1, [pc, #40]	@ (8001228 <Si468x_power_up+0xac>)
 8001200:	2005      	movs	r0, #5
 8001202:	f000 fa6f 	bl	80016e4 <Si468x_read_reply>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <Si468x_power_up+0xa8>)
 800120c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800120e:	2101      	movs	r1, #1
 8001210:	4806      	ldr	r0, [pc, #24]	@ (800122c <Si468x_power_up+0xb0>)
 8001212:	f002 fc03 	bl	8003a1c <send_debug_msg>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800d614 	.word	0x0800d614
 8001220:	200001a8 	.word	0x200001a8
 8001224:	20003510 	.word	0x20003510
 8001228:	200011a8 	.word	0x200011a8
 800122c:	0800d650 	.word	0x0800d650

08001230 <Si468x_load_init>:

void Si468x_load_init()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001234:	2101      	movs	r1, #1
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <Si468x_load_init+0x44>)
 8001238:	f002 fbf0 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <Si468x_load_init+0x48>)
 800123e:	2206      	movs	r2, #6
 8001240:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <Si468x_load_init+0x48>)
 8001244:	2200      	movs	r2, #0
 8001246:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001248:	490b      	ldr	r1, [pc, #44]	@ (8001278 <Si468x_load_init+0x48>)
 800124a:	2002      	movs	r0, #2
 800124c:	f000 fa28 	bl	80016a0 <Si468x_write_command>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <Si468x_load_init+0x4c>)
 8001256:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f006 f8f5 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <Si468x_load_init+0x50>)
 8001260:	2005      	movs	r0, #5
 8001262:	f000 fa3f 	bl	80016e4 <Si468x_read_reply>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <Si468x_load_init+0x4c>)
 800126c:	701a      	strb	r2, [r3, #0]
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800d670 	.word	0x0800d670
 8001278:	200001a8 	.word	0x200001a8
 800127c:	20003510 	.word	0x20003510
 8001280:	200011a8 	.word	0x200011a8

08001284 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800128a:	2101      	movs	r1, #1
 800128c:	4830      	ldr	r0, [pc, #192]	@ (8001350 <Si468x_bootloader_load_host+0xcc>)
 800128e:	f002 fbc5 	bl	8003a1c <send_debug_msg>
	Si468x_load_init();
 8001292:	f7ff ffcd 	bl	8001230 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001296:	f241 63a4 	movw	r3, #5796	@ 0x16a4
 800129a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <Si468x_bootloader_load_host+0xd0>)
 800129e:	2204      	movs	r2, #4
 80012a0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <Si468x_bootloader_load_host+0xd0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <Si468x_bootloader_load_host+0xd0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012ae:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <Si468x_bootloader_load_host+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	e03e      	b.n	8001338 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	e014      	b.n	80012ea <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 80012c0:	88ba      	ldrh	r2, [r7, #4]
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	4924      	ldr	r1, [pc, #144]	@ (8001358 <Si468x_bootloader_load_host+0xd4>)
 80012c6:	fba1 1303 	umull	r1, r3, r1, r3
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	441a      	add	r2, r3
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	3304      	adds	r3, #4
 80012dc:	491f      	ldr	r1, [pc, #124]	@ (800135c <Si468x_bootloader_load_host+0xd8>)
 80012de:	5c89      	ldrb	r1, [r1, r2]
 80012e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <Si468x_bootloader_load_host+0xd0>)
 80012e2:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	3301      	adds	r3, #1
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001358 <Si468x_bootloader_load_host+0xd4>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	88ba      	ldrh	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3e1      	bcc.n	80012c0 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <Si468x_bootloader_load_host+0xd4>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	3304      	adds	r3, #4
 800130a:	b29b      	uxth	r3, r3
 800130c:	4911      	ldr	r1, [pc, #68]	@ (8001354 <Si468x_bootloader_load_host+0xd0>)
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f9c6 	bl	80016a0 <Si468x_write_command>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <Si468x_bootloader_load_host+0xdc>)
 800131a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f006 f893 	bl	8007448 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001322:	4910      	ldr	r1, [pc, #64]	@ (8001364 <Si468x_bootloader_load_host+0xe0>)
 8001324:	2005      	movs	r0, #5
 8001326:	f000 f9dd 	bl	80016e4 <Si468x_read_reply>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <Si468x_bootloader_load_host+0xdc>)
 8001330:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	3301      	adds	r3, #1
 8001336:	80fb      	strh	r3, [r7, #6]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d9bd      	bls.n	80012ba <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800133e:	2101      	movs	r1, #1
 8001340:	4809      	ldr	r0, [pc, #36]	@ (8001368 <Si468x_bootloader_load_host+0xe4>)
 8001342:	f002 fb6b 	bl	8003a1c <send_debug_msg>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800d688 	.word	0x0800d688
 8001354:	200001a8 	.word	0x200001a8
 8001358:	aaaaaaab 	.word	0xaaaaaaab
 800135c:	0800f478 	.word	0x0800f478
 8001360:	20003510 	.word	0x20003510
 8001364:	200011a8 	.word	0x200011a8
 8001368:	0800d6c4 	.word	0x0800d6c4

0800136c <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001374:	2101      	movs	r1, #1
 8001376:	4845      	ldr	r0, [pc, #276]	@ (800148c <Si468x_firmware_load_flash+0x120>)
 8001378:	f002 fb50 	bl	8003a1c <send_debug_msg>
	Si468x_load_init();
 800137c:	f7ff ff58 	bl	8001230 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001380:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 8001382:	2205      	movs	r2, #5
 8001384:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001386:	4b42      	ldr	r3, [pc, #264]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 8001388:	2200      	movs	r2, #0
 800138a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800138c:	4b40      	ldr	r3, [pc, #256]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 800138e:	2200      	movs	r2, #0
 8001390:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001392:	4b3f      	ldr	r3, [pc, #252]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 8001394:	2200      	movs	r2, #0
 8001396:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b3c      	ldr	r3, [pc, #240]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 800139e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 80013a8:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 80013b2:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0e1b      	lsrs	r3, r3, #24
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 80013bc:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 80013be:	2100      	movs	r1, #0
 80013c0:	4834      	ldr	r0, [pc, #208]	@ (8001494 <Si468x_firmware_load_flash+0x128>)
 80013c2:	f002 fb2b 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013c6:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 80013c8:	791b      	ldrb	r3, [r3, #4]
 80013ca:	2210      	movs	r2, #16
 80013cc:	4932      	ldr	r1, [pc, #200]	@ (8001498 <Si468x_firmware_load_flash+0x12c>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00c f80c 	bl	800d3ec <itoa>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 fb1f 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013de:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	2210      	movs	r2, #16
 80013e4:	492c      	ldr	r1, [pc, #176]	@ (8001498 <Si468x_firmware_load_flash+0x12c>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00c f800 	bl	800d3ec <itoa>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 fb13 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013f6:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 80013f8:	799b      	ldrb	r3, [r3, #6]
 80013fa:	2210      	movs	r2, #16
 80013fc:	4926      	ldr	r1, [pc, #152]	@ (8001498 <Si468x_firmware_load_flash+0x12c>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f00b fff4 	bl	800d3ec <itoa>
 8001404:	4603      	mov	r3, r0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fb07 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 8001410:	79db      	ldrb	r3, [r3, #7]
 8001412:	2210      	movs	r2, #16
 8001414:	4920      	ldr	r1, [pc, #128]	@ (8001498 <Si468x_firmware_load_flash+0x12c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f00b ffe8 	bl	800d3ec <itoa>
 800141c:	4603      	mov	r3, r0
 800141e:	2101      	movs	r1, #1
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fafb 	bl	8003a1c <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 8001428:	2200      	movs	r2, #0
 800142a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 800142e:	2200      	movs	r2, #0
 8001430:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 8001434:	2200      	movs	r2, #0
 8001436:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 800143a:	2200      	movs	r2, #0
 800143c:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800143e:	4914      	ldr	r1, [pc, #80]	@ (8001490 <Si468x_firmware_load_flash+0x124>)
 8001440:	200c      	movs	r0, #12
 8001442:	f000 f92d 	bl	80016a0 <Si468x_write_command>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <Si468x_firmware_load_flash+0x130>)
 800144c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f005 fffa 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001454:	4912      	ldr	r1, [pc, #72]	@ (80014a0 <Si468x_firmware_load_flash+0x134>)
 8001456:	2005      	movs	r0, #5
 8001458:	f000 f944 	bl	80016e4 <Si468x_read_reply>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <Si468x_firmware_load_flash+0x130>)
 8001462:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001464:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <Si468x_firmware_load_flash+0x134>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001470:	2101      	movs	r1, #1
 8001472:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <Si468x_firmware_load_flash+0x138>)
 8001474:	f002 fad2 	bl	8003a1c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001478:	e003      	b.n	8001482 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800147a:	2101      	movs	r1, #1
 800147c:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <Si468x_firmware_load_flash+0x13c>)
 800147e:	f002 facd 	bl	8003a1c <send_debug_msg>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800d6e4 	.word	0x0800d6e4
 8001490:	200001a8 	.word	0x200001a8
 8001494:	0800d720 	.word	0x0800d720
 8001498:	200034d0 	.word	0x200034d0
 800149c:	20003510 	.word	0x20003510
 80014a0:	200011a8 	.word	0x200011a8
 80014a4:	0800d734 	.word	0x0800d734
 80014a8:	0800d744 	.word	0x0800d744

080014ac <Si468x_boot>:

void Si468x_boot()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014b0:	2101      	movs	r1, #1
 80014b2:	4816      	ldr	r0, [pc, #88]	@ (800150c <Si468x_boot+0x60>)
 80014b4:	f002 fab2 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <Si468x_boot+0x64>)
 80014ba:	2207      	movs	r2, #7
 80014bc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <Si468x_boot+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014c4:	4912      	ldr	r1, [pc, #72]	@ (8001510 <Si468x_boot+0x64>)
 80014c6:	2002      	movs	r0, #2
 80014c8:	f000 f8ea 	bl	80016a0 <Si468x_write_command>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <Si468x_boot+0x68>)
 80014d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f005 ffb7 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014da:	490f      	ldr	r1, [pc, #60]	@ (8001518 <Si468x_boot+0x6c>)
 80014dc:	2005      	movs	r0, #5
 80014de:	f000 f901 	bl	80016e4 <Si468x_read_reply>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <Si468x_boot+0x68>)
 80014e8:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <Si468x_boot+0x6c>)
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80014f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80014f4:	d104      	bne.n	8001500 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014f6:	2101      	movs	r1, #1
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <Si468x_boot+0x70>)
 80014fa:	f002 fa8f 	bl	8003a1c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014fe:	e003      	b.n	8001508 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001500:	2101      	movs	r1, #1
 8001502:	4807      	ldr	r0, [pc, #28]	@ (8001520 <Si468x_boot+0x74>)
 8001504:	f002 fa8a 	bl	8003a1c <send_debug_msg>
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	0800d760 	.word	0x0800d760
 8001510:	200001a8 	.word	0x200001a8
 8001514:	20003510 	.word	0x20003510
 8001518:	200011a8 	.word	0x200011a8
 800151c:	0800d79c 	.word	0x0800d79c
 8001520:	0800d7b8 	.word	0x0800d7b8

08001524 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <Si468x_write_single_byte+0x20>)
 8001536:	f009 ff60 	bl	800b3fa <HAL_SPI_Transmit>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20006efc 	.word	0x20006efc

08001548 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001552:	1df9      	adds	r1, r7, #7
 8001554:	2364      	movs	r3, #100	@ 0x64
 8001556:	2201      	movs	r2, #1
 8001558:	4803      	ldr	r0, [pc, #12]	@ (8001568 <Si468x_read_single_byte+0x20>)
 800155a:	f00a f88a 	bl	800b672 <HAL_SPI_Receive>
	return data_buffer;
 800155e:	79fb      	ldrb	r3, [r7, #7]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20006efc 	.word	0x20006efc

0800156c <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	81fb      	strh	r3, [r7, #14]
 800157a:	e01f      	b.n	80015bc <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 800157c:	4916      	ldr	r1, [pc, #88]	@ (80015d8 <Si468x_wait_for_CTS+0x6c>)
 800157e:	2001      	movs	r0, #1
 8001580:	f000 f8b0 	bl	80016e4 <Si468x_read_reply>
		if(rd_reply.cts)
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <Si468x_wait_for_CTS+0x70>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00e      	beq.n	80015b0 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <Si468x_wait_for_CTS+0x70>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 80015a0:	2101      	movs	r1, #1
 80015a2:	480f      	ldr	r0, [pc, #60]	@ (80015e0 <Si468x_wait_for_CTS+0x74>)
 80015a4:	f002 fa3a 	bl	8003a1c <send_debug_msg>
				return COMMAND_ERROR;
 80015a8:	2320      	movs	r3, #32
 80015aa:	e010      	b.n	80015ce <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e00e      	b.n	80015ce <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f005 ff49 	bl	8007448 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	3301      	adds	r3, #1
 80015ba:	81fb      	strh	r3, [r7, #14]
 80015bc:	89fa      	ldrh	r2, [r7, #14]
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3db      	bcc.n	800157c <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015c4:	2101      	movs	r1, #1
 80015c6:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <Si468x_wait_for_CTS+0x78>)
 80015c8:	f002 fa28 	bl	8003a1c <send_debug_msg>
	return TIMEOUT;
 80015cc:	2308      	movs	r3, #8
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200011a8 	.word	0x200011a8
 80015dc:	200035fc 	.word	0x200035fc
 80015e0:	0800d7cc 	.word	0x0800d7cc
 80015e4:	0800d7f4 	.word	0x0800d7f4

080015e8 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015f8:	2200      	movs	r2, #0
 80015fa:	2110      	movs	r1, #16
 80015fc:	480d      	ldr	r0, [pc, #52]	@ (8001634 <Si468x_write_multiple+0x4c>)
 80015fe:	f006 fd27 	bl	8008050 <HAL_GPIO_WritePin>
	while(len--)
 8001602:	e009      	b.n	8001618 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001604:	89fb      	ldrh	r3, [r7, #14]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	81fa      	strh	r2, [r7, #14]
 800160a:	461a      	mov	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff86 	bl	8001524 <Si468x_write_single_byte>
	while(len--)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	1e5a      	subs	r2, r3, #1
 800161c:	80fa      	strh	r2, [r7, #6]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 8001622:	2201      	movs	r2, #1
 8001624:	2110      	movs	r1, #16
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <Si468x_write_multiple+0x4c>)
 8001628:	f006 fd12 	bl	8008050 <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40020800 	.word	0x40020800

08001638 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001648:	2201      	movs	r2, #1
 800164a:	2110      	movs	r1, #16
 800164c:	4813      	ldr	r0, [pc, #76]	@ (800169c <Si468x_read_multiple+0x64>)
 800164e:	f006 fcff 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001652:	2003      	movs	r0, #3
 8001654:	f005 fef8 	bl	8007448 <HAL_Delay>
	CS_PIN_LOW;
 8001658:	2200      	movs	r2, #0
 800165a:	2110      	movs	r1, #16
 800165c:	480f      	ldr	r0, [pc, #60]	@ (800169c <Si468x_read_multiple+0x64>)
 800165e:	f006 fcf7 	bl	8008050 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff ff5e 	bl	8001524 <Si468x_write_single_byte>
	while(len--)
 8001668:	e009      	b.n	800167e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	81fa      	strh	r2, [r7, #14]
 8001670:	461a      	mov	r2, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	189c      	adds	r4, r3, r2
 8001676:	f7ff ff67 	bl	8001548 <Si468x_read_single_byte>
 800167a:	4603      	mov	r3, r0
 800167c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	80fa      	strh	r2, [r7, #6]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001688:	2201      	movs	r2, #1
 800168a:	2110      	movs	r1, #16
 800168c:	4803      	ldr	r0, [pc, #12]	@ (800169c <Si468x_read_multiple+0x64>)
 800168e:	f006 fcdf 	bl	8008050 <HAL_GPIO_WritePin>
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	40020800 	.word	0x40020800

080016a0 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80016b0:	f7ff ff5c 	bl	800156c <Si468x_wait_for_CTS>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <Si468x_write_command+0x24>
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d10a      	bne.n	80016da <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff8d 	bl	80015e8 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016ce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80016d2:	f7ff ff4b 	bl	800156c <Si468x_wait_for_CTS>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	6839      	ldr	r1, [r7, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff9f 	bl	8001638 <Si468x_read_multiple>
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016fa:	4b04      	ldr	r3, [pc, #16]	@ (800170c <Si468x_read_reply+0x28>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <Si468x_read_reply+0x2c>)
 8001700:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200011a8 	.word	0x200011a8
 8001710:	200035fc 	.word	0x200035fc

08001714 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001718:	2101      	movs	r1, #1
 800171a:	4833      	ldr	r0, [pc, #204]	@ (80017e8 <Si468x_get_sys_state+0xd4>)
 800171c:	f002 f97e 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001720:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <Si468x_get_sys_state+0xd8>)
 8001722:	2209      	movs	r2, #9
 8001724:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001726:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <Si468x_get_sys_state+0xd8>)
 8001728:	2200      	movs	r2, #0
 800172a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800172c:	492f      	ldr	r1, [pc, #188]	@ (80017ec <Si468x_get_sys_state+0xd8>)
 800172e:	2002      	movs	r0, #2
 8001730:	f7ff ffb6 	bl	80016a0 <Si468x_write_command>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <Si468x_get_sys_state+0xdc>)
 800173a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f005 fe83 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001742:	492c      	ldr	r1, [pc, #176]	@ (80017f4 <Si468x_get_sys_state+0xe0>)
 8001744:	2005      	movs	r0, #5
 8001746:	f7ff ffcd 	bl	80016e4 <Si468x_read_reply>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <Si468x_get_sys_state+0xdc>)
 8001750:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 8001752:	2100      	movs	r1, #0
 8001754:	4828      	ldr	r0, [pc, #160]	@ (80017f8 <Si468x_get_sys_state+0xe4>)
 8001756:	f002 f961 	bl	8003a1c <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 800175a:	4b26      	ldr	r3, [pc, #152]	@ (80017f4 <Si468x_get_sys_state+0xe0>)
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	2b07      	cmp	r3, #7
 8001760:	d83a      	bhi.n	80017d8 <Si468x_get_sys_state+0xc4>
 8001762:	a201      	add	r2, pc, #4	@ (adr r2, 8001768 <Si468x_get_sys_state+0x54>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001789 	.word	0x08001789
 800176c:	08001793 	.word	0x08001793
 8001770:	0800179d 	.word	0x0800179d
 8001774:	080017a7 	.word	0x080017a7
 8001778:	080017b1 	.word	0x080017b1
 800177c:	080017bb 	.word	0x080017bb
 8001780:	080017c5 	.word	0x080017c5
 8001784:	080017cf 	.word	0x080017cf
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001788:	2101      	movs	r1, #1
 800178a:	481c      	ldr	r0, [pc, #112]	@ (80017fc <Si468x_get_sys_state+0xe8>)
 800178c:	f002 f946 	bl	8003a1c <send_debug_msg>
			break;
 8001790:	e027      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001792:	2101      	movs	r1, #1
 8001794:	481a      	ldr	r0, [pc, #104]	@ (8001800 <Si468x_get_sys_state+0xec>)
 8001796:	f002 f941 	bl	8003a1c <send_debug_msg>
			break;
 800179a:	e022      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 800179c:	2101      	movs	r1, #1
 800179e:	4819      	ldr	r0, [pc, #100]	@ (8001804 <Si468x_get_sys_state+0xf0>)
 80017a0:	f002 f93c 	bl	8003a1c <send_debug_msg>
			break;
 80017a4:	e01d      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 80017a6:	2101      	movs	r1, #1
 80017a8:	4817      	ldr	r0, [pc, #92]	@ (8001808 <Si468x_get_sys_state+0xf4>)
 80017aa:	f002 f937 	bl	8003a1c <send_debug_msg>
			break;
 80017ae:	e018      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017b0:	2101      	movs	r1, #1
 80017b2:	4816      	ldr	r0, [pc, #88]	@ (800180c <Si468x_get_sys_state+0xf8>)
 80017b4:	f002 f932 	bl	8003a1c <send_debug_msg>
			break;
 80017b8:	e013      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017ba:	2101      	movs	r1, #1
 80017bc:	4814      	ldr	r0, [pc, #80]	@ (8001810 <Si468x_get_sys_state+0xfc>)
 80017be:	f002 f92d 	bl	8003a1c <send_debug_msg>
			break;
 80017c2:	e00e      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017c4:	2101      	movs	r1, #1
 80017c6:	4813      	ldr	r0, [pc, #76]	@ (8001814 <Si468x_get_sys_state+0x100>)
 80017c8:	f002 f928 	bl	8003a1c <send_debug_msg>
			break;
 80017cc:	e009      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017ce:	2101      	movs	r1, #1
 80017d0:	4811      	ldr	r0, [pc, #68]	@ (8001818 <Si468x_get_sys_state+0x104>)
 80017d2:	f002 f923 	bl	8003a1c <send_debug_msg>
			break;
 80017d6:	e004      	b.n	80017e2 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017d8:	2101      	movs	r1, #1
 80017da:	4810      	ldr	r0, [pc, #64]	@ (800181c <Si468x_get_sys_state+0x108>)
 80017dc:	f002 f91e 	bl	8003a1c <send_debug_msg>
			break;
 80017e0:	bf00      	nop
	}
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	0800d804 	.word	0x0800d804
 80017ec:	200001a8 	.word	0x200001a8
 80017f0:	20003510 	.word	0x20003510
 80017f4:	200011a8 	.word	0x200011a8
 80017f8:	0800d840 	.word	0x0800d840
 80017fc:	0800d84c 	.word	0x0800d84c
 8001800:	0800d864 	.word	0x0800d864
 8001804:	0800d87c 	.word	0x0800d87c
 8001808:	0800d894 	.word	0x0800d894
 800180c:	0800d8bc 	.word	0x0800d8bc
 8001810:	0800d8d8 	.word	0x0800d8d8
 8001814:	0800d8f0 	.word	0x0800d8f0
 8001818:	0800d90c 	.word	0x0800d90c
 800181c:	0800d924 	.word	0x0800d924

08001820 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001826:	2101      	movs	r1, #1
 8001828:	482c      	ldr	r0, [pc, #176]	@ (80018dc <Si468x_get_part_info+0xbc>)
 800182a:	f002 f8f7 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800182e:	4b2c      	ldr	r3, [pc, #176]	@ (80018e0 <Si468x_get_part_info+0xc0>)
 8001830:	2208      	movs	r2, #8
 8001832:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <Si468x_get_part_info+0xc0>)
 8001836:	2200      	movs	r2, #0
 8001838:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800183a:	4929      	ldr	r1, [pc, #164]	@ (80018e0 <Si468x_get_part_info+0xc0>)
 800183c:	2002      	movs	r0, #2
 800183e:	f7ff ff2f 	bl	80016a0 <Si468x_write_command>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <Si468x_get_part_info+0xc4>)
 8001848:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800184a:	2001      	movs	r0, #1
 800184c:	f005 fdfc 	bl	8007448 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff fe67 	bl	8001524 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001856:	4924      	ldr	r1, [pc, #144]	@ (80018e8 <Si468x_get_part_info+0xc8>)
 8001858:	200a      	movs	r0, #10
 800185a:	f7ff ff43 	bl	80016e4 <Si468x_read_reply>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <Si468x_get_part_info+0xc4>)
 8001864:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001866:	2100      	movs	r1, #0
 8001868:	4820      	ldr	r0, [pc, #128]	@ (80018ec <Si468x_get_part_info+0xcc>)
 800186a:	f002 f8d7 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <Si468x_get_part_info+0xc8>)
 8001870:	791b      	ldrb	r3, [r3, #4]
 8001872:	220a      	movs	r2, #10
 8001874:	491e      	ldr	r1, [pc, #120]	@ (80018f0 <Si468x_get_part_info+0xd0>)
 8001876:	4618      	mov	r0, r3
 8001878:	f00b fdb8 	bl	800d3ec <itoa>
 800187c:	4603      	mov	r3, r0
 800187e:	2101      	movs	r1, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f002 f8cb 	bl	8003a1c <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001886:	2100      	movs	r1, #0
 8001888:	481a      	ldr	r0, [pc, #104]	@ (80018f4 <Si468x_get_part_info+0xd4>)
 800188a:	f002 f8c7 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <Si468x_get_part_info+0xc8>)
 8001890:	795b      	ldrb	r3, [r3, #5]
 8001892:	220a      	movs	r2, #10
 8001894:	4916      	ldr	r1, [pc, #88]	@ (80018f0 <Si468x_get_part_info+0xd0>)
 8001896:	4618      	mov	r0, r3
 8001898:	f00b fda8 	bl	800d3ec <itoa>
 800189c:	4603      	mov	r3, r0
 800189e:	2101      	movs	r1, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 f8bb 	bl	8003a1c <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 80018a6:	2100      	movs	r1, #0
 80018a8:	4813      	ldr	r0, [pc, #76]	@ (80018f8 <Si468x_get_part_info+0xd8>)
 80018aa:	f002 f8b7 	bl	8003a1c <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <Si468x_get_part_info+0xc8>)
 80018b0:	7a5b      	ldrb	r3, [r3, #9]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <Si468x_get_part_info+0xc8>)
 80018b8:	7a12      	ldrb	r2, [r2, #8]
 80018ba:	4413      	add	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	220a      	movs	r2, #10
 80018c2:	490b      	ldr	r1, [pc, #44]	@ (80018f0 <Si468x_get_part_info+0xd0>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f00b fd91 	bl	800d3ec <itoa>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2101      	movs	r1, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 f8a4 	bl	8003a1c <send_debug_msg>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	0800d938 	.word	0x0800d938
 80018e0:	200001a8 	.word	0x200001a8
 80018e4:	20003510 	.word	0x20003510
 80018e8:	200011a8 	.word	0x200011a8
 80018ec:	0800d974 	.word	0x0800d974
 80018f0:	200034d0 	.word	0x200034d0
 80018f4:	0800d984 	.word	0x0800d984
 80018f8:	0800d990 	.word	0x0800d990

080018fc <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	460a      	mov	r2, r1
 8001906:	80fb      	strh	r3, [r7, #6]
 8001908:	4613      	mov	r3, r2
 800190a:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 800190c:	2101      	movs	r1, #1
 800190e:	4832      	ldr	r0, [pc, #200]	@ (80019d8 <Si468x_set_property+0xdc>)
 8001910:	f002 f884 	bl	8003a1c <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001914:	2100      	movs	r1, #0
 8001916:	4831      	ldr	r0, [pc, #196]	@ (80019dc <Si468x_set_property+0xe0>)
 8001918:	f002 f880 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	2210      	movs	r2, #16
 8001920:	492f      	ldr	r1, [pc, #188]	@ (80019e0 <Si468x_set_property+0xe4>)
 8001922:	4618      	mov	r0, r3
 8001924:	f00b fd62 	bl	800d3ec <itoa>
 8001928:	4603      	mov	r3, r0
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f002 f875 	bl	8003a1c <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001932:	2100      	movs	r1, #0
 8001934:	482b      	ldr	r0, [pc, #172]	@ (80019e4 <Si468x_set_property+0xe8>)
 8001936:	f002 f871 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	2210      	movs	r2, #16
 800193e:	4928      	ldr	r1, [pc, #160]	@ (80019e0 <Si468x_set_property+0xe4>)
 8001940:	4618      	mov	r0, r3
 8001942:	f00b fd53 	bl	800d3ec <itoa>
 8001946:	4603      	mov	r3, r0
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f002 f866 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001950:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <Si468x_set_property+0xec>)
 8001952:	2213      	movs	r2, #19
 8001954:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <Si468x_set_property+0xec>)
 8001958:	2200      	movs	r2, #0
 800195a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <Si468x_set_property+0xec>)
 8001962:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	b29b      	uxth	r3, r3
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <Si468x_set_property+0xec>)
 800196e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <Si468x_set_property+0xec>)
 8001976:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <Si468x_set_property+0xec>)
 8001982:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001984:	4918      	ldr	r1, [pc, #96]	@ (80019e8 <Si468x_set_property+0xec>)
 8001986:	2006      	movs	r0, #6
 8001988:	f7ff fe8a 	bl	80016a0 <Si468x_write_command>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <Si468x_set_property+0xf0>)
 8001992:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f005 fd57 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800199a:	4915      	ldr	r1, [pc, #84]	@ (80019f0 <Si468x_set_property+0xf4>)
 800199c:	2005      	movs	r0, #5
 800199e:	f7ff fea1 	bl	80016e4 <Si468x_read_reply>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <Si468x_set_property+0xf0>)
 80019a8:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f825 	bl	80019fc <Si468x_get_property>
 80019b2:	4603      	mov	r3, r0
 80019b4:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019b6:	89fa      	ldrh	r2, [r7, #14]
 80019b8:	88bb      	ldrh	r3, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d104      	bne.n	80019c8 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019be:	2101      	movs	r1, #1
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <Si468x_set_property+0xf8>)
 80019c2:	f002 f82b 	bl	8003a1c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019c6:	e003      	b.n	80019d0 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019c8:	2101      	movs	r1, #1
 80019ca:	480b      	ldr	r0, [pc, #44]	@ (80019f8 <Si468x_set_property+0xfc>)
 80019cc:	f002 f826 	bl	8003a1c <send_debug_msg>
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	0800d9a0 	.word	0x0800d9a0
 80019dc:	0800d9e0 	.word	0x0800d9e0
 80019e0:	200034d0 	.word	0x200034d0
 80019e4:	0800d9f0 	.word	0x0800d9f0
 80019e8:	200001a8 	.word	0x200001a8
 80019ec:	20003510 	.word	0x20003510
 80019f0:	200011a8 	.word	0x200011a8
 80019f4:	0800da0c 	.word	0x0800da0c
 80019f8:	0800da28 	.word	0x0800da28

080019fc <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a06:	2101      	movs	r1, #1
 8001a08:	482a      	ldr	r0, [pc, #168]	@ (8001ab4 <Si468x_get_property+0xb8>)
 8001a0a:	f002 f807 	bl	8003a1c <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4829      	ldr	r0, [pc, #164]	@ (8001ab8 <Si468x_get_property+0xbc>)
 8001a12:	f002 f803 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	2210      	movs	r2, #16
 8001a1a:	4928      	ldr	r1, [pc, #160]	@ (8001abc <Si468x_get_property+0xc0>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00b fce5 	bl	800d3ec <itoa>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2101      	movs	r1, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 fff8 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <Si468x_get_property+0xc4>)
 8001a2e:	2214      	movs	r2, #20
 8001a30:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <Si468x_get_property+0xc4>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <Si468x_get_property+0xc4>)
 8001a3e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <Si468x_get_property+0xc4>)
 8001a4a:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a4c:	491c      	ldr	r1, [pc, #112]	@ (8001ac0 <Si468x_get_property+0xc4>)
 8001a4e:	2004      	movs	r0, #4
 8001a50:	f7ff fe26 	bl	80016a0 <Si468x_write_command>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <Si468x_get_property+0xc8>)
 8001a5a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f005 fcf3 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a62:	4919      	ldr	r1, [pc, #100]	@ (8001ac8 <Si468x_get_property+0xcc>)
 8001a64:	2006      	movs	r0, #6
 8001a66:	f7ff fe3d 	bl	80016e4 <Si468x_read_reply>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <Si468x_get_property+0xc8>)
 8001a70:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a72:	2100      	movs	r1, #0
 8001a74:	4815      	ldr	r0, [pc, #84]	@ (8001acc <Si468x_get_property+0xd0>)
 8001a76:	f001 ffd1 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <Si468x_get_property+0xcc>)
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <Si468x_get_property+0xcc>)
 8001a82:	7912      	ldrb	r2, [r2, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	2210      	movs	r2, #16
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <Si468x_get_property+0xc0>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00b fcae 	bl	800d3ec <itoa>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f001 ffc1 	bl	8003a1c <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <Si468x_get_property+0xcc>)
 8001a9c:	795b      	ldrb	r3, [r3, #5]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <Si468x_get_property+0xcc>)
 8001aa4:	7912      	ldrb	r2, [r2, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	0800da40 	.word	0x0800da40
 8001ab8:	0800d9e0 	.word	0x0800d9e0
 8001abc:	200034d0 	.word	0x200034d0
 8001ac0:	200001a8 	.word	0x200001a8
 8001ac4:	20003510 	.word	0x20003510
 8001ac8:	200011a8 	.word	0x200011a8
 8001acc:	0800da7c 	.word	0x0800da7c

08001ad0 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t ant_cap)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460a      	mov	r2, r1
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4858      	ldr	r0, [pc, #352]	@ (8001c44 <Si468x_dab_tune_freq+0x174>)
 8001ae4:	f001 ff9a 	bl	8003a1c <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4857      	ldr	r0, [pc, #348]	@ (8001c48 <Si468x_dab_tune_freq+0x178>)
 8001aec:	f001 ff96 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <Si468x_dab_tune_freq+0x17c>)
 8001af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af8:	220a      	movs	r2, #10
 8001afa:	4955      	ldr	r1, [pc, #340]	@ (8001c50 <Si468x_dab_tune_freq+0x180>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00b fc75 	bl	800d3ec <itoa>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 ff88 	bl	8003a1c <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4851      	ldr	r0, [pc, #324]	@ (8001c54 <Si468x_dab_tune_freq+0x184>)
 8001b10:	f001 ff84 	bl	8003a1c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001b14:	4b50      	ldr	r3, [pc, #320]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b16:	22b0      	movs	r2, #176	@ 0xb0
 8001b18:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001b20:	4a4d      	ldr	r2, [pc, #308]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001b26:	4b4c      	ldr	r3, [pc, #304]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	70da      	strb	r2, [r3, #3]

	switch(ant_cap)
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <Si468x_dab_tune_freq+0x88>
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d117      	bne.n	8001b66 <Si468x_dab_tune_freq+0x96>
	{
		case USE_ANT_CAP:
			//use ANT_CAP value from table of best ANTCAP values
			dab_spi_tx_buffer[4] = ant_cap_values[channel] & 0xFF;	//antcap [7:0]
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a48      	ldr	r2, [pc, #288]	@ (8001c5c <Si468x_dab_tune_freq+0x18c>)
 8001b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b45      	ldr	r3, [pc, #276]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b42:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap_values[channel] >> 8;	//antcap [15:8]
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4a45      	ldr	r2, [pc, #276]	@ (8001c5c <Si468x_dab_tune_freq+0x18c>)
 8001b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b41      	ldr	r3, [pc, #260]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b54:	715a      	strb	r2, [r3, #5]
			break;
 8001b56:	e011      	b.n	8001b7c <Si468x_dab_tune_freq+0xac>
		case NOT_USE_ANT_CAP:
			//use algorithm of automatic setting ant_cap value based on tuning values written to Si4684
			dab_spi_tx_buffer[4] = 0x00;	//antcap [7:0]
 8001b58:	4b3f      	ldr	r3, [pc, #252]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = 0x00;	//antcap [15:8]
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	715a      	strb	r2, [r3, #5]
			break;
 8001b64:	e00a      	b.n	8001b7c <Si468x_dab_tune_freq+0xac>
		default:
			//use ant_cap value as argument of this function
			dab_spi_tx_buffer[4] = ant_cap & 0xFF;	//antcap [7:0]
 8001b66:	88bb      	ldrh	r3, [r7, #4]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b6c:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap >> 8;	//antcap [15:8]
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b38      	ldr	r3, [pc, #224]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b78:	715a      	strb	r2, [r3, #5]
			break;
 8001b7a:	bf00      	nop
	}

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b7c:	4936      	ldr	r1, [pc, #216]	@ (8001c58 <Si468x_dab_tune_freq+0x188>)
 8001b7e:	2006      	movs	r0, #6
 8001b80:	f7ff fd8e 	bl	80016a0 <Si468x_write_command>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b35      	ldr	r3, [pc, #212]	@ (8001c60 <Si468x_dab_tune_freq+0x190>)
 8001b8a:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b8c:	4935      	ldr	r1, [pc, #212]	@ (8001c64 <Si468x_dab_tune_freq+0x194>)
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff fda8 	bl	80016e4 <Si468x_read_reply>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <Si468x_dab_tune_freq+0x190>)
 8001b9a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b9c:	4b32      	ldr	r3, [pc, #200]	@ (8001c68 <Si468x_dab_tune_freq+0x198>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <Si468x_dab_tune_freq+0xe2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001baa:	2101      	movs	r1, #1
 8001bac:	482f      	ldr	r0, [pc, #188]	@ (8001c6c <Si468x_dab_tune_freq+0x19c>)
 8001bae:	f001 ff35 	bl	8003a1c <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	81fb      	strh	r3, [r7, #14]
 8001bb6:	e03a      	b.n	8001c2e <Si468x_dab_tune_freq+0x15e>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001bb8:	492a      	ldr	r1, [pc, #168]	@ (8001c64 <Si468x_dab_tune_freq+0x194>)
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7ff fd92 	bl	80016e4 <Si468x_read_reply>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <Si468x_dab_tune_freq+0x190>)
 8001bc6:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <Si468x_dab_tune_freq+0x198>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d01c      	beq.n	8001c10 <Si468x_dab_tune_freq+0x140>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4825      	ldr	r0, [pc, #148]	@ (8001c70 <Si468x_dab_tune_freq+0x1a0>)
 8001bda:	f001 ff1f 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	220a      	movs	r2, #10
 8001be2:	491b      	ldr	r1, [pc, #108]	@ (8001c50 <Si468x_dab_tune_freq+0x180>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00b fc01 	bl	800d3ec <itoa>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 ff14 	bl	8003a1c <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	481f      	ldr	r0, [pc, #124]	@ (8001c74 <Si468x_dab_tune_freq+0x1a4>)
 8001bf8:	f001 ff10 	bl	8003a1c <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <Si468x_dab_tune_freq+0x1a8>)
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <Si468x_dab_tune_freq+0x17c>)
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c78 <Si468x_dab_tune_freq+0x1a8>)
 8001c0c:	6093      	str	r3, [r2, #8]
			break;
 8001c0e:	e014      	b.n	8001c3a <Si468x_dab_tune_freq+0x16a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001c10:	89fb      	ldrh	r3, [r7, #14]
 8001c12:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d103      	bne.n	8001c22 <Si468x_dab_tune_freq+0x152>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4817      	ldr	r0, [pc, #92]	@ (8001c7c <Si468x_dab_tune_freq+0x1ac>)
 8001c1e:	f001 fefd 	bl	8003a1c <send_debug_msg>
		}
		HAL_Delay(1);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f005 fc10 	bl	8007448 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001c28:	89fb      	ldrh	r3, [r7, #14]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	81fb      	strh	r3, [r7, #14]
 8001c2e:	89fb      	ldrh	r3, [r7, #14]
 8001c30:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d9bf      	bls.n	8001bb8 <Si468x_dab_tune_freq+0xe8>
	}
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	0800db34 	.word	0x0800db34
 8001c48:	0800db70 	.word	0x0800db70
 8001c4c:	20003514 	.word	0x20003514
 8001c50:	200034d0 	.word	0x200034d0
 8001c54:	0800daf0 	.word	0x0800daf0
 8001c58:	200001a8 	.word	0x200001a8
 8001c5c:	08010b1c 	.word	0x08010b1c
 8001c60:	20003510 	.word	0x20003510
 8001c64:	200011a8 	.word	0x200011a8
 8001c68:	200035fc 	.word	0x200035fc
 8001c6c:	0800d734 	.word	0x0800d734
 8001c70:	0800db7c 	.word	0x0800db7c
 8001c74:	0800db98 	.word	0x0800db98
 8001c78:	20004bc4 	.word	0x20004bc4
 8001c7c:	0800dba0 	.word	0x0800dba0

08001c80 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c88:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <Si468x_dab_digrad_status+0x9c>)
 8001c8a:	22b2      	movs	r2, #178	@ 0xb2
 8001c8c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c8e:	4b23      	ldr	r3, [pc, #140]	@ (8001d1c <Si468x_dab_digrad_status+0x9c>)
 8001c90:	221a      	movs	r2, #26
 8001c92:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c94:	4921      	ldr	r1, [pc, #132]	@ (8001d1c <Si468x_dab_digrad_status+0x9c>)
 8001c96:	2002      	movs	r0, #2
 8001c98:	f7ff fd02 	bl	80016a0 <Si468x_write_command>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <Si468x_dab_digrad_status+0xa0>)
 8001ca2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f005 fbcf 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001caa:	491e      	ldr	r1, [pc, #120]	@ (8001d24 <Si468x_dab_digrad_status+0xa4>)
 8001cac:	2028      	movs	r0, #40	@ 0x28
 8001cae:	f7ff fd19 	bl	80016e4 <Si468x_read_reply>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <Si468x_dab_digrad_status+0xa0>)
 8001cb8:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001cba:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <Si468x_dab_digrad_status+0xa8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d019      	beq.n	8001cfc <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001cc8:	4a18      	ldr	r2, [pc, #96]	@ (8001d2c <Si468x_dab_digrad_status+0xac>)
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <Si468x_dab_digrad_status+0xa4>)
 8001ccc:	4615      	mov	r5, r2
 8001cce:	1d1c      	adds	r4, r3, #4
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cdc:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <Si468x_dab_digrad_status+0xac>)
 8001ce2:	78db      	ldrb	r3, [r3, #3]
 8001ce4:	2b14      	cmp	r3, #20
 8001ce6:	d902      	bls.n	8001cee <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <Si468x_dab_digrad_status+0xac>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <Si468x_dab_digrad_status+0xac>)
 8001cf0:	795b      	ldrb	r3, [r3, #5]
 8001cf2:	2b36      	cmp	r3, #54	@ 0x36
 8001cf4:	d902      	bls.n	8001cfc <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <Si468x_dab_digrad_status+0xac>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <Si468x_dab_digrad_status+0xac>)
 8001d00:	461c      	mov	r4, r3
 8001d02:	4615      	mov	r5, r2
 8001d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d10:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	200001a8 	.word	0x200001a8
 8001d20:	20003510 	.word	0x20003510
 8001d24:	200011a8 	.word	0x200011a8
 8001d28:	200035fc 	.word	0x200035fc
 8001d2c:	200035d4 	.word	0x200035d4

08001d30 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001d36:	2300      	movs	r3, #0
 8001d38:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001d3e:	2300      	movs	r3, #0
 8001d40:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001d42:	2300      	movs	r3, #0
 8001d44:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001d46:	4ba1      	ldr	r3, [pc, #644]	@ (8001fcc <Si468x_dab_get_digital_service_list+0x29c>)
 8001d48:	2280      	movs	r2, #128	@ 0x80
 8001d4a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001d4c:	4b9f      	ldr	r3, [pc, #636]	@ (8001fcc <Si468x_dab_get_digital_service_list+0x29c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001d52:	499e      	ldr	r1, [pc, #632]	@ (8001fcc <Si468x_dab_get_digital_service_list+0x29c>)
 8001d54:	2002      	movs	r0, #2
 8001d56:	f7ff fca3 	bl	80016a0 <Si468x_write_command>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8001fd0 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d60:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f005 fb70 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001d68:	499a      	ldr	r1, [pc, #616]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d6e:	f7ff fcb9 	bl	80016e4 <Si468x_read_reply>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b96      	ldr	r3, [pc, #600]	@ (8001fd0 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d78:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4896      	ldr	r0, [pc, #600]	@ (8001fd8 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d7e:	f001 fe4d 	bl	8003a1c <send_debug_msg>

	if(rd_reply.err_cmd)
 8001d82:	4b96      	ldr	r3, [pc, #600]	@ (8001fdc <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d90:	2101      	movs	r1, #1
 8001d92:	4893      	ldr	r0, [pc, #588]	@ (8001fe0 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d94:	f001 fe42 	bl	8003a1c <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001d98:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d9a:	791b      	ldrb	r3, [r3, #4]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001da0:	795b      	ldrb	r3, [r3, #5]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001daa:	4b8a      	ldr	r3, [pc, #552]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001dac:	7a1b      	ldrb	r3, [r3, #8]
 8001dae:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	773b      	strb	r3, [r7, #28]
 8001db4:	e24e      	b.n	8002254 <Si468x_dab_get_digital_service_list+0x524>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001db6:	7f3b      	ldrb	r3, [r7, #28]
 8001db8:	4a8a      	ldr	r2, [pc, #552]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001dba:	7892      	ldrb	r2, [r2, #2]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a89      	ldr	r2, [pc, #548]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001dc0:	6892      	ldr	r2, [r2, #8]
 8001dc2:	4989      	ldr	r1, [pc, #548]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dc4:	2034      	movs	r0, #52	@ 0x34
 8001dc6:	fb00 f303 	mul.w	r3, r0, r3
 8001dca:	440b      	add	r3, r1
 8001dcc:	3324      	adds	r3, #36	@ 0x24
 8001dce:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001dd0:	7f3b      	ldrb	r3, [r7, #28]
 8001dd2:	4a84      	ldr	r2, [pc, #528]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001dd4:	7892      	ldrb	r2, [r2, #2]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a82      	ldr	r2, [pc, #520]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001dda:	7b10      	ldrb	r0, [r2, #12]
 8001ddc:	4a82      	ldr	r2, [pc, #520]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dde:	2134      	movs	r1, #52	@ 0x34
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3328      	adds	r3, #40	@ 0x28
 8001de8:	4602      	mov	r2, r0
 8001dea:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001dec:	7fba      	ldrb	r2, [r7, #30]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	f103 0210 	add.w	r2, r3, #16
 8001dfa:	7f7b      	ldrb	r3, [r7, #29]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a74      	ldr	r2, [pc, #464]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e02:	5cd2      	ldrb	r2, [r2, r3]
 8001e04:	7f3b      	ldrb	r3, [r7, #28]
 8001e06:	4977      	ldr	r1, [pc, #476]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e08:	7889      	ldrb	r1, [r1, #2]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f002 0201 	and.w	r2, r2, #1
 8001e10:	b2d0      	uxtb	r0, r2
 8001e12:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e14:	2134      	movs	r1, #52	@ 0x34
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3314      	adds	r3, #20
 8001e1e:	4602      	mov	r2, r0
 8001e20:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001e22:	7fba      	ldrb	r2, [r7, #30]
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	f103 0211 	add.w	r2, r3, #17
 8001e30:	7f7b      	ldrb	r3, [r7, #29]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	4a67      	ldr	r2, [pc, #412]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e38:	5cd2      	ldrb	r2, [r2, r3]
 8001e3a:	7f3b      	ldrb	r3, [r7, #28]
 8001e3c:	4969      	ldr	r1, [pc, #420]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e3e:	7889      	ldrb	r1, [r1, #2]
 8001e40:	440b      	add	r3, r1
 8001e42:	f002 020f 	and.w	r2, r2, #15
 8001e46:	b2d0      	uxtb	r0, r2
 8001e48:	4a67      	ldr	r2, [pc, #412]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e4a:	2134      	movs	r1, #52	@ 0x34
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3329      	adds	r3, #41	@ 0x29
 8001e54:	4602      	mov	r2, r0
 8001e56:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e58:	7f3b      	ldrb	r3, [r7, #28]
 8001e5a:	4a62      	ldr	r2, [pc, #392]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e5c:	7892      	ldrb	r2, [r2, #2]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a61      	ldr	r2, [pc, #388]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e62:	2134      	movs	r1, #52	@ 0x34
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d017      	beq.n	8001ea2 <Si468x_dab_get_digital_service_list+0x172>
		{
			services_count++;
 8001e72:	7fbb      	ldrb	r3, [r7, #30]
 8001e74:	3301      	adds	r3, #1
 8001e76:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001e78:	7f3b      	ldrb	r3, [r7, #28]
 8001e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e7c:	7892      	ldrb	r2, [r2, #2]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a59      	ldr	r2, [pc, #356]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e82:	2134      	movs	r1, #52	@ 0x34
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3329      	adds	r3, #41	@ 0x29
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	7f7b      	ldrb	r3, [r7, #29]
 8001e90:	4413      	add	r3, r2
 8001e92:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001e94:	7f3b      	ldrb	r3, [r7, #28]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	77fb      	strb	r3, [r7, #31]
			continue;
 8001ea0:	e1d5      	b.n	800224e <Si468x_dab_get_digital_service_list+0x51e>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001ea2:	7fba      	ldrb	r2, [r7, #30]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	f103 0210 	add.w	r2, r3, #16
 8001eb0:	7f7b      	ldrb	r3, [r7, #29]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a47      	ldr	r2, [pc, #284]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	105b      	asrs	r3, r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	7f3b      	ldrb	r3, [r7, #28]
 8001ec0:	4948      	ldr	r1, [pc, #288]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001ec2:	7889      	ldrb	r1, [r1, #2]
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f002 021f 	and.w	r2, r2, #31
 8001eca:	b2d0      	uxtb	r0, r2
 8001ecc:	4a46      	ldr	r2, [pc, #280]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ece:	2134      	movs	r1, #52	@ 0x34
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3315      	adds	r3, #21
 8001ed8:	4602      	mov	r2, r0
 8001eda:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001edc:	7f3b      	ldrb	r3, [r7, #28]
 8001ede:	4a41      	ldr	r2, [pc, #260]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001ee0:	7892      	ldrb	r2, [r2, #2]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a40      	ldr	r2, [pc, #256]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ee6:	2134      	movs	r1, #52	@ 0x34
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3314      	adds	r3, #20
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <Si468x_dab_get_digital_service_list+0x1cc>
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d078      	beq.n	8001fec <Si468x_dab_get_digital_service_list+0x2bc>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001efa:	e0ec      	b.n	80020d6 <Si468x_dab_get_digital_service_list+0x3a6>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001efc:	7fba      	ldrb	r2, [r7, #30]
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	f103 020c 	add.w	r2, r3, #12
 8001f0a:	7f7b      	ldrb	r3, [r7, #29]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a30      	ldr	r2, [pc, #192]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	4619      	mov	r1, r3
 8001f16:	7fba      	ldrb	r2, [r7, #30]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	f103 020d 	add.w	r2, r3, #13
 8001f24:	7f7b      	ldrb	r3, [r7, #29]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f2c:	5cd3      	ldrb	r3, [r2, r3]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001f34:	4419      	add	r1, r3
 8001f36:	7f3b      	ldrb	r3, [r7, #28]
 8001f38:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f3a:	7892      	ldrb	r2, [r2, #2]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4608      	mov	r0, r1
 8001f40:	4a29      	ldr	r2, [pc, #164]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f42:	2134      	movs	r1, #52	@ 0x34
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001f4e:	7fba      	ldrb	r2, [r7, #30]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	f103 020d 	add.w	r2, r3, #13
 8001f5c:	7f7b      	ldrb	r3, [r7, #29]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f64:	5cd2      	ldrb	r2, [r2, r3]
 8001f66:	7f3b      	ldrb	r3, [r7, #28]
 8001f68:	491e      	ldr	r1, [pc, #120]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f6a:	7889      	ldrb	r1, [r1, #2]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	0912      	lsrs	r2, r2, #4
 8001f70:	b2d0      	uxtb	r0, r2
 8001f72:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f74:	2134      	movs	r1, #52	@ 0x34
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	331c      	adds	r3, #28
 8001f7e:	4602      	mov	r2, r0
 8001f80:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8001f82:	7f3b      	ldrb	r3, [r7, #28]
 8001f84:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f86:	7892      	ldrb	r2, [r2, #2]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f8c:	2134      	movs	r1, #52	@ 0x34
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	331c      	adds	r3, #28
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	0319      	lsls	r1, r3, #12
 8001f9a:	7f3b      	ldrb	r3, [r7, #28]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f9e:	7892      	ldrb	r2, [r2, #2]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fa4:	2034      	movs	r0, #52	@ 0x34
 8001fa6:	fb00 f303 	mul.w	r3, r0, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	3318      	adds	r3, #24
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	7f3b      	ldrb	r3, [r7, #28]
 8001fb2:	480c      	ldr	r0, [pc, #48]	@ (8001fe4 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001fb4:	7880      	ldrb	r0, [r0, #2]
 8001fb6:	4403      	add	r3, r0
 8001fb8:	440a      	add	r2, r1
 8001fba:	490b      	ldr	r1, [pc, #44]	@ (8001fe8 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fbc:	2034      	movs	r0, #52	@ 0x34
 8001fbe:	fb00 f303 	mul.w	r3, r0, r3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3320      	adds	r3, #32
 8001fc6:	601a      	str	r2, [r3, #0]
				break;
 8001fc8:	e085      	b.n	80020d6 <Si468x_dab_get_digital_service_list+0x3a6>
 8001fca:	bf00      	nop
 8001fcc:	200001a8 	.word	0x200001a8
 8001fd0:	20003510 	.word	0x20003510
 8001fd4:	200011a8 	.word	0x200011a8
 8001fd8:	0800dc00 	.word	0x0800dc00
 8001fdc:	200035fc 	.word	0x200035fc
 8001fe0:	0800d734 	.word	0x0800d734
 8001fe4:	20004bc4 	.word	0x20004bc4
 8001fe8:	20003774 	.word	0x20003774
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8001fec:	7fba      	ldrb	r2, [r7, #30]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	f103 020c 	add.w	r2, r3, #12
 8001ffa:	7f7b      	ldrb	r3, [r7, #29]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	4aa0      	ldr	r2, [pc, #640]	@ (8002284 <Si468x_dab_get_digital_service_list+0x554>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	4619      	mov	r1, r3
 8002006:	7fba      	ldrb	r2, [r7, #30]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	f103 020d 	add.w	r2, r3, #13
 8002014:	7f7b      	ldrb	r3, [r7, #29]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	4a9a      	ldr	r2, [pc, #616]	@ (8002284 <Si468x_dab_get_digital_service_list+0x554>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	4419      	add	r1, r3
 8002022:	7fba      	ldrb	r2, [r7, #30]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	f103 020e 	add.w	r2, r3, #14
 8002030:	7f7b      	ldrb	r3, [r7, #29]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	4a93      	ldr	r2, [pc, #588]	@ (8002284 <Si468x_dab_get_digital_service_list+0x554>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002040:	4419      	add	r1, r3
 8002042:	7f3b      	ldrb	r3, [r7, #28]
 8002044:	4a90      	ldr	r2, [pc, #576]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002046:	7892      	ldrb	r2, [r2, #2]
 8002048:	4413      	add	r3, r2
 800204a:	4608      	mov	r0, r1
 800204c:	4a8f      	ldr	r2, [pc, #572]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 800204e:	2134      	movs	r1, #52	@ 0x34
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3318      	adds	r3, #24
 8002058:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 800205a:	7fba      	ldrb	r2, [r7, #30]
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	f103 020e 	add.w	r2, r3, #14
 8002068:	7f7b      	ldrb	r3, [r7, #29]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	4a85      	ldr	r2, [pc, #532]	@ (8002284 <Si468x_dab_get_digital_service_list+0x554>)
 8002070:	5cd2      	ldrb	r2, [r2, r3]
 8002072:	7f3b      	ldrb	r3, [r7, #28]
 8002074:	4984      	ldr	r1, [pc, #528]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002076:	7889      	ldrb	r1, [r1, #2]
 8002078:	440b      	add	r3, r1
 800207a:	0912      	lsrs	r2, r2, #4
 800207c:	b2d0      	uxtb	r0, r2
 800207e:	4a83      	ldr	r2, [pc, #524]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 8002080:	2134      	movs	r1, #52	@ 0x34
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	331c      	adds	r3, #28
 800208a:	4602      	mov	r2, r0
 800208c:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 800208e:	7f3b      	ldrb	r3, [r7, #28]
 8002090:	4a7d      	ldr	r2, [pc, #500]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002092:	7892      	ldrb	r2, [r2, #2]
 8002094:	4413      	add	r3, r2
 8002096:	4a7d      	ldr	r2, [pc, #500]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 8002098:	2134      	movs	r1, #52	@ 0x34
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	331c      	adds	r3, #28
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	0519      	lsls	r1, r3, #20
 80020a6:	7f3b      	ldrb	r3, [r7, #28]
 80020a8:	4a77      	ldr	r2, [pc, #476]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 80020aa:	7892      	ldrb	r2, [r2, #2]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a77      	ldr	r2, [pc, #476]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 80020b0:	2034      	movs	r0, #52	@ 0x34
 80020b2:	fb00 f303 	mul.w	r3, r0, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3318      	adds	r3, #24
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	7f3b      	ldrb	r3, [r7, #28]
 80020be:	4872      	ldr	r0, [pc, #456]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 80020c0:	7880      	ldrb	r0, [r0, #2]
 80020c2:	4403      	add	r3, r0
 80020c4:	440a      	add	r2, r1
 80020c6:	4971      	ldr	r1, [pc, #452]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 80020c8:	2034      	movs	r0, #52	@ 0x34
 80020ca:	fb00 f303 	mul.w	r3, r0, r3
 80020ce:	440b      	add	r3, r1
 80020d0:	3320      	adds	r3, #32
 80020d2:	601a      	str	r2, [r3, #0]
				break;
 80020d4:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 80020d6:	7fba      	ldrb	r2, [r7, #30]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	f103 0214 	add.w	r2, r3, #20
 80020e4:	7f7b      	ldrb	r3, [r7, #29]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	4a66      	ldr	r2, [pc, #408]	@ (8002284 <Si468x_dab_get_digital_service_list+0x554>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d03f      	beq.n	8002172 <Si468x_dab_get_digital_service_list+0x442>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	76fb      	strb	r3, [r7, #27]
 80020f6:	e038      	b.n	800216a <Si468x_dab_get_digital_service_list+0x43a>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80020f8:	7efb      	ldrb	r3, [r7, #27]
 80020fa:	f103 0114 	add.w	r1, r3, #20
 80020fe:	7fba      	ldrb	r2, [r7, #30]
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	18ca      	adds	r2, r1, r3
 800210a:	7f7b      	ldrb	r3, [r7, #29]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	18d1      	adds	r1, r2, r3
 8002110:	7f3b      	ldrb	r3, [r7, #28]
 8002112:	4a5d      	ldr	r2, [pc, #372]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002114:	7892      	ldrb	r2, [r2, #2]
 8002116:	441a      	add	r2, r3
 8002118:	7efb      	ldrb	r3, [r7, #27]
 800211a:	485a      	ldr	r0, [pc, #360]	@ (8002284 <Si468x_dab_get_digital_service_list+0x554>)
 800211c:	5c44      	ldrb	r4, [r0, r1]
 800211e:	495b      	ldr	r1, [pc, #364]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 8002120:	2034      	movs	r0, #52	@ 0x34
 8002122:	fb00 f202 	mul.w	r2, r0, r2
 8002126:	440a      	add	r2, r1
 8002128:	4413      	add	r3, r2
 800212a:	4622      	mov	r2, r4
 800212c:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 800212e:	7f3b      	ldrb	r3, [r7, #28]
 8002130:	4a55      	ldr	r2, [pc, #340]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002132:	7892      	ldrb	r2, [r2, #2]
 8002134:	441a      	add	r2, r3
 8002136:	7efb      	ldrb	r3, [r7, #27]
 8002138:	4954      	ldr	r1, [pc, #336]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 800213a:	2034      	movs	r0, #52	@ 0x34
 800213c:	fb00 f202 	mul.w	r2, r0, r2
 8002140:	440a      	add	r2, r1
 8002142:	4413      	add	r3, r2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b86      	cmp	r3, #134	@ 0x86
 8002148:	d10c      	bne.n	8002164 <Si468x_dab_get_digital_service_list+0x434>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 800214a:	7f3b      	ldrb	r3, [r7, #28]
 800214c:	4a4e      	ldr	r2, [pc, #312]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 800214e:	7892      	ldrb	r2, [r2, #2]
 8002150:	441a      	add	r2, r3
 8002152:	7efb      	ldrb	r3, [r7, #27]
 8002154:	494d      	ldr	r1, [pc, #308]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 8002156:	2034      	movs	r0, #52	@ 0x34
 8002158:	fb00 f202 	mul.w	r2, r0, r2
 800215c:	440a      	add	r2, r1
 800215e:	4413      	add	r3, r2
 8002160:	226f      	movs	r2, #111	@ 0x6f
 8002162:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002164:	7efb      	ldrb	r3, [r7, #27]
 8002166:	3301      	adds	r3, #1
 8002168:	76fb      	strb	r3, [r7, #27]
 800216a:	7efb      	ldrb	r3, [r7, #27]
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d9c3      	bls.n	80020f8 <Si468x_dab_get_digital_service_list+0x3c8>
 8002170:	e026      	b.n	80021c0 <Si468x_dab_get_digital_service_list+0x490>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 8002172:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <Si468x_dab_get_digital_service_list+0x560>)
 8002174:	463c      	mov	r4, r7
 8002176:	461d      	mov	r5, r3
 8002178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	7023      	strb	r3, [r4, #0]
 8002180:	f107 0311 	add.w	r3, r7, #17
 8002184:	2200      	movs	r2, #0
 8002186:	801a      	strh	r2, [r3, #0]
 8002188:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800218a:	2300      	movs	r3, #0
 800218c:	76bb      	strb	r3, [r7, #26]
 800218e:	e014      	b.n	80021ba <Si468x_dab_get_digital_service_list+0x48a>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 8002190:	7eb9      	ldrb	r1, [r7, #26]
 8002192:	7f3b      	ldrb	r3, [r7, #28]
 8002194:	4a3c      	ldr	r2, [pc, #240]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002196:	7892      	ldrb	r2, [r2, #2]
 8002198:	441a      	add	r2, r3
 800219a:	7ebb      	ldrb	r3, [r7, #26]
 800219c:	3120      	adds	r1, #32
 800219e:	4439      	add	r1, r7
 80021a0:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 80021a4:	4939      	ldr	r1, [pc, #228]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 80021a6:	2034      	movs	r0, #52	@ 0x34
 80021a8:	fb00 f202 	mul.w	r2, r0, r2
 80021ac:	440a      	add	r2, r1
 80021ae:	4413      	add	r3, r2
 80021b0:	4622      	mov	r2, r4
 80021b2:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80021b4:	7ebb      	ldrb	r3, [r7, #26]
 80021b6:	3301      	adds	r3, #1
 80021b8:	76bb      	strb	r3, [r7, #26]
 80021ba:	7ebb      	ldrb	r3, [r7, #26]
 80021bc:	2b0f      	cmp	r3, #15
 80021be:	d9e7      	bls.n	8002190 <Si468x_dab_get_digital_service_list+0x460>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	767b      	strb	r3, [r7, #25]
 80021c4:	e032      	b.n	800222c <Si468x_dab_get_digital_service_list+0x4fc>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 80021c6:	7f3b      	ldrb	r3, [r7, #28]
 80021c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 80021ca:	7892      	ldrb	r2, [r2, #2]
 80021cc:	441a      	add	r2, r3
 80021ce:	7e7b      	ldrb	r3, [r7, #25]
 80021d0:	492e      	ldr	r1, [pc, #184]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 80021d2:	201a      	movs	r0, #26
 80021d4:	fb00 f202 	mul.w	r2, r0, r2
 80021d8:	4413      	add	r3, r2
 80021da:	3314      	adds	r3, #20
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	440b      	add	r3, r1
 80021e0:	2200      	movs	r2, #0
 80021e2:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80021e4:	7fba      	ldrb	r2, [r7, #30]
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80021f2:	7f7b      	ldrb	r3, [r7, #29]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <Si468x_dab_get_digital_service_list+0x554>)
 80021fa:	5cd1      	ldrb	r1, [r2, r3]
 80021fc:	7f3b      	ldrb	r3, [r7, #28]
 80021fe:	4a22      	ldr	r2, [pc, #136]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002200:	7892      	ldrb	r2, [r2, #2]
 8002202:	441a      	add	r2, r3
 8002204:	7e7b      	ldrb	r3, [r7, #25]
 8002206:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800220a:	b2cc      	uxtb	r4, r1
 800220c:	491f      	ldr	r1, [pc, #124]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 800220e:	201a      	movs	r0, #26
 8002210:	fb00 f202 	mul.w	r2, r0, r2
 8002214:	4413      	add	r3, r2
 8002216:	3314      	adds	r3, #20
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	440b      	add	r3, r1
 800221c:	4622      	mov	r2, r4
 800221e:	709a      	strb	r2, [r3, #2]
			components_count++;
 8002220:	7f7b      	ldrb	r3, [r7, #29]
 8002222:	3301      	adds	r3, #1
 8002224:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 8002226:	7e7b      	ldrb	r3, [r7, #25]
 8002228:	3301      	adds	r3, #1
 800222a:	767b      	strb	r3, [r7, #25]
 800222c:	7f3b      	ldrb	r3, [r7, #28]
 800222e:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002230:	7892      	ldrb	r2, [r2, #2]
 8002232:	4413      	add	r3, r2
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <Si468x_dab_get_digital_service_list+0x55c>)
 8002236:	2134      	movs	r1, #52	@ 0x34
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3329      	adds	r3, #41	@ 0x29
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	7e7a      	ldrb	r2, [r7, #25]
 8002244:	429a      	cmp	r2, r3
 8002246:	d3be      	bcc.n	80021c6 <Si468x_dab_get_digital_service_list+0x496>
		}
		services_count++;
 8002248:	7fbb      	ldrb	r3, [r7, #30]
 800224a:	3301      	adds	r3, #1
 800224c:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 800224e:	7f3b      	ldrb	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	773b      	strb	r3, [r7, #28]
 8002254:	7f3a      	ldrb	r2, [r7, #28]
 8002256:	7ffb      	ldrb	r3, [r7, #31]
 8002258:	429a      	cmp	r2, r3
 800225a:	f4ff adac 	bcc.w	8001db6 <Si468x_dab_get_digital_service_list+0x86>
	}

	dab_management.total_services += number_of_services;
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	7ffb      	ldrb	r3, [r7, #31]
 8002264:	4413      	add	r3, r2
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 800226a:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 800226e:	789a      	ldrb	r2, [r3, #2]
 8002270:	7ffb      	ldrb	r3, [r7, #31]
 8002272:	4413      	add	r3, r2
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <Si468x_dab_get_digital_service_list+0x558>)
 8002278:	709a      	strb	r2, [r3, #2]
}
 800227a:	bf00      	nop
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bdb0      	pop	{r4, r5, r7, pc}
 8002282:	bf00      	nop
 8002284:	200011a8 	.word	0x200011a8
 8002288:	20004bc4 	.word	0x20004bc4
 800228c:	20003774 	.word	0x20003774
 8002290:	0800dc3c 	.word	0x0800dc3c

08002294 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 800229e:	2101      	movs	r1, #1
 80022a0:	482d      	ldr	r0, [pc, #180]	@ (8002358 <Si468x_dab_start_digital_service+0xc4>)
 80022a2:	f001 fbbb 	bl	8003a1c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 80022a6:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022a8:	2281      	movs	r2, #129	@ 0x81
 80022aa:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 80022ac:	4b2b      	ldr	r3, [pc, #172]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 80022b2:	4b2a      	ldr	r3, [pc, #168]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 80022b8:	4b28      	ldr	r3, [pc, #160]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b26      	ldr	r3, [pc, #152]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022c4:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022ce:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0c1b      	lsrs	r3, r3, #16
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b21      	ldr	r3, [pc, #132]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022d8:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0e1b      	lsrs	r3, r3, #24
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022e2:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022ea:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022f4:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b17      	ldr	r3, [pc, #92]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 80022fe:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	0e1b      	lsrs	r3, r3, #24
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 8002308:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800230a:	4914      	ldr	r1, [pc, #80]	@ (800235c <Si468x_dab_start_digital_service+0xc8>)
 800230c:	200c      	movs	r0, #12
 800230e:	f7ff f9c7 	bl	80016a0 <Si468x_write_command>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <Si468x_dab_start_digital_service+0xcc>)
 8002318:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800231a:	2001      	movs	r0, #1
 800231c:	f005 f894 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002320:	4910      	ldr	r1, [pc, #64]	@ (8002364 <Si468x_dab_start_digital_service+0xd0>)
 8002322:	2005      	movs	r0, #5
 8002324:	f7ff f9de 	bl	80016e4 <Si468x_read_reply>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <Si468x_dab_start_digital_service+0xcc>)
 800232e:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8002330:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <Si468x_dab_start_digital_service+0xd4>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800233e:	2101      	movs	r1, #1
 8002340:	480a      	ldr	r0, [pc, #40]	@ (800236c <Si468x_dab_start_digital_service+0xd8>)
 8002342:	f001 fb6b 	bl	8003a1c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 8002346:	e003      	b.n	8002350 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002348:	2101      	movs	r1, #1
 800234a:	4809      	ldr	r0, [pc, #36]	@ (8002370 <Si468x_dab_start_digital_service+0xdc>)
 800234c:	f001 fb66 	bl	8003a1c <send_debug_msg>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	0800dc50 	.word	0x0800dc50
 800235c:	200001a8 	.word	0x200001a8
 8002360:	20003510 	.word	0x20003510
 8002364:	200011a8 	.word	0x200011a8
 8002368:	200035fc 	.word	0x200035fc
 800236c:	0800d734 	.word	0x0800d734
 8002370:	0800dc8c 	.word	0x0800dc8c

08002374 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800237e:	2101      	movs	r1, #1
 8002380:	484a      	ldr	r0, [pc, #296]	@ (80024ac <Si468x_dab_get_ensemble_info+0x138>)
 8002382:	f001 fb4b 	bl	8003a1c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002386:	4b4a      	ldr	r3, [pc, #296]	@ (80024b0 <Si468x_dab_get_ensemble_info+0x13c>)
 8002388:	22b4      	movs	r2, #180	@ 0xb4
 800238a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800238c:	4b48      	ldr	r3, [pc, #288]	@ (80024b0 <Si468x_dab_get_ensemble_info+0x13c>)
 800238e:	2200      	movs	r2, #0
 8002390:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002392:	4947      	ldr	r1, [pc, #284]	@ (80024b0 <Si468x_dab_get_ensemble_info+0x13c>)
 8002394:	2002      	movs	r0, #2
 8002396:	f7ff f983 	bl	80016a0 <Si468x_write_command>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <Si468x_dab_get_ensemble_info+0x140>)
 80023a0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80023a2:	2002      	movs	r0, #2
 80023a4:	f005 f850 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80023a8:	4943      	ldr	r1, [pc, #268]	@ (80024b8 <Si468x_dab_get_ensemble_info+0x144>)
 80023aa:	2015      	movs	r0, #21
 80023ac:	f7ff f99a 	bl	80016e4 <Si468x_read_reply>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b3f      	ldr	r3, [pc, #252]	@ (80024b4 <Si468x_dab_get_ensemble_info+0x140>)
 80023b6:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 80023b8:	e012      	b.n	80023e0 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80023ba:	493d      	ldr	r1, [pc, #244]	@ (80024b0 <Si468x_dab_get_ensemble_info+0x13c>)
 80023bc:	2002      	movs	r0, #2
 80023be:	f7ff f96f 	bl	80016a0 <Si468x_write_command>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <Si468x_dab_get_ensemble_info+0x140>)
 80023c8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 80023ca:	2002      	movs	r0, #2
 80023cc:	f005 f83c 	bl	8007448 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80023d0:	4939      	ldr	r1, [pc, #228]	@ (80024b8 <Si468x_dab_get_ensemble_info+0x144>)
 80023d2:	2015      	movs	r0, #21
 80023d4:	f7ff f986 	bl	80016e4 <Si468x_read_reply>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	4b35      	ldr	r3, [pc, #212]	@ (80024b4 <Si468x_dab_get_ensemble_info+0x140>)
 80023de:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 80023e0:	4b35      	ldr	r3, [pc, #212]	@ (80024b8 <Si468x_dab_get_ensemble_info+0x144>)
 80023e2:	799b      	ldrb	r3, [r3, #6]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0e8      	beq.n	80023ba <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 80023e8:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <Si468x_dab_get_ensemble_info+0x148>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80023f6:	2101      	movs	r1, #1
 80023f8:	4831      	ldr	r0, [pc, #196]	@ (80024c0 <Si468x_dab_get_ensemble_info+0x14c>)
 80023fa:	f001 fb0f 	bl	8003a1c <send_debug_msg>
		return 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	e050      	b.n	80024a4 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002402:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <Si468x_dab_get_ensemble_info+0x144>)
 8002404:	795b      	ldrb	r3, [r3, #5]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	4a2b      	ldr	r2, [pc, #172]	@ (80024b8 <Si468x_dab_get_ensemble_info+0x144>)
 800240a:	7912      	ldrb	r2, [r2, #4]
 800240c:	4413      	add	r3, r2
 800240e:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d041      	beq.n	800249a <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 8002416:	2101      	movs	r1, #1
 8002418:	482a      	ldr	r0, [pc, #168]	@ (80024c4 <Si468x_dab_get_ensemble_info+0x150>)
 800241a:	f001 faff 	bl	8003a1c <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 800241e:	4b2a      	ldr	r3, [pc, #168]	@ (80024c8 <Si468x_dab_get_ensemble_info+0x154>)
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	b291      	uxth	r1, r2
 8002426:	4a29      	ldr	r2, [pc, #164]	@ (80024cc <Si468x_dab_get_ensemble_info+0x158>)
 8002428:	015b      	lsls	r3, r3, #5
 800242a:	4413      	add	r3, r2
 800242c:	460a      	mov	r2, r1
 800242e:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <Si468x_dab_get_ensemble_info+0x154>)
 8002432:	785b      	ldrb	r3, [r3, #1]
 8002434:	4618      	mov	r0, r3
 8002436:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <Si468x_dab_get_ensemble_info+0x154>)
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	4924      	ldr	r1, [pc, #144]	@ (80024cc <Si468x_dab_get_ensemble_info+0x158>)
 800243c:	0143      	lsls	r3, r0, #5
 800243e:	440b      	add	r3, r1
 8002440:	3318      	adds	r3, #24
 8002442:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 8002444:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <Si468x_dab_get_ensemble_info+0x154>)
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	4618      	mov	r0, r3
 800244a:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <Si468x_dab_get_ensemble_info+0x154>)
 800244c:	7b19      	ldrb	r1, [r3, #12]
 800244e:	4a1f      	ldr	r2, [pc, #124]	@ (80024cc <Si468x_dab_get_ensemble_info+0x158>)
 8002450:	0143      	lsls	r3, r0, #5
 8002452:	4413      	add	r3, r2
 8002454:	331c      	adds	r3, #28
 8002456:	460a      	mov	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]
 800245e:	e011      	b.n	8002484 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	1d9a      	adds	r2, r3, #6
 8002464:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <Si468x_dab_get_ensemble_info+0x154>)
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	461c      	mov	r4, r3
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	4912      	ldr	r1, [pc, #72]	@ (80024b8 <Si468x_dab_get_ensemble_info+0x144>)
 800246e:	5c88      	ldrb	r0, [r1, r2]
 8002470:	4916      	ldr	r1, [pc, #88]	@ (80024cc <Si468x_dab_get_ensemble_info+0x158>)
 8002472:	0162      	lsls	r2, r4, #5
 8002474:	440a      	add	r2, r1
 8002476:	4413      	add	r3, r2
 8002478:	3302      	adds	r3, #2
 800247a:	4602      	mov	r2, r0
 800247c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	3301      	adds	r3, #1
 8002482:	71fb      	strb	r3, [r7, #7]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d9ea      	bls.n	8002460 <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 800248a:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <Si468x_dab_get_ensemble_info+0x154>)
 800248c:	785b      	ldrb	r3, [r3, #1]
 800248e:	3301      	adds	r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <Si468x_dab_get_ensemble_info+0x154>)
 8002494:	705a      	strb	r2, [r3, #1]
			return 1;
 8002496:	2301      	movs	r3, #1
 8002498:	e004      	b.n	80024a4 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 800249a:	2101      	movs	r1, #1
 800249c:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <Si468x_dab_get_ensemble_info+0x15c>)
 800249e:	f001 fabd 	bl	8003a1c <send_debug_msg>
			return 0;
 80024a2:	2300      	movs	r3, #0
		}
	}
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}
 80024ac:	0800dcac 	.word	0x0800dcac
 80024b0:	200001a8 	.word	0x200001a8
 80024b4:	20003510 	.word	0x20003510
 80024b8:	200011a8 	.word	0x200011a8
 80024bc:	200035fc 	.word	0x200035fc
 80024c0:	0800d734 	.word	0x0800d734
 80024c4:	0800dce8 	.word	0x0800dce8
 80024c8:	20004bc4 	.word	0x20004bc4
 80024cc:	20003634 	.word	0x20003634
 80024d0:	0800dcf8 	.word	0x0800dcf8

080024d4 <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d6:	b099      	sub	sp, #100	@ 0x64
 80024d8:	af0a      	add	r7, sp, #40	@ 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 80024da:	2101      	movs	r1, #1
 80024dc:	4887      	ldr	r0, [pc, #540]	@ (80026fc <Si468x_dab_full_scan+0x228>)
 80024de:	f001 fa9d 	bl	8003a1c <send_debug_msg>
	dab_management.total_services = 0;
 80024e2:	4b87      	ldr	r3, [pc, #540]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 80024e8:	4b85      	ldr	r3, [pc, #532]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 80024ee:	4b84      	ldr	r3, [pc, #528]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t fic_q_timeout = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t _scan_cancel_flag = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 8002506:	2300      	movs	r3, #0
 8002508:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800250c:	e09f      	b.n	800264e <Si468x_dab_full_scan+0x17a>
	{
		_touch_coordinates = Touch_read();
 800250e:	f004 fbf7 	bl	8006d00 <Touch_read>
 8002512:	4603      	mov	r3, r0
 8002514:	62fb      	str	r3, [r7, #44]	@ 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 8002516:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002518:	2b05      	cmp	r3, #5
 800251a:	d90c      	bls.n	8002536 <Si468x_dab_full_scan+0x62>
 800251c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800251e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8002522:	d808      	bhi.n	8002536 <Si468x_dab_full_scan+0x62>
 8002524:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002526:	2bc3      	cmp	r3, #195	@ 0xc3
 8002528:	d905      	bls.n	8002536 <Si468x_dab_full_scan+0x62>
 800252a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800252c:	2bea      	cmp	r3, #234	@ 0xea
 800252e:	d802      	bhi.n	8002536 <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		}

		if(_scan_cancel_flag)
 8002536:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 808f 	bne.w	800265e <Si468x_dab_full_scan+0x18a>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 8002540:	2306      	movs	r3, #6
 8002542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 8002546:	2396      	movs	r3, #150	@ 0x96
 8002548:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		Si468x_dab_tune_freq(freq_index, USE_ANT_CAP);
 800254c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002550:	2101      	movs	r1, #1
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fabc 	bl	8001ad0 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002558:	463b      	mov	r3, r7
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fb90 	bl	8001c80 <Si468x_dab_digrad_status>
			valid_timeout--;
 8002560:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002564:	3b01      	subs	r3, #1
 8002566:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if(!valid_timeout)
 800256a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002572:	2101      	movs	r1, #1
 8002574:	4863      	ldr	r0, [pc, #396]	@ (8002704 <Si468x_dab_full_scan+0x230>)
 8002576:	f001 fa51 	bl	8003a1c <send_debug_msg>
				break;
 800257a:	e010      	b.n	800259e <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800257c:	2032      	movs	r0, #50	@ 0x32
 800257e:	f004 ff63 	bl	8007448 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 8002582:	4b61      	ldr	r3, [pc, #388]	@ (8002708 <Si468x_dab_full_scan+0x234>)
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0e3      	beq.n	8002558 <Si468x_dab_full_scan+0x84>
 8002590:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <Si468x_dab_full_scan+0x234>)
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0dc      	beq.n	8002558 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 800259e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d018      	beq.n	80025d8 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 80025a6:	463b      	mov	r3, r7
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fb69 	bl	8001c80 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 80025ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				if(!fic_q_timeout)
 80025b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 80025c0:	2101      	movs	r1, #1
 80025c2:	4850      	ldr	r0, [pc, #320]	@ (8002704 <Si468x_dab_full_scan+0x230>)
 80025c4:	f001 fa2a 	bl	8003a1c <send_debug_msg>
					break;
 80025c8:	e006      	b.n	80025d8 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 80025ca:	2032      	movs	r0, #50	@ 0x32
 80025cc:	f004 ff3c 	bl	8007448 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 80025d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002708 <Si468x_dab_full_scan+0x234>)
 80025d2:	791b      	ldrb	r3, [r3, #4]
 80025d4:	2b31      	cmp	r3, #49	@ 0x31
 80025d6:	d9e6      	bls.n	80025a6 <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 80025d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01e      	beq.n	800261e <Si468x_dab_full_scan+0x14a>
 80025e0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d100      	bne.n	80025ea <Si468x_dab_full_scan+0x116>
 80025e8:	e019      	b.n	800261e <Si468x_dab_full_scan+0x14a>
		{
			do
			{
				Si468x_dab_get_event_status();
 80025ea:	f000 fb11 	bl	8002c10 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 80025ee:	200a      	movs	r0, #10
 80025f0:	f004 ff2a 	bl	8007448 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 80025f4:	4b45      	ldr	r3, [pc, #276]	@ (800270c <Si468x_dab_full_scan+0x238>)
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f3      	beq.n	80025ea <Si468x_dab_full_scan+0x116>
 8002602:	4b42      	ldr	r3, [pc, #264]	@ (800270c <Si468x_dab_full_scan+0x238>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ec      	bne.n	80025ea <Si468x_dab_full_scan+0x116>

			if(Si468x_dab_get_ensemble_info())
 8002610:	f7ff feb0 	bl	8002374 <Si468x_dab_get_ensemble_info>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <Si468x_dab_full_scan+0x14a>
			{
				Si468x_dab_get_digital_service_list();
 800261a:	f7ff fb89 	bl	8001d30 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 800261e:	4e3a      	ldr	r6, [pc, #232]	@ (8002708 <Si468x_dab_full_scan+0x234>)
 8002620:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 8002622:	ac06      	add	r4, sp, #24
 8002624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800262a:	466d      	mov	r5, sp
 800262c:	f106 0410 	add.w	r4, r6, #16
 8002630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002638:	e885 0003 	stmia.w	r5, {r0, r1}
 800263c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002640:	f002 f844 	bl	80046cc <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 8002644:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002648:	3301      	adds	r3, #1
 800264a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800264e:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 8002650:	7b5b      	ldrb	r3, [r3, #13]
 8002652:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8002656:	429a      	cmp	r2, r3
 8002658:	f4ff af59 	bcc.w	800250e <Si468x_dab_full_scan+0x3a>
 800265c:	e000      	b.n	8002660 <Si468x_dab_full_scan+0x18c>
			break;
 800265e:	bf00      	nop
	}

	if(_scan_cancel_flag)
 8002660:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <Si468x_dab_full_scan+0x1a4>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 8002668:	2101      	movs	r1, #1
 800266a:	4829      	ldr	r0, [pc, #164]	@ (8002710 <Si468x_dab_full_scan+0x23c>)
 800266c:	f001 f9d6 	bl	8003a1c <send_debug_msg>
		restore_from_eeprom();
 8002670:	f000 fe32 	bl	80032d8 <restore_from_eeprom>
		return 0;
 8002674:	2300      	movs	r3, #0
 8002676:	e1e8      	b.n	8002a4a <Si468x_dab_full_scan+0x576>
	}

	else
	{
		eeprom_clear_scanning_data();
 8002678:	f003 f884 	bl	8005784 <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 800267c:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <Si468x_dab_full_scan+0x1d8>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 8002684:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 8002686:	7819      	ldrb	r1, [r3, #0]
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	4a21      	ldr	r2, [pc, #132]	@ (8002714 <Si468x_dab_full_scan+0x240>)
 800268e:	4822      	ldr	r0, [pc, #136]	@ (8002718 <Si468x_dab_full_scan+0x244>)
 8002690:	f003 f8dc 	bl	800584c <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 8002694:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 8002696:	2200      	movs	r2, #0
 8002698:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 800269a:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 800269c:	2200      	movs	r2, #0
 800269e:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80026a0:	2201      	movs	r2, #1
 80026a2:	491e      	ldr	r1, [pc, #120]	@ (800271c <Si468x_dab_full_scan+0x248>)
 80026a4:	f240 1007 	movw	r0, #263	@ 0x107
 80026a8:	f003 f844 	bl	8005734 <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80026ac:	2100      	movs	r1, #0
 80026ae:	481c      	ldr	r0, [pc, #112]	@ (8002720 <Si468x_dab_full_scan+0x24c>)
 80026b0:	f001 f9b4 	bl	8003a1c <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 80026b4:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <Si468x_dab_full_scan+0x22c>)
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	220a      	movs	r2, #10
 80026ba:	491a      	ldr	r1, [pc, #104]	@ (8002724 <Si468x_dab_full_scan+0x250>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f00a fe95 	bl	800d3ec <itoa>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 f9a8 	bl	8003a1c <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80026cc:	2101      	movs	r1, #1
 80026ce:	4816      	ldr	r0, [pc, #88]	@ (8002728 <Si468x_dab_full_scan+0x254>)
 80026d0:	f001 f9a4 	bl	8003a1c <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80026d4:	2100      	movs	r1, #0
 80026d6:	4815      	ldr	r0, [pc, #84]	@ (800272c <Si468x_dab_full_scan+0x258>)
 80026d8:	f001 f9a0 	bl	8003a1c <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80026dc:	2100      	movs	r1, #0
 80026de:	4814      	ldr	r0, [pc, #80]	@ (8002730 <Si468x_dab_full_scan+0x25c>)
 80026e0:	f001 f99c 	bl	8003a1c <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80026e4:	2100      	movs	r1, #0
 80026e6:	4813      	ldr	r0, [pc, #76]	@ (8002734 <Si468x_dab_full_scan+0x260>)
 80026e8:	f001 f998 	bl	8003a1c <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 80026ec:	2101      	movs	r1, #1
 80026ee:	4812      	ldr	r0, [pc, #72]	@ (8002738 <Si468x_dab_full_scan+0x264>)
 80026f0:	f001 f994 	bl	8003a1c <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80026fa:	e07c      	b.n	80027f6 <Si468x_dab_full_scan+0x322>
 80026fc:	0800dd0c 	.word	0x0800dd0c
 8002700:	20004bc4 	.word	0x20004bc4
 8002704:	0800dcf8 	.word	0x0800dcf8
 8002708:	200035d4 	.word	0x200035d4
 800270c:	20003600 	.word	0x20003600
 8002710:	0800dd48 	.word	0x0800dd48
 8002714:	20003634 	.word	0x20003634
 8002718:	20003774 	.word	0x20003774
 800271c:	20004bc8 	.word	0x20004bc8
 8002720:	0800dd5c 	.word	0x0800dd5c
 8002724:	200034d0 	.word	0x200034d0
 8002728:	0800dd70 	.word	0x0800dd70
 800272c:	0800dda4 	.word	0x0800dda4
 8002730:	0800ddb0 	.word	0x0800ddb0
 8002734:	0800ddc4 	.word	0x0800ddc4
 8002738:	0800ddd4 	.word	0x0800ddd4
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 800273c:	2100      	movs	r1, #0
 800273e:	48c5      	ldr	r0, [pc, #788]	@ (8002a54 <Si468x_dab_full_scan+0x580>)
 8002740:	f001 f96c 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8002744:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002748:	3301      	adds	r3, #1
 800274a:	220a      	movs	r2, #10
 800274c:	49c2      	ldr	r1, [pc, #776]	@ (8002a58 <Si468x_dab_full_scan+0x584>)
 800274e:	4618      	mov	r0, r3
 8002750:	f00a fe4c 	bl	800d3ec <itoa>
 8002754:	4603      	mov	r3, r0
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f001 f95f 	bl	8003a1c <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 800275e:	2100      	movs	r1, #0
 8002760:	48be      	ldr	r0, [pc, #760]	@ (8002a5c <Si468x_dab_full_scan+0x588>)
 8002762:	f001 f95b 	bl	8003a1c <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8002766:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800276a:	015b      	lsls	r3, r3, #5
 800276c:	4abc      	ldr	r2, [pc, #752]	@ (8002a60 <Si468x_dab_full_scan+0x58c>)
 800276e:	4413      	add	r3, r2
 8002770:	3302      	adds	r3, #2
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f001 f951 	bl	8003a1c <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 800277a:	2100      	movs	r1, #0
 800277c:	48b5      	ldr	r0, [pc, #724]	@ (8002a54 <Si468x_dab_full_scan+0x580>)
 800277e:	f001 f94d 	bl	8003a1c <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002782:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002786:	4ab6      	ldr	r2, [pc, #728]	@ (8002a60 <Si468x_dab_full_scan+0x58c>)
 8002788:	015b      	lsls	r3, r3, #5
 800278a:	4413      	add	r3, r2
 800278c:	3318      	adds	r3, #24
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	220a      	movs	r2, #10
 8002792:	49b1      	ldr	r1, [pc, #708]	@ (8002a58 <Si468x_dab_full_scan+0x584>)
 8002794:	4618      	mov	r0, r3
 8002796:	f00a fe29 	bl	800d3ec <itoa>
 800279a:	4603      	mov	r3, r0
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 f93c 	bl	8003a1c <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80027a4:	2100      	movs	r1, #0
 80027a6:	48af      	ldr	r0, [pc, #700]	@ (8002a64 <Si468x_dab_full_scan+0x590>)
 80027a8:	f001 f938 	bl	8003a1c <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80027ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027b0:	4aab      	ldr	r2, [pc, #684]	@ (8002a60 <Si468x_dab_full_scan+0x58c>)
 80027b2:	015b      	lsls	r3, r3, #5
 80027b4:	4413      	add	r3, r2
 80027b6:	331c      	adds	r3, #28
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4baa      	ldr	r3, [pc, #680]	@ (8002a68 <Si468x_dab_full_scan+0x594>)
 80027be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 f929 	bl	8003a1c <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80027ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027ce:	4aa4      	ldr	r2, [pc, #656]	@ (8002a60 <Si468x_dab_full_scan+0x58c>)
 80027d0:	015b      	lsls	r3, r3, #5
 80027d2:	4413      	add	r3, r2
 80027d4:	331c      	adds	r3, #28
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b13      	cmp	r3, #19
 80027da:	d803      	bhi.n	80027e4 <Si468x_dab_full_scan+0x310>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80027dc:	2100      	movs	r1, #0
 80027de:	48a3      	ldr	r0, [pc, #652]	@ (8002a6c <Si468x_dab_full_scan+0x598>)
 80027e0:	f001 f91c 	bl	8003a1c <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 80027e4:	2101      	movs	r1, #1
 80027e6:	48a2      	ldr	r0, [pc, #648]	@ (8002a70 <Si468x_dab_full_scan+0x59c>)
 80027e8:	f001 f918 	bl	8003a1c <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80027ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027f0:	3301      	adds	r3, #1
 80027f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80027f6:	4b9f      	ldr	r3, [pc, #636]	@ (8002a74 <Si468x_dab_full_scan+0x5a0>)
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80027fe:	429a      	cmp	r2, r3
 8002800:	d39c      	bcc.n	800273c <Si468x_dab_full_scan+0x268>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002802:	2101      	movs	r1, #1
 8002804:	489c      	ldr	r0, [pc, #624]	@ (8002a78 <Si468x_dab_full_scan+0x5a4>)
 8002806:	f001 f909 	bl	8003a1c <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 800280a:	2100      	movs	r1, #0
 800280c:	489b      	ldr	r0, [pc, #620]	@ (8002a7c <Si468x_dab_full_scan+0x5a8>)
 800280e:	f001 f905 	bl	8003a1c <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 8002812:	4b98      	ldr	r3, [pc, #608]	@ (8002a74 <Si468x_dab_full_scan+0x5a0>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	220a      	movs	r2, #10
 8002818:	498f      	ldr	r1, [pc, #572]	@ (8002a58 <Si468x_dab_full_scan+0x584>)
 800281a:	4618      	mov	r0, r3
 800281c:	f00a fde6 	bl	800d3ec <itoa>
 8002820:	4603      	mov	r3, r0
 8002822:	2101      	movs	r1, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f001 f8f9 	bl	8003a1c <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800282a:	2101      	movs	r1, #1
 800282c:	4894      	ldr	r0, [pc, #592]	@ (8002a80 <Si468x_dab_full_scan+0x5ac>)
 800282e:	f001 f8f5 	bl	8003a1c <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8002832:	2101      	movs	r1, #1
 8002834:	4893      	ldr	r0, [pc, #588]	@ (8002a84 <Si468x_dab_full_scan+0x5b0>)
 8002836:	f001 f8f1 	bl	8003a1c <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002840:	e0f7      	b.n	8002a32 <Si468x_dab_full_scan+0x55e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 8002842:	2100      	movs	r1, #0
 8002844:	4883      	ldr	r0, [pc, #524]	@ (8002a54 <Si468x_dab_full_scan+0x580>)
 8002846:	f001 f8e9 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 800284a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800284e:	3301      	adds	r3, #1
 8002850:	220a      	movs	r2, #10
 8002852:	4981      	ldr	r1, [pc, #516]	@ (8002a58 <Si468x_dab_full_scan+0x584>)
 8002854:	4618      	mov	r0, r3
 8002856:	f00a fdc9 	bl	800d3ec <itoa>
 800285a:	4603      	mov	r3, r0
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f001 f8dc 	bl	8003a1c <send_debug_msg>
			if((services_index + 1) < 10)
 8002864:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002868:	2b08      	cmp	r3, #8
 800286a:	d803      	bhi.n	8002874 <Si468x_dab_full_scan+0x3a0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800286c:	2100      	movs	r1, #0
 800286e:	487f      	ldr	r0, [pc, #508]	@ (8002a6c <Si468x_dab_full_scan+0x598>)
 8002870:	f001 f8d4 	bl	8003a1c <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002874:	2100      	movs	r1, #0
 8002876:	4884      	ldr	r0, [pc, #528]	@ (8002a88 <Si468x_dab_full_scan+0x5b4>)
 8002878:	f001 f8d0 	bl	8003a1c <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 800287c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002880:	2234      	movs	r2, #52	@ 0x34
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	4a81      	ldr	r2, [pc, #516]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 8002888:	4413      	add	r3, r2
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f001 f8c5 	bl	8003a1c <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002892:	2100      	movs	r1, #0
 8002894:	487e      	ldr	r0, [pc, #504]	@ (8002a90 <Si468x_dab_full_scan+0x5bc>)
 8002896:	f001 f8c1 	bl	8003a1c <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80028a0:	e021      	b.n	80028e6 <Si468x_dab_full_scan+0x412>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 80028a2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80028a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002a60 <Si468x_dab_full_scan+0x58c>)
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	4413      	add	r3, r2
 80028ac:	331c      	adds	r3, #28
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028b4:	4975      	ldr	r1, [pc, #468]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 80028b6:	2034      	movs	r0, #52	@ 0x34
 80028b8:	fb00 f303 	mul.w	r3, r0, r3
 80028bc:	440b      	add	r3, r1
 80028be:	3328      	adds	r3, #40	@ 0x28
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d10a      	bne.n	80028dc <Si468x_dab_full_scan+0x408>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80028c6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80028ca:	015b      	lsls	r3, r3, #5
 80028cc:	4a64      	ldr	r2, [pc, #400]	@ (8002a60 <Si468x_dab_full_scan+0x58c>)
 80028ce:	4413      	add	r3, r2
 80028d0:	3302      	adds	r3, #2
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 f8a1 	bl	8003a1c <send_debug_msg>
					break;
 80028da:	e00a      	b.n	80028f2 <Si468x_dab_full_scan+0x41e>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80028dc:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80028e0:	3301      	adds	r3, #1
 80028e2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80028e6:	4b63      	ldr	r3, [pc, #396]	@ (8002a74 <Si468x_dab_full_scan+0x5a0>)
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d3d7      	bcc.n	80028a2 <Si468x_dab_full_scan+0x3ce>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 80028f2:	2100      	movs	r1, #0
 80028f4:	4866      	ldr	r0, [pc, #408]	@ (8002a90 <Si468x_dab_full_scan+0x5bc>)
 80028f6:	f001 f891 	bl	8003a1c <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80028fa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028fe:	4a63      	ldr	r2, [pc, #396]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 8002900:	2134      	movs	r1, #52	@ 0x34
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3324      	adds	r3, #36	@ 0x24
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	220a      	movs	r2, #10
 800290e:	4952      	ldr	r1, [pc, #328]	@ (8002a58 <Si468x_dab_full_scan+0x584>)
 8002910:	4618      	mov	r0, r3
 8002912:	f00a fd6b 	bl	800d3ec <itoa>
 8002916:	4603      	mov	r3, r0
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f001 f87e 	bl	8003a1c <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002920:	2100      	movs	r1, #0
 8002922:	4850      	ldr	r0, [pc, #320]	@ (8002a64 <Si468x_dab_full_scan+0x590>)
 8002924:	f001 f87a 	bl	8003a1c <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8002928:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800292c:	4a57      	ldr	r2, [pc, #348]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 800292e:	2134      	movs	r1, #52	@ 0x34
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3328      	adds	r3, #40	@ 0x28
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <Si468x_dab_full_scan+0x594>)
 800293e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f001 f869 	bl	8003a1c <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 800294a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800294e:	4a4f      	ldr	r2, [pc, #316]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 8002950:	2134      	movs	r1, #52	@ 0x34
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3328      	adds	r3, #40	@ 0x28
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b13      	cmp	r3, #19
 800295e:	d803      	bhi.n	8002968 <Si468x_dab_full_scan+0x494>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002960:	2100      	movs	r1, #0
 8002962:	4842      	ldr	r0, [pc, #264]	@ (8002a6c <Si468x_dab_full_scan+0x598>)
 8002964:	f001 f85a 	bl	8003a1c <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002968:	2100      	movs	r1, #0
 800296a:	4847      	ldr	r0, [pc, #284]	@ (8002a88 <Si468x_dab_full_scan+0x5b4>)
 800296c:	f001 f856 	bl	8003a1c <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002970:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002974:	4a45      	ldr	r2, [pc, #276]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 8002976:	2134      	movs	r1, #52	@ 0x34
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3315      	adds	r3, #21
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	220a      	movs	r2, #10
 8002984:	4934      	ldr	r1, [pc, #208]	@ (8002a58 <Si468x_dab_full_scan+0x584>)
 8002986:	4618      	mov	r0, r3
 8002988:	f00a fd30 	bl	800d3ec <itoa>
 800298c:	4603      	mov	r3, r0
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f001 f843 	bl	8003a1c <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8002996:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800299a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 800299c:	2134      	movs	r1, #52	@ 0x34
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3315      	adds	r3, #21
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b09      	cmp	r3, #9
 80029aa:	d803      	bhi.n	80029b4 <Si468x_dab_full_scan+0x4e0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80029ac:	2100      	movs	r1, #0
 80029ae:	482f      	ldr	r0, [pc, #188]	@ (8002a6c <Si468x_dab_full_scan+0x598>)
 80029b0:	f001 f834 	bl	8003a1c <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80029b4:	2100      	movs	r1, #0
 80029b6:	4837      	ldr	r0, [pc, #220]	@ (8002a94 <Si468x_dab_full_scan+0x5c0>)
 80029b8:	f001 f830 	bl	8003a1c <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80029bc:	2100      	movs	r1, #0
 80029be:	4836      	ldr	r0, [pc, #216]	@ (8002a98 <Si468x_dab_full_scan+0x5c4>)
 80029c0:	f001 f82c 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029c4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029c8:	4a30      	ldr	r2, [pc, #192]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 80029ca:	2134      	movs	r1, #52	@ 0x34
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	3320      	adds	r3, #32
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2210      	movs	r2, #16
 80029d8:	491f      	ldr	r1, [pc, #124]	@ (8002a58 <Si468x_dab_full_scan+0x584>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f00a fd06 	bl	800d3ec <itoa>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 f819 	bl	8003a1c <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 80029ea:	2100      	movs	r1, #0
 80029ec:	4826      	ldr	r0, [pc, #152]	@ (8002a88 <Si468x_dab_full_scan+0x5b4>)
 80029ee:	f001 f815 	bl	8003a1c <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80029f2:	2100      	movs	r1, #0
 80029f4:	4828      	ldr	r0, [pc, #160]	@ (8002a98 <Si468x_dab_full_scan+0x5c4>)
 80029f6:	f001 f811 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029fa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029fe:	4a23      	ldr	r2, [pc, #140]	@ (8002a8c <Si468x_dab_full_scan+0x5b8>)
 8002a00:	2134      	movs	r1, #52	@ 0x34
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	332a      	adds	r3, #42	@ 0x2a
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	4912      	ldr	r1, [pc, #72]	@ (8002a58 <Si468x_dab_full_scan+0x584>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	f00a fceb 	bl	800d3ec <itoa>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fffe 	bl	8003a1c <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8002a20:	2101      	movs	r1, #1
 8002a22:	481e      	ldr	r0, [pc, #120]	@ (8002a9c <Si468x_dab_full_scan+0x5c8>)
 8002a24:	f000 fffa 	bl	8003a1c <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8002a28:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <Si468x_dab_full_scan+0x5a0>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	f4ff af01 	bcc.w	8002842 <Si468x_dab_full_scan+0x36e>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002a40:	2101      	movs	r1, #1
 8002a42:	480f      	ldr	r0, [pc, #60]	@ (8002a80 <Si468x_dab_full_scan+0x5ac>)
 8002a44:	f000 ffea 	bl	8003a1c <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 8002a48:	2301      	movs	r3, #1
	}
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	373c      	adds	r7, #60	@ 0x3c
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a52:	bf00      	nop
 8002a54:	0800dde4 	.word	0x0800dde4
 8002a58:	200034d0 	.word	0x200034d0
 8002a5c:	0800dde8 	.word	0x0800dde8
 8002a60:	20003634 	.word	0x20003634
 8002a64:	0800ddf4 	.word	0x0800ddf4
 8002a68:	20000008 	.word	0x20000008
 8002a6c:	0800ddfc 	.word	0x0800ddfc
 8002a70:	0800de00 	.word	0x0800de00
 8002a74:	20004bc4 	.word	0x20004bc4
 8002a78:	0800dd70 	.word	0x0800dd70
 8002a7c:	0800de08 	.word	0x0800de08
 8002a80:	0800de1c 	.word	0x0800de1c
 8002a84:	0800de88 	.word	0x0800de88
 8002a88:	0800def4 	.word	0x0800def4
 8002a8c:	20003774 	.word	0x20003774
 8002a90:	0800defc 	.word	0x0800defc
 8002a94:	0800df00 	.word	0x0800df00
 8002a98:	0800df08 	.word	0x0800df08
 8002a9c:	0800df0c 	.word	0x0800df0c

08002aa0 <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	484d      	ldr	r0, [pc, #308]	@ (8002be0 <Si468x_dab_get_audio_info+0x140>)
 8002aac:	f000 ffb6 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8002be4 <Si468x_dab_get_audio_info+0x144>)
 8002ab2:	22bd      	movs	r2, #189	@ 0xbd
 8002ab4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8002be4 <Si468x_dab_get_audio_info+0x144>)
 8002ab8:	2203      	movs	r2, #3
 8002aba:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002abc:	4949      	ldr	r1, [pc, #292]	@ (8002be4 <Si468x_dab_get_audio_info+0x144>)
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f7fe fdee 	bl	80016a0 <Si468x_write_command>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <Si468x_dab_get_audio_info+0x148>)
 8002aca:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f004 fcbb 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002ad2:	4946      	ldr	r1, [pc, #280]	@ (8002bec <Si468x_dab_get_audio_info+0x14c>)
 8002ad4:	2014      	movs	r0, #20
 8002ad6:	f7fe fe05 	bl	80016e4 <Si468x_read_reply>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b42      	ldr	r3, [pc, #264]	@ (8002be8 <Si468x_dab_get_audio_info+0x148>)
 8002ae0:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info));
 8002ae2:	4a43      	ldr	r2, [pc, #268]	@ (8002bf0 <Si468x_dab_get_audio_info+0x150>)
 8002ae4:	4b41      	ldr	r3, [pc, #260]	@ (8002bec <Si468x_dab_get_audio_info+0x14c>)
 8002ae6:	4614      	mov	r4, r2
 8002ae8:	3304      	adds	r3, #4
 8002aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002af0:	2100      	movs	r1, #0
 8002af2:	4840      	ldr	r0, [pc, #256]	@ (8002bf4 <Si468x_dab_get_audio_info+0x154>)
 8002af4:	f000 ff92 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002af8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf0 <Si468x_dab_get_audio_info+0x150>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	220a      	movs	r2, #10
 8002afe:	493e      	ldr	r1, [pc, #248]	@ (8002bf8 <Si468x_dab_get_audio_info+0x158>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f00a fc73 	bl	800d3ec <itoa>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 ff86 	bl	8003a1c <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002b10:	2100      	movs	r1, #0
 8002b12:	483a      	ldr	r0, [pc, #232]	@ (8002bfc <Si468x_dab_get_audio_info+0x15c>)
 8002b14:	f000 ff82 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002b18:	4b35      	ldr	r3, [pc, #212]	@ (8002bf0 <Si468x_dab_get_audio_info+0x150>)
 8002b1a:	885b      	ldrh	r3, [r3, #2]
 8002b1c:	220a      	movs	r2, #10
 8002b1e:	4936      	ldr	r1, [pc, #216]	@ (8002bf8 <Si468x_dab_get_audio_info+0x158>)
 8002b20:	4618      	mov	r0, r3
 8002b22:	f00a fc63 	bl	800d3ec <itoa>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 ff76 	bl	8003a1c <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002b30:	2100      	movs	r1, #0
 8002b32:	4833      	ldr	r0, [pc, #204]	@ (8002c00 <Si468x_dab_get_audio_info+0x160>)
 8002b34:	f000 ff72 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002b38:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf0 <Si468x_dab_get_audio_info+0x150>)
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	220a      	movs	r2, #10
 8002b44:	492c      	ldr	r1, [pc, #176]	@ (8002bf8 <Si468x_dab_get_audio_info+0x158>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f00a fc50 	bl	800d3ec <itoa>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 ff63 	bl	8003a1c <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002b56:	2100      	movs	r1, #0
 8002b58:	482a      	ldr	r0, [pc, #168]	@ (8002c04 <Si468x_dab_get_audio_info+0x164>)
 8002b5a:	f000 ff5f 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <Si468x_dab_get_audio_info+0x150>)
 8002b60:	791b      	ldrb	r3, [r3, #4]
 8002b62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	220a      	movs	r2, #10
 8002b6a:	4923      	ldr	r1, [pc, #140]	@ (8002bf8 <Si468x_dab_get_audio_info+0x158>)
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f00a fc3d 	bl	800d3ec <itoa>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 ff50 	bl	8003a1c <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4822      	ldr	r0, [pc, #136]	@ (8002c08 <Si468x_dab_get_audio_info+0x168>)
 8002b80:	f000 ff4c 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002b84:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <Si468x_dab_get_audio_info+0x150>)
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	220a      	movs	r2, #10
 8002b90:	4919      	ldr	r1, [pc, #100]	@ (8002bf8 <Si468x_dab_get_audio_info+0x158>)
 8002b92:	4618      	mov	r0, r3
 8002b94:	f00a fc2a 	bl	800d3ec <itoa>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 ff3d 	bl	8003a1c <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4819      	ldr	r0, [pc, #100]	@ (8002c0c <Si468x_dab_get_audio_info+0x16c>)
 8002ba6:	f000 ff39 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <Si468x_dab_get_audio_info+0x150>)
 8002bac:	791b      	ldrb	r3, [r3, #4]
 8002bae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	220a      	movs	r2, #10
 8002bb6:	4910      	ldr	r1, [pc, #64]	@ (8002bf8 <Si468x_dab_get_audio_info+0x158>)
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00a fc17 	bl	800d3ec <itoa>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 ff2a 	bl	8003a1c <send_debug_msg>

	return dab_audio_info;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a09      	ldr	r2, [pc, #36]	@ (8002bf0 <Si468x_dab_get_audio_info+0x150>)
 8002bcc:	461c      	mov	r4, r3
 8002bce:	4613      	mov	r3, r2
 8002bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	0800df18 	.word	0x0800df18
 8002be4:	200001a8 	.word	0x200001a8
 8002be8:	20003510 	.word	0x20003510
 8002bec:	200011a8 	.word	0x200011a8
 8002bf0:	20003610 	.word	0x20003610
 8002bf4:	0800df54 	.word	0x0800df54
 8002bf8:	200034d0 	.word	0x200034d0
 8002bfc:	0800df60 	.word	0x0800df60
 8002c00:	0800df70 	.word	0x0800df70
 8002c04:	0800df84 	.word	0x0800df84
 8002c08:	0800df90 	.word	0x0800df90
 8002c0c:	0800df9c 	.word	0x0800df9c

08002c10 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002c14:	2101      	movs	r1, #1
 8002c16:	4811      	ldr	r0, [pc, #68]	@ (8002c5c <Si468x_dab_get_event_status+0x4c>)
 8002c18:	f000 ff00 	bl	8003a1c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <Si468x_dab_get_event_status+0x50>)
 8002c1e:	22b3      	movs	r2, #179	@ 0xb3
 8002c20:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002c22:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <Si468x_dab_get_event_status+0x50>)
 8002c24:	2203      	movs	r2, #3
 8002c26:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002c28:	490d      	ldr	r1, [pc, #52]	@ (8002c60 <Si468x_dab_get_event_status+0x50>)
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	f7fe fd38 	bl	80016a0 <Si468x_write_command>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <Si468x_dab_get_event_status+0x54>)
 8002c36:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f004 fc05 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002c3e:	490a      	ldr	r1, [pc, #40]	@ (8002c68 <Si468x_dab_get_event_status+0x58>)
 8002c40:	2009      	movs	r0, #9
 8002c42:	f7fe fd4f 	bl	80016e4 <Si468x_read_reply>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <Si468x_dab_get_event_status+0x54>)
 8002c4c:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <Si468x_dab_get_event_status+0x58>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a06      	ldr	r2, [pc, #24]	@ (8002c6c <Si468x_dab_get_event_status+0x5c>)
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	0800dfac 	.word	0x0800dfac
 8002c60:	200001a8 	.word	0x200001a8
 8002c64:	20003510 	.word	0x20003510
 8002c68:	200011a8 	.word	0x200011a8
 8002c6c:	20003600 	.word	0x20003600

08002c70 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	484a      	ldr	r0, [pc, #296]	@ (8002da8 <Si468x_dab_get_component_info+0x138>)
 8002c80:	f000 fecc 	bl	8003a1c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002c84:	4b49      	ldr	r3, [pc, #292]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002c86:	22bb      	movs	r2, #187	@ 0xbb
 8002c88:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002c8a:	4b48      	ldr	r3, [pc, #288]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002c90:	4b46      	ldr	r3, [pc, #280]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002c96:	4b45      	ldr	r3, [pc, #276]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b42      	ldr	r3, [pc, #264]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002ca2:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b40      	ldr	r3, [pc, #256]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002cac:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002cb6:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0e1b      	lsrs	r3, r3, #24
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002cc0:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002cc2:	4a3a      	ldr	r2, [pc, #232]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	121b      	asrs	r3, r3, #8
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b37      	ldr	r3, [pc, #220]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002cd0:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	141b      	asrs	r3, r3, #16
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b34      	ldr	r3, [pc, #208]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002cda:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	161b      	asrs	r3, r3, #24
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002ce4:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002ce6:	4931      	ldr	r1, [pc, #196]	@ (8002dac <Si468x_dab_get_component_info+0x13c>)
 8002ce8:	200c      	movs	r0, #12
 8002cea:	f7fe fcd9 	bl	80016a0 <Si468x_write_command>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8002db0 <Si468x_dab_get_component_info+0x140>)
 8002cf4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002cf6:	2005      	movs	r0, #5
 8002cf8:	f004 fba6 	bl	8007448 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002cfc:	492d      	ldr	r1, [pc, #180]	@ (8002db4 <Si468x_dab_get_component_info+0x144>)
 8002cfe:	201a      	movs	r0, #26
 8002d00:	f7fe fcf0 	bl	80016e4 <Si468x_read_reply>
 8002d04:	4603      	mov	r3, r0
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b29      	ldr	r3, [pc, #164]	@ (8002db0 <Si468x_dab_get_component_info+0x140>)
 8002d0a:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002d0c:	4b29      	ldr	r3, [pc, #164]	@ (8002db4 <Si468x_dab_get_component_info+0x144>)
 8002d0e:	799b      	ldrb	r3, [r3, #6]
 8002d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d14:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e00c      	b.n	8002d36 <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002d1c:	7ffb      	ldrb	r3, [r7, #31]
 8002d1e:	f103 0208 	add.w	r2, r3, #8
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
 8002d24:	4923      	ldr	r1, [pc, #140]	@ (8002db4 <Si468x_dab_get_component_info+0x144>)
 8002d26:	5c8a      	ldrb	r2, [r1, r2]
 8002d28:	3320      	adds	r3, #32
 8002d2a:	443b      	add	r3, r7
 8002d2c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002d30:	7ffb      	ldrb	r3, [r7, #31]
 8002d32:	3301      	adds	r3, #1
 8002d34:	77fb      	strb	r3, [r7, #31]
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d9ef      	bls.n	8002d1c <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <Si468x_dab_get_component_info+0x144>)
 8002d3e:	7e1b      	ldrb	r3, [r3, #24]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <Si468x_dab_get_component_info+0x144>)
 8002d44:	7e5b      	ldrb	r3, [r3, #25]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4819      	ldr	r0, [pc, #100]	@ (8002db8 <Si468x_dab_get_component_info+0x148>)
 8002d52:	f000 fe63 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002d56:	7fbb      	ldrb	r3, [r7, #30]
 8002d58:	220a      	movs	r2, #10
 8002d5a:	4918      	ldr	r1, [pc, #96]	@ (8002dbc <Si468x_dab_get_component_info+0x14c>)
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f00a fb45 	bl	800d3ec <itoa>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fe58 	bl	8003a1c <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4814      	ldr	r0, [pc, #80]	@ (8002dc0 <Si468x_dab_get_component_info+0x150>)
 8002d70:	f000 fe54 	bl	8003a1c <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002d74:	f107 030c 	add.w	r3, r7, #12
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fe4e 	bl	8003a1c <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002d80:	2100      	movs	r1, #0
 8002d82:	4810      	ldr	r0, [pc, #64]	@ (8002dc4 <Si468x_dab_get_component_info+0x154>)
 8002d84:	f000 fe4a 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002d88:	8bbb      	ldrh	r3, [r7, #28]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	490b      	ldr	r1, [pc, #44]	@ (8002dbc <Si468x_dab_get_component_info+0x14c>)
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00a fb2c 	bl	800d3ec <itoa>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fe3f 	bl	8003a1c <send_debug_msg>

}
 8002d9e:	bf00      	nop
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	0800dfec 	.word	0x0800dfec
 8002dac:	200001a8 	.word	0x200001a8
 8002db0:	20003510 	.word	0x20003510
 8002db4:	200011a8 	.word	0x200011a8
 8002db8:	0800e020 	.word	0x0800e020
 8002dbc:	200034d0 	.word	0x200034d0
 8002dc0:	0800e02c 	.word	0x0800e02c
 8002dc4:	0800e040 	.word	0x0800e040

08002dc8 <Si468x_dab_get_digital_service_data>:

void Si468x_dab_get_digital_service_data()
{
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002dce:	49aa      	ldr	r1, [pc, #680]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002dd0:	2005      	movs	r0, #5
 8002dd2:	f7fe fc87 	bl	80016e4 <Si468x_read_reply>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4ba8      	ldr	r3, [pc, #672]	@ (800307c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002ddc:	701a      	strb	r2, [r3, #0]

	if(rd_reply.d_srv_int)
 8002dde:	4ba8      	ldr	r3, [pc, #672]	@ (8003080 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8140 	beq.w	800306e <Si468x_dab_get_digital_service_data+0x2a6>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_DATA;
 8002dee:	4ba5      	ldr	r3, [pc, #660]	@ (8003084 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002df0:	2284      	movs	r2, #132	@ 0x84
 8002df2:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x01;	//+1 = ACK, +16 = STATUS_ONLY
 8002df4:	4ba3      	ldr	r3, [pc, #652]	@ (8003084 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002dfa:	49a2      	ldr	r1, [pc, #648]	@ (8003084 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f7fe fc4f 	bl	80016a0 <Si468x_write_command>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b9d      	ldr	r3, [pc, #628]	@ (800307c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e08:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8002e0a:	2005      	movs	r0, #5
 8002e0c:	f004 fb1c 	bl	8007448 <HAL_Delay>

		//first read only header to obtain payload data size
		status = Si468x_read_reply(30, dab_spi_rx_buffer);
 8002e10:	4999      	ldr	r1, [pc, #612]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e12:	201e      	movs	r0, #30
 8002e14:	f7fe fc66 	bl	80016e4 <Si468x_read_reply>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b97      	ldr	r3, [pc, #604]	@ (800307c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e1e:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t*)&dab_service_data_reply_header, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_service_data_reply_header));
 8002e20:	4a99      	ldr	r2, [pc, #612]	@ (8003088 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002e22:	4b95      	ldr	r3, [pc, #596]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e24:	4615      	mov	r5, r2
 8002e26:	1d1c      	adds	r4, r3, #4
 8002e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	602b      	str	r3, [r5, #0]


//		if(dab_service_data_reply_header.buff_count)
		{
			send_debug_msg("-----------Getting DAB Service Data-------------", CRLF_SEND);
 8002e30:	2101      	movs	r1, #1
 8002e32:	4896      	ldr	r0, [pc, #600]	@ (800308c <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e34:	f000 fdf2 	bl	8003a1c <send_debug_msg>
//			send_debug_msg(itoa(dab_service_data_reply_header.num_segs, itoa_buffer, 10), CRLF_SEND);


			//second read full data when we know data length

			if(!dab_service_data_reply_header.dsrv_ovfl_int)
 8002e38:	4b93      	ldr	r3, [pc, #588]	@ (8003088 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f040 8113 	bne.w	800306e <Si468x_dab_get_digital_service_data+0x2a6>
			{
				status = Si468x_read_reply(24 + dab_service_data_reply_header.byte_count, dab_spi_rx_buffer);
 8002e48:	4b8f      	ldr	r3, [pc, #572]	@ (8003088 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002e4a:	89db      	ldrh	r3, [r3, #14]
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4989      	ldr	r1, [pc, #548]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fc46 	bl	80016e4 <Si468x_read_reply>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b87      	ldr	r3, [pc, #540]	@ (800307c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e5e:	701a      	strb	r2, [r3, #0]

				if(dab_service_data_reply_header.dsc_ty == 60)
 8002e60:	4b89      	ldr	r3, [pc, #548]	@ (8003088 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b3c      	cmp	r3, #60	@ 0x3c
 8002e6c:	f040 80a5 	bne.w	8002fba <Si468x_dab_get_digital_service_data+0x1f2>
				{
					send_debug_msg("Slideshow Data: ", CRLF_SEND);
 8002e70:	2101      	movs	r1, #1
 8002e72:	4887      	ldr	r0, [pc, #540]	@ (8003090 <Si468x_dab_get_digital_service_data+0x2c8>)
 8002e74:	f000 fdd2 	bl	8003a1c <send_debug_msg>
					uint32_t body_size;
					uint16_t header_size;
					uint8_t content_type;
					uint16_t content_sub_type;

					body_size = (dab_spi_rx_buffer[24 + 0] << 20) + (dab_spi_rx_buffer[24 + 1] << 12) + (dab_spi_rx_buffer[24 + 2] << 4) + ((dab_spi_rx_buffer[24 + 3] && 0xF0) >> 4);
 8002e78:	4b7f      	ldr	r3, [pc, #508]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e7a:	7e1b      	ldrb	r3, [r3, #24]
 8002e7c:	051a      	lsls	r2, r3, #20
 8002e7e:	4b7e      	ldr	r3, [pc, #504]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e80:	7e5b      	ldrb	r3, [r3, #25]
 8002e82:	031b      	lsls	r3, r3, #12
 8002e84:	441a      	add	r2, r3
 8002e86:	4b7c      	ldr	r3, [pc, #496]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e88:	7e9b      	ldrb	r3, [r3, #26]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4413      	add	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]

					header_size = ((dab_spi_rx_buffer[24 + 3] && 0x0F) << 9) + (dab_spi_rx_buffer[24 + 4] << 1) + ((dab_spi_rx_buffer[24 + 5] && 0x80) >> 7);
 8002e90:	4b79      	ldr	r3, [pc, #484]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e92:	7edb      	ldrb	r3, [r3, #27]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <Si468x_dab_get_digital_service_data+0xd6>
 8002e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9c:	e000      	b.n	8002ea0 <Si468x_dab_get_digital_service_data+0xd8>
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4b75      	ldr	r3, [pc, #468]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002ea2:	7f1b      	ldrb	r3, [r3, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	80fb      	strh	r3, [r7, #6]

					content_type = (dab_spi_rx_buffer[24 + 5] && 0x7E) >> 1;
 8002eac:	2300      	movs	r3, #0
 8002eae:	717b      	strb	r3, [r7, #5]

					content_sub_type = ((dab_spi_rx_buffer[24 + 5] && 0x01) << 8) + (dab_spi_rx_buffer[24 + 6]);
 8002eb0:	4b71      	ldr	r3, [pc, #452]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002eb2:	7f5b      	ldrb	r3, [r3, #29]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <Si468x_dab_get_digital_service_data+0xf6>
 8002eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ebc:	e000      	b.n	8002ec0 <Si468x_dab_get_digital_service_data+0xf8>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002ec2:	7f92      	ldrb	r2, [r2, #30]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	807b      	strh	r3, [r7, #2]

					for(uint16_t i = 0; i < 4096; i++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	82fb      	strh	r3, [r7, #22]
 8002ecc:	e006      	b.n	8002edc <Si468x_dab_get_digital_service_data+0x114>
					{
						slideshow_data[i] = 0;
 8002ece:	8afb      	ldrh	r3, [r7, #22]
 8002ed0:	4a70      	ldr	r2, [pc, #448]	@ (8003094 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < 4096; i++)
 8002ed6:	8afb      	ldrh	r3, [r7, #22]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	82fb      	strh	r3, [r7, #22]
 8002edc:	8afb      	ldrh	r3, [r7, #22]
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee2:	d3f4      	bcc.n	8002ece <Si468x_dab_get_digital_service_data+0x106>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	82bb      	strh	r3, [r7, #20]
 8002ee8:	e00a      	b.n	8002f00 <Si468x_dab_get_digital_service_data+0x138>
					{
						slideshow_data[i] = dab_spi_rx_buffer[24 + i];
 8002eea:	8abb      	ldrh	r3, [r7, #20]
 8002eec:	f103 0218 	add.w	r2, r3, #24
 8002ef0:	8abb      	ldrh	r3, [r7, #20]
 8002ef2:	4961      	ldr	r1, [pc, #388]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002ef4:	5c89      	ldrb	r1, [r1, r2]
 8002ef6:	4a67      	ldr	r2, [pc, #412]	@ (8003094 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002ef8:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002efa:	8abb      	ldrh	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	82bb      	strh	r3, [r7, #20]
 8002f00:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002f02:	89db      	ldrh	r3, [r3, #14]
 8002f04:	8aba      	ldrh	r2, [r7, #20]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3ef      	bcc.n	8002eea <Si468x_dab_get_digital_service_data+0x122>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	827b      	strh	r3, [r7, #18]
 8002f0e:	e00f      	b.n	8002f30 <Si468x_dab_get_digital_service_data+0x168>
					{
//						send_debug_msg(slideshow_data[i]);
						send_debug_msg(itoa(slideshow_data[i], itoa_buffer, 10), CRLF_SEND);
 8002f10:	8a7b      	ldrh	r3, [r7, #18]
 8002f12:	4a60      	ldr	r2, [pc, #384]	@ (8003094 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002f14:	5cd3      	ldrb	r3, [r2, r3]
 8002f16:	220a      	movs	r2, #10
 8002f18:	495f      	ldr	r1, [pc, #380]	@ (8003098 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f00a fa66 	bl	800d3ec <itoa>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fd79 	bl	8003a1c <send_debug_msg>
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f2a:	8a7b      	ldrh	r3, [r7, #18]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	827b      	strh	r3, [r7, #18]
 8002f30:	4b55      	ldr	r3, [pc, #340]	@ (8003088 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002f32:	89db      	ldrh	r3, [r3, #14]
 8002f34:	8a7a      	ldrh	r2, [r7, #18]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3ea      	bcc.n	8002f10 <Si468x_dab_get_digital_service_data+0x148>
					}
//					send_debug_msg("", CRLF_SEND);
					send_debug_msg("end", CRLF_SEND);
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4857      	ldr	r0, [pc, #348]	@ (800309c <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f3e:	f000 fd6d 	bl	8003a1c <send_debug_msg>
					send_debug_msg("Body Size: ", CRLF_NO_SEND);
 8002f42:	2100      	movs	r1, #0
 8002f44:	4856      	ldr	r0, [pc, #344]	@ (80030a0 <Si468x_dab_get_digital_service_data+0x2d8>)
 8002f46:	f000 fd69 	bl	8003a1c <send_debug_msg>
					send_debug_msg(itoa(body_size, itoa_buffer, 10), CRLF_SEND);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	220a      	movs	r2, #10
 8002f4e:	4952      	ldr	r1, [pc, #328]	@ (8003098 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002f50:	4618      	mov	r0, r3
 8002f52:	f00a fa4b 	bl	800d3ec <itoa>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fd5e 	bl	8003a1c <send_debug_msg>
					send_debug_msg("Header Size: ", CRLF_NO_SEND);
 8002f60:	2100      	movs	r1, #0
 8002f62:	4850      	ldr	r0, [pc, #320]	@ (80030a4 <Si468x_dab_get_digital_service_data+0x2dc>)
 8002f64:	f000 fd5a 	bl	8003a1c <send_debug_msg>
					send_debug_msg(itoa(header_size, itoa_buffer, 10), CRLF_SEND);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	220a      	movs	r2, #10
 8002f6c:	494a      	ldr	r1, [pc, #296]	@ (8003098 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00a fa3c 	bl	800d3ec <itoa>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fd4f 	bl	8003a1c <send_debug_msg>
					send_debug_msg("Content Type: ", CRLF_NO_SEND);
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4849      	ldr	r0, [pc, #292]	@ (80030a8 <Si468x_dab_get_digital_service_data+0x2e0>)
 8002f82:	f000 fd4b 	bl	8003a1c <send_debug_msg>
					send_debug_msg(itoa(content_type, itoa_buffer, 10), CRLF_SEND);
 8002f86:	797b      	ldrb	r3, [r7, #5]
 8002f88:	220a      	movs	r2, #10
 8002f8a:	4943      	ldr	r1, [pc, #268]	@ (8003098 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f00a fa2d 	bl	800d3ec <itoa>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fd40 	bl	8003a1c <send_debug_msg>
					send_debug_msg("Content SubType: ", CRLF_NO_SEND);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4843      	ldr	r0, [pc, #268]	@ (80030ac <Si468x_dab_get_digital_service_data+0x2e4>)
 8002fa0:	f000 fd3c 	bl	8003a1c <send_debug_msg>
					send_debug_msg(itoa(content_sub_type, itoa_buffer, 10), CRLF_SEND);
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	220a      	movs	r2, #10
 8002fa8:	493b      	ldr	r1, [pc, #236]	@ (8003098 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002faa:	4618      	mov	r0, r3
 8002fac:	f00a fa1e 	bl	800d3ec <itoa>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fd31 	bl	8003a1c <send_debug_msg>

				}

				if(dab_service_data_reply_header.data_src == 2)
 8002fba:	4b33      	ldr	r3, [pc, #204]	@ (8003088 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002fbc:	78db      	ldrb	r3, [r3, #3]
 8002fbe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b80      	cmp	r3, #128	@ 0x80
 8002fc6:	d152      	bne.n	800306e <Si468x_dab_get_digital_service_data+0x2a6>
				{
					send_debug_msg("Dynamic Label Data: ", CRLF_SEND);
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4839      	ldr	r0, [pc, #228]	@ (80030b0 <Si468x_dab_get_digital_service_data+0x2e8>)
 8002fcc:	f000 fd26 	bl	8003a1c <send_debug_msg>

					for(uint8_t i = 0; i < 128; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	747b      	strb	r3, [r7, #17]
 8002fd4:	e006      	b.n	8002fe4 <Si468x_dab_get_digital_service_data+0x21c>
					{
						dls_label[i] = 0;
 8002fd6:	7c7b      	ldrb	r3, [r7, #17]
 8002fd8:	4a36      	ldr	r2, [pc, #216]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 8002fda:	2100      	movs	r1, #0
 8002fdc:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 128; i++)
 8002fde:	7c7b      	ldrb	r3, [r7, #17]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	747b      	strb	r3, [r7, #17]
 8002fe4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	daf4      	bge.n	8002fd6 <Si468x_dab_get_digital_service_data+0x20e>
					}

					uint8_t label_pos = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	e031      	b.n	800305a <Si468x_dab_get_digital_service_data+0x292>
					{
						dls_label[label_pos] = dab_spi_rx_buffer[24 + 2 + i];
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	f103 021a 	add.w	r2, r3, #26
 8002ffc:	7c3b      	ldrb	r3, [r7, #16]
 8002ffe:	491e      	ldr	r1, [pc, #120]	@ (8003078 <Si468x_dab_get_digital_service_data+0x2b0>)
 8003000:	5c89      	ldrb	r1, [r1, r2]
 8003002:	4a2c      	ldr	r2, [pc, #176]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 8003004:	54d1      	strb	r1, [r2, r3]
//						send_debug_msg(itoa(dab_spi_rx_buffer[24 + 2 + i], itoa_buffer, 10), CRLF_SEND);

						//polish symbols convert
						//ó
						if(dls_label[label_pos] == 195)
 8003006:	7c3b      	ldrb	r3, [r7, #16]
 8003008:	4a2a      	ldr	r2, [pc, #168]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	2bc3      	cmp	r3, #195	@ 0xc3
 800300e:	d106      	bne.n	800301e <Si468x_dab_get_digital_service_data+0x256>
						{
							dls_label[label_pos] = 111;//lub 243
 8003010:	7c3b      	ldrb	r3, [r7, #16]
 8003012:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 8003014:	216f      	movs	r1, #111	@ 0x6f
 8003016:	54d1      	strb	r1, [r2, r3]
							i++;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	3301      	adds	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 234)
						{

						}
						//ć to c
						if(dls_label[label_pos] == 196)
 800301e:	7c3b      	ldrb	r3, [r7, #16]
 8003020:	4a24      	ldr	r2, [pc, #144]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	2bc4      	cmp	r3, #196	@ 0xc4
 8003026:	d106      	bne.n	8003036 <Si468x_dab_get_digital_service_data+0x26e>
						{
							dls_label[label_pos] = 99; //lub 230
 8003028:	7c3b      	ldrb	r3, [r7, #16]
 800302a:	4a22      	ldr	r2, [pc, #136]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 800302c:	2163      	movs	r1, #99	@ 0x63
 800302e:	54d1      	strb	r1, [r2, r3]
							i++;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	3301      	adds	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 182)
						{

						}
						//ł to l
						if(dls_label[label_pos] == 197)
 8003036:	7c3b      	ldrb	r3, [r7, #16]
 8003038:	4a1e      	ldr	r2, [pc, #120]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	2bc5      	cmp	r3, #197	@ 0xc5
 800303e:	d106      	bne.n	800304e <Si468x_dab_get_digital_service_data+0x286>
						{
							dls_label[label_pos] = 108; //lub 179
 8003040:	7c3b      	ldrb	r3, [r7, #16]
 8003042:	4a1c      	ldr	r2, [pc, #112]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 8003044:	216c      	movs	r1, #108	@ 0x6c
 8003046:	54d1      	strb	r1, [r2, r3]
							i++;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	3301      	adds	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 243)
						{

						}

						label_pos++;
 800304e:	7c3b      	ldrb	r3, [r7, #16]
 8003050:	3301      	adds	r3, #1
 8003052:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	3301      	adds	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	b29a      	uxth	r2, r3
 800305e:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <Si468x_dab_get_digital_service_data+0x2c0>)
 8003060:	89db      	ldrh	r3, [r3, #14]
 8003062:	429a      	cmp	r2, r3
 8003064:	d3c7      	bcc.n	8002ff6 <Si468x_dab_get_digital_service_data+0x22e>
					}
					send_debug_msg(dls_label, CRLF_SEND);
 8003066:	2101      	movs	r1, #1
 8003068:	4812      	ldr	r0, [pc, #72]	@ (80030b4 <Si468x_dab_get_digital_service_data+0x2ec>)
 800306a:	f000 fcd7 	bl	8003a1c <send_debug_msg>
				}
			}
		}
	}
}
 800306e:	bf00      	nop
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bdb0      	pop	{r4, r5, r7, pc}
 8003076:	bf00      	nop
 8003078:	200011a8 	.word	0x200011a8
 800307c:	20003510 	.word	0x20003510
 8003080:	200035fc 	.word	0x200035fc
 8003084:	200001a8 	.word	0x200001a8
 8003088:	20003620 	.word	0x20003620
 800308c:	0800e054 	.word	0x0800e054
 8003090:	0800e088 	.word	0x0800e088
 8003094:	20004c58 	.word	0x20004c58
 8003098:	200034d0 	.word	0x200034d0
 800309c:	0800e09c 	.word	0x0800e09c
 80030a0:	0800e0a0 	.word	0x0800e0a0
 80030a4:	0800e0ac 	.word	0x0800e0ac
 80030a8:	0800e0bc 	.word	0x0800e0bc
 80030ac:	0800e0cc 	.word	0x0800e0cc
 80030b0:	0800e0e0 	.word	0x0800e0e0
 80030b4:	20004bd4 	.word	0x20004bd4

080030b8 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 80030bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <Si468x_dab_get_time+0x78>)
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02f      	beq.n	800312a <Si468x_dab_get_time+0x72>
 80030ca:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <Si468x_dab_get_time+0x78>)
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d028      	beq.n	800312a <Si468x_dab_get_time+0x72>
 80030d8:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <Si468x_dab_get_time+0x78>)
 80030da:	791b      	ldrb	r3, [r3, #4]
 80030dc:	2b5a      	cmp	r3, #90	@ 0x5a
 80030de:	d924      	bls.n	800312a <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 80030e0:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <Si468x_dab_get_time+0x7c>)
 80030e2:	22bc      	movs	r2, #188	@ 0xbc
 80030e4:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 80030e6:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <Si468x_dab_get_time+0x7c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80030ec:	4911      	ldr	r1, [pc, #68]	@ (8003134 <Si468x_dab_get_time+0x7c>)
 80030ee:	2002      	movs	r0, #2
 80030f0:	f7fe fad6 	bl	80016a0 <Si468x_write_command>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <Si468x_dab_get_time+0x80>)
 80030fa:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80030fc:	2001      	movs	r0, #1
 80030fe:	f004 f9a3 	bl	8007448 <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8003102:	490e      	ldr	r1, [pc, #56]	@ (800313c <Si468x_dab_get_time+0x84>)
 8003104:	200b      	movs	r0, #11
 8003106:	f7fe faed 	bl	80016e4 <Si468x_read_reply>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <Si468x_dab_get_time+0x80>)
 8003110:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 8003112:	4a0b      	ldr	r2, [pc, #44]	@ (8003140 <Si468x_dab_get_time+0x88>)
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <Si468x_dab_get_time+0x84>)
 8003116:	3304      	adds	r3, #4
 8003118:	e893 0003 	ldmia.w	r3, {r0, r1}
 800311c:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 8003120:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <Si468x_dab_get_time+0x88>)
 8003122:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003126:	f002 fa2d 	bl	8005584 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200035d4 	.word	0x200035d4
 8003134:	200001a8 	.word	0x200001a8
 8003138:	20003510 	.word	0x20003510
 800313c:	200011a8 	.word	0x200011a8
 8003140:	20003608 	.word	0x20003608

08003144 <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	4619      	mov	r1, r3
 8003152:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8003156:	f7fe fbd1 	bl	80018fc <Si468x_set_property>
	dab_management.audio_volume = _volume;
 800315a:	79fa      	ldrb	r2, [r7, #7]
 800315c:	4b0f      	ldr	r3, [pc, #60]	@ (800319c <Si468x_set_audio_volume+0x58>)
 800315e:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 8003160:	2100      	movs	r1, #0
 8003162:	480f      	ldr	r0, [pc, #60]	@ (80031a0 <Si468x_set_audio_volume+0x5c>)
 8003164:	f000 fc5a 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 8003168:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <Si468x_set_audio_volume+0x58>)
 800316a:	7b9b      	ldrb	r3, [r3, #14]
 800316c:	220a      	movs	r2, #10
 800316e:	490d      	ldr	r1, [pc, #52]	@ (80031a4 <Si468x_set_audio_volume+0x60>)
 8003170:	4618      	mov	r0, r3
 8003172:	f00a f93b 	bl	800d3ec <itoa>
 8003176:	4603      	mov	r3, r0
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fc4e 	bl	8003a1c <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 8003180:	2101      	movs	r1, #1
 8003182:	4809      	ldr	r0, [pc, #36]	@ (80031a8 <Si468x_set_audio_volume+0x64>)
 8003184:	f000 fc4a 	bl	8003a1c <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	2201      	movs	r2, #1
 800318c:	4619      	mov	r1, r3
 800318e:	200b      	movs	r0, #11
 8003190:	f002 fad0 	bl	8005734 <eeprom_write>
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20004bc4 	.word	0x20004bc4
 80031a0:	0800e134 	.word	0x0800e134
 80031a4:	200034d0 	.word	0x200034d0
 80031a8:	0800e140 	.word	0x0800e140

080031ac <play_station>:
}



void play_station(uint8_t station_id)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08c      	sub	sp, #48	@ 0x30
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dab_management.actual_station = station_id;
 80031b8:	4a40      	ldr	r2, [pc, #256]	@ (80032bc <play_station+0x110>)
 80031ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031be:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 80031c0:	4b3e      	ldr	r3, [pc, #248]	@ (80032bc <play_station+0x110>)
 80031c2:	78da      	ldrb	r2, [r3, #3]
 80031c4:	4b3d      	ldr	r3, [pc, #244]	@ (80032bc <play_station+0x110>)
 80031c6:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80031c8:	2201      	movs	r2, #1
 80031ca:	493d      	ldr	r1, [pc, #244]	@ (80032c0 <play_station+0x114>)
 80031cc:	f240 1007 	movw	r0, #263	@ 0x107
 80031d0:	f002 fab0 	bl	8005734 <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 80031d4:	2101      	movs	r1, #1
 80031d6:	483b      	ldr	r0, [pc, #236]	@ (80032c4 <play_station+0x118>)
 80031d8:	f000 fc20 	bl	8003a1c <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 80031dc:	2100      	movs	r1, #0
 80031de:	483a      	ldr	r0, [pc, #232]	@ (80032c8 <play_station+0x11c>)
 80031e0:	f000 fc1c 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 80031e4:	4b35      	ldr	r3, [pc, #212]	@ (80032bc <play_station+0x110>)
 80031e6:	78db      	ldrb	r3, [r3, #3]
 80031e8:	3301      	adds	r3, #1
 80031ea:	220a      	movs	r2, #10
 80031ec:	4937      	ldr	r1, [pc, #220]	@ (80032cc <play_station+0x120>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f00a f8fc 	bl	800d3ec <itoa>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fc0f 	bl	8003a1c <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 80031fe:	2100      	movs	r1, #0
 8003200:	4833      	ldr	r0, [pc, #204]	@ (80032d0 <play_station+0x124>)
 8003202:	f000 fc0b 	bl	8003a1c <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 8003206:	4b2d      	ldr	r3, [pc, #180]	@ (80032bc <play_station+0x110>)
 8003208:	78db      	ldrb	r3, [r3, #3]
 800320a:	461a      	mov	r2, r3
 800320c:	2334      	movs	r3, #52	@ 0x34
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	4a30      	ldr	r2, [pc, #192]	@ (80032d4 <play_station+0x128>)
 8003214:	4413      	add	r3, r2
 8003216:	2101      	movs	r1, #1
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fbff 	bl	8003a1c <send_debug_msg>
	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, USE_ANT_CAP); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 800321e:	4b27      	ldr	r3, [pc, #156]	@ (80032bc <play_station+0x110>)
 8003220:	78db      	ldrb	r3, [r3, #3]
 8003222:	4619      	mov	r1, r3
 8003224:	4a2b      	ldr	r2, [pc, #172]	@ (80032d4 <play_station+0x128>)
 8003226:	2334      	movs	r3, #52	@ 0x34
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3328      	adds	r3, #40	@ 0x28
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe fc4b 	bl	8001ad0 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <play_station+0x110>)
 800323c:	78db      	ldrb	r3, [r3, #3]
 800323e:	4619      	mov	r1, r3
 8003240:	4a24      	ldr	r2, [pc, #144]	@ (80032d4 <play_station+0x128>)
 8003242:	2334      	movs	r3, #52	@ 0x34
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	3320      	adds	r3, #32
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <play_station+0x110>)
 8003250:	78db      	ldrb	r3, [r3, #3]
 8003252:	4618      	mov	r0, r3
 8003254:	491f      	ldr	r1, [pc, #124]	@ (80032d4 <play_station+0x128>)
 8003256:	2334      	movs	r3, #52	@ 0x34
 8003258:	fb00 f303 	mul.w	r3, r0, r3
 800325c:	440b      	add	r3, r1
 800325e:	332a      	adds	r3, #42	@ 0x2a
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f7ff fd03 	bl	8002c70 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 800326a:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <play_station+0x110>)
 800326c:	78db      	ldrb	r3, [r3, #3]
 800326e:	4619      	mov	r1, r3
 8003270:	4a18      	ldr	r2, [pc, #96]	@ (80032d4 <play_station+0x128>)
 8003272:	2334      	movs	r3, #52	@ 0x34
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3320      	adds	r3, #32
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <play_station+0x110>)
 8003280:	78db      	ldrb	r3, [r3, #3]
 8003282:	4618      	mov	r0, r3
 8003284:	4913      	ldr	r1, [pc, #76]	@ (80032d4 <play_station+0x128>)
 8003286:	2334      	movs	r3, #52	@ 0x34
 8003288:	fb00 f303 	mul.w	r3, r0, r3
 800328c:	440b      	add	r3, r1
 800328e:	332a      	adds	r3, #42	@ 0x2a
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7fe fffd 	bl	8002294 <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 800329a:	463b      	mov	r3, r7
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fcef 	bl	8001c80 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 80032a2:	463b      	mov	r3, r7
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fbfb 	bl	8002aa0 <Si468x_dab_get_audio_info>

	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x03);	//enable both service interrupts
 80032aa:	2103      	movs	r1, #3
 80032ac:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 80032b0:	f7fe fb24 	bl	80018fc <Si468x_set_property>
}
 80032b4:	bf00      	nop
 80032b6:	3730      	adds	r7, #48	@ 0x30
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20004bc4 	.word	0x20004bc4
 80032c0:	20004bc8 	.word	0x20004bc8
 80032c4:	0800e154 	.word	0x0800e154
 80032c8:	0800e178 	.word	0x0800e178
 80032cc:	200034d0 	.word	0x200034d0
 80032d0:	0800e18c 	.word	0x0800e18c
 80032d4:	20003774 	.word	0x20003774

080032d8 <restore_from_eeprom>:

void restore_from_eeprom()
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b094      	sub	sp, #80	@ 0x50
 80032dc:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 80032de:	2101      	movs	r1, #1
 80032e0:	48a7      	ldr	r0, [pc, #668]	@ (8003580 <restore_from_eeprom+0x2a8>)
 80032e2:	f000 fb9b 	bl	8003a1c <send_debug_msg>

	//restore frequency table

	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 80032e6:	2201      	movs	r2, #1
 80032e8:	49a6      	ldr	r1, [pc, #664]	@ (8003584 <restore_from_eeprom+0x2ac>)
 80032ea:	203f      	movs	r0, #63	@ 0x3f
 80032ec:	f002 fa04 	bl	80056f8 <eeprom_read>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80032f6:	e016      	b.n	8003326 <restore_from_eeprom+0x4e>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 80032f8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80032fc:	3302      	adds	r3, #2
 80032fe:	015b      	lsls	r3, r3, #5
 8003300:	4618      	mov	r0, r3
 8003302:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4a9f      	ldr	r2, [pc, #636]	@ (8003588 <restore_from_eeprom+0x2b0>)
 800330c:	4413      	add	r3, r2
 800330e:	2220      	movs	r2, #32
 8003310:	4619      	mov	r1, r3
 8003312:	f002 f9f1 	bl	80056f8 <eeprom_read>
		HAL_Delay(5);
 8003316:	2005      	movs	r0, #5
 8003318:	f004 f896 	bl	8007448 <HAL_Delay>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 800331c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003320:	3301      	adds	r3, #1
 8003322:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003326:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800332a:	2b05      	cmp	r3, #5
 800332c:	d9e4      	bls.n	80032f8 <restore_from_eeprom+0x20>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 800332e:	2100      	movs	r1, #0
 8003330:	4896      	ldr	r0, [pc, #600]	@ (800358c <restore_from_eeprom+0x2b4>)
 8003332:	f000 fb73 	bl	8003a1c <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003336:	4b96      	ldr	r3, [pc, #600]	@ (8003590 <restore_from_eeprom+0x2b8>)
 8003338:	7b5b      	ldrb	r3, [r3, #13]
 800333a:	220a      	movs	r2, #10
 800333c:	4995      	ldr	r1, [pc, #596]	@ (8003594 <restore_from_eeprom+0x2bc>)
 800333e:	4618      	mov	r0, r3
 8003340:	f00a f854 	bl	800d3ec <itoa>
 8003344:	4603      	mov	r3, r0
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fb67 	bl	8003a1c <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 800334e:	2101      	movs	r1, #1
 8003350:	4891      	ldr	r0, [pc, #580]	@ (8003598 <restore_from_eeprom+0x2c0>)
 8003352:	f000 fb63 	bl	8003a1c <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800335a:	e022      	b.n	80033a2 <restore_from_eeprom+0xca>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 800335c:	220a      	movs	r2, #10
 800335e:	498d      	ldr	r1, [pc, #564]	@ (8003594 <restore_from_eeprom+0x2bc>)
 8003360:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003362:	f00a f843 	bl	800d3ec <itoa>
 8003366:	4603      	mov	r3, r0
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fb56 	bl	8003a1c <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003370:	2100      	movs	r1, #0
 8003372:	488a      	ldr	r0, [pc, #552]	@ (800359c <restore_from_eeprom+0x2c4>)
 8003374:	f000 fb52 	bl	8003a1c <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003378:	4a83      	ldr	r2, [pc, #524]	@ (8003588 <restore_from_eeprom+0x2b0>)
 800337a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	220a      	movs	r2, #10
 8003382:	4984      	ldr	r1, [pc, #528]	@ (8003594 <restore_from_eeprom+0x2bc>)
 8003384:	4618      	mov	r0, r3
 8003386:	f00a f831 	bl	800d3ec <itoa>
 800338a:	4603      	mov	r3, r0
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fb44 	bl	8003a1c <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8003394:	2101      	movs	r1, #1
 8003396:	4882      	ldr	r0, [pc, #520]	@ (80035a0 <restore_from_eeprom+0x2c8>)
 8003398:	f000 fb40 	bl	8003a1c <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 800339c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800339e:	3301      	adds	r3, #1
 80033a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003590 <restore_from_eeprom+0x2b8>)
 80033a4:	7b5b      	ldrb	r3, [r3, #13]
 80033a6:	461a      	mov	r2, r3
 80033a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033aa:	4293      	cmp	r3, r2
 80033ac:	dbd6      	blt.n	800335c <restore_from_eeprom+0x84>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 80033ae:	2201      	movs	r2, #1
 80033b0:	497c      	ldr	r1, [pc, #496]	@ (80035a4 <restore_from_eeprom+0x2cc>)
 80033b2:	f240 1005 	movw	r0, #261	@ 0x105
 80033b6:	f002 f99f 	bl	80056f8 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 80033ba:	2201      	movs	r2, #1
 80033bc:	4974      	ldr	r1, [pc, #464]	@ (8003590 <restore_from_eeprom+0x2b8>)
 80033be:	f44f 7083 	mov.w	r0, #262	@ 0x106
 80033c2:	f002 f999 	bl	80056f8 <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 80033c6:	4b72      	ldr	r3, [pc, #456]	@ (8003590 <restore_from_eeprom+0x2b8>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2bff      	cmp	r3, #255	@ 0xff
 80033cc:	f000 82c2 	beq.w	8003954 <restore_from_eeprom+0x67c>
 80033d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003590 <restore_from_eeprom+0x2b8>)
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	2bff      	cmp	r3, #255	@ 0xff
 80033d6:	f000 82bd 	beq.w	8003954 <restore_from_eeprom+0x67c>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 80033da:	2204      	movs	r2, #4
 80033dc:	4972      	ldr	r1, [pc, #456]	@ (80035a8 <restore_from_eeprom+0x2d0>)
 80033de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80033e2:	f002 f989 	bl	80056f8 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 80033e6:	2201      	movs	r2, #1
 80033e8:	4970      	ldr	r1, [pc, #448]	@ (80035ac <restore_from_eeprom+0x2d4>)
 80033ea:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80033ee:	f002 f983 	bl	80056f8 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80033f2:	2201      	movs	r2, #1
 80033f4:	496e      	ldr	r1, [pc, #440]	@ (80035b0 <restore_from_eeprom+0x2d8>)
 80033f6:	f240 1007 	movw	r0, #263	@ 0x107
 80033fa:	f002 f97d 	bl	80056f8 <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 80033fe:	4b64      	ldr	r3, [pc, #400]	@ (8003590 <restore_from_eeprom+0x2b8>)
 8003400:	791b      	ldrb	r3, [r3, #4]
 8003402:	2bff      	cmp	r3, #255	@ 0xff
 8003404:	d102      	bne.n	800340c <restore_from_eeprom+0x134>
		{
			dab_management.last_station_index = 0;
 8003406:	4b62      	ldr	r3, [pc, #392]	@ (8003590 <restore_from_eeprom+0x2b8>)
 8003408:	2200      	movs	r2, #0
 800340a:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 800340c:	4b60      	ldr	r3, [pc, #384]	@ (8003590 <restore_from_eeprom+0x2b8>)
 800340e:	791a      	ldrb	r2, [r3, #4]
 8003410:	4b5f      	ldr	r3, [pc, #380]	@ (8003590 <restore_from_eeprom+0x2b8>)
 8003412:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003414:	2300      	movs	r3, #0
 8003416:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800341a:	e012      	b.n	8003442 <restore_from_eeprom+0x16a>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 800341c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003420:	330a      	adds	r3, #10
 8003422:	015b      	lsls	r3, r3, #5
 8003424:	4618      	mov	r0, r3
 8003426:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800342a:	015b      	lsls	r3, r3, #5
 800342c:	4a61      	ldr	r2, [pc, #388]	@ (80035b4 <restore_from_eeprom+0x2dc>)
 800342e:	4413      	add	r3, r2
 8003430:	2220      	movs	r2, #32
 8003432:	4619      	mov	r1, r3
 8003434:	f002 f960 	bl	80056f8 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003438:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800343c:	3301      	adds	r3, #1
 800343e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8003442:	4b53      	ldr	r3, [pc, #332]	@ (8003590 <restore_from_eeprom+0x2b8>)
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800344a:	429a      	cmp	r2, r3
 800344c:	d3e6      	bcc.n	800341c <restore_from_eeprom+0x144>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
			}
		}
		if(PAGE_SIZE == 32)
		{
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003454:	e026      	b.n	80034a4 <restore_from_eeprom+0x1cc>
			{
				uint8_t temp [64];
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2, &temp[0], 32);
 8003456:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800345a:	330f      	adds	r3, #15
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	4618      	mov	r0, r3
 8003460:	463b      	mov	r3, r7
 8003462:	2220      	movs	r2, #32
 8003464:	4619      	mov	r1, r3
 8003466:	f002 f947 	bl	80056f8 <eeprom_read>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 800346a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800346e:	330f      	adds	r3, #15
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	3320      	adds	r3, #32
 8003474:	4618      	mov	r0, r3
 8003476:	463b      	mov	r3, r7
 8003478:	3320      	adds	r3, #32
 800347a:	2214      	movs	r2, #20
 800347c:	4619      	mov	r1, r3
 800347e:	f002 f93b 	bl	80056f8 <eeprom_read>
				memcpy(&services_list[i], &temp, sizeof(dab_service_t));
 8003482:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003486:	2234      	movs	r2, #52	@ 0x34
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	4a4a      	ldr	r2, [pc, #296]	@ (80035b8 <restore_from_eeprom+0x2e0>)
 800348e:	4413      	add	r3, r2
 8003490:	4639      	mov	r1, r7
 8003492:	2234      	movs	r2, #52	@ 0x34
 8003494:	4618      	mov	r0, r3
 8003496:	f00a f819 	bl	800d4cc <memcpy>
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 800349a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800349e:	3301      	adds	r3, #1
 80034a0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80034a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003590 <restore_from_eeprom+0x2b8>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3d2      	bcc.n	8003456 <restore_from_eeprom+0x17e>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 80034b0:	2100      	movs	r1, #0
 80034b2:	4836      	ldr	r0, [pc, #216]	@ (800358c <restore_from_eeprom+0x2b4>)
 80034b4:	f000 fab2 	bl	8003a1c <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 80034b8:	4b35      	ldr	r3, [pc, #212]	@ (8003590 <restore_from_eeprom+0x2b8>)
 80034ba:	7b5b      	ldrb	r3, [r3, #13]
 80034bc:	220a      	movs	r2, #10
 80034be:	4935      	ldr	r1, [pc, #212]	@ (8003594 <restore_from_eeprom+0x2bc>)
 80034c0:	4618      	mov	r0, r3
 80034c2:	f009 ff93 	bl	800d3ec <itoa>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 faa6 	bl	8003a1c <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 80034d0:	2101      	movs	r1, #1
 80034d2:	4831      	ldr	r0, [pc, #196]	@ (8003598 <restore_from_eeprom+0x2c0>)
 80034d4:	f000 faa2 	bl	8003a1c <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 80034d8:	2300      	movs	r3, #0
 80034da:	647b      	str	r3, [r7, #68]	@ 0x44
 80034dc:	e022      	b.n	8003524 <restore_from_eeprom+0x24c>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 80034de:	220a      	movs	r2, #10
 80034e0:	492c      	ldr	r1, [pc, #176]	@ (8003594 <restore_from_eeprom+0x2bc>)
 80034e2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80034e4:	f009 ff82 	bl	800d3ec <itoa>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fa95 	bl	8003a1c <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 80034f2:	2100      	movs	r1, #0
 80034f4:	4829      	ldr	r0, [pc, #164]	@ (800359c <restore_from_eeprom+0x2c4>)
 80034f6:	f000 fa91 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 80034fa:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <restore_from_eeprom+0x2b0>)
 80034fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003502:	220a      	movs	r2, #10
 8003504:	4923      	ldr	r1, [pc, #140]	@ (8003594 <restore_from_eeprom+0x2bc>)
 8003506:	4618      	mov	r0, r3
 8003508:	f009 ff70 	bl	800d3ec <itoa>
 800350c:	4603      	mov	r3, r0
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fa83 	bl	8003a1c <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 8003516:	2101      	movs	r1, #1
 8003518:	4821      	ldr	r0, [pc, #132]	@ (80035a0 <restore_from_eeprom+0x2c8>)
 800351a:	f000 fa7f 	bl	8003a1c <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 800351e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003520:	3301      	adds	r3, #1
 8003522:	647b      	str	r3, [r7, #68]	@ 0x44
 8003524:	4b1a      	ldr	r3, [pc, #104]	@ (8003590 <restore_from_eeprom+0x2b8>)
 8003526:	7b5b      	ldrb	r3, [r3, #13]
 8003528:	461a      	mov	r2, r3
 800352a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352c:	4293      	cmp	r3, r2
 800352e:	dbd6      	blt.n	80034de <restore_from_eeprom+0x206>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8003530:	2100      	movs	r1, #0
 8003532:	4822      	ldr	r0, [pc, #136]	@ (80035bc <restore_from_eeprom+0x2e4>)
 8003534:	f000 fa72 	bl	8003a1c <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8003538:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <restore_from_eeprom+0x2b8>)
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	220a      	movs	r2, #10
 800353e:	4915      	ldr	r1, [pc, #84]	@ (8003594 <restore_from_eeprom+0x2bc>)
 8003540:	4618      	mov	r0, r3
 8003542:	f009 ff53 	bl	800d3ec <itoa>
 8003546:	4603      	mov	r3, r0
 8003548:	2101      	movs	r1, #1
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fa66 	bl	8003a1c <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8003550:	2101      	movs	r1, #1
 8003552:	481b      	ldr	r0, [pc, #108]	@ (80035c0 <restore_from_eeprom+0x2e8>)
 8003554:	f000 fa62 	bl	8003a1c <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8003558:	2100      	movs	r1, #0
 800355a:	481a      	ldr	r0, [pc, #104]	@ (80035c4 <restore_from_eeprom+0x2ec>)
 800355c:	f000 fa5e 	bl	8003a1c <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8003560:	2100      	movs	r1, #0
 8003562:	4819      	ldr	r0, [pc, #100]	@ (80035c8 <restore_from_eeprom+0x2f0>)
 8003564:	f000 fa5a 	bl	8003a1c <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8003568:	2100      	movs	r1, #0
 800356a:	4818      	ldr	r0, [pc, #96]	@ (80035cc <restore_from_eeprom+0x2f4>)
 800356c:	f000 fa56 	bl	8003a1c <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8003570:	2101      	movs	r1, #1
 8003572:	4817      	ldr	r0, [pc, #92]	@ (80035d0 <restore_from_eeprom+0x2f8>)
 8003574:	f000 fa52 	bl	8003a1c <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800357e:	e086      	b.n	800368e <restore_from_eeprom+0x3b6>
 8003580:	0800e194 	.word	0x0800e194
 8003584:	20004bd1 	.word	0x20004bd1
 8003588:	20003514 	.word	0x20003514
 800358c:	0800dacc 	.word	0x0800dacc
 8003590:	20004bc4 	.word	0x20004bc4
 8003594:	200034d0 	.word	0x200034d0
 8003598:	0800dad4 	.word	0x0800dad4
 800359c:	0800daec 	.word	0x0800daec
 80035a0:	0800daf0 	.word	0x0800daf0
 80035a4:	20004bc5 	.word	0x20004bc5
 80035a8:	20004bcc 	.word	0x20004bcc
 80035ac:	20004bd0 	.word	0x20004bd0
 80035b0:	20004bc8 	.word	0x20004bc8
 80035b4:	20003634 	.word	0x20003634
 80035b8:	20003774 	.word	0x20003774
 80035bc:	0800dd5c 	.word	0x0800dd5c
 80035c0:	0800dd70 	.word	0x0800dd70
 80035c4:	0800dda4 	.word	0x0800dda4
 80035c8:	0800ddb0 	.word	0x0800ddb0
 80035cc:	0800ddc4 	.word	0x0800ddc4
 80035d0:	0800ddd4 	.word	0x0800ddd4
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80035d4:	2100      	movs	r1, #0
 80035d6:	48cc      	ldr	r0, [pc, #816]	@ (8003908 <restore_from_eeprom+0x630>)
 80035d8:	f000 fa20 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80035dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80035e0:	3301      	adds	r3, #1
 80035e2:	220a      	movs	r2, #10
 80035e4:	49c9      	ldr	r1, [pc, #804]	@ (800390c <restore_from_eeprom+0x634>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	f009 ff00 	bl	800d3ec <itoa>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fa13 	bl	8003a1c <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 80035f6:	2100      	movs	r1, #0
 80035f8:	48c5      	ldr	r0, [pc, #788]	@ (8003910 <restore_from_eeprom+0x638>)
 80035fa:	f000 fa0f 	bl	8003a1c <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80035fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	4ac3      	ldr	r2, [pc, #780]	@ (8003914 <restore_from_eeprom+0x63c>)
 8003606:	4413      	add	r3, r2
 8003608:	3302      	adds	r3, #2
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fa05 	bl	8003a1c <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8003612:	2100      	movs	r1, #0
 8003614:	48bc      	ldr	r0, [pc, #752]	@ (8003908 <restore_from_eeprom+0x630>)
 8003616:	f000 fa01 	bl	8003a1c <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800361a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800361e:	4abd      	ldr	r2, [pc, #756]	@ (8003914 <restore_from_eeprom+0x63c>)
 8003620:	015b      	lsls	r3, r3, #5
 8003622:	4413      	add	r3, r2
 8003624:	3318      	adds	r3, #24
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	220a      	movs	r2, #10
 800362a:	49b8      	ldr	r1, [pc, #736]	@ (800390c <restore_from_eeprom+0x634>)
 800362c:	4618      	mov	r0, r3
 800362e:	f009 fedd 	bl	800d3ec <itoa>
 8003632:	4603      	mov	r3, r0
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f9f0 	bl	8003a1c <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800363c:	2100      	movs	r1, #0
 800363e:	48b6      	ldr	r0, [pc, #728]	@ (8003918 <restore_from_eeprom+0x640>)
 8003640:	f000 f9ec 	bl	8003a1c <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8003644:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003648:	4ab2      	ldr	r2, [pc, #712]	@ (8003914 <restore_from_eeprom+0x63c>)
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	4413      	add	r3, r2
 800364e:	331c      	adds	r3, #28
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4bb1      	ldr	r3, [pc, #708]	@ (800391c <restore_from_eeprom+0x644>)
 8003656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f000 f9dd 	bl	8003a1c <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8003662:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003666:	4aab      	ldr	r2, [pc, #684]	@ (8003914 <restore_from_eeprom+0x63c>)
 8003668:	015b      	lsls	r3, r3, #5
 800366a:	4413      	add	r3, r2
 800366c:	331c      	adds	r3, #28
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b13      	cmp	r3, #19
 8003672:	d803      	bhi.n	800367c <restore_from_eeprom+0x3a4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003674:	2100      	movs	r1, #0
 8003676:	48aa      	ldr	r0, [pc, #680]	@ (8003920 <restore_from_eeprom+0x648>)
 8003678:	f000 f9d0 	bl	8003a1c <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 800367c:	2101      	movs	r1, #1
 800367e:	48a9      	ldr	r0, [pc, #676]	@ (8003924 <restore_from_eeprom+0x64c>)
 8003680:	f000 f9cc 	bl	8003a1c <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003684:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003688:	3301      	adds	r3, #1
 800368a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800368e:	4ba6      	ldr	r3, [pc, #664]	@ (8003928 <restore_from_eeprom+0x650>)
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8003696:	429a      	cmp	r2, r3
 8003698:	d39c      	bcc.n	80035d4 <restore_from_eeprom+0x2fc>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800369a:	2101      	movs	r1, #1
 800369c:	48a3      	ldr	r0, [pc, #652]	@ (800392c <restore_from_eeprom+0x654>)
 800369e:	f000 f9bd 	bl	8003a1c <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80036a2:	2100      	movs	r1, #0
 80036a4:	48a2      	ldr	r0, [pc, #648]	@ (8003930 <restore_from_eeprom+0x658>)
 80036a6:	f000 f9b9 	bl	8003a1c <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80036aa:	4b9f      	ldr	r3, [pc, #636]	@ (8003928 <restore_from_eeprom+0x650>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	220a      	movs	r2, #10
 80036b0:	4996      	ldr	r1, [pc, #600]	@ (800390c <restore_from_eeprom+0x634>)
 80036b2:	4618      	mov	r0, r3
 80036b4:	f009 fe9a 	bl	800d3ec <itoa>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f9ad 	bl	8003a1c <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80036c2:	2101      	movs	r1, #1
 80036c4:	489b      	ldr	r0, [pc, #620]	@ (8003934 <restore_from_eeprom+0x65c>)
 80036c6:	f000 f9a9 	bl	8003a1c <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80036ca:	2101      	movs	r1, #1
 80036cc:	489a      	ldr	r0, [pc, #616]	@ (8003938 <restore_from_eeprom+0x660>)
 80036ce:	f000 f9a5 	bl	8003a1c <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80036d8:	e0f7      	b.n	80038ca <restore_from_eeprom+0x5f2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80036da:	2100      	movs	r1, #0
 80036dc:	488a      	ldr	r0, [pc, #552]	@ (8003908 <restore_from_eeprom+0x630>)
 80036de:	f000 f99d 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80036e2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80036e6:	3301      	adds	r3, #1
 80036e8:	220a      	movs	r2, #10
 80036ea:	4988      	ldr	r1, [pc, #544]	@ (800390c <restore_from_eeprom+0x634>)
 80036ec:	4618      	mov	r0, r3
 80036ee:	f009 fe7d 	bl	800d3ec <itoa>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f990 	bl	8003a1c <send_debug_msg>
			if((services_index +1) < 10)
 80036fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003700:	2b08      	cmp	r3, #8
 8003702:	d803      	bhi.n	800370c <restore_from_eeprom+0x434>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003704:	2100      	movs	r1, #0
 8003706:	4886      	ldr	r0, [pc, #536]	@ (8003920 <restore_from_eeprom+0x648>)
 8003708:	f000 f988 	bl	8003a1c <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800370c:	2100      	movs	r1, #0
 800370e:	488b      	ldr	r0, [pc, #556]	@ (800393c <restore_from_eeprom+0x664>)
 8003710:	f000 f984 	bl	8003a1c <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8003714:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003718:	2234      	movs	r2, #52	@ 0x34
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4a88      	ldr	r2, [pc, #544]	@ (8003940 <restore_from_eeprom+0x668>)
 8003720:	4413      	add	r3, r2
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f979 	bl	8003a1c <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800372a:	2100      	movs	r1, #0
 800372c:	4885      	ldr	r0, [pc, #532]	@ (8003944 <restore_from_eeprom+0x66c>)
 800372e:	f000 f975 	bl	8003a1c <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003738:	e021      	b.n	800377e <restore_from_eeprom+0x4a6>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800373a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800373e:	4a75      	ldr	r2, [pc, #468]	@ (8003914 <restore_from_eeprom+0x63c>)
 8003740:	015b      	lsls	r3, r3, #5
 8003742:	4413      	add	r3, r2
 8003744:	331c      	adds	r3, #28
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800374c:	497c      	ldr	r1, [pc, #496]	@ (8003940 <restore_from_eeprom+0x668>)
 800374e:	2034      	movs	r0, #52	@ 0x34
 8003750:	fb00 f303 	mul.w	r3, r0, r3
 8003754:	440b      	add	r3, r1
 8003756:	3328      	adds	r3, #40	@ 0x28
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d10a      	bne.n	8003774 <restore_from_eeprom+0x49c>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 800375e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003762:	015b      	lsls	r3, r3, #5
 8003764:	4a6b      	ldr	r2, [pc, #428]	@ (8003914 <restore_from_eeprom+0x63c>)
 8003766:	4413      	add	r3, r2
 8003768:	3302      	adds	r3, #2
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f955 	bl	8003a1c <send_debug_msg>
					break;
 8003772:	e00a      	b.n	800378a <restore_from_eeprom+0x4b2>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003774:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003778:	3301      	adds	r3, #1
 800377a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800377e:	4b6a      	ldr	r3, [pc, #424]	@ (8003928 <restore_from_eeprom+0x650>)
 8003780:	785b      	ldrb	r3, [r3, #1]
 8003782:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8003786:	429a      	cmp	r2, r3
 8003788:	d3d7      	bcc.n	800373a <restore_from_eeprom+0x462>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 800378a:	2100      	movs	r1, #0
 800378c:	486d      	ldr	r0, [pc, #436]	@ (8003944 <restore_from_eeprom+0x66c>)
 800378e:	f000 f945 	bl	8003a1c <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003792:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003796:	4a6a      	ldr	r2, [pc, #424]	@ (8003940 <restore_from_eeprom+0x668>)
 8003798:	2134      	movs	r1, #52	@ 0x34
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	3324      	adds	r3, #36	@ 0x24
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	220a      	movs	r2, #10
 80037a6:	4959      	ldr	r1, [pc, #356]	@ (800390c <restore_from_eeprom+0x634>)
 80037a8:	4618      	mov	r0, r3
 80037aa:	f009 fe1f 	bl	800d3ec <itoa>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f932 	bl	8003a1c <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80037b8:	2100      	movs	r1, #0
 80037ba:	4857      	ldr	r0, [pc, #348]	@ (8003918 <restore_from_eeprom+0x640>)
 80037bc:	f000 f92e 	bl	8003a1c <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80037c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80037c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003940 <restore_from_eeprom+0x668>)
 80037c6:	2134      	movs	r1, #52	@ 0x34
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	3328      	adds	r3, #40	@ 0x28
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b51      	ldr	r3, [pc, #324]	@ (800391c <restore_from_eeprom+0x644>)
 80037d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f91d 	bl	8003a1c <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 80037e2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80037e6:	4a56      	ldr	r2, [pc, #344]	@ (8003940 <restore_from_eeprom+0x668>)
 80037e8:	2134      	movs	r1, #52	@ 0x34
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3328      	adds	r3, #40	@ 0x28
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b13      	cmp	r3, #19
 80037f6:	d803      	bhi.n	8003800 <restore_from_eeprom+0x528>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80037f8:	2100      	movs	r1, #0
 80037fa:	4849      	ldr	r0, [pc, #292]	@ (8003920 <restore_from_eeprom+0x648>)
 80037fc:	f000 f90e 	bl	8003a1c <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003800:	2100      	movs	r1, #0
 8003802:	484e      	ldr	r0, [pc, #312]	@ (800393c <restore_from_eeprom+0x664>)
 8003804:	f000 f90a 	bl	8003a1c <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8003808:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800380c:	4a4c      	ldr	r2, [pc, #304]	@ (8003940 <restore_from_eeprom+0x668>)
 800380e:	2134      	movs	r1, #52	@ 0x34
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	3315      	adds	r3, #21
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	220a      	movs	r2, #10
 800381c:	493b      	ldr	r1, [pc, #236]	@ (800390c <restore_from_eeprom+0x634>)
 800381e:	4618      	mov	r0, r3
 8003820:	f009 fde4 	bl	800d3ec <itoa>
 8003824:	4603      	mov	r3, r0
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f8f7 	bl	8003a1c <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 800382e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003832:	4a43      	ldr	r2, [pc, #268]	@ (8003940 <restore_from_eeprom+0x668>)
 8003834:	2134      	movs	r1, #52	@ 0x34
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3315      	adds	r3, #21
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b09      	cmp	r3, #9
 8003842:	d803      	bhi.n	800384c <restore_from_eeprom+0x574>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003844:	2100      	movs	r1, #0
 8003846:	4836      	ldr	r0, [pc, #216]	@ (8003920 <restore_from_eeprom+0x648>)
 8003848:	f000 f8e8 	bl	8003a1c <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 800384c:	2100      	movs	r1, #0
 800384e:	483e      	ldr	r0, [pc, #248]	@ (8003948 <restore_from_eeprom+0x670>)
 8003850:	f000 f8e4 	bl	8003a1c <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003854:	2100      	movs	r1, #0
 8003856:	483d      	ldr	r0, [pc, #244]	@ (800394c <restore_from_eeprom+0x674>)
 8003858:	f000 f8e0 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 800385c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003860:	4a37      	ldr	r2, [pc, #220]	@ (8003940 <restore_from_eeprom+0x668>)
 8003862:	2134      	movs	r1, #52	@ 0x34
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	3320      	adds	r3, #32
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2210      	movs	r2, #16
 8003870:	4926      	ldr	r1, [pc, #152]	@ (800390c <restore_from_eeprom+0x634>)
 8003872:	4618      	mov	r0, r3
 8003874:	f009 fdba 	bl	800d3ec <itoa>
 8003878:	4603      	mov	r3, r0
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f8cd 	bl	8003a1c <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003882:	2100      	movs	r1, #0
 8003884:	482d      	ldr	r0, [pc, #180]	@ (800393c <restore_from_eeprom+0x664>)
 8003886:	f000 f8c9 	bl	8003a1c <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800388a:	2100      	movs	r1, #0
 800388c:	482f      	ldr	r0, [pc, #188]	@ (800394c <restore_from_eeprom+0x674>)
 800388e:	f000 f8c5 	bl	8003a1c <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003892:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003896:	4a2a      	ldr	r2, [pc, #168]	@ (8003940 <restore_from_eeprom+0x668>)
 8003898:	2134      	movs	r1, #52	@ 0x34
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	332a      	adds	r3, #42	@ 0x2a
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2210      	movs	r2, #16
 80038a6:	4919      	ldr	r1, [pc, #100]	@ (800390c <restore_from_eeprom+0x634>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f009 fd9f 	bl	800d3ec <itoa>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f8b2 	bl	8003a1c <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 80038b8:	2101      	movs	r1, #1
 80038ba:	4825      	ldr	r0, [pc, #148]	@ (8003950 <restore_from_eeprom+0x678>)
 80038bc:	f000 f8ae 	bl	8003a1c <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80038c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80038c4:	3301      	adds	r3, #1
 80038c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80038ca:	4b17      	ldr	r3, [pc, #92]	@ (8003928 <restore_from_eeprom+0x650>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 80038d2:	429a      	cmp	r2, r3
 80038d4:	f4ff af01 	bcc.w	80036da <restore_from_eeprom+0x402>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80038d8:	2101      	movs	r1, #1
 80038da:	4816      	ldr	r0, [pc, #88]	@ (8003934 <restore_from_eeprom+0x65c>)
 80038dc:	f000 f89e 	bl	8003a1c <send_debug_msg>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, USE_ANT_CAP);
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <restore_from_eeprom+0x650>)
 80038e2:	791b      	ldrb	r3, [r3, #4]
 80038e4:	4619      	mov	r1, r3
 80038e6:	4a16      	ldr	r2, [pc, #88]	@ (8003940 <restore_from_eeprom+0x668>)
 80038e8:	2334      	movs	r3, #52	@ 0x34
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	3328      	adds	r3, #40	@ 0x28
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe f8ea 	bl	8001ad0 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 80038fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <restore_from_eeprom+0x650>)
 80038fe:	791b      	ldrb	r3, [r3, #4]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fc53 	bl	80031ac <play_station>
 8003906:	e038      	b.n	800397a <restore_from_eeprom+0x6a2>
 8003908:	0800dde4 	.word	0x0800dde4
 800390c:	200034d0 	.word	0x200034d0
 8003910:	0800dde8 	.word	0x0800dde8
 8003914:	20003634 	.word	0x20003634
 8003918:	0800ddf4 	.word	0x0800ddf4
 800391c:	20000008 	.word	0x20000008
 8003920:	0800ddfc 	.word	0x0800ddfc
 8003924:	0800de00 	.word	0x0800de00
 8003928:	20004bc4 	.word	0x20004bc4
 800392c:	0800dd70 	.word	0x0800dd70
 8003930:	0800de08 	.word	0x0800de08
 8003934:	0800de1c 	.word	0x0800de1c
 8003938:	0800de88 	.word	0x0800de88
 800393c:	0800def4 	.word	0x0800def4
 8003940:	20003774 	.word	0x20003774
 8003944:	0800defc 	.word	0x0800defc
 8003948:	0800df00 	.word	0x0800df00
 800394c:	0800df08 	.word	0x0800df08
 8003950:	0800df0c 	.word	0x0800df0c

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 8003954:	2101      	movs	r1, #1
 8003956:	4816      	ldr	r0, [pc, #88]	@ (80039b0 <restore_from_eeprom+0x6d8>)
 8003958:	f000 f860 	bl	8003a1c <send_debug_msg>
		dab_management.actual_freq = 0;
 800395c:	4b15      	ldr	r3, [pc, #84]	@ (80039b4 <restore_from_eeprom+0x6dc>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 8003962:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <restore_from_eeprom+0x6dc>)
 8003964:	2200      	movs	r2, #0
 8003966:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 8003968:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <restore_from_eeprom+0x6dc>)
 800396a:	2200      	movs	r2, #0
 800396c:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 800396e:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <restore_from_eeprom+0x6dc>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 8003974:	4b0f      	ldr	r3, [pc, #60]	@ (80039b4 <restore_from_eeprom+0x6dc>)
 8003976:	2200      	movs	r2, #0
 8003978:	70da      	strb	r2, [r3, #3]
	}
	//restore volume level
	eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 800397a:	2201      	movs	r2, #1
 800397c:	490e      	ldr	r1, [pc, #56]	@ (80039b8 <restore_from_eeprom+0x6e0>)
 800397e:	200b      	movs	r0, #11
 8003980:	f001 feba 	bl	80056f8 <eeprom_read>
	if(dab_management.audio_volume > 63)
 8003984:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <restore_from_eeprom+0x6dc>)
 8003986:	7b9b      	ldrb	r3, [r3, #14]
 8003988:	2b3f      	cmp	r3, #63	@ 0x3f
 800398a:	d907      	bls.n	800399c <restore_from_eeprom+0x6c4>
	{
		dab_management.audio_volume = 63;
 800398c:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <restore_from_eeprom+0x6dc>)
 800398e:	223f      	movs	r2, #63	@ 0x3f
 8003990:	739a      	strb	r2, [r3, #14]
		eeprom_write(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8003992:	2201      	movs	r2, #1
 8003994:	4908      	ldr	r1, [pc, #32]	@ (80039b8 <restore_from_eeprom+0x6e0>)
 8003996:	200b      	movs	r0, #11
 8003998:	f001 fecc 	bl	8005734 <eeprom_write>
	}
	Si468x_set_audio_volume(dab_management.audio_volume);
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <restore_from_eeprom+0x6dc>)
 800399e:	7b9b      	ldrb	r3, [r3, #14]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fbcf 	bl	8003144 <Si468x_set_audio_volume>
}
 80039a6:	bf00      	nop
 80039a8:	3750      	adds	r7, #80	@ 0x50
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	0800e1d0 	.word	0x0800e1d0
 80039b4:	20004bc4 	.word	0x20004bc4
 80039b8:	20004bd2 	.word	0x20004bd2

080039bc <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
	return services_list;
 80039c0:	4b02      	ldr	r3, [pc, #8]	@ (80039cc <get_dab_service_list+0x10>)
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	20003774 	.word	0x20003774

080039d0 <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
	return ensembles_list;
 80039d4:	4b02      	ldr	r3, [pc, #8]	@ (80039e0 <get_dab_ensemble_list+0x10>)
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	20003634 	.word	0x20003634

080039e4 <get_dab_management>:

dab_management_t get_dab_management()
{
 80039e4:	b490      	push	{r4, r7}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	return dab_management;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a05      	ldr	r2, [pc, #20]	@ (8003a04 <get_dab_management+0x20>)
 80039f0:	461c      	mov	r4, r3
 80039f2:	4613      	mov	r3, r2
 80039f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc90      	pop	{r4, r7}
 8003a02:	4770      	bx	lr
 8003a04:	20004bc4 	.word	0x20004bc4

08003a08 <get_dls_label>:

char* get_dls_label()
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
	return dls_label;
 8003a0c:	4b02      	ldr	r3, [pc, #8]	@ (8003a18 <get_dls_label+0x10>)
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	20004bd4 	.word	0x20004bd4

08003a1c <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7fc fbd7 	bl	80001dc <strlen>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	2364      	movs	r3, #100	@ 0x64
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	480a      	ldr	r0, [pc, #40]	@ (8003a64 <send_debug_msg+0x48>)
 8003a3c:	f009 f949 	bl	800ccd2 <HAL_UART_Transmit>

	if(is_crlf)
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8003a46:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003a4a:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003a4c:	f107 010c 	add.w	r1, r7, #12
 8003a50:	2364      	movs	r3, #100	@ 0x64
 8003a52:	2202      	movs	r2, #2
 8003a54:	4803      	ldr	r0, [pc, #12]	@ (8003a64 <send_debug_msg+0x48>)
 8003a56:	f009 f93c 	bl	800ccd2 <HAL_UART_Transmit>
	}
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20007190 	.word	0x20007190

08003a68 <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[129];

void Display_clear_screen()
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7fc ff3c 	bl	80008ec <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 8003a74:	2311      	movs	r3, #17
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003a7c:	2211      	movs	r2, #17
 8003a7e:	2100      	movs	r1, #0
 8003a80:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8003a84:	f7fc ffbd 	bl	8000a02 <ILI9341_Draw_Line>
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <Display_booting_screen>:

void Display_booting_screen()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003a96:	2000      	movs	r0, #0
 8003a98:	f7fc ff28 	bl	80008ec <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <Display_booting_screen+0xc4>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aaa:	2128      	movs	r1, #40	@ 0x28
 8003aac:	205f      	movs	r0, #95	@ 0x5f
 8003aae:	f7fd f829 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	4b28      	ldr	r3, [pc, #160]	@ (8003b58 <Display_booting_screen+0xc8>)
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ac0:	213c      	movs	r1, #60	@ 0x3c
 8003ac2:	2046      	movs	r0, #70	@ 0x46
 8003ac4:	f7fd f81e 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8003ac8:	2302      	movs	r3, #2
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	4b23      	ldr	r3, [pc, #140]	@ (8003b5c <Display_booting_screen+0xcc>)
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ad6:	2150      	movs	r1, #80	@ 0x50
 8003ad8:	2082      	movs	r0, #130	@ 0x82
 8003ada:	f7fd f813 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003ade:	2302      	movs	r3, #2
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b60 <Display_booting_screen+0xd0>)
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aec:	2164      	movs	r1, #100	@ 0x64
 8003aee:	2064      	movs	r0, #100	@ 0x64
 8003af0:	f7fd f808 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003af4:	2302      	movs	r3, #2
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b64 <Display_booting_screen+0xd4>)
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b02:	2178      	movs	r1, #120	@ 0x78
 8003b04:	205a      	movs	r0, #90	@ 0x5a
 8003b06:	f7fc fffd 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <Display_booting_screen+0xd8>)
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2300      	movs	r3, #0
 8003b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b18:	218c      	movs	r1, #140	@ 0x8c
 8003b1a:	2032      	movs	r0, #50	@ 0x32
 8003b1c:	f7fc fff2 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003b20:	2302      	movs	r3, #2
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <Display_booting_screen+0xdc>)
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b2e:	21a0      	movs	r1, #160	@ 0xa0
 8003b30:	205a      	movs	r0, #90	@ 0x5a
 8003b32:	f7fc ffe7 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 8003b36:	2302      	movs	r3, #2
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <Display_booting_screen+0xe0>)
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b44:	21b4      	movs	r1, #180	@ 0xb4
 8003b46:	2078      	movs	r0, #120	@ 0x78
 8003b48:	f7fc ffdc 	bl	8000b04 <ILI9341_Draw_String>
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	0800e304 	.word	0x0800e304
 8003b58:	0800e314 	.word	0x0800e314
 8003b5c:	0800e32c 	.word	0x0800e32c
 8003b60:	0800e334 	.word	0x0800e334
 8003b64:	0800e344 	.word	0x0800e344
 8003b68:	0800e358 	.word	0x0800e358
 8003b6c:	0800e374 	.word	0x0800e374
 8003b70:	0800e388 	.word	0x0800e388

08003b74 <Display_main_screen_background>:

void Display_main_screen_background()
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 8003b7a:	f7ff ff75 	bl	8003a68 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2);
 8003b7e:	2302      	movs	r3, #2
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	4b40      	ldr	r3, [pc, #256]	@ (8003c84 <Display_main_screen_background+0x110>)
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	2005      	movs	r0, #5
 8003b90:	f7fc ffb8 	bl	8000b04 <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8003b94:	2328      	movs	r3, #40	@ 0x28
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	238c      	movs	r3, #140	@ 0x8c
 8003b9a:	2214      	movs	r2, #20
 8003b9c:	2105      	movs	r1, #5
 8003b9e:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003ba2:	f7fc ff0d 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003ba6:	2341      	movs	r3, #65	@ 0x41
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	238c      	movs	r3, #140	@ 0x8c
 8003bac:	222d      	movs	r2, #45	@ 0x2d
 8003bae:	2105      	movs	r1, #5
 8003bb0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003bb4:	f7fc ff04 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003bb8:	235a      	movs	r3, #90	@ 0x5a
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	238c      	movs	r3, #140	@ 0x8c
 8003bbe:	2246      	movs	r2, #70	@ 0x46
 8003bc0:	2105      	movs	r1, #5
 8003bc2:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003bc6:	f7fc fefb 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003bca:	2373      	movs	r3, #115	@ 0x73
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	238c      	movs	r3, #140	@ 0x8c
 8003bd0:	225f      	movs	r2, #95	@ 0x5f
 8003bd2:	2105      	movs	r1, #5
 8003bd4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003bd8:	f7fc fef2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003bdc:	238c      	movs	r3, #140	@ 0x8c
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	238c      	movs	r3, #140	@ 0x8c
 8003be2:	2278      	movs	r2, #120	@ 0x78
 8003be4:	2105      	movs	r1, #5
 8003be6:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003bea:	f7fc fee9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003bee:	23a5      	movs	r3, #165	@ 0xa5
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	238c      	movs	r3, #140	@ 0x8c
 8003bf4:	2291      	movs	r2, #145	@ 0x91
 8003bf6:	2105      	movs	r1, #5
 8003bf8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003bfc:	f7fc fee0 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003c00:	23be      	movs	r3, #190	@ 0xbe
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	238c      	movs	r3, #140	@ 0x8c
 8003c06:	22aa      	movs	r2, #170	@ 0xaa
 8003c08:	2105      	movs	r1, #5
 8003c0a:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c0e:	f7fc fed7 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8003c12:	23be      	movs	r3, #190	@ 0xbe
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	f240 133b 	movw	r3, #315	@ 0x13b
 8003c1a:	2214      	movs	r2, #20
 8003c1c:	2191      	movs	r1, #145	@ 0x91
 8003c1e:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c22:	f7fc fecd 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003c26:	23eb      	movs	r3, #235	@ 0xeb
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	239d      	movs	r3, #157	@ 0x9d
 8003c2c:	22c3      	movs	r2, #195	@ 0xc3
 8003c2e:	2105      	movs	r1, #5
 8003c30:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8003c34:	f7fc fec4 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003c38:	23eb      	movs	r3, #235	@ 0xeb
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	f240 133b 	movw	r3, #315	@ 0x13b
 8003c40:	22c3      	movs	r2, #195	@ 0xc3
 8003c42:	21a3      	movs	r1, #163	@ 0xa3
 8003c44:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8003c48:	f7fc feba 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <Display_main_screen_background+0x114>)
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8003c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c5c:	21cf      	movs	r1, #207	@ 0xcf
 8003c5e:	2032      	movs	r0, #50	@ 0x32
 8003c60:	f7fc ff50 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8003c64:	2302      	movs	r3, #2
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <Display_main_screen_background+0x118>)
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8003c70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c74:	21cf      	movs	r1, #207	@ 0xcf
 8003c76:	20c0      	movs	r0, #192	@ 0xc0
 8003c78:	f7fc ff44 	bl	8000b04 <ILI9341_Draw_String>
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	0800e394 	.word	0x0800e394
 8003c88:	0800e3a4 	.word	0x0800e3a4
 8003c8c:	0800e3b0 	.word	0x0800e3b0

08003c90 <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 8003c90:	b082      	sub	sp, #8
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af02      	add	r7, sp, #8
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
 8003c9c:	f107 0118 	add.w	r1, r7, #24
 8003ca0:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 8003ca4:	7efb      	ldrb	r3, [r7, #27]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2334      	movs	r3, #52	@ 0x34
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	9200      	str	r2, [sp, #0]
 8003cba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cc2:	2117      	movs	r1, #23
 8003cc4:	2008      	movs	r0, #8
 8003cc6:	f7fc ff1d 	bl	8000b04 <ILI9341_Draw_String>
//
//	//BAr3
//	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);

	//Bar 4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 8003cca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ccc:	2b63      	cmp	r3, #99	@ 0x63
 8003cce:	d81e      	bhi.n	8003d0e <Display_main_screen_data+0x7e>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	4b82      	ldr	r3, [pc, #520]	@ (8003ee0 <Display_main_screen_data+0x250>)
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ce0:	217b      	movs	r1, #123	@ 0x7b
 8003ce2:	2008      	movs	r0, #8
 8003ce4:	f7fc ff0e 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003ce8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003cea:	220a      	movs	r2, #10
 8003cec:	497d      	ldr	r1, [pc, #500]	@ (8003ee4 <Display_main_screen_data+0x254>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f009 fb7c 	bl	800d3ec <itoa>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	9201      	str	r2, [sp, #4]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d04:	217b      	movs	r1, #123	@ 0x7b
 8003d06:	2011      	movs	r0, #17
 8003d08:	f7fc fefc 	bl	8000b04 <ILI9341_Draw_String>
 8003d0c:	e011      	b.n	8003d32 <Display_main_screen_data+0xa2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003d0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d10:	220a      	movs	r2, #10
 8003d12:	4974      	ldr	r1, [pc, #464]	@ (8003ee4 <Display_main_screen_data+0x254>)
 8003d14:	4618      	mov	r0, r3
 8003d16:	f009 fb69 	bl	800d3ec <itoa>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	9201      	str	r2, [sp, #4]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d2a:	217b      	movs	r1, #123	@ 0x7b
 8003d2c:	2008      	movs	r0, #8
 8003d2e:	f7fc fee9 	bl	8000b04 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8003d32:	2302      	movs	r3, #2
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee8 <Display_main_screen_data+0x258>)
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d42:	217b      	movs	r1, #123	@ 0x7b
 8003d44:	2024      	movs	r0, #36	@ 0x24
 8003d46:	f7fc fedd 	bl	8000b04 <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 8003d4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003d4c:	220a      	movs	r2, #10
 8003d4e:	4965      	ldr	r1, [pc, #404]	@ (8003ee4 <Display_main_screen_data+0x254>)
 8003d50:	4618      	mov	r0, r3
 8003d52:	f009 fb4b 	bl	800d3ec <itoa>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2202      	movs	r2, #2
 8003d5a:	9201      	str	r2, [sp, #4]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d66:	217b      	movs	r1, #123	@ 0x7b
 8003d68:	204e      	movs	r0, #78	@ 0x4e
 8003d6a:	f7fc fecb 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 8003d6e:	2302      	movs	r3, #2
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	4b5e      	ldr	r3, [pc, #376]	@ (8003eec <Display_main_screen_data+0x25c>)
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d7e:	217b      	movs	r1, #123	@ 0x7b
 8003d80:	207a      	movs	r0, #122	@ 0x7a
 8003d82:	f7fc febf 	bl	8000b04 <ILI9341_Draw_String>

	//Bar 5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e022      	b.n	8003dd2 <Display_main_screen_data+0x142>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	015b      	lsls	r3, r3, #5
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	4413      	add	r3, r2
 8003d94:	7f1a      	ldrb	r2, [r3, #28]
 8003d96:	7efb      	ldrb	r3, [r7, #27]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	2334      	movs	r3, #52	@ 0x34
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	440b      	add	r3, r1
 8003da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d10f      	bne.n	8003dcc <Display_main_screen_data+0x13c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	015b      	lsls	r3, r3, #5
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	3302      	adds	r3, #2
 8003db6:	2202      	movs	r2, #2
 8003db8:	9201      	str	r2, [sp, #4]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dc4:	2194      	movs	r1, #148	@ 0x94
 8003dc6:	2008      	movs	r0, #8
 8003dc8:	f7fc fe9c 	bl	8000b04 <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	7e7b      	ldrb	r3, [r7, #25]
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3d8      	bcc.n	8003d8c <Display_main_screen_data+0xfc>
		}
	}

	//Bar 6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003dda:	7efb      	ldrb	r3, [r7, #27]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2334      	movs	r3, #52	@ 0x34
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	4a41      	ldr	r2, [pc, #260]	@ (8003ef0 <Display_main_screen_data+0x260>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	099b      	lsrs	r3, r3, #6
 8003df2:	220a      	movs	r2, #10
 8003df4:	493b      	ldr	r1, [pc, #236]	@ (8003ee4 <Display_main_screen_data+0x254>)
 8003df6:	4618      	mov	r0, r3
 8003df8:	f009 faf8 	bl	800d3ec <itoa>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2202      	movs	r2, #2
 8003e00:	9201      	str	r2, [sp, #4]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e0c:	21ad      	movs	r1, #173	@ 0xad
 8003e0e:	2008      	movs	r0, #8
 8003e10:	f7fc fe78 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003e14:	2302      	movs	r3, #2
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	4b36      	ldr	r3, [pc, #216]	@ (8003ef4 <Display_main_screen_data+0x264>)
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e24:	21ad      	movs	r1, #173	@ 0xad
 8003e26:	201f      	movs	r0, #31
 8003e28:	f7fc fe6c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003e2c:	7efb      	ldrb	r3, [r7, #27]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2334      	movs	r3, #52	@ 0x34
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef0 <Display_main_screen_data+0x260>)
 8003e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	220a      	movs	r2, #10
 8003e50:	4924      	ldr	r1, [pc, #144]	@ (8003ee4 <Display_main_screen_data+0x254>)
 8003e52:	4618      	mov	r0, r3
 8003e54:	f009 faca 	bl	800d3ec <itoa>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	9201      	str	r2, [sp, #4]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e68:	21ad      	movs	r1, #173	@ 0xad
 8003e6a:	2026      	movs	r0, #38	@ 0x26
 8003e6c:	f7fc fe4a 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003e70:	2302      	movs	r3, #2
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <Display_main_screen_data+0x268>)
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e80:	21ad      	movs	r1, #173	@ 0xad
 8003e82:	2041      	movs	r0, #65	@ 0x41
 8003e84:	f7fc fe3e 	bl	8000b04 <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <Display_main_screen_data+0x26c>)
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e98:	21ad      	movs	r1, #173	@ 0xad
 8003e9a:	205f      	movs	r0, #95	@ 0x5f
 8003e9c:	f7fc fe32 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003ea0:	7efb      	ldrb	r3, [r7, #27]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2334      	movs	r3, #52	@ 0x34
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <Display_main_screen_data+0x270>)
 8003eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	9201      	str	r2, [sp, #4]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003ec4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ec8:	21ad      	movs	r1, #173	@ 0xad
 8003eca:	2073      	movs	r0, #115	@ 0x73
 8003ecc:	f7fc fe1a 	bl	8000b04 <ILI9341_Draw_String>

	//Station picture

}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eda:	b002      	add	sp, #8
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	0800e3c0 	.word	0x0800e3c0
 8003ee4:	20006d8c 	.word	0x20006d8c
 8003ee8:	0800e3c4 	.word	0x0800e3c4
 8003eec:	0800e3cc 	.word	0x0800e3cc
 8003ef0:	10624dd3 	.word	0x10624dd3
 8003ef4:	0800e3d0 	.word	0x0800e3d0
 8003ef8:	0800e3d4 	.word	0x0800e3d4
 8003efc:	0800e3d8 	.word	0x0800e3d8
 8003f00:	200000ac 	.word	0x200000ac

08003f04 <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 8003f0c:	4919      	ldr	r1, [pc, #100]	@ (8003f74 <Display_main_screen_dls+0x70>)
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc f95a 	bl	80001c8 <strcmp>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d027      	beq.n	8003f6a <Display_main_screen_dls+0x66>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	4b16      	ldr	r3, [pc, #88]	@ (8003f78 <Display_main_screen_dls+0x74>)
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f2a:	2130      	movs	r1, #48	@ 0x30
 8003f2c:	2008      	movs	r0, #8
 8003f2e:	f7fc fde9 	bl	8000b04 <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8003f32:	2302      	movs	r3, #2
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f42:	2130      	movs	r1, #48	@ 0x30
 8003f44:	2008      	movs	r0, #8
 8003f46:	f7fc fddd 	bl	8000b04 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 129; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	e009      	b.n	8003f64 <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	441a      	add	r2, r3
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	7811      	ldrb	r1, [r2, #0]
 8003f5a:	4a06      	ldr	r2, [pc, #24]	@ (8003f74 <Display_main_screen_dls+0x70>)
 8003f5c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 129; i++)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	3301      	adds	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b80      	cmp	r3, #128	@ 0x80
 8003f68:	d9f2      	bls.n	8003f50 <Display_main_screen_dls+0x4c>
		}
	}
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20006dcc 	.word	0x20006dcc
 8003f78:	0800e3dc 	.word	0x0800e3dc

08003f7c <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003f82:	2302      	movs	r3, #2
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	4b2a      	ldr	r3, [pc, #168]	@ (8004030 <Display_main_screen_empty+0xb4>)
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f92:	2117      	movs	r1, #23
 8003f94:	2008      	movs	r0, #8
 8003f96:	f7fc fdb5 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	4b25      	ldr	r3, [pc, #148]	@ (8004034 <Display_main_screen_empty+0xb8>)
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003faa:	2130      	movs	r1, #48	@ 0x30
 8003fac:	2008      	movs	r0, #8
 8003fae:	f7fc fda9 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	4b20      	ldr	r3, [pc, #128]	@ (8004038 <Display_main_screen_empty+0xbc>)
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003fbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fc2:	2149      	movs	r1, #73	@ 0x49
 8003fc4:	2008      	movs	r0, #8
 8003fc6:	f7fc fd9d 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8003fca:	2302      	movs	r3, #2
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <Display_main_screen_empty+0xc0>)
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fda:	2162      	movs	r1, #98	@ 0x62
 8003fdc:	2008      	movs	r0, #8
 8003fde:	f7fc fd91 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	4b16      	ldr	r3, [pc, #88]	@ (8004040 <Display_main_screen_empty+0xc4>)
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ff2:	217b      	movs	r1, #123	@ 0x7b
 8003ff4:	2008      	movs	r0, #8
 8003ff6:	f7fc fd85 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	4b11      	ldr	r3, [pc, #68]	@ (8004044 <Display_main_screen_empty+0xc8>)
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800400a:	2194      	movs	r1, #148	@ 0x94
 800400c:	2008      	movs	r0, #8
 800400e:	f7fc fd79 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 8004012:	2302      	movs	r3, #2
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <Display_main_screen_empty+0xc8>)
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800401e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004022:	21ad      	movs	r1, #173	@ 0xad
 8004024:	2008      	movs	r0, #8
 8004026:	f7fc fd6d 	bl	8000b04 <ILI9341_Draw_String>
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	0800e45c 	.word	0x0800e45c
 8004034:	0800e470 	.word	0x0800e470
 8004038:	0800e484 	.word	0x0800e484
 800403c:	0800e498 	.word	0x0800e498
 8004040:	0800e4ac 	.word	0x0800e4ac
 8004044:	0800e4c0 	.word	0x0800e4c0

08004048 <Display_stations_list_background>:


void Display_stations_list_background()
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af02      	add	r7, sp, #8
	//clear screen
	Display_clear_screen();
 800404e:	f7ff fd0b 	bl	8003a68 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2);
 8004052:	2302      	movs	r3, #2
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	4b59      	ldr	r3, [pc, #356]	@ (80041bc <Display_stations_list_background+0x174>)
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004060:	2101      	movs	r1, #1
 8004062:	2005      	movs	r0, #5
 8004064:	f7fc fd4e 	bl	8000b04 <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 8004068:	2332      	movs	r3, #50	@ 0x32
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	f240 131d 	movw	r3, #285	@ 0x11d
 8004070:	2214      	movs	r2, #20
 8004072:	2105      	movs	r1, #5
 8004074:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004078:	f7fc fca2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 800407c:	2355      	movs	r3, #85	@ 0x55
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	f240 131d 	movw	r3, #285	@ 0x11d
 8004084:	2237      	movs	r2, #55	@ 0x37
 8004086:	2105      	movs	r1, #5
 8004088:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800408c:	f7fc fc98 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8004090:	2378      	movs	r3, #120	@ 0x78
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	f240 131d 	movw	r3, #285	@ 0x11d
 8004098:	225a      	movs	r2, #90	@ 0x5a
 800409a:	2105      	movs	r1, #5
 800409c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040a0:	f7fc fc8e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 80040a4:	239b      	movs	r3, #155	@ 0x9b
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	f240 131d 	movw	r3, #285	@ 0x11d
 80040ac:	227d      	movs	r2, #125	@ 0x7d
 80040ae:	2105      	movs	r1, #5
 80040b0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040b4:	f7fc fc84 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 80040b8:	23be      	movs	r3, #190	@ 0xbe
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f240 131d 	movw	r3, #285	@ 0x11d
 80040c0:	22a0      	movs	r2, #160	@ 0xa0
 80040c2:	2105      	movs	r1, #5
 80040c4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040c8:	f7fc fc7a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 80040cc:	2366      	movs	r3, #102	@ 0x66
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	f240 133b 	movw	r3, #315	@ 0x13b
 80040d4:	2214      	movs	r2, #20
 80040d6:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80040da:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80040de:	f7fc fc6f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 80040e2:	2302      	movs	r3, #2
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	4b36      	ldr	r3, [pc, #216]	@ (80041c0 <Display_stations_list_background+0x178>)
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80040ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040f2:	2138      	movs	r1, #56	@ 0x38
 80040f4:	f240 1027 	movw	r0, #295	@ 0x127
 80040f8:	f7fc fd04 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 80040fc:	2302      	movs	r3, #2
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	4b30      	ldr	r3, [pc, #192]	@ (80041c4 <Display_stations_list_background+0x17c>)
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800410c:	2138      	movs	r1, #56	@ 0x38
 800410e:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 8004112:	f7fc fcf7 	bl	8000b04 <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 8004116:	23be      	movs	r3, #190	@ 0xbe
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	f240 133b 	movw	r3, #315	@ 0x13b
 800411e:	226c      	movs	r2, #108	@ 0x6c
 8004120:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004124:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004128:	f7fc fc4a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 800412c:	2302      	movs	r3, #2
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <Display_stations_list_background+0x17c>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800413c:	2192      	movs	r1, #146	@ 0x92
 800413e:	f240 1027 	movw	r0, #295	@ 0x127
 8004142:	f7fc fcdf 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 8004146:	2302      	movs	r3, #2
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <Display_stations_list_background+0x178>)
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004156:	2192      	movs	r1, #146	@ 0x92
 8004158:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 800415c:	f7fc fcd2 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004160:	23eb      	movs	r3, #235	@ 0xeb
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	239d      	movs	r3, #157	@ 0x9d
 8004166:	22c3      	movs	r2, #195	@ 0xc3
 8004168:	2105      	movs	r1, #5
 800416a:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800416e:	f7fc fc27 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004172:	23eb      	movs	r3, #235	@ 0xeb
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	f240 133b 	movw	r3, #315	@ 0x13b
 800417a:	22c3      	movs	r2, #195	@ 0xc3
 800417c:	21a3      	movs	r1, #163	@ 0xa3
 800417e:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004182:	f7fc fc1d 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8004186:	2302      	movs	r3, #2
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	4b0f      	ldr	r3, [pc, #60]	@ (80041c8 <Display_stations_list_background+0x180>)
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004196:	21cf      	movs	r1, #207	@ 0xcf
 8004198:	2025      	movs	r0, #37	@ 0x25
 800419a:	f7fc fcb3 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 800419e:	2302      	movs	r3, #2
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <Display_stations_list_background+0x184>)
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80041aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041ae:	21cf      	movs	r1, #207	@ 0xcf
 80041b0:	20c3      	movs	r0, #195	@ 0xc3
 80041b2:	f7fc fca7 	bl	8000b04 <ILI9341_Draw_String>

}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	0800e4d4 	.word	0x0800e4d4
 80041c0:	0800e4e8 	.word	0x0800e4e8
 80041c4:	0800e4ec 	.word	0x0800e4ec
 80041c8:	0800e4f0 	.word	0x0800e4f0
 80041cc:	0800e4fc 	.word	0x0800e4fc

080041d0 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 80041d0:	b084      	sub	sp, #16
 80041d2:	b590      	push	{r4, r7, lr}
 80041d4:	b087      	sub	sp, #28
 80041d6:	af02      	add	r7, sp, #8
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80041de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//check if stations list is not empty
	if(_dab_management.total_services)
 80041e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8133 	beq.w	8004452 <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e12a      	b.n	8004448 <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 80041f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041f6:	4619      	mov	r1, r3
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	4299      	cmp	r1, r3
 8004200:	dc02      	bgt.n	8004208 <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	425b      	negs	r3, r3
 8004206:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	2b08      	cmp	r3, #8
 8004210:	dc30      	bgt.n	8004274 <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	00da      	lsls	r2, r3, #3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	331c      	adds	r3, #28
 8004220:	4619      	mov	r1, r3
 8004222:	2302      	movs	r3, #2
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	4bac      	ldr	r3, [pc, #688]	@ (80044d8 <Display_stations_list_data+0x308>)
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800422e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004232:	2008      	movs	r0, #8
 8004234:	f7fc fc66 	bl	8000b04 <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	00da      	lsls	r2, r3, #3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	331c      	adds	r3, #28
 8004246:	461c      	mov	r4, r3
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	3301      	adds	r3, #1
 8004250:	220a      	movs	r2, #10
 8004252:	49a2      	ldr	r1, [pc, #648]	@ (80044dc <Display_stations_list_data+0x30c>)
 8004254:	4618      	mov	r0, r3
 8004256:	f009 f8c9 	bl	800d3ec <itoa>
 800425a:	4603      	mov	r3, r0
 800425c:	2202      	movs	r2, #2
 800425e:	9201      	str	r2, [sp, #4]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800426a:	4621      	mov	r1, r4
 800426c:	2011      	movs	r0, #17
 800426e:	f7fc fc49 	bl	8000b04 <ILI9341_Draw_String>
 8004272:	e01c      	b.n	80042ae <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00da      	lsls	r2, r3, #3
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	331c      	adds	r3, #28
 8004282:	461c      	mov	r4, r3
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	3301      	adds	r3, #1
 800428c:	220a      	movs	r2, #10
 800428e:	4993      	ldr	r1, [pc, #588]	@ (80044dc <Display_stations_list_data+0x30c>)
 8004290:	4618      	mov	r0, r3
 8004292:	f009 f8ab 	bl	800d3ec <itoa>
 8004296:	4603      	mov	r3, r0
 8004298:	2202      	movs	r2, #2
 800429a:	9201      	str	r2, [sp, #4]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80042a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042a6:	4621      	mov	r1, r4
 80042a8:	2008      	movs	r0, #8
 80042aa:	f7fc fc2b 	bl	8000b04 <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 80042ae:	7bfa      	ldrb	r2, [r7, #15]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	00da      	lsls	r2, r3, #3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	331c      	adds	r3, #28
 80042bc:	4619      	mov	r1, r3
 80042be:	2302      	movs	r3, #2
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	4b87      	ldr	r3, [pc, #540]	@ (80044e0 <Display_stations_list_data+0x310>)
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80042ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042ce:	2018      	movs	r0, #24
 80042d0:	f7fc fc18 	bl	8000b04 <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00da      	lsls	r2, r3, #3
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	331c      	adds	r3, #28
 80042e2:	4619      	mov	r1, r3
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	461a      	mov	r2, r3
 80042ec:	2334      	movs	r3, #52	@ 0x34
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042f4:	4413      	add	r3, r2
 80042f6:	461a      	mov	r2, r3
 80042f8:	2302      	movs	r3, #2
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	9200      	str	r2, [sp, #0]
 80042fe:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004306:	2022      	movs	r0, #34	@ 0x22
 8004308:	f7fc fbfc 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00da      	lsls	r2, r3, #3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	331c      	adds	r3, #28
 800431a:	4619      	mov	r1, r3
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	461a      	mov	r2, r3
 8004324:	2334      	movs	r3, #52	@ 0x34
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800432c:	4413      	add	r3, r2
 800432e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004332:	461a      	mov	r2, r3
 8004334:	4b6b      	ldr	r3, [pc, #428]	@ (80044e4 <Display_stations_list_data+0x314>)
 8004336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433a:	2202      	movs	r2, #2
 800433c:	9201      	str	r2, [sp, #4]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004348:	20ab      	movs	r0, #171	@ 0xab
 800434a:	f7fc fbdb 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	00da      	lsls	r2, r3, #3
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	331c      	adds	r3, #28
 800435c:	461c      	mov	r4, r3
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	461a      	mov	r2, r3
 8004366:	2334      	movs	r3, #52	@ 0x34
 8004368:	fb02 f303 	mul.w	r3, r2, r3
 800436c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800436e:	4413      	add	r3, r2
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	4a5d      	ldr	r2, [pc, #372]	@ (80044e8 <Display_stations_list_data+0x318>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	220a      	movs	r2, #10
 800437c:	4957      	ldr	r1, [pc, #348]	@ (80044dc <Display_stations_list_data+0x30c>)
 800437e:	4618      	mov	r0, r3
 8004380:	f009 f834 	bl	800d3ec <itoa>
 8004384:	4603      	mov	r3, r0
 8004386:	2202      	movs	r2, #2
 8004388:	9201      	str	r2, [sp, #4]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004394:	4621      	mov	r1, r4
 8004396:	20ca      	movs	r0, #202	@ 0xca
 8004398:	f7fc fbb4 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 800439c:	7bfa      	ldrb	r2, [r7, #15]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	00da      	lsls	r2, r3, #3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	331c      	adds	r3, #28
 80043aa:	4619      	mov	r1, r3
 80043ac:	2302      	movs	r3, #2
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	4b4b      	ldr	r3, [pc, #300]	@ (80044e0 <Display_stations_list_data+0x310>)
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80043b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043bc:	20e1      	movs	r0, #225	@ 0xe1
 80043be:	f7fc fba1 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	00da      	lsls	r2, r3, #3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	331c      	adds	r3, #28
 80043d0:	461c      	mov	r4, r3
 80043d2:	7bfa      	ldrb	r2, [r7, #15]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	2334      	movs	r3, #52	@ 0x34
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
 80043e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043e2:	4413      	add	r3, r2
 80043e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043e6:	4b40      	ldr	r3, [pc, #256]	@ (80044e8 <Display_stations_list_data+0x318>)
 80043e8:	fba3 1302 	umull	r1, r3, r3, r2
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	220a      	movs	r2, #10
 80043fa:	4938      	ldr	r1, [pc, #224]	@ (80044dc <Display_stations_list_data+0x30c>)
 80043fc:	4618      	mov	r0, r3
 80043fe:	f008 fff5 	bl	800d3ec <itoa>
 8004402:	4603      	mov	r3, r0
 8004404:	2202      	movs	r2, #2
 8004406:	9201      	str	r2, [sp, #4]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800440e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004412:	4621      	mov	r1, r4
 8004414:	20e8      	movs	r0, #232	@ 0xe8
 8004416:	f7fc fb75 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	00da      	lsls	r2, r3, #3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	331c      	adds	r3, #28
 8004428:	4619      	mov	r1, r3
 800442a:	2302      	movs	r3, #2
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	4b2f      	ldr	r3, [pc, #188]	@ (80044ec <Display_stations_list_data+0x31c>)
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800443a:	f240 1003 	movw	r0, #259	@ 0x103
 800443e:	f7fc fb61 	bl	8000b04 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	3301      	adds	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b04      	cmp	r3, #4
 800444c:	f67f aed1 	bls.w	80041f2 <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 8004450:	e03b      	b.n	80044ca <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 8004452:	2302      	movs	r3, #2
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	4b26      	ldr	r3, [pc, #152]	@ (80044f0 <Display_stations_list_data+0x320>)
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800445e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004462:	211c      	movs	r1, #28
 8004464:	2008      	movs	r0, #8
 8004466:	f7fc fb4d 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 800446a:	2302      	movs	r3, #2
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	4b21      	ldr	r3, [pc, #132]	@ (80044f4 <Display_stations_list_data+0x324>)
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800447a:	213f      	movs	r1, #63	@ 0x3f
 800447c:	2008      	movs	r0, #8
 800447e:	f7fc fb41 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 8004482:	2302      	movs	r3, #2
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	4b1c      	ldr	r3, [pc, #112]	@ (80044f8 <Display_stations_list_data+0x328>)
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800448e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004492:	2162      	movs	r1, #98	@ 0x62
 8004494:	2008      	movs	r0, #8
 8004496:	f7fc fb35 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 800449a:	2302      	movs	r3, #2
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	4b17      	ldr	r3, [pc, #92]	@ (80044fc <Display_stations_list_data+0x32c>)
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044aa:	2185      	movs	r1, #133	@ 0x85
 80044ac:	2008      	movs	r0, #8
 80044ae:	f7fc fb29 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 80044b2:	2302      	movs	r3, #2
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <Display_stations_list_data+0x330>)
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044c2:	21a8      	movs	r1, #168	@ 0xa8
 80044c4:	2008      	movs	r0, #8
 80044c6:	f7fc fb1d 	bl	8000b04 <ILI9341_Draw_String>
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80044d4:	b004      	add	sp, #16
 80044d6:	4770      	bx	lr
 80044d8:	0800e3c0 	.word	0x0800e3c0
 80044dc:	20006d8c 	.word	0x20006d8c
 80044e0:	0800e3d0 	.word	0x0800e3d0
 80044e4:	200000ac 	.word	0x200000ac
 80044e8:	10624dd3 	.word	0x10624dd3
 80044ec:	0800e3d4 	.word	0x0800e3d4
 80044f0:	0800e508 	.word	0x0800e508
 80044f4:	0800e520 	.word	0x0800e520
 80044f8:	0800e538 	.word	0x0800e538
 80044fc:	0800e550 	.word	0x0800e550
 8004500:	0800e56c 	.word	0x0800e56c

08004504 <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 800450a:	f7ff faad 	bl	8003a68 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2);
 800450e:	2302      	movs	r3, #2
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	4b64      	ldr	r3, [pc, #400]	@ (80046a4 <Display_scanning_screen_background+0x1a0>)
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2300      	movs	r3, #0
 8004518:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800451c:	2101      	movs	r1, #1
 800451e:	2005      	movs	r0, #5
 8004520:	f7fc faf0 	bl	8000b04 <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004524:	2328      	movs	r3, #40	@ 0x28
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	f240 133b 	movw	r3, #315	@ 0x13b
 800452c:	2214      	movs	r2, #20
 800452e:	2105      	movs	r1, #5
 8004530:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004534:	f7fc fa44 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 8004538:	2302      	movs	r3, #2
 800453a:	9301      	str	r3, [sp, #4]
 800453c:	4b5a      	ldr	r3, [pc, #360]	@ (80046a8 <Display_scanning_screen_background+0x1a4>)
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004544:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004548:	2117      	movs	r1, #23
 800454a:	2050      	movs	r0, #80	@ 0x50
 800454c:	f7fc fada 	bl	8000b04 <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8004550:	2341      	movs	r3, #65	@ 0x41
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	f240 133b 	movw	r3, #315	@ 0x13b
 8004558:	222d      	movs	r2, #45	@ 0x2d
 800455a:	2105      	movs	r1, #5
 800455c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004560:	f7fc fa2e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004564:	235a      	movs	r3, #90	@ 0x5a
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	f240 133b 	movw	r3, #315	@ 0x13b
 800456c:	2246      	movs	r2, #70	@ 0x46
 800456e:	2105      	movs	r1, #5
 8004570:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004574:	f7fc fa24 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 8004578:	2302      	movs	r3, #2
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	4b4b      	ldr	r3, [pc, #300]	@ (80046ac <Display_scanning_screen_background+0x1a8>)
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004588:	2149      	movs	r1, #73	@ 0x49
 800458a:	200a      	movs	r0, #10
 800458c:	f7fc faba 	bl	8000b04 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004590:	2373      	movs	r3, #115	@ 0x73
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	f240 133b 	movw	r3, #315	@ 0x13b
 8004598:	225f      	movs	r2, #95	@ 0x5f
 800459a:	2105      	movs	r1, #5
 800459c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045a0:	f7fc fa0e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 80045a4:	2302      	movs	r3, #2
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	4b41      	ldr	r3, [pc, #260]	@ (80046b0 <Display_scanning_screen_background+0x1ac>)
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80045b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045b4:	2162      	movs	r1, #98	@ 0x62
 80045b6:	200a      	movs	r0, #10
 80045b8:	f7fc faa4 	bl	8000b04 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80045bc:	238c      	movs	r3, #140	@ 0x8c
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	f240 133b 	movw	r3, #315	@ 0x13b
 80045c4:	2278      	movs	r2, #120	@ 0x78
 80045c6:	2105      	movs	r1, #5
 80045c8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045cc:	f7fc f9f8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 80045d0:	2302      	movs	r3, #2
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	4b37      	ldr	r3, [pc, #220]	@ (80046b4 <Display_scanning_screen_background+0x1b0>)
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80045dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045e0:	217b      	movs	r1, #123	@ 0x7b
 80045e2:	200a      	movs	r0, #10
 80045e4:	f7fc fa8e 	bl	8000b04 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 80045e8:	23a5      	movs	r3, #165	@ 0xa5
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	f240 133b 	movw	r3, #315	@ 0x13b
 80045f0:	2291      	movs	r2, #145	@ 0x91
 80045f2:	2105      	movs	r1, #5
 80045f4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045f8:	f7fc f9e2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 80045fc:	2302      	movs	r3, #2
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	4b2d      	ldr	r3, [pc, #180]	@ (80046b8 <Display_scanning_screen_background+0x1b4>)
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800460c:	2194      	movs	r1, #148	@ 0x94
 800460e:	200a      	movs	r0, #10
 8004610:	f7fc fa78 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 8004614:	2302      	movs	r3, #2
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	4b28      	ldr	r3, [pc, #160]	@ (80046bc <Display_scanning_screen_background+0x1b8>)
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004624:	2194      	movs	r1, #148	@ 0x94
 8004626:	2078      	movs	r0, #120	@ 0x78
 8004628:	f7fc fa6c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 800462c:	2302      	movs	r3, #2
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	4b23      	ldr	r3, [pc, #140]	@ (80046c0 <Display_scanning_screen_background+0x1bc>)
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800463c:	2194      	movs	r1, #148	@ 0x94
 800463e:	209e      	movs	r0, #158	@ 0x9e
 8004640:	f7fc fa60 	bl	8000b04 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004644:	23be      	movs	r3, #190	@ 0xbe
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	f240 133b 	movw	r3, #315	@ 0x13b
 800464c:	22aa      	movs	r2, #170	@ 0xaa
 800464e:	2105      	movs	r1, #5
 8004650:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004654:	f7fc f9b4 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 8004658:	2302      	movs	r3, #2
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <Display_scanning_screen_background+0x1c0>)
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004668:	21ad      	movs	r1, #173	@ 0xad
 800466a:	200a      	movs	r0, #10
 800466c:	f7fc fa4a 	bl	8000b04 <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8004670:	23eb      	movs	r3, #235	@ 0xeb
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	f240 133b 	movw	r3, #315	@ 0x13b
 8004678:	22c3      	movs	r2, #195	@ 0xc3
 800467a:	2105      	movs	r1, #5
 800467c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004680:	f7fc f99e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 8004684:	2302      	movs	r3, #2
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	4b0f      	ldr	r3, [pc, #60]	@ (80046c8 <Display_scanning_screen_background+0x1c4>)
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004694:	21cf      	movs	r1, #207	@ 0xcf
 8004696:	2082      	movs	r0, #130	@ 0x82
 8004698:	f7fc fa34 	bl	8000b04 <ILI9341_Draw_String>
}
 800469c:	bf00      	nop
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	0800e584 	.word	0x0800e584
 80046a8:	0800e594 	.word	0x0800e594
 80046ac:	0800e5ac 	.word	0x0800e5ac
 80046b0:	0800e5c0 	.word	0x0800e5c0
 80046b4:	0800e5d0 	.word	0x0800e5d0
 80046b8:	0800e5e0 	.word	0x0800e5e0
 80046bc:	0800e3d0 	.word	0x0800e3d0
 80046c0:	0800e3d4 	.word	0x0800e3d4
 80046c4:	0800e5ec 	.word	0x0800e5ec
 80046c8:	0800e5f8 	.word	0x0800e5f8

080046cc <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 80046cc:	b084      	sub	sp, #16
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af02      	add	r7, sp, #8
 80046d4:	f107 0c08 	add.w	ip, r7, #8
 80046d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 80046dc:	7d3b      	ldrb	r3, [r7, #20]
 80046de:	3301      	adds	r3, #1
 80046e0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046e4:	fb02 f303 	mul.w	r3, r2, r3
 80046e8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80046ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80046f0:	330a      	adds	r3, #10
 80046f2:	461a      	mov	r2, r3
 80046f4:	233c      	movs	r3, #60	@ 0x3c
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	2232      	movs	r2, #50	@ 0x32
 80046fc:	210a      	movs	r1, #10
 80046fe:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004702:	f7fc f95d 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 8004706:	7d3b      	ldrb	r3, [r7, #20]
 8004708:	3301      	adds	r3, #1
 800470a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004716:	fb93 f3f2 	sdiv	r3, r3, r2
 800471a:	330a      	adds	r3, #10
 800471c:	4619      	mov	r1, r3
 800471e:	233c      	movs	r3, #60	@ 0x3c
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004726:	2232      	movs	r2, #50	@ 0x32
 8004728:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800472c:	f7fc f948 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 8004730:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8004734:	220a      	movs	r2, #10
 8004736:	4954      	ldr	r1, [pc, #336]	@ (8004888 <Display_scanning_screen_data+0x1bc>)
 8004738:	4618      	mov	r0, r3
 800473a:	f008 fe57 	bl	800d3ec <itoa>
 800473e:	4603      	mov	r3, r0
 8004740:	2202      	movs	r2, #2
 8004742:	9201      	str	r2, [sp, #4]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800474a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800474e:	2149      	movs	r1, #73	@ 0x49
 8004750:	2091      	movs	r0, #145	@ 0x91
 8004752:	f7fc f9d7 	bl	8000b04 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 8004756:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800475a:	220a      	movs	r2, #10
 800475c:	494a      	ldr	r1, [pc, #296]	@ (8004888 <Display_scanning_screen_data+0x1bc>)
 800475e:	4618      	mov	r0, r3
 8004760:	f008 fe44 	bl	800d3ec <itoa>
 8004764:	4603      	mov	r3, r0
 8004766:	2202      	movs	r2, #2
 8004768:	9201      	str	r2, [sp, #4]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004774:	2162      	movs	r1, #98	@ 0x62
 8004776:	2087      	movs	r0, #135	@ 0x87
 8004778:	f7fc f9c4 	bl	8000b04 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 800477c:	7d3b      	ldrb	r3, [r7, #20]
 800477e:	3301      	adds	r3, #1
 8004780:	220a      	movs	r2, #10
 8004782:	4941      	ldr	r1, [pc, #260]	@ (8004888 <Display_scanning_screen_data+0x1bc>)
 8004784:	4618      	mov	r0, r3
 8004786:	f008 fe31 	bl	800d3ec <itoa>
 800478a:	4603      	mov	r3, r0
 800478c:	2202      	movs	r2, #2
 800478e:	9201      	str	r2, [sp, #4]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800479a:	217b      	movs	r1, #123	@ 0x7b
 800479c:	2076      	movs	r0, #118	@ 0x76
 800479e:	f7fc f9b1 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 80047a2:	2302      	movs	r3, #2
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	4b39      	ldr	r3, [pc, #228]	@ (800488c <Display_scanning_screen_data+0x1c0>)
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047b2:	217b      	movs	r1, #123	@ 0x7b
 80047b4:	2089      	movs	r0, #137	@ 0x89
 80047b6:	f7fc f9a5 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 80047ba:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80047be:	220a      	movs	r2, #10
 80047c0:	4931      	ldr	r1, [pc, #196]	@ (8004888 <Display_scanning_screen_data+0x1bc>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f008 fe12 	bl	800d3ec <itoa>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2202      	movs	r2, #2
 80047cc:	9201      	str	r2, [sp, #4]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047d8:	217b      	movs	r1, #123	@ 0x7b
 80047da:	2093      	movs	r0, #147	@ 0x93
 80047dc:	f7fc f992 	bl	8000b04 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004890 <Display_scanning_screen_data+0x1c4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	099b      	lsrs	r3, r3, #6
 80047ea:	220a      	movs	r2, #10
 80047ec:	4926      	ldr	r1, [pc, #152]	@ (8004888 <Display_scanning_screen_data+0x1bc>)
 80047ee:	4618      	mov	r0, r3
 80047f0:	f008 fdfc 	bl	800d3ec <itoa>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2202      	movs	r2, #2
 80047f8:	9201      	str	r2, [sp, #4]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004804:	2194      	movs	r1, #148	@ 0x94
 8004806:	205f      	movs	r0, #95	@ 0x5f
 8004808:	f7fc f97c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <Display_scanning_screen_data+0x1c4>)
 8004810:	fba3 1302 	umull	r1, r3, r3, r2
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	220a      	movs	r2, #10
 8004822:	4919      	ldr	r1, [pc, #100]	@ (8004888 <Display_scanning_screen_data+0x1bc>)
 8004824:	4618      	mov	r0, r3
 8004826:	f008 fde1 	bl	800d3ec <itoa>
 800482a:	4603      	mov	r3, r0
 800482c:	2202      	movs	r2, #2
 800482e:	9201      	str	r2, [sp, #4]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004836:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800483a:	2194      	movs	r1, #148	@ 0x94
 800483c:	2081      	movs	r0, #129	@ 0x81
 800483e:	f7fc f961 	bl	8000b04 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 8004842:	2302      	movs	r3, #2
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <Display_scanning_screen_data+0x1c8>)
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800484e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004852:	21ad      	movs	r1, #173	@ 0xad
 8004854:	2050      	movs	r0, #80	@ 0x50
 8004856:	f7fc f955 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 800485a:	7d3b      	ldrb	r3, [r7, #20]
 800485c:	461a      	mov	r2, r3
 800485e:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <Display_scanning_screen_data+0x1cc>)
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	2202      	movs	r2, #2
 8004866:	9201      	str	r2, [sp, #4]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800486e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004872:	21ad      	movs	r1, #173	@ 0xad
 8004874:	2050      	movs	r0, #80	@ 0x50
 8004876:	f7fc f945 	bl	8000b04 <ILI9341_Draw_String>
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004882:	b004      	add	sp, #16
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20006d8c 	.word	0x20006d8c
 800488c:	0800e4e8 	.word	0x0800e4e8
 8004890:	10624dd3 	.word	0x10624dd3
 8004894:	0800e600 	.word	0x0800e600
 8004898:	200000ac 	.word	0x200000ac

0800489c <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 80048a2:	2328      	movs	r3, #40	@ 0x28
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	f240 133b 	movw	r3, #315	@ 0x13b
 80048aa:	2214      	movs	r2, #20
 80048ac:	2105      	movs	r1, #5
 80048ae:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80048b2:	f7fc f885 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 80048b6:	2302      	movs	r3, #2
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	4b11      	ldr	r3, [pc, #68]	@ (8004900 <Display_scanning_screen_complete+0x64>)
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80048c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048c6:	2117      	movs	r1, #23
 80048c8:	2050      	movs	r0, #80	@ 0x50
 80048ca:	f7fc f91b 	bl	8000b04 <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80048ce:	23eb      	movs	r3, #235	@ 0xeb
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	f240 133b 	movw	r3, #315	@ 0x13b
 80048d6:	22c3      	movs	r2, #195	@ 0xc3
 80048d8:	2105      	movs	r1, #5
 80048da:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80048de:	f7fc f86f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 80048e2:	2302      	movs	r3, #2
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <Display_scanning_screen_complete+0x68>)
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80048ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048f2:	21cf      	movs	r1, #207	@ 0xcf
 80048f4:	2082      	movs	r0, #130	@ 0x82
 80048f6:	f7fc f905 	bl	8000b04 <ILI9341_Draw_String>
}
 80048fa:	bf00      	nop
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	0800e608 	.word	0x0800e608
 8004904:	0800e620 	.word	0x0800e620

08004908 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af02      	add	r7, sp, #8
	//Clear Screen
	Display_clear_screen();
 800490e:	f7ff f8ab 	bl	8003a68 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2);
 8004912:	2302      	movs	r3, #2
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	4bb4      	ldr	r3, [pc, #720]	@ (8004be8 <Display_dab_digrad_status_background+0x2e0>)
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004920:	2101      	movs	r1, #1
 8004922:	2005      	movs	r0, #5
 8004924:	f7fc f8ee 	bl	8000b04 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 8004928:	2328      	movs	r3, #40	@ 0x28
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2369      	movs	r3, #105	@ 0x69
 800492e:	2214      	movs	r2, #20
 8004930:	2105      	movs	r1, #5
 8004932:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004936:	f7fc f843 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 800493a:	2328      	movs	r3, #40	@ 0x28
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	23d2      	movs	r3, #210	@ 0xd2
 8004940:	2214      	movs	r2, #20
 8004942:	216e      	movs	r1, #110	@ 0x6e
 8004944:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004948:	f7fc f83a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 800494c:	2328      	movs	r3, #40	@ 0x28
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	f240 133b 	movw	r3, #315	@ 0x13b
 8004954:	2214      	movs	r2, #20
 8004956:	21d7      	movs	r1, #215	@ 0xd7
 8004958:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800495c:	f7fc f830 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8004960:	2341      	movs	r3, #65	@ 0x41
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	f240 133b 	movw	r3, #315	@ 0x13b
 8004968:	222d      	movs	r2, #45	@ 0x2d
 800496a:	2105      	movs	r1, #5
 800496c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004970:	f7fc f826 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 8004974:	2302      	movs	r3, #2
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	4b9c      	ldr	r3, [pc, #624]	@ (8004bec <Display_dab_digrad_status_background+0x2e4>)
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004980:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004984:	2130      	movs	r1, #48	@ 0x30
 8004986:	200a      	movs	r0, #10
 8004988:	f7fc f8bc 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 800498c:	2302      	movs	r3, #2
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	4b97      	ldr	r3, [pc, #604]	@ (8004bf0 <Display_dab_digrad_status_background+0x2e8>)
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800499c:	2130      	movs	r1, #48	@ 0x30
 800499e:	205a      	movs	r0, #90	@ 0x5a
 80049a0:	f7fc f8b0 	bl	8000b04 <ILI9341_Draw_String>

	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80049a4:	235a      	movs	r3, #90	@ 0x5a
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	f240 133b 	movw	r3, #315	@ 0x13b
 80049ac:	2246      	movs	r2, #70	@ 0x46
 80049ae:	2105      	movs	r1, #5
 80049b0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049b4:	f7fc f804 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 80049b8:	2302      	movs	r3, #2
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	4b8d      	ldr	r3, [pc, #564]	@ (8004bf4 <Display_dab_digrad_status_background+0x2ec>)
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80049c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049c8:	2149      	movs	r1, #73	@ 0x49
 80049ca:	200a      	movs	r0, #10
 80049cc:	f7fc f89a 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 80049d0:	2302      	movs	r3, #2
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	4b88      	ldr	r3, [pc, #544]	@ (8004bf8 <Display_dab_digrad_status_background+0x2f0>)
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80049dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049e0:	2149      	movs	r1, #73	@ 0x49
 80049e2:	2069      	movs	r0, #105	@ 0x69
 80049e4:	f7fc f88e 	bl	8000b04 <ILI9341_Draw_String>

	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80049e8:	2373      	movs	r3, #115	@ 0x73
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	f240 133b 	movw	r3, #315	@ 0x13b
 80049f0:	225f      	movs	r2, #95	@ 0x5f
 80049f2:	2105      	movs	r1, #5
 80049f4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049f8:	f7fb ffe2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 80049fc:	2302      	movs	r3, #2
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	4b7e      	ldr	r3, [pc, #504]	@ (8004bfc <Display_dab_digrad_status_background+0x2f4>)
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a0c:	2162      	movs	r1, #98	@ 0x62
 8004a0e:	200a      	movs	r0, #10
 8004a10:	f7fc f878 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 8004a14:	2302      	movs	r3, #2
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	4b77      	ldr	r3, [pc, #476]	@ (8004bf8 <Display_dab_digrad_status_background+0x2f0>)
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a24:	2162      	movs	r1, #98	@ 0x62
 8004a26:	2069      	movs	r0, #105	@ 0x69
 8004a28:	f7fc f86c 	bl	8000b04 <ILI9341_Draw_String>

	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004a2c:	238c      	movs	r3, #140	@ 0x8c
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	f240 133b 	movw	r3, #315	@ 0x13b
 8004a34:	2278      	movs	r2, #120	@ 0x78
 8004a36:	2105      	movs	r1, #5
 8004a38:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004a3c:	f7fb ffc0 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 8004a40:	2302      	movs	r3, #2
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	4b6e      	ldr	r3, [pc, #440]	@ (8004c00 <Display_dab_digrad_status_background+0x2f8>)
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a50:	217b      	movs	r1, #123	@ 0x7b
 8004a52:	200a      	movs	r0, #10
 8004a54:	f7fc f856 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8004a58:	2302      	movs	r3, #2
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	4b69      	ldr	r3, [pc, #420]	@ (8004c04 <Display_dab_digrad_status_background+0x2fc>)
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a68:	217b      	movs	r1, #123	@ 0x7b
 8004a6a:	206e      	movs	r0, #110	@ 0x6e
 8004a6c:	f7fc f84a 	bl	8000b04 <ILI9341_Draw_String>

	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004a70:	23a5      	movs	r3, #165	@ 0xa5
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	f240 133b 	movw	r3, #315	@ 0x13b
 8004a78:	2291      	movs	r2, #145	@ 0x91
 8004a7a:	2105      	movs	r1, #5
 8004a7c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004a80:	f7fb ff9e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8004a84:	2302      	movs	r3, #2
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	4b5f      	ldr	r3, [pc, #380]	@ (8004c08 <Display_dab_digrad_status_background+0x300>)
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a94:	2194      	movs	r1, #148	@ 0x94
 8004a96:	200a      	movs	r0, #10
 8004a98:	f7fc f834 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8004c0c <Display_dab_digrad_status_background+0x304>)
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004aa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004aac:	2194      	movs	r1, #148	@ 0x94
 8004aae:	2071      	movs	r0, #113	@ 0x71
 8004ab0:	f7fc f828 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	4b55      	ldr	r3, [pc, #340]	@ (8004c10 <Display_dab_digrad_status_background+0x308>)
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ac0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ac4:	2194      	movs	r1, #148	@ 0x94
 8004ac6:	2094      	movs	r0, #148	@ 0x94
 8004ac8:	f7fc f81c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8004acc:	2302      	movs	r3, #2
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	4b50      	ldr	r3, [pc, #320]	@ (8004c14 <Display_dab_digrad_status_background+0x30c>)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004adc:	2194      	movs	r1, #148	@ 0x94
 8004ade:	20b7      	movs	r0, #183	@ 0xb7
 8004ae0:	f7fc f810 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <Display_dab_digrad_status_background+0x310>)
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004af0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004af4:	2194      	movs	r1, #148	@ 0x94
 8004af6:	20db      	movs	r0, #219	@ 0xdb
 8004af8:	f7fc f804 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8004afc:	2302      	movs	r3, #2
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	4b46      	ldr	r3, [pc, #280]	@ (8004c1c <Display_dab_digrad_status_background+0x314>)
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b0c:	2194      	movs	r1, #148	@ 0x94
 8004b0e:	f240 101b 	movw	r0, #283	@ 0x11b
 8004b12:	f7fb fff7 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004b16:	2302      	movs	r3, #2
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	4b41      	ldr	r3, [pc, #260]	@ (8004c20 <Display_dab_digrad_status_background+0x318>)
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b26:	2194      	movs	r1, #148	@ 0x94
 8004b28:	f240 1025 	movw	r0, #293	@ 0x125
 8004b2c:	f7fb ffea 	bl	8000b04 <ILI9341_Draw_String>

	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004b30:	23be      	movs	r3, #190	@ 0xbe
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	f240 133b 	movw	r3, #315	@ 0x13b
 8004b38:	22aa      	movs	r2, #170	@ 0xaa
 8004b3a:	2105      	movs	r1, #5
 8004b3c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004b40:	f7fb ff3e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8004b44:	2302      	movs	r3, #2
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	4b36      	ldr	r3, [pc, #216]	@ (8004c24 <Display_dab_digrad_status_background+0x31c>)
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b54:	21ad      	movs	r1, #173	@ 0xad
 8004b56:	200a      	movs	r0, #10
 8004b58:	f7fb ffd4 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	4b31      	ldr	r3, [pc, #196]	@ (8004c28 <Display_dab_digrad_status_background+0x320>)
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b6c:	21ad      	movs	r1, #173	@ 0xad
 8004b6e:	207d      	movs	r0, #125	@ 0x7d
 8004b70:	f7fb ffc8 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004b74:	2302      	movs	r3, #2
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	4b2c      	ldr	r3, [pc, #176]	@ (8004c2c <Display_dab_digrad_status_background+0x324>)
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b84:	21ad      	movs	r1, #173	@ 0xad
 8004b86:	20b4      	movs	r0, #180	@ 0xb4
 8004b88:	f7fb ffbc 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004b8c:	23eb      	movs	r3, #235	@ 0xeb
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	239d      	movs	r3, #157	@ 0x9d
 8004b92:	22c3      	movs	r2, #195	@ 0xc3
 8004b94:	2105      	movs	r1, #5
 8004b96:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004b9a:	f7fb ff11 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004b9e:	23eb      	movs	r3, #235	@ 0xeb
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	f240 133b 	movw	r3, #315	@ 0x13b
 8004ba6:	22c3      	movs	r2, #195	@ 0xc3
 8004ba8:	21a3      	movs	r1, #163	@ 0xa3
 8004baa:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004bae:	f7fb ff07 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <Display_dab_digrad_status_background+0x328>)
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bc2:	21cf      	movs	r1, #207	@ 0xcf
 8004bc4:	2023      	movs	r0, #35	@ 0x23
 8004bc6:	f7fb ff9d 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8004bca:	2302      	movs	r3, #2
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	4b19      	ldr	r3, [pc, #100]	@ (8004c34 <Display_dab_digrad_status_background+0x32c>)
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004bd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bda:	21cf      	movs	r1, #207	@ 0xcf
 8004bdc:	20cd      	movs	r0, #205	@ 0xcd
 8004bde:	f7fb ff91 	bl	8000b04 <ILI9341_Draw_String>
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	0800e628 	.word	0x0800e628
 8004bec:	0800e63c 	.word	0x0800e63c
 8004bf0:	0800e644 	.word	0x0800e644
 8004bf4:	0800e64c 	.word	0x0800e64c
 8004bf8:	0800e650 	.word	0x0800e650
 8004bfc:	0800e654 	.word	0x0800e654
 8004c00:	0800e658 	.word	0x0800e658
 8004c04:	0800e660 	.word	0x0800e660
 8004c08:	0800e664 	.word	0x0800e664
 8004c0c:	0800e3d0 	.word	0x0800e3d0
 8004c10:	0800e3d4 	.word	0x0800e3d4
 8004c14:	0800e670 	.word	0x0800e670
 8004c18:	0800e678 	.word	0x0800e678
 8004c1c:	0800e4e8 	.word	0x0800e4e8
 8004c20:	0800e680 	.word	0x0800e680
 8004c24:	0800e684 	.word	0x0800e684
 8004c28:	0800e690 	.word	0x0800e690
 8004c2c:	0800e694 	.word	0x0800e694
 8004c30:	0800e3b0 	.word	0x0800e3b0
 8004c34:	0800e3a4 	.word	0x0800e3a4

08004c38 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004c38:	b084      	sub	sp, #16
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af02      	add	r7, sp, #8
 8004c40:	f107 0c18 	add.w	ip, r7, #24
 8004c44:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004c48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	23fa      	movs	r3, #250	@ 0xfa
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4a30      	ldr	r2, [pc, #192]	@ (8004d18 <Display_dab_digrad_status_data+0xe0>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4b2d      	ldr	r3, [pc, #180]	@ (8004d18 <Display_dab_digrad_status_data+0xe0>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	80bb      	strh	r3, [r7, #4]

	//Valid
	if(digrad_status.valid)
 8004c76:	7e7b      	ldrb	r3, [r7, #25]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <Display_dab_digrad_status_data+0x64>
	{
		ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004c82:	2302      	movs	r3, #2
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <Display_dab_digrad_status_data+0xe4>)
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004c8e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004c92:	2117      	movs	r1, #23
 8004c94:	2023      	movs	r0, #35	@ 0x23
 8004c96:	f7fb ff35 	bl	8000b04 <ILI9341_Draw_String>
 8004c9a:	e00b      	b.n	8004cb4 <Display_dab_digrad_status_data+0x7c>
	}
	else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d1c <Display_dab_digrad_status_data+0xe4>)
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ca8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004cac:	2117      	movs	r1, #23
 8004cae:	2023      	movs	r0, #35	@ 0x23
 8004cb0:	f7fb ff28 	bl	8000b04 <ILI9341_Draw_String>

	//ACQ
	if(digrad_status.acq)
 8004cb4:	7e7b      	ldrb	r3, [r7, #25]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00c      	beq.n	8004cda <Display_dab_digrad_status_data+0xa2>
	{
		ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	4b16      	ldr	r3, [pc, #88]	@ (8004d20 <Display_dab_digrad_status_data+0xe8>)
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ccc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004cd0:	2117      	movs	r1, #23
 8004cd2:	2085      	movs	r0, #133	@ 0x85
 8004cd4:	f7fb ff16 	bl	8000b04 <ILI9341_Draw_String>
 8004cd8:	e00b      	b.n	8004cf2 <Display_dab_digrad_status_data+0xba>
	}
	else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004cda:	2302      	movs	r3, #2
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <Display_dab_digrad_status_data+0xe8>)
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ce6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004cea:	2117      	movs	r1, #23
 8004cec:	2085      	movs	r0, #133	@ 0x85
 8004cee:	f7fb ff09 	bl	8000b04 <ILI9341_Draw_String>

	//FIC_ERROR
	if(digrad_status.fic_err)
 8004cf2:	7e7b      	ldrb	r3, [r7, #25]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d014      	beq.n	8004d28 <Display_dab_digrad_status_data+0xf0>
	{
		ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004cfe:	2302      	movs	r3, #2
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <Display_dab_digrad_status_data+0xec>)
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d0a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004d0e:	2117      	movs	r1, #23
 8004d10:	20e4      	movs	r0, #228	@ 0xe4
 8004d12:	f7fb fef7 	bl	8000b04 <ILI9341_Draw_String>
 8004d16:	e013      	b.n	8004d40 <Display_dab_digrad_status_data+0x108>
 8004d18:	10624dd3 	.word	0x10624dd3
 8004d1c:	0800e698 	.word	0x0800e698
 8004d20:	0800e6a0 	.word	0x0800e6a0
 8004d24:	0800e6a8 	.word	0x0800e6a8
	}
	else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004d28:	2302      	movs	r3, #2
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	4bb6      	ldr	r3, [pc, #728]	@ (8005008 <Display_dab_digrad_status_data+0x3d0>)
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d34:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004d38:	2117      	movs	r1, #23
 8004d3a:	20e4      	movs	r0, #228	@ 0xe4
 8004d3c:	f7fb fee2 	bl	8000b04 <ILI9341_Draw_String>

	//RSSI
	if(digrad_status.rssi <= 13) 								color = RED;
 8004d40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d44:	2b0d      	cmp	r3, #13
 8004d46:	dc02      	bgt.n	8004d4e <Display_dab_digrad_status_data+0x116>
 8004d48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004d4c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8004d4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d52:	2b1a      	cmp	r3, #26
 8004d54:	dc06      	bgt.n	8004d64 <Display_dab_digrad_status_data+0x12c>
 8004d56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d5a:	2b0d      	cmp	r3, #13
 8004d5c:	dd02      	ble.n	8004d64 <Display_dab_digrad_status_data+0x12c>
 8004d5e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004d62:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004d64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d68:	2b27      	cmp	r3, #39	@ 0x27
 8004d6a:	dc06      	bgt.n	8004d7a <Display_dab_digrad_status_data+0x142>
 8004d6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d70:	2b1a      	cmp	r3, #26
 8004d72:	dd02      	ble.n	8004d7a <Display_dab_digrad_status_data+0x142>
 8004d74:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004d78:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004d7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d7e:	2b34      	cmp	r3, #52	@ 0x34
 8004d80:	dc06      	bgt.n	8004d90 <Display_dab_digrad_status_data+0x158>
 8004d82:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d86:	2b27      	cmp	r3, #39	@ 0x27
 8004d88:	dd02      	ble.n	8004d90 <Display_dab_digrad_status_data+0x158>
 8004d8a:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004d8e:	60fb      	str	r3, [r7, #12]
	if(digrad_status.rssi > 52) 								color = GREEN;
 8004d90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d94:	2b34      	cmp	r3, #52	@ 0x34
 8004d96:	dd02      	ble.n	8004d9e <Display_dab_digrad_status_data+0x166>
 8004d98:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004d9c:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8004d9e:	2302      	movs	r3, #2
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	4b9a      	ldr	r3, [pc, #616]	@ (800500c <Display_dab_digrad_status_data+0x3d4>)
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dae:	2130      	movs	r1, #48	@ 0x30
 8004db0:	2032      	movs	r0, #50	@ 0x32
 8004db2:	f7fb fea7 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004db6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dba:	220a      	movs	r2, #10
 8004dbc:	4994      	ldr	r1, [pc, #592]	@ (8005010 <Display_dab_digrad_status_data+0x3d8>)
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f008 fb14 	bl	800d3ec <itoa>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	9201      	str	r2, [sp, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004dd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dd4:	2130      	movs	r1, #48	@ 0x30
 8004dd6:	2032      	movs	r0, #50	@ 0x32
 8004dd8:	f7fb fe94 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8004ddc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004de0:	461a      	mov	r2, r3
 8004de2:	23b4      	movs	r3, #180	@ 0xb4
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	da00      	bge.n	8004dee <Display_dab_digrad_status_data+0x1b6>
 8004dec:	333f      	adds	r3, #63	@ 0x3f
 8004dee:	119b      	asrs	r3, r3, #6
 8004df0:	3382      	adds	r3, #130	@ 0x82
 8004df2:	461a      	mov	r2, r3
 8004df4:	233c      	movs	r3, #60	@ 0x3c
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	2232      	movs	r2, #50	@ 0x32
 8004dfc:	2182      	movs	r1, #130	@ 0x82
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7fb fdde 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004e04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	23b4      	movs	r3, #180	@ 0xb4
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da00      	bge.n	8004e16 <Display_dab_digrad_status_data+0x1de>
 8004e14:	333f      	adds	r3, #63	@ 0x3f
 8004e16:	119b      	asrs	r3, r3, #6
 8004e18:	3382      	adds	r3, #130	@ 0x82
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	233c      	movs	r3, #60	@ 0x3c
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004e24:	2232      	movs	r2, #50	@ 0x32
 8004e26:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004e2a:	f7fb fdc9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//SNR
	if(digrad_status.snr <= 4) 									color = RED;
 8004e2e:	7efb      	ldrb	r3, [r7, #27]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d802      	bhi.n	8004e3a <Display_dab_digrad_status_data+0x202>
 8004e34:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004e38:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004e3a:	7efb      	ldrb	r3, [r7, #27]
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d805      	bhi.n	8004e4c <Display_dab_digrad_status_data+0x214>
 8004e40:	7efb      	ldrb	r3, [r7, #27]
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d902      	bls.n	8004e4c <Display_dab_digrad_status_data+0x214>
 8004e46:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004e4a:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004e4c:	7efb      	ldrb	r3, [r7, #27]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d805      	bhi.n	8004e5e <Display_dab_digrad_status_data+0x226>
 8004e52:	7efb      	ldrb	r3, [r7, #27]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d902      	bls.n	8004e5e <Display_dab_digrad_status_data+0x226>
 8004e58:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004e5c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004e5e:	7efb      	ldrb	r3, [r7, #27]
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d805      	bhi.n	8004e70 <Display_dab_digrad_status_data+0x238>
 8004e64:	7efb      	ldrb	r3, [r7, #27]
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d902      	bls.n	8004e70 <Display_dab_digrad_status_data+0x238>
 8004e6a:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004e6e:	60fb      	str	r3, [r7, #12]
	if(digrad_status.snr > 16) 									color = GREEN;
 8004e70:	7efb      	ldrb	r3, [r7, #27]
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d902      	bls.n	8004e7c <Display_dab_digrad_status_data+0x244>
 8004e76:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004e7a:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	4b62      	ldr	r3, [pc, #392]	@ (800500c <Display_dab_digrad_status_data+0x3d4>)
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004e88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e8c:	2149      	movs	r1, #73	@ 0x49
 8004e8e:	2032      	movs	r0, #50	@ 0x32
 8004e90:	f7fb fe38 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004e94:	7efb      	ldrb	r3, [r7, #27]
 8004e96:	220a      	movs	r2, #10
 8004e98:	495d      	ldr	r1, [pc, #372]	@ (8005010 <Display_dab_digrad_status_data+0x3d8>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f008 faa6 	bl	800d3ec <itoa>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	9201      	str	r2, [sp, #4]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004eac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004eb0:	2149      	movs	r1, #73	@ 0x49
 8004eb2:	2032      	movs	r0, #50	@ 0x32
 8004eb4:	f7fb fe26 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004eb8:	7efb      	ldrb	r3, [r7, #27]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3382      	adds	r3, #130	@ 0x82
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2355      	movs	r3, #85	@ 0x55
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	224b      	movs	r2, #75	@ 0x4b
 8004ece:	2182      	movs	r1, #130	@ 0x82
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7fb fd75 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004ed6:	7efb      	ldrb	r3, [r7, #27]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3382      	adds	r3, #130	@ 0x82
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	2355      	movs	r3, #85	@ 0x55
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004eec:	224b      	movs	r2, #75	@ 0x4b
 8004eee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004ef2:	f7fb fd65 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//CNR
	if(digrad_status.cnr <= 11) 								color = RED;
 8004ef6:	7f7b      	ldrb	r3, [r7, #29]
 8004ef8:	2b0b      	cmp	r3, #11
 8004efa:	d802      	bhi.n	8004f02 <Display_dab_digrad_status_data+0x2ca>
 8004efc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f00:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004f02:	7f7b      	ldrb	r3, [r7, #29]
 8004f04:	2b16      	cmp	r3, #22
 8004f06:	d805      	bhi.n	8004f14 <Display_dab_digrad_status_data+0x2dc>
 8004f08:	7f7b      	ldrb	r3, [r7, #29]
 8004f0a:	2b0b      	cmp	r3, #11
 8004f0c:	d902      	bls.n	8004f14 <Display_dab_digrad_status_data+0x2dc>
 8004f0e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004f12:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004f14:	7f7b      	ldrb	r3, [r7, #29]
 8004f16:	2b21      	cmp	r3, #33	@ 0x21
 8004f18:	d805      	bhi.n	8004f26 <Display_dab_digrad_status_data+0x2ee>
 8004f1a:	7f7b      	ldrb	r3, [r7, #29]
 8004f1c:	2b16      	cmp	r3, #22
 8004f1e:	d902      	bls.n	8004f26 <Display_dab_digrad_status_data+0x2ee>
 8004f20:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004f24:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004f26:	7f7b      	ldrb	r3, [r7, #29]
 8004f28:	2b2c      	cmp	r3, #44	@ 0x2c
 8004f2a:	d805      	bhi.n	8004f38 <Display_dab_digrad_status_data+0x300>
 8004f2c:	7f7b      	ldrb	r3, [r7, #29]
 8004f2e:	2b21      	cmp	r3, #33	@ 0x21
 8004f30:	d902      	bls.n	8004f38 <Display_dab_digrad_status_data+0x300>
 8004f32:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004f36:	60fb      	str	r3, [r7, #12]
	if(digrad_status.cnr > 44) 									color = GREEN;
 8004f38:	7f7b      	ldrb	r3, [r7, #29]
 8004f3a:	2b2c      	cmp	r3, #44	@ 0x2c
 8004f3c:	d902      	bls.n	8004f44 <Display_dab_digrad_status_data+0x30c>
 8004f3e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004f42:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004f44:	2302      	movs	r3, #2
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	4b30      	ldr	r3, [pc, #192]	@ (800500c <Display_dab_digrad_status_data+0x3d4>)
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004f50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f54:	2162      	movs	r1, #98	@ 0x62
 8004f56:	2032      	movs	r0, #50	@ 0x32
 8004f58:	f7fb fdd4 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004f5c:	7f7b      	ldrb	r3, [r7, #29]
 8004f5e:	220a      	movs	r2, #10
 8004f60:	492b      	ldr	r1, [pc, #172]	@ (8005010 <Display_dab_digrad_status_data+0x3d8>)
 8004f62:	4618      	mov	r0, r3
 8004f64:	f008 fa42 	bl	800d3ec <itoa>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	9201      	str	r2, [sp, #4]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004f74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f78:	2162      	movs	r1, #98	@ 0x62
 8004f7a:	2032      	movs	r0, #50	@ 0x32
 8004f7c:	f7fb fdc2 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004f80:	7f7b      	ldrb	r3, [r7, #29]
 8004f82:	461a      	mov	r2, r3
 8004f84:	23b4      	movs	r3, #180	@ 0xb4
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	4a22      	ldr	r2, [pc, #136]	@ (8005014 <Display_dab_digrad_status_data+0x3dc>)
 8004f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f90:	1112      	asrs	r2, r2, #4
 8004f92:	17db      	asrs	r3, r3, #31
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	3382      	adds	r3, #130	@ 0x82
 8004f98:	461a      	mov	r2, r3
 8004f9a:	236e      	movs	r3, #110	@ 0x6e
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	2264      	movs	r2, #100	@ 0x64
 8004fa2:	2182      	movs	r1, #130	@ 0x82
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7fb fd0b 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8004faa:	7f7b      	ldrb	r3, [r7, #29]
 8004fac:	461a      	mov	r2, r3
 8004fae:	23b4      	movs	r3, #180	@ 0xb4
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	4a17      	ldr	r2, [pc, #92]	@ (8005014 <Display_dab_digrad_status_data+0x3dc>)
 8004fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8004fba:	1112      	asrs	r2, r2, #4
 8004fbc:	17db      	asrs	r3, r3, #31
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	3382      	adds	r3, #130	@ 0x82
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	236e      	movs	r3, #110	@ 0x6e
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004fcc:	2264      	movs	r2, #100	@ 0x64
 8004fce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004fd2:	f7fb fcf5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//FIC QUALITY
	if(digrad_status.fic_quality <= 20) 										color = RED;
 8004fd6:	7f3b      	ldrb	r3, [r7, #28]
 8004fd8:	2b14      	cmp	r3, #20
 8004fda:	d802      	bhi.n	8004fe2 <Display_dab_digrad_status_data+0x3aa>
 8004fdc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004fe0:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8004fe2:	7f3b      	ldrb	r3, [r7, #28]
 8004fe4:	2b28      	cmp	r3, #40	@ 0x28
 8004fe6:	d805      	bhi.n	8004ff4 <Display_dab_digrad_status_data+0x3bc>
 8004fe8:	7f3b      	ldrb	r3, [r7, #28]
 8004fea:	2b14      	cmp	r3, #20
 8004fec:	d902      	bls.n	8004ff4 <Display_dab_digrad_status_data+0x3bc>
 8004fee:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004ff2:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8004ff4:	7f3b      	ldrb	r3, [r7, #28]
 8004ff6:	2b3c      	cmp	r3, #60	@ 0x3c
 8004ff8:	d80e      	bhi.n	8005018 <Display_dab_digrad_status_data+0x3e0>
 8004ffa:	7f3b      	ldrb	r3, [r7, #28]
 8004ffc:	2b28      	cmp	r3, #40	@ 0x28
 8004ffe:	d90b      	bls.n	8005018 <Display_dab_digrad_status_data+0x3e0>
 8005000:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e007      	b.n	8005018 <Display_dab_digrad_status_data+0x3e0>
 8005008:	0800e6a8 	.word	0x0800e6a8
 800500c:	0800e6b4 	.word	0x0800e6b4
 8005010:	20006d8c 	.word	0x20006d8c
 8005014:	4bda12f7 	.word	0x4bda12f7
	if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8005018:	7f3b      	ldrb	r3, [r7, #28]
 800501a:	2b50      	cmp	r3, #80	@ 0x50
 800501c:	d805      	bhi.n	800502a <Display_dab_digrad_status_data+0x3f2>
 800501e:	7f3b      	ldrb	r3, [r7, #28]
 8005020:	2b3c      	cmp	r3, #60	@ 0x3c
 8005022:	d902      	bls.n	800502a <Display_dab_digrad_status_data+0x3f2>
 8005024:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8005028:	60fb      	str	r3, [r7, #12]
	if(digrad_status.fic_quality > 80) 											color = GREEN;
 800502a:	7f3b      	ldrb	r3, [r7, #28]
 800502c:	2b50      	cmp	r3, #80	@ 0x50
 800502e:	d902      	bls.n	8005036 <Display_dab_digrad_status_data+0x3fe>
 8005030:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8005034:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 8005036:	2302      	movs	r3, #2
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	4ba9      	ldr	r3, [pc, #676]	@ (80052e0 <Display_dab_digrad_status_data+0x6a8>)
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005046:	217b      	movs	r1, #123	@ 0x7b
 8005048:	204b      	movs	r0, #75	@ 0x4b
 800504a:	f7fb fd5b 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 800504e:	7f3b      	ldrb	r3, [r7, #28]
 8005050:	220a      	movs	r2, #10
 8005052:	49a4      	ldr	r1, [pc, #656]	@ (80052e4 <Display_dab_digrad_status_data+0x6ac>)
 8005054:	4618      	mov	r0, r3
 8005056:	f008 f9c9 	bl	800d3ec <itoa>
 800505a:	4603      	mov	r3, r0
 800505c:	2202      	movs	r2, #2
 800505e:	9201      	str	r2, [sp, #4]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005066:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800506a:	217b      	movs	r1, #123	@ 0x7b
 800506c:	204b      	movs	r0, #75	@ 0x4b
 800506e:	f7fb fd49 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8005072:	7f3b      	ldrb	r3, [r7, #28]
 8005074:	461a      	mov	r2, r3
 8005076:	23b4      	movs	r3, #180	@ 0xb4
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	4a9a      	ldr	r2, [pc, #616]	@ (80052e8 <Display_dab_digrad_status_data+0x6b0>)
 800507e:	fb82 1203 	smull	r1, r2, r2, r3
 8005082:	1152      	asrs	r2, r2, #5
 8005084:	17db      	asrs	r3, r3, #31
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	3382      	adds	r3, #130	@ 0x82
 800508a:	461a      	mov	r2, r3
 800508c:	2387      	movs	r3, #135	@ 0x87
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	227d      	movs	r2, #125	@ 0x7d
 8005094:	2182      	movs	r1, #130	@ 0x82
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7fb fc92 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 800509c:	7f3b      	ldrb	r3, [r7, #28]
 800509e:	461a      	mov	r2, r3
 80050a0:	23b4      	movs	r3, #180	@ 0xb4
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	4a90      	ldr	r2, [pc, #576]	@ (80052e8 <Display_dab_digrad_status_data+0x6b0>)
 80050a8:	fb82 1203 	smull	r1, r2, r2, r3
 80050ac:	1152      	asrs	r2, r2, #5
 80050ae:	17db      	asrs	r3, r3, #31
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	3382      	adds	r3, #130	@ 0x82
 80050b4:	4619      	mov	r1, r3
 80050b6:	2387      	movs	r3, #135	@ 0x87
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80050be:	227d      	movs	r2, #125	@ 0x7d
 80050c0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80050c4:	f7fb fc7c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//TUNE FREQ
	ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	4a88      	ldr	r2, [pc, #544]	@ (80052ec <Display_dab_digrad_status_data+0x6b4>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	099b      	lsrs	r3, r3, #6
 80050d2:	220a      	movs	r2, #10
 80050d4:	4983      	ldr	r1, [pc, #524]	@ (80052e4 <Display_dab_digrad_status_data+0x6ac>)
 80050d6:	4618      	mov	r0, r3
 80050d8:	f008 f988 	bl	800d3ec <itoa>
 80050dc:	4603      	mov	r3, r0
 80050de:	2202      	movs	r2, #2
 80050e0:	9201      	str	r2, [sp, #4]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80050e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050ec:	2194      	movs	r1, #148	@ 0x94
 80050ee:	205b      	movs	r0, #91	@ 0x5b
 80050f0:	f7fb fd08 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	4b7d      	ldr	r3, [pc, #500]	@ (80052ec <Display_dab_digrad_status_data+0x6b4>)
 80050f8:	fba3 1302 	umull	r1, r3, r3, r2
 80050fc:	099b      	lsrs	r3, r3, #6
 80050fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	220a      	movs	r2, #10
 800510a:	4976      	ldr	r1, [pc, #472]	@ (80052e4 <Display_dab_digrad_status_data+0x6ac>)
 800510c:	4618      	mov	r0, r3
 800510e:	f008 f96d 	bl	800d3ec <itoa>
 8005112:	4603      	mov	r3, r0
 8005114:	2202      	movs	r2, #2
 8005116:	9201      	str	r2, [sp, #4]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800511e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005122:	2194      	movs	r1, #148	@ 0x94
 8005124:	2078      	movs	r0, #120	@ 0x78
 8005126:	f7fb fced 	bl	8000b04 <ILI9341_Draw_String>

	//TUNE INDEX
	if(digrad_status.tune_index < 10)
 800512a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800512e:	2b09      	cmp	r3, #9
 8005130:	d821      	bhi.n	8005176 <Display_dab_digrad_status_data+0x53e>
	{
		ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 8005132:	2302      	movs	r3, #2
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	4b6e      	ldr	r3, [pc, #440]	@ (80052f0 <Display_dab_digrad_status_data+0x6b8>)
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800513e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005142:	2194      	movs	r1, #148	@ 0x94
 8005144:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8005148:	f7fb fcdc 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 800514c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005150:	220a      	movs	r2, #10
 8005152:	4964      	ldr	r1, [pc, #400]	@ (80052e4 <Display_dab_digrad_status_data+0x6ac>)
 8005154:	4618      	mov	r0, r3
 8005156:	f008 f949 	bl	800d3ec <itoa>
 800515a:	4603      	mov	r3, r0
 800515c:	2202      	movs	r2, #2
 800515e:	9201      	str	r2, [sp, #4]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800516a:	2194      	movs	r1, #148	@ 0x94
 800516c:	f240 1011 	movw	r0, #273	@ 0x111
 8005170:	f7fb fcc8 	bl	8000b04 <ILI9341_Draw_String>
 8005174:	e013      	b.n	800519e <Display_dab_digrad_status_data+0x566>
	}
	else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8005176:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800517a:	220a      	movs	r2, #10
 800517c:	4959      	ldr	r1, [pc, #356]	@ (80052e4 <Display_dab_digrad_status_data+0x6ac>)
 800517e:	4618      	mov	r0, r3
 8005180:	f008 f934 	bl	800d3ec <itoa>
 8005184:	4603      	mov	r3, r0
 8005186:	2202      	movs	r2, #2
 8005188:	9201      	str	r2, [sp, #4]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005190:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005194:	2194      	movs	r1, #148	@ 0x94
 8005196:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800519a:	f7fb fcb3 	bl	8000b04 <ILI9341_Draw_String>

	//ANT CAP TRIM
	if(cap_val_pf_int < 10)
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	2b09      	cmp	r3, #9
 80051a2:	d81d      	bhi.n	80051e0 <Display_dab_digrad_status_data+0x5a8>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 80051a4:	2302      	movs	r3, #2
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	4b52      	ldr	r3, [pc, #328]	@ (80052f4 <Display_dab_digrad_status_data+0x6bc>)
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051b4:	21ad      	movs	r1, #173	@ 0xad
 80051b6:	204f      	movs	r0, #79	@ 0x4f
 80051b8:	f7fb fca4 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	220a      	movs	r2, #10
 80051c0:	4948      	ldr	r1, [pc, #288]	@ (80052e4 <Display_dab_digrad_status_data+0x6ac>)
 80051c2:	4618      	mov	r0, r3
 80051c4:	f008 f912 	bl	800d3ec <itoa>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2202      	movs	r2, #2
 80051cc:	9201      	str	r2, [sp, #4]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051d8:	21ad      	movs	r1, #173	@ 0xad
 80051da:	2057      	movs	r0, #87	@ 0x57
 80051dc:	f7fb fc92 	bl	8000b04 <ILI9341_Draw_String>
	}
	if(cap_val_pf_int >= 10)
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	2b09      	cmp	r3, #9
 80051e4:	d911      	bls.n	800520a <Display_dab_digrad_status_data+0x5d2>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	220a      	movs	r2, #10
 80051ea:	493e      	ldr	r1, [pc, #248]	@ (80052e4 <Display_dab_digrad_status_data+0x6ac>)
 80051ec:	4618      	mov	r0, r3
 80051ee:	f008 f8fd 	bl	800d3ec <itoa>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2202      	movs	r2, #2
 80051f6:	9201      	str	r2, [sp, #4]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005202:	21ad      	movs	r1, #173	@ 0xad
 8005204:	204f      	movs	r0, #79	@ 0x4f
 8005206:	f7fb fc7d 	bl	8000b04 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 800520a:	2302      	movs	r3, #2
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	4b3a      	ldr	r3, [pc, #232]	@ (80052f8 <Display_dab_digrad_status_data+0x6c0>)
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800521a:	21ad      	movs	r1, #173	@ 0xad
 800521c:	205f      	movs	r0, #95	@ 0x5f
 800521e:	f7fb fc71 	bl	8000b04 <ILI9341_Draw_String>
	switch(cap_val_pf_frac)
 8005222:	88bb      	ldrh	r3, [r7, #4]
 8005224:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005228:	4293      	cmp	r3, r2
 800522a:	d023      	beq.n	8005274 <Display_dab_digrad_status_data+0x63c>
 800522c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005230:	4293      	cmp	r3, r2
 8005232:	dc2c      	bgt.n	800528e <Display_dab_digrad_status_data+0x656>
 8005234:	2bfa      	cmp	r3, #250	@ 0xfa
 8005236:	d003      	beq.n	8005240 <Display_dab_digrad_status_data+0x608>
 8005238:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800523c:	d00d      	beq.n	800525a <Display_dab_digrad_status_data+0x622>
 800523e:	e026      	b.n	800528e <Display_dab_digrad_status_data+0x656>
	{
	case 250:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 8005240:	2302      	movs	r3, #2
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	4b2d      	ldr	r3, [pc, #180]	@ (80052fc <Display_dab_digrad_status_data+0x6c4>)
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800524c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005250:	21ad      	movs	r1, #173	@ 0xad
 8005252:	2067      	movs	r0, #103	@ 0x67
 8005254:	f7fb fc56 	bl	8000b04 <ILI9341_Draw_String>
		break;
 8005258:	e026      	b.n	80052a8 <Display_dab_digrad_status_data+0x670>
	case 500:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 800525a:	2302      	movs	r3, #2
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <Display_dab_digrad_status_data+0x6c8>)
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800526a:	21ad      	movs	r1, #173	@ 0xad
 800526c:	2067      	movs	r0, #103	@ 0x67
 800526e:	f7fb fc49 	bl	8000b04 <ILI9341_Draw_String>
		break;
 8005272:	e019      	b.n	80052a8 <Display_dab_digrad_status_data+0x670>
	case 750:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8005274:	2302      	movs	r3, #2
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	4b22      	ldr	r3, [pc, #136]	@ (8005304 <Display_dab_digrad_status_data+0x6cc>)
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005280:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005284:	21ad      	movs	r1, #173	@ 0xad
 8005286:	2067      	movs	r0, #103	@ 0x67
 8005288:	f7fb fc3c 	bl	8000b04 <ILI9341_Draw_String>
		break;
 800528c:	e00c      	b.n	80052a8 <Display_dab_digrad_status_data+0x670>
	default:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 800528e:	2302      	movs	r3, #2
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <Display_dab_digrad_status_data+0x6d0>)
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800529a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800529e:	21ad      	movs	r1, #173	@ 0xad
 80052a0:	2067      	movs	r0, #103	@ 0x67
 80052a2:	f7fb fc2f 	bl	8000b04 <ILI9341_Draw_String>
		break;
 80052a6:	bf00      	nop
	}

	//BER
	ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 80052a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	220a      	movs	r2, #10
 80052b2:	490c      	ldr	r1, [pc, #48]	@ (80052e4 <Display_dab_digrad_status_data+0x6ac>)
 80052b4:	4618      	mov	r0, r3
 80052b6:	f008 f899 	bl	800d3ec <itoa>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2202      	movs	r2, #2
 80052be:	9201      	str	r2, [sp, #4]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052ca:	21ad      	movs	r1, #173	@ 0xad
 80052cc:	20d7      	movs	r0, #215	@ 0xd7
 80052ce:	f7fb fc19 	bl	8000b04 <ILI9341_Draw_String>
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052dc:	b004      	add	sp, #16
 80052de:	4770      	bx	lr
 80052e0:	0800e6b4 	.word	0x0800e6b4
 80052e4:	20006d8c 	.word	0x20006d8c
 80052e8:	51eb851f 	.word	0x51eb851f
 80052ec:	10624dd3 	.word	0x10624dd3
 80052f0:	0800e6b8 	.word	0x0800e6b8
 80052f4:	0800e3c0 	.word	0x0800e3c0
 80052f8:	0800e3d0 	.word	0x0800e3d0
 80052fc:	0800e6bc 	.word	0x0800e6bc
 8005300:	0800e6c0 	.word	0x0800e6c0
 8005304:	0800e6c4 	.word	0x0800e6c4
 8005308:	0800e6c8 	.word	0x0800e6c8

0800530c <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 8005312:	f7fe fba9 	bl	8003a68 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2);
 8005316:	2302      	movs	r3, #2
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	4b6d      	ldr	r3, [pc, #436]	@ (80054d0 <Display_settings_screen_background+0x1c4>)
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	2300      	movs	r3, #0
 8005320:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005324:	2101      	movs	r1, #1
 8005326:	2005      	movs	r0, #5
 8005328:	f7fb fbec 	bl	8000b04 <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 800532c:	2337      	movs	r3, #55	@ 0x37
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	f240 133b 	movw	r3, #315	@ 0x13b
 8005334:	2214      	movs	r2, #20
 8005336:	2105      	movs	r1, #5
 8005338:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800533c:	f7fb fb40 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 8005340:	2302      	movs	r3, #2
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	4b63      	ldr	r3, [pc, #396]	@ (80054d4 <Display_settings_screen_background+0x1c8>)
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800534c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005350:	2116      	movs	r1, #22
 8005352:	2037      	movs	r0, #55	@ 0x37
 8005354:	f7fb fbd6 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 8005358:	2302      	movs	r3, #2
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	4b5e      	ldr	r3, [pc, #376]	@ (80054d8 <Display_settings_screen_background+0x1cc>)
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005368:	2116      	movs	r1, #22
 800536a:	20ce      	movs	r0, #206	@ 0xce
 800536c:	f7fb fbca 	bl	8000b04 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8005370:	2364      	movs	r3, #100	@ 0x64
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	239d      	movs	r3, #157	@ 0x9d
 8005376:	223c      	movs	r2, #60	@ 0x3c
 8005378:	2105      	movs	r1, #5
 800537a:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800537e:	f7fb fb1f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 8005382:	2364      	movs	r3, #100	@ 0x64
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	f240 133b 	movw	r3, #315	@ 0x13b
 800538a:	223c      	movs	r2, #60	@ 0x3c
 800538c:	21a3      	movs	r1, #163	@ 0xa3
 800538e:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005392:	f7fb fb15 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 8005396:	2302      	movs	r3, #2
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	4b50      	ldr	r3, [pc, #320]	@ (80054dc <Display_settings_screen_background+0x1d0>)
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80053a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053a6:	2148      	movs	r1, #72	@ 0x48
 80053a8:	2036      	movs	r0, #54	@ 0x36
 80053aa:	f7fb fbab 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 80053ae:	2302      	movs	r3, #2
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	4b4b      	ldr	r3, [pc, #300]	@ (80054e0 <Display_settings_screen_background+0x1d4>)
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80053ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053be:	2148      	movs	r1, #72	@ 0x48
 80053c0:	20d3      	movs	r0, #211	@ 0xd3
 80053c2:	f7fb fb9f 	bl	8000b04 <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 80053c6:	2391      	movs	r3, #145	@ 0x91
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	239d      	movs	r3, #157	@ 0x9d
 80053cc:	2269      	movs	r2, #105	@ 0x69
 80053ce:	2105      	movs	r1, #5
 80053d0:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80053d4:	f7fb faf4 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 80053d8:	2391      	movs	r3, #145	@ 0x91
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	f240 133b 	movw	r3, #315	@ 0x13b
 80053e0:	2269      	movs	r2, #105	@ 0x69
 80053e2:	21a3      	movs	r1, #163	@ 0xa3
 80053e4:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80053e8:	f7fb faea 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 80053ec:	2302      	movs	r3, #2
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	4b3c      	ldr	r3, [pc, #240]	@ (80054e4 <Display_settings_screen_background+0x1d8>)
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80053f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053fc:	2175      	movs	r1, #117	@ 0x75
 80053fe:	2023      	movs	r0, #35	@ 0x23
 8005400:	f7fb fb80 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 8005404:	2302      	movs	r3, #2
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	4b37      	ldr	r3, [pc, #220]	@ (80054e8 <Display_settings_screen_background+0x1dc>)
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005414:	2175      	movs	r1, #117	@ 0x75
 8005416:	20c1      	movs	r0, #193	@ 0xc1
 8005418:	f7fb fb74 	bl	8000b04 <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 800541c:	23be      	movs	r3, #190	@ 0xbe
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	239d      	movs	r3, #157	@ 0x9d
 8005422:	2296      	movs	r2, #150	@ 0x96
 8005424:	2105      	movs	r1, #5
 8005426:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800542a:	f7fb fac9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 800542e:	23be      	movs	r3, #190	@ 0xbe
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	f240 133b 	movw	r3, #315	@ 0x13b
 8005436:	2296      	movs	r2, #150	@ 0x96
 8005438:	21a3      	movs	r1, #163	@ 0xa3
 800543a:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800543e:	f7fb fabf 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 8005442:	2302      	movs	r3, #2
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	4b29      	ldr	r3, [pc, #164]	@ (80054ec <Display_settings_screen_background+0x1e0>)
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800544e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005452:	21a2      	movs	r1, #162	@ 0xa2
 8005454:	2020      	movs	r0, #32
 8005456:	f7fb fb55 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 800545a:	2302      	movs	r3, #2
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	4b24      	ldr	r3, [pc, #144]	@ (80054f0 <Display_settings_screen_background+0x1e4>)
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800546a:	21a2      	movs	r1, #162	@ 0xa2
 800546c:	20a8      	movs	r0, #168	@ 0xa8
 800546e:	f7fb fb49 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8005472:	23eb      	movs	r3, #235	@ 0xeb
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	239d      	movs	r3, #157	@ 0x9d
 8005478:	22c3      	movs	r2, #195	@ 0xc3
 800547a:	2105      	movs	r1, #5
 800547c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005480:	f7fb fa9e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8005484:	23eb      	movs	r3, #235	@ 0xeb
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	f240 133b 	movw	r3, #315	@ 0x13b
 800548c:	22c3      	movs	r2, #195	@ 0xc3
 800548e:	21a3      	movs	r1, #163	@ 0xa3
 8005490:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005494:	f7fb fa94 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8005498:	2302      	movs	r3, #2
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	4b15      	ldr	r3, [pc, #84]	@ (80054f4 <Display_settings_screen_background+0x1e8>)
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80054a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054a8:	21cf      	movs	r1, #207	@ 0xcf
 80054aa:	2025      	movs	r0, #37	@ 0x25
 80054ac:	f7fb fb2a 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 80054b0:	2302      	movs	r3, #2
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <Display_settings_screen_background+0x1ec>)
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80054bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054c0:	21cf      	movs	r1, #207	@ 0xcf
 80054c2:	20c3      	movs	r0, #195	@ 0xc3
 80054c4:	f7fb fb1e 	bl	8000b04 <ILI9341_Draw_String>
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	0800e6cc 	.word	0x0800e6cc
 80054d4:	0800e6dc 	.word	0x0800e6dc
 80054d8:	0800e6e4 	.word	0x0800e6e4
 80054dc:	0800e6f0 	.word	0x0800e6f0
 80054e0:	0800e6fc 	.word	0x0800e6fc
 80054e4:	0800e708 	.word	0x0800e708
 80054e8:	0800e714 	.word	0x0800e714
 80054ec:	0800e720 	.word	0x0800e720
 80054f0:	0800e730 	.word	0x0800e730
 80054f4:	0800e4fc 	.word	0x0800e4fc
 80054f8:	0800e4f0 	.word	0x0800e4f0

080054fc <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b087      	sub	sp, #28
 8005500:	af02      	add	r7, sp, #8
 8005502:	463c      	mov	r4, r7
 8005504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 8005508:	7bbb      	ldrb	r3, [r7, #14]
 800550a:	461a      	mov	r2, r3
 800550c:	238c      	movs	r3, #140	@ 0x8c
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	4a1b      	ldr	r2, [pc, #108]	@ (8005580 <Display_settings_screen_data+0x84>)
 8005514:	fb82 1203 	smull	r1, r2, r2, r3
 8005518:	441a      	add	r2, r3
 800551a:	1152      	asrs	r2, r2, #5
 800551c:	17db      	asrs	r3, r3, #31
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	330c      	adds	r3, #12
 8005522:	4619      	mov	r1, r3
 8005524:	2332      	movs	r3, #50	@ 0x32
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	2398      	movs	r3, #152	@ 0x98
 800552a:	2228      	movs	r2, #40	@ 0x28
 800552c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005530:	f7fb fa46 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	461a      	mov	r2, r3
 8005538:	238c      	movs	r3, #140	@ 0x8c
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	4a10      	ldr	r2, [pc, #64]	@ (8005580 <Display_settings_screen_data+0x84>)
 8005540:	fb82 1203 	smull	r1, r2, r2, r3
 8005544:	441a      	add	r2, r3
 8005546:	1152      	asrs	r2, r2, #5
 8005548:	17db      	asrs	r3, r3, #31
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	330c      	adds	r3, #12
 800554e:	461a      	mov	r2, r3
 8005550:	2332      	movs	r3, #50	@ 0x32
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	2228      	movs	r2, #40	@ 0x28
 8005558:	210c      	movs	r1, #12
 800555a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800555e:	f7fb fa2f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 8005562:	2332      	movs	r3, #50	@ 0x32
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800556a:	2228      	movs	r2, #40	@ 0x28
 800556c:	21a8      	movs	r1, #168	@ 0xa8
 800556e:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8005572:	f7fb fa25 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}
 800557e:	bf00      	nop
 8005580:	82082083 	.word	0x82082083

08005584 <Display_time>:

void Display_time(time_t time_val)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af02      	add	r7, sp, #8
 800558a:	463b      	mov	r3, r7
 800558c:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 8005590:	883b      	ldrh	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d076      	beq.n	8005684 <Display_time+0x100>
 8005596:	78bb      	ldrb	r3, [r7, #2]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d073      	beq.n	8005684 <Display_time+0x100>
	{
		if(time_val.hour < 10)
 800559c:	793b      	ldrb	r3, [r7, #4]
 800559e:	2b09      	cmp	r3, #9
 80055a0:	d81e      	bhi.n	80055e0 <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 80055a2:	2302      	movs	r3, #2
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	4b39      	ldr	r3, [pc, #228]	@ (800568c <Display_time+0x108>)
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2300      	movs	r3, #0
 80055ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055b0:	2101      	movs	r1, #1
 80055b2:	f240 100f 	movw	r0, #271	@ 0x10f
 80055b6:	f7fb faa5 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80055ba:	793b      	ldrb	r3, [r7, #4]
 80055bc:	220a      	movs	r2, #10
 80055be:	4934      	ldr	r1, [pc, #208]	@ (8005690 <Display_time+0x10c>)
 80055c0:	4618      	mov	r0, r3
 80055c2:	f007 ff13 	bl	800d3ec <itoa>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2202      	movs	r2, #2
 80055ca:	9201      	str	r2, [sp, #4]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2300      	movs	r3, #0
 80055d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055d4:	2101      	movs	r1, #1
 80055d6:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80055da:	f7fb fa93 	bl	8000b04 <ILI9341_Draw_String>
 80055de:	e011      	b.n	8005604 <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80055e0:	793b      	ldrb	r3, [r7, #4]
 80055e2:	220a      	movs	r2, #10
 80055e4:	492a      	ldr	r1, [pc, #168]	@ (8005690 <Display_time+0x10c>)
 80055e6:	4618      	mov	r0, r3
 80055e8:	f007 ff00 	bl	800d3ec <itoa>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2202      	movs	r2, #2
 80055f0:	9201      	str	r2, [sp, #4]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055fa:	2101      	movs	r1, #1
 80055fc:	f240 100f 	movw	r0, #271	@ 0x10f
 8005600:	f7fb fa80 	bl	8000b04 <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 8005604:	2302      	movs	r3, #2
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	4b22      	ldr	r3, [pc, #136]	@ (8005694 <Display_time+0x110>)
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2300      	movs	r3, #0
 800560e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005612:	2101      	movs	r1, #1
 8005614:	f240 101f 	movw	r0, #287	@ 0x11f
 8005618:	f7fb fa74 	bl	8000b04 <ILI9341_Draw_String>

		if(time_val.minute < 10)
 800561c:	797b      	ldrb	r3, [r7, #5]
 800561e:	2b09      	cmp	r3, #9
 8005620:	d81e      	bhi.n	8005660 <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 8005622:	2302      	movs	r3, #2
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	4b19      	ldr	r3, [pc, #100]	@ (800568c <Display_time+0x108>)
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	2300      	movs	r3, #0
 800562c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005630:	2101      	movs	r1, #1
 8005632:	f240 1027 	movw	r0, #295	@ 0x127
 8005636:	f7fb fa65 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 800563a:	797b      	ldrb	r3, [r7, #5]
 800563c:	220a      	movs	r2, #10
 800563e:	4914      	ldr	r1, [pc, #80]	@ (8005690 <Display_time+0x10c>)
 8005640:	4618      	mov	r0, r3
 8005642:	f007 fed3 	bl	800d3ec <itoa>
 8005646:	4603      	mov	r3, r0
 8005648:	2202      	movs	r2, #2
 800564a:	9201      	str	r2, [sp, #4]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	2300      	movs	r3, #0
 8005650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005654:	2101      	movs	r1, #1
 8005656:	f44f 7098 	mov.w	r0, #304	@ 0x130
 800565a:	f7fb fa53 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 800565e:	e011      	b.n	8005684 <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8005660:	797b      	ldrb	r3, [r7, #5]
 8005662:	220a      	movs	r2, #10
 8005664:	490a      	ldr	r1, [pc, #40]	@ (8005690 <Display_time+0x10c>)
 8005666:	4618      	mov	r0, r3
 8005668:	f007 fec0 	bl	800d3ec <itoa>
 800566c:	4603      	mov	r3, r0
 800566e:	2202      	movs	r2, #2
 8005670:	9201      	str	r2, [sp, #4]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800567a:	2101      	movs	r1, #1
 800567c:	f240 1027 	movw	r0, #295	@ 0x127
 8005680:	f7fb fa40 	bl	8000b04 <ILI9341_Draw_String>
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	0800e6b8 	.word	0x0800e6b8
 8005690:	20006d8c 	.word	0x20006d8c
 8005694:	0800e744 	.word	0x0800e744

08005698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	4b0c      	ldr	r3, [pc, #48]	@ (80056d4 <MX_DMA_Init+0x3c>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a6:	4a0b      	ldr	r2, [pc, #44]	@ (80056d4 <MX_DMA_Init+0x3c>)
 80056a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80056ae:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <MX_DMA_Init+0x3c>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80056ba:	2200      	movs	r2, #0
 80056bc:	2100      	movs	r1, #0
 80056be:	200f      	movs	r0, #15
 80056c0:	f001 ffc1 	bl	8007646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80056c4:	200f      	movs	r0, #15
 80056c6:	f001 ffda 	bl	800767e <HAL_NVIC_EnableIRQ>

}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40023800 	.word	0x40023800

080056d8 <eeprom_wait>:
//#define ADDR_SIZE 1	//for 24c08 1, for 24c256 2, because of bigger memory size - we must habe 2 bytes for memory Address

static uint32_t last_write;	//variable used to save time of last writing operation in eeprom_wait function

void eeprom_wait(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 80056dc:	bf00      	nop
 80056de:	f001 fea7 	bl	8007430 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <eeprom_wait+0x1c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b14      	cmp	r3, #20
 80056ec:	d9f7      	bls.n	80056de <eeprom_wait+0x6>
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20006e50 	.word	0x20006e50

080056f8 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af04      	add	r7, sp, #16
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8005704:	f7ff ffe8 	bl	80056d8 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	b29a      	uxth	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005714:	9102      	str	r1, [sp, #8]
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2302      	movs	r3, #2
 800571e:	21a0      	movs	r1, #160	@ 0xa0
 8005720:	4803      	ldr	r0, [pc, #12]	@ (8005730 <eeprom_read+0x38>)
 8005722:	f002 feed 	bl	8008500 <HAL_I2C_Mem_Read>
 8005726:	4603      	mov	r3, r0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20006e54 	.word	0x20006e54

08005734 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	@ 0x28
 8005738:	af04      	add	r7, sp, #16
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8005740:	f7ff ffca 	bl	80056d8 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005750:	9102      	str	r1, [sp, #8]
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	2302      	movs	r3, #2
 800575a:	21a0      	movs	r1, #160	@ 0xa0
 800575c:	4807      	ldr	r0, [pc, #28]	@ (800577c <eeprom_write+0x48>)
 800575e:	f002 fdd5 	bl	800830c <HAL_I2C_Mem_Write>
 8005762:	4603      	mov	r3, r0
 8005764:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8005766:	f001 fe63 	bl	8007430 <HAL_GetTick>
 800576a:	4603      	mov	r3, r0
 800576c:	4a04      	ldr	r2, [pc, #16]	@ (8005780 <eeprom_write+0x4c>)
 800576e:	6013      	str	r3, [r2, #0]

    return rc;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20006e54 	.word	0x20006e54
 8005780:	20006e50 	.word	0x20006e50

08005784 <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	@ 0x28
 8005788:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 800578a:	2101      	movs	r1, #1
 800578c:	482d      	ldr	r0, [pc, #180]	@ (8005844 <eeprom_clear_scanning_data+0xc0>)
 800578e:	f7fe f945 	bl	8003a1c <send_debug_msg>

	 uint8_t clear_page_sequence[PAGE_SIZE];

	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005798:	e00b      	b.n	80057b2 <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 800579a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800579e:	3328      	adds	r3, #40	@ 0x28
 80057a0:	443b      	add	r3, r7
 80057a2:	22ff      	movs	r2, #255	@ 0xff
 80057a4:	f803 2c24 	strb.w	r2, [r3, #-36]
	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 80057a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057ac:	3301      	adds	r3, #1
 80057ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80057b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057b6:	2b1f      	cmp	r3, #31
 80057b8:	d9ef      	bls.n	800579a <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	2220      	movs	r2, #32
 80057be:	4619      	mov	r1, r3
 80057c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80057c4:	f7ff ffb6 	bl	8005734 <eeprom_write>
	if(PAGE_SIZE == 32)
	{
		eeprom_write(PAGE_SIZE * (SCAN_RELATED_DATA_PAGE + 1), &clear_page_sequence, sizeof(clear_page_sequence));
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	2220      	movs	r2, #32
 80057cc:	4619      	mov	r1, r3
 80057ce:	f44f 7090 	mov.w	r0, #288	@ 0x120
 80057d2:	f7ff ffaf 	bl	8005734 <eeprom_write>
	}

	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80057dc:	e00e      	b.n	80057fc <eeprom_clear_scanning_data+0x78>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80057de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057e2:	330a      	adds	r3, #10
 80057e4:	015b      	lsls	r3, r3, #5
 80057e6:	4618      	mov	r0, r3
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	2220      	movs	r2, #32
 80057ec:	4619      	mov	r1, r3
 80057ee:	f7ff ffa1 	bl	8005734 <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80057f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057f6:	3301      	adds	r3, #1
 80057f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80057fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005800:	2b09      	cmp	r3, #9
 8005802:	d9ec      	bls.n	80057de <eeprom_clear_scanning_data+0x5a>
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
		}
	}
	if(PAGE_SIZE == 32)
	{
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800580a:	e00e      	b.n	800582a <eeprom_clear_scanning_data+0xa6>
		{
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 800580c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005810:	331e      	adds	r3, #30
 8005812:	015b      	lsls	r3, r3, #5
 8005814:	4618      	mov	r0, r3
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	2220      	movs	r2, #32
 800581a:	4619      	mov	r1, r3
 800581c:	f7ff ff8a 	bl	8005734 <eeprom_write>
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 8005820:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005824:	3301      	adds	r3, #1
 8005826:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800582a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800582e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005830:	d9ec      	bls.n	800580c <eeprom_clear_scanning_data+0x88>
		}
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 8005832:	2101      	movs	r1, #1
 8005834:	4804      	ldr	r0, [pc, #16]	@ (8005848 <eeprom_clear_scanning_data+0xc4>)
 8005836:	f7fe f8f1 	bl	8003a1c <send_debug_msg>
}
 800583a:	bf00      	nop
 800583c:	3728      	adds	r7, #40	@ 0x28
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	0800e7f8 	.word	0x0800e7f8
 8005848:	0800e818 	.word	0x0800e818

0800584c <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b096      	sub	sp, #88	@ 0x58
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	461a      	mov	r2, r3
 8005858:	460b      	mov	r3, r1
 800585a:	72fb      	strb	r3, [r7, #11]
 800585c:	4613      	mov	r3, r2
 800585e:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 8005860:	2101      	movs	r1, #1
 8005862:	4835      	ldr	r0, [pc, #212]	@ (8005938 <eeprom_save_scanning_data+0xec>)
 8005864:	f7fe f8da 	bl	8003a1c <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 8005868:	f107 030a 	add.w	r3, r7, #10
 800586c:	2201      	movs	r2, #1
 800586e:	4619      	mov	r1, r3
 8005870:	f240 1005 	movw	r0, #261	@ 0x105
 8005874:	f7ff ff5e 	bl	8005734 <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 8005878:	f107 030b 	add.w	r3, r7, #11
 800587c:	2201      	movs	r2, #1
 800587e:	4619      	mov	r1, r3
 8005880:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8005884:	f7ff ff56 	bl	8005734 <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005888:	2300      	movs	r3, #0
 800588a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800588e:	e012      	b.n	80058b6 <eeprom_save_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 8005890:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8005894:	330a      	adds	r3, #10
 8005896:	015b      	lsls	r3, r3, #5
 8005898:	4618      	mov	r0, r3
 800589a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800589e:	015b      	lsls	r3, r3, #5
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	2220      	movs	r2, #32
 80058a6:	4619      	mov	r1, r3
 80058a8:	f7ff ff44 	bl	8005734 <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 80058ac:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80058b0:	3301      	adds	r3, #1
 80058b2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80058b6:	7abb      	ldrb	r3, [r7, #10]
 80058b8:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3e7      	bcc.n	8005890 <eeprom_save_scanning_data+0x44>
	}
	if(PAGE_SIZE == 32)
	{
		uint8_t temp [64];

		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80058c6:	e029      	b.n	800591c <eeprom_save_scanning_data+0xd0>
		{
			memcpy(&temp, &_services_list[services_index], sizeof(dab_service_t));
 80058c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058cc:	2234      	movs	r2, #52	@ 0x34
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	18d1      	adds	r1, r2, r3
 80058d6:	f107 0314 	add.w	r3, r7, #20
 80058da:	2234      	movs	r2, #52	@ 0x34
 80058dc:	4618      	mov	r0, r3
 80058de:	f007 fdf5 	bl	800d4cc <memcpy>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2, &temp[0], 32);
 80058e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058e6:	330f      	adds	r3, #15
 80058e8:	019b      	lsls	r3, r3, #6
 80058ea:	4618      	mov	r0, r3
 80058ec:	f107 0314 	add.w	r3, r7, #20
 80058f0:	2220      	movs	r2, #32
 80058f2:	4619      	mov	r1, r3
 80058f4:	f7ff ff1e 	bl	8005734 <eeprom_write>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 80058f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058fc:	330f      	adds	r3, #15
 80058fe:	019b      	lsls	r3, r3, #6
 8005900:	3320      	adds	r3, #32
 8005902:	4618      	mov	r0, r3
 8005904:	f107 0314 	add.w	r3, r7, #20
 8005908:	3320      	adds	r3, #32
 800590a:	2214      	movs	r2, #20
 800590c:	4619      	mov	r1, r3
 800590e:	f7ff ff11 	bl	8005734 <eeprom_write>
		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8005912:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005916:	3301      	adds	r3, #1
 8005918:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800591c:	7afb      	ldrb	r3, [r7, #11]
 800591e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005922:	429a      	cmp	r2, r3
 8005924:	d3d0      	bcc.n	80058c8 <eeprom_save_scanning_data+0x7c>
		}
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 8005926:	2101      	movs	r1, #1
 8005928:	4804      	ldr	r0, [pc, #16]	@ (800593c <eeprom_save_scanning_data+0xf0>)
 800592a:	f7fe f877 	bl	8003a1c <send_debug_msg>
}
 800592e:	bf00      	nop
 8005930:	3758      	adds	r7, #88	@ 0x58
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	0800e824 	.word	0x0800e824
 800593c:	0800e840 	.word	0x0800e840

08005940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08c      	sub	sp, #48	@ 0x30
 8005944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005946:	f107 031c 	add.w	r3, r7, #28
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	605a      	str	r2, [r3, #4]
 8005950:	609a      	str	r2, [r3, #8]
 8005952:	60da      	str	r2, [r3, #12]
 8005954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005956:	2300      	movs	r3, #0
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	4b6c      	ldr	r3, [pc, #432]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	4a6b      	ldr	r2, [pc, #428]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 8005960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005964:	6313      	str	r3, [r2, #48]	@ 0x30
 8005966:	4b69      	ldr	r3, [pc, #420]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	4b65      	ldr	r3, [pc, #404]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	4a64      	ldr	r2, [pc, #400]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	6313      	str	r3, [r2, #48]	@ 0x30
 8005982:	4b62      	ldr	r3, [pc, #392]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	4b5e      	ldr	r3, [pc, #376]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	4a5d      	ldr	r2, [pc, #372]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 8005998:	f043 0304 	orr.w	r3, r3, #4
 800599c:	6313      	str	r3, [r2, #48]	@ 0x30
 800599e:	4b5b      	ldr	r3, [pc, #364]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	4b57      	ldr	r3, [pc, #348]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b2:	4a56      	ldr	r2, [pc, #344]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80059ba:	4b54      	ldr	r3, [pc, #336]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	4b50      	ldr	r3, [pc, #320]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	4a4f      	ldr	r2, [pc, #316]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059d0:	f043 0310 	orr.w	r3, r3, #16
 80059d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80059d6:	4b4d      	ldr	r3, [pc, #308]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	60bb      	str	r3, [r7, #8]
 80059e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	4b49      	ldr	r3, [pc, #292]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	4a48      	ldr	r2, [pc, #288]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059ec:	f043 0308 	orr.w	r3, r3, #8
 80059f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80059f2:	4b46      	ldr	r3, [pc, #280]	@ (8005b0c <MX_GPIO_Init+0x1cc>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	607b      	str	r3, [r7, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80059fe:	2200      	movs	r2, #0
 8005a00:	2130      	movs	r1, #48	@ 0x30
 8005a02:	4843      	ldr	r0, [pc, #268]	@ (8005b10 <MX_GPIO_Init+0x1d0>)
 8005a04:	f002 fb24 	bl	8008050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a0e:	4841      	ldr	r0, [pc, #260]	@ (8005b14 <MX_GPIO_Init+0x1d4>)
 8005a10:	f002 fb1e 	bl	8008050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8005a14:	2200      	movs	r2, #0
 8005a16:	f24f 7180 	movw	r1, #63360	@ 0xf780
 8005a1a:	483f      	ldr	r0, [pc, #252]	@ (8005b18 <MX_GPIO_Init+0x1d8>)
 8005a1c:	f002 fb18 	bl	8008050 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8005a20:	2200      	movs	r2, #0
 8005a22:	2128      	movs	r1, #40	@ 0x28
 8005a24:	483d      	ldr	r0, [pc, #244]	@ (8005b1c <MX_GPIO_Init+0x1dc>)
 8005a26:	f002 fb13 	bl	8008050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8005a36:	f107 031c 	add.w	r3, r7, #28
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4838      	ldr	r0, [pc, #224]	@ (8005b20 <MX_GPIO_Init+0x1e0>)
 8005a3e:	f002 f953 	bl	8007ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8005a42:	2330      	movs	r3, #48	@ 0x30
 8005a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a46:	2301      	movs	r3, #1
 8005a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a52:	f107 031c 	add.w	r3, r7, #28
 8005a56:	4619      	mov	r1, r3
 8005a58:	482d      	ldr	r0, [pc, #180]	@ (8005b10 <MX_GPIO_Init+0x1d0>)
 8005a5a:	f002 f945 	bl	8007ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8005a5e:	2311      	movs	r3, #17
 8005a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a62:	2300      	movs	r3, #0
 8005a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a6a:	f107 031c 	add.w	r3, r7, #28
 8005a6e:	4619      	mov	r1, r3
 8005a70:	482a      	ldr	r0, [pc, #168]	@ (8005b1c <MX_GPIO_Init+0x1dc>)
 8005a72:	f002 f939 	bl	8007ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8005a76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8005a88:	f107 031c 	add.w	r3, r7, #28
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4821      	ldr	r0, [pc, #132]	@ (8005b14 <MX_GPIO_Init+0x1d4>)
 8005a90:	f002 f92a 	bl	8007ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8005a94:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8005a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005aa6:	f107 031c 	add.w	r3, r7, #28
 8005aaa:	4619      	mov	r1, r3
 8005aac:	481a      	ldr	r0, [pc, #104]	@ (8005b18 <MX_GPIO_Init+0x1d8>)
 8005aae:	f002 f91b 	bl	8007ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005ab2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8005ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ac4:	f107 031c 	add.w	r3, r7, #28
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4813      	ldr	r0, [pc, #76]	@ (8005b18 <MX_GPIO_Init+0x1d8>)
 8005acc:	f002 f90c 	bl	8007ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005ad0:	2340      	movs	r3, #64	@ 0x40
 8005ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005adc:	f107 031c 	add.w	r3, r7, #28
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	480d      	ldr	r0, [pc, #52]	@ (8005b18 <MX_GPIO_Init+0x1d8>)
 8005ae4:	f002 f900 	bl	8007ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8005ae8:	2328      	movs	r3, #40	@ 0x28
 8005aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aec:	2301      	movs	r3, #1
 8005aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005af4:	2302      	movs	r3, #2
 8005af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af8:	f107 031c 	add.w	r3, r7, #28
 8005afc:	4619      	mov	r1, r3
 8005afe:	4807      	ldr	r0, [pc, #28]	@ (8005b1c <MX_GPIO_Init+0x1dc>)
 8005b00:	f002 f8f2 	bl	8007ce8 <HAL_GPIO_Init>

}
 8005b04:	bf00      	nop
 8005b06:	3730      	adds	r7, #48	@ 0x30
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	40020800 	.word	0x40020800
 8005b14:	40021000 	.word	0x40021000
 8005b18:	40020c00 	.word	0x40020c00
 8005b1c:	40020400 	.word	0x40020400
 8005b20:	40020000 	.word	0x40020000

08005b24 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b28:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b2a:	4a13      	ldr	r2, [pc, #76]	@ (8005b78 <MX_I2C1_Init+0x54>)
 8005b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005b2e:	4b11      	ldr	r3, [pc, #68]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b30:	4a12      	ldr	r2, [pc, #72]	@ (8005b7c <MX_I2C1_Init+0x58>)
 8005b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b34:	4b0f      	ldr	r3, [pc, #60]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b40:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005b46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b48:	4b0a      	ldr	r3, [pc, #40]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b4e:	4b09      	ldr	r3, [pc, #36]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b54:	4b07      	ldr	r3, [pc, #28]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b5a:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b60:	4804      	ldr	r0, [pc, #16]	@ (8005b74 <MX_I2C1_Init+0x50>)
 8005b62:	f002 fa8f 	bl	8008084 <HAL_I2C_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005b6c:	f000 f982 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005b70:	bf00      	nop
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20006e54 	.word	0x20006e54
 8005b78:	40005400 	.word	0x40005400
 8005b7c:	000186a0 	.word	0x000186a0

08005b80 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005b84:	4b12      	ldr	r3, [pc, #72]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005b86:	4a13      	ldr	r2, [pc, #76]	@ (8005bd4 <MX_I2C3_Init+0x54>)
 8005b88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005b8a:	4b11      	ldr	r3, [pc, #68]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005b8c:	4a12      	ldr	r2, [pc, #72]	@ (8005bd8 <MX_I2C3_Init+0x58>)
 8005b8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b90:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005b96:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005b9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005ba2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005baa:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bb0:	4b07      	ldr	r3, [pc, #28]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005bb6:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005bbc:	4804      	ldr	r0, [pc, #16]	@ (8005bd0 <MX_I2C3_Init+0x50>)
 8005bbe:	f002 fa61 	bl	8008084 <HAL_I2C_Init>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005bc8:	f000 f954 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005bcc:	bf00      	nop
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20006ea8 	.word	0x20006ea8
 8005bd4:	40005c00 	.word	0x40005c00
 8005bd8:	000186a0 	.word	0x000186a0

08005bdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08c      	sub	sp, #48	@ 0x30
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005be4:	f107 031c 	add.w	r3, r7, #28
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	60da      	str	r2, [r3, #12]
 8005bf2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8005d24 <HAL_I2C_MspInit+0x148>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d12c      	bne.n	8005c58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	4b49      	ldr	r3, [pc, #292]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	4a48      	ldr	r2, [pc, #288]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c08:	f043 0302 	orr.w	r3, r3, #2
 8005c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c0e:	4b46      	ldr	r3, [pc, #280]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005c1a:	23c0      	movs	r3, #192	@ 0xc0
 8005c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c1e:	2312      	movs	r3, #18
 8005c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c26:	2303      	movs	r3, #3
 8005c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c2e:	f107 031c 	add.w	r3, r7, #28
 8005c32:	4619      	mov	r1, r3
 8005c34:	483d      	ldr	r0, [pc, #244]	@ (8005d2c <HAL_I2C_MspInit+0x150>)
 8005c36:	f002 f857 	bl	8007ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	4a39      	ldr	r2, [pc, #228]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c4a:	4b37      	ldr	r3, [pc, #220]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005c56:	e060      	b.n	8005d1a <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a34      	ldr	r2, [pc, #208]	@ (8005d30 <HAL_I2C_MspInit+0x154>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d15b      	bne.n	8005d1a <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	4b30      	ldr	r3, [pc, #192]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c6c:	f043 0304 	orr.w	r3, r3, #4
 8005c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c72:	4b2d      	ldr	r3, [pc, #180]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	4b29      	ldr	r3, [pc, #164]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	4a28      	ldr	r2, [pc, #160]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c8e:	4b26      	ldr	r3, [pc, #152]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8005c9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ca0:	2312      	movs	r3, #18
 8005ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005cac:	2304      	movs	r3, #4
 8005cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005cb0:	f107 031c 	add.w	r3, r7, #28
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	481f      	ldr	r0, [pc, #124]	@ (8005d34 <HAL_I2C_MspInit+0x158>)
 8005cb8:	f002 f816 	bl	8007ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8005cbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cc2:	2312      	movs	r3, #18
 8005cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005cce:	2304      	movs	r3, #4
 8005cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8005cd2:	f107 031c 	add.w	r3, r7, #28
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4817      	ldr	r0, [pc, #92]	@ (8005d38 <HAL_I2C_MspInit+0x15c>)
 8005cda:	f002 f805 	bl	8007ce8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	4b11      	ldr	r3, [pc, #68]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce6:	4a10      	ldr	r2, [pc, #64]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005ce8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cee:	4b0e      	ldr	r3, [pc, #56]	@ (8005d28 <HAL_I2C_MspInit+0x14c>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	2048      	movs	r0, #72	@ 0x48
 8005d00:	f001 fca1 	bl	8007646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005d04:	2048      	movs	r0, #72	@ 0x48
 8005d06:	f001 fcba 	bl	800767e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	2049      	movs	r0, #73	@ 0x49
 8005d10:	f001 fc99 	bl	8007646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005d14:	2049      	movs	r0, #73	@ 0x49
 8005d16:	f001 fcb2 	bl	800767e <HAL_NVIC_EnableIRQ>
}
 8005d1a:	bf00      	nop
 8005d1c:	3730      	adds	r7, #48	@ 0x30
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40005400 	.word	0x40005400
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40020400 	.word	0x40020400
 8005d30:	40005c00 	.word	0x40005c00
 8005d34:	40020800 	.word	0x40020800
 8005d38:	40020000 	.word	0x40020000

08005d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d40:	f001 fb10 	bl	8007364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d44:	f000 f82c 	bl	8005da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d48:	f7ff fdfa 	bl	8005940 <MX_GPIO_Init>
  MX_DMA_Init();
 8005d4c:	f7ff fca4 	bl	8005698 <MX_DMA_Init>
  MX_I2C1_Init();
 8005d50:	f7ff fee8 	bl	8005b24 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005d54:	f7ff ff14 	bl	8005b80 <MX_I2C3_Init>
  MX_SPI1_Init();
 8005d58:	f000 f892 	bl	8005e80 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005d5c:	f000 f8c6 	bl	8005eec <MX_SPI2_Init>
  MX_TIM3_Init();
 8005d60:	f000 fe8a 	bl	8006a78 <MX_TIM3_Init>
  MX_UART5_Init();
 8005d64:	f001 f9e0 	bl	8007128 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005d68:	f001 fa08 	bl	800717c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8005d6c:	f000 fede 	bl	8006b2c <MX_TIM10_Init>
  MX_TIM11_Init();
 8005d70:	f000 ff00 	bl	8006b74 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8005d74:	2101      	movs	r1, #1
 8005d76:	4808      	ldr	r0, [pc, #32]	@ (8005d98 <main+0x5c>)
 8005d78:	f7fd fe50 	bl	8003a1c <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8005d7c:	4807      	ldr	r0, [pc, #28]	@ (8005d9c <main+0x60>)
 8005d7e:	f006 f9c9 	bl	800c114 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8005d82:	f7fa fbc9 	bl	8000518 <ILI9341_Init>
  Display_booting_screen();
 8005d86:	f7fd fe83 	bl	8003a90 <Display_booting_screen>

  //eeprom_show();

  //HAL_Delay(50000);

  Si468x_dab_init();
 8005d8a:	f7fb f985 	bl	8001098 <Si468x_dab_init>
  restore_from_eeprom();
 8005d8e:	f7fd faa3 	bl	80032d8 <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8005d92:	f000 f999 	bl	80060c8 <state_machine>
 8005d96:	e7fc      	b.n	8005d92 <main+0x56>
 8005d98:	0800eba0 	.word	0x0800eba0
 8005d9c:	20007100 	.word	0x20007100

08005da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b094      	sub	sp, #80	@ 0x50
 8005da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005da6:	f107 0320 	add.w	r3, r7, #32
 8005daa:	2230      	movs	r2, #48	@ 0x30
 8005dac:	2100      	movs	r1, #0
 8005dae:	4618      	mov	r0, r3
 8005db0:	f007 fb60 	bl	800d474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	4b28      	ldr	r3, [pc, #160]	@ (8005e6c <SystemClock_Config+0xcc>)
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	4a27      	ldr	r2, [pc, #156]	@ (8005e6c <SystemClock_Config+0xcc>)
 8005dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dd4:	4b25      	ldr	r3, [pc, #148]	@ (8005e6c <SystemClock_Config+0xcc>)
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005de0:	2300      	movs	r3, #0
 8005de2:	607b      	str	r3, [r7, #4]
 8005de4:	4b22      	ldr	r3, [pc, #136]	@ (8005e70 <SystemClock_Config+0xd0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a21      	ldr	r2, [pc, #132]	@ (8005e70 <SystemClock_Config+0xd0>)
 8005dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	4b1f      	ldr	r3, [pc, #124]	@ (8005e70 <SystemClock_Config+0xd0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e06:	2302      	movs	r3, #2
 8005e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005e10:	2304      	movs	r3, #4
 8005e12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8005e14:	23f0      	movs	r3, #240	@ 0xf0
 8005e16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e20:	f107 0320 	add.w	r3, r7, #32
 8005e24:	4618      	mov	r0, r3
 8005e26:	f004 fdc7 	bl	800a9b8 <HAL_RCC_OscConfig>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005e30:	f000 f820 	bl	8005e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e34:	230f      	movs	r3, #15
 8005e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e40:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005e4c:	f107 030c 	add.w	r3, r7, #12
 8005e50:	2105      	movs	r1, #5
 8005e52:	4618      	mov	r0, r3
 8005e54:	f005 f828 	bl	800aea8 <HAL_RCC_ClockConfig>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005e5e:	f000 f809 	bl	8005e74 <Error_Handler>
  }
}
 8005e62:	bf00      	nop
 8005e64:	3750      	adds	r7, #80	@ 0x50
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	40007000 	.word	0x40007000

08005e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e78:	b672      	cpsid	i
}
 8005e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <Error_Handler+0x8>

08005e80 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005e84:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005e86:	4a18      	ldr	r2, [pc, #96]	@ (8005ee8 <MX_SPI1_Init+0x68>)
 8005e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e8a:	4b16      	ldr	r3, [pc, #88]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005e8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e92:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e98:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ebe:	4b09      	ldr	r3, [pc, #36]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ec4:	4b07      	ldr	r3, [pc, #28]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005ecc:	220a      	movs	r2, #10
 8005ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005ed0:	4804      	ldr	r0, [pc, #16]	@ (8005ee4 <MX_SPI1_Init+0x64>)
 8005ed2:	f005 fa09 	bl	800b2e8 <HAL_SPI_Init>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005edc:	f7ff ffca 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ee0:	bf00      	nop
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20006efc 	.word	0x20006efc
 8005ee8:	40013000 	.word	0x40013000

08005eec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005ef0:	4b17      	ldr	r3, [pc, #92]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005ef2:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <MX_SPI2_Init+0x68>)
 8005ef4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005ef6:	4b16      	ldr	r3, [pc, #88]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005ef8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005efc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005efe:	4b14      	ldr	r3, [pc, #80]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005f04:	4b12      	ldr	r3, [pc, #72]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f0a:	4b11      	ldr	r3, [pc, #68]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005f10:	4b0f      	ldr	r3, [pc, #60]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005f16:	4b0e      	ldr	r3, [pc, #56]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f24:	4b0a      	ldr	r3, [pc, #40]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f2a:	4b09      	ldr	r3, [pc, #36]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f30:	4b07      	ldr	r3, [pc, #28]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005f36:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f38:	220a      	movs	r2, #10
 8005f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005f3c:	4804      	ldr	r0, [pc, #16]	@ (8005f50 <MX_SPI2_Init+0x64>)
 8005f3e:	f005 f9d3 	bl	800b2e8 <HAL_SPI_Init>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005f48:	f7ff ff94 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005f4c:	bf00      	nop
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20006f54 	.word	0x20006f54
 8005f54:	40003800 	.word	0x40003800

08005f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	@ 0x30
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f60:	f107 031c 	add.w	r3, r7, #28
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a4d      	ldr	r2, [pc, #308]	@ (80060ac <HAL_SPI_MspInit+0x154>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d12c      	bne.n	8005fd4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	4a4b      	ldr	r2, [pc, #300]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005f84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f8a:	4b49      	ldr	r3, [pc, #292]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	4b45      	ldr	r3, [pc, #276]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9e:	4a44      	ldr	r2, [pc, #272]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fa6:	4b42      	ldr	r3, [pc, #264]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8005fb2:	23e0      	movs	r3, #224	@ 0xe0
 8005fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005fc2:	2305      	movs	r3, #5
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc6:	f107 031c 	add.w	r3, r7, #28
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4839      	ldr	r0, [pc, #228]	@ (80060b4 <HAL_SPI_MspInit+0x15c>)
 8005fce:	f001 fe8b 	bl	8007ce8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005fd2:	e066      	b.n	80060a2 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a37      	ldr	r2, [pc, #220]	@ (80060b8 <HAL_SPI_MspInit+0x160>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d161      	bne.n	80060a2 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	4b33      	ldr	r3, [pc, #204]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	4a32      	ldr	r2, [pc, #200]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fee:	4b30      	ldr	r3, [pc, #192]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	4a2b      	ldr	r2, [pc, #172]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 8006004:	f043 0302 	orr.w	r3, r3, #2
 8006008:	6313      	str	r3, [r2, #48]	@ 0x30
 800600a:	4b29      	ldr	r3, [pc, #164]	@ (80060b0 <HAL_SPI_MspInit+0x158>)
 800600c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8006016:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800601a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601c:	2302      	movs	r3, #2
 800601e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006020:	2300      	movs	r3, #0
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006024:	2303      	movs	r3, #3
 8006026:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006028:	2305      	movs	r3, #5
 800602a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800602c:	f107 031c 	add.w	r3, r7, #28
 8006030:	4619      	mov	r1, r3
 8006032:	4822      	ldr	r0, [pc, #136]	@ (80060bc <HAL_SPI_MspInit+0x164>)
 8006034:	f001 fe58 	bl	8007ce8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006038:	4b21      	ldr	r3, [pc, #132]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 800603a:	4a22      	ldr	r2, [pc, #136]	@ (80060c4 <HAL_SPI_MspInit+0x16c>)
 800603c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800603e:	4b20      	ldr	r3, [pc, #128]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006044:	4b1e      	ldr	r3, [pc, #120]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 8006046:	2240      	movs	r2, #64	@ 0x40
 8006048:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800604a:	4b1d      	ldr	r3, [pc, #116]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 800604c:	2200      	movs	r2, #0
 800604e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006050:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 8006052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006056:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006058:	4b19      	ldr	r3, [pc, #100]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 800605a:	2200      	movs	r2, #0
 800605c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800605e:	4b18      	ldr	r3, [pc, #96]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 8006060:	2200      	movs	r2, #0
 8006062:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006064:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 8006066:	2200      	movs	r2, #0
 8006068:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800606a:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 800606c:	2200      	movs	r2, #0
 800606e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006070:	4b13      	ldr	r3, [pc, #76]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 8006072:	2200      	movs	r2, #0
 8006074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006076:	4812      	ldr	r0, [pc, #72]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 8006078:	f001 fb1c 	bl	80076b4 <HAL_DMA_Init>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8006082:	f7ff fef7 	bl	8005e74 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a0d      	ldr	r2, [pc, #52]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 800608a:	649a      	str	r2, [r3, #72]	@ 0x48
 800608c:	4a0c      	ldr	r2, [pc, #48]	@ (80060c0 <HAL_SPI_MspInit+0x168>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006092:	2200      	movs	r2, #0
 8006094:	2100      	movs	r1, #0
 8006096:	2024      	movs	r0, #36	@ 0x24
 8006098:	f001 fad5 	bl	8007646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800609c:	2024      	movs	r0, #36	@ 0x24
 800609e:	f001 faee 	bl	800767e <HAL_NVIC_EnableIRQ>
}
 80060a2:	bf00      	nop
 80060a4:	3730      	adds	r7, #48	@ 0x30
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40013000 	.word	0x40013000
 80060b0:	40023800 	.word	0x40023800
 80060b4:	40020000 	.word	0x40020000
 80060b8:	40003800 	.word	0x40003800
 80060bc:	40020400 	.word	0x40020400
 80060c0:	20006fac 	.word	0x20006fac
 80060c4:	40026070 	.word	0x40026070

080060c8 <state_machine>:
uint8_t scan_complete_flag = 0;

uint16_t audio_info_timeout;

void state_machine()
{
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	b097      	sub	sp, #92	@ 0x5c
 80060cc:	af06      	add	r7, sp, #24
	if(state_change_done)
 80060ce:	4b64      	ldr	r3, [pc, #400]	@ (8006260 <state_machine+0x198>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 80060d6:	f000 fe13 	bl	8006d00 <Touch_read>
 80060da:	4603      	mov	r3, r0
 80060dc:	4a61      	ldr	r2, [pc, #388]	@ (8006264 <state_machine+0x19c>)
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	e005      	b.n	80060ee <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 80060e2:	4b60      	ldr	r3, [pc, #384]	@ (8006264 <state_machine+0x19c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 80060e8:	4b5e      	ldr	r3, [pc, #376]	@ (8006264 <state_machine+0x19c>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 80060ee:	4c5e      	ldr	r4, [pc, #376]	@ (8006268 <state_machine+0x1a0>)
 80060f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fd fc75 	bl	80039e4 <get_dab_management>
 80060fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80060fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 8006104:	f7fd fc80 	bl	8003a08 <get_dls_label>
 8006108:	4603      	mov	r3, r0
 800610a:	4a58      	ldr	r2, [pc, #352]	@ (800626c <state_machine+0x1a4>)
 800610c:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 800610e:	f7fc ffd3 	bl	80030b8 <Si468x_dab_get_time>


	switch(system_state)
 8006112:	4b57      	ldr	r3, [pc, #348]	@ (8006270 <state_machine+0x1a8>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b04      	cmp	r3, #4
 8006118:	f200 83e0 	bhi.w	80068dc <state_machine+0x814>
 800611c:	a201      	add	r2, pc, #4	@ (adr r2, 8006124 <state_machine+0x5c>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006139 	.word	0x08006139
 8006128:	08006289 	.word	0x08006289
 800612c:	080066f1 	.word	0x080066f1
 8006130:	08006621 	.word	0x08006621
 8006134:	08006765 	.word	0x08006765
	{
	case main_screen:

		if(!state_change_done)
 8006138:	4b49      	ldr	r3, [pc, #292]	@ (8006260 <state_machine+0x198>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d14e      	bne.n	80061de <state_machine+0x116>
		{
			if(!dab_management_to_display.total_services)
 8006140:	4b49      	ldr	r3, [pc, #292]	@ (8006268 <state_machine+0x1a0>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d103      	bne.n	8006150 <state_machine+0x88>
			{
				playing_state = not_playing;
 8006148:	4b4a      	ldr	r3, [pc, #296]	@ (8006274 <state_machine+0x1ac>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e028      	b.n	80061a2 <state_machine+0xda>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 8006150:	f7fd fc34 	bl	80039bc <get_dab_service_list>
 8006154:	4603      	mov	r3, r0
 8006156:	4a48      	ldr	r2, [pc, #288]	@ (8006278 <state_machine+0x1b0>)
 8006158:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 800615a:	f7fd fc39 	bl	80039d0 <get_dab_ensemble_list>
 800615e:	4603      	mov	r3, r0
 8006160:	4a46      	ldr	r2, [pc, #280]	@ (800627c <state_machine+0x1b4>)
 8006162:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 8006164:	4b46      	ldr	r3, [pc, #280]	@ (8006280 <state_machine+0x1b8>)
 8006166:	2232      	movs	r2, #50	@ 0x32
 8006168:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 800616a:	e014      	b.n	8006196 <state_machine+0xce>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 800616c:	4c45      	ldr	r4, [pc, #276]	@ (8006284 <state_machine+0x1bc>)
 800616e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006172:	4618      	mov	r0, r3
 8006174:	f7fc fc94 	bl	8002aa0 <Si468x_dab_get_audio_info>
 8006178:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800617c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800617e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 8006182:	4b3f      	ldr	r3, [pc, #252]	@ (8006280 <state_machine+0x1b8>)
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	4b3d      	ldr	r3, [pc, #244]	@ (8006280 <state_machine+0x1b8>)
 800618c:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 800618e:	4b3c      	ldr	r3, [pc, #240]	@ (8006280 <state_machine+0x1b8>)
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <state_machine+0xd8>
				while(!dab_audio_info_to_display.audio_sample_rate)
 8006196:	4b3b      	ldr	r3, [pc, #236]	@ (8006284 <state_machine+0x1bc>)
 8006198:	885b      	ldrh	r3, [r3, #2]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0e6      	beq.n	800616c <state_machine+0xa4>
 800619e:	e000      	b.n	80061a2 <state_machine+0xda>
					{
						break;
 80061a0:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 80061a2:	f7fd fce7 	bl	8003b74 <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 80061a6:	4b34      	ldr	r3, [pc, #208]	@ (8006278 <state_machine+0x1b0>)
 80061a8:	681e      	ldr	r6, [r3, #0]
 80061aa:	4b34      	ldr	r3, [pc, #208]	@ (800627c <state_machine+0x1b4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	607b      	str	r3, [r7, #4]
 80061b0:	4c2d      	ldr	r4, [pc, #180]	@ (8006268 <state_machine+0x1a0>)
 80061b2:	4b34      	ldr	r3, [pc, #208]	@ (8006284 <state_machine+0x1bc>)
 80061b4:	ad02      	add	r5, sp, #8
 80061b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80061bc:	466a      	mov	r2, sp
 80061be:	f104 0308 	add.w	r3, r4, #8
 80061c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80061ca:	e894 000c 	ldmia.w	r4, {r2, r3}
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7fd fd5d 	bl	8003c90 <Display_main_screen_data>
			state_change_done = 1;
 80061d6:	4b22      	ldr	r3, [pc, #136]	@ (8006260 <state_machine+0x198>)
 80061d8:	2201      	movs	r2, #1
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e00d      	b.n	80061fa <state_machine+0x132>
		}

		else
		{
			if(playing_state == playing)
 80061de:	4b25      	ldr	r3, [pc, #148]	@ (8006274 <state_machine+0x1ac>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d107      	bne.n	80061f6 <state_machine+0x12e>
			{
				Si468x_dab_get_digital_service_data();
 80061e6:	f7fc fdef 	bl	8002dc8 <Si468x_dab_get_digital_service_data>
				Display_main_screen_dls(dls_label_to_display);
 80061ea:	4b20      	ldr	r3, [pc, #128]	@ (800626c <state_machine+0x1a4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd fe88 	bl	8003f04 <Display_main_screen_dls>
 80061f4:	e001      	b.n	80061fa <state_machine+0x132>
			}
			else
			{
				Display_main_screen_empty();
 80061f6:	f7fd fec1 	bl	8003f7c <Display_main_screen_empty>
			}
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80061fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006264 <state_machine+0x19c>)
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d911      	bls.n	8006226 <state_machine+0x15e>
 8006202:	4b18      	ldr	r3, [pc, #96]	@ (8006264 <state_machine+0x19c>)
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	2b9c      	cmp	r3, #156	@ 0x9c
 8006208:	d80d      	bhi.n	8006226 <state_machine+0x15e>
 800620a:	4b16      	ldr	r3, [pc, #88]	@ (8006264 <state_machine+0x19c>)
 800620c:	885b      	ldrh	r3, [r3, #2]
 800620e:	2bc3      	cmp	r3, #195	@ 0xc3
 8006210:	d909      	bls.n	8006226 <state_machine+0x15e>
 8006212:	4b14      	ldr	r3, [pc, #80]	@ (8006264 <state_machine+0x19c>)
 8006214:	885b      	ldrh	r3, [r3, #2]
 8006216:	2bea      	cmp	r3, #234	@ 0xea
 8006218:	d805      	bhi.n	8006226 <state_machine+0x15e>
		{
			state_change_done = 0;
 800621a:	4b11      	ldr	r3, [pc, #68]	@ (8006260 <state_machine+0x198>)
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006220:	4b13      	ldr	r3, [pc, #76]	@ (8006270 <state_machine+0x1a8>)
 8006222:	2204      	movs	r2, #4
 8006224:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006226:	4b0f      	ldr	r3, [pc, #60]	@ (8006264 <state_machine+0x19c>)
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	2ba3      	cmp	r3, #163	@ 0xa3
 800622c:	f240 8358 	bls.w	80068e0 <state_machine+0x818>
 8006230:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <state_machine+0x19c>)
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006238:	f200 8352 	bhi.w	80068e0 <state_machine+0x818>
 800623c:	4b09      	ldr	r3, [pc, #36]	@ (8006264 <state_machine+0x19c>)
 800623e:	885b      	ldrh	r3, [r3, #2]
 8006240:	2bc3      	cmp	r3, #195	@ 0xc3
 8006242:	f240 834d 	bls.w	80068e0 <state_machine+0x818>
 8006246:	4b07      	ldr	r3, [pc, #28]	@ (8006264 <state_machine+0x19c>)
 8006248:	885b      	ldrh	r3, [r3, #2]
 800624a:	2bea      	cmp	r3, #234	@ 0xea
 800624c:	f200 8348 	bhi.w	80068e0 <state_machine+0x818>
		{
			state_change_done = 0;
 8006250:	4b03      	ldr	r3, [pc, #12]	@ (8006260 <state_machine+0x198>)
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <state_machine+0x1a8>)
 8006258:	2201      	movs	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
		}

		break;
 800625c:	e340      	b.n	80068e0 <state_machine+0x818>
 800625e:	bf00      	nop
 8006260:	2000700d 	.word	0x2000700d
 8006264:	20007014 	.word	0x20007014
 8006268:	20007040 	.word	0x20007040
 800626c:	20007068 	.word	0x20007068
 8006270:	2000700c 	.word	0x2000700c
 8006274:	20000150 	.word	0x20000150
 8006278:	20007050 	.word	0x20007050
 800627c:	20007054 	.word	0x20007054
 8006280:	2000706e 	.word	0x2000706e
 8006284:	20007058 	.word	0x20007058

	case services_list_screen:
		if(!state_change_done)
 8006288:	4b7d      	ldr	r3, [pc, #500]	@ (8006480 <state_machine+0x3b8>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d114      	bne.n	80062ba <state_machine+0x1f2>
		{
			services_list_to_display = get_dab_service_list();
 8006290:	f7fd fb94 	bl	80039bc <get_dab_service_list>
 8006294:	4603      	mov	r3, r0
 8006296:	4a7b      	ldr	r2, [pc, #492]	@ (8006484 <state_machine+0x3bc>)
 8006298:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 800629a:	f7fd fed5 	bl	8004048 <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800629e:	4b7a      	ldr	r3, [pc, #488]	@ (8006488 <state_machine+0x3c0>)
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	4b78      	ldr	r3, [pc, #480]	@ (8006484 <state_machine+0x3bc>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b79      	ldr	r3, [pc, #484]	@ (800648c <state_machine+0x3c4>)
 80062a8:	9201      	str	r2, [sp, #4]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	9200      	str	r2, [sp, #0]
 80062ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062b0:	f7fd ff8e 	bl	80041d0 <Display_stations_list_data>
			state_change_done = 1;
 80062b4:	4b72      	ldr	r3, [pc, #456]	@ (8006480 <state_machine+0x3b8>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80062ba:	4b75      	ldr	r3, [pc, #468]	@ (8006490 <state_machine+0x3c8>)
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	2b05      	cmp	r3, #5
 80062c0:	d911      	bls.n	80062e6 <state_machine+0x21e>
 80062c2:	4b73      	ldr	r3, [pc, #460]	@ (8006490 <state_machine+0x3c8>)
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	2b9c      	cmp	r3, #156	@ 0x9c
 80062c8:	d80d      	bhi.n	80062e6 <state_machine+0x21e>
 80062ca:	4b71      	ldr	r3, [pc, #452]	@ (8006490 <state_machine+0x3c8>)
 80062cc:	885b      	ldrh	r3, [r3, #2]
 80062ce:	2bc3      	cmp	r3, #195	@ 0xc3
 80062d0:	d909      	bls.n	80062e6 <state_machine+0x21e>
 80062d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006490 <state_machine+0x3c8>)
 80062d4:	885b      	ldrh	r3, [r3, #2]
 80062d6:	2bea      	cmp	r3, #234	@ 0xea
 80062d8:	d805      	bhi.n	80062e6 <state_machine+0x21e>
		{
			state_change_done = 0;
 80062da:	4b69      	ldr	r3, [pc, #420]	@ (8006480 <state_machine+0x3b8>)
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 80062e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006494 <state_machine+0x3cc>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80062e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006490 <state_machine+0x3c8>)
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	2ba3      	cmp	r3, #163	@ 0xa3
 80062ec:	d912      	bls.n	8006314 <state_machine+0x24c>
 80062ee:	4b68      	ldr	r3, [pc, #416]	@ (8006490 <state_machine+0x3c8>)
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80062f6:	d80d      	bhi.n	8006314 <state_machine+0x24c>
 80062f8:	4b65      	ldr	r3, [pc, #404]	@ (8006490 <state_machine+0x3c8>)
 80062fa:	885b      	ldrh	r3, [r3, #2]
 80062fc:	2bc3      	cmp	r3, #195	@ 0xc3
 80062fe:	d909      	bls.n	8006314 <state_machine+0x24c>
 8006300:	4b63      	ldr	r3, [pc, #396]	@ (8006490 <state_machine+0x3c8>)
 8006302:	885b      	ldrh	r3, [r3, #2]
 8006304:	2bea      	cmp	r3, #234	@ 0xea
 8006306:	d805      	bhi.n	8006314 <state_machine+0x24c>
		{
			state_change_done = 0;
 8006308:	4b5d      	ldr	r3, [pc, #372]	@ (8006480 <state_machine+0x3b8>)
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 800630e:	4b61      	ldr	r3, [pc, #388]	@ (8006494 <state_machine+0x3cc>)
 8006310:	2203      	movs	r2, #3
 8006312:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8006314:	4b5e      	ldr	r3, [pc, #376]	@ (8006490 <state_machine+0x3c8>)
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 800631c:	d930      	bls.n	8006380 <state_machine+0x2b8>
 800631e:	4b5c      	ldr	r3, [pc, #368]	@ (8006490 <state_machine+0x3c8>)
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006326:	d82b      	bhi.n	8006380 <state_machine+0x2b8>
 8006328:	4b59      	ldr	r3, [pc, #356]	@ (8006490 <state_machine+0x3c8>)
 800632a:	885b      	ldrh	r3, [r3, #2]
 800632c:	2b14      	cmp	r3, #20
 800632e:	d927      	bls.n	8006380 <state_machine+0x2b8>
 8006330:	4b57      	ldr	r3, [pc, #348]	@ (8006490 <state_machine+0x3c8>)
 8006332:	885b      	ldrh	r3, [r3, #2]
 8006334:	2b65      	cmp	r3, #101	@ 0x65
 8006336:	d823      	bhi.n	8006380 <state_machine+0x2b8>
		{
			if(dab_management_to_display.total_services)
 8006338:	4b54      	ldr	r3, [pc, #336]	@ (800648c <state_machine+0x3c4>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01f      	beq.n	8006380 <state_machine+0x2b8>
			{
				srv_list_start_index--;
 8006340:	4b51      	ldr	r3, [pc, #324]	@ (8006488 <state_machine+0x3c0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3b01      	subs	r3, #1
 8006346:	4a50      	ldr	r2, [pc, #320]	@ (8006488 <state_machine+0x3c0>)
 8006348:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 800634a:	4b50      	ldr	r3, [pc, #320]	@ (800648c <state_machine+0x3c4>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	4b4d      	ldr	r3, [pc, #308]	@ (8006488 <state_machine+0x3c0>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	db03      	blt.n	8006360 <state_machine+0x298>
 8006358:	4b4b      	ldr	r3, [pc, #300]	@ (8006488 <state_machine+0x3c0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	da04      	bge.n	800636a <state_machine+0x2a2>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 8006360:	4b4a      	ldr	r3, [pc, #296]	@ (800648c <state_machine+0x3c4>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	3b01      	subs	r3, #1
 8006366:	4a48      	ldr	r2, [pc, #288]	@ (8006488 <state_machine+0x3c0>)
 8006368:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800636a:	4b47      	ldr	r3, [pc, #284]	@ (8006488 <state_machine+0x3c0>)
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	4b45      	ldr	r3, [pc, #276]	@ (8006484 <state_machine+0x3bc>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b46      	ldr	r3, [pc, #280]	@ (800648c <state_machine+0x3c4>)
 8006374:	9201      	str	r2, [sp, #4]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	9200      	str	r2, [sp, #0]
 800637a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800637c:	f7fd ff28 	bl	80041d0 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 8006380:	4b43      	ldr	r3, [pc, #268]	@ (8006490 <state_machine+0x3c8>)
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8006388:	d92a      	bls.n	80063e0 <state_machine+0x318>
 800638a:	4b41      	ldr	r3, [pc, #260]	@ (8006490 <state_machine+0x3c8>)
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006392:	d825      	bhi.n	80063e0 <state_machine+0x318>
 8006394:	4b3e      	ldr	r3, [pc, #248]	@ (8006490 <state_machine+0x3c8>)
 8006396:	885b      	ldrh	r3, [r3, #2]
 8006398:	2b6c      	cmp	r3, #108	@ 0x6c
 800639a:	d921      	bls.n	80063e0 <state_machine+0x318>
 800639c:	4b3c      	ldr	r3, [pc, #240]	@ (8006490 <state_machine+0x3c8>)
 800639e:	885b      	ldrh	r3, [r3, #2]
 80063a0:	2bbd      	cmp	r3, #189	@ 0xbd
 80063a2:	d81d      	bhi.n	80063e0 <state_machine+0x318>
		{
			if(dab_management_to_display.total_services)
 80063a4:	4b39      	ldr	r3, [pc, #228]	@ (800648c <state_machine+0x3c4>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d019      	beq.n	80063e0 <state_machine+0x318>
			{
				srv_list_start_index++;
 80063ac:	4b36      	ldr	r3, [pc, #216]	@ (8006488 <state_machine+0x3c0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	4a35      	ldr	r2, [pc, #212]	@ (8006488 <state_machine+0x3c0>)
 80063b4:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 80063b6:	4b35      	ldr	r3, [pc, #212]	@ (800648c <state_machine+0x3c4>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	4b32      	ldr	r3, [pc, #200]	@ (8006488 <state_machine+0x3c0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	dc02      	bgt.n	80063ca <state_machine+0x302>
				{
					srv_list_start_index = 0;
 80063c4:	4b30      	ldr	r3, [pc, #192]	@ (8006488 <state_machine+0x3c0>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80063ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006488 <state_machine+0x3c0>)
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006484 <state_machine+0x3bc>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b2e      	ldr	r3, [pc, #184]	@ (800648c <state_machine+0x3c4>)
 80063d4:	9201      	str	r2, [sp, #4]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	9200      	str	r2, [sp, #0]
 80063da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063dc:	f7fd fef8 	bl	80041d0 <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 80063e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006490 <state_machine+0x3c8>)
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	2b05      	cmp	r3, #5
 80063e6:	d91f      	bls.n	8006428 <state_machine+0x360>
 80063e8:	4b29      	ldr	r3, [pc, #164]	@ (8006490 <state_machine+0x3c8>)
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80063f0:	d81a      	bhi.n	8006428 <state_machine+0x360>
 80063f2:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <state_machine+0x3c8>)
 80063f4:	885b      	ldrh	r3, [r3, #2]
 80063f6:	2b14      	cmp	r3, #20
 80063f8:	d916      	bls.n	8006428 <state_machine+0x360>
 80063fa:	4b25      	ldr	r3, [pc, #148]	@ (8006490 <state_machine+0x3c8>)
 80063fc:	885b      	ldrh	r3, [r3, #2]
 80063fe:	2b31      	cmp	r3, #49	@ 0x31
 8006400:	d812      	bhi.n	8006428 <state_machine+0x360>
		{
			if(dab_management_to_display.total_services)
 8006402:	4b22      	ldr	r3, [pc, #136]	@ (800648c <state_machine+0x3c4>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00e      	beq.n	8006428 <state_machine+0x360>
			{
				state_change_done = 0;
 800640a:	4b1d      	ldr	r3, [pc, #116]	@ (8006480 <state_machine+0x3b8>)
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 8006410:	4b1d      	ldr	r3, [pc, #116]	@ (8006488 <state_machine+0x3c0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	4618      	mov	r0, r3
 8006418:	f7fc fec8 	bl	80031ac <play_station>
				playing_state = playing;
 800641c:	4b1e      	ldr	r3, [pc, #120]	@ (8006498 <state_machine+0x3d0>)
 800641e:	2201      	movs	r2, #1
 8006420:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006422:	4b1c      	ldr	r3, [pc, #112]	@ (8006494 <state_machine+0x3cc>)
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 8006428:	4b19      	ldr	r3, [pc, #100]	@ (8006490 <state_machine+0x3c8>)
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	2b05      	cmp	r3, #5
 800642e:	d943      	bls.n	80064b8 <state_machine+0x3f0>
 8006430:	4b17      	ldr	r3, [pc, #92]	@ (8006490 <state_machine+0x3c8>)
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8006438:	d83e      	bhi.n	80064b8 <state_machine+0x3f0>
 800643a:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <state_machine+0x3c8>)
 800643c:	885b      	ldrh	r3, [r3, #2]
 800643e:	2b37      	cmp	r3, #55	@ 0x37
 8006440:	d93a      	bls.n	80064b8 <state_machine+0x3f0>
 8006442:	4b13      	ldr	r3, [pc, #76]	@ (8006490 <state_machine+0x3c8>)
 8006444:	885b      	ldrh	r3, [r3, #2]
 8006446:	2b54      	cmp	r3, #84	@ 0x54
 8006448:	d836      	bhi.n	80064b8 <state_machine+0x3f0>
		{
			if(dab_management_to_display.total_services)
 800644a:	4b10      	ldr	r3, [pc, #64]	@ (800648c <state_machine+0x3c4>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d032      	beq.n	80064b8 <state_machine+0x3f0>
			{
				state_change_done = 0;
 8006452:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <state_machine+0x3b8>)
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 8006458:	4b0b      	ldr	r3, [pc, #44]	@ (8006488 <state_machine+0x3c0>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	4a0b      	ldr	r2, [pc, #44]	@ (800648c <state_machine+0x3c4>)
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	4293      	cmp	r3, r2
 8006464:	db1a      	blt.n	800649c <state_machine+0x3d4>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 8006466:	4b08      	ldr	r3, [pc, #32]	@ (8006488 <state_machine+0x3c0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	b2da      	uxtb	r2, r3
 800646c:	4b07      	ldr	r3, [pc, #28]	@ (800648c <state_machine+0x3c4>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	b2db      	uxtb	r3, r3
 8006474:	3301      	adds	r3, #1
 8006476:	b2db      	uxtb	r3, r3
 8006478:	4618      	mov	r0, r3
 800647a:	f7fc fe97 	bl	80031ac <play_station>
 800647e:	e015      	b.n	80064ac <state_machine+0x3e4>
 8006480:	2000700d 	.word	0x2000700d
 8006484:	20007050 	.word	0x20007050
 8006488:	20007010 	.word	0x20007010
 800648c:	20007040 	.word	0x20007040
 8006490:	20007014 	.word	0x20007014
 8006494:	2000700c 	.word	0x2000700c
 8006498:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 800649c:	4b8d      	ldr	r3, [pc, #564]	@ (80066d4 <state_machine+0x60c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	3301      	adds	r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fc fe80 	bl	80031ac <play_station>
				}

				playing_state = playing;
 80064ac:	4b8a      	ldr	r3, [pc, #552]	@ (80066d8 <state_machine+0x610>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80064b2:	4b8a      	ldr	r3, [pc, #552]	@ (80066dc <state_machine+0x614>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 80064b8:	4b89      	ldr	r3, [pc, #548]	@ (80066e0 <state_machine+0x618>)
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	2b05      	cmp	r3, #5
 80064be:	d935      	bls.n	800652c <state_machine+0x464>
 80064c0:	4b87      	ldr	r3, [pc, #540]	@ (80066e0 <state_machine+0x618>)
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80064c8:	d830      	bhi.n	800652c <state_machine+0x464>
 80064ca:	4b85      	ldr	r3, [pc, #532]	@ (80066e0 <state_machine+0x618>)
 80064cc:	885b      	ldrh	r3, [r3, #2]
 80064ce:	2b5a      	cmp	r3, #90	@ 0x5a
 80064d0:	d92c      	bls.n	800652c <state_machine+0x464>
 80064d2:	4b83      	ldr	r3, [pc, #524]	@ (80066e0 <state_machine+0x618>)
 80064d4:	885b      	ldrh	r3, [r3, #2]
 80064d6:	2b77      	cmp	r3, #119	@ 0x77
 80064d8:	d828      	bhi.n	800652c <state_machine+0x464>
		{
			if(dab_management_to_display.total_services)
 80064da:	4b82      	ldr	r3, [pc, #520]	@ (80066e4 <state_machine+0x61c>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d024      	beq.n	800652c <state_machine+0x464>
			{
				state_change_done = 0;
 80064e2:	4b81      	ldr	r3, [pc, #516]	@ (80066e8 <state_machine+0x620>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 80064e8:	4b7a      	ldr	r3, [pc, #488]	@ (80066d4 <state_machine+0x60c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3302      	adds	r3, #2
 80064ee:	4a7d      	ldr	r2, [pc, #500]	@ (80066e4 <state_machine+0x61c>)
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	4293      	cmp	r3, r2
 80064f4:	db0c      	blt.n	8006510 <state_machine+0x448>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 80064f6:	4b77      	ldr	r3, [pc, #476]	@ (80066d4 <state_machine+0x60c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	4b79      	ldr	r3, [pc, #484]	@ (80066e4 <state_machine+0x61c>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	b2db      	uxtb	r3, r3
 8006504:	3302      	adds	r3, #2
 8006506:	b2db      	uxtb	r3, r3
 8006508:	4618      	mov	r0, r3
 800650a:	f7fc fe4f 	bl	80031ac <play_station>
 800650e:	e007      	b.n	8006520 <state_machine+0x458>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 8006510:	4b70      	ldr	r3, [pc, #448]	@ (80066d4 <state_machine+0x60c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	3302      	adds	r3, #2
 8006518:	b2db      	uxtb	r3, r3
 800651a:	4618      	mov	r0, r3
 800651c:	f7fc fe46 	bl	80031ac <play_station>
				}

				playing_state = playing;
 8006520:	4b6d      	ldr	r3, [pc, #436]	@ (80066d8 <state_machine+0x610>)
 8006522:	2201      	movs	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006526:	4b6d      	ldr	r3, [pc, #436]	@ (80066dc <state_machine+0x614>)
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 800652c:	4b6c      	ldr	r3, [pc, #432]	@ (80066e0 <state_machine+0x618>)
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	2b05      	cmp	r3, #5
 8006532:	d935      	bls.n	80065a0 <state_machine+0x4d8>
 8006534:	4b6a      	ldr	r3, [pc, #424]	@ (80066e0 <state_machine+0x618>)
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800653c:	d830      	bhi.n	80065a0 <state_machine+0x4d8>
 800653e:	4b68      	ldr	r3, [pc, #416]	@ (80066e0 <state_machine+0x618>)
 8006540:	885b      	ldrh	r3, [r3, #2]
 8006542:	2b7d      	cmp	r3, #125	@ 0x7d
 8006544:	d92c      	bls.n	80065a0 <state_machine+0x4d8>
 8006546:	4b66      	ldr	r3, [pc, #408]	@ (80066e0 <state_machine+0x618>)
 8006548:	885b      	ldrh	r3, [r3, #2]
 800654a:	2b9a      	cmp	r3, #154	@ 0x9a
 800654c:	d828      	bhi.n	80065a0 <state_machine+0x4d8>
		{
			if(dab_management_to_display.total_services)
 800654e:	4b65      	ldr	r3, [pc, #404]	@ (80066e4 <state_machine+0x61c>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d024      	beq.n	80065a0 <state_machine+0x4d8>
			{
				state_change_done = 0;
 8006556:	4b64      	ldr	r3, [pc, #400]	@ (80066e8 <state_machine+0x620>)
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 800655c:	4b5d      	ldr	r3, [pc, #372]	@ (80066d4 <state_machine+0x60c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3303      	adds	r3, #3
 8006562:	4a60      	ldr	r2, [pc, #384]	@ (80066e4 <state_machine+0x61c>)
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	4293      	cmp	r3, r2
 8006568:	db0c      	blt.n	8006584 <state_machine+0x4bc>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 800656a:	4b5a      	ldr	r3, [pc, #360]	@ (80066d4 <state_machine+0x60c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	4b5c      	ldr	r3, [pc, #368]	@ (80066e4 <state_machine+0x61c>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	b2db      	uxtb	r3, r3
 8006578:	3303      	adds	r3, #3
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4618      	mov	r0, r3
 800657e:	f7fc fe15 	bl	80031ac <play_station>
 8006582:	e007      	b.n	8006594 <state_machine+0x4cc>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 8006584:	4b53      	ldr	r3, [pc, #332]	@ (80066d4 <state_machine+0x60c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	3303      	adds	r3, #3
 800658c:	b2db      	uxtb	r3, r3
 800658e:	4618      	mov	r0, r3
 8006590:	f7fc fe0c 	bl	80031ac <play_station>
				}

				playing_state = playing;
 8006594:	4b50      	ldr	r3, [pc, #320]	@ (80066d8 <state_machine+0x610>)
 8006596:	2201      	movs	r2, #1
 8006598:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800659a:	4b50      	ldr	r3, [pc, #320]	@ (80066dc <state_machine+0x614>)
 800659c:	2200      	movs	r2, #0
 800659e:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 80065a0:	4b4f      	ldr	r3, [pc, #316]	@ (80066e0 <state_machine+0x618>)
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	2b05      	cmp	r3, #5
 80065a6:	f240 819d 	bls.w	80068e4 <state_machine+0x81c>
 80065aa:	4b4d      	ldr	r3, [pc, #308]	@ (80066e0 <state_machine+0x618>)
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80065b2:	f200 8197 	bhi.w	80068e4 <state_machine+0x81c>
 80065b6:	4b4a      	ldr	r3, [pc, #296]	@ (80066e0 <state_machine+0x618>)
 80065b8:	885b      	ldrh	r3, [r3, #2]
 80065ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80065bc:	f240 8192 	bls.w	80068e4 <state_machine+0x81c>
 80065c0:	4b47      	ldr	r3, [pc, #284]	@ (80066e0 <state_machine+0x618>)
 80065c2:	885b      	ldrh	r3, [r3, #2]
 80065c4:	2bbd      	cmp	r3, #189	@ 0xbd
 80065c6:	f200 818d 	bhi.w	80068e4 <state_machine+0x81c>
		{
			if(dab_management_to_display.total_services)
 80065ca:	4b46      	ldr	r3, [pc, #280]	@ (80066e4 <state_machine+0x61c>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8188 	beq.w	80068e4 <state_machine+0x81c>
			{
				state_change_done = 0;
 80065d4:	4b44      	ldr	r3, [pc, #272]	@ (80066e8 <state_machine+0x620>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 80065da:	4b3e      	ldr	r3, [pc, #248]	@ (80066d4 <state_machine+0x60c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3304      	adds	r3, #4
 80065e0:	4a40      	ldr	r2, [pc, #256]	@ (80066e4 <state_machine+0x61c>)
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	db0c      	blt.n	8006602 <state_machine+0x53a>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 80065e8:	4b3a      	ldr	r3, [pc, #232]	@ (80066d4 <state_machine+0x60c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	4b3d      	ldr	r3, [pc, #244]	@ (80066e4 <state_machine+0x61c>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	3304      	adds	r3, #4
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fc fdd6 	bl	80031ac <play_station>
 8006600:	e007      	b.n	8006612 <state_machine+0x54a>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 8006602:	4b34      	ldr	r3, [pc, #208]	@ (80066d4 <state_machine+0x60c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	3304      	adds	r3, #4
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4618      	mov	r0, r3
 800660e:	f7fc fdcd 	bl	80031ac <play_station>
				}

				playing_state = playing;
 8006612:	4b31      	ldr	r3, [pc, #196]	@ (80066d8 <state_machine+0x610>)
 8006614:	2201      	movs	r2, #1
 8006616:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006618:	4b30      	ldr	r3, [pc, #192]	@ (80066dc <state_machine+0x614>)
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800661e:	e161      	b.n	80068e4 <state_machine+0x81c>

	case signal_info:
		if(!state_change_done)
 8006620:	4b31      	ldr	r3, [pc, #196]	@ (80066e8 <state_machine+0x620>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <state_machine+0x56a>
		{
			Display_dab_digrad_status_background();
 8006628:	f7fe f96e 	bl	8004908 <Display_dab_digrad_status_background>
			state_change_done = 1;
 800662c:	4b2e      	ldr	r3, [pc, #184]	@ (80066e8 <state_machine+0x620>)
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 8006632:	4c2e      	ldr	r4, [pc, #184]	@ (80066ec <state_machine+0x624>)
 8006634:	f107 0308 	add.w	r3, r7, #8
 8006638:	4618      	mov	r0, r3
 800663a:	f7fb fb21 	bl	8001c80 <Si468x_dab_digrad_status>
 800663e:	4625      	mov	r5, r4
 8006640:	f107 0408 	add.w	r4, r7, #8
 8006644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800664a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800664c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006650:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 8006654:	4e25      	ldr	r6, [pc, #148]	@ (80066ec <state_machine+0x624>)
 8006656:	466d      	mov	r5, sp
 8006658:	f106 0410 	add.w	r4, r6, #16
 800665c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800665e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006660:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006664:	e885 0003 	stmia.w	r5, {r0, r1}
 8006668:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800666c:	f7fe fae4 	bl	8004c38 <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006670:	4b1b      	ldr	r3, [pc, #108]	@ (80066e0 <state_machine+0x618>)
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	2b05      	cmp	r3, #5
 8006676:	d911      	bls.n	800669c <state_machine+0x5d4>
 8006678:	4b19      	ldr	r3, [pc, #100]	@ (80066e0 <state_machine+0x618>)
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	2b9c      	cmp	r3, #156	@ 0x9c
 800667e:	d80d      	bhi.n	800669c <state_machine+0x5d4>
 8006680:	4b17      	ldr	r3, [pc, #92]	@ (80066e0 <state_machine+0x618>)
 8006682:	885b      	ldrh	r3, [r3, #2]
 8006684:	2bc3      	cmp	r3, #195	@ 0xc3
 8006686:	d909      	bls.n	800669c <state_machine+0x5d4>
 8006688:	4b15      	ldr	r3, [pc, #84]	@ (80066e0 <state_machine+0x618>)
 800668a:	885b      	ldrh	r3, [r3, #2]
 800668c:	2bea      	cmp	r3, #234	@ 0xea
 800668e:	d805      	bhi.n	800669c <state_machine+0x5d4>
		{
			state_change_done = 0;
 8006690:	4b15      	ldr	r3, [pc, #84]	@ (80066e8 <state_machine+0x620>)
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 8006696:	4b11      	ldr	r3, [pc, #68]	@ (80066dc <state_machine+0x614>)
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800669c:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <state_machine+0x618>)
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	2ba3      	cmp	r3, #163	@ 0xa3
 80066a2:	f240 8121 	bls.w	80068e8 <state_machine+0x820>
 80066a6:	4b0e      	ldr	r3, [pc, #56]	@ (80066e0 <state_machine+0x618>)
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80066ae:	f200 811b 	bhi.w	80068e8 <state_machine+0x820>
 80066b2:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <state_machine+0x618>)
 80066b4:	885b      	ldrh	r3, [r3, #2]
 80066b6:	2bc3      	cmp	r3, #195	@ 0xc3
 80066b8:	f240 8116 	bls.w	80068e8 <state_machine+0x820>
 80066bc:	4b08      	ldr	r3, [pc, #32]	@ (80066e0 <state_machine+0x618>)
 80066be:	885b      	ldrh	r3, [r3, #2]
 80066c0:	2bea      	cmp	r3, #234	@ 0xea
 80066c2:	f200 8111 	bhi.w	80068e8 <state_machine+0x820>
		{
			state_change_done = 0;
 80066c6:	4b08      	ldr	r3, [pc, #32]	@ (80066e8 <state_machine+0x620>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 80066cc:	4b03      	ldr	r3, [pc, #12]	@ (80066dc <state_machine+0x614>)
 80066ce:	2204      	movs	r2, #4
 80066d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80066d2:	e109      	b.n	80068e8 <state_machine+0x820>
 80066d4:	20007010 	.word	0x20007010
 80066d8:	20000150 	.word	0x20000150
 80066dc:	2000700c 	.word	0x2000700c
 80066e0:	20007014 	.word	0x20007014
 80066e4:	20007040 	.word	0x20007040
 80066e8:	2000700d 	.word	0x2000700d
 80066ec:	20007018 	.word	0x20007018

	case scanning:
		if(!state_change_done)
 80066f0:	4b82      	ldr	r3, [pc, #520]	@ (80068fc <state_machine+0x834>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d116      	bne.n	8006726 <state_machine+0x65e>
		{
			playing_state = not_playing;
 80066f8:	4b81      	ldr	r3, [pc, #516]	@ (8006900 <state_machine+0x838>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 80066fe:	f7fd ff01 	bl	8004504 <Display_scanning_screen_background>
			state_change_done = 1;
 8006702:	4b7e      	ldr	r3, [pc, #504]	@ (80068fc <state_machine+0x834>)
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 8006708:	f7fb fee4 	bl	80024d4 <Si468x_dab_full_scan>
 800670c:	4603      	mov	r3, r0
 800670e:	461a      	mov	r2, r3
 8006710:	4b7c      	ldr	r3, [pc, #496]	@ (8006904 <state_machine+0x83c>)
 8006712:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8006714:	4b7b      	ldr	r3, [pc, #492]	@ (8006904 <state_machine+0x83c>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <state_machine+0x65e>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 800671c:	f7fe f8be 	bl	800489c <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 8006720:	4b78      	ldr	r3, [pc, #480]	@ (8006904 <state_machine+0x83c>)
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006726:	4b78      	ldr	r3, [pc, #480]	@ (8006908 <state_machine+0x840>)
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	2b05      	cmp	r3, #5
 800672c:	f240 80de 	bls.w	80068ec <state_machine+0x824>
 8006730:	4b75      	ldr	r3, [pc, #468]	@ (8006908 <state_machine+0x840>)
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006738:	f200 80d8 	bhi.w	80068ec <state_machine+0x824>
 800673c:	4b72      	ldr	r3, [pc, #456]	@ (8006908 <state_machine+0x840>)
 800673e:	885b      	ldrh	r3, [r3, #2]
 8006740:	2bc3      	cmp	r3, #195	@ 0xc3
 8006742:	f240 80d3 	bls.w	80068ec <state_machine+0x824>
 8006746:	4b70      	ldr	r3, [pc, #448]	@ (8006908 <state_machine+0x840>)
 8006748:	885b      	ldrh	r3, [r3, #2]
 800674a:	2bea      	cmp	r3, #234	@ 0xea
 800674c:	f200 80ce 	bhi.w	80068ec <state_machine+0x824>
		{
			scan_cancel_flag = 1;
 8006750:	4b6e      	ldr	r3, [pc, #440]	@ (800690c <state_machine+0x844>)
 8006752:	2201      	movs	r2, #1
 8006754:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 8006756:	4b69      	ldr	r3, [pc, #420]	@ (80068fc <state_machine+0x834>)
 8006758:	2200      	movs	r2, #0
 800675a:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 800675c:	4b6c      	ldr	r3, [pc, #432]	@ (8006910 <state_machine+0x848>)
 800675e:	2204      	movs	r2, #4
 8006760:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006762:	e0c3      	b.n	80068ec <state_machine+0x824>

	case settings:
		if(!state_change_done)
 8006764:	4b65      	ldr	r3, [pc, #404]	@ (80068fc <state_machine+0x834>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d107      	bne.n	800677c <state_machine+0x6b4>
		{
			Display_settings_screen_background();
 800676c:	f7fe fdce 	bl	800530c <Display_settings_screen_background>
			scan_cancel_flag = 0;
 8006770:	4b66      	ldr	r3, [pc, #408]	@ (800690c <state_machine+0x844>)
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 8006776:	4b61      	ldr	r3, [pc, #388]	@ (80068fc <state_machine+0x834>)
 8006778:	2201      	movs	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 800677c:	4b65      	ldr	r3, [pc, #404]	@ (8006914 <state_machine+0x84c>)
 800677e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006780:	f7fe febc 	bl	80054fc <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8006784:	4b60      	ldr	r3, [pc, #384]	@ (8006908 <state_machine+0x840>)
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	2ba3      	cmp	r3, #163	@ 0xa3
 800678a:	d91e      	bls.n	80067ca <state_machine+0x702>
 800678c:	4b5e      	ldr	r3, [pc, #376]	@ (8006908 <state_machine+0x840>)
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006794:	d819      	bhi.n	80067ca <state_machine+0x702>
 8006796:	4b5c      	ldr	r3, [pc, #368]	@ (8006908 <state_machine+0x840>)
 8006798:	885b      	ldrh	r3, [r3, #2]
 800679a:	2b3c      	cmp	r3, #60	@ 0x3c
 800679c:	d915      	bls.n	80067ca <state_machine+0x702>
 800679e:	4b5a      	ldr	r3, [pc, #360]	@ (8006908 <state_machine+0x840>)
 80067a0:	885b      	ldrh	r3, [r3, #2]
 80067a2:	2b63      	cmp	r3, #99	@ 0x63
 80067a4:	d811      	bhi.n	80067ca <state_machine+0x702>
		{
			dab_management_to_display.audio_volume += 2;
 80067a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006914 <state_machine+0x84c>)
 80067a8:	7b9b      	ldrb	r3, [r3, #14]
 80067aa:	3302      	adds	r3, #2
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b59      	ldr	r3, [pc, #356]	@ (8006914 <state_machine+0x84c>)
 80067b0:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 80067b2:	4b58      	ldr	r3, [pc, #352]	@ (8006914 <state_machine+0x84c>)
 80067b4:	7b9b      	ldrb	r3, [r3, #14]
 80067b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80067b8:	d902      	bls.n	80067c0 <state_machine+0x6f8>
			{
				dab_management_to_display.audio_volume = 63;
 80067ba:	4b56      	ldr	r3, [pc, #344]	@ (8006914 <state_machine+0x84c>)
 80067bc:	223f      	movs	r2, #63	@ 0x3f
 80067be:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 80067c0:	4b54      	ldr	r3, [pc, #336]	@ (8006914 <state_machine+0x84c>)
 80067c2:	7b9b      	ldrb	r3, [r3, #14]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fc fcbd 	bl	8003144 <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80067ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006908 <state_machine+0x840>)
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d91d      	bls.n	800680e <state_machine+0x746>
 80067d2:	4b4d      	ldr	r3, [pc, #308]	@ (8006908 <state_machine+0x840>)
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	2b9c      	cmp	r3, #156	@ 0x9c
 80067d8:	d819      	bhi.n	800680e <state_machine+0x746>
 80067da:	4b4b      	ldr	r3, [pc, #300]	@ (8006908 <state_machine+0x840>)
 80067dc:	885b      	ldrh	r3, [r3, #2]
 80067de:	2b3c      	cmp	r3, #60	@ 0x3c
 80067e0:	d915      	bls.n	800680e <state_machine+0x746>
 80067e2:	4b49      	ldr	r3, [pc, #292]	@ (8006908 <state_machine+0x840>)
 80067e4:	885b      	ldrh	r3, [r3, #2]
 80067e6:	2b63      	cmp	r3, #99	@ 0x63
 80067e8:	d811      	bhi.n	800680e <state_machine+0x746>
		{
			dab_management_to_display.audio_volume -= 2;
 80067ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006914 <state_machine+0x84c>)
 80067ec:	7b9b      	ldrb	r3, [r3, #14]
 80067ee:	3b02      	subs	r3, #2
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	4b48      	ldr	r3, [pc, #288]	@ (8006914 <state_machine+0x84c>)
 80067f4:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 80067f6:	4b47      	ldr	r3, [pc, #284]	@ (8006914 <state_machine+0x84c>)
 80067f8:	7b9b      	ldrb	r3, [r3, #14]
 80067fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80067fc:	d902      	bls.n	8006804 <state_machine+0x73c>
			{
				dab_management_to_display.audio_volume = 0;
 80067fe:	4b45      	ldr	r3, [pc, #276]	@ (8006914 <state_machine+0x84c>)
 8006800:	2200      	movs	r2, #0
 8006802:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006804:	4b43      	ldr	r3, [pc, #268]	@ (8006914 <state_machine+0x84c>)
 8006806:	7b9b      	ldrb	r3, [r3, #14]
 8006808:	4618      	mov	r0, r3
 800680a:	f7fc fc9b 	bl	8003144 <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 800680e:	4b3e      	ldr	r3, [pc, #248]	@ (8006908 <state_machine+0x840>)
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	2ba3      	cmp	r3, #163	@ 0xa3
 8006814:	d907      	bls.n	8006826 <state_machine+0x75e>
 8006816:	4b3c      	ldr	r3, [pc, #240]	@ (8006908 <state_machine+0x840>)
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800681e:	d802      	bhi.n	8006826 <state_machine+0x75e>
 8006820:	4b39      	ldr	r3, [pc, #228]	@ (8006908 <state_machine+0x840>)
 8006822:	885b      	ldrh	r3, [r3, #2]
 8006824:	2b69      	cmp	r3, #105	@ 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006826:	4b38      	ldr	r3, [pc, #224]	@ (8006908 <state_machine+0x840>)
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	2b05      	cmp	r3, #5
 800682c:	d906      	bls.n	800683c <state_machine+0x774>
 800682e:	4b36      	ldr	r3, [pc, #216]	@ (8006908 <state_machine+0x840>)
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	2b9c      	cmp	r3, #156	@ 0x9c
 8006834:	d802      	bhi.n	800683c <state_machine+0x774>
 8006836:	4b34      	ldr	r3, [pc, #208]	@ (8006908 <state_machine+0x840>)
 8006838:	885b      	ldrh	r3, [r3, #2]
 800683a:	2b69      	cmp	r3, #105	@ 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 800683c:	4b32      	ldr	r3, [pc, #200]	@ (8006908 <state_machine+0x840>)
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	2b05      	cmp	r3, #5
 8006842:	d911      	bls.n	8006868 <state_machine+0x7a0>
 8006844:	4b30      	ldr	r3, [pc, #192]	@ (8006908 <state_machine+0x840>)
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	2b9c      	cmp	r3, #156	@ 0x9c
 800684a:	d80d      	bhi.n	8006868 <state_machine+0x7a0>
 800684c:	4b2e      	ldr	r3, [pc, #184]	@ (8006908 <state_machine+0x840>)
 800684e:	885b      	ldrh	r3, [r3, #2]
 8006850:	2b96      	cmp	r3, #150	@ 0x96
 8006852:	d909      	bls.n	8006868 <state_machine+0x7a0>
 8006854:	4b2c      	ldr	r3, [pc, #176]	@ (8006908 <state_machine+0x840>)
 8006856:	885b      	ldrh	r3, [r3, #2]
 8006858:	2bbd      	cmp	r3, #189	@ 0xbd
 800685a:	d805      	bhi.n	8006868 <state_machine+0x7a0>
		{
			state_change_done = 0;
 800685c:	4b27      	ldr	r3, [pc, #156]	@ (80068fc <state_machine+0x834>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 8006862:	4b2b      	ldr	r3, [pc, #172]	@ (8006910 <state_machine+0x848>)
 8006864:	2202      	movs	r2, #2
 8006866:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006868:	4b27      	ldr	r3, [pc, #156]	@ (8006908 <state_machine+0x840>)
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	2ba3      	cmp	r3, #163	@ 0xa3
 800686e:	d907      	bls.n	8006880 <state_machine+0x7b8>
 8006870:	4b25      	ldr	r3, [pc, #148]	@ (8006908 <state_machine+0x840>)
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006878:	d802      	bhi.n	8006880 <state_machine+0x7b8>
 800687a:	4b23      	ldr	r3, [pc, #140]	@ (8006908 <state_machine+0x840>)
 800687c:	885b      	ldrh	r3, [r3, #2]
 800687e:	2b96      	cmp	r3, #150	@ 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006880:	4b21      	ldr	r3, [pc, #132]	@ (8006908 <state_machine+0x840>)
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	2b05      	cmp	r3, #5
 8006886:	d911      	bls.n	80068ac <state_machine+0x7e4>
 8006888:	4b1f      	ldr	r3, [pc, #124]	@ (8006908 <state_machine+0x840>)
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	2b9c      	cmp	r3, #156	@ 0x9c
 800688e:	d80d      	bhi.n	80068ac <state_machine+0x7e4>
 8006890:	4b1d      	ldr	r3, [pc, #116]	@ (8006908 <state_machine+0x840>)
 8006892:	885b      	ldrh	r3, [r3, #2]
 8006894:	2bc3      	cmp	r3, #195	@ 0xc3
 8006896:	d909      	bls.n	80068ac <state_machine+0x7e4>
 8006898:	4b1b      	ldr	r3, [pc, #108]	@ (8006908 <state_machine+0x840>)
 800689a:	885b      	ldrh	r3, [r3, #2]
 800689c:	2bea      	cmp	r3, #234	@ 0xea
 800689e:	d805      	bhi.n	80068ac <state_machine+0x7e4>
		{
			state_change_done = 0;
 80068a0:	4b16      	ldr	r3, [pc, #88]	@ (80068fc <state_machine+0x834>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 80068a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006910 <state_machine+0x848>)
 80068a8:	2203      	movs	r2, #3
 80068aa:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80068ac:	4b16      	ldr	r3, [pc, #88]	@ (8006908 <state_machine+0x840>)
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	2ba3      	cmp	r3, #163	@ 0xa3
 80068b2:	d91d      	bls.n	80068f0 <state_machine+0x828>
 80068b4:	4b14      	ldr	r3, [pc, #80]	@ (8006908 <state_machine+0x840>)
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80068bc:	d818      	bhi.n	80068f0 <state_machine+0x828>
 80068be:	4b12      	ldr	r3, [pc, #72]	@ (8006908 <state_machine+0x840>)
 80068c0:	885b      	ldrh	r3, [r3, #2]
 80068c2:	2bc3      	cmp	r3, #195	@ 0xc3
 80068c4:	d914      	bls.n	80068f0 <state_machine+0x828>
 80068c6:	4b10      	ldr	r3, [pc, #64]	@ (8006908 <state_machine+0x840>)
 80068c8:	885b      	ldrh	r3, [r3, #2]
 80068ca:	2bea      	cmp	r3, #234	@ 0xea
 80068cc:	d810      	bhi.n	80068f0 <state_machine+0x828>
		{
			state_change_done = 0;
 80068ce:	4b0b      	ldr	r3, [pc, #44]	@ (80068fc <state_machine+0x834>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 80068d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006910 <state_machine+0x848>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	701a      	strb	r2, [r3, #0]
		}


		break;
 80068da:	e009      	b.n	80068f0 <state_machine+0x828>

	default:
		break;
 80068dc:	bf00      	nop
 80068de:	e008      	b.n	80068f2 <state_machine+0x82a>
		break;
 80068e0:	bf00      	nop
 80068e2:	e006      	b.n	80068f2 <state_machine+0x82a>
		break;
 80068e4:	bf00      	nop
 80068e6:	e004      	b.n	80068f2 <state_machine+0x82a>
		break;
 80068e8:	bf00      	nop
 80068ea:	e002      	b.n	80068f2 <state_machine+0x82a>
		break;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <state_machine+0x82a>
		break;
 80068f0:	bf00      	nop
	}
}
 80068f2:	bf00      	nop
 80068f4:	3744      	adds	r7, #68	@ 0x44
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fa:	bf00      	nop
 80068fc:	2000700d 	.word	0x2000700d
 8006900:	20000150 	.word	0x20000150
 8006904:	2000706d 	.word	0x2000706d
 8006908:	20007014 	.word	0x20007014
 800690c:	2000706c 	.word	0x2000706c
 8006910:	2000700c 	.word	0x2000700c
 8006914:	20007040 	.word	0x20007040

08006918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	4b10      	ldr	r3, [pc, #64]	@ (8006964 <HAL_MspInit+0x4c>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	4a0f      	ldr	r2, [pc, #60]	@ (8006964 <HAL_MspInit+0x4c>)
 8006928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800692c:	6453      	str	r3, [r2, #68]	@ 0x44
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <HAL_MspInit+0x4c>)
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800693a:	2300      	movs	r3, #0
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	4b09      	ldr	r3, [pc, #36]	@ (8006964 <HAL_MspInit+0x4c>)
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	4a08      	ldr	r2, [pc, #32]	@ (8006964 <HAL_MspInit+0x4c>)
 8006944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006948:	6413      	str	r3, [r2, #64]	@ 0x40
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_MspInit+0x4c>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40023800 	.word	0x40023800

08006968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800696c:	bf00      	nop
 800696e:	e7fd      	b.n	800696c <NMI_Handler+0x4>

08006970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006974:	bf00      	nop
 8006976:	e7fd      	b.n	8006974 <HardFault_Handler+0x4>

08006978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <MemManage_Handler+0x4>

08006980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006984:	bf00      	nop
 8006986:	e7fd      	b.n	8006984 <BusFault_Handler+0x4>

08006988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <UsageFault_Handler+0x4>

08006990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800699e:	b480      	push	{r7}
 80069a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069a2:	bf00      	nop
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069be:	f000 fd23 	bl	8007408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069c2:	bf00      	nop
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80069cc:	4802      	ldr	r0, [pc, #8]	@ (80069d8 <DMA1_Stream4_IRQHandler+0x10>)
 80069ce:	f000 ff41 	bl	8007854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80069d2:	bf00      	nop
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20006fac 	.word	0x20006fac

080069dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80069e0:	4802      	ldr	r0, [pc, #8]	@ (80069ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80069e2:	f005 fc56 	bl	800c292 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200070b8 	.word	0x200070b8

080069f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80069f4:	4802      	ldr	r0, [pc, #8]	@ (8006a00 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80069f6:	f005 fc4c 	bl	800c292 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80069fa:	bf00      	nop
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20007100 	.word	0x20007100

08006a04 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006a08:	4802      	ldr	r0, [pc, #8]	@ (8006a14 <SPI2_IRQHandler+0x10>)
 8006a0a:	f005 f8e5 	bl	800bbd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006a0e:	bf00      	nop
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20006f54 	.word	0x20006f54

08006a18 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8006a1c:	4802      	ldr	r0, [pc, #8]	@ (8006a28 <I2C3_EV_IRQHandler+0x10>)
 8006a1e:	f001 ff95 	bl	800894c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8006a22:	bf00      	nop
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20006ea8 	.word	0x20006ea8

08006a2c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006a30:	4802      	ldr	r0, [pc, #8]	@ (8006a3c <I2C3_ER_IRQHandler+0x10>)
 8006a32:	f002 f8fc 	bl	8008c2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20006ea8 	.word	0x20006ea8

08006a40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <SystemInit+0x20>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5e:	4a05      	ldr	r2, [pc, #20]	@ (8006a74 <SystemInit+0x20>)
 8006a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	@ 0x28
 8006a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a7e:	f107 0320 	add.w	r3, r7, #32
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a88:	1d3b      	adds	r3, r7, #4
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	605a      	str	r2, [r3, #4]
 8006a90:	609a      	str	r2, [r3, #8]
 8006a92:	60da      	str	r2, [r3, #12]
 8006a94:	611a      	str	r2, [r3, #16]
 8006a96:	615a      	str	r2, [r3, #20]
 8006a98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006a9a:	4b22      	ldr	r3, [pc, #136]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006a9c:	4a22      	ldr	r2, [pc, #136]	@ (8006b28 <MX_TIM3_Init+0xb0>)
 8006a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006aa0:	4b20      	ldr	r3, [pc, #128]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006aac:	4b1d      	ldr	r3, [pc, #116]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aba:	4b1a      	ldr	r3, [pc, #104]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006ac0:	4818      	ldr	r0, [pc, #96]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006ac2:	f005 fb97 	bl	800c1f4 <HAL_TIM_PWM_Init>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006acc:	f7ff f9d2 	bl	8005e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006ad8:	f107 0320 	add.w	r3, r7, #32
 8006adc:	4619      	mov	r1, r3
 8006ade:	4811      	ldr	r0, [pc, #68]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006ae0:	f006 f81a 	bl	800cb18 <HAL_TIMEx_MasterConfigSynchronization>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006aea:	f7ff f9c3 	bl	8005e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006aee:	2360      	movs	r3, #96	@ 0x60
 8006af0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006afe:	1d3b      	adds	r3, r7, #4
 8006b00:	2208      	movs	r2, #8
 8006b02:	4619      	mov	r1, r3
 8006b04:	4807      	ldr	r0, [pc, #28]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006b06:	f005 fccd 	bl	800c4a4 <HAL_TIM_PWM_ConfigChannel>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006b10:	f7ff f9b0 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006b14:	4803      	ldr	r0, [pc, #12]	@ (8006b24 <MX_TIM3_Init+0xac>)
 8006b16:	f000 f8b9 	bl	8006c8c <HAL_TIM_MspPostInit>

}
 8006b1a:	bf00      	nop
 8006b1c:	3728      	adds	r7, #40	@ 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20007070 	.word	0x20007070
 8006b28:	40000400 	.word	0x40000400

08006b2c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006b30:	4b0e      	ldr	r3, [pc, #56]	@ (8006b6c <MX_TIM10_Init+0x40>)
 8006b32:	4a0f      	ldr	r2, [pc, #60]	@ (8006b70 <MX_TIM10_Init+0x44>)
 8006b34:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8006b36:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <MX_TIM10_Init+0x40>)
 8006b38:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006b3c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <MX_TIM10_Init+0x40>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8006b44:	4b09      	ldr	r3, [pc, #36]	@ (8006b6c <MX_TIM10_Init+0x40>)
 8006b46:	f240 2257 	movw	r2, #599	@ 0x257
 8006b4a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b4c:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <MX_TIM10_Init+0x40>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b52:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <MX_TIM10_Init+0x40>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006b58:	4804      	ldr	r0, [pc, #16]	@ (8006b6c <MX_TIM10_Init+0x40>)
 8006b5a:	f005 fa8b 	bl	800c074 <HAL_TIM_Base_Init>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006b64:	f7ff f986 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006b68:	bf00      	nop
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	200070b8 	.word	0x200070b8
 8006b70:	40014400 	.word	0x40014400

08006b74 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006b78:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <MX_TIM11_Init+0x40>)
 8006b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8006bb8 <MX_TIM11_Init+0x44>)
 8006b7c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb4 <MX_TIM11_Init+0x40>)
 8006b80:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006b84:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b86:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb4 <MX_TIM11_Init+0x40>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8006b8c:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <MX_TIM11_Init+0x40>)
 8006b8e:	f240 5213 	movw	r2, #1299	@ 0x513
 8006b92:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b94:	4b07      	ldr	r3, [pc, #28]	@ (8006bb4 <MX_TIM11_Init+0x40>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b9a:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <MX_TIM11_Init+0x40>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006ba0:	4804      	ldr	r0, [pc, #16]	@ (8006bb4 <MX_TIM11_Init+0x40>)
 8006ba2:	f005 fa67 	bl	800c074 <HAL_TIM_Base_Init>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8006bac:	f7ff f962 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006bb0:	bf00      	nop
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20007100 	.word	0x20007100
 8006bb8:	40014800 	.word	0x40014800

08006bbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8006bf8 <HAL_TIM_PWM_MspInit+0x3c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d10d      	bne.n	8006bea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <HAL_TIM_PWM_MspInit+0x40>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	4a09      	ldr	r2, [pc, #36]	@ (8006bfc <HAL_TIM_PWM_MspInit+0x40>)
 8006bd8:	f043 0302 	orr.w	r3, r3, #2
 8006bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bde:	4b07      	ldr	r3, [pc, #28]	@ (8006bfc <HAL_TIM_PWM_MspInit+0x40>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40000400 	.word	0x40000400
 8006bfc:	40023800 	.word	0x40023800

08006c00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006c80 <HAL_TIM_Base_MspInit+0x80>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d116      	bne.n	8006c40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	4b1b      	ldr	r3, [pc, #108]	@ (8006c84 <HAL_TIM_Base_MspInit+0x84>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8006c84 <HAL_TIM_Base_MspInit+0x84>)
 8006c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c22:	4b18      	ldr	r3, [pc, #96]	@ (8006c84 <HAL_TIM_Base_MspInit+0x84>)
 8006c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	2019      	movs	r0, #25
 8006c34:	f000 fd07 	bl	8007646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006c38:	2019      	movs	r0, #25
 8006c3a:	f000 fd20 	bl	800767e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006c3e:	e01a      	b.n	8006c76 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a10      	ldr	r2, [pc, #64]	@ (8006c88 <HAL_TIM_Base_MspInit+0x88>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d115      	bne.n	8006c76 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <HAL_TIM_Base_MspInit+0x84>)
 8006c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c52:	4a0c      	ldr	r2, [pc, #48]	@ (8006c84 <HAL_TIM_Base_MspInit+0x84>)
 8006c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <HAL_TIM_Base_MspInit+0x84>)
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c62:	60bb      	str	r3, [r7, #8]
 8006c64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006c66:	2200      	movs	r2, #0
 8006c68:	2100      	movs	r1, #0
 8006c6a:	201a      	movs	r0, #26
 8006c6c:	f000 fceb 	bl	8007646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006c70:	201a      	movs	r0, #26
 8006c72:	f000 fd04 	bl	800767e <HAL_NVIC_EnableIRQ>
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40014400 	.word	0x40014400
 8006c84:	40023800 	.word	0x40023800
 8006c88:	40014800 	.word	0x40014800

08006c8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c94:	f107 030c 	add.w	r3, r7, #12
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
 8006ca0:	60da      	str	r2, [r3, #12]
 8006ca2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a12      	ldr	r2, [pc, #72]	@ (8006cf4 <HAL_TIM_MspPostInit+0x68>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d11e      	bne.n	8006cec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	4b11      	ldr	r3, [pc, #68]	@ (8006cf8 <HAL_TIM_MspPostInit+0x6c>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb6:	4a10      	ldr	r2, [pc, #64]	@ (8006cf8 <HAL_TIM_MspPostInit+0x6c>)
 8006cb8:	f043 0304 	orr.w	r3, r3, #4
 8006cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf8 <HAL_TIM_MspPostInit+0x6c>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8006cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006ce0:	f107 030c 	add.w	r3, r7, #12
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4805      	ldr	r0, [pc, #20]	@ (8006cfc <HAL_TIM_MspPostInit+0x70>)
 8006ce8:	f000 fffe 	bl	8007ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006cec:	bf00      	nop
 8006cee:	3720      	adds	r7, #32
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	40020800 	.word	0x40020800

08006d00 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 8006d06:	4b24      	ldr	r3, [pc, #144]	@ (8006d98 <Touch_read+0x98>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8006d0e:	4b22      	ldr	r3, [pc, #136]	@ (8006d98 <Touch_read+0x98>)
 8006d10:	7c1b      	ldrb	r3, [r3, #16]
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da2d      	bge.n	8006d74 <Touch_read+0x74>
	{
		xtemp = TP_Read_XOY(0xD0);
 8006d18:	20d0      	movs	r0, #208	@ 0xd0
 8006d1a:	f000 f8e5 	bl	8006ee8 <TP_Read_XOY>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	4b1e      	ldr	r3, [pc, #120]	@ (8006d9c <Touch_read+0x9c>)
 8006d24:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8006d26:	2090      	movs	r0, #144	@ 0x90
 8006d28:	f000 f8de 	bl	8006ee8 <TP_Read_XOY>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	461a      	mov	r2, r3
 8006d30:	4b1b      	ldr	r3, [pc, #108]	@ (8006da0 <Touch_read+0xa0>)
 8006d32:	801a      	strh	r2, [r3, #0]
			touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
			touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
		}
		else
		{
			touch_coordinates.x = 320 * (ytemp - 350) / (3900-350);
 8006d34:	4b1a      	ldr	r3, [pc, #104]	@ (8006da0 <Touch_read+0xa0>)
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	f5a3 72af 	sub.w	r2, r3, #350	@ 0x15e
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	019b      	lsls	r3, r3, #6
 8006d44:	4a17      	ldr	r2, [pc, #92]	@ (8006da4 <Touch_read+0xa4>)
 8006d46:	fb82 1203 	smull	r1, r2, r2, r3
 8006d4a:	441a      	add	r2, r3
 8006d4c:	12d2      	asrs	r2, r2, #11
 8006d4e:	17db      	asrs	r3, r3, #31
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	803b      	strh	r3, [r7, #0]
			touch_coordinates.y = 230 * (xtemp - 240) / (3800-230);
 8006d56:	4b11      	ldr	r3, [pc, #68]	@ (8006d9c <Touch_read+0x9c>)
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	3bf0      	subs	r3, #240	@ 0xf0
 8006d5c:	22e6      	movs	r2, #230	@ 0xe6
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
 8006d62:	4a11      	ldr	r2, [pc, #68]	@ (8006da8 <Touch_read+0xa8>)
 8006d64:	fb82 1203 	smull	r1, r2, r2, r3
 8006d68:	1252      	asrs	r2, r2, #9
 8006d6a:	17db      	asrs	r3, r3, #31
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	807b      	strh	r3, [r7, #2]
 8006d72:	e003      	b.n	8006d7c <Touch_read+0x7c>

	}

	else
	{
		touch_coordinates.x = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	2300      	movs	r3, #0
 8006d82:	88ba      	ldrh	r2, [r7, #4]
 8006d84:	f362 030f 	bfi	r3, r2, #0, #16
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000158 	.word	0x20000158
 8006d9c:	20007148 	.word	0x20007148
 8006da0:	2000714a 	.word	0x2000714a
 8006da4:	93afcf8b 	.word	0x93afcf8b
 8006da8:	24b70025 	.word	0x24b70025

08006dac <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]
 8006dbe:	e021      	b.n	8006e04 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8006dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da05      	bge.n	8006dd4 <TP_Write_Byte+0x28>
			T_DIN_ON;
 8006dc8:	2201      	movs	r2, #1
 8006dca:	2120      	movs	r1, #32
 8006dcc:	4811      	ldr	r0, [pc, #68]	@ (8006e14 <TP_Write_Byte+0x68>)
 8006dce:	f001 f93f 	bl	8008050 <HAL_GPIO_WritePin>
 8006dd2:	e004      	b.n	8006dde <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2120      	movs	r1, #32
 8006dd8:	480e      	ldr	r0, [pc, #56]	@ (8006e14 <TP_Write_Byte+0x68>)
 8006dda:	f001 f939 	bl	8008050 <HAL_GPIO_WritePin>

		num <<= 1;
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8006de4:	2200      	movs	r2, #0
 8006de6:	2108      	movs	r1, #8
 8006de8:	480a      	ldr	r0, [pc, #40]	@ (8006e14 <TP_Write_Byte+0x68>)
 8006dea:	f001 f931 	bl	8008050 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006dee:	2001      	movs	r0, #1
 8006df0:	f000 fb2a 	bl	8007448 <HAL_Delay>
		T_CLK_ON;
 8006df4:	2201      	movs	r2, #1
 8006df6:	2108      	movs	r1, #8
 8006df8:	4806      	ldr	r0, [pc, #24]	@ (8006e14 <TP_Write_Byte+0x68>)
 8006dfa:	f001 f929 	bl	8008050 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	3301      	adds	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b07      	cmp	r3, #7
 8006e08:	d9da      	bls.n	8006dc0 <TP_Write_Byte+0x14>
	}
}
 8006e0a:	bf00      	nop
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40020400 	.word	0x40020400

08006e18 <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2108      	movs	r1, #8
 8006e2e:	482c      	ldr	r0, [pc, #176]	@ (8006ee0 <TP_Read_AD+0xc8>)
 8006e30:	f001 f90e 	bl	8008050 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8006e34:	2200      	movs	r2, #0
 8006e36:	2120      	movs	r1, #32
 8006e38:	4829      	ldr	r0, [pc, #164]	@ (8006ee0 <TP_Read_AD+0xc8>)
 8006e3a:	f001 f909 	bl	8008050 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2180      	movs	r1, #128	@ 0x80
 8006e42:	4828      	ldr	r0, [pc, #160]	@ (8006ee4 <TP_Read_AD+0xcc>)
 8006e44:	f001 f904 	bl	8008050 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff ffae 	bl	8006dac <TP_Write_Byte>
	HAL_Delay(1);
 8006e50:	2001      	movs	r0, #1
 8006e52:	f000 faf9 	bl	8007448 <HAL_Delay>
	T_CLK_OFF;
 8006e56:	2200      	movs	r2, #0
 8006e58:	2108      	movs	r1, #8
 8006e5a:	4821      	ldr	r0, [pc, #132]	@ (8006ee0 <TP_Read_AD+0xc8>)
 8006e5c:	f001 f8f8 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006e60:	2001      	movs	r0, #1
 8006e62:	f000 faf1 	bl	8007448 <HAL_Delay>
	T_CLK_ON;
 8006e66:	2201      	movs	r2, #1
 8006e68:	2108      	movs	r1, #8
 8006e6a:	481d      	ldr	r0, [pc, #116]	@ (8006ee0 <TP_Read_AD+0xc8>)
 8006e6c:	f001 f8f0 	bl	8008050 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006e70:	2001      	movs	r0, #1
 8006e72:	f000 fae9 	bl	8007448 <HAL_Delay>
	T_CLK_OFF;
 8006e76:	2200      	movs	r2, #0
 8006e78:	2108      	movs	r1, #8
 8006e7a:	4819      	ldr	r0, [pc, #100]	@ (8006ee0 <TP_Read_AD+0xc8>)
 8006e7c:	f001 f8e8 	bl	8008050 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]
 8006e84:	e01c      	b.n	8006ec0 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 8006e86:	89bb      	ldrh	r3, [r7, #12]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2108      	movs	r1, #8
 8006e90:	4813      	ldr	r0, [pc, #76]	@ (8006ee0 <TP_Read_AD+0xc8>)
 8006e92:	f001 f8dd 	bl	8008050 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006e96:	2001      	movs	r0, #1
 8006e98:	f000 fad6 	bl	8007448 <HAL_Delay>
		T_CLK_ON;
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	2108      	movs	r1, #8
 8006ea0:	480f      	ldr	r0, [pc, #60]	@ (8006ee0 <TP_Read_AD+0xc8>)
 8006ea2:	f001 f8d5 	bl	8008050 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8006ea6:	2110      	movs	r1, #16
 8006ea8:	480d      	ldr	r0, [pc, #52]	@ (8006ee0 <TP_Read_AD+0xc8>)
 8006eaa:	f001 f8b9 	bl	8008020 <HAL_GPIO_ReadPin>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <TP_Read_AD+0xa2>
 8006eb4:	89bb      	ldrh	r3, [r7, #12]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	73fb      	strb	r3, [r7, #15]
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b0f      	cmp	r3, #15
 8006ec4:	d9df      	bls.n	8006e86 <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 8006ec6:	89bb      	ldrh	r3, [r7, #12]
 8006ec8:	091b      	lsrs	r3, r3, #4
 8006eca:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8006ecc:	2201      	movs	r2, #1
 8006ece:	2180      	movs	r1, #128	@ 0x80
 8006ed0:	4804      	ldr	r0, [pc, #16]	@ (8006ee4 <TP_Read_AD+0xcc>)
 8006ed2:	f001 f8bd 	bl	8008050 <HAL_GPIO_WritePin>
	return(Num);
 8006ed6:	89bb      	ldrh	r3, [r7, #12]

}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40020400 	.word	0x40020400
 8006ee4:	40020c00 	.word	0x40020c00

08006ee8 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff ff8f 	bl	8006e18 <TP_Read_AD>
}
 8006efa:	bf00      	nop
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f40 <TP_Read_XY+0x3c>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff ffe8 	bl	8006ee8 <TP_Read_XOY>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8006f1c:	4b09      	ldr	r3, [pc, #36]	@ (8006f44 <TP_Read_XY+0x40>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff ffe1 	bl	8006ee8 <TP_Read_XOY>
 8006f26:	4603      	mov	r3, r0
 8006f28:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	89fa      	ldrh	r2, [r7, #14]
 8006f2e:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	89ba      	ldrh	r2, [r7, #12]
 8006f34:	801a      	strh	r2, [r3, #0]
	return 1;
 8006f36:	2301      	movs	r3, #1
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	2000017c 	.word	0x2000017c
 8006f44:	2000017d 	.word	0x2000017d

08006f48 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8006f52:	f107 0212 	add.w	r2, r7, #18
 8006f56:	f107 0314 	add.w	r3, r7, #20
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff ffd1 	bl	8006f04 <TP_Read_XY>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <TP_Read_XY2+0x28>
    	return(0);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e049      	b.n	8007004 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8006f70:	f107 020e 	add.w	r2, r7, #14
 8006f74:	f107 0310 	add.w	r3, r7, #16
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff ffc2 	bl	8006f04 <TP_Read_XY>
 8006f80:	4603      	mov	r3, r0
 8006f82:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <TP_Read_XY2+0x46>
    	return(0);
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e03a      	b.n	8007004 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8006f8e:	8a3a      	ldrh	r2, [r7, #16]
 8006f90:	8abb      	ldrh	r3, [r7, #20]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d804      	bhi.n	8006fa0 <TP_Read_XY2+0x58>
 8006f96:	8a3b      	ldrh	r3, [r7, #16]
 8006f98:	3331      	adds	r3, #49	@ 0x31
 8006f9a:	8aba      	ldrh	r2, [r7, #20]
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	da08      	bge.n	8006fb2 <TP_Read_XY2+0x6a>
 8006fa0:	8aba      	ldrh	r2, [r7, #20]
 8006fa2:	8a3b      	ldrh	r3, [r7, #16]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d82c      	bhi.n	8007002 <TP_Read_XY2+0xba>
 8006fa8:	8abb      	ldrh	r3, [r7, #20]
 8006faa:	3331      	adds	r3, #49	@ 0x31
 8006fac:	8a3a      	ldrh	r2, [r7, #16]
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	db27      	blt.n	8007002 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8006fb2:	89fa      	ldrh	r2, [r7, #14]
 8006fb4:	8a7b      	ldrh	r3, [r7, #18]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d804      	bhi.n	8006fc4 <TP_Read_XY2+0x7c>
 8006fba:	89fb      	ldrh	r3, [r7, #14]
 8006fbc:	3331      	adds	r3, #49	@ 0x31
 8006fbe:	8a7a      	ldrh	r2, [r7, #18]
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	da08      	bge.n	8006fd6 <TP_Read_XY2+0x8e>
 8006fc4:	8a7a      	ldrh	r2, [r7, #18]
 8006fc6:	89fb      	ldrh	r3, [r7, #14]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d81a      	bhi.n	8007002 <TP_Read_XY2+0xba>
 8006fcc:	8a7b      	ldrh	r3, [r7, #18]
 8006fce:	3331      	adds	r3, #49	@ 0x31
 8006fd0:	89fa      	ldrh	r2, [r7, #14]
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	db15      	blt.n	8007002 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8006fd6:	8abb      	ldrh	r3, [r7, #20]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	8a3b      	ldrh	r3, [r7, #16]
 8006fdc:	4413      	add	r3, r2
 8006fde:	0fda      	lsrs	r2, r3, #31
 8006fe0:	4413      	add	r3, r2
 8006fe2:	105b      	asrs	r3, r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8006fea:	8a7b      	ldrh	r3, [r7, #18]
 8006fec:	461a      	mov	r2, r3
 8006fee:	89fb      	ldrh	r3, [r7, #14]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	0fda      	lsrs	r2, r3, #31
 8006ff4:	4413      	add	r3, r2
 8006ff6:	105b      	asrs	r3, r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	801a      	strh	r2, [r3, #0]
        return 1;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8007016:	2140      	movs	r1, #64	@ 0x40
 8007018:	483f      	ldr	r0, [pc, #252]	@ (8007118 <TP_Scan+0x10c>)
 800701a:	f001 f801 	bl	8008020 <HAL_GPIO_ReadPin>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d155      	bne.n	80070d0 <TP_Scan+0xc4>
	{
		if(tp)
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 800702a:	493c      	ldr	r1, [pc, #240]	@ (800711c <TP_Scan+0x110>)
 800702c:	483c      	ldr	r0, [pc, #240]	@ (8007120 <TP_Scan+0x114>)
 800702e:	f7ff ff8b 	bl	8006f48 <TP_Read_XY2>
 8007032:	e03c      	b.n	80070ae <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8007034:	4939      	ldr	r1, [pc, #228]	@ (800711c <TP_Scan+0x110>)
 8007036:	483a      	ldr	r0, [pc, #232]	@ (8007120 <TP_Scan+0x114>)
 8007038:	f7ff ff86 	bl	8006f48 <TP_Read_XY2>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d035      	beq.n	80070ae <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8007042:	4b38      	ldr	r3, [pc, #224]	@ (8007124 <TP_Scan+0x118>)
 8007044:	ed93 7a05 	vldr	s14, [r3, #20]
 8007048:	4b36      	ldr	r3, [pc, #216]	@ (8007124 <TP_Scan+0x118>)
 800704a:	899b      	ldrh	r3, [r3, #12]
 800704c:	ee07 3a90 	vmov	s15, r3
 8007050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007058:	4b32      	ldr	r3, [pc, #200]	@ (8007124 <TP_Scan+0x118>)
 800705a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800706a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800706e:	ee17 3a90 	vmov	r3, s15
 8007072:	b29a      	uxth	r2, r3
 8007074:	4b2b      	ldr	r3, [pc, #172]	@ (8007124 <TP_Scan+0x118>)
 8007076:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8007078:	4b2a      	ldr	r3, [pc, #168]	@ (8007124 <TP_Scan+0x118>)
 800707a:	ed93 7a06 	vldr	s14, [r3, #24]
 800707e:	4b29      	ldr	r3, [pc, #164]	@ (8007124 <TP_Scan+0x118>)
 8007080:	89db      	ldrh	r3, [r3, #14]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800708a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800708e:	4b25      	ldr	r3, [pc, #148]	@ (8007124 <TP_Scan+0x118>)
 8007090:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800709c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a4:	ee17 3a90 	vmov	r3, s15
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007124 <TP_Scan+0x118>)
 80070ac:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 80070ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007124 <TP_Scan+0x118>)
 80070b0:	7c1b      	ldrb	r3, [r3, #16]
 80070b2:	b25b      	sxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	db26      	blt.n	8007106 <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 80070b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007124 <TP_Scan+0x118>)
 80070ba:	22c0      	movs	r2, #192	@ 0xc0
 80070bc:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 80070be:	4b19      	ldr	r3, [pc, #100]	@ (8007124 <TP_Scan+0x118>)
 80070c0:	899a      	ldrh	r2, [r3, #12]
 80070c2:	4b18      	ldr	r3, [pc, #96]	@ (8007124 <TP_Scan+0x118>)
 80070c4:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 80070c6:	4b17      	ldr	r3, [pc, #92]	@ (8007124 <TP_Scan+0x118>)
 80070c8:	89da      	ldrh	r2, [r3, #14]
 80070ca:	4b16      	ldr	r3, [pc, #88]	@ (8007124 <TP_Scan+0x118>)
 80070cc:	815a      	strh	r2, [r3, #10]
 80070ce:	e01a      	b.n	8007106 <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 80070d0:	4b14      	ldr	r3, [pc, #80]	@ (8007124 <TP_Scan+0x118>)
 80070d2:	7c1b      	ldrb	r3, [r3, #16]
 80070d4:	b25b      	sxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	da07      	bge.n	80070ea <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 80070da:	4b12      	ldr	r3, [pc, #72]	@ (8007124 <TP_Scan+0x118>)
 80070dc:	7c1b      	ldrb	r3, [r3, #16]
 80070de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <TP_Scan+0x118>)
 80070e6:	741a      	strb	r2, [r3, #16]
 80070e8:	e00d      	b.n	8007106 <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 80070ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007124 <TP_Scan+0x118>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 80070f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <TP_Scan+0x118>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007124 <TP_Scan+0x118>)
 80070f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070fc:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 80070fe:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <TP_Scan+0x118>)
 8007100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007104:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 8007106:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <TP_Scan+0x118>)
 8007108:	7c1b      	ldrb	r3, [r3, #16]
 800710a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800710e:	b2db      	uxtb	r3, r3
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	40020c00 	.word	0x40020c00
 800711c:	20000166 	.word	0x20000166
 8007120:	20000164 	.word	0x20000164
 8007124:	20000158 	.word	0x20000158

08007128 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800712c:	4b11      	ldr	r3, [pc, #68]	@ (8007174 <MX_UART5_Init+0x4c>)
 800712e:	4a12      	ldr	r2, [pc, #72]	@ (8007178 <MX_UART5_Init+0x50>)
 8007130:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <MX_UART5_Init+0x4c>)
 8007134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007138:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800713a:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <MX_UART5_Init+0x4c>)
 800713c:	2200      	movs	r2, #0
 800713e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007140:	4b0c      	ldr	r3, [pc, #48]	@ (8007174 <MX_UART5_Init+0x4c>)
 8007142:	2200      	movs	r2, #0
 8007144:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8007146:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <MX_UART5_Init+0x4c>)
 8007148:	2200      	movs	r2, #0
 800714a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800714c:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <MX_UART5_Init+0x4c>)
 800714e:	220c      	movs	r2, #12
 8007150:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007152:	4b08      	ldr	r3, [pc, #32]	@ (8007174 <MX_UART5_Init+0x4c>)
 8007154:	2200      	movs	r2, #0
 8007156:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007158:	4b06      	ldr	r3, [pc, #24]	@ (8007174 <MX_UART5_Init+0x4c>)
 800715a:	2200      	movs	r2, #0
 800715c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800715e:	4805      	ldr	r0, [pc, #20]	@ (8007174 <MX_UART5_Init+0x4c>)
 8007160:	f005 fd6a 	bl	800cc38 <HAL_UART_Init>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800716a:	f7fe fe83 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800716e:	bf00      	nop
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	2000714c 	.word	0x2000714c
 8007178:	40005000 	.word	0x40005000

0800717c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007180:	4b11      	ldr	r3, [pc, #68]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 8007182:	4a12      	ldr	r2, [pc, #72]	@ (80071cc <MX_USART3_UART_Init+0x50>)
 8007184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007186:	4b10      	ldr	r3, [pc, #64]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 8007188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800718c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800718e:	4b0e      	ldr	r3, [pc, #56]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 8007190:	2200      	movs	r2, #0
 8007192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007194:	4b0c      	ldr	r3, [pc, #48]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 8007196:	2200      	movs	r2, #0
 8007198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800719a:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 800719c:	2200      	movs	r2, #0
 800719e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80071a0:	4b09      	ldr	r3, [pc, #36]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 80071a2:	220c      	movs	r2, #12
 80071a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071a6:	4b08      	ldr	r3, [pc, #32]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80071b2:	4805      	ldr	r0, [pc, #20]	@ (80071c8 <MX_USART3_UART_Init+0x4c>)
 80071b4:	f005 fd40 	bl	800cc38 <HAL_UART_Init>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80071be:	f7fe fe59 	bl	8005e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80071c2:	bf00      	nop
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20007190 	.word	0x20007190
 80071cc:	40004800 	.word	0x40004800

080071d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08c      	sub	sp, #48	@ 0x30
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071d8:	f107 031c 	add.w	r3, r7, #28
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	605a      	str	r2, [r3, #4]
 80071e2:	609a      	str	r2, [r3, #8]
 80071e4:	60da      	str	r2, [r3, #12]
 80071e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a42      	ldr	r2, [pc, #264]	@ (80072f8 <HAL_UART_MspInit+0x128>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d14b      	bne.n	800728a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80071f2:	2300      	movs	r3, #0
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	4b41      	ldr	r3, [pc, #260]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 80071f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fa:	4a40      	ldr	r2, [pc, #256]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 80071fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007200:	6413      	str	r3, [r2, #64]	@ 0x40
 8007202:	4b3e      	ldr	r3, [pc, #248]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	4b3a      	ldr	r3, [pc, #232]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007216:	4a39      	ldr	r2, [pc, #228]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 8007218:	f043 0304 	orr.w	r3, r3, #4
 800721c:	6313      	str	r3, [r2, #48]	@ 0x30
 800721e:	4b37      	ldr	r3, [pc, #220]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	4b33      	ldr	r3, [pc, #204]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007232:	4a32      	ldr	r2, [pc, #200]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 8007234:	f043 0308 	orr.w	r3, r3, #8
 8007238:	6313      	str	r3, [r2, #48]	@ 0x30
 800723a:	4b30      	ldr	r3, [pc, #192]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723e:	f003 0308 	and.w	r3, r3, #8
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800724a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800724c:	2302      	movs	r3, #2
 800724e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007250:	2300      	movs	r3, #0
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007254:	2303      	movs	r3, #3
 8007256:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007258:	2308      	movs	r3, #8
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800725c:	f107 031c 	add.w	r3, r7, #28
 8007260:	4619      	mov	r1, r3
 8007262:	4827      	ldr	r0, [pc, #156]	@ (8007300 <HAL_UART_MspInit+0x130>)
 8007264:	f000 fd40 	bl	8007ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007268:	2304      	movs	r3, #4
 800726a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800726c:	2302      	movs	r3, #2
 800726e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007270:	2300      	movs	r3, #0
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007274:	2303      	movs	r3, #3
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007278:	2308      	movs	r3, #8
 800727a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800727c:	f107 031c 	add.w	r3, r7, #28
 8007280:	4619      	mov	r1, r3
 8007282:	4820      	ldr	r0, [pc, #128]	@ (8007304 <HAL_UART_MspInit+0x134>)
 8007284:	f000 fd30 	bl	8007ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007288:	e031      	b.n	80072ee <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1e      	ldr	r2, [pc, #120]	@ (8007308 <HAL_UART_MspInit+0x138>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d12c      	bne.n	80072ee <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	4b18      	ldr	r3, [pc, #96]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 800729a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729c:	4a17      	ldr	r2, [pc, #92]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 800729e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80072a4:	4b15      	ldr	r3, [pc, #84]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072b0:	2300      	movs	r3, #0
 80072b2:	60bb      	str	r3, [r7, #8]
 80072b4:	4b11      	ldr	r3, [pc, #68]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 80072b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b8:	4a10      	ldr	r2, [pc, #64]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 80072ba:	f043 0302 	orr.w	r3, r3, #2
 80072be:	6313      	str	r3, [r2, #48]	@ 0x30
 80072c0:	4b0e      	ldr	r3, [pc, #56]	@ (80072fc <HAL_UART_MspInit+0x12c>)
 80072c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80072cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80072d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d2:	2302      	movs	r3, #2
 80072d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072da:	2303      	movs	r3, #3
 80072dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80072de:	2307      	movs	r3, #7
 80072e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072e2:	f107 031c 	add.w	r3, r7, #28
 80072e6:	4619      	mov	r1, r3
 80072e8:	4808      	ldr	r0, [pc, #32]	@ (800730c <HAL_UART_MspInit+0x13c>)
 80072ea:	f000 fcfd 	bl	8007ce8 <HAL_GPIO_Init>
}
 80072ee:	bf00      	nop
 80072f0:	3730      	adds	r7, #48	@ 0x30
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	40005000 	.word	0x40005000
 80072fc:	40023800 	.word	0x40023800
 8007300:	40020800 	.word	0x40020800
 8007304:	40020c00 	.word	0x40020c00
 8007308:	40004800 	.word	0x40004800
 800730c:	40020400 	.word	0x40020400

08007310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007314:	480d      	ldr	r0, [pc, #52]	@ (800734c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007316:	490e      	ldr	r1, [pc, #56]	@ (8007350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007318:	4a0e      	ldr	r2, [pc, #56]	@ (8007354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800731a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800731c:	e002      	b.n	8007324 <LoopCopyDataInit>

0800731e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800731e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007322:	3304      	adds	r3, #4

08007324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007328:	d3f9      	bcc.n	800731e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800732a:	4a0b      	ldr	r2, [pc, #44]	@ (8007358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800732c:	4c0b      	ldr	r4, [pc, #44]	@ (800735c <LoopFillZerobss+0x26>)
  movs r3, #0
 800732e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007330:	e001      	b.n	8007336 <LoopFillZerobss>

08007332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007334:	3204      	adds	r2, #4

08007336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007338:	d3fb      	bcc.n	8007332 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800733a:	f7ff fb8b 	bl	8006a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800733e:	f006 f8a1 	bl	800d484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007342:	f7fe fcfb 	bl	8005d3c <main>
  bx  lr    
 8007346:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800734c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007350:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8007354:	08010bc8 	.word	0x08010bc8
  ldr r2, =_sbss
 8007358:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 800735c:	200071d8 	.word	0x200071d8

08007360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007360:	e7fe      	b.n	8007360 <ADC_IRQHandler>
	...

08007364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007368:	4b0e      	ldr	r3, [pc, #56]	@ (80073a4 <HAL_Init+0x40>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a0d      	ldr	r2, [pc, #52]	@ (80073a4 <HAL_Init+0x40>)
 800736e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007372:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007374:	4b0b      	ldr	r3, [pc, #44]	@ (80073a4 <HAL_Init+0x40>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a0a      	ldr	r2, [pc, #40]	@ (80073a4 <HAL_Init+0x40>)
 800737a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800737e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007380:	4b08      	ldr	r3, [pc, #32]	@ (80073a4 <HAL_Init+0x40>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a07      	ldr	r2, [pc, #28]	@ (80073a4 <HAL_Init+0x40>)
 8007386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800738a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800738c:	2003      	movs	r0, #3
 800738e:	f000 f94f 	bl	8007630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007392:	200f      	movs	r0, #15
 8007394:	f000 f808 	bl	80073a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007398:	f7ff fabe 	bl	8006918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40023c00 	.word	0x40023c00

080073a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80073b0:	4b12      	ldr	r3, [pc, #72]	@ (80073fc <HAL_InitTick+0x54>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b12      	ldr	r3, [pc, #72]	@ (8007400 <HAL_InitTick+0x58>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073be:	fbb3 f3f1 	udiv	r3, r3, r1
 80073c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 f967 	bl	800769a <HAL_SYSTICK_Config>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e00e      	b.n	80073f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b0f      	cmp	r3, #15
 80073da:	d80a      	bhi.n	80073f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073dc:	2200      	movs	r2, #0
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	f000 f92f 	bl	8007646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073e8:	4a06      	ldr	r2, [pc, #24]	@ (8007404 <HAL_InitTick+0x5c>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	e000      	b.n	80073f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000154 	.word	0x20000154
 8007400:	20000184 	.word	0x20000184
 8007404:	20000180 	.word	0x20000180

08007408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800740c:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <HAL_IncTick+0x20>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	4b06      	ldr	r3, [pc, #24]	@ (800742c <HAL_IncTick+0x24>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4413      	add	r3, r2
 8007418:	4a04      	ldr	r2, [pc, #16]	@ (800742c <HAL_IncTick+0x24>)
 800741a:	6013      	str	r3, [r2, #0]
}
 800741c:	bf00      	nop
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20000184 	.word	0x20000184
 800742c:	200071d4 	.word	0x200071d4

08007430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  return uwTick;
 8007434:	4b03      	ldr	r3, [pc, #12]	@ (8007444 <HAL_GetTick+0x14>)
 8007436:	681b      	ldr	r3, [r3, #0]
}
 8007438:	4618      	mov	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	200071d4 	.word	0x200071d4

08007448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007450:	f7ff ffee 	bl	8007430 <HAL_GetTick>
 8007454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d005      	beq.n	800746e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007462:	4b0a      	ldr	r3, [pc, #40]	@ (800748c <HAL_Delay+0x44>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800746e:	bf00      	nop
 8007470:	f7ff ffde 	bl	8007430 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	429a      	cmp	r2, r3
 800747e:	d8f7      	bhi.n	8007470 <HAL_Delay+0x28>
  {
  }
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000184 	.word	0x20000184

08007490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074a0:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <__NVIC_SetPriorityGrouping+0x44>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80074ac:	4013      	ands	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80074bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074c2:	4a04      	ldr	r2, [pc, #16]	@ (80074d4 <__NVIC_SetPriorityGrouping+0x44>)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	60d3      	str	r3, [r2, #12]
}
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	e000ed00 	.word	0xe000ed00

080074d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074dc:	4b04      	ldr	r3, [pc, #16]	@ (80074f0 <__NVIC_GetPriorityGrouping+0x18>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	0a1b      	lsrs	r3, r3, #8
 80074e2:	f003 0307 	and.w	r3, r3, #7
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	e000ed00 	.word	0xe000ed00

080074f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007502:	2b00      	cmp	r3, #0
 8007504:	db0b      	blt.n	800751e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	f003 021f 	and.w	r2, r3, #31
 800750c:	4907      	ldr	r1, [pc, #28]	@ (800752c <__NVIC_EnableIRQ+0x38>)
 800750e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	2001      	movs	r0, #1
 8007516:	fa00 f202 	lsl.w	r2, r0, r2
 800751a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	e000e100 	.word	0xe000e100

08007530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800753c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007540:	2b00      	cmp	r3, #0
 8007542:	db0a      	blt.n	800755a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	b2da      	uxtb	r2, r3
 8007548:	490c      	ldr	r1, [pc, #48]	@ (800757c <__NVIC_SetPriority+0x4c>)
 800754a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754e:	0112      	lsls	r2, r2, #4
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	440b      	add	r3, r1
 8007554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007558:	e00a      	b.n	8007570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	b2da      	uxtb	r2, r3
 800755e:	4908      	ldr	r1, [pc, #32]	@ (8007580 <__NVIC_SetPriority+0x50>)
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	3b04      	subs	r3, #4
 8007568:	0112      	lsls	r2, r2, #4
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	440b      	add	r3, r1
 800756e:	761a      	strb	r2, [r3, #24]
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	e000e100 	.word	0xe000e100
 8007580:	e000ed00 	.word	0xe000ed00

08007584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007584:	b480      	push	{r7}
 8007586:	b089      	sub	sp, #36	@ 0x24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f1c3 0307 	rsb	r3, r3, #7
 800759e:	2b04      	cmp	r3, #4
 80075a0:	bf28      	it	cs
 80075a2:	2304      	movcs	r3, #4
 80075a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	3304      	adds	r3, #4
 80075aa:	2b06      	cmp	r3, #6
 80075ac:	d902      	bls.n	80075b4 <NVIC_EncodePriority+0x30>
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	3b03      	subs	r3, #3
 80075b2:	e000      	b.n	80075b6 <NVIC_EncodePriority+0x32>
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075b8:	f04f 32ff 	mov.w	r2, #4294967295
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	43da      	mvns	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	401a      	ands	r2, r3
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075cc:	f04f 31ff 	mov.w	r1, #4294967295
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	fa01 f303 	lsl.w	r3, r1, r3
 80075d6:	43d9      	mvns	r1, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075dc:	4313      	orrs	r3, r2
         );
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3724      	adds	r7, #36	@ 0x24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075fc:	d301      	bcc.n	8007602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075fe:	2301      	movs	r3, #1
 8007600:	e00f      	b.n	8007622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007602:	4a0a      	ldr	r2, [pc, #40]	@ (800762c <SysTick_Config+0x40>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3b01      	subs	r3, #1
 8007608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800760a:	210f      	movs	r1, #15
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	f7ff ff8e 	bl	8007530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007614:	4b05      	ldr	r3, [pc, #20]	@ (800762c <SysTick_Config+0x40>)
 8007616:	2200      	movs	r2, #0
 8007618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800761a:	4b04      	ldr	r3, [pc, #16]	@ (800762c <SysTick_Config+0x40>)
 800761c:	2207      	movs	r2, #7
 800761e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	e000e010 	.word	0xe000e010

08007630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff ff29 	bl	8007490 <__NVIC_SetPriorityGrouping>
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007646:	b580      	push	{r7, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	af00      	add	r7, sp, #0
 800764c:	4603      	mov	r3, r0
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007658:	f7ff ff3e 	bl	80074d8 <__NVIC_GetPriorityGrouping>
 800765c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	6978      	ldr	r0, [r7, #20]
 8007664:	f7ff ff8e 	bl	8007584 <NVIC_EncodePriority>
 8007668:	4602      	mov	r2, r0
 800766a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff ff5d 	bl	8007530 <__NVIC_SetPriority>
}
 8007676:	bf00      	nop
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	4603      	mov	r3, r0
 8007686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff ff31 	bl	80074f4 <__NVIC_EnableIRQ>
}
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff ffa2 	bl	80075ec <SysTick_Config>
 80076a8:	4603      	mov	r3, r0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80076c0:	f7ff feb6 	bl	8007430 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e099      	b.n	8007804 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076f0:	e00f      	b.n	8007712 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076f2:	f7ff fe9d 	bl	8007430 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b05      	cmp	r3, #5
 80076fe:	d908      	bls.n	8007712 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2203      	movs	r2, #3
 800770a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e078      	b.n	8007804 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e8      	bne.n	80076f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4b38      	ldr	r3, [pc, #224]	@ (800780c <HAL_DMA_Init+0x158>)
 800772c:	4013      	ands	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800773e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800774a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007768:	2b04      	cmp	r3, #4
 800776a:	d107      	bne.n	800777c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007774:	4313      	orrs	r3, r2
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f023 0307 	bic.w	r3, r3, #7
 8007792:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d117      	bne.n	80077d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa19 	bl	8007bf0 <DMA_CheckFifoParam>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2240      	movs	r2, #64	@ 0x40
 80077c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80077d2:	2301      	movs	r3, #1
 80077d4:	e016      	b.n	8007804 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9d0 	bl	8007b84 <DMA_CalcBaseAndBitshift>
 80077e4:	4603      	mov	r3, r0
 80077e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ec:	223f      	movs	r2, #63	@ 0x3f
 80077ee:	409a      	lsls	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	f010803f 	.word	0xf010803f

08007810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d004      	beq.n	800782e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2280      	movs	r2, #128	@ 0x80
 8007828:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e00c      	b.n	8007848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2205      	movs	r2, #5
 8007832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0201 	bic.w	r2, r2, #1
 8007844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007860:	4b8e      	ldr	r3, [pc, #568]	@ (8007a9c <HAL_DMA_IRQHandler+0x248>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a8e      	ldr	r2, [pc, #568]	@ (8007aa0 <HAL_DMA_IRQHandler+0x24c>)
 8007866:	fba2 2303 	umull	r2, r3, r2, r3
 800786a:	0a9b      	lsrs	r3, r3, #10
 800786c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800787e:	2208      	movs	r2, #8
 8007880:	409a      	lsls	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4013      	ands	r3, r2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01a      	beq.n	80078c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d013      	beq.n	80078c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0204 	bic.w	r2, r2, #4
 80078a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078ac:	2208      	movs	r2, #8
 80078ae:	409a      	lsls	r2, r3
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b8:	f043 0201 	orr.w	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078c4:	2201      	movs	r2, #1
 80078c6:	409a      	lsls	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d012      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e2:	2201      	movs	r2, #1
 80078e4:	409a      	lsls	r2, r3
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ee:	f043 0202 	orr.w	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078fa:	2204      	movs	r2, #4
 80078fc:	409a      	lsls	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4013      	ands	r3, r2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d012      	beq.n	800792c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007918:	2204      	movs	r2, #4
 800791a:	409a      	lsls	r2, r3
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007924:	f043 0204 	orr.w	r2, r3, #4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007930:	2210      	movs	r2, #16
 8007932:	409a      	lsls	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4013      	ands	r3, r2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d043      	beq.n	80079c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d03c      	beq.n	80079c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800794e:	2210      	movs	r2, #16
 8007950:	409a      	lsls	r2, r3
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d018      	beq.n	8007996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d108      	bne.n	8007984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d024      	beq.n	80079c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
 8007982:	e01f      	b.n	80079c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01b      	beq.n	80079c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4798      	blx	r3
 8007994:	e016      	b.n	80079c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d107      	bne.n	80079b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0208 	bic.w	r2, r2, #8
 80079b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c8:	2220      	movs	r2, #32
 80079ca:	409a      	lsls	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 808f 	beq.w	8007af4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8087 	beq.w	8007af4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ea:	2220      	movs	r2, #32
 80079ec:	409a      	lsls	r2, r3
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b05      	cmp	r3, #5
 80079fc:	d136      	bne.n	8007a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0216 	bic.w	r2, r2, #22
 8007a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	695a      	ldr	r2, [r3, #20]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d103      	bne.n	8007a2e <HAL_DMA_IRQHandler+0x1da>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d007      	beq.n	8007a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0208 	bic.w	r2, r2, #8
 8007a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a42:	223f      	movs	r2, #63	@ 0x3f
 8007a44:	409a      	lsls	r2, r3
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d07e      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
        }
        return;
 8007a6a:	e079      	b.n	8007b60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01d      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10d      	bne.n	8007aa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d031      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
 8007a98:	e02c      	b.n	8007af4 <HAL_DMA_IRQHandler+0x2a0>
 8007a9a:	bf00      	nop
 8007a9c:	20000154 	.word	0x20000154
 8007aa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d023      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	4798      	blx	r3
 8007ab4:	e01e      	b.n	8007af4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10f      	bne.n	8007ae4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0210 	bic.w	r2, r2, #16
 8007ad2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d032      	beq.n	8007b62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d022      	beq.n	8007b4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2205      	movs	r2, #5
 8007b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0201 	bic.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60bb      	str	r3, [r7, #8]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d307      	bcc.n	8007b3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1f2      	bne.n	8007b20 <HAL_DMA_IRQHandler+0x2cc>
 8007b3a:	e000      	b.n	8007b3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007b3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
 8007b5e:	e000      	b.n	8007b62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007b60:	bf00      	nop
    }
  }
}
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007b76:	b2db      	uxtb	r3, r3
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	3b10      	subs	r3, #16
 8007b94:	4a14      	ldr	r2, [pc, #80]	@ (8007be8 <DMA_CalcBaseAndBitshift+0x64>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	091b      	lsrs	r3, r3, #4
 8007b9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b9e:	4a13      	ldr	r2, [pc, #76]	@ (8007bec <DMA_CalcBaseAndBitshift+0x68>)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d909      	bls.n	8007bc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007bba:	f023 0303 	bic.w	r3, r3, #3
 8007bbe:	1d1a      	adds	r2, r3, #4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8007bc4:	e007      	b.n	8007bd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	aaaaaaab 	.word	0xaaaaaaab
 8007bec:	08010b88 	.word	0x08010b88

08007bf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d11f      	bne.n	8007c4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d856      	bhi.n	8007cbe <DMA_CheckFifoParam+0xce>
 8007c10:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <DMA_CheckFifoParam+0x28>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c3b 	.word	0x08007c3b
 8007c20:	08007c29 	.word	0x08007c29
 8007c24:	08007cbf 	.word	0x08007cbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d046      	beq.n	8007cc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c38:	e043      	b.n	8007cc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007c42:	d140      	bne.n	8007cc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c48:	e03d      	b.n	8007cc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c52:	d121      	bne.n	8007c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d837      	bhi.n	8007cca <DMA_CheckFifoParam+0xda>
 8007c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c60 <DMA_CheckFifoParam+0x70>)
 8007c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c60:	08007c71 	.word	0x08007c71
 8007c64:	08007c77 	.word	0x08007c77
 8007c68:	08007c71 	.word	0x08007c71
 8007c6c:	08007c89 	.word	0x08007c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
      break;
 8007c74:	e030      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d025      	beq.n	8007cce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c86:	e022      	b.n	8007cce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007c90:	d11f      	bne.n	8007cd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007c96:	e01c      	b.n	8007cd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d903      	bls.n	8007ca6 <DMA_CheckFifoParam+0xb6>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d003      	beq.n	8007cac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ca4:	e018      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8007caa:	e015      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbc:	e00b      	b.n	8007cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e00a      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e008      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8007cc6:	bf00      	nop
 8007cc8:	e006      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8007cca:	bf00      	nop
 8007ccc:	e004      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8007cce:	bf00      	nop
 8007cd0:	e002      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8007cd2:	bf00      	nop
 8007cd4:	e000      	b.n	8007cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8007cd6:	bf00      	nop
    }
  } 
  
  return status; 
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop

08007ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b089      	sub	sp, #36	@ 0x24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	e16b      	b.n	8007fdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d04:	2201      	movs	r2, #1
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	4013      	ands	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	f040 815a 	bne.w	8007fd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d005      	beq.n	8007d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d130      	bne.n	8007d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	2203      	movs	r2, #3
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d70:	2201      	movs	r2, #1
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	091b      	lsrs	r3, r3, #4
 8007d86:	f003 0201 	and.w	r2, r3, #1
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d017      	beq.n	8007dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	2203      	movs	r2, #3
 8007db4:	fa02 f303 	lsl.w	r3, r2, r3
 8007db8:	43db      	mvns	r3, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d123      	bne.n	8007e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	08da      	lsrs	r2, r3, #3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3208      	adds	r2, #8
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	220f      	movs	r2, #15
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	43db      	mvns	r3, r3
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	4013      	ands	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	08da      	lsrs	r2, r3, #3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3208      	adds	r2, #8
 8007e26:	69b9      	ldr	r1, [r7, #24]
 8007e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	2203      	movs	r2, #3
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	4013      	ands	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 0203 	and.w	r2, r3, #3
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80b4 	beq.w	8007fd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	4b60      	ldr	r3, [pc, #384]	@ (8007ff4 <HAL_GPIO_Init+0x30c>)
 8007e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e76:	4a5f      	ldr	r2, [pc, #380]	@ (8007ff4 <HAL_GPIO_Init+0x30c>)
 8007e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ff4 <HAL_GPIO_Init+0x30c>)
 8007e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8007ff8 <HAL_GPIO_Init+0x310>)
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	089b      	lsrs	r3, r3, #2
 8007e90:	3302      	adds	r3, #2
 8007e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	220f      	movs	r2, #15
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a52      	ldr	r2, [pc, #328]	@ (8007ffc <HAL_GPIO_Init+0x314>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d02b      	beq.n	8007f0e <HAL_GPIO_Init+0x226>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a51      	ldr	r2, [pc, #324]	@ (8008000 <HAL_GPIO_Init+0x318>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d025      	beq.n	8007f0a <HAL_GPIO_Init+0x222>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a50      	ldr	r2, [pc, #320]	@ (8008004 <HAL_GPIO_Init+0x31c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d01f      	beq.n	8007f06 <HAL_GPIO_Init+0x21e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8008008 <HAL_GPIO_Init+0x320>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d019      	beq.n	8007f02 <HAL_GPIO_Init+0x21a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800800c <HAL_GPIO_Init+0x324>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d013      	beq.n	8007efe <HAL_GPIO_Init+0x216>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8008010 <HAL_GPIO_Init+0x328>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00d      	beq.n	8007efa <HAL_GPIO_Init+0x212>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a4c      	ldr	r2, [pc, #304]	@ (8008014 <HAL_GPIO_Init+0x32c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d007      	beq.n	8007ef6 <HAL_GPIO_Init+0x20e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8008018 <HAL_GPIO_Init+0x330>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d101      	bne.n	8007ef2 <HAL_GPIO_Init+0x20a>
 8007eee:	2307      	movs	r3, #7
 8007ef0:	e00e      	b.n	8007f10 <HAL_GPIO_Init+0x228>
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	e00c      	b.n	8007f10 <HAL_GPIO_Init+0x228>
 8007ef6:	2306      	movs	r3, #6
 8007ef8:	e00a      	b.n	8007f10 <HAL_GPIO_Init+0x228>
 8007efa:	2305      	movs	r3, #5
 8007efc:	e008      	b.n	8007f10 <HAL_GPIO_Init+0x228>
 8007efe:	2304      	movs	r3, #4
 8007f00:	e006      	b.n	8007f10 <HAL_GPIO_Init+0x228>
 8007f02:	2303      	movs	r3, #3
 8007f04:	e004      	b.n	8007f10 <HAL_GPIO_Init+0x228>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e002      	b.n	8007f10 <HAL_GPIO_Init+0x228>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <HAL_GPIO_Init+0x228>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	f002 0203 	and.w	r2, r2, #3
 8007f16:	0092      	lsls	r2, r2, #2
 8007f18:	4093      	lsls	r3, r2
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f20:	4935      	ldr	r1, [pc, #212]	@ (8007ff8 <HAL_GPIO_Init+0x310>)
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	089b      	lsrs	r3, r3, #2
 8007f26:	3302      	adds	r3, #2
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800801c <HAL_GPIO_Init+0x334>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	43db      	mvns	r3, r3
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f52:	4a32      	ldr	r2, [pc, #200]	@ (800801c <HAL_GPIO_Init+0x334>)
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f58:	4b30      	ldr	r3, [pc, #192]	@ (800801c <HAL_GPIO_Init+0x334>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	43db      	mvns	r3, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	4013      	ands	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f7c:	4a27      	ldr	r2, [pc, #156]	@ (800801c <HAL_GPIO_Init+0x334>)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007f82:	4b26      	ldr	r3, [pc, #152]	@ (800801c <HAL_GPIO_Init+0x334>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	43db      	mvns	r3, r3
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800801c <HAL_GPIO_Init+0x334>)
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007fac:	4b1b      	ldr	r3, [pc, #108]	@ (800801c <HAL_GPIO_Init+0x334>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007fd0:	4a12      	ldr	r2, [pc, #72]	@ (800801c <HAL_GPIO_Init+0x334>)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b0f      	cmp	r3, #15
 8007fe0:	f67f ae90 	bls.w	8007d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	3724      	adds	r7, #36	@ 0x24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40023800 	.word	0x40023800
 8007ff8:	40013800 	.word	0x40013800
 8007ffc:	40020000 	.word	0x40020000
 8008000:	40020400 	.word	0x40020400
 8008004:	40020800 	.word	0x40020800
 8008008:	40020c00 	.word	0x40020c00
 800800c:	40021000 	.word	0x40021000
 8008010:	40021400 	.word	0x40021400
 8008014:	40021800 	.word	0x40021800
 8008018:	40021c00 	.word	0x40021c00
 800801c:	40013c00 	.word	0x40013c00

08008020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691a      	ldr	r2, [r3, #16]
 8008030:	887b      	ldrh	r3, [r7, #2]
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008038:	2301      	movs	r3, #1
 800803a:	73fb      	strb	r3, [r7, #15]
 800803c:	e001      	b.n	8008042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	807b      	strh	r3, [r7, #2]
 800805c:	4613      	mov	r3, r2
 800805e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008060:	787b      	ldrb	r3, [r7, #1]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008066:	887a      	ldrh	r2, [r7, #2]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800806c:	e003      	b.n	8008076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800806e:	887b      	ldrh	r3, [r7, #2]
 8008070:	041a      	lsls	r2, r3, #16
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	619a      	str	r2, [r3, #24]
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e12b      	b.n	80082ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fd fd96 	bl	8005bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2224      	movs	r2, #36	@ 0x24
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0201 	bic.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80080e8:	f003 f8d6 	bl	800b298 <HAL_RCC_GetPCLK1Freq>
 80080ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	4a81      	ldr	r2, [pc, #516]	@ (80082f8 <HAL_I2C_Init+0x274>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d807      	bhi.n	8008108 <HAL_I2C_Init+0x84>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a80      	ldr	r2, [pc, #512]	@ (80082fc <HAL_I2C_Init+0x278>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	bf94      	ite	ls
 8008100:	2301      	movls	r3, #1
 8008102:	2300      	movhi	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	e006      	b.n	8008116 <HAL_I2C_Init+0x92>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4a7d      	ldr	r2, [pc, #500]	@ (8008300 <HAL_I2C_Init+0x27c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	bf94      	ite	ls
 8008110:	2301      	movls	r3, #1
 8008112:	2300      	movhi	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e0e7      	b.n	80082ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4a78      	ldr	r2, [pc, #480]	@ (8008304 <HAL_I2C_Init+0x280>)
 8008122:	fba2 2303 	umull	r2, r3, r2, r3
 8008126:	0c9b      	lsrs	r3, r3, #18
 8008128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	430a      	orrs	r2, r1
 800813c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4a6a      	ldr	r2, [pc, #424]	@ (80082f8 <HAL_I2C_Init+0x274>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d802      	bhi.n	8008158 <HAL_I2C_Init+0xd4>
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	3301      	adds	r3, #1
 8008156:	e009      	b.n	800816c <HAL_I2C_Init+0xe8>
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800815e:	fb02 f303 	mul.w	r3, r2, r3
 8008162:	4a69      	ldr	r2, [pc, #420]	@ (8008308 <HAL_I2C_Init+0x284>)
 8008164:	fba2 2303 	umull	r2, r3, r2, r3
 8008168:	099b      	lsrs	r3, r3, #6
 800816a:	3301      	adds	r3, #1
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6812      	ldr	r2, [r2, #0]
 8008170:	430b      	orrs	r3, r1
 8008172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800817e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	495c      	ldr	r1, [pc, #368]	@ (80082f8 <HAL_I2C_Init+0x274>)
 8008188:	428b      	cmp	r3, r1
 800818a:	d819      	bhi.n	80081c0 <HAL_I2C_Init+0x13c>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	1e59      	subs	r1, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	fbb1 f3f3 	udiv	r3, r1, r3
 800819a:	1c59      	adds	r1, r3, #1
 800819c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80081a0:	400b      	ands	r3, r1
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <HAL_I2C_Init+0x138>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1e59      	subs	r1, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80081b4:	3301      	adds	r3, #1
 80081b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081ba:	e051      	b.n	8008260 <HAL_I2C_Init+0x1dc>
 80081bc:	2304      	movs	r3, #4
 80081be:	e04f      	b.n	8008260 <HAL_I2C_Init+0x1dc>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d111      	bne.n	80081ec <HAL_I2C_Init+0x168>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	1e58      	subs	r0, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6859      	ldr	r1, [r3, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	440b      	add	r3, r1
 80081d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80081da:	3301      	adds	r3, #1
 80081dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	e012      	b.n	8008212 <HAL_I2C_Init+0x18e>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	1e58      	subs	r0, r3, #1
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6859      	ldr	r1, [r3, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	0099      	lsls	r1, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008202:	3301      	adds	r3, #1
 8008204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008208:	2b00      	cmp	r3, #0
 800820a:	bf0c      	ite	eq
 800820c:	2301      	moveq	r3, #1
 800820e:	2300      	movne	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <HAL_I2C_Init+0x196>
 8008216:	2301      	movs	r3, #1
 8008218:	e022      	b.n	8008260 <HAL_I2C_Init+0x1dc>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10e      	bne.n	8008240 <HAL_I2C_Init+0x1bc>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	1e58      	subs	r0, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6859      	ldr	r1, [r3, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	440b      	add	r3, r1
 8008230:	fbb0 f3f3 	udiv	r3, r0, r3
 8008234:	3301      	adds	r3, #1
 8008236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800823a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800823e:	e00f      	b.n	8008260 <HAL_I2C_Init+0x1dc>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	1e58      	subs	r0, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6859      	ldr	r1, [r3, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	0099      	lsls	r1, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	fbb0 f3f3 	udiv	r3, r0, r3
 8008256:	3301      	adds	r3, #1
 8008258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800825c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	6809      	ldr	r1, [r1, #0]
 8008264:	4313      	orrs	r3, r2
 8008266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69da      	ldr	r2, [r3, #28]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	431a      	orrs	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800828e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	6911      	ldr	r1, [r2, #16]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	68d2      	ldr	r2, [r2, #12]
 800829a:	4311      	orrs	r1, r2
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6812      	ldr	r2, [r2, #0]
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695a      	ldr	r2, [r3, #20]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	000186a0 	.word	0x000186a0
 80082fc:	001e847f 	.word	0x001e847f
 8008300:	003d08ff 	.word	0x003d08ff
 8008304:	431bde83 	.word	0x431bde83
 8008308:	10624dd3 	.word	0x10624dd3

0800830c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af02      	add	r7, sp, #8
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	4608      	mov	r0, r1
 8008316:	4611      	mov	r1, r2
 8008318:	461a      	mov	r2, r3
 800831a:	4603      	mov	r3, r0
 800831c:	817b      	strh	r3, [r7, #10]
 800831e:	460b      	mov	r3, r1
 8008320:	813b      	strh	r3, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008326:	f7ff f883 	bl	8007430 <HAL_GetTick>
 800832a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b20      	cmp	r3, #32
 8008336:	f040 80d9 	bne.w	80084ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	2319      	movs	r3, #25
 8008340:	2201      	movs	r2, #1
 8008342:	496d      	ldr	r1, [pc, #436]	@ (80084f8 <HAL_I2C_Mem_Write+0x1ec>)
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f002 f90d 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008350:	2302      	movs	r3, #2
 8008352:	e0cc      	b.n	80084ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_I2C_Mem_Write+0x56>
 800835e:	2302      	movs	r3, #2
 8008360:	e0c5      	b.n	80084ee <HAL_I2C_Mem_Write+0x1e2>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b01      	cmp	r3, #1
 8008376:	d007      	beq.n	8008388 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0201 	orr.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2221      	movs	r2, #33	@ 0x21
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2240      	movs	r2, #64	@ 0x40
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a3a      	ldr	r2, [r7, #32]
 80083b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80083b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a4d      	ldr	r2, [pc, #308]	@ (80084fc <HAL_I2C_Mem_Write+0x1f0>)
 80083c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083ca:	88f8      	ldrh	r0, [r7, #6]
 80083cc:	893a      	ldrh	r2, [r7, #8]
 80083ce:	8979      	ldrh	r1, [r7, #10]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4603      	mov	r3, r0
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f001 fe9c 	bl	800a118 <I2C_RequestMemoryWrite>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d052      	beq.n	800848c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e081      	b.n	80084ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f002 f98e 	bl	800a710 <I2C_WaitOnTXEFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00d      	beq.n	8008416 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d107      	bne.n	8008412 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e06b      	b.n	80084ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008430:	3b01      	subs	r3, #1
 8008432:	b29a      	uxth	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b04      	cmp	r3, #4
 8008452:	d11b      	bne.n	800848c <HAL_I2C_Mem_Write+0x180>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008458:	2b00      	cmp	r3, #0
 800845a:	d017      	beq.n	800848c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008460:	781a      	ldrb	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008476:	3b01      	subs	r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008482:	b29b      	uxth	r3, r3
 8008484:	3b01      	subs	r3, #1
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1aa      	bne.n	80083ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f002 f97a 	bl	800a792 <I2C_WaitOnBTFFlagUntilTimeout>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00d      	beq.n	80084c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d107      	bne.n	80084bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e016      	b.n	80084ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	e000      	b.n	80084ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80084ec:	2302      	movs	r3, #2
  }
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	00100002 	.word	0x00100002
 80084fc:	ffff0000 	.word	0xffff0000

08008500 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08c      	sub	sp, #48	@ 0x30
 8008504:	af02      	add	r7, sp, #8
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	4608      	mov	r0, r1
 800850a:	4611      	mov	r1, r2
 800850c:	461a      	mov	r2, r3
 800850e:	4603      	mov	r3, r0
 8008510:	817b      	strh	r3, [r7, #10]
 8008512:	460b      	mov	r3, r1
 8008514:	813b      	strh	r3, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800851a:	f7fe ff89 	bl	8007430 <HAL_GetTick>
 800851e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b20      	cmp	r3, #32
 800852a:	f040 8208 	bne.w	800893e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	2319      	movs	r3, #25
 8008534:	2201      	movs	r2, #1
 8008536:	497b      	ldr	r1, [pc, #492]	@ (8008724 <HAL_I2C_Mem_Read+0x224>)
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f002 f813 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008544:	2302      	movs	r3, #2
 8008546:	e1fb      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800854e:	2b01      	cmp	r3, #1
 8008550:	d101      	bne.n	8008556 <HAL_I2C_Mem_Read+0x56>
 8008552:	2302      	movs	r3, #2
 8008554:	e1f4      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b01      	cmp	r3, #1
 800856a:	d007      	beq.n	800857c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0201 	orr.w	r2, r2, #1
 800857a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800858a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2222      	movs	r2, #34	@ 0x22
 8008590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2240      	movs	r2, #64	@ 0x40
 8008598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80085ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4a5b      	ldr	r2, [pc, #364]	@ (8008728 <HAL_I2C_Mem_Read+0x228>)
 80085bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085be:	88f8      	ldrh	r0, [r7, #6]
 80085c0:	893a      	ldrh	r2, [r7, #8]
 80085c2:	8979      	ldrh	r1, [r7, #10]
 80085c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	4603      	mov	r3, r0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f001 fe38 	bl	800a244 <I2C_RequestMemoryRead>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e1b0      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d113      	bne.n	800860e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085e6:	2300      	movs	r3, #0
 80085e8:	623b      	str	r3, [r7, #32]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	623b      	str	r3, [r7, #32]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	623b      	str	r3, [r7, #32]
 80085fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e184      	b.n	8008918 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008612:	2b01      	cmp	r3, #1
 8008614:	d11b      	bne.n	800864e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	e164      	b.n	8008918 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008652:	2b02      	cmp	r3, #2
 8008654:	d11b      	bne.n	800868e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008676:	2300      	movs	r3, #0
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	e144      	b.n	8008918 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80086a4:	e138      	b.n	8008918 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	f200 80f1 	bhi.w	8008892 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d123      	bne.n	8008700 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f002 f8db 	bl	800a878 <I2C_WaitOnRXNEFlagUntilTimeout>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e139      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	691a      	ldr	r2, [r3, #16]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	b2d2      	uxtb	r2, r2
 80086d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	3b01      	subs	r3, #1
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086fe:	e10b      	b.n	8008918 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008704:	2b02      	cmp	r3, #2
 8008706:	d14e      	bne.n	80087a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870e:	2200      	movs	r2, #0
 8008710:	4906      	ldr	r1, [pc, #24]	@ (800872c <HAL_I2C_Mem_Read+0x22c>)
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f001 ff26 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d008      	beq.n	8008730 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e10e      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
 8008722:	bf00      	nop
 8008724:	00100002 	.word	0x00100002
 8008728:	ffff0000 	.word	0xffff0000
 800872c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800873e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691a      	ldr	r2, [r3, #16]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b01      	subs	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800878e:	3b01      	subs	r3, #1
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800879a:	b29b      	uxth	r3, r3
 800879c:	3b01      	subs	r3, #1
 800879e:	b29a      	uxth	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80087a4:	e0b8      	b.n	8008918 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ac:	2200      	movs	r2, #0
 80087ae:	4966      	ldr	r1, [pc, #408]	@ (8008948 <HAL_I2C_Mem_Read+0x448>)
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f001 fed7 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e0bf      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087da:	b2d2      	uxtb	r2, r2
 80087dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008808:	2200      	movs	r2, #0
 800880a:	494f      	ldr	r1, [pc, #316]	@ (8008948 <HAL_I2C_Mem_Read+0x448>)
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f001 fea9 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e091      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800882a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691a      	ldr	r2, [r3, #16]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008890:	e042      	b.n	8008918 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008894:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f001 ffee 	bl	800a878 <I2C_WaitOnRXNEFlagUntilTimeout>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e04c      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b0:	b2d2      	uxtb	r2, r2
 80088b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	3b01      	subs	r3, #1
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	f003 0304 	and.w	r3, r3, #4
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d118      	bne.n	8008918 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f0:	b2d2      	uxtb	r2, r2
 80088f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008902:	3b01      	subs	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800891c:	2b00      	cmp	r3, #0
 800891e:	f47f aec2 	bne.w	80086a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2220      	movs	r2, #32
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	e000      	b.n	8008940 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800893e:	2302      	movs	r3, #2
  }
}
 8008940:	4618      	mov	r0, r3
 8008942:	3728      	adds	r7, #40	@ 0x28
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	00010004 	.word	0x00010004

0800894c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008964:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800896c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008974:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	2b10      	cmp	r3, #16
 800897a:	d003      	beq.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b40      	cmp	r3, #64	@ 0x40
 8008980:	f040 80c1 	bne.w	8008b06 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10d      	bne.n	80089ba <HAL_I2C_EV_IRQHandler+0x6e>
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80089a4:	d003      	beq.n	80089ae <HAL_I2C_EV_IRQHandler+0x62>
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80089ac:	d101      	bne.n	80089b2 <HAL_I2C_EV_IRQHandler+0x66>
 80089ae:	2301      	movs	r3, #1
 80089b0:	e000      	b.n	80089b4 <HAL_I2C_EV_IRQHandler+0x68>
 80089b2:	2300      	movs	r3, #0
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	f000 8132 	beq.w	8008c1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00c      	beq.n	80089de <HAL_I2C_EV_IRQHandler+0x92>
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	0a5b      	lsrs	r3, r3, #9
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d006      	beq.n	80089de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 ffd6 	bl	800a982 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fd83 	bl	80094e2 <I2C_Master_SB>
 80089dc:	e092      	b.n	8008b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	08db      	lsrs	r3, r3, #3
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <HAL_I2C_EV_IRQHandler+0xb2>
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	0a5b      	lsrs	r3, r3, #9
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fdf9 	bl	80095ee <I2C_Master_ADD10>
 80089fc:	e082      	b.n	8008b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d009      	beq.n	8008a1e <HAL_I2C_EV_IRQHandler+0xd2>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	0a5b      	lsrs	r3, r3, #9
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fe13 	bl	8009642 <I2C_Master_ADDR>
 8008a1c:	e072      	b.n	8008b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	089b      	lsrs	r3, r3, #2
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d03b      	beq.n	8008aa2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a38:	f000 80f3 	beq.w	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	09db      	lsrs	r3, r3, #7
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00f      	beq.n	8008a68 <HAL_I2C_EV_IRQHandler+0x11c>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	0a9b      	lsrs	r3, r3, #10
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <HAL_I2C_EV_IRQHandler+0x11c>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	089b      	lsrs	r3, r3, #2
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d103      	bne.n	8008a68 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f9f3 	bl	8008e4c <I2C_MasterTransmit_TXE>
 8008a66:	e04d      	b.n	8008b04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	089b      	lsrs	r3, r3, #2
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80d6 	beq.w	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	0a5b      	lsrs	r3, r3, #9
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80cf 	beq.w	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	2b21      	cmp	r3, #33	@ 0x21
 8008a88:	d103      	bne.n	8008a92 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa7a 	bl	8008f84 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a90:	e0c7      	b.n	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	2b40      	cmp	r3, #64	@ 0x40
 8008a96:	f040 80c4 	bne.w	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fae8 	bl	8009070 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008aa0:	e0bf      	b.n	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ab0:	f000 80b7 	beq.w	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	099b      	lsrs	r3, r3, #6
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00f      	beq.n	8008ae0 <HAL_I2C_EV_IRQHandler+0x194>
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	0a9b      	lsrs	r3, r3, #10
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d009      	beq.n	8008ae0 <HAL_I2C_EV_IRQHandler+0x194>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	089b      	lsrs	r3, r3, #2
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d103      	bne.n	8008ae0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fb5d 	bl	8009198 <I2C_MasterReceive_RXNE>
 8008ade:	e011      	b.n	8008b04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	089b      	lsrs	r3, r3, #2
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 809a 	beq.w	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	0a5b      	lsrs	r3, r3, #9
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 8093 	beq.w	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fc06 	bl	800930e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b02:	e08e      	b.n	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008b04:	e08d      	b.n	8008c22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	61fb      	str	r3, [r7, #28]
 8008b16:	e007      	b.n	8008b28 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d012      	beq.n	8008b5a <HAL_I2C_EV_IRQHandler+0x20e>
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	0a5b      	lsrs	r3, r3, #9
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00c      	beq.n	8008b5a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008b50:	69b9      	ldr	r1, [r7, #24]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 ffc4 	bl	8009ae0 <I2C_Slave_ADDR>
 8008b58:	e066      	b.n	8008c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	091b      	lsrs	r3, r3, #4
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <HAL_I2C_EV_IRQHandler+0x22e>
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	0a5b      	lsrs	r3, r3, #9
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fffe 	bl	8009b74 <I2C_Slave_STOPF>
 8008b78:	e056      	b.n	8008c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b21      	cmp	r3, #33	@ 0x21
 8008b7e:	d002      	beq.n	8008b86 <HAL_I2C_EV_IRQHandler+0x23a>
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b29      	cmp	r3, #41	@ 0x29
 8008b84:	d125      	bne.n	8008bd2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	09db      	lsrs	r3, r3, #7
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00f      	beq.n	8008bb2 <HAL_I2C_EV_IRQHandler+0x266>
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	0a9b      	lsrs	r3, r3, #10
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d009      	beq.n	8008bb2 <HAL_I2C_EV_IRQHandler+0x266>
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	089b      	lsrs	r3, r3, #2
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d103      	bne.n	8008bb2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 feda 	bl	8009964 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008bb0:	e039      	b.n	8008c26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	089b      	lsrs	r3, r3, #2
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d033      	beq.n	8008c26 <HAL_I2C_EV_IRQHandler+0x2da>
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	0a5b      	lsrs	r3, r3, #9
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d02d      	beq.n	8008c26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 ff07 	bl	80099de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008bd0:	e029      	b.n	8008c26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	099b      	lsrs	r3, r3, #6
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00f      	beq.n	8008bfe <HAL_I2C_EV_IRQHandler+0x2b2>
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	0a9b      	lsrs	r3, r3, #10
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <HAL_I2C_EV_IRQHandler+0x2b2>
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	089b      	lsrs	r3, r3, #2
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d103      	bne.n	8008bfe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 ff12 	bl	8009a20 <I2C_SlaveReceive_RXNE>
 8008bfc:	e014      	b.n	8008c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	089b      	lsrs	r3, r3, #2
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00e      	beq.n	8008c28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	0a5b      	lsrs	r3, r3, #9
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 ff40 	bl	8009a9c <I2C_SlaveReceive_BTF>
 8008c1c:	e004      	b.n	8008c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008c1e:	bf00      	nop
 8008c20:	e002      	b.n	8008c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c22:	bf00      	nop
 8008c24:	e000      	b.n	8008c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b08a      	sub	sp, #40	@ 0x28
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	0a1b      	lsrs	r3, r3, #8
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00e      	beq.n	8008c7c <HAL_I2C_ER_IRQHandler+0x4e>
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	0a1b      	lsrs	r3, r3, #8
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	f043 0301 	orr.w	r3, r3, #1
 8008c70:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c7a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	0a5b      	lsrs	r3, r3, #9
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00e      	beq.n	8008ca6 <HAL_I2C_ER_IRQHandler+0x78>
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	0a1b      	lsrs	r3, r3, #8
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c96:	f043 0302 	orr.w	r3, r3, #2
 8008c9a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8008ca4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	0a9b      	lsrs	r3, r3, #10
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d03f      	beq.n	8008d32 <HAL_I2C_ER_IRQHandler+0x104>
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	0a1b      	lsrs	r3, r3, #8
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d039      	beq.n	8008d32 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008cbe:	7efb      	ldrb	r3, [r7, #27]
 8008cc0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cd0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008cd8:	7ebb      	ldrb	r3, [r7, #26]
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	d112      	bne.n	8008d04 <HAL_I2C_ER_IRQHandler+0xd6>
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10f      	bne.n	8008d04 <HAL_I2C_ER_IRQHandler+0xd6>
 8008ce4:	7cfb      	ldrb	r3, [r7, #19]
 8008ce6:	2b21      	cmp	r3, #33	@ 0x21
 8008ce8:	d008      	beq.n	8008cfc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008cea:	7cfb      	ldrb	r3, [r7, #19]
 8008cec:	2b29      	cmp	r3, #41	@ 0x29
 8008cee:	d005      	beq.n	8008cfc <HAL_I2C_ER_IRQHandler+0xce>
 8008cf0:	7cfb      	ldrb	r3, [r7, #19]
 8008cf2:	2b28      	cmp	r3, #40	@ 0x28
 8008cf4:	d106      	bne.n	8008d04 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b21      	cmp	r3, #33	@ 0x21
 8008cfa:	d103      	bne.n	8008d04 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 f869 	bl	8009dd4 <I2C_Slave_AF>
 8008d02:	e016      	b.n	8008d32 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d10:	f043 0304 	orr.w	r3, r3, #4
 8008d14:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008d16:	7efb      	ldrb	r3, [r7, #27]
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d002      	beq.n	8008d22 <HAL_I2C_ER_IRQHandler+0xf4>
 8008d1c:	7efb      	ldrb	r3, [r7, #27]
 8008d1e:	2b40      	cmp	r3, #64	@ 0x40
 8008d20:	d107      	bne.n	8008d32 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	0adb      	lsrs	r3, r3, #11
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00e      	beq.n	8008d5c <HAL_I2C_ER_IRQHandler+0x12e>
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	0a1b      	lsrs	r3, r3, #8
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d008      	beq.n	8008d5c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	f043 0308 	orr.w	r3, r3, #8
 8008d50:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8008d5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d008      	beq.n	8008d74 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f001 f8a0 	bl	8009eb4 <I2C_ITError>
  }
}
 8008d74:	bf00      	nop
 8008d76:	3728      	adds	r7, #40	@ 0x28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d150      	bne.n	8008f14 <I2C_MasterTransmit_TXE+0xc8>
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	2b21      	cmp	r3, #33	@ 0x21
 8008e76:	d14d      	bne.n	8008f14 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b08      	cmp	r3, #8
 8008e7c:	d01d      	beq.n	8008eba <I2C_MasterTransmit_TXE+0x6e>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	d01a      	beq.n	8008eba <I2C_MasterTransmit_TXE+0x6e>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008e8a:	d016      	beq.n	8008eba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008e9a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2211      	movs	r2, #17
 8008ea0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff ff62 	bl	8008d7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008eb8:	e060      	b.n	8008f7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ec8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ed8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b40      	cmp	r3, #64	@ 0x40
 8008ef2:	d107      	bne.n	8008f04 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff ff7d 	bl	8008dfc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f02:	e03b      	b.n	8008f7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff ff35 	bl	8008d7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f12:	e033      	b.n	8008f7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b21      	cmp	r3, #33	@ 0x21
 8008f18:	d005      	beq.n	8008f26 <I2C_MasterTransmit_TXE+0xda>
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b40      	cmp	r3, #64	@ 0x40
 8008f1e:	d12d      	bne.n	8008f7c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	2b22      	cmp	r3, #34	@ 0x22
 8008f24:	d12a      	bne.n	8008f7c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d108      	bne.n	8008f42 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f3e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008f40:	e01c      	b.n	8008f7c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b40      	cmp	r3, #64	@ 0x40
 8008f4c:	d103      	bne.n	8008f56 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f88e 	bl	8009070 <I2C_MemoryTransmit_TXE_BTF>
}
 8008f54:	e012      	b.n	8008f7c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008f7a:	e7ff      	b.n	8008f7c <I2C_MasterTransmit_TXE+0x130>
 8008f7c:	bf00      	nop
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f90:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b21      	cmp	r3, #33	@ 0x21
 8008f9c:	d164      	bne.n	8009068 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d012      	beq.n	8008fce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	781a      	ldrb	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008fcc:	e04c      	b.n	8009068 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d01d      	beq.n	8009010 <I2C_MasterTransmit_BTF+0x8c>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b20      	cmp	r3, #32
 8008fd8:	d01a      	beq.n	8009010 <I2C_MasterTransmit_BTF+0x8c>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008fe0:	d016      	beq.n	8009010 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ff0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2211      	movs	r2, #17
 8008ff6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff feb7 	bl	8008d7c <HAL_I2C_MasterTxCpltCallback>
}
 800900e:	e02b      	b.n	8009068 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800901e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800902e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b40      	cmp	r3, #64	@ 0x40
 8009048:	d107      	bne.n	800905a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff fed2 	bl	8008dfc <HAL_I2C_MemTxCpltCallback>
}
 8009058:	e006      	b.n	8009068 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fe8a 	bl	8008d7c <HAL_I2C_MasterTxCpltCallback>
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800907e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009084:	2b00      	cmp	r3, #0
 8009086:	d11d      	bne.n	80090c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908c:	2b01      	cmp	r3, #1
 800908e:	d10b      	bne.n	80090a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009094:	b2da      	uxtb	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a0:	1c9a      	adds	r2, r3, #2
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80090a6:	e073      	b.n	8009190 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	121b      	asrs	r3, r3, #8
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80090c2:	e065      	b.n	8009190 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d10b      	bne.n	80090e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80090e2:	e055      	b.n	8009190 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d151      	bne.n	8009190 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	2b22      	cmp	r3, #34	@ 0x22
 80090f0:	d10d      	bne.n	800910e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009100:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800910c:	e040      	b.n	8009190 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009112:	b29b      	uxth	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d015      	beq.n	8009144 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	2b21      	cmp	r3, #33	@ 0x21
 800911c:	d112      	bne.n	8009144 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009122:	781a      	ldrb	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009142:	e025      	b.n	8009190 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d120      	bne.n	8009190 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	2b21      	cmp	r3, #33	@ 0x21
 8009152:	d11d      	bne.n	8009190 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009162:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009172:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2220      	movs	r2, #32
 800917e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff fe36 	bl	8008dfc <HAL_I2C_MemTxCpltCallback>
}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b22      	cmp	r3, #34	@ 0x22
 80091aa:	f040 80ac 	bne.w	8009306 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d921      	bls.n	8009200 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	691a      	ldr	r2, [r3, #16]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c6:	b2d2      	uxtb	r2, r2
 80091c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091d8:	b29b      	uxth	r3, r3
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	f040 808c 	bne.w	8009306 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091fc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80091fe:	e082      	b.n	8009306 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009204:	2b02      	cmp	r3, #2
 8009206:	d075      	beq.n	80092f4 <I2C_MasterReceive_RXNE+0x15c>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d002      	beq.n	8009214 <I2C_MasterReceive_RXNE+0x7c>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d16f      	bne.n	80092f4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 fafd 	bl	800a814 <I2C_WaitOnSTOPRequestThroughIT>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d142      	bne.n	80092a6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800922e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800923e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	691a      	ldr	r2, [r3, #16]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924a:	b2d2      	uxtb	r2, r2
 800924c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b40      	cmp	r3, #64	@ 0x40
 8009278:	d10a      	bne.n	8009290 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff fdc1 	bl	8008e10 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800928e:	e03a      	b.n	8009306 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2212      	movs	r2, #18
 800929c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff fd76 	bl	8008d90 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80092a4:	e02f      	b.n	8009306 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80092b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c0:	b2d2      	uxtb	r2, r2
 80092c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff fd99 	bl	8008e24 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80092f2:	e008      	b.n	8009306 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009302:	605a      	str	r2, [r3, #4]
}
 8009304:	e7ff      	b.n	8009306 <I2C_MasterReceive_RXNE+0x16e>
 8009306:	bf00      	nop
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b04      	cmp	r3, #4
 8009324:	d11b      	bne.n	800935e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009334:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009352:	b29b      	uxth	r3, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	b29a      	uxth	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800935c:	e0bd      	b.n	80094da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009362:	b29b      	uxth	r3, r3
 8009364:	2b03      	cmp	r3, #3
 8009366:	d129      	bne.n	80093bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009376:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b04      	cmp	r3, #4
 800937c:	d00a      	beq.n	8009394 <I2C_MasterReceive_BTF+0x86>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d007      	beq.n	8009394 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009392:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691a      	ldr	r2, [r3, #16]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939e:	b2d2      	uxtb	r2, r2
 80093a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80093ba:	e08e      	b.n	80094da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d176      	bne.n	80094b4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d002      	beq.n	80093d2 <I2C_MasterReceive_BTF+0xc4>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b10      	cmp	r3, #16
 80093d0:	d108      	bne.n	80093e4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	e019      	b.n	8009418 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	d002      	beq.n	80093f0 <I2C_MasterReceive_BTF+0xe2>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d108      	bne.n	8009402 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	e00a      	b.n	8009418 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b10      	cmp	r3, #16
 8009406:	d007      	beq.n	8009418 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009416:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691a      	ldr	r2, [r3, #16]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009422:	b2d2      	uxtb	r2, r2
 8009424:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691a      	ldr	r2, [r3, #16]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800945a:	b29b      	uxth	r3, r3
 800945c:	3b01      	subs	r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009472:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b40      	cmp	r3, #64	@ 0x40
 8009486:	d10a      	bne.n	800949e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff fcba 	bl	8008e10 <HAL_I2C_MemRxCpltCallback>
}
 800949c:	e01d      	b.n	80094da <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2212      	movs	r2, #18
 80094aa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff fc6f 	bl	8008d90 <HAL_I2C_MasterRxCpltCallback>
}
 80094b2:	e012      	b.n	80094da <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	691a      	ldr	r2, [r3, #16]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094be:	b2d2      	uxtb	r2, r2
 80094c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b40      	cmp	r3, #64	@ 0x40
 80094f4:	d117      	bne.n	8009526 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d109      	bne.n	8009512 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009502:	b2db      	uxtb	r3, r3
 8009504:	461a      	mov	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800950e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009510:	e067      	b.n	80095e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009516:	b2db      	uxtb	r3, r3
 8009518:	f043 0301 	orr.w	r3, r3, #1
 800951c:	b2da      	uxtb	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	611a      	str	r2, [r3, #16]
}
 8009524:	e05d      	b.n	80095e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800952e:	d133      	bne.n	8009598 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b21      	cmp	r3, #33	@ 0x21
 800953a:	d109      	bne.n	8009550 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009540:	b2db      	uxtb	r3, r3
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800954c:	611a      	str	r2, [r3, #16]
 800954e:	e008      	b.n	8009562 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009554:	b2db      	uxtb	r3, r3
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	b2da      	uxtb	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <I2C_Master_SB+0x92>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d108      	bne.n	8009586 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d032      	beq.n	80095e2 <I2C_Master_SB+0x100>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d02d      	beq.n	80095e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009594:	605a      	str	r2, [r3, #4]
}
 8009596:	e024      	b.n	80095e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10e      	bne.n	80095be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	11db      	asrs	r3, r3, #7
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	f003 0306 	and.w	r3, r3, #6
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f063 030f 	orn	r3, r3, #15
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	611a      	str	r2, [r3, #16]
}
 80095bc:	e011      	b.n	80095e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d10d      	bne.n	80095e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	11db      	asrs	r3, r3, #7
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f003 0306 	and.w	r3, r3, #6
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	f063 030e 	orn	r3, r3, #14
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	611a      	str	r2, [r3, #16]
}
 80095e2:	bf00      	nop
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009606:	2b00      	cmp	r3, #0
 8009608:	d004      	beq.n	8009614 <I2C_Master_ADD10+0x26>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009610:	2b00      	cmp	r3, #0
 8009612:	d108      	bne.n	8009626 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00c      	beq.n	8009636 <I2C_Master_ADD10+0x48>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009622:	2b00      	cmp	r3, #0
 8009624:	d007      	beq.n	8009636 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009634:	605a      	str	r2, [r3, #4]
  }
}
 8009636:	bf00      	nop
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009642:	b480      	push	{r7}
 8009644:	b091      	sub	sp, #68	@ 0x44
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009650:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800965e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b22      	cmp	r3, #34	@ 0x22
 800966a:	f040 8169 	bne.w	8009940 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10f      	bne.n	8009696 <I2C_Master_ADDR+0x54>
 8009676:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800967a:	2b40      	cmp	r3, #64	@ 0x40
 800967c:	d10b      	bne.n	8009696 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800967e:	2300      	movs	r3, #0
 8009680:	633b      	str	r3, [r7, #48]	@ 0x30
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	633b      	str	r3, [r7, #48]	@ 0x30
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	633b      	str	r3, [r7, #48]	@ 0x30
 8009692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009694:	e160      	b.n	8009958 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800969a:	2b00      	cmp	r3, #0
 800969c:	d11d      	bne.n	80096da <I2C_Master_ADDR+0x98>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096a6:	d118      	bne.n	80096da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096a8:	2300      	movs	r3, #0
 80096aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80096d8:	e13e      	b.n	8009958 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096de:	b29b      	uxth	r3, r3
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d113      	bne.n	800970c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096e4:	2300      	movs	r3, #0
 80096e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	e115      	b.n	8009938 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009710:	b29b      	uxth	r3, r3
 8009712:	2b01      	cmp	r3, #1
 8009714:	f040 808a 	bne.w	800982c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800971e:	d137      	bne.n	8009790 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800972e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800973a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800973e:	d113      	bne.n	8009768 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800974e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009750:	2300      	movs	r3, #0
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	627b      	str	r3, [r7, #36]	@ 0x24
 8009764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009766:	e0e7      	b.n	8009938 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009768:	2300      	movs	r3, #0
 800976a:	623b      	str	r3, [r7, #32]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	623b      	str	r3, [r7, #32]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	623b      	str	r3, [r7, #32]
 800977c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	e0d3      	b.n	8009938 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	2b08      	cmp	r3, #8
 8009794:	d02e      	beq.n	80097f4 <I2C_Master_ADDR+0x1b2>
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	2b20      	cmp	r3, #32
 800979a:	d02b      	beq.n	80097f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800979c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979e:	2b12      	cmp	r3, #18
 80097a0:	d102      	bne.n	80097a8 <I2C_Master_ADDR+0x166>
 80097a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d125      	bne.n	80097f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d00e      	beq.n	80097cc <I2C_Master_ADDR+0x18a>
 80097ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d00b      	beq.n	80097cc <I2C_Master_ADDR+0x18a>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b6:	2b10      	cmp	r3, #16
 80097b8:	d008      	beq.n	80097cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	e007      	b.n	80097dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80097da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097dc:	2300      	movs	r3, #0
 80097de:	61fb      	str	r3, [r7, #28]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	61fb      	str	r3, [r7, #28]
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	e0a1      	b.n	8009938 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009802:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009804:	2300      	movs	r3, #0
 8009806:	61bb      	str	r3, [r7, #24]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	61bb      	str	r3, [r7, #24]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	61bb      	str	r3, [r7, #24]
 8009818:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e085      	b.n	8009938 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009830:	b29b      	uxth	r3, r3
 8009832:	2b02      	cmp	r3, #2
 8009834:	d14d      	bne.n	80098d2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009838:	2b04      	cmp	r3, #4
 800983a:	d016      	beq.n	800986a <I2C_Master_ADDR+0x228>
 800983c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983e:	2b02      	cmp	r3, #2
 8009840:	d013      	beq.n	800986a <I2C_Master_ADDR+0x228>
 8009842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009844:	2b10      	cmp	r3, #16
 8009846:	d010      	beq.n	800986a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009856:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	e007      	b.n	800987a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009878:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009888:	d117      	bne.n	80098ba <I2C_Master_ADDR+0x278>
 800988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009890:	d00b      	beq.n	80098aa <I2C_Master_ADDR+0x268>
 8009892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009894:	2b01      	cmp	r3, #1
 8009896:	d008      	beq.n	80098aa <I2C_Master_ADDR+0x268>
 8009898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989a:	2b08      	cmp	r3, #8
 800989c:	d005      	beq.n	80098aa <I2C_Master_ADDR+0x268>
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	2b10      	cmp	r3, #16
 80098a2:	d002      	beq.n	80098aa <I2C_Master_ADDR+0x268>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	2b20      	cmp	r3, #32
 80098a8:	d107      	bne.n	80098ba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80098b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098ba:	2300      	movs	r3, #0
 80098bc:	617b      	str	r3, [r7, #20]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	617b      	str	r3, [r7, #20]
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	e032      	b.n	8009938 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098f0:	d117      	bne.n	8009922 <I2C_Master_ADDR+0x2e0>
 80098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80098f8:	d00b      	beq.n	8009912 <I2C_Master_ADDR+0x2d0>
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d008      	beq.n	8009912 <I2C_Master_ADDR+0x2d0>
 8009900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009902:	2b08      	cmp	r3, #8
 8009904:	d005      	beq.n	8009912 <I2C_Master_ADDR+0x2d0>
 8009906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009908:	2b10      	cmp	r3, #16
 800990a:	d002      	beq.n	8009912 <I2C_Master_ADDR+0x2d0>
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	2b20      	cmp	r3, #32
 8009910:	d107      	bne.n	8009922 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009920:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009922:	2300      	movs	r3, #0
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	613b      	str	r3, [r7, #16]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800993e:	e00b      	b.n	8009958 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009940:	2300      	movs	r3, #0
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	68fb      	ldr	r3, [r7, #12]
}
 8009956:	e7ff      	b.n	8009958 <I2C_Master_ADDR+0x316>
 8009958:	bf00      	nop
 800995a:	3744      	adds	r7, #68	@ 0x44
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009972:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02b      	beq.n	80099d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009982:	781a      	ldrb	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d114      	bne.n	80099d6 <I2C_SlaveTransmit_TXE+0x72>
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b29      	cmp	r3, #41	@ 0x29
 80099b0:	d111      	bne.n	80099d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2221      	movs	r2, #33	@ 0x21
 80099c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2228      	movs	r2, #40	@ 0x28
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7ff f9e7 	bl	8008da4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80099d6:	bf00      	nop
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d011      	beq.n	8009a14 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f4:	781a      	ldrb	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d02c      	beq.n	8009a94 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	691a      	ldr	r2, [r3, #16]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d114      	bne.n	8009a94 <I2C_SlaveReceive_RXNE+0x74>
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a6e:	d111      	bne.n	8009a94 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a7e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2222      	movs	r2, #34	@ 0x22
 8009a84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2228      	movs	r2, #40	@ 0x28
 8009a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff f992 	bl	8008db8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009a94:	bf00      	nop
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d012      	beq.n	8009ad4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab8:	b2d2      	uxtb	r2, r2
 8009aba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	3b01      	subs	r3, #1
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009afa:	2b28      	cmp	r3, #40	@ 0x28
 8009afc:	d127      	bne.n	8009b4e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b0c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	089b      	lsrs	r3, r3, #2
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	09db      	lsrs	r3, r3, #7
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d103      	bne.n	8009b32 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	81bb      	strh	r3, [r7, #12]
 8009b30:	e002      	b.n	8009b38 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009b40:	89ba      	ldrh	r2, [r7, #12]
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff f940 	bl	8008dcc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009b4c:	e00e      	b.n	8009b6c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60bb      	str	r3, [r7, #8]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	60bb      	str	r3, [r7, #8]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	60bb      	str	r3, [r7, #8]
 8009b62:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009b92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009b94:	2300      	movs	r3, #0
 8009b96:	60bb      	str	r3, [r7, #8]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	60bb      	str	r3, [r7, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f042 0201 	orr.w	r2, r2, #1
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bc0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bd0:	d172      	bne.n	8009cb8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	2b22      	cmp	r3, #34	@ 0x22
 8009bd6:	d002      	beq.n	8009bde <I2C_Slave_STOPF+0x6a>
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bdc:	d135      	bne.n	8009c4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bfa:	f043 0204 	orr.w	r2, r3, #4
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fd ffa6 	bl	8007b68 <HAL_DMA_GetState>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d049      	beq.n	8009cb6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c26:	4a69      	ldr	r2, [pc, #420]	@ (8009dcc <I2C_Slave_STOPF+0x258>)
 8009c28:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fd fdee 	bl	8007810 <HAL_DMA_Abort_IT>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d03d      	beq.n	8009cb6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009c44:	4610      	mov	r0, r2
 8009c46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009c48:	e035      	b.n	8009cb6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d005      	beq.n	8009c6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c66:	f043 0204 	orr.w	r2, r3, #4
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fd ff70 	bl	8007b68 <HAL_DMA_GetState>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d014      	beq.n	8009cb8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c92:	4a4e      	ldr	r2, [pc, #312]	@ (8009dcc <I2C_Slave_STOPF+0x258>)
 8009c94:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fd fdb8 	bl	8007810 <HAL_DMA_Abort_IT>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d008      	beq.n	8009cb8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	e000      	b.n	8009cb8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009cb6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d03e      	beq.n	8009d40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	d112      	bne.n	8009cf6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	691a      	ldr	r2, [r3, #16]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d00:	2b40      	cmp	r3, #64	@ 0x40
 8009d02:	d112      	bne.n	8009d2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691a      	ldr	r2, [r3, #16]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0e:	b2d2      	uxtb	r2, r2
 8009d10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d005      	beq.n	8009d40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d38:	f043 0204 	orr.w	r2, r3, #4
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f8b3 	bl	8009eb4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009d4e:	e039      	b.n	8009dc4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d54:	d109      	bne.n	8009d6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2228      	movs	r2, #40	@ 0x28
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff f827 	bl	8008db8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b28      	cmp	r3, #40	@ 0x28
 8009d74:	d111      	bne.n	8009d9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a15      	ldr	r2, [pc, #84]	@ (8009dd0 <I2C_Slave_STOPF+0x25c>)
 8009d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2220      	movs	r2, #32
 8009d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff f828 	bl	8008de8 <HAL_I2C_ListenCpltCallback>
}
 8009d98:	e014      	b.n	8009dc4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d9e:	2b22      	cmp	r3, #34	@ 0x22
 8009da0:	d002      	beq.n	8009da8 <I2C_Slave_STOPF+0x234>
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	2b22      	cmp	r3, #34	@ 0x22
 8009da6:	d10d      	bne.n	8009dc4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2220      	movs	r2, #32
 8009db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7fe fffa 	bl	8008db8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009dc4:	bf00      	nop
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	0800a415 	.word	0x0800a415
 8009dd0:	ffff0000 	.word	0xffff0000

08009dd4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009de2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b08      	cmp	r3, #8
 8009dee:	d002      	beq.n	8009df6 <I2C_Slave_AF+0x22>
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d129      	bne.n	8009e4a <I2C_Slave_AF+0x76>
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	2b28      	cmp	r3, #40	@ 0x28
 8009dfa:	d126      	bne.n	8009e4a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8009eb0 <I2C_Slave_AF+0xdc>)
 8009e00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009e10:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009e1a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e2a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7fe ffd0 	bl	8008de8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009e48:	e02e      	b.n	8009ea8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	2b21      	cmp	r3, #33	@ 0x21
 8009e4e:	d126      	bne.n	8009e9e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a17      	ldr	r2, [pc, #92]	@ (8009eb0 <I2C_Slave_AF+0xdc>)
 8009e54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2221      	movs	r2, #33	@ 0x21
 8009e5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009e7a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009e84:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e94:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7fe ff84 	bl	8008da4 <HAL_I2C_SlaveTxCpltCallback>
}
 8009e9c:	e004      	b.n	8009ea8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009ea6:	615a      	str	r2, [r3, #20]
}
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	ffff0000 	.word	0xffff0000

08009eb4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ec2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009eca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	2b10      	cmp	r3, #16
 8009ed0:	d002      	beq.n	8009ed8 <I2C_ITError+0x24>
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	2b40      	cmp	r3, #64	@ 0x40
 8009ed6:	d10a      	bne.n	8009eee <I2C_ITError+0x3a>
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	2b22      	cmp	r3, #34	@ 0x22
 8009edc:	d107      	bne.n	8009eee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009eec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009ef4:	2b28      	cmp	r3, #40	@ 0x28
 8009ef6:	d107      	bne.n	8009f08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2228      	movs	r2, #40	@ 0x28
 8009f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009f06:	e015      	b.n	8009f34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f16:	d00a      	beq.n	8009f2e <I2C_ITError+0x7a>
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	2b60      	cmp	r3, #96	@ 0x60
 8009f1c:	d007      	beq.n	8009f2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2220      	movs	r2, #32
 8009f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f42:	d162      	bne.n	800a00a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d020      	beq.n	8009fa4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f66:	4a6a      	ldr	r2, [pc, #424]	@ (800a110 <I2C_ITError+0x25c>)
 8009f68:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fd fc4e 	bl	8007810 <HAL_DMA_Abort_IT>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 8089 	beq.w	800a08e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0201 	bic.w	r2, r2, #1
 8009f8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4798      	blx	r3
 8009fa2:	e074      	b.n	800a08e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa8:	4a59      	ldr	r2, [pc, #356]	@ (800a110 <I2C_ITError+0x25c>)
 8009faa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fd fc2d 	bl	8007810 <HAL_DMA_Abort_IT>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d068      	beq.n	800a08e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc6:	2b40      	cmp	r3, #64	@ 0x40
 8009fc8:	d10b      	bne.n	8009fe2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd4:	b2d2      	uxtb	r2, r2
 8009fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0201 	bic.w	r2, r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a004:	4610      	mov	r0, r2
 800a006:	4798      	blx	r3
 800a008:	e041      	b.n	800a08e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b60      	cmp	r3, #96	@ 0x60
 800a014:	d125      	bne.n	800a062 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2220      	movs	r2, #32
 800a01a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02e:	2b40      	cmp	r3, #64	@ 0x40
 800a030:	d10b      	bne.n	800a04a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	691a      	ldr	r2, [r3, #16]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a03c:	b2d2      	uxtb	r2, r2
 800a03e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 0201 	bic.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7fe feec 	bl	8008e38 <HAL_I2C_AbortCpltCallback>
 800a060:	e015      	b.n	800a08e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a06c:	2b40      	cmp	r3, #64	@ 0x40
 800a06e:	d10b      	bne.n	800a088 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691a      	ldr	r2, [r3, #16]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07a:	b2d2      	uxtb	r2, r2
 800a07c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7fe fecb 	bl	8008e24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a092:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10e      	bne.n	800a0bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d109      	bne.n	800a0bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d104      	bne.n	800a0bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d007      	beq.n	800a0cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a0ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d113      	bne.n	800a108 <I2C_ITError+0x254>
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	2b28      	cmp	r3, #40	@ 0x28
 800a0e4:	d110      	bne.n	800a108 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a0a      	ldr	r2, [pc, #40]	@ (800a114 <I2C_ITError+0x260>)
 800a0ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7fe fe70 	bl	8008de8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a108:	bf00      	nop
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	0800a415 	.word	0x0800a415
 800a114:	ffff0000 	.word	0xffff0000

0800a118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	461a      	mov	r2, r3
 800a126:	4603      	mov	r3, r0
 800a128:	817b      	strh	r3, [r7, #10]
 800a12a:	460b      	mov	r3, r1
 800a12c:	813b      	strh	r3, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	2200      	movs	r2, #0
 800a14a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 fa08 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00d      	beq.n	800a176 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a168:	d103      	bne.n	800a172 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a170:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e05f      	b.n	800a236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a176:	897b      	ldrh	r3, [r7, #10]
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	461a      	mov	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	6a3a      	ldr	r2, [r7, #32]
 800a18a:	492d      	ldr	r1, [pc, #180]	@ (800a240 <I2C_RequestMemoryWrite+0x128>)
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 fa40 	bl	800a612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e04c      	b.n	800a236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1b4:	6a39      	ldr	r1, [r7, #32]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 faaa 	bl	800a710 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d107      	bne.n	800a1da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e02b      	b.n	800a236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1de:	88fb      	ldrh	r3, [r7, #6]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d105      	bne.n	800a1f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1e4:	893b      	ldrh	r3, [r7, #8]
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	611a      	str	r2, [r3, #16]
 800a1ee:	e021      	b.n	800a234 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1f0:	893b      	ldrh	r3, [r7, #8]
 800a1f2:	0a1b      	lsrs	r3, r3, #8
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a200:	6a39      	ldr	r1, [r7, #32]
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 fa84 	bl	800a710 <I2C_WaitOnTXEFlagUntilTimeout>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00d      	beq.n	800a22a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a212:	2b04      	cmp	r3, #4
 800a214:	d107      	bne.n	800a226 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e005      	b.n	800a236 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a22a:	893b      	ldrh	r3, [r7, #8]
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	00010002 	.word	0x00010002

0800a244 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af02      	add	r7, sp, #8
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4603      	mov	r3, r0
 800a254:	817b      	strh	r3, [r7, #10]
 800a256:	460b      	mov	r3, r1
 800a258:	813b      	strh	r3, [r7, #8]
 800a25a:	4613      	mov	r3, r2
 800a25c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a26c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a27c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	2200      	movs	r2, #0
 800a286:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f000 f96a 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00d      	beq.n	800a2b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2a4:	d103      	bne.n	800a2ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e0aa      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2b2:	897b      	ldrh	r3, [r7, #10]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a2c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	6a3a      	ldr	r2, [r7, #32]
 800a2c6:	4952      	ldr	r1, [pc, #328]	@ (800a410 <I2C_RequestMemoryRead+0x1cc>)
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 f9a2 	bl	800a612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e097      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2f0:	6a39      	ldr	r1, [r7, #32]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 fa0c 	bl	800a710 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a302:	2b04      	cmp	r3, #4
 800a304:	d107      	bne.n	800a316 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e076      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d105      	bne.n	800a32c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a320:	893b      	ldrh	r3, [r7, #8]
 800a322:	b2da      	uxtb	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	611a      	str	r2, [r3, #16]
 800a32a:	e021      	b.n	800a370 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a32c:	893b      	ldrh	r3, [r7, #8]
 800a32e:	0a1b      	lsrs	r3, r3, #8
 800a330:	b29b      	uxth	r3, r3
 800a332:	b2da      	uxtb	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a33c:	6a39      	ldr	r1, [r7, #32]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f9e6 	bl	800a710 <I2C_WaitOnTXEFlagUntilTimeout>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00d      	beq.n	800a366 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d107      	bne.n	800a362 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e050      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a366:	893b      	ldrh	r3, [r7, #8]
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a372:	6a39      	ldr	r1, [r7, #32]
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 f9cb 	bl	800a710 <I2C_WaitOnTXEFlagUntilTimeout>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00d      	beq.n	800a39c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a384:	2b04      	cmp	r3, #4
 800a386:	d107      	bne.n	800a398 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a396:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e035      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 f8d3 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00d      	beq.n	800a3e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3d2:	d103      	bne.n	800a3dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e013      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3e0:	897b      	ldrh	r3, [r7, #10]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f043 0301 	orr.w	r3, r3, #1
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f2:	6a3a      	ldr	r2, [r7, #32]
 800a3f4:	4906      	ldr	r1, [pc, #24]	@ (800a410 <I2C_RequestMemoryRead+0x1cc>)
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f90b 	bl	800a612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e000      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	00010002 	.word	0x00010002

0800a414 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a424:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a42c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a42e:	4b4b      	ldr	r3, [pc, #300]	@ (800a55c <I2C_DMAAbort+0x148>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	08db      	lsrs	r3, r3, #3
 800a434:	4a4a      	ldr	r2, [pc, #296]	@ (800a560 <I2C_DMAAbort+0x14c>)
 800a436:	fba2 2303 	umull	r2, r3, r2, r3
 800a43a:	0a1a      	lsrs	r2, r3, #8
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	00da      	lsls	r2, r3, #3
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a452:	f043 0220 	orr.w	r2, r3, #32
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a45a:	e00a      	b.n	800a472 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3b01      	subs	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a46c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a470:	d0ea      	beq.n	800a448 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a47e:	2200      	movs	r2, #0
 800a480:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48e:	2200      	movs	r2, #0
 800a490:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d003      	beq.n	800a4b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d003      	beq.n	800a4c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 0201 	bic.w	r2, r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b60      	cmp	r3, #96	@ 0x60
 800a4e2:	d10e      	bne.n	800a502 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a4fa:	6978      	ldr	r0, [r7, #20]
 800a4fc:	f7fe fc9c 	bl	8008e38 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a500:	e027      	b.n	800a552 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a502:	7cfb      	ldrb	r3, [r7, #19]
 800a504:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a508:	2b28      	cmp	r3, #40	@ 0x28
 800a50a:	d117      	bne.n	800a53c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0201 	orr.w	r2, r2, #1
 800a51a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a52a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2200      	movs	r2, #0
 800a530:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2228      	movs	r2, #40	@ 0x28
 800a536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a53a:	e007      	b.n	800a54c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2220      	movs	r2, #32
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a54c:	6978      	ldr	r0, [r7, #20]
 800a54e:	f7fe fc69 	bl	8008e24 <HAL_I2C_ErrorCallback>
}
 800a552:	bf00      	nop
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20000154 	.word	0x20000154
 800a560:	14f8b589 	.word	0x14f8b589

0800a564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	4613      	mov	r3, r2
 800a572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a574:	e025      	b.n	800a5c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57c:	d021      	beq.n	800a5c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a57e:	f7fc ff57 	bl	8007430 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d302      	bcc.n	800a594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d116      	bne.n	800a5c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ae:	f043 0220 	orr.w	r2, r3, #32
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e023      	b.n	800a60a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	0c1b      	lsrs	r3, r3, #16
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d10d      	bne.n	800a5e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	43da      	mvns	r2, r3
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	bf0c      	ite	eq
 800a5de:	2301      	moveq	r3, #1
 800a5e0:	2300      	movne	r3, #0
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	e00c      	b.n	800a602 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	43da      	mvns	r2, r3
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bf0c      	ite	eq
 800a5fa:	2301      	moveq	r3, #1
 800a5fc:	2300      	movne	r3, #0
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	461a      	mov	r2, r3
 800a602:	79fb      	ldrb	r3, [r7, #7]
 800a604:	429a      	cmp	r2, r3
 800a606:	d0b6      	beq.n	800a576 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a620:	e051      	b.n	800a6c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a62c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a630:	d123      	bne.n	800a67a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a640:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a64a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2220      	movs	r2, #32
 800a656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a666:	f043 0204 	orr.w	r2, r3, #4
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e046      	b.n	800a708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a680:	d021      	beq.n	800a6c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a682:	f7fc fed5 	bl	8007430 <HAL_GetTick>
 800a686:	4602      	mov	r2, r0
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d302      	bcc.n	800a698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d116      	bne.n	800a6c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b2:	f043 0220 	orr.w	r2, r3, #32
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e020      	b.n	800a708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	0c1b      	lsrs	r3, r3, #16
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d10c      	bne.n	800a6ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	43da      	mvns	r2, r3
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bf14      	ite	ne
 800a6e2:	2301      	movne	r3, #1
 800a6e4:	2300      	moveq	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	e00b      	b.n	800a702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	43da      	mvns	r2, r3
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf14      	ite	ne
 800a6fc:	2301      	movne	r3, #1
 800a6fe:	2300      	moveq	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d18d      	bne.n	800a622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a71c:	e02d      	b.n	800a77a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 f900 	bl	800a924 <I2C_IsAcknowledgeFailed>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d001      	beq.n	800a72e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e02d      	b.n	800a78a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a734:	d021      	beq.n	800a77a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a736:	f7fc fe7b 	bl	8007430 <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	429a      	cmp	r2, r3
 800a744:	d302      	bcc.n	800a74c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d116      	bne.n	800a77a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2220      	movs	r2, #32
 800a756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a766:	f043 0220 	orr.w	r2, r3, #32
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e007      	b.n	800a78a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a784:	2b80      	cmp	r3, #128	@ 0x80
 800a786:	d1ca      	bne.n	800a71e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a79e:	e02d      	b.n	800a7fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 f8bf 	bl	800a924 <I2C_IsAcknowledgeFailed>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e02d      	b.n	800a80c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b6:	d021      	beq.n	800a7fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7b8:	f7fc fe3a 	bl	8007430 <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d302      	bcc.n	800a7ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d116      	bne.n	800a7fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e8:	f043 0220 	orr.w	r2, r3, #32
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e007      	b.n	800a80c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	f003 0304 	and.w	r3, r3, #4
 800a806:	2b04      	cmp	r3, #4
 800a808:	d1ca      	bne.n	800a7a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a820:	4b13      	ldr	r3, [pc, #76]	@ (800a870 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	08db      	lsrs	r3, r3, #3
 800a826:	4a13      	ldr	r2, [pc, #76]	@ (800a874 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a828:	fba2 2303 	umull	r2, r3, r2, r3
 800a82c:	0a1a      	lsrs	r2, r3, #8
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3b01      	subs	r3, #1
 800a83a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d107      	bne.n	800a852 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a846:	f043 0220 	orr.w	r2, r3, #32
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e008      	b.n	800a864 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a85c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a860:	d0e9      	beq.n	800a836 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20000154 	.word	0x20000154
 800a874:	14f8b589 	.word	0x14f8b589

0800a878 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a884:	e042      	b.n	800a90c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	f003 0310 	and.w	r3, r3, #16
 800a890:	2b10      	cmp	r3, #16
 800a892:	d119      	bne.n	800a8c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f06f 0210 	mvn.w	r2, #16
 800a89c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e029      	b.n	800a91c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8c8:	f7fc fdb2 	bl	8007430 <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d302      	bcc.n	800a8de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d116      	bne.n	800a90c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f8:	f043 0220 	orr.w	r2, r3, #32
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e007      	b.n	800a91c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a916:	2b40      	cmp	r3, #64	@ 0x40
 800a918:	d1b5      	bne.n	800a886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a93a:	d11b      	bne.n	800a974 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a944:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2220      	movs	r2, #32
 800a950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a960:	f043 0204 	orr.w	r2, r3, #4
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a992:	d103      	bne.n	800a99c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a99a:	e007      	b.n	800a9ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a9a4:	d102      	bne.n	800a9ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2208      	movs	r2, #8
 800a9aa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e267      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d075      	beq.n	800aac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a9d6:	4b88      	ldr	r3, [pc, #544]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	f003 030c 	and.w	r3, r3, #12
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d00c      	beq.n	800a9fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a9e2:	4b85      	ldr	r3, [pc, #532]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a9ea:	2b08      	cmp	r3, #8
 800a9ec:	d112      	bne.n	800aa14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a9ee:	4b82      	ldr	r3, [pc, #520]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9fa:	d10b      	bne.n	800aa14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9fc:	4b7e      	ldr	r3, [pc, #504]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d05b      	beq.n	800aac0 <HAL_RCC_OscConfig+0x108>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d157      	bne.n	800aac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e242      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa1c:	d106      	bne.n	800aa2c <HAL_RCC_OscConfig+0x74>
 800aa1e:	4b76      	ldr	r3, [pc, #472]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a75      	ldr	r2, [pc, #468]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	e01d      	b.n	800aa68 <HAL_RCC_OscConfig+0xb0>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa34:	d10c      	bne.n	800aa50 <HAL_RCC_OscConfig+0x98>
 800aa36:	4b70      	ldr	r3, [pc, #448]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a6f      	ldr	r2, [pc, #444]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	4b6d      	ldr	r3, [pc, #436]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a6c      	ldr	r2, [pc, #432]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	e00b      	b.n	800aa68 <HAL_RCC_OscConfig+0xb0>
 800aa50:	4b69      	ldr	r3, [pc, #420]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a68      	ldr	r2, [pc, #416]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	4b66      	ldr	r3, [pc, #408]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a65      	ldr	r2, [pc, #404]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d013      	beq.n	800aa98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa70:	f7fc fcde 	bl	8007430 <HAL_GetTick>
 800aa74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa76:	e008      	b.n	800aa8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa78:	f7fc fcda 	bl	8007430 <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	2b64      	cmp	r3, #100	@ 0x64
 800aa84:	d901      	bls.n	800aa8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e207      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa8a:	4b5b      	ldr	r3, [pc, #364]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0f0      	beq.n	800aa78 <HAL_RCC_OscConfig+0xc0>
 800aa96:	e014      	b.n	800aac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa98:	f7fc fcca 	bl	8007430 <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa9e:	e008      	b.n	800aab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aaa0:	f7fc fcc6 	bl	8007430 <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b64      	cmp	r3, #100	@ 0x64
 800aaac:	d901      	bls.n	800aab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e1f3      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aab2:	4b51      	ldr	r3, [pc, #324]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1f0      	bne.n	800aaa0 <HAL_RCC_OscConfig+0xe8>
 800aabe:	e000      	b.n	800aac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d063      	beq.n	800ab96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aace:	4b4a      	ldr	r3, [pc, #296]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	f003 030c 	and.w	r3, r3, #12
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00b      	beq.n	800aaf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aada:	4b47      	ldr	r3, [pc, #284]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aae2:	2b08      	cmp	r3, #8
 800aae4:	d11c      	bne.n	800ab20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aae6:	4b44      	ldr	r3, [pc, #272]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d116      	bne.n	800ab20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aaf2:	4b41      	ldr	r3, [pc, #260]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d005      	beq.n	800ab0a <HAL_RCC_OscConfig+0x152>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d001      	beq.n	800ab0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e1c7      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab0a:	4b3b      	ldr	r3, [pc, #236]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	4937      	ldr	r1, [pc, #220]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab1e:	e03a      	b.n	800ab96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d020      	beq.n	800ab6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab28:	4b34      	ldr	r3, [pc, #208]	@ (800abfc <HAL_RCC_OscConfig+0x244>)
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab2e:	f7fc fc7f 	bl	8007430 <HAL_GetTick>
 800ab32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab34:	e008      	b.n	800ab48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab36:	f7fc fc7b 	bl	8007430 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d901      	bls.n	800ab48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e1a8      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab48:	4b2b      	ldr	r3, [pc, #172]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0f0      	beq.n	800ab36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab54:	4b28      	ldr	r3, [pc, #160]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	00db      	lsls	r3, r3, #3
 800ab62:	4925      	ldr	r1, [pc, #148]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	600b      	str	r3, [r1, #0]
 800ab68:	e015      	b.n	800ab96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab6a:	4b24      	ldr	r3, [pc, #144]	@ (800abfc <HAL_RCC_OscConfig+0x244>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab70:	f7fc fc5e 	bl	8007430 <HAL_GetTick>
 800ab74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab76:	e008      	b.n	800ab8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab78:	f7fc fc5a 	bl	8007430 <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d901      	bls.n	800ab8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e187      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab8a:	4b1b      	ldr	r3, [pc, #108]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1f0      	bne.n	800ab78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f003 0308 	and.w	r3, r3, #8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d036      	beq.n	800ac10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d016      	beq.n	800abd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abaa:	4b15      	ldr	r3, [pc, #84]	@ (800ac00 <HAL_RCC_OscConfig+0x248>)
 800abac:	2201      	movs	r2, #1
 800abae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abb0:	f7fc fc3e 	bl	8007430 <HAL_GetTick>
 800abb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abb6:	e008      	b.n	800abca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800abb8:	f7fc fc3a 	bl	8007430 <HAL_GetTick>
 800abbc:	4602      	mov	r2, r0
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d901      	bls.n	800abca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e167      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abca:	4b0b      	ldr	r3, [pc, #44]	@ (800abf8 <HAL_RCC_OscConfig+0x240>)
 800abcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0f0      	beq.n	800abb8 <HAL_RCC_OscConfig+0x200>
 800abd6:	e01b      	b.n	800ac10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800abd8:	4b09      	ldr	r3, [pc, #36]	@ (800ac00 <HAL_RCC_OscConfig+0x248>)
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abde:	f7fc fc27 	bl	8007430 <HAL_GetTick>
 800abe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800abe4:	e00e      	b.n	800ac04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800abe6:	f7fc fc23 	bl	8007430 <HAL_GetTick>
 800abea:	4602      	mov	r2, r0
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d907      	bls.n	800ac04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800abf4:	2303      	movs	r3, #3
 800abf6:	e150      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
 800abf8:	40023800 	.word	0x40023800
 800abfc:	42470000 	.word	0x42470000
 800ac00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac04:	4b88      	ldr	r3, [pc, #544]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ac06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1ea      	bne.n	800abe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0304 	and.w	r3, r3, #4
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 8097 	beq.w	800ad4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac22:	4b81      	ldr	r3, [pc, #516]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ac24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10f      	bne.n	800ac4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60bb      	str	r3, [r7, #8]
 800ac32:	4b7d      	ldr	r3, [pc, #500]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ac34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac36:	4a7c      	ldr	r2, [pc, #496]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ac38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac3c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ac3e:	4b7a      	ldr	r3, [pc, #488]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ac40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac46:	60bb      	str	r3, [r7, #8]
 800ac48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac4e:	4b77      	ldr	r3, [pc, #476]	@ (800ae2c <HAL_RCC_OscConfig+0x474>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d118      	bne.n	800ac8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ac5a:	4b74      	ldr	r3, [pc, #464]	@ (800ae2c <HAL_RCC_OscConfig+0x474>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a73      	ldr	r2, [pc, #460]	@ (800ae2c <HAL_RCC_OscConfig+0x474>)
 800ac60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac66:	f7fc fbe3 	bl	8007430 <HAL_GetTick>
 800ac6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac6c:	e008      	b.n	800ac80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac6e:	f7fc fbdf 	bl	8007430 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d901      	bls.n	800ac80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e10c      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac80:	4b6a      	ldr	r3, [pc, #424]	@ (800ae2c <HAL_RCC_OscConfig+0x474>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0f0      	beq.n	800ac6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d106      	bne.n	800aca2 <HAL_RCC_OscConfig+0x2ea>
 800ac94:	4b64      	ldr	r3, [pc, #400]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ac96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac98:	4a63      	ldr	r2, [pc, #396]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ac9a:	f043 0301 	orr.w	r3, r3, #1
 800ac9e:	6713      	str	r3, [r2, #112]	@ 0x70
 800aca0:	e01c      	b.n	800acdc <HAL_RCC_OscConfig+0x324>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	2b05      	cmp	r3, #5
 800aca8:	d10c      	bne.n	800acc4 <HAL_RCC_OscConfig+0x30c>
 800acaa:	4b5f      	ldr	r3, [pc, #380]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800acac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acae:	4a5e      	ldr	r2, [pc, #376]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800acb0:	f043 0304 	orr.w	r3, r3, #4
 800acb4:	6713      	str	r3, [r2, #112]	@ 0x70
 800acb6:	4b5c      	ldr	r3, [pc, #368]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800acb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acba:	4a5b      	ldr	r2, [pc, #364]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800acbc:	f043 0301 	orr.w	r3, r3, #1
 800acc0:	6713      	str	r3, [r2, #112]	@ 0x70
 800acc2:	e00b      	b.n	800acdc <HAL_RCC_OscConfig+0x324>
 800acc4:	4b58      	ldr	r3, [pc, #352]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800acc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acc8:	4a57      	ldr	r2, [pc, #348]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800acca:	f023 0301 	bic.w	r3, r3, #1
 800acce:	6713      	str	r3, [r2, #112]	@ 0x70
 800acd0:	4b55      	ldr	r3, [pc, #340]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800acd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acd4:	4a54      	ldr	r2, [pc, #336]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800acd6:	f023 0304 	bic.w	r3, r3, #4
 800acda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d015      	beq.n	800ad10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ace4:	f7fc fba4 	bl	8007430 <HAL_GetTick>
 800ace8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acea:	e00a      	b.n	800ad02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800acec:	f7fc fba0 	bl	8007430 <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e0cb      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad02:	4b49      	ldr	r3, [pc, #292]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ad04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad06:	f003 0302 	and.w	r3, r3, #2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0ee      	beq.n	800acec <HAL_RCC_OscConfig+0x334>
 800ad0e:	e014      	b.n	800ad3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad10:	f7fc fb8e 	bl	8007430 <HAL_GetTick>
 800ad14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad16:	e00a      	b.n	800ad2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad18:	f7fc fb8a 	bl	8007430 <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d901      	bls.n	800ad2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e0b5      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad2e:	4b3e      	ldr	r3, [pc, #248]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ad30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1ee      	bne.n	800ad18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad3a:	7dfb      	ldrb	r3, [r7, #23]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d105      	bne.n	800ad4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad40:	4b39      	ldr	r3, [pc, #228]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ad42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad44:	4a38      	ldr	r2, [pc, #224]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ad46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 80a1 	beq.w	800ae98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ad56:	4b34      	ldr	r3, [pc, #208]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f003 030c 	and.w	r3, r3, #12
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	d05c      	beq.n	800ae1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d141      	bne.n	800adee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad6a:	4b31      	ldr	r3, [pc, #196]	@ (800ae30 <HAL_RCC_OscConfig+0x478>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad70:	f7fc fb5e 	bl	8007430 <HAL_GetTick>
 800ad74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad76:	e008      	b.n	800ad8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad78:	f7fc fb5a 	bl	8007430 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d901      	bls.n	800ad8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e087      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad8a:	4b27      	ldr	r3, [pc, #156]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1f0      	bne.n	800ad78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	69da      	ldr	r2, [r3, #28]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	431a      	orrs	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada4:	019b      	lsls	r3, r3, #6
 800ada6:	431a      	orrs	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adac:	085b      	lsrs	r3, r3, #1
 800adae:	3b01      	subs	r3, #1
 800adb0:	041b      	lsls	r3, r3, #16
 800adb2:	431a      	orrs	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb8:	061b      	lsls	r3, r3, #24
 800adba:	491b      	ldr	r1, [pc, #108]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800adbc:	4313      	orrs	r3, r2
 800adbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800adc0:	4b1b      	ldr	r3, [pc, #108]	@ (800ae30 <HAL_RCC_OscConfig+0x478>)
 800adc2:	2201      	movs	r2, #1
 800adc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adc6:	f7fc fb33 	bl	8007430 <HAL_GetTick>
 800adca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adcc:	e008      	b.n	800ade0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adce:	f7fc fb2f 	bl	8007430 <HAL_GetTick>
 800add2:	4602      	mov	r2, r0
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	2b02      	cmp	r3, #2
 800adda:	d901      	bls.n	800ade0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800addc:	2303      	movs	r3, #3
 800adde:	e05c      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ade0:	4b11      	ldr	r3, [pc, #68]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d0f0      	beq.n	800adce <HAL_RCC_OscConfig+0x416>
 800adec:	e054      	b.n	800ae98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adee:	4b10      	ldr	r3, [pc, #64]	@ (800ae30 <HAL_RCC_OscConfig+0x478>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adf4:	f7fc fb1c 	bl	8007430 <HAL_GetTick>
 800adf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adfa:	e008      	b.n	800ae0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adfc:	f7fc fb18 	bl	8007430 <HAL_GetTick>
 800ae00:	4602      	mov	r2, r0
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d901      	bls.n	800ae0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e045      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae0e:	4b06      	ldr	r3, [pc, #24]	@ (800ae28 <HAL_RCC_OscConfig+0x470>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1f0      	bne.n	800adfc <HAL_RCC_OscConfig+0x444>
 800ae1a:	e03d      	b.n	800ae98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d107      	bne.n	800ae34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e038      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
 800ae28:	40023800 	.word	0x40023800
 800ae2c:	40007000 	.word	0x40007000
 800ae30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ae34:	4b1b      	ldr	r3, [pc, #108]	@ (800aea4 <HAL_RCC_OscConfig+0x4ec>)
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d028      	beq.n	800ae94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d121      	bne.n	800ae94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d11a      	bne.n	800ae94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ae64:	4013      	ands	r3, r2
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ae6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d111      	bne.n	800ae94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7a:	085b      	lsrs	r3, r3, #1
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d107      	bne.n	800ae94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d001      	beq.n	800ae98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e000      	b.n	800ae9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	40023800 	.word	0x40023800

0800aea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e0cc      	b.n	800b056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aebc:	4b68      	ldr	r3, [pc, #416]	@ (800b060 <HAL_RCC_ClockConfig+0x1b8>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0307 	and.w	r3, r3, #7
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d90c      	bls.n	800aee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeca:	4b65      	ldr	r3, [pc, #404]	@ (800b060 <HAL_RCC_ClockConfig+0x1b8>)
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	b2d2      	uxtb	r2, r2
 800aed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aed2:	4b63      	ldr	r3, [pc, #396]	@ (800b060 <HAL_RCC_ClockConfig+0x1b8>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d001      	beq.n	800aee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e0b8      	b.n	800b056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d020      	beq.n	800af32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0304 	and.w	r3, r3, #4
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d005      	beq.n	800af08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aefc:	4b59      	ldr	r3, [pc, #356]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	4a58      	ldr	r2, [pc, #352]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800af06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 0308 	and.w	r3, r3, #8
 800af10:	2b00      	cmp	r3, #0
 800af12:	d005      	beq.n	800af20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af14:	4b53      	ldr	r3, [pc, #332]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	4a52      	ldr	r2, [pc, #328]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800af1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af20:	4b50      	ldr	r3, [pc, #320]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	494d      	ldr	r1, [pc, #308]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af2e:	4313      	orrs	r3, r2
 800af30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d044      	beq.n	800afc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d107      	bne.n	800af56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af46:	4b47      	ldr	r3, [pc, #284]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d119      	bne.n	800af86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e07f      	b.n	800b056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d003      	beq.n	800af66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800af62:	2b03      	cmp	r3, #3
 800af64:	d107      	bne.n	800af76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af66:	4b3f      	ldr	r3, [pc, #252]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d109      	bne.n	800af86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e06f      	b.n	800b056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af76:	4b3b      	ldr	r3, [pc, #236]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e067      	b.n	800b056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af86:	4b37      	ldr	r3, [pc, #220]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f023 0203 	bic.w	r2, r3, #3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	4934      	ldr	r1, [pc, #208]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800af94:	4313      	orrs	r3, r2
 800af96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800af98:	f7fc fa4a 	bl	8007430 <HAL_GetTick>
 800af9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af9e:	e00a      	b.n	800afb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afa0:	f7fc fa46 	bl	8007430 <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afae:	4293      	cmp	r3, r2
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e04f      	b.n	800b056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afb6:	4b2b      	ldr	r3, [pc, #172]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f003 020c 	and.w	r2, r3, #12
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d1eb      	bne.n	800afa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800afc8:	4b25      	ldr	r3, [pc, #148]	@ (800b060 <HAL_RCC_ClockConfig+0x1b8>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 0307 	and.w	r3, r3, #7
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d20c      	bcs.n	800aff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afd6:	4b22      	ldr	r3, [pc, #136]	@ (800b060 <HAL_RCC_ClockConfig+0x1b8>)
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	b2d2      	uxtb	r2, r2
 800afdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afde:	4b20      	ldr	r3, [pc, #128]	@ (800b060 <HAL_RCC_ClockConfig+0x1b8>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0307 	and.w	r3, r3, #7
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d001      	beq.n	800aff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e032      	b.n	800b056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d008      	beq.n	800b00e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800affc:	4b19      	ldr	r3, [pc, #100]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	4916      	ldr	r1, [pc, #88]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800b00a:	4313      	orrs	r3, r2
 800b00c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0308 	and.w	r3, r3, #8
 800b016:	2b00      	cmp	r3, #0
 800b018:	d009      	beq.n	800b02e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b01a:	4b12      	ldr	r3, [pc, #72]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	490e      	ldr	r1, [pc, #56]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b02e:	f000 f821 	bl	800b074 <HAL_RCC_GetSysClockFreq>
 800b032:	4602      	mov	r2, r0
 800b034:	4b0b      	ldr	r3, [pc, #44]	@ (800b064 <HAL_RCC_ClockConfig+0x1bc>)
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	091b      	lsrs	r3, r3, #4
 800b03a:	f003 030f 	and.w	r3, r3, #15
 800b03e:	490a      	ldr	r1, [pc, #40]	@ (800b068 <HAL_RCC_ClockConfig+0x1c0>)
 800b040:	5ccb      	ldrb	r3, [r1, r3]
 800b042:	fa22 f303 	lsr.w	r3, r2, r3
 800b046:	4a09      	ldr	r2, [pc, #36]	@ (800b06c <HAL_RCC_ClockConfig+0x1c4>)
 800b048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b04a:	4b09      	ldr	r3, [pc, #36]	@ (800b070 <HAL_RCC_ClockConfig+0x1c8>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fc f9aa 	bl	80073a8 <HAL_InitTick>

  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	40023c00 	.word	0x40023c00
 800b064:	40023800 	.word	0x40023800
 800b068:	08010b70 	.word	0x08010b70
 800b06c:	20000154 	.word	0x20000154
 800b070:	20000180 	.word	0x20000180

0800b074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b078:	b094      	sub	sp, #80	@ 0x50
 800b07a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b080:	2300      	movs	r3, #0
 800b082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b084:	2300      	movs	r3, #0
 800b086:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b088:	2300      	movs	r3, #0
 800b08a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b08c:	4b79      	ldr	r3, [pc, #484]	@ (800b274 <HAL_RCC_GetSysClockFreq+0x200>)
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f003 030c 	and.w	r3, r3, #12
 800b094:	2b08      	cmp	r3, #8
 800b096:	d00d      	beq.n	800b0b4 <HAL_RCC_GetSysClockFreq+0x40>
 800b098:	2b08      	cmp	r3, #8
 800b09a:	f200 80e1 	bhi.w	800b260 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x34>
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d003      	beq.n	800b0ae <HAL_RCC_GetSysClockFreq+0x3a>
 800b0a6:	e0db      	b.n	800b260 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b0a8:	4b73      	ldr	r3, [pc, #460]	@ (800b278 <HAL_RCC_GetSysClockFreq+0x204>)
 800b0aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800b0ac:	e0db      	b.n	800b266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b0ae:	4b73      	ldr	r3, [pc, #460]	@ (800b27c <HAL_RCC_GetSysClockFreq+0x208>)
 800b0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b0b2:	e0d8      	b.n	800b266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b0b4:	4b6f      	ldr	r3, [pc, #444]	@ (800b274 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b0be:	4b6d      	ldr	r3, [pc, #436]	@ (800b274 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d063      	beq.n	800b192 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0ca:	4b6a      	ldr	r3, [pc, #424]	@ (800b274 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	099b      	lsrs	r3, r3, #6
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0de:	2300      	movs	r3, #0
 800b0e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	462b      	mov	r3, r5
 800b0ea:	f04f 0000 	mov.w	r0, #0
 800b0ee:	f04f 0100 	mov.w	r1, #0
 800b0f2:	0159      	lsls	r1, r3, #5
 800b0f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b0f8:	0150      	lsls	r0, r2, #5
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4621      	mov	r1, r4
 800b100:	1a51      	subs	r1, r2, r1
 800b102:	6139      	str	r1, [r7, #16]
 800b104:	4629      	mov	r1, r5
 800b106:	eb63 0301 	sbc.w	r3, r3, r1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	f04f 0200 	mov.w	r2, #0
 800b110:	f04f 0300 	mov.w	r3, #0
 800b114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b118:	4659      	mov	r1, fp
 800b11a:	018b      	lsls	r3, r1, #6
 800b11c:	4651      	mov	r1, sl
 800b11e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b122:	4651      	mov	r1, sl
 800b124:	018a      	lsls	r2, r1, #6
 800b126:	4651      	mov	r1, sl
 800b128:	ebb2 0801 	subs.w	r8, r2, r1
 800b12c:	4659      	mov	r1, fp
 800b12e:	eb63 0901 	sbc.w	r9, r3, r1
 800b132:	f04f 0200 	mov.w	r2, #0
 800b136:	f04f 0300 	mov.w	r3, #0
 800b13a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b13e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b146:	4690      	mov	r8, r2
 800b148:	4699      	mov	r9, r3
 800b14a:	4623      	mov	r3, r4
 800b14c:	eb18 0303 	adds.w	r3, r8, r3
 800b150:	60bb      	str	r3, [r7, #8]
 800b152:	462b      	mov	r3, r5
 800b154:	eb49 0303 	adc.w	r3, r9, r3
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	f04f 0200 	mov.w	r2, #0
 800b15e:	f04f 0300 	mov.w	r3, #0
 800b162:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b166:	4629      	mov	r1, r5
 800b168:	024b      	lsls	r3, r1, #9
 800b16a:	4621      	mov	r1, r4
 800b16c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b170:	4621      	mov	r1, r4
 800b172:	024a      	lsls	r2, r1, #9
 800b174:	4610      	mov	r0, r2
 800b176:	4619      	mov	r1, r3
 800b178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b17a:	2200      	movs	r2, #0
 800b17c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b17e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b184:	f7f5 f832 	bl	80001ec <__aeabi_uldivmod>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4613      	mov	r3, r2
 800b18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b190:	e058      	b.n	800b244 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b192:	4b38      	ldr	r3, [pc, #224]	@ (800b274 <HAL_RCC_GetSysClockFreq+0x200>)
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	099b      	lsrs	r3, r3, #6
 800b198:	2200      	movs	r2, #0
 800b19a:	4618      	mov	r0, r3
 800b19c:	4611      	mov	r1, r2
 800b19e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b1a2:	623b      	str	r3, [r7, #32]
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	464b      	mov	r3, r9
 800b1b0:	f04f 0000 	mov.w	r0, #0
 800b1b4:	f04f 0100 	mov.w	r1, #0
 800b1b8:	0159      	lsls	r1, r3, #5
 800b1ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b1be:	0150      	lsls	r0, r2, #5
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4641      	mov	r1, r8
 800b1c6:	ebb2 0a01 	subs.w	sl, r2, r1
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	eb63 0b01 	sbc.w	fp, r3, r1
 800b1d0:	f04f 0200 	mov.w	r2, #0
 800b1d4:	f04f 0300 	mov.w	r3, #0
 800b1d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b1dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b1e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b1e4:	ebb2 040a 	subs.w	r4, r2, sl
 800b1e8:	eb63 050b 	sbc.w	r5, r3, fp
 800b1ec:	f04f 0200 	mov.w	r2, #0
 800b1f0:	f04f 0300 	mov.w	r3, #0
 800b1f4:	00eb      	lsls	r3, r5, #3
 800b1f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1fa:	00e2      	lsls	r2, r4, #3
 800b1fc:	4614      	mov	r4, r2
 800b1fe:	461d      	mov	r5, r3
 800b200:	4643      	mov	r3, r8
 800b202:	18e3      	adds	r3, r4, r3
 800b204:	603b      	str	r3, [r7, #0]
 800b206:	464b      	mov	r3, r9
 800b208:	eb45 0303 	adc.w	r3, r5, r3
 800b20c:	607b      	str	r3, [r7, #4]
 800b20e:	f04f 0200 	mov.w	r2, #0
 800b212:	f04f 0300 	mov.w	r3, #0
 800b216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b21a:	4629      	mov	r1, r5
 800b21c:	028b      	lsls	r3, r1, #10
 800b21e:	4621      	mov	r1, r4
 800b220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b224:	4621      	mov	r1, r4
 800b226:	028a      	lsls	r2, r1, #10
 800b228:	4610      	mov	r0, r2
 800b22a:	4619      	mov	r1, r3
 800b22c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b22e:	2200      	movs	r2, #0
 800b230:	61bb      	str	r3, [r7, #24]
 800b232:	61fa      	str	r2, [r7, #28]
 800b234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b238:	f7f4 ffd8 	bl	80001ec <__aeabi_uldivmod>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4613      	mov	r3, r2
 800b242:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b244:	4b0b      	ldr	r3, [pc, #44]	@ (800b274 <HAL_RCC_GetSysClockFreq+0x200>)
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	0c1b      	lsrs	r3, r3, #16
 800b24a:	f003 0303 	and.w	r3, r3, #3
 800b24e:	3301      	adds	r3, #1
 800b250:	005b      	lsls	r3, r3, #1
 800b252:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800b254:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b258:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b25e:	e002      	b.n	800b266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b260:	4b05      	ldr	r3, [pc, #20]	@ (800b278 <HAL_RCC_GetSysClockFreq+0x204>)
 800b262:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b264:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3750      	adds	r7, #80	@ 0x50
 800b26c:	46bd      	mov	sp, r7
 800b26e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b272:	bf00      	nop
 800b274:	40023800 	.word	0x40023800
 800b278:	00f42400 	.word	0x00f42400
 800b27c:	007a1200 	.word	0x007a1200

0800b280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b280:	b480      	push	{r7}
 800b282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b284:	4b03      	ldr	r3, [pc, #12]	@ (800b294 <HAL_RCC_GetHCLKFreq+0x14>)
 800b286:	681b      	ldr	r3, [r3, #0]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	20000154 	.word	0x20000154

0800b298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b29c:	f7ff fff0 	bl	800b280 <HAL_RCC_GetHCLKFreq>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	4b05      	ldr	r3, [pc, #20]	@ (800b2b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	0a9b      	lsrs	r3, r3, #10
 800b2a8:	f003 0307 	and.w	r3, r3, #7
 800b2ac:	4903      	ldr	r1, [pc, #12]	@ (800b2bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2ae:	5ccb      	ldrb	r3, [r1, r3]
 800b2b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	40023800 	.word	0x40023800
 800b2bc:	08010b80 	.word	0x08010b80

0800b2c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b2c4:	f7ff ffdc 	bl	800b280 <HAL_RCC_GetHCLKFreq>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	4b05      	ldr	r3, [pc, #20]	@ (800b2e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	0b5b      	lsrs	r3, r3, #13
 800b2d0:	f003 0307 	and.w	r3, r3, #7
 800b2d4:	4903      	ldr	r1, [pc, #12]	@ (800b2e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2d6:	5ccb      	ldrb	r3, [r1, r3]
 800b2d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	40023800 	.word	0x40023800
 800b2e4:	08010b80 	.word	0x08010b80

0800b2e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e07b      	b.n	800b3f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d108      	bne.n	800b314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b30a:	d009      	beq.n	800b320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	61da      	str	r2, [r3, #28]
 800b312:	e005      	b.n	800b320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7fa fe0c 	bl	8005f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2202      	movs	r2, #2
 800b344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b356:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b368:	431a      	orrs	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b372:	431a      	orrs	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	f003 0302 	and.w	r3, r3, #2
 800b37c:	431a      	orrs	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	431a      	orrs	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b390:	431a      	orrs	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b39a:	431a      	orrs	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3a4:	ea42 0103 	orr.w	r1, r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	430a      	orrs	r2, r1
 800b3b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	0c1b      	lsrs	r3, r3, #16
 800b3be:	f003 0104 	and.w	r1, r3, #4
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c6:	f003 0210 	and.w	r2, r3, #16
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69da      	ldr	r2, [r3, #28]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b3e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b088      	sub	sp, #32
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	603b      	str	r3, [r7, #0]
 800b406:	4613      	mov	r3, r2
 800b408:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <HAL_SPI_Transmit+0x22>
 800b418:	2302      	movs	r3, #2
 800b41a:	e126      	b.n	800b66a <HAL_SPI_Transmit+0x270>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b424:	f7fc f804 	bl	8007430 <HAL_GetTick>
 800b428:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b42a:	88fb      	ldrh	r3, [r7, #6]
 800b42c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b01      	cmp	r3, #1
 800b438:	d002      	beq.n	800b440 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b43a:	2302      	movs	r3, #2
 800b43c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b43e:	e10b      	b.n	800b658 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d002      	beq.n	800b44c <HAL_SPI_Transmit+0x52>
 800b446:	88fb      	ldrh	r3, [r7, #6]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d102      	bne.n	800b452 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b450:	e102      	b.n	800b658 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2203      	movs	r2, #3
 800b456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	88fa      	ldrh	r2, [r7, #6]
 800b46a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	88fa      	ldrh	r2, [r7, #6]
 800b470:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b498:	d10f      	bne.n	800b4ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b4a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4c4:	2b40      	cmp	r3, #64	@ 0x40
 800b4c6:	d007      	beq.n	800b4d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4e0:	d14b      	bne.n	800b57a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d002      	beq.n	800b4f0 <HAL_SPI_Transmit+0xf6>
 800b4ea:	8afb      	ldrh	r3, [r7, #22]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d13e      	bne.n	800b56e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f4:	881a      	ldrh	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b500:	1c9a      	adds	r2, r3, #2
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	3b01      	subs	r3, #1
 800b50e:	b29a      	uxth	r2, r3
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b514:	e02b      	b.n	800b56e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	f003 0302 	and.w	r3, r3, #2
 800b520:	2b02      	cmp	r3, #2
 800b522:	d112      	bne.n	800b54a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b528:	881a      	ldrh	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b534:	1c9a      	adds	r2, r3, #2
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b53e:	b29b      	uxth	r3, r3
 800b540:	3b01      	subs	r3, #1
 800b542:	b29a      	uxth	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b548:	e011      	b.n	800b56e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b54a:	f7fb ff71 	bl	8007430 <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d803      	bhi.n	800b562 <HAL_SPI_Transmit+0x168>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b560:	d102      	bne.n	800b568 <HAL_SPI_Transmit+0x16e>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b56c:	e074      	b.n	800b658 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b572:	b29b      	uxth	r3, r3
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1ce      	bne.n	800b516 <HAL_SPI_Transmit+0x11c>
 800b578:	e04c      	b.n	800b614 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <HAL_SPI_Transmit+0x18e>
 800b582:	8afb      	ldrh	r3, [r7, #22]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d140      	bne.n	800b60a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	330c      	adds	r3, #12
 800b592:	7812      	ldrb	r2, [r2, #0]
 800b594:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b59a:	1c5a      	adds	r2, r3, #1
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b5ae:	e02c      	b.n	800b60a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d113      	bne.n	800b5e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	330c      	adds	r3, #12
 800b5c8:	7812      	ldrb	r2, [r2, #0]
 800b5ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b5e4:	e011      	b.n	800b60a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5e6:	f7fb ff23 	bl	8007430 <HAL_GetTick>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d803      	bhi.n	800b5fe <HAL_SPI_Transmit+0x204>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fc:	d102      	bne.n	800b604 <HAL_SPI_Transmit+0x20a>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b604:	2303      	movs	r3, #3
 800b606:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b608:	e026      	b.n	800b658 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b60e:	b29b      	uxth	r3, r3
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1cd      	bne.n	800b5b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b614:	69ba      	ldr	r2, [r7, #24]
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 fce9 	bl	800bff0 <SPI_EndRxTxTransaction>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2220      	movs	r2, #32
 800b628:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10a      	bne.n	800b648 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b632:	2300      	movs	r3, #0
 800b634:	613b      	str	r3, [r7, #16]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	613b      	str	r3, [r7, #16]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	613b      	str	r3, [r7, #16]
 800b646:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	77fb      	strb	r3, [r7, #31]
 800b654:	e000      	b.n	800b658 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b656:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800b668:	7ffb      	ldrb	r3, [r7, #31]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3720      	adds	r7, #32
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b088      	sub	sp, #32
 800b676:	af02      	add	r7, sp, #8
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	60b9      	str	r1, [r7, #8]
 800b67c:	603b      	str	r3, [r7, #0]
 800b67e:	4613      	mov	r3, r2
 800b680:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b68e:	d112      	bne.n	800b6b6 <HAL_SPI_Receive+0x44>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10e      	bne.n	800b6b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2204      	movs	r2, #4
 800b69c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b6a0:	88fa      	ldrh	r2, [r7, #6]
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 f8f1 	bl	800b894 <HAL_SPI_TransmitReceive>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	e0ea      	b.n	800b88c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d101      	bne.n	800b6c4 <HAL_SPI_Receive+0x52>
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	e0e3      	b.n	800b88c <HAL_SPI_Receive+0x21a>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6cc:	f7fb feb0 	bl	8007430 <HAL_GetTick>
 800b6d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d002      	beq.n	800b6e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b6de:	2302      	movs	r3, #2
 800b6e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6e2:	e0ca      	b.n	800b87a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <HAL_SPI_Receive+0x7e>
 800b6ea:	88fb      	ldrh	r3, [r7, #6]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d102      	bne.n	800b6f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6f4:	e0c1      	b.n	800b87a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2204      	movs	r2, #4
 800b6fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	88fa      	ldrh	r2, [r7, #6]
 800b70e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	88fa      	ldrh	r2, [r7, #6]
 800b714:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b73c:	d10f      	bne.n	800b75e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b74c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b75c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b768:	2b40      	cmp	r3, #64	@ 0x40
 800b76a:	d007      	beq.n	800b77c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b77a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d162      	bne.n	800b84a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b784:	e02e      	b.n	800b7e4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	2b01      	cmp	r3, #1
 800b792:	d115      	bne.n	800b7c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f103 020c 	add.w	r2, r3, #12
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7a0:	7812      	ldrb	r2, [r2, #0]
 800b7a2:	b2d2      	uxtb	r2, r2
 800b7a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b7be:	e011      	b.n	800b7e4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7c0:	f7fb fe36 	bl	8007430 <HAL_GetTick>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d803      	bhi.n	800b7d8 <HAL_SPI_Receive+0x166>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d102      	bne.n	800b7de <HAL_SPI_Receive+0x16c>
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b7e2:	e04a      	b.n	800b87a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1cb      	bne.n	800b786 <HAL_SPI_Receive+0x114>
 800b7ee:	e031      	b.n	800b854 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d113      	bne.n	800b826 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68da      	ldr	r2, [r3, #12]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b808:	b292      	uxth	r2, r2
 800b80a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b810:	1c9a      	adds	r2, r3, #2
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	3b01      	subs	r3, #1
 800b81e:	b29a      	uxth	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b824:	e011      	b.n	800b84a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b826:	f7fb fe03 	bl	8007430 <HAL_GetTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d803      	bhi.n	800b83e <HAL_SPI_Receive+0x1cc>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83c:	d102      	bne.n	800b844 <HAL_SPI_Receive+0x1d2>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b848:	e017      	b.n	800b87a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b84e:	b29b      	uxth	r3, r3
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1cd      	bne.n	800b7f0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 fb63 	bl	800bf24 <SPI_EndRxTransaction>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2220      	movs	r2, #32
 800b868:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	75fb      	strb	r3, [r7, #23]
 800b876:	e000      	b.n	800b87a <HAL_SPI_Receive+0x208>
  }

error :
 800b878:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08c      	sub	sp, #48	@ 0x30
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
 800b8a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d101      	bne.n	800b8ba <HAL_SPI_TransmitReceive+0x26>
 800b8b6:	2302      	movs	r3, #2
 800b8b8:	e18a      	b.n	800bbd0 <HAL_SPI_TransmitReceive+0x33c>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8c2:	f7fb fdb5 	bl	8007430 <HAL_GetTick>
 800b8c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b8d8:	887b      	ldrh	r3, [r7, #2]
 800b8da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d00f      	beq.n	800b904 <HAL_SPI_TransmitReceive+0x70>
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b8ea:	d107      	bne.n	800b8fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d103      	bne.n	800b8fc <HAL_SPI_TransmitReceive+0x68>
 800b8f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b8f8:	2b04      	cmp	r3, #4
 800b8fa:	d003      	beq.n	800b904 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800b902:	e15b      	b.n	800bbbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <HAL_SPI_TransmitReceive+0x82>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <HAL_SPI_TransmitReceive+0x82>
 800b910:	887b      	ldrh	r3, [r7, #2]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d103      	bne.n	800b91e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800b91c:	e14e      	b.n	800bbbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b04      	cmp	r3, #4
 800b928:	d003      	beq.n	800b932 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2205      	movs	r2, #5
 800b92e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	887a      	ldrh	r2, [r7, #2]
 800b942:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	887a      	ldrh	r2, [r7, #2]
 800b948:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	887a      	ldrh	r2, [r7, #2]
 800b954:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	887a      	ldrh	r2, [r7, #2]
 800b95a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b972:	2b40      	cmp	r3, #64	@ 0x40
 800b974:	d007      	beq.n	800b986 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b984:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b98e:	d178      	bne.n	800ba82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <HAL_SPI_TransmitReceive+0x10a>
 800b998:	8b7b      	ldrh	r3, [r7, #26]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d166      	bne.n	800ba6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a2:	881a      	ldrh	r2, [r3, #0]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ae:	1c9a      	adds	r2, r3, #2
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9c2:	e053      	b.n	800ba6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f003 0302 	and.w	r3, r3, #2
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d11b      	bne.n	800ba0a <HAL_SPI_TransmitReceive+0x176>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d016      	beq.n	800ba0a <HAL_SPI_TransmitReceive+0x176>
 800b9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d113      	bne.n	800ba0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9e6:	881a      	ldrh	r2, [r3, #0]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f2:	1c9a      	adds	r2, r3, #2
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba06:	2300      	movs	r3, #0
 800ba08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d119      	bne.n	800ba4c <HAL_SPI_TransmitReceive+0x1b8>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d014      	beq.n	800ba4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68da      	ldr	r2, [r3, #12]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba2c:	b292      	uxth	r2, r2
 800ba2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba34:	1c9a      	adds	r2, r3, #2
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	3b01      	subs	r3, #1
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba4c:	f7fb fcf0 	bl	8007430 <HAL_GetTick>
 800ba50:	4602      	mov	r2, r0
 800ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d807      	bhi.n	800ba6c <HAL_SPI_TransmitReceive+0x1d8>
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba62:	d003      	beq.n	800ba6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ba64:	2303      	movs	r3, #3
 800ba66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800ba6a:	e0a7      	b.n	800bbbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1a6      	bne.n	800b9c4 <HAL_SPI_TransmitReceive+0x130>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1a1      	bne.n	800b9c4 <HAL_SPI_TransmitReceive+0x130>
 800ba80:	e07c      	b.n	800bb7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <HAL_SPI_TransmitReceive+0x1fc>
 800ba8a:	8b7b      	ldrh	r3, [r7, #26]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d16b      	bne.n	800bb68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	330c      	adds	r3, #12
 800ba9a:	7812      	ldrb	r2, [r2, #0]
 800ba9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800baac:	b29b      	uxth	r3, r3
 800baae:	3b01      	subs	r3, #1
 800bab0:	b29a      	uxth	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bab6:	e057      	b.n	800bb68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	f003 0302 	and.w	r3, r3, #2
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d11c      	bne.n	800bb00 <HAL_SPI_TransmitReceive+0x26c>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800baca:	b29b      	uxth	r3, r3
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d017      	beq.n	800bb00 <HAL_SPI_TransmitReceive+0x26c>
 800bad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d114      	bne.n	800bb00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	330c      	adds	r3, #12
 800bae0:	7812      	ldrb	r2, [r2, #0]
 800bae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	3b01      	subs	r3, #1
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bafc:	2300      	movs	r3, #0
 800bafe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d119      	bne.n	800bb42 <HAL_SPI_TransmitReceive+0x2ae>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d014      	beq.n	800bb42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68da      	ldr	r2, [r3, #12]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb22:	b2d2      	uxtb	r2, r2
 800bb24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	3b01      	subs	r3, #1
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb42:	f7fb fc75 	bl	8007430 <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d803      	bhi.n	800bb5a <HAL_SPI_TransmitReceive+0x2c6>
 800bb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb58:	d102      	bne.n	800bb60 <HAL_SPI_TransmitReceive+0x2cc>
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d103      	bne.n	800bb68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bb60:	2303      	movs	r3, #3
 800bb62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800bb66:	e029      	b.n	800bbbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1a2      	bne.n	800bab8 <HAL_SPI_TransmitReceive+0x224>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d19d      	bne.n	800bab8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f000 fa35 	bl	800bff0 <SPI_EndRxTxTransaction>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d006      	beq.n	800bb9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2220      	movs	r2, #32
 800bb96:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800bb98:	e010      	b.n	800bbbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10b      	bne.n	800bbba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bba2:	2300      	movs	r3, #0
 800bba4:	617b      	str	r3, [r7, #20]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	617b      	str	r3, [r7, #20]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	617b      	str	r3, [r7, #20]
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	e000      	b.n	800bbbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bbba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800bbcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3730      	adds	r7, #48	@ 0x30
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	099b      	lsrs	r3, r3, #6
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10f      	bne.n	800bc1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00a      	beq.n	800bc1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	099b      	lsrs	r3, r3, #6
 800bc0a:	f003 0301 	and.w	r3, r3, #1
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d004      	beq.n	800bc1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	4798      	blx	r3
    return;
 800bc1a:	e0d7      	b.n	800bdcc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	085b      	lsrs	r3, r3, #1
 800bc20:	f003 0301 	and.w	r3, r3, #1
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00a      	beq.n	800bc3e <HAL_SPI_IRQHandler+0x66>
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	09db      	lsrs	r3, r3, #7
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d004      	beq.n	800bc3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	4798      	blx	r3
    return;
 800bc3c:	e0c6      	b.n	800bdcc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	095b      	lsrs	r3, r3, #5
 800bc42:	f003 0301 	and.w	r3, r3, #1
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10c      	bne.n	800bc64 <HAL_SPI_IRQHandler+0x8c>
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	099b      	lsrs	r3, r3, #6
 800bc4e:	f003 0301 	and.w	r3, r3, #1
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	0a1b      	lsrs	r3, r3, #8
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f000 80b4 	beq.w	800bdcc <HAL_SPI_IRQHandler+0x1f4>
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	095b      	lsrs	r3, r3, #5
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 80ad 	beq.w	800bdcc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	099b      	lsrs	r3, r3, #6
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d023      	beq.n	800bcc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d011      	beq.n	800bcae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc8e:	f043 0204 	orr.w	r2, r3, #4
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc96:	2300      	movs	r3, #0
 800bc98:	617b      	str	r3, [r7, #20]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	617b      	str	r3, [r7, #20]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	617b      	str	r3, [r7, #20]
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	e00b      	b.n	800bcc6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcae:	2300      	movs	r3, #0
 800bcb0:	613b      	str	r3, [r7, #16]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	613b      	str	r3, [r7, #16]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	693b      	ldr	r3, [r7, #16]
        return;
 800bcc4:	e082      	b.n	800bdcc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	095b      	lsrs	r3, r3, #5
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d014      	beq.n	800bcfc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcd6:	f043 0201 	orr.w	r2, r3, #1
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	0a1b      	lsrs	r3, r3, #8
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00c      	beq.n	800bd22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd0c:	f043 0208 	orr.w	r2, r3, #8
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bd14:	2300      	movs	r3, #0
 800bd16:	60bb      	str	r3, [r7, #8]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	60bb      	str	r3, [r7, #8]
 800bd20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d04f      	beq.n	800bdca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	685a      	ldr	r2, [r3, #4]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bd38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	f003 0302 	and.w	r3, r3, #2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d104      	bne.n	800bd56 <HAL_SPI_IRQHandler+0x17e>
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d034      	beq.n	800bdc0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f022 0203 	bic.w	r2, r2, #3
 800bd64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d011      	beq.n	800bd92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd72:	4a18      	ldr	r2, [pc, #96]	@ (800bdd4 <HAL_SPI_IRQHandler+0x1fc>)
 800bd74:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fb fd48 	bl	8007810 <HAL_DMA_Abort_IT>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d005      	beq.n	800bd92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d016      	beq.n	800bdc8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd9e:	4a0d      	ldr	r2, [pc, #52]	@ (800bdd4 <HAL_SPI_IRQHandler+0x1fc>)
 800bda0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fb fd32 	bl	8007810 <HAL_DMA_Abort_IT>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00a      	beq.n	800bdc8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800bdbe:	e003      	b.n	800bdc8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f809 	bl	800bdd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bdc6:	e000      	b.n	800bdca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bdc8:	bf00      	nop
    return;
 800bdca:	bf00      	nop
  }
}
 800bdcc:	3720      	adds	r7, #32
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	0800bded 	.word	0x0800bded

0800bdd8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7ff ffe6 	bl	800bdd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be0c:	bf00      	nop
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	603b      	str	r3, [r7, #0]
 800be20:	4613      	mov	r3, r2
 800be22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800be24:	f7fb fb04 	bl	8007430 <HAL_GetTick>
 800be28:	4602      	mov	r2, r0
 800be2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2c:	1a9b      	subs	r3, r3, r2
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	4413      	add	r3, r2
 800be32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800be34:	f7fb fafc 	bl	8007430 <HAL_GetTick>
 800be38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800be3a:	4b39      	ldr	r3, [pc, #228]	@ (800bf20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	015b      	lsls	r3, r3, #5
 800be40:	0d1b      	lsrs	r3, r3, #20
 800be42:	69fa      	ldr	r2, [r7, #28]
 800be44:	fb02 f303 	mul.w	r3, r2, r3
 800be48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be4a:	e054      	b.n	800bef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be52:	d050      	beq.n	800bef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be54:	f7fb faec 	bl	8007430 <HAL_GetTick>
 800be58:	4602      	mov	r2, r0
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	69fa      	ldr	r2, [r7, #28]
 800be60:	429a      	cmp	r2, r3
 800be62:	d902      	bls.n	800be6a <SPI_WaitFlagStateUntilTimeout+0x56>
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d13d      	bne.n	800bee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800be78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800be82:	d111      	bne.n	800bea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be8c:	d004      	beq.n	800be98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be96:	d107      	bne.n	800bea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beb0:	d10f      	bne.n	800bed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bee2:	2303      	movs	r3, #3
 800bee4:	e017      	b.n	800bf16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	689a      	ldr	r2, [r3, #8]
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	4013      	ands	r3, r2
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	bf0c      	ite	eq
 800bf06:	2301      	moveq	r3, #1
 800bf08:	2300      	movne	r3, #0
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	79fb      	ldrb	r3, [r7, #7]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d19b      	bne.n	800be4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3720      	adds	r7, #32
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20000154 	.word	0x20000154

0800bf24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b086      	sub	sp, #24
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bf38:	d111      	bne.n	800bf5e <SPI_EndRxTransaction+0x3a>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf42:	d004      	beq.n	800bf4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf4c:	d107      	bne.n	800bf5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bf66:	d12a      	bne.n	800bfbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf70:	d012      	beq.n	800bf98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	2180      	movs	r1, #128	@ 0x80
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f7ff ff49 	bl	800be14 <SPI_WaitFlagStateUntilTimeout>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d02d      	beq.n	800bfe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf8c:	f043 0220 	orr.w	r2, r3, #32
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bf94:	2303      	movs	r3, #3
 800bf96:	e026      	b.n	800bfe6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff ff36 	bl	800be14 <SPI_WaitFlagStateUntilTimeout>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d01a      	beq.n	800bfe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfb2:	f043 0220 	orr.w	r2, r3, #32
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e013      	b.n	800bfe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f7ff ff23 	bl	800be14 <SPI_WaitFlagStateUntilTimeout>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d007      	beq.n	800bfe4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfd8:	f043 0220 	orr.w	r2, r3, #32
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e000      	b.n	800bfe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af02      	add	r7, sp, #8
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bffc:	4b1b      	ldr	r3, [pc, #108]	@ (800c06c <SPI_EndRxTxTransaction+0x7c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a1b      	ldr	r2, [pc, #108]	@ (800c070 <SPI_EndRxTxTransaction+0x80>)
 800c002:	fba2 2303 	umull	r2, r3, r2, r3
 800c006:	0d5b      	lsrs	r3, r3, #21
 800c008:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c00c:	fb02 f303 	mul.w	r3, r2, r3
 800c010:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c01a:	d112      	bne.n	800c042 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	2200      	movs	r2, #0
 800c024:	2180      	movs	r1, #128	@ 0x80
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f7ff fef4 	bl	800be14 <SPI_WaitFlagStateUntilTimeout>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d016      	beq.n	800c060 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c036:	f043 0220 	orr.w	r2, r3, #32
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e00f      	b.n	800c062 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00a      	beq.n	800c05e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c058:	2b80      	cmp	r3, #128	@ 0x80
 800c05a:	d0f2      	beq.n	800c042 <SPI_EndRxTxTransaction+0x52>
 800c05c:	e000      	b.n	800c060 <SPI_EndRxTxTransaction+0x70>
        break;
 800c05e:	bf00      	nop
  }

  return HAL_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000154 	.word	0x20000154
 800c070:	165e9f81 	.word	0x165e9f81

0800c074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e041      	b.n	800c10a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7fa fdb0 	bl	8006c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	f000 fae0 	bl	800c678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b01      	cmp	r3, #1
 800c126:	d001      	beq.n	800c12c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e04e      	b.n	800c1ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2202      	movs	r2, #2
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f042 0201 	orr.w	r2, r2, #1
 800c142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a23      	ldr	r2, [pc, #140]	@ (800c1d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d022      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c156:	d01d      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a1f      	ldr	r2, [pc, #124]	@ (800c1dc <HAL_TIM_Base_Start_IT+0xc8>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d018      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a1e      	ldr	r2, [pc, #120]	@ (800c1e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d013      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a1c      	ldr	r2, [pc, #112]	@ (800c1e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d00e      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a1b      	ldr	r2, [pc, #108]	@ (800c1e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d009      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a19      	ldr	r2, [pc, #100]	@ (800c1ec <HAL_TIM_Base_Start_IT+0xd8>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d004      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a18      	ldr	r2, [pc, #96]	@ (800c1f0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d111      	bne.n	800c1b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f003 0307 	and.w	r3, r3, #7
 800c19e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b06      	cmp	r3, #6
 800c1a4:	d010      	beq.n	800c1c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f042 0201 	orr.w	r2, r2, #1
 800c1b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b6:	e007      	b.n	800c1c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f042 0201 	orr.w	r2, r2, #1
 800c1c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	40010000 	.word	0x40010000
 800c1dc:	40000400 	.word	0x40000400
 800c1e0:	40000800 	.word	0x40000800
 800c1e4:	40000c00 	.word	0x40000c00
 800c1e8:	40010400 	.word	0x40010400
 800c1ec:	40014000 	.word	0x40014000
 800c1f0:	40001800 	.word	0x40001800

0800c1f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e041      	b.n	800c28a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f7fa fcce 	bl	8006bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2202      	movs	r2, #2
 800c224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3304      	adds	r3, #4
 800c230:	4619      	mov	r1, r3
 800c232:	4610      	mov	r0, r2
 800c234:	f000 fa20 	bl	800c678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b082      	sub	sp, #8
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	f003 0302 	and.w	r3, r3, #2
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d122      	bne.n	800c2ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f003 0302 	and.w	r3, r3, #2
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d11b      	bne.n	800c2ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f06f 0202 	mvn.w	r2, #2
 800c2be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	f003 0303 	and.w	r3, r3, #3
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d003      	beq.n	800c2dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f9b1 	bl	800c63c <HAL_TIM_IC_CaptureCallback>
 800c2da:	e005      	b.n	800c2e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f9a3 	bl	800c628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f9b4 	bl	800c650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	d122      	bne.n	800c342 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	f003 0304 	and.w	r3, r3, #4
 800c306:	2b04      	cmp	r3, #4
 800c308:	d11b      	bne.n	800c342 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f06f 0204 	mvn.w	r2, #4
 800c312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2202      	movs	r2, #2
 800c318:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c324:	2b00      	cmp	r3, #0
 800c326:	d003      	beq.n	800c330 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f987 	bl	800c63c <HAL_TIM_IC_CaptureCallback>
 800c32e:	e005      	b.n	800c33c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f979 	bl	800c628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f98a 	bl	800c650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	f003 0308 	and.w	r3, r3, #8
 800c34c:	2b08      	cmp	r3, #8
 800c34e:	d122      	bne.n	800c396 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	f003 0308 	and.w	r3, r3, #8
 800c35a:	2b08      	cmp	r3, #8
 800c35c:	d11b      	bne.n	800c396 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f06f 0208 	mvn.w	r2, #8
 800c366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2204      	movs	r2, #4
 800c36c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	69db      	ldr	r3, [r3, #28]
 800c374:	f003 0303 	and.w	r3, r3, #3
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f95d 	bl	800c63c <HAL_TIM_IC_CaptureCallback>
 800c382:	e005      	b.n	800c390 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f94f 	bl	800c628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f960 	bl	800c650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	f003 0310 	and.w	r3, r3, #16
 800c3a0:	2b10      	cmp	r3, #16
 800c3a2:	d122      	bne.n	800c3ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	f003 0310 	and.w	r3, r3, #16
 800c3ae:	2b10      	cmp	r3, #16
 800c3b0:	d11b      	bne.n	800c3ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f06f 0210 	mvn.w	r2, #16
 800c3ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2208      	movs	r2, #8
 800c3c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	69db      	ldr	r3, [r3, #28]
 800c3c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f933 	bl	800c63c <HAL_TIM_IC_CaptureCallback>
 800c3d6:	e005      	b.n	800c3e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f925 	bl	800c628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f936 	bl	800c650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d10e      	bne.n	800c416 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	2b01      	cmp	r3, #1
 800c404:	d107      	bne.n	800c416 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f06f 0201 	mvn.w	r2, #1
 800c40e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7fa fb15 	bl	8006a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c420:	2b80      	cmp	r3, #128	@ 0x80
 800c422:	d10e      	bne.n	800c442 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c42e:	2b80      	cmp	r3, #128	@ 0x80
 800c430:	d107      	bne.n	800c442 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c43a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fbf1 	bl	800cc24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c44c:	2b40      	cmp	r3, #64	@ 0x40
 800c44e:	d10e      	bne.n	800c46e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c45a:	2b40      	cmp	r3, #64	@ 0x40
 800c45c:	d107      	bne.n	800c46e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 f8fb 	bl	800c664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	f003 0320 	and.w	r3, r3, #32
 800c478:	2b20      	cmp	r3, #32
 800c47a:	d10e      	bne.n	800c49a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	f003 0320 	and.w	r3, r3, #32
 800c486:	2b20      	cmp	r3, #32
 800c488:	d107      	bne.n	800c49a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f06f 0220 	mvn.w	r2, #32
 800c492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fbbb 	bl	800cc10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c49a:	bf00      	nop
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d101      	bne.n	800c4c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c4be:	2302      	movs	r3, #2
 800c4c0:	e0ae      	b.n	800c620 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b0c      	cmp	r3, #12
 800c4ce:	f200 809f 	bhi.w	800c610 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d8:	0800c50d 	.word	0x0800c50d
 800c4dc:	0800c611 	.word	0x0800c611
 800c4e0:	0800c611 	.word	0x0800c611
 800c4e4:	0800c611 	.word	0x0800c611
 800c4e8:	0800c54d 	.word	0x0800c54d
 800c4ec:	0800c611 	.word	0x0800c611
 800c4f0:	0800c611 	.word	0x0800c611
 800c4f4:	0800c611 	.word	0x0800c611
 800c4f8:	0800c58f 	.word	0x0800c58f
 800c4fc:	0800c611 	.word	0x0800c611
 800c500:	0800c611 	.word	0x0800c611
 800c504:	0800c611 	.word	0x0800c611
 800c508:	0800c5cf 	.word	0x0800c5cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68b9      	ldr	r1, [r7, #8]
 800c512:	4618      	mov	r0, r3
 800c514:	f000 f950 	bl	800c7b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	699a      	ldr	r2, [r3, #24]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f042 0208 	orr.w	r2, r2, #8
 800c526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	699a      	ldr	r2, [r3, #24]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f022 0204 	bic.w	r2, r2, #4
 800c536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6999      	ldr	r1, [r3, #24]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	691a      	ldr	r2, [r3, #16]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	430a      	orrs	r2, r1
 800c548:	619a      	str	r2, [r3, #24]
      break;
 800c54a:	e064      	b.n	800c616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68b9      	ldr	r1, [r7, #8]
 800c552:	4618      	mov	r0, r3
 800c554:	f000 f9a0 	bl	800c898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	699a      	ldr	r2, [r3, #24]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	699a      	ldr	r2, [r3, #24]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	6999      	ldr	r1, [r3, #24]
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	021a      	lsls	r2, r3, #8
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	430a      	orrs	r2, r1
 800c58a:	619a      	str	r2, [r3, #24]
      break;
 800c58c:	e043      	b.n	800c616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	4618      	mov	r0, r3
 800c596:	f000 f9f5 	bl	800c984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	69da      	ldr	r2, [r3, #28]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f042 0208 	orr.w	r2, r2, #8
 800c5a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	69da      	ldr	r2, [r3, #28]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f022 0204 	bic.w	r2, r2, #4
 800c5b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	69d9      	ldr	r1, [r3, #28]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	691a      	ldr	r2, [r3, #16]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	430a      	orrs	r2, r1
 800c5ca:	61da      	str	r2, [r3, #28]
      break;
 800c5cc:	e023      	b.n	800c616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68b9      	ldr	r1, [r7, #8]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 fa49 	bl	800ca6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	69da      	ldr	r2, [r3, #28]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	69da      	ldr	r2, [r3, #28]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	69d9      	ldr	r1, [r3, #28]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	021a      	lsls	r2, r3, #8
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	61da      	str	r2, [r3, #28]
      break;
 800c60e:	e002      	b.n	800c616 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	75fb      	strb	r3, [r7, #23]
      break;
 800c614:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3718      	adds	r7, #24
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a40      	ldr	r2, [pc, #256]	@ (800c78c <TIM_Base_SetConfig+0x114>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d013      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c696:	d00f      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a3d      	ldr	r2, [pc, #244]	@ (800c790 <TIM_Base_SetConfig+0x118>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d00b      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a3c      	ldr	r2, [pc, #240]	@ (800c794 <TIM_Base_SetConfig+0x11c>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d007      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a3b      	ldr	r2, [pc, #236]	@ (800c798 <TIM_Base_SetConfig+0x120>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d003      	beq.n	800c6b8 <TIM_Base_SetConfig+0x40>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a3a      	ldr	r2, [pc, #232]	@ (800c79c <TIM_Base_SetConfig+0x124>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d108      	bne.n	800c6ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a2f      	ldr	r2, [pc, #188]	@ (800c78c <TIM_Base_SetConfig+0x114>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d02b      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6d8:	d027      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a2c      	ldr	r2, [pc, #176]	@ (800c790 <TIM_Base_SetConfig+0x118>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d023      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a2b      	ldr	r2, [pc, #172]	@ (800c794 <TIM_Base_SetConfig+0x11c>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d01f      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a2a      	ldr	r2, [pc, #168]	@ (800c798 <TIM_Base_SetConfig+0x120>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d01b      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a29      	ldr	r2, [pc, #164]	@ (800c79c <TIM_Base_SetConfig+0x124>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d017      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a28      	ldr	r2, [pc, #160]	@ (800c7a0 <TIM_Base_SetConfig+0x128>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d013      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a27      	ldr	r2, [pc, #156]	@ (800c7a4 <TIM_Base_SetConfig+0x12c>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d00f      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4a26      	ldr	r2, [pc, #152]	@ (800c7a8 <TIM_Base_SetConfig+0x130>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d00b      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a25      	ldr	r2, [pc, #148]	@ (800c7ac <TIM_Base_SetConfig+0x134>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d007      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4a24      	ldr	r2, [pc, #144]	@ (800c7b0 <TIM_Base_SetConfig+0x138>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d003      	beq.n	800c72a <TIM_Base_SetConfig+0xb2>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a23      	ldr	r2, [pc, #140]	@ (800c7b4 <TIM_Base_SetConfig+0x13c>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d108      	bne.n	800c73c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	4313      	orrs	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	4313      	orrs	r3, r2
 800c748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	689a      	ldr	r2, [r3, #8]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a0a      	ldr	r2, [pc, #40]	@ (800c78c <TIM_Base_SetConfig+0x114>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d003      	beq.n	800c770 <TIM_Base_SetConfig+0xf8>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a0c      	ldr	r2, [pc, #48]	@ (800c79c <TIM_Base_SetConfig+0x124>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d103      	bne.n	800c778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	691a      	ldr	r2, [r3, #16]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	615a      	str	r2, [r3, #20]
}
 800c77e:	bf00      	nop
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	40010000 	.word	0x40010000
 800c790:	40000400 	.word	0x40000400
 800c794:	40000800 	.word	0x40000800
 800c798:	40000c00 	.word	0x40000c00
 800c79c:	40010400 	.word	0x40010400
 800c7a0:	40014000 	.word	0x40014000
 800c7a4:	40014400 	.word	0x40014400
 800c7a8:	40014800 	.word	0x40014800
 800c7ac:	40001800 	.word	0x40001800
 800c7b0:	40001c00 	.word	0x40001c00
 800c7b4:	40002000 	.word	0x40002000

0800c7b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b087      	sub	sp, #28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	f023 0201 	bic.w	r2, r3, #1
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f023 0303 	bic.w	r3, r3, #3
 800c7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f023 0302 	bic.w	r3, r3, #2
 800c800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	4313      	orrs	r3, r2
 800c80a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a20      	ldr	r2, [pc, #128]	@ (800c890 <TIM_OC1_SetConfig+0xd8>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d003      	beq.n	800c81c <TIM_OC1_SetConfig+0x64>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a1f      	ldr	r2, [pc, #124]	@ (800c894 <TIM_OC1_SetConfig+0xdc>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d10c      	bne.n	800c836 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	f023 0308 	bic.w	r3, r3, #8
 800c822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f023 0304 	bic.w	r3, r3, #4
 800c834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a15      	ldr	r2, [pc, #84]	@ (800c890 <TIM_OC1_SetConfig+0xd8>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d003      	beq.n	800c846 <TIM_OC1_SetConfig+0x8e>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4a14      	ldr	r2, [pc, #80]	@ (800c894 <TIM_OC1_SetConfig+0xdc>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d111      	bne.n	800c86a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c84c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	699b      	ldr	r3, [r3, #24]
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	4313      	orrs	r3, r2
 800c868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	621a      	str	r2, [r3, #32]
}
 800c884:	bf00      	nop
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	40010000 	.word	0x40010000
 800c894:	40010400 	.word	0x40010400

0800c898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	f023 0210 	bic.w	r2, r3, #16
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	f023 0320 	bic.w	r3, r3, #32
 800c8e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	011b      	lsls	r3, r3, #4
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a22      	ldr	r2, [pc, #136]	@ (800c97c <TIM_OC2_SetConfig+0xe4>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d003      	beq.n	800c900 <TIM_OC2_SetConfig+0x68>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a21      	ldr	r2, [pc, #132]	@ (800c980 <TIM_OC2_SetConfig+0xe8>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d10d      	bne.n	800c91c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	011b      	lsls	r3, r3, #4
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	4313      	orrs	r3, r2
 800c912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c91a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a17      	ldr	r2, [pc, #92]	@ (800c97c <TIM_OC2_SetConfig+0xe4>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d003      	beq.n	800c92c <TIM_OC2_SetConfig+0x94>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a16      	ldr	r2, [pc, #88]	@ (800c980 <TIM_OC2_SetConfig+0xe8>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d113      	bne.n	800c954 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c93a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	695b      	ldr	r3, [r3, #20]
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	4313      	orrs	r3, r2
 800c946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	699b      	ldr	r3, [r3, #24]
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	693a      	ldr	r2, [r7, #16]
 800c950:	4313      	orrs	r3, r2
 800c952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	685a      	ldr	r2, [r3, #4]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	621a      	str	r2, [r3, #32]
}
 800c96e:	bf00      	nop
 800c970:	371c      	adds	r7, #28
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	40010000 	.word	0x40010000
 800c980:	40010400 	.word	0x40010400

0800c984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c984:	b480      	push	{r7}
 800c986:	b087      	sub	sp, #28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a1b      	ldr	r3, [r3, #32]
 800c99e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f023 0303 	bic.w	r3, r3, #3
 800c9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c9cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a21      	ldr	r2, [pc, #132]	@ (800ca64 <TIM_OC3_SetConfig+0xe0>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d003      	beq.n	800c9ea <TIM_OC3_SetConfig+0x66>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a20      	ldr	r2, [pc, #128]	@ (800ca68 <TIM_OC3_SetConfig+0xe4>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d10d      	bne.n	800ca06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	021b      	lsls	r3, r3, #8
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a16      	ldr	r2, [pc, #88]	@ (800ca64 <TIM_OC3_SetConfig+0xe0>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d003      	beq.n	800ca16 <TIM_OC3_SetConfig+0x92>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a15      	ldr	r2, [pc, #84]	@ (800ca68 <TIM_OC3_SetConfig+0xe4>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d113      	bne.n	800ca3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	011b      	lsls	r3, r3, #4
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	011b      	lsls	r3, r3, #4
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	693a      	ldr	r2, [r7, #16]
 800ca42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	685a      	ldr	r2, [r3, #4]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	697a      	ldr	r2, [r7, #20]
 800ca56:	621a      	str	r2, [r3, #32]
}
 800ca58:	bf00      	nop
 800ca5a:	371c      	adds	r7, #28
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	40010000 	.word	0x40010000
 800ca68:	40010400 	.word	0x40010400

0800ca6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
 800ca86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800caa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	021b      	lsls	r3, r3, #8
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	4313      	orrs	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	031b      	lsls	r3, r3, #12
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a12      	ldr	r2, [pc, #72]	@ (800cb10 <TIM_OC4_SetConfig+0xa4>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d003      	beq.n	800cad4 <TIM_OC4_SetConfig+0x68>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a11      	ldr	r2, [pc, #68]	@ (800cb14 <TIM_OC4_SetConfig+0xa8>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d109      	bne.n	800cae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	695b      	ldr	r3, [r3, #20]
 800cae0:	019b      	lsls	r3, r3, #6
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	693a      	ldr	r2, [r7, #16]
 800cb00:	621a      	str	r2, [r3, #32]
}
 800cb02:	bf00      	nop
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	40010000 	.word	0x40010000
 800cb14:	40010400 	.word	0x40010400

0800cb18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d101      	bne.n	800cb30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	e05a      	b.n	800cbe6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a21      	ldr	r2, [pc, #132]	@ (800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d022      	beq.n	800cbba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb7c:	d01d      	beq.n	800cbba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a1d      	ldr	r2, [pc, #116]	@ (800cbf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d018      	beq.n	800cbba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a1b      	ldr	r2, [pc, #108]	@ (800cbfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d013      	beq.n	800cbba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a1a      	ldr	r2, [pc, #104]	@ (800cc00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d00e      	beq.n	800cbba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a18      	ldr	r2, [pc, #96]	@ (800cc04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d009      	beq.n	800cbba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a17      	ldr	r2, [pc, #92]	@ (800cc08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d004      	beq.n	800cbba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a15      	ldr	r2, [pc, #84]	@ (800cc0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d10c      	bne.n	800cbd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	40010000 	.word	0x40010000
 800cbf8:	40000400 	.word	0x40000400
 800cbfc:	40000800 	.word	0x40000800
 800cc00:	40000c00 	.word	0x40000c00
 800cc04:	40010400 	.word	0x40010400
 800cc08:	40014000 	.word	0x40014000
 800cc0c:	40001800 	.word	0x40001800

0800cc10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e03f      	b.n	800ccca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d106      	bne.n	800cc64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7fa fab6 	bl	80071d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2224      	movs	r2, #36	@ 0x24
 800cc68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68da      	ldr	r2, [r3, #12]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cc7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f929 	bl	800ced4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	691a      	ldr	r2, [r3, #16]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cc90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	695a      	ldr	r2, [r3, #20]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68da      	ldr	r2, [r3, #12]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ccb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2220      	movs	r2, #32
 800ccc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b08a      	sub	sp, #40	@ 0x28
 800ccd6:	af02      	add	r7, sp, #8
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	60b9      	str	r1, [r7, #8]
 800ccdc:	603b      	str	r3, [r7, #0]
 800ccde:	4613      	mov	r3, r2
 800cce0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cce2:	2300      	movs	r3, #0
 800cce4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	2b20      	cmp	r3, #32
 800ccf0:	d17c      	bne.n	800cdec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d002      	beq.n	800ccfe <HAL_UART_Transmit+0x2c>
 800ccf8:	88fb      	ldrh	r3, [r7, #6]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e075      	b.n	800cdee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d101      	bne.n	800cd10 <HAL_UART_Transmit+0x3e>
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	e06e      	b.n	800cdee <HAL_UART_Transmit+0x11c>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2221      	movs	r2, #33	@ 0x21
 800cd22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd26:	f7fa fb83 	bl	8007430 <HAL_GetTick>
 800cd2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	88fa      	ldrh	r2, [r7, #6]
 800cd30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	88fa      	ldrh	r2, [r7, #6]
 800cd36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd40:	d108      	bne.n	800cd54 <HAL_UART_Transmit+0x82>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d104      	bne.n	800cd54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	61bb      	str	r3, [r7, #24]
 800cd52:	e003      	b.n	800cd5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800cd64:	e02a      	b.n	800cdbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	2180      	movs	r1, #128	@ 0x80
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f000 f840 	bl	800cdf6 <UART_WaitOnFlagUntilTimeout>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	e036      	b.n	800cdee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10b      	bne.n	800cd9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	3302      	adds	r3, #2
 800cd9a:	61bb      	str	r3, [r7, #24]
 800cd9c:	e007      	b.n	800cdae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1cf      	bne.n	800cd66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2140      	movs	r1, #64	@ 0x40
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 f810 	bl	800cdf6 <UART_WaitOnFlagUntilTimeout>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cddc:	2303      	movs	r3, #3
 800cdde:	e006      	b.n	800cdee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2220      	movs	r2, #32
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	e000      	b.n	800cdee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cdec:	2302      	movs	r3, #2
  }
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3720      	adds	r7, #32
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b090      	sub	sp, #64	@ 0x40
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	60f8      	str	r0, [r7, #12]
 800cdfe:	60b9      	str	r1, [r7, #8]
 800ce00:	603b      	str	r3, [r7, #0]
 800ce02:	4613      	mov	r3, r2
 800ce04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce06:	e050      	b.n	800ceaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0e:	d04c      	beq.n	800ceaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ce10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d007      	beq.n	800ce26 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce16:	f7fa fb0b 	bl	8007430 <HAL_GetTick>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d241      	bcs.n	800ceaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	330c      	adds	r3, #12
 800ce2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce30:	e853 3f00 	ldrex	r3, [r3]
 800ce34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce38:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800ce3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	330c      	adds	r3, #12
 800ce44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ce46:	637a      	str	r2, [r7, #52]	@ 0x34
 800ce48:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ce4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce4e:	e841 2300 	strex	r3, r2, [r1]
 800ce52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1e5      	bne.n	800ce26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3314      	adds	r3, #20
 800ce60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	e853 3f00 	ldrex	r3, [r3]
 800ce68:	613b      	str	r3, [r7, #16]
   return(result);
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	f023 0301 	bic.w	r3, r3, #1
 800ce70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3314      	adds	r3, #20
 800ce78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce7a:	623a      	str	r2, [r7, #32]
 800ce7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7e:	69f9      	ldr	r1, [r7, #28]
 800ce80:	6a3a      	ldr	r2, [r7, #32]
 800ce82:	e841 2300 	strex	r3, r2, [r1]
 800ce86:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1e5      	bne.n	800ce5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2220      	movs	r2, #32
 800ce92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e00f      	b.n	800ceca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	bf0c      	ite	eq
 800ceba:	2301      	moveq	r3, #1
 800cebc:	2300      	movne	r3, #0
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	461a      	mov	r2, r3
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d09f      	beq.n	800ce08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cec8:	2300      	movs	r3, #0
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3740      	adds	r7, #64	@ 0x40
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
	...

0800ced4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ced4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ced8:	b0c0      	sub	sp, #256	@ 0x100
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ceec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cef0:	68d9      	ldr	r1, [r3, #12]
 800cef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	ea40 0301 	orr.w	r3, r0, r1
 800cefc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cefe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf02:	689a      	ldr	r2, [r3, #8]
 800cf04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	431a      	orrs	r2, r3
 800cf0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	431a      	orrs	r2, r3
 800cf14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf18:	69db      	ldr	r3, [r3, #28]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cf2c:	f021 010c 	bic.w	r1, r1, #12
 800cf30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf3a:	430b      	orrs	r3, r1
 800cf3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	695b      	ldr	r3, [r3, #20]
 800cf46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cf4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf4e:	6999      	ldr	r1, [r3, #24]
 800cf50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	ea40 0301 	orr.w	r3, r0, r1
 800cf5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	4b8f      	ldr	r3, [pc, #572]	@ (800d1a0 <UART_SetConfig+0x2cc>)
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d005      	beq.n	800cf74 <UART_SetConfig+0xa0>
 800cf68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	4b8d      	ldr	r3, [pc, #564]	@ (800d1a4 <UART_SetConfig+0x2d0>)
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d104      	bne.n	800cf7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cf74:	f7fe f9a4 	bl	800b2c0 <HAL_RCC_GetPCLK2Freq>
 800cf78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cf7c:	e003      	b.n	800cf86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cf7e:	f7fe f98b 	bl	800b298 <HAL_RCC_GetPCLK1Freq>
 800cf82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf8a:	69db      	ldr	r3, [r3, #28]
 800cf8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf90:	f040 810c 	bne.w	800d1ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cf9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cfa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	462b      	mov	r3, r5
 800cfaa:	1891      	adds	r1, r2, r2
 800cfac:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cfae:	415b      	adcs	r3, r3
 800cfb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	eb12 0801 	adds.w	r8, r2, r1
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	eb43 0901 	adc.w	r9, r3, r1
 800cfc2:	f04f 0200 	mov.w	r2, #0
 800cfc6:	f04f 0300 	mov.w	r3, #0
 800cfca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cfd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cfd6:	4690      	mov	r8, r2
 800cfd8:	4699      	mov	r9, r3
 800cfda:	4623      	mov	r3, r4
 800cfdc:	eb18 0303 	adds.w	r3, r8, r3
 800cfe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cfe4:	462b      	mov	r3, r5
 800cfe6:	eb49 0303 	adc.w	r3, r9, r3
 800cfea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cfee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cffa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d002:	460b      	mov	r3, r1
 800d004:	18db      	adds	r3, r3, r3
 800d006:	653b      	str	r3, [r7, #80]	@ 0x50
 800d008:	4613      	mov	r3, r2
 800d00a:	eb42 0303 	adc.w	r3, r2, r3
 800d00e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d018:	f7f3 f8e8 	bl	80001ec <__aeabi_uldivmod>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	4b61      	ldr	r3, [pc, #388]	@ (800d1a8 <UART_SetConfig+0x2d4>)
 800d022:	fba3 2302 	umull	r2, r3, r3, r2
 800d026:	095b      	lsrs	r3, r3, #5
 800d028:	011c      	lsls	r4, r3, #4
 800d02a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d02e:	2200      	movs	r2, #0
 800d030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d034:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d03c:	4642      	mov	r2, r8
 800d03e:	464b      	mov	r3, r9
 800d040:	1891      	adds	r1, r2, r2
 800d042:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d044:	415b      	adcs	r3, r3
 800d046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d04c:	4641      	mov	r1, r8
 800d04e:	eb12 0a01 	adds.w	sl, r2, r1
 800d052:	4649      	mov	r1, r9
 800d054:	eb43 0b01 	adc.w	fp, r3, r1
 800d058:	f04f 0200 	mov.w	r2, #0
 800d05c:	f04f 0300 	mov.w	r3, #0
 800d060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d06c:	4692      	mov	sl, r2
 800d06e:	469b      	mov	fp, r3
 800d070:	4643      	mov	r3, r8
 800d072:	eb1a 0303 	adds.w	r3, sl, r3
 800d076:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d07a:	464b      	mov	r3, r9
 800d07c:	eb4b 0303 	adc.w	r3, fp, r3
 800d080:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d090:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d098:	460b      	mov	r3, r1
 800d09a:	18db      	adds	r3, r3, r3
 800d09c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d09e:	4613      	mov	r3, r2
 800d0a0:	eb42 0303 	adc.w	r3, r2, r3
 800d0a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d0aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d0ae:	f7f3 f89d 	bl	80001ec <__aeabi_uldivmod>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4611      	mov	r1, r2
 800d0b8:	4b3b      	ldr	r3, [pc, #236]	@ (800d1a8 <UART_SetConfig+0x2d4>)
 800d0ba:	fba3 2301 	umull	r2, r3, r3, r1
 800d0be:	095b      	lsrs	r3, r3, #5
 800d0c0:	2264      	movs	r2, #100	@ 0x64
 800d0c2:	fb02 f303 	mul.w	r3, r2, r3
 800d0c6:	1acb      	subs	r3, r1, r3
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d0ce:	4b36      	ldr	r3, [pc, #216]	@ (800d1a8 <UART_SetConfig+0x2d4>)
 800d0d0:	fba3 2302 	umull	r2, r3, r3, r2
 800d0d4:	095b      	lsrs	r3, r3, #5
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d0dc:	441c      	add	r4, r3
 800d0de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d0e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d0ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	1891      	adds	r1, r2, r2
 800d0f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d0f8:	415b      	adcs	r3, r3
 800d0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d100:	4641      	mov	r1, r8
 800d102:	1851      	adds	r1, r2, r1
 800d104:	6339      	str	r1, [r7, #48]	@ 0x30
 800d106:	4649      	mov	r1, r9
 800d108:	414b      	adcs	r3, r1
 800d10a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d10c:	f04f 0200 	mov.w	r2, #0
 800d110:	f04f 0300 	mov.w	r3, #0
 800d114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d118:	4659      	mov	r1, fp
 800d11a:	00cb      	lsls	r3, r1, #3
 800d11c:	4651      	mov	r1, sl
 800d11e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d122:	4651      	mov	r1, sl
 800d124:	00ca      	lsls	r2, r1, #3
 800d126:	4610      	mov	r0, r2
 800d128:	4619      	mov	r1, r3
 800d12a:	4603      	mov	r3, r0
 800d12c:	4642      	mov	r2, r8
 800d12e:	189b      	adds	r3, r3, r2
 800d130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d134:	464b      	mov	r3, r9
 800d136:	460a      	mov	r2, r1
 800d138:	eb42 0303 	adc.w	r3, r2, r3
 800d13c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d14c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d154:	460b      	mov	r3, r1
 800d156:	18db      	adds	r3, r3, r3
 800d158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d15a:	4613      	mov	r3, r2
 800d15c:	eb42 0303 	adc.w	r3, r2, r3
 800d160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d16a:	f7f3 f83f 	bl	80001ec <__aeabi_uldivmod>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	4b0d      	ldr	r3, [pc, #52]	@ (800d1a8 <UART_SetConfig+0x2d4>)
 800d174:	fba3 1302 	umull	r1, r3, r3, r2
 800d178:	095b      	lsrs	r3, r3, #5
 800d17a:	2164      	movs	r1, #100	@ 0x64
 800d17c:	fb01 f303 	mul.w	r3, r1, r3
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	00db      	lsls	r3, r3, #3
 800d184:	3332      	adds	r3, #50	@ 0x32
 800d186:	4a08      	ldr	r2, [pc, #32]	@ (800d1a8 <UART_SetConfig+0x2d4>)
 800d188:	fba2 2303 	umull	r2, r3, r2, r3
 800d18c:	095b      	lsrs	r3, r3, #5
 800d18e:	f003 0207 	and.w	r2, r3, #7
 800d192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4422      	add	r2, r4
 800d19a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d19c:	e106      	b.n	800d3ac <UART_SetConfig+0x4d8>
 800d19e:	bf00      	nop
 800d1a0:	40011000 	.word	0x40011000
 800d1a4:	40011400 	.word	0x40011400
 800d1a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d1ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d1b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d1ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d1be:	4642      	mov	r2, r8
 800d1c0:	464b      	mov	r3, r9
 800d1c2:	1891      	adds	r1, r2, r2
 800d1c4:	6239      	str	r1, [r7, #32]
 800d1c6:	415b      	adcs	r3, r3
 800d1c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d1ce:	4641      	mov	r1, r8
 800d1d0:	1854      	adds	r4, r2, r1
 800d1d2:	4649      	mov	r1, r9
 800d1d4:	eb43 0501 	adc.w	r5, r3, r1
 800d1d8:	f04f 0200 	mov.w	r2, #0
 800d1dc:	f04f 0300 	mov.w	r3, #0
 800d1e0:	00eb      	lsls	r3, r5, #3
 800d1e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d1e6:	00e2      	lsls	r2, r4, #3
 800d1e8:	4614      	mov	r4, r2
 800d1ea:	461d      	mov	r5, r3
 800d1ec:	4643      	mov	r3, r8
 800d1ee:	18e3      	adds	r3, r4, r3
 800d1f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d1f4:	464b      	mov	r3, r9
 800d1f6:	eb45 0303 	adc.w	r3, r5, r3
 800d1fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	2200      	movs	r2, #0
 800d206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d20a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d20e:	f04f 0200 	mov.w	r2, #0
 800d212:	f04f 0300 	mov.w	r3, #0
 800d216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d21a:	4629      	mov	r1, r5
 800d21c:	008b      	lsls	r3, r1, #2
 800d21e:	4621      	mov	r1, r4
 800d220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d224:	4621      	mov	r1, r4
 800d226:	008a      	lsls	r2, r1, #2
 800d228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d22c:	f7f2 ffde 	bl	80001ec <__aeabi_uldivmod>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4b60      	ldr	r3, [pc, #384]	@ (800d3b8 <UART_SetConfig+0x4e4>)
 800d236:	fba3 2302 	umull	r2, r3, r3, r2
 800d23a:	095b      	lsrs	r3, r3, #5
 800d23c:	011c      	lsls	r4, r3, #4
 800d23e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d242:	2200      	movs	r2, #0
 800d244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d248:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d24c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d250:	4642      	mov	r2, r8
 800d252:	464b      	mov	r3, r9
 800d254:	1891      	adds	r1, r2, r2
 800d256:	61b9      	str	r1, [r7, #24]
 800d258:	415b      	adcs	r3, r3
 800d25a:	61fb      	str	r3, [r7, #28]
 800d25c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d260:	4641      	mov	r1, r8
 800d262:	1851      	adds	r1, r2, r1
 800d264:	6139      	str	r1, [r7, #16]
 800d266:	4649      	mov	r1, r9
 800d268:	414b      	adcs	r3, r1
 800d26a:	617b      	str	r3, [r7, #20]
 800d26c:	f04f 0200 	mov.w	r2, #0
 800d270:	f04f 0300 	mov.w	r3, #0
 800d274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d278:	4659      	mov	r1, fp
 800d27a:	00cb      	lsls	r3, r1, #3
 800d27c:	4651      	mov	r1, sl
 800d27e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d282:	4651      	mov	r1, sl
 800d284:	00ca      	lsls	r2, r1, #3
 800d286:	4610      	mov	r0, r2
 800d288:	4619      	mov	r1, r3
 800d28a:	4603      	mov	r3, r0
 800d28c:	4642      	mov	r2, r8
 800d28e:	189b      	adds	r3, r3, r2
 800d290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d294:	464b      	mov	r3, r9
 800d296:	460a      	mov	r2, r1
 800d298:	eb42 0303 	adc.w	r3, r2, r3
 800d29c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d2aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	f04f 0300 	mov.w	r3, #0
 800d2b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d2b8:	4649      	mov	r1, r9
 800d2ba:	008b      	lsls	r3, r1, #2
 800d2bc:	4641      	mov	r1, r8
 800d2be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2c2:	4641      	mov	r1, r8
 800d2c4:	008a      	lsls	r2, r1, #2
 800d2c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d2ca:	f7f2 ff8f 	bl	80001ec <__aeabi_uldivmod>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	4b38      	ldr	r3, [pc, #224]	@ (800d3b8 <UART_SetConfig+0x4e4>)
 800d2d6:	fba3 2301 	umull	r2, r3, r3, r1
 800d2da:	095b      	lsrs	r3, r3, #5
 800d2dc:	2264      	movs	r2, #100	@ 0x64
 800d2de:	fb02 f303 	mul.w	r3, r2, r3
 800d2e2:	1acb      	subs	r3, r1, r3
 800d2e4:	011b      	lsls	r3, r3, #4
 800d2e6:	3332      	adds	r3, #50	@ 0x32
 800d2e8:	4a33      	ldr	r2, [pc, #204]	@ (800d3b8 <UART_SetConfig+0x4e4>)
 800d2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ee:	095b      	lsrs	r3, r3, #5
 800d2f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d2f4:	441c      	add	r4, r3
 800d2f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2fe:	677a      	str	r2, [r7, #116]	@ 0x74
 800d300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d304:	4642      	mov	r2, r8
 800d306:	464b      	mov	r3, r9
 800d308:	1891      	adds	r1, r2, r2
 800d30a:	60b9      	str	r1, [r7, #8]
 800d30c:	415b      	adcs	r3, r3
 800d30e:	60fb      	str	r3, [r7, #12]
 800d310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d314:	4641      	mov	r1, r8
 800d316:	1851      	adds	r1, r2, r1
 800d318:	6039      	str	r1, [r7, #0]
 800d31a:	4649      	mov	r1, r9
 800d31c:	414b      	adcs	r3, r1
 800d31e:	607b      	str	r3, [r7, #4]
 800d320:	f04f 0200 	mov.w	r2, #0
 800d324:	f04f 0300 	mov.w	r3, #0
 800d328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d32c:	4659      	mov	r1, fp
 800d32e:	00cb      	lsls	r3, r1, #3
 800d330:	4651      	mov	r1, sl
 800d332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d336:	4651      	mov	r1, sl
 800d338:	00ca      	lsls	r2, r1, #3
 800d33a:	4610      	mov	r0, r2
 800d33c:	4619      	mov	r1, r3
 800d33e:	4603      	mov	r3, r0
 800d340:	4642      	mov	r2, r8
 800d342:	189b      	adds	r3, r3, r2
 800d344:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d346:	464b      	mov	r3, r9
 800d348:	460a      	mov	r2, r1
 800d34a:	eb42 0303 	adc.w	r3, r2, r3
 800d34e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	663b      	str	r3, [r7, #96]	@ 0x60
 800d35a:	667a      	str	r2, [r7, #100]	@ 0x64
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	f04f 0300 	mov.w	r3, #0
 800d364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d368:	4649      	mov	r1, r9
 800d36a:	008b      	lsls	r3, r1, #2
 800d36c:	4641      	mov	r1, r8
 800d36e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d372:	4641      	mov	r1, r8
 800d374:	008a      	lsls	r2, r1, #2
 800d376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d37a:	f7f2 ff37 	bl	80001ec <__aeabi_uldivmod>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b8 <UART_SetConfig+0x4e4>)
 800d384:	fba3 1302 	umull	r1, r3, r3, r2
 800d388:	095b      	lsrs	r3, r3, #5
 800d38a:	2164      	movs	r1, #100	@ 0x64
 800d38c:	fb01 f303 	mul.w	r3, r1, r3
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	011b      	lsls	r3, r3, #4
 800d394:	3332      	adds	r3, #50	@ 0x32
 800d396:	4a08      	ldr	r2, [pc, #32]	@ (800d3b8 <UART_SetConfig+0x4e4>)
 800d398:	fba2 2303 	umull	r2, r3, r2, r3
 800d39c:	095b      	lsrs	r3, r3, #5
 800d39e:	f003 020f 	and.w	r2, r3, #15
 800d3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4422      	add	r2, r4
 800d3aa:	609a      	str	r2, [r3, #8]
}
 800d3ac:	bf00      	nop
 800d3ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3b8:	51eb851f 	.word	0x51eb851f

0800d3bc <__itoa>:
 800d3bc:	1e93      	subs	r3, r2, #2
 800d3be:	2b22      	cmp	r3, #34	@ 0x22
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	460c      	mov	r4, r1
 800d3c4:	d904      	bls.n	800d3d0 <__itoa+0x14>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	700b      	strb	r3, [r1, #0]
 800d3ca:	461c      	mov	r4, r3
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	bd10      	pop	{r4, pc}
 800d3d0:	2a0a      	cmp	r2, #10
 800d3d2:	d109      	bne.n	800d3e8 <__itoa+0x2c>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	da07      	bge.n	800d3e8 <__itoa+0x2c>
 800d3d8:	232d      	movs	r3, #45	@ 0x2d
 800d3da:	700b      	strb	r3, [r1, #0]
 800d3dc:	4240      	negs	r0, r0
 800d3de:	2101      	movs	r1, #1
 800d3e0:	4421      	add	r1, r4
 800d3e2:	f000 f805 	bl	800d3f0 <__utoa>
 800d3e6:	e7f1      	b.n	800d3cc <__itoa+0x10>
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	e7f9      	b.n	800d3e0 <__itoa+0x24>

0800d3ec <itoa>:
 800d3ec:	f7ff bfe6 	b.w	800d3bc <__itoa>

0800d3f0 <__utoa>:
 800d3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3f2:	4c1f      	ldr	r4, [pc, #124]	@ (800d470 <__utoa+0x80>)
 800d3f4:	b08b      	sub	sp, #44	@ 0x2c
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	466e      	mov	r6, sp
 800d3fc:	f104 0c20 	add.w	ip, r4, #32
 800d400:	6820      	ldr	r0, [r4, #0]
 800d402:	6861      	ldr	r1, [r4, #4]
 800d404:	4637      	mov	r7, r6
 800d406:	c703      	stmia	r7!, {r0, r1}
 800d408:	3408      	adds	r4, #8
 800d40a:	4564      	cmp	r4, ip
 800d40c:	463e      	mov	r6, r7
 800d40e:	d1f7      	bne.n	800d400 <__utoa+0x10>
 800d410:	7921      	ldrb	r1, [r4, #4]
 800d412:	7139      	strb	r1, [r7, #4]
 800d414:	1e91      	subs	r1, r2, #2
 800d416:	6820      	ldr	r0, [r4, #0]
 800d418:	6038      	str	r0, [r7, #0]
 800d41a:	2922      	cmp	r1, #34	@ 0x22
 800d41c:	f04f 0100 	mov.w	r1, #0
 800d420:	d904      	bls.n	800d42c <__utoa+0x3c>
 800d422:	7019      	strb	r1, [r3, #0]
 800d424:	460b      	mov	r3, r1
 800d426:	4618      	mov	r0, r3
 800d428:	b00b      	add	sp, #44	@ 0x2c
 800d42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d42c:	1e58      	subs	r0, r3, #1
 800d42e:	4684      	mov	ip, r0
 800d430:	fbb5 f7f2 	udiv	r7, r5, r2
 800d434:	fb02 5617 	mls	r6, r2, r7, r5
 800d438:	3628      	adds	r6, #40	@ 0x28
 800d43a:	446e      	add	r6, sp
 800d43c:	460c      	mov	r4, r1
 800d43e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d442:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d446:	462e      	mov	r6, r5
 800d448:	42b2      	cmp	r2, r6
 800d44a:	f101 0101 	add.w	r1, r1, #1
 800d44e:	463d      	mov	r5, r7
 800d450:	d9ee      	bls.n	800d430 <__utoa+0x40>
 800d452:	2200      	movs	r2, #0
 800d454:	545a      	strb	r2, [r3, r1]
 800d456:	1919      	adds	r1, r3, r4
 800d458:	1aa5      	subs	r5, r4, r2
 800d45a:	42aa      	cmp	r2, r5
 800d45c:	dae3      	bge.n	800d426 <__utoa+0x36>
 800d45e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d462:	780e      	ldrb	r6, [r1, #0]
 800d464:	7006      	strb	r6, [r0, #0]
 800d466:	3201      	adds	r2, #1
 800d468:	f801 5901 	strb.w	r5, [r1], #-1
 800d46c:	e7f4      	b.n	800d458 <__utoa+0x68>
 800d46e:	bf00      	nop
 800d470:	08010b90 	.word	0x08010b90

0800d474 <memset>:
 800d474:	4402      	add	r2, r0
 800d476:	4603      	mov	r3, r0
 800d478:	4293      	cmp	r3, r2
 800d47a:	d100      	bne.n	800d47e <memset+0xa>
 800d47c:	4770      	bx	lr
 800d47e:	f803 1b01 	strb.w	r1, [r3], #1
 800d482:	e7f9      	b.n	800d478 <memset+0x4>

0800d484 <__libc_init_array>:
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	4d0d      	ldr	r5, [pc, #52]	@ (800d4bc <__libc_init_array+0x38>)
 800d488:	4c0d      	ldr	r4, [pc, #52]	@ (800d4c0 <__libc_init_array+0x3c>)
 800d48a:	1b64      	subs	r4, r4, r5
 800d48c:	10a4      	asrs	r4, r4, #2
 800d48e:	2600      	movs	r6, #0
 800d490:	42a6      	cmp	r6, r4
 800d492:	d109      	bne.n	800d4a8 <__libc_init_array+0x24>
 800d494:	4d0b      	ldr	r5, [pc, #44]	@ (800d4c4 <__libc_init_array+0x40>)
 800d496:	4c0c      	ldr	r4, [pc, #48]	@ (800d4c8 <__libc_init_array+0x44>)
 800d498:	f000 f826 	bl	800d4e8 <_init>
 800d49c:	1b64      	subs	r4, r4, r5
 800d49e:	10a4      	asrs	r4, r4, #2
 800d4a0:	2600      	movs	r6, #0
 800d4a2:	42a6      	cmp	r6, r4
 800d4a4:	d105      	bne.n	800d4b2 <__libc_init_array+0x2e>
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}
 800d4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4ac:	4798      	blx	r3
 800d4ae:	3601      	adds	r6, #1
 800d4b0:	e7ee      	b.n	800d490 <__libc_init_array+0xc>
 800d4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4b6:	4798      	blx	r3
 800d4b8:	3601      	adds	r6, #1
 800d4ba:	e7f2      	b.n	800d4a2 <__libc_init_array+0x1e>
 800d4bc:	08010bc0 	.word	0x08010bc0
 800d4c0:	08010bc0 	.word	0x08010bc0
 800d4c4:	08010bc0 	.word	0x08010bc0
 800d4c8:	08010bc4 	.word	0x08010bc4

0800d4cc <memcpy>:
 800d4cc:	440a      	add	r2, r1
 800d4ce:	4291      	cmp	r1, r2
 800d4d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4d4:	d100      	bne.n	800d4d8 <memcpy+0xc>
 800d4d6:	4770      	bx	lr
 800d4d8:	b510      	push	{r4, lr}
 800d4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4e2:	4291      	cmp	r1, r2
 800d4e4:	d1f9      	bne.n	800d4da <memcpy+0xe>
 800d4e6:	bd10      	pop	{r4, pc}

0800d4e8 <_init>:
 800d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ea:	bf00      	nop
 800d4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ee:	bc08      	pop	{r3}
 800d4f0:	469e      	mov	lr, r3
 800d4f2:	4770      	bx	lr

0800d4f4 <_fini>:
 800d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f6:	bf00      	nop
 800d4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fa:	bc08      	pop	{r3}
 800d4fc:	469e      	mov	lr, r3
 800d4fe:	4770      	bx	lr
