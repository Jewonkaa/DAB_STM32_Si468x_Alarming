
DAB_STM32_Si468x_Alarming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d70c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00028e90  0800d894  0800d894  0000e894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036724  08036724  00038188  2**0
                  CONTENTS
  4 .ARM          00000008  08036724  08036724  00037724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803672c  0803672c  00038188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803672c  0803672c  0003772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08036730  08036730  00037730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08036734  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00038188  2**0
                  CONTENTS
 10 .bss          00007054  20000188  20000188  00038188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200071dc  200071dc  00038188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00038188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018803  00000000  00000000  000381b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e89  00000000  00000000  000509bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  00054848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001165  00000000  00000000  00055e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c07  00000000  00000000  00056fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eea4  00000000  00000000  0007bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d341d  00000000  00000000  0009aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016dea5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bac  00000000  00000000  0016dee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00173a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d87c 	.word	0x0800d87c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d87c 	.word	0x0800d87c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 800051c:	f000 f914 	bl	8000748 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fb97 	bl	8000c54 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8000526:	20cb      	movs	r0, #203	@ 0xcb
 8000528:	f000 fb94 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800052c:	2039      	movs	r0, #57	@ 0x39
 800052e:	f000 fba0 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8000532:	202c      	movs	r0, #44	@ 0x2c
 8000534:	f000 fb9d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fb9a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800053e:	2034      	movs	r0, #52	@ 0x34
 8000540:	f000 fb97 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fb94 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800054a:	20cf      	movs	r0, #207	@ 0xcf
 800054c:	f000 fb82 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fb8e 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000556:	20c1      	movs	r0, #193	@ 0xc1
 8000558:	f000 fb8b 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 800055c:	2030      	movs	r0, #48	@ 0x30
 800055e:	f000 fb88 	bl	8000c72 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000562:	20e8      	movs	r0, #232	@ 0xe8
 8000564:	f000 fb76 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000568:	2085      	movs	r0, #133	@ 0x85
 800056a:	f000 fb82 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fb7f 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000574:	2078      	movs	r0, #120	@ 0x78
 8000576:	f000 fb7c 	bl	8000c72 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800057a:	20ea      	movs	r0, #234	@ 0xea
 800057c:	f000 fb6a 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fb76 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fb73 	bl	8000c72 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 800058c:	20ed      	movs	r0, #237	@ 0xed
 800058e:	f000 fb61 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000592:	2064      	movs	r0, #100	@ 0x64
 8000594:	f000 fb6d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fb6a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800059e:	2012      	movs	r0, #18
 80005a0:	f000 fb67 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80005a4:	2081      	movs	r0, #129	@ 0x81
 80005a6:	f000 fb64 	bl	8000c72 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80005aa:	20f7      	movs	r0, #247	@ 0xf7
 80005ac:	f000 fb52 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80005b0:	2020      	movs	r0, #32
 80005b2:	f000 fb5e 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80005b6:	20c0      	movs	r0, #192	@ 0xc0
 80005b8:	f000 fb4c 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 fb58 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80005c2:	20c1      	movs	r0, #193	@ 0xc1
 80005c4:	f000 fb46 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f000 fb52 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80005ce:	20c5      	movs	r0, #197	@ 0xc5
 80005d0:	f000 fb40 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80005d4:	203e      	movs	r0, #62	@ 0x3e
 80005d6:	f000 fb4c 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80005da:	2028      	movs	r0, #40	@ 0x28
 80005dc:	f000 fb49 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005e0:	20c7      	movs	r0, #199	@ 0xc7
 80005e2:	f000 fb37 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005e6:	2086      	movs	r0, #134	@ 0x86
 80005e8:	f000 fb43 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005ec:	2036      	movs	r0, #54	@ 0x36
 80005ee:	f000 fb31 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005f2:	2048      	movs	r0, #72	@ 0x48
 80005f4:	f000 fb3d 	bl	8000c72 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f000 fb2b 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005fe:	2055      	movs	r0, #85	@ 0x55
 8000600:	f000 fb37 	bl	8000c72 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8000604:	20b1      	movs	r0, #177	@ 0xb1
 8000606:	f000 fb25 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fb31 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8000610:	2018      	movs	r0, #24
 8000612:	f000 fb2e 	bl	8000c72 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8000616:	20b6      	movs	r0, #182	@ 0xb6
 8000618:	f000 fb1c 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800061c:	2008      	movs	r0, #8
 800061e:	f000 fb28 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8000622:	2082      	movs	r0, #130	@ 0x82
 8000624:	f000 fb25 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000628:	2027      	movs	r0, #39	@ 0x27
 800062a:	f000 fb22 	bl	8000c72 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800062e:	20f2      	movs	r0, #242	@ 0xf2
 8000630:	f000 fb10 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fb1c 	bl	8000c72 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800063a:	2026      	movs	r0, #38	@ 0x26
 800063c:	f000 fb0a 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fb16 	bl	8000c72 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8000646:	20e0      	movs	r0, #224	@ 0xe0
 8000648:	f000 fb04 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800064c:	200f      	movs	r0, #15
 800064e:	f000 fb10 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000652:	2031      	movs	r0, #49	@ 0x31
 8000654:	f000 fb0d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000658:	202b      	movs	r0, #43	@ 0x2b
 800065a:	f000 fb0a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800065e:	200c      	movs	r0, #12
 8000660:	f000 fb07 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000664:	200e      	movs	r0, #14
 8000666:	f000 fb04 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800066a:	2008      	movs	r0, #8
 800066c:	f000 fb01 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000670:	204e      	movs	r0, #78	@ 0x4e
 8000672:	f000 fafe 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8000676:	20f1      	movs	r0, #241	@ 0xf1
 8000678:	f000 fafb 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 800067c:	2037      	movs	r0, #55	@ 0x37
 800067e:	f000 faf8 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000682:	2007      	movs	r0, #7
 8000684:	f000 faf5 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000688:	2010      	movs	r0, #16
 800068a:	f000 faf2 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800068e:	2003      	movs	r0, #3
 8000690:	f000 faef 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000694:	200e      	movs	r0, #14
 8000696:	f000 faec 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800069a:	2009      	movs	r0, #9
 800069c:	f000 fae9 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fae6 	bl	8000c72 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80006a6:	20e1      	movs	r0, #225	@ 0xe1
 80006a8:	f000 fad4 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fae0 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80006b2:	200e      	movs	r0, #14
 80006b4:	f000 fadd 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80006b8:	2014      	movs	r0, #20
 80006ba:	f000 fada 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80006be:	2003      	movs	r0, #3
 80006c0:	f000 fad7 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80006c4:	2011      	movs	r0, #17
 80006c6:	f000 fad4 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80006ca:	2007      	movs	r0, #7
 80006cc:	f000 fad1 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006d0:	2031      	movs	r0, #49	@ 0x31
 80006d2:	f000 face 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80006d6:	20c1      	movs	r0, #193	@ 0xc1
 80006d8:	f000 facb 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006dc:	2048      	movs	r0, #72	@ 0x48
 80006de:	f000 fac8 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006e2:	2008      	movs	r0, #8
 80006e4:	f000 fac5 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006e8:	200f      	movs	r0, #15
 80006ea:	f000 fac2 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006ee:	200c      	movs	r0, #12
 80006f0:	f000 fabf 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006f4:	2031      	movs	r0, #49	@ 0x31
 80006f6:	f000 fabc 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006fa:	2036      	movs	r0, #54	@ 0x36
 80006fc:	f000 fab9 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000700:	200f      	movs	r0, #15
 8000702:	f000 fab6 	bl	8000c72 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8000706:	2011      	movs	r0, #17
 8000708:	f000 faa4 	bl	8000c54 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800070c:	2029      	movs	r0, #41	@ 0x29
 800070e:	f000 faa1 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8000712:	202c      	movs	r0, #44	@ 0x2c
 8000714:	f000 faad 	bl	8000c72 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f83d 	bl	8000798 <ILI9341_Set_Rotation>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	2301      	movs	r3, #1
 8000732:	2201      	movs	r2, #1
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <ILI9341_SPI_Send+0x20>)
 8000736:	f00b f82a 	bl	800b78e <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20006f58 	.word	0x20006f58

08000748 <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	RESET_ON;
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000752:	4810      	ldr	r0, [pc, #64]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000754:	f007 fe46 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000758:	2032      	movs	r0, #50	@ 0x32
 800075a:	f007 f83f 	bl	80077dc <HAL_Delay>
	RESET_OFF;
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000766:	f007 fe3d 	bl	80083e4 <HAL_GPIO_WritePin>
	CS_ON;
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000772:	f007 fe37 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f007 f830 	bl	80077dc <HAL_Delay>
	ILI9341_Send_Command(0x01);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fa69 	bl	8000c54 <ILI9341_Send_Command>
	CS_OFF;
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <ILI9341_Reset+0x4c>)
 800078a:	f007 fe2b 	bl	80083e4 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020c00 	.word	0x40020c00

08000798 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 80007a2:	2036      	movs	r0, #54	@ 0x36
 80007a4:	f000 fa56 	bl	8000c54 <ILI9341_Send_Command>
	switch (rotation) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d836      	bhi.n	800081c <ILI9341_Set_Rotation+0x84>
 80007ae:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <ILI9341_Set_Rotation+0x1c>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007c5 	.word	0x080007c5
 80007b8:	080007db 	.word	0x080007db
 80007bc:	080007f1 	.word	0x080007f1
 80007c0:	08000807 	.word	0x08000807
	case 0:
		ILI9341_Send_Data(0x48);
 80007c4:	2048      	movs	r0, #72	@ 0x48
 80007c6:	f000 fa54 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007cc:	22f0      	movs	r2, #240	@ 0xf0
 80007ce:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		break;
 80007d8:	e020      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80007da:	2028      	movs	r0, #40	@ 0x28
 80007dc:	f000 fa49 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007e6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007ea:	22f0      	movs	r2, #240	@ 0xf0
 80007ec:	601a      	str	r2, [r3, #0]
		break;
 80007ee:	e015      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007f0:	2088      	movs	r0, #136	@ 0x88
 80007f2:	f000 fa3e 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007f8:	22f0      	movs	r2, #240	@ 0xf0
 80007fa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000802:	601a      	str	r2, [r3, #0]
		break;
 8000804:	e00a      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 8000806:	20e8      	movs	r0, #232	@ 0xe8
 8000808:	f000 fa33 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 320;
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 800080e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000812:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 8000816:	22f0      	movs	r2, #240	@ 0xf0
 8000818:	601a      	str	r2, [r3, #0]
		break;
 800081a:	bf00      	nop
	}
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000004 	.word	0x20000004

0800082c <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083e:	4817      	ldr	r0, [pc, #92]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 8000840:	f007 fdd0 	bl	80083e4 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084a:	4814      	ldr	r0, [pc, #80]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 800084c:	f007 fdca 	bl	80083e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff66 	bl	8000724 <ILI9341_SPI_Send>

	DC_DATA;
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085e:	480f      	ldr	r0, [pc, #60]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 8000860:	f007 fdc0 	bl	80083e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0e1b      	lsrs	r3, r3, #24
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff5a 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff54 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff4e 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff49 	bl	8000724 <ILI9341_SPI_Send>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00

080008a0 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	617b      	str	r3, [r7, #20]
	t |= x2;
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4313      	orrs	r3, r2
 80008be:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 80008c0:	6979      	ldr	r1, [r7, #20]
 80008c2:	202a      	movs	r0, #42	@ 0x2a
 80008c4:	f7ff ffb2 	bl	800082c <ILI9341_SPI_Send_32>
	t = y1;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	617b      	str	r3, [r7, #20]
	t |= y2;
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80008da:	6979      	ldr	r1, [r7, #20]
 80008dc:	202b      	movs	r0, #43	@ 0x2b
 80008de:	f7ff ffa5 	bl	800082c <ILI9341_SPI_Send_32>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <ILI9341_Fill_Screen+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <ILI9341_Fill_Screen+0x44>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ffcc 	bl	80008a0 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	b29b      	uxth	r3, r3
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <ILI9341_Fill_Screen+0x40>)
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	4611      	mov	r1, r2
 8000912:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <ILI9341_Fill_Screen+0x44>)
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	fb01 f202 	mul.w	r2, r1, r2
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f9b7 	bl	8000c90 <ILI9341_Send_Burst>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004

08000934 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db31      	blt.n	80009aa <ILI9341_Draw_Pixel+0x76>
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db2e      	blt.n	80009aa <ILI9341_Draw_Pixel+0x76>
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <ILI9341_Draw_Pixel+0x80>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	d229      	bcs.n	80009aa <ILI9341_Draw_Pixel+0x76>
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <ILI9341_Draw_Pixel+0x84>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d224      	bcs.n	80009aa <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <ILI9341_Draw_Pixel+0x80>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <ILI9341_Draw_Pixel+0x84>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3b01      	subs	r3, #1
 8000970:	f7ff ff96 	bl	80008a0 <ILI9341_Set_Address>
	DC_COMMAND;
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097a:	4810      	ldr	r0, [pc, #64]	@ (80009bc <ILI9341_Draw_Pixel+0x88>)
 800097c:	f007 fd32 	bl	80083e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000980:	202c      	movs	r0, #44	@ 0x2c
 8000982:	f7ff fecf 	bl	8000724 <ILI9341_SPI_Send>
	DC_DATA;
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098c:	480b      	ldr	r0, [pc, #44]	@ (80009bc <ILI9341_Draw_Pixel+0x88>)
 800098e:	f007 fd29 	bl	80083e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fec3 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff febe 	bl	8000724 <ILI9341_SPI_Send>
 80009a8:	e000      	b.n	80009ac <ILI9341_Draw_Pixel+0x78>
		return;
 80009aa:	bf00      	nop
}
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f7ff ff63 	bl	80008a0 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	b298      	uxth	r0, r3
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	4619      	mov	r1, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	fb01 f303 	mul.w	r3, r1, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	f000 f94b 	bl	8000c90 <ILI9341_Send_Burst>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b08c      	sub	sp, #48	@ 0x30
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1acb      	subs	r3, r1, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bfb8      	it	lt
 8000a28:	425b      	neglt	r3, r3
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	bfcc      	ite	gt
 8000a2e:	2301      	movgt	r3, #1
 8000a30:	2300      	movle	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24

	if (steep)
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00d      	beq.n	8000a58 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000a48:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	843b      	strh	r3, [r7, #32]
 8000a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a56:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	if(x1>x2)
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d90d      	bls.n	8000a7c <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	83fb      	strh	r3, [r7, #30]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a6c:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	83bb      	strh	r3, [r7, #28]
 8000a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bfb8      	it	lt
 8000a8e:	425b      	neglt	r3, r3
 8000a90:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	0fda      	lsrs	r2, r3, #31
 8000a96:	4413      	add	r3, r2
 8000a98:	105b      	asrs	r3, r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ystep;
	if(y1 < y2)
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d202      	bcs.n	8000aaa <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	e023      	b.n	8000af2 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	for (; x1 <= x2; x1++)
 8000ab0:	e01f      	b.n	8000af2 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff38 	bl	8000934 <ILI9341_Draw_Pixel>
 8000ac4:	e005      	b.n	8000ad2 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff31 	bl	8000934 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (err < 0)
 8000ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	da05      	bge.n	8000aec <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
			err = dx;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (; x1 <= x2; x1++)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d9db      	bls.n	8000ab2 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	@ 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b12:	7f3b      	ldrb	r3, [r7, #28]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d061      	beq.n	8000bdc <ILI9341_Draw_String+0xd8>
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	f300 8092 	bgt.w	8000c42 <ILI9341_Draw_String+0x13e>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d028      	beq.n	8000b74 <ILI9341_Draw_String+0x70>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d02b      	beq.n	8000b7e <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b26:	e08c      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b28:	7f3b      	ldrb	r3, [r7, #28]
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	441a      	add	r2, r3
 8000b32:	4b46      	ldr	r3, [pc, #280]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d907      	bls.n	8000b4a <ILI9341_Draw_String+0x46>
				x = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b3e:	7f3b      	ldrb	r3, [r7, #28]
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	461a      	mov	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4413      	add	r3, r2
 8000b48:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	7f3a      	ldrb	r2, [r7, #28]
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	f000 f95a 	bl	8000e14 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	3b02      	subs	r3, #2
 8000b6c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3301      	adds	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1d5      	bne.n	8000b28 <ILI9341_Draw_String+0x24>
	break;
 8000b7c:	e061      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b7e:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b84:	e025      	b.n	8000bd2 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b86:	7f3b      	ldrb	r3, [r7, #28]
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	441a      	add	r2, r3
 8000b90:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d907      	bls.n	8000ba8 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b9c:	7f3b      	ldrb	r3, [r7, #28]
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	7f3a      	ldrb	r2, [r7, #28]
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	f000 f92b 	bl	8000e14 <ILI9341_Draw_Char>
			x += hh*8;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1d5      	bne.n	8000b86 <ILI9341_Draw_String+0x82>
	break;
 8000bda:	e032      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000be2:	e029      	b.n	8000c38 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000be4:	7f3b      	ldrb	r3, [r7, #28]
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	461a      	mov	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	441a      	add	r2, r3
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d907      	bls.n	8000c06 <ILI9341_Draw_String+0x102>
				x = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4413      	add	r3, r2
 8000c04:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	7f3a      	ldrb	r2, [r7, #28]
 8000c10:	9201      	str	r2, [sp, #4]
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f000 f8fc 	bl	8000e14 <ILI9341_Draw_Char>
			x += hh*10;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1d1      	bne.n	8000be4 <ILI9341_Draw_String+0xe0>
	break;
 8000c40:	bf00      	nop
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	200001a4 	.word	0x200001a4

08000c54 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c5e:	f000 fa09 	bl	8001074 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd5d 	bl	8000724 <ILI9341_SPI_Send>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c7c:	f000 f9e8 	bl	8001050 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd4e 	bl	8000724 <ILI9341_SPI_Send>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	733b      	strb	r3, [r7, #12]
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cae:	4858      	ldr	r0, [pc, #352]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cb0:	f007 fb98 	bl	80083e4 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cba:	4855      	ldr	r0, [pc, #340]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cbc:	f007 fb92 	bl	80083e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cc0:	202c      	movs	r0, #44	@ 0x2c
 8000cc2:	f7ff fd2f 	bl	8000724 <ILI9341_SPI_Send>
	DC_DATA;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ccc:	4850      	ldr	r0, [pc, #320]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cce:	f007 fb89 	bl	80083e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cd2:	7b3b      	ldrb	r3, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd25 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd21 	bl	8000724 <ILI9341_SPI_Send>
	len--;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cee:	7b3a      	ldrb	r2, [r7, #12]
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d169      	bne.n	8000dca <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cf6:	e027      	b.n	8000d48 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd10 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fd0c 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fd08 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd04 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd00 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d24:	7afb      	ldrb	r3, [r7, #11]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcfc 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fcf8 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcf4 	bl	8000724 <ILI9341_SPI_Send>
			} while (--i);
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	737b      	strb	r3, [r7, #13]
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1d9      	bne.n	8000cfc <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	81fa      	strh	r2, [r7, #14]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1d2      	bne.n	8000cf8 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d5a:	737b      	strb	r3, [r7, #13]
 8000d5c:	e007      	b.n	8000d6e <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fcdf 	bl	8000724 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcdb 	bl	8000724 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	7b7b      	ldrb	r3, [r7, #13]
 8000d70:	1e5a      	subs	r2, r3, #1
 8000d72:	737a      	strb	r2, [r7, #13]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f2      	bne.n	8000d5e <ILI9341_Send_Burst+0xce>
 8000d78:	e03f      	b.n	8000dfa <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d7e:	7b3b      	ldrb	r3, [r7, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fccf 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fccb 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcc7 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcc3 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fcbf 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fcbb 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dae:	7b3b      	ldrb	r3, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fcb7 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fcb3 	bl	8000724 <ILI9341_SPI_Send>
			} while (--i);
 8000dbe:	7b7b      	ldrb	r3, [r7, #13]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	737b      	strb	r3, [r7, #13]
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1d9      	bne.n	8000d7e <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	1e5a      	subs	r2, r3, #1
 8000dce:	81fa      	strh	r2, [r7, #14]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1d2      	bne.n	8000d7a <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ddc:	737b      	strb	r3, [r7, #13]
 8000dde:	e007      	b.n	8000df0 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc9e 	bl	8000724 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fc9a 	bl	8000724 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	7b7b      	ldrb	r3, [r7, #13]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	737a      	strb	r2, [r7, #13]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f2      	bne.n	8000de0 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000e02:	f007 faef 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40020c00 	.word	0x40020c00

08000e14 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	f000 80b2 	beq.w	8000f90 <ILI9341_Draw_Char+0x17c>
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	f300 8104 	bgt.w	800103a <ILI9341_Draw_Char+0x226>
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d002      	beq.n	8000e3c <ILI9341_Draw_Char+0x28>
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d055      	beq.n	8000ee6 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e3a:	e0fe      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3305      	adds	r3, #5
 8000e44:	461a      	mov	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3308      	adds	r3, #8
 8000e4a:	f7ff fd29 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e54:	487b      	ldr	r0, [pc, #492]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000e56:	f007 fac5 	bl	80083e4 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e5a:	202c      	movs	r0, #44	@ 0x2c
 8000e5c:	f7ff fc62 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e66:	4877      	ldr	r0, [pc, #476]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000e68:	f007 fabc 	bl	80083e4 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	e035      	b.n	8000ede <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e72:	2302      	movs	r3, #2
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e02c      	b.n	8000ed2 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e7c:	3b20      	subs	r3, #32
 8000e7e:	4a72      	ldr	r2, [pc, #456]	@ (8001048 <ILI9341_Draw_Char+0x234>)
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	441a      	add	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	fa42 f303 	asr.w	r3, r2, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc3d 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fc38 	bl	8000724 <ILI9341_SPI_Send>
 8000eb4:	e00a      	b.n	8000ecc <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc31 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fc2c 	bl	8000724 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	ddcf      	ble.n	8000e78 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	3301      	adds	r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	ddc6      	ble.n	8000e72 <ILI9341_Draw_Char+0x5e>
			break;
 8000ee4:	e0a9      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3307      	adds	r3, #7
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	f7ff fcd4 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efe:	4851      	ldr	r0, [pc, #324]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000f00:	f007 fa70 	bl	80083e4 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f04:	202c      	movs	r0, #44	@ 0x2c
 8000f06:	f7ff fc0d 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f10:	484c      	ldr	r0, [pc, #304]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000f12:	f007 fa67 	bl	80083e4 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	e035      	b.n	8000f88 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e02c      	b.n	8000f7c <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f26:	3b20      	subs	r3, #32
 8000f28:	4a48      	ldr	r2, [pc, #288]	@ (800104c <ILI9341_Draw_Char+0x238>)
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	441a      	add	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f1c3 0307 	rsb	r3, r3, #7
 8000f3c:	fa42 f303 	asr.w	r3, r2, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00b      	beq.n	8000f60 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fbe8 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbe3 	bl	8000724 <ILI9341_SPI_Send>
 8000f5e:	e00a      	b.n	8000f76 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fbdc 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fbd7 	bl	8000724 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	ddcf      	ble.n	8000f22 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	3301      	adds	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	ddc6      	ble.n	8000f1c <ILI9341_Draw_Char+0x108>
		break;
 8000f8e:	e054      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3309      	adds	r3, #9
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3310      	adds	r3, #16
 8000f9e:	f7ff fc7f 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa8:	4826      	ldr	r0, [pc, #152]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000faa:	f007 fa1b 	bl	80083e4 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fae:	202c      	movs	r0, #44	@ 0x2c
 8000fb0:	f7ff fbb8 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fba:	4822      	ldr	r0, [pc, #136]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000fbc:	f007 fa12 	bl	80083e4 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e035      	b.n	8001032 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e02c      	b.n	8001026 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <ILI9341_Draw_Char+0x238>)
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	441a      	add	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	fa42 f303 	asr.w	r3, r2, r3
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fb93 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fb8e 	bl	8000724 <ILI9341_SPI_Send>
 8001008:	e00a      	b.n	8001020 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fb87 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fb82 	bl	8000724 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b07      	cmp	r3, #7
 800102a:	ddcf      	ble.n	8000fcc <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3301      	adds	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b1d      	cmp	r3, #29
 8001036:	ddc6      	ble.n	8000fc6 <ILI9341_Draw_Char+0x1b2>
		break;
 8001038:	bf00      	nop
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020c00 	.word	0x40020c00
 8001048:	0800ef1c 	.word	0x0800ef1c
 800104c:	0800f1f4 	.word	0x0800f1f4

08001050 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <Before_Sending_Data+0x20>)
 800105c:	f007 f9c2 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001066:	4802      	ldr	r0, [pc, #8]	@ (8001070 <Before_Sending_Data+0x20>)
 8001068:	f007 f9bc 	bl	80083e4 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020c00 	.word	0x40020c00

08001074 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <Before_Sending_Command+0x20>)
 8001080:	f007 f9b0 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800108a:	4802      	ldr	r0, [pc, #8]	@ (8001094 <Before_Sending_Command+0x20>)
 800108c:	f007 f9aa 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020c00 	.word	0x40020c00

08001098 <ILI9341_Draw_Start_Screen>:



void ILI9341_Draw_Start_Screen(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    ILI9341_Set_Address(0, 0, 319, 239);
 800109e:	23ef      	movs	r3, #239	@ 0xef
 80010a0:	f240 123f 	movw	r2, #319	@ 0x13f
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbfa 	bl	80008a0 <ILI9341_Set_Address>

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // Komenda
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b2:	481b      	ldr	r0, [pc, #108]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010b4:	f007 f996 	bl	80083e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010be:	4818      	ldr	r0, [pc, #96]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010c0:	f007 f990 	bl	80083e4 <HAL_GPIO_WritePin>
    ILI9341_SPI_Send(0x2C);
 80010c4:	202c      	movs	r0, #44	@ 0x2c
 80010c6:	f7ff fb2d 	bl	8000724 <ILI9341_SPI_Send>

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // Dane
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d0:	4813      	ldr	r0, [pc, #76]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010d2:	f007 f987 	bl	80083e4 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < 320 * 240; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	e013      	b.n	8001104 <ILI9341_Draw_Start_Screen+0x6c>
    {
        uint16_t color = start_screen[i];
 80010dc:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <ILI9341_Draw_Start_Screen+0x8c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e4:	807b      	strh	r3, [r7, #2]
        ILI9341_SPI_Send(color >> 8);
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fb18 	bl	8000724 <ILI9341_SPI_Send>
        ILI9341_SPI_Send(color & 0xFF);
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fb13 	bl	8000724 <ILI9341_SPI_Send>
    for (uint32_t i = 0; i < 320 * 240; i++)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800110a:	d3e7      	bcc.n	80010dc <ILI9341_Draw_Start_Screen+0x44>
    }

    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 8001114:	f007 f966 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020c00 	.word	0x40020c00
 8001124:	0800f7e4 	.word	0x0800f7e4

08001128 <Si468x_dab_init>:

static uint16_t rssi_hi_res;


void Si468x_dab_init()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 800112c:	2101      	movs	r1, #1
 800112e:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <Si468x_dab_init+0xa8>)
 8001130:	f002 fd04 	bl	8003b3c <send_debug_msg>
	Si468x_reset();
 8001134:	f000 f84e 	bl	80011d4 <Si468x_reset>
	Si468x_power_up();
 8001138:	f000 f868 	bl	800120c <Si468x_power_up>
	Si468x_bootloader_load_host();
 800113c:	f000 f8ea 	bl	8001314 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_6_0_9_START_ADDR);
 8001140:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8001144:	f000 f95a 	bl	80013fc <Si468x_firmware_load_flash>
	Si468x_boot();
 8001148:	f000 f9f8 	bl	800153c <Si468x_boot>
	Si468x_get_part_info();
 800114c:	f000 fbb0 	bl	80018b0 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001150:	f000 fb28 	bl	80017a4 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, dla FM dać 0x00 (otwarty), dla DAB 0x01 (zamkniety)
 8001154:	2101      	movs	r1, #1
 8001156:	f241 7012 	movw	r0, #5906	@ 0x1712
 800115a:	f000 fc17 	bl	800198c <Si468x_set_property>
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF468); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5. Wartość z kalibracji DAB: 0xF468 (-2968)
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x250); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3. Wartość z kalibracji DAB: 0x0250 (592)
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x5); 				//prog RSSI od kiedy łapie kanał, default 12
 800115e:	2105      	movs	r1, #5
 8001160:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8001164:	f000 fc12 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 8001168:	2130      	movs	r1, #48	@ 0x30
 800116a:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 800116e:	f000 fc0d 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 8001172:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001176:	f24b 2002 	movw	r0, #45570	@ 0xb202
 800117a:	f000 fc07 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta. bylo 0x4005
 800117e:	f244 0105 	movw	r1, #16389	@ 0x4005
 8001182:	f44f 4034 	mov.w	r0, #46080	@ 0xb400
 8001186:	f000 fc01 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 800118a:	2101      	movs	r1, #1
 800118c:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8001190:	f000 fbfc 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001194:	2101      	movs	r1, #1
 8001196:	f24b 3002 	movw	r0, #45826	@ 0xb302
 800119a:	f000 fbf7 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 800119e:	2101      	movs	r1, #1
 80011a0:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 80011a4:	f000 fbf2 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80011a8:	2105      	movs	r1, #5
 80011aa:	f24b 5001 	movw	r0, #46337	@ 0xb501
 80011ae:	f000 fbed 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80011b2:	f24e 21c4 	movw	r1, #58052	@ 0xe2c4
 80011b6:	f24b 5003 	movw	r0, #46339	@ 0xb503
 80011ba:	f000 fbe7 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 80011be:	2101      	movs	r1, #1
 80011c0:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 80011c4:	f000 fbe2 	bl	800198c <Si468x_set_property>
	//Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 80011c8:	f000 faec 	bl	80017a4 <Si468x_get_sys_state>

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	0800d944 	.word	0x0800d944

080011d4 <Si468x_reset>:

void Si468x_reset()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 80011d8:	2101      	movs	r1, #1
 80011da:	480a      	ldr	r0, [pc, #40]	@ (8001204 <Si468x_reset+0x30>)
 80011dc:	f002 fcae 	bl	8003b3c <send_debug_msg>
	RESET_PIN_LOW;
 80011e0:	2200      	movs	r2, #0
 80011e2:	2120      	movs	r1, #32
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <Si468x_reset+0x34>)
 80011e6:	f007 f8fd 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	@ 0x64
 80011ec:	f006 faf6 	bl	80077dc <HAL_Delay>
	RESET_PIN_HIGH;
 80011f0:	2201      	movs	r2, #1
 80011f2:	2120      	movs	r1, #32
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <Si468x_reset+0x34>)
 80011f6:	f007 f8f5 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80011fa:	20c8      	movs	r0, #200	@ 0xc8
 80011fc:	f006 faee 	bl	80077dc <HAL_Delay>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800d994 	.word	0x0800d994
 8001208:	40020800 	.word	0x40020800

0800120c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001210:	2101      	movs	r1, #1
 8001212:	4826      	ldr	r0, [pc, #152]	@ (80012ac <Si468x_power_up+0xa0>)
 8001214:	f002 fc92 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <Si468x_power_up+0xa4>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001220:	2280      	movs	r2, #128	@ 0x80
 8001222:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001226:	2217      	movs	r2, #23
 8001228:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <Si468x_power_up+0xa4>)
 800122c:	2250      	movs	r2, #80	@ 0x50
 800122e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001238:	22f8      	movs	r2, #248	@ 0xf8
 800123a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <Si468x_power_up+0xa4>)
 800123e:	2224      	movs	r2, #36	@ 0x24
 8001240:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001244:	2201      	movs	r2, #1
 8001246:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <Si468x_power_up+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001250:	2210      	movs	r2, #16
 8001252:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <Si468x_power_up+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001268:	2228      	movs	r2, #40	@ 0x28
 800126a:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <Si468x_power_up+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001278:	490d      	ldr	r1, [pc, #52]	@ (80012b0 <Si468x_power_up+0xa4>)
 800127a:	2010      	movs	r0, #16
 800127c:	f000 fa58 	bl	8001730 <Si468x_write_command>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <Si468x_power_up+0xa8>)
 8001286:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f006 faa7 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800128e:	490a      	ldr	r1, [pc, #40]	@ (80012b8 <Si468x_power_up+0xac>)
 8001290:	2005      	movs	r0, #5
 8001292:	f000 fa6f 	bl	8001774 <Si468x_read_reply>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <Si468x_power_up+0xa8>)
 800129c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800129e:	2101      	movs	r1, #1
 80012a0:	4806      	ldr	r0, [pc, #24]	@ (80012bc <Si468x_power_up+0xb0>)
 80012a2:	f002 fc4b 	bl	8003b3c <send_debug_msg>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	0800d9a8 	.word	0x0800d9a8
 80012b0:	200001a8 	.word	0x200001a8
 80012b4:	20003510 	.word	0x20003510
 80012b8:	200011a8 	.word	0x200011a8
 80012bc:	0800d9e4 	.word	0x0800d9e4

080012c0 <Si468x_load_init>:

void Si468x_load_init()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 80012c4:	2101      	movs	r1, #1
 80012c6:	480f      	ldr	r0, [pc, #60]	@ (8001304 <Si468x_load_init+0x44>)
 80012c8:	f002 fc38 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <Si468x_load_init+0x48>)
 80012ce:	2206      	movs	r2, #6
 80012d0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <Si468x_load_init+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80012d8:	490b      	ldr	r1, [pc, #44]	@ (8001308 <Si468x_load_init+0x48>)
 80012da:	2002      	movs	r0, #2
 80012dc:	f000 fa28 	bl	8001730 <Si468x_write_command>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <Si468x_load_init+0x4c>)
 80012e6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f006 fa77 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012ee:	4908      	ldr	r1, [pc, #32]	@ (8001310 <Si468x_load_init+0x50>)
 80012f0:	2005      	movs	r0, #5
 80012f2:	f000 fa3f 	bl	8001774 <Si468x_read_reply>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <Si468x_load_init+0x4c>)
 80012fc:	701a      	strb	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0800da04 	.word	0x0800da04
 8001308:	200001a8 	.word	0x200001a8
 800130c:	20003510 	.word	0x20003510
 8001310:	200011a8 	.word	0x200011a8

08001314 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800131a:	2101      	movs	r1, #1
 800131c:	4830      	ldr	r0, [pc, #192]	@ (80013e0 <Si468x_bootloader_load_host+0xcc>)
 800131e:	f002 fc0d 	bl	8003b3c <send_debug_msg>
	Si468x_load_init();
 8001322:	f7ff ffcd 	bl	80012c0 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001326:	f241 63a4 	movw	r3, #5796	@ 0x16a4
 800132a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800132e:	2204      	movs	r2, #4
 8001330:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001334:	2200      	movs	r2, #0
 8001336:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800133a:	2200      	movs	r2, #0
 800133c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001340:	2200      	movs	r2, #0
 8001342:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	e03e      	b.n	80013c8 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 800134a:	2300      	movs	r3, #0
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	e014      	b.n	800137a <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001350:	88ba      	ldrh	r2, [r7, #4]
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	4924      	ldr	r1, [pc, #144]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 8001356:	fba1 1303 	umull	r1, r3, r1, r3
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	441a      	add	r2, r3
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	3304      	adds	r3, #4
 800136c:	491f      	ldr	r1, [pc, #124]	@ (80013ec <Si468x_bootloader_load_host+0xd8>)
 800136e:	5c89      	ldrb	r1, [r1, r2]
 8001370:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001372:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	3301      	adds	r3, #1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	4a1a      	ldr	r2, [pc, #104]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	88ba      	ldrh	r2, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3e1      	bcc.n	8001350 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4a16      	ldr	r2, [pc, #88]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	3304      	adds	r3, #4
 800139a:	b29b      	uxth	r3, r3
 800139c:	4911      	ldr	r1, [pc, #68]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f9c6 	bl	8001730 <Si468x_write_command>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <Si468x_bootloader_load_host+0xdc>)
 80013aa:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f006 fa15 	bl	80077dc <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80013b2:	4910      	ldr	r1, [pc, #64]	@ (80013f4 <Si468x_bootloader_load_host+0xe0>)
 80013b4:	2005      	movs	r0, #5
 80013b6:	f000 f9dd 	bl	8001774 <Si468x_read_reply>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <Si468x_bootloader_load_host+0xdc>)
 80013c0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	3301      	adds	r3, #1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d9bd      	bls.n	800134a <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 80013ce:	2101      	movs	r1, #1
 80013d0:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <Si468x_bootloader_load_host+0xe4>)
 80013d2:	f002 fbb3 	bl	8003b3c <send_debug_msg>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800da1c 	.word	0x0800da1c
 80013e4:	200001a8 	.word	0x200001a8
 80013e8:	aaaaaaab 	.word	0xaaaaaaab
 80013ec:	08034fe4 	.word	0x08034fe4
 80013f0:	20003510 	.word	0x20003510
 80013f4:	200011a8 	.word	0x200011a8
 80013f8:	0800da58 	.word	0x0800da58

080013fc <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001404:	2101      	movs	r1, #1
 8001406:	4845      	ldr	r0, [pc, #276]	@ (800151c <Si468x_firmware_load_flash+0x120>)
 8001408:	f002 fb98 	bl	8003b3c <send_debug_msg>
	Si468x_load_init();
 800140c:	f7ff ff58 	bl	80012c0 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001410:	4b43      	ldr	r3, [pc, #268]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001412:	2205      	movs	r2, #5
 8001414:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001416:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800141c:	4b40      	ldr	r3, [pc, #256]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800141e:	2200      	movs	r2, #0
 8001420:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001424:	2200      	movs	r2, #0
 8001426:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800142e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001438:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001442:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0e1b      	lsrs	r3, r3, #24
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800144c:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800144e:	2100      	movs	r1, #0
 8001450:	4834      	ldr	r0, [pc, #208]	@ (8001524 <Si468x_firmware_load_flash+0x128>)
 8001452:	f002 fb73 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 8001456:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	2210      	movs	r2, #16
 800145c:	4932      	ldr	r1, [pc, #200]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f00c f98e 	bl	800d780 <itoa>
 8001464:	4603      	mov	r3, r0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fb67 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001470:	795b      	ldrb	r3, [r3, #5]
 8001472:	2210      	movs	r2, #16
 8001474:	492c      	ldr	r1, [pc, #176]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 8001476:	4618      	mov	r0, r3
 8001478:	f00c f982 	bl	800d780 <itoa>
 800147c:	4603      	mov	r3, r0
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fb5b 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001488:	799b      	ldrb	r3, [r3, #6]
 800148a:	2210      	movs	r2, #16
 800148c:	4926      	ldr	r1, [pc, #152]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 800148e:	4618      	mov	r0, r3
 8001490:	f00c f976 	bl	800d780 <itoa>
 8001494:	4603      	mov	r3, r0
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f002 fb4f 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014a0:	79db      	ldrb	r3, [r3, #7]
 80014a2:	2210      	movs	r2, #16
 80014a4:	4920      	ldr	r1, [pc, #128]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00c f96a 	bl	800d780 <itoa>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2101      	movs	r1, #1
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fb43 	bl	8003b3c <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014be:	2200      	movs	r2, #0
 80014c0:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80014ce:	4914      	ldr	r1, [pc, #80]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014d0:	200c      	movs	r0, #12
 80014d2:	f000 f92d 	bl	8001730 <Si468x_write_command>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <Si468x_firmware_load_flash+0x130>)
 80014dc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f006 f97c 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014e4:	4912      	ldr	r1, [pc, #72]	@ (8001530 <Si468x_firmware_load_flash+0x134>)
 80014e6:	2005      	movs	r0, #5
 80014e8:	f000 f944 	bl	8001774 <Si468x_read_reply>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <Si468x_firmware_load_flash+0x130>)
 80014f2:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <Si468x_firmware_load_flash+0x134>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001500:	2101      	movs	r1, #1
 8001502:	480c      	ldr	r0, [pc, #48]	@ (8001534 <Si468x_firmware_load_flash+0x138>)
 8001504:	f002 fb1a 	bl	8003b3c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001508:	e003      	b.n	8001512 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800150a:	2101      	movs	r1, #1
 800150c:	480a      	ldr	r0, [pc, #40]	@ (8001538 <Si468x_firmware_load_flash+0x13c>)
 800150e:	f002 fb15 	bl	8003b3c <send_debug_msg>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	0800da78 	.word	0x0800da78
 8001520:	200001a8 	.word	0x200001a8
 8001524:	0800dab4 	.word	0x0800dab4
 8001528:	200034d0 	.word	0x200034d0
 800152c:	20003510 	.word	0x20003510
 8001530:	200011a8 	.word	0x200011a8
 8001534:	0800dac8 	.word	0x0800dac8
 8001538:	0800dad8 	.word	0x0800dad8

0800153c <Si468x_boot>:

void Si468x_boot()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 8001540:	2101      	movs	r1, #1
 8001542:	4816      	ldr	r0, [pc, #88]	@ (800159c <Si468x_boot+0x60>)
 8001544:	f002 fafa 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <Si468x_boot+0x64>)
 800154a:	2207      	movs	r2, #7
 800154c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <Si468x_boot+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <Si468x_boot+0x64>)
 8001556:	2002      	movs	r0, #2
 8001558:	f000 f8ea 	bl	8001730 <Si468x_write_command>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <Si468x_boot+0x68>)
 8001562:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f006 f939 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800156a:	490f      	ldr	r1, [pc, #60]	@ (80015a8 <Si468x_boot+0x6c>)
 800156c:	2005      	movs	r0, #5
 800156e:	f000 f901 	bl	8001774 <Si468x_read_reply>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <Si468x_boot+0x68>)
 8001578:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <Si468x_boot+0x6c>)
 800157c:	78db      	ldrb	r3, [r3, #3]
 800157e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001582:	2bc0      	cmp	r3, #192	@ 0xc0
 8001584:	d104      	bne.n	8001590 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 8001586:	2101      	movs	r1, #1
 8001588:	4808      	ldr	r0, [pc, #32]	@ (80015ac <Si468x_boot+0x70>)
 800158a:	f002 fad7 	bl	8003b3c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 800158e:	e003      	b.n	8001598 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001590:	2101      	movs	r1, #1
 8001592:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <Si468x_boot+0x74>)
 8001594:	f002 fad2 	bl	8003b3c <send_debug_msg>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0800daf4 	.word	0x0800daf4
 80015a0:	200001a8 	.word	0x200001a8
 80015a4:	20003510 	.word	0x20003510
 80015a8:	200011a8 	.word	0x200011a8
 80015ac:	0800db30 	.word	0x0800db30
 80015b0:	0800db4c 	.word	0x0800db4c

080015b4 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 80015be:	1df9      	adds	r1, r7, #7
 80015c0:	2364      	movs	r3, #100	@ 0x64
 80015c2:	2201      	movs	r2, #1
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <Si468x_write_single_byte+0x20>)
 80015c6:	f00a f8e2 	bl	800b78e <HAL_SPI_Transmit>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20006f00 	.word	0x20006f00

080015d8 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 80015e2:	1df9      	adds	r1, r7, #7
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	2201      	movs	r2, #1
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <Si468x_read_single_byte+0x20>)
 80015ea:	f00a fa0c 	bl	800ba06 <HAL_SPI_Receive>
	return data_buffer;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20006f00 	.word	0x20006f00

080015fc <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	81fb      	strh	r3, [r7, #14]
 800160a:	e01f      	b.n	800164c <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 800160c:	4916      	ldr	r1, [pc, #88]	@ (8001668 <Si468x_wait_for_CTS+0x6c>)
 800160e:	2001      	movs	r0, #1
 8001610:	f000 f8b0 	bl	8001774 <Si468x_read_reply>
		if(rd_reply.cts)
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <Si468x_wait_for_CTS+0x70>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00e      	beq.n	8001640 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <Si468x_wait_for_CTS+0x70>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001630:	2101      	movs	r1, #1
 8001632:	480f      	ldr	r0, [pc, #60]	@ (8001670 <Si468x_wait_for_CTS+0x74>)
 8001634:	f002 fa82 	bl	8003b3c <send_debug_msg>
				return COMMAND_ERROR;
 8001638:	2320      	movs	r3, #32
 800163a:	e010      	b.n	800165e <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 800163c:	2300      	movs	r3, #0
 800163e:	e00e      	b.n	800165e <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f006 f8cb 	bl	80077dc <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	3301      	adds	r3, #1
 800164a:	81fb      	strh	r3, [r7, #14]
 800164c:	89fa      	ldrh	r2, [r7, #14]
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3db      	bcc.n	800160c <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 8001654:	2101      	movs	r1, #1
 8001656:	4807      	ldr	r0, [pc, #28]	@ (8001674 <Si468x_wait_for_CTS+0x78>)
 8001658:	f002 fa70 	bl	8003b3c <send_debug_msg>
	return TIMEOUT;
 800165c:	2308      	movs	r3, #8
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200011a8 	.word	0x200011a8
 800166c:	200035fc 	.word	0x200035fc
 8001670:	0800db60 	.word	0x0800db60
 8001674:	0800db88 	.word	0x0800db88

08001678 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001688:	2200      	movs	r2, #0
 800168a:	2110      	movs	r1, #16
 800168c:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <Si468x_write_multiple+0x4c>)
 800168e:	f006 fea9 	bl	80083e4 <HAL_GPIO_WritePin>
	while(len--)
 8001692:	e009      	b.n	80016a8 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	81fa      	strh	r2, [r7, #14]
 800169a:	461a      	mov	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff86 	bl	80015b4 <Si468x_write_single_byte>
	while(len--)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	1e5a      	subs	r2, r3, #1
 80016ac:	80fa      	strh	r2, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80016b2:	2201      	movs	r2, #1
 80016b4:	2110      	movs	r1, #16
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <Si468x_write_multiple+0x4c>)
 80016b8:	f006 fe94 	bl	80083e4 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800

080016c8 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 80016d8:	2201      	movs	r2, #1
 80016da:	2110      	movs	r1, #16
 80016dc:	4813      	ldr	r0, [pc, #76]	@ (800172c <Si468x_read_multiple+0x64>)
 80016de:	f006 fe81 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f006 f87a 	bl	80077dc <HAL_Delay>
	CS_PIN_LOW;
 80016e8:	2200      	movs	r2, #0
 80016ea:	2110      	movs	r1, #16
 80016ec:	480f      	ldr	r0, [pc, #60]	@ (800172c <Si468x_read_multiple+0x64>)
 80016ee:	f006 fe79 	bl	80083e4 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff ff5e 	bl	80015b4 <Si468x_write_single_byte>
	while(len--)
 80016f8:	e009      	b.n	800170e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	81fa      	strh	r2, [r7, #14]
 8001700:	461a      	mov	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	189c      	adds	r4, r3, r2
 8001706:	f7ff ff67 	bl	80015d8 <Si468x_read_single_byte>
 800170a:	4603      	mov	r3, r0
 800170c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	80fa      	strh	r2, [r7, #6]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001718:	2201      	movs	r2, #1
 800171a:	2110      	movs	r1, #16
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <Si468x_read_multiple+0x64>)
 800171e:	f006 fe61 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	40020800 	.word	0x40020800

08001730 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800173c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001740:	f7ff ff5c 	bl	80015fc <Si468x_wait_for_CTS>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <Si468x_write_command+0x24>
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b20      	cmp	r3, #32
 8001752:	d10a      	bne.n	800176a <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff8d 	bl	8001678 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800175e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001762:	f7ff ff4b 	bl	80015fc <Si468x_wait_for_CTS>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff9f 	bl	80016c8 <Si468x_read_multiple>
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <Si468x_read_reply+0x28>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <Si468x_read_reply+0x2c>)
 8001790:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200011a8 	.word	0x200011a8
 80017a0:	200035fc 	.word	0x200035fc

080017a4 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80017a8:	2101      	movs	r1, #1
 80017aa:	4833      	ldr	r0, [pc, #204]	@ (8001878 <Si468x_get_sys_state+0xd4>)
 80017ac:	f002 f9c6 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80017b0:	4b32      	ldr	r3, [pc, #200]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017b2:	2209      	movs	r2, #9
 80017b4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80017bc:	492f      	ldr	r1, [pc, #188]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017be:	2002      	movs	r0, #2
 80017c0:	f7ff ffb6 	bl	8001730 <Si468x_write_command>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <Si468x_get_sys_state+0xdc>)
 80017ca:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f006 f805 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80017d2:	492c      	ldr	r1, [pc, #176]	@ (8001884 <Si468x_get_sys_state+0xe0>)
 80017d4:	2005      	movs	r0, #5
 80017d6:	f7ff ffcd 	bl	8001774 <Si468x_read_reply>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <Si468x_get_sys_state+0xdc>)
 80017e0:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 80017e2:	2100      	movs	r1, #0
 80017e4:	4828      	ldr	r0, [pc, #160]	@ (8001888 <Si468x_get_sys_state+0xe4>)
 80017e6:	f002 f9a9 	bl	8003b3c <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <Si468x_get_sys_state+0xe0>)
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d83a      	bhi.n	8001868 <Si468x_get_sys_state+0xc4>
 80017f2:	a201      	add	r2, pc, #4	@ (adr r2, 80017f8 <Si468x_get_sys_state+0x54>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001819 	.word	0x08001819
 80017fc:	08001823 	.word	0x08001823
 8001800:	0800182d 	.word	0x0800182d
 8001804:	08001837 	.word	0x08001837
 8001808:	08001841 	.word	0x08001841
 800180c:	0800184b 	.word	0x0800184b
 8001810:	08001855 	.word	0x08001855
 8001814:	0800185f 	.word	0x0800185f
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001818:	2101      	movs	r1, #1
 800181a:	481c      	ldr	r0, [pc, #112]	@ (800188c <Si468x_get_sys_state+0xe8>)
 800181c:	f002 f98e 	bl	8003b3c <send_debug_msg>
			break;
 8001820:	e027      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001822:	2101      	movs	r1, #1
 8001824:	481a      	ldr	r0, [pc, #104]	@ (8001890 <Si468x_get_sys_state+0xec>)
 8001826:	f002 f989 	bl	8003b3c <send_debug_msg>
			break;
 800182a:	e022      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 800182c:	2101      	movs	r1, #1
 800182e:	4819      	ldr	r0, [pc, #100]	@ (8001894 <Si468x_get_sys_state+0xf0>)
 8001830:	f002 f984 	bl	8003b3c <send_debug_msg>
			break;
 8001834:	e01d      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001836:	2101      	movs	r1, #1
 8001838:	4817      	ldr	r0, [pc, #92]	@ (8001898 <Si468x_get_sys_state+0xf4>)
 800183a:	f002 f97f 	bl	8003b3c <send_debug_msg>
			break;
 800183e:	e018      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 8001840:	2101      	movs	r1, #1
 8001842:	4816      	ldr	r0, [pc, #88]	@ (800189c <Si468x_get_sys_state+0xf8>)
 8001844:	f002 f97a 	bl	8003b3c <send_debug_msg>
			break;
 8001848:	e013      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 800184a:	2101      	movs	r1, #1
 800184c:	4814      	ldr	r0, [pc, #80]	@ (80018a0 <Si468x_get_sys_state+0xfc>)
 800184e:	f002 f975 	bl	8003b3c <send_debug_msg>
			break;
 8001852:	e00e      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 8001854:	2101      	movs	r1, #1
 8001856:	4813      	ldr	r0, [pc, #76]	@ (80018a4 <Si468x_get_sys_state+0x100>)
 8001858:	f002 f970 	bl	8003b3c <send_debug_msg>
			break;
 800185c:	e009      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 800185e:	2101      	movs	r1, #1
 8001860:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <Si468x_get_sys_state+0x104>)
 8001862:	f002 f96b 	bl	8003b3c <send_debug_msg>
			break;
 8001866:	e004      	b.n	8001872 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 8001868:	2101      	movs	r1, #1
 800186a:	4810      	ldr	r0, [pc, #64]	@ (80018ac <Si468x_get_sys_state+0x108>)
 800186c:	f002 f966 	bl	8003b3c <send_debug_msg>
			break;
 8001870:	bf00      	nop
	}
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	0800db98 	.word	0x0800db98
 800187c:	200001a8 	.word	0x200001a8
 8001880:	20003510 	.word	0x20003510
 8001884:	200011a8 	.word	0x200011a8
 8001888:	0800dbd4 	.word	0x0800dbd4
 800188c:	0800dbe0 	.word	0x0800dbe0
 8001890:	0800dbf8 	.word	0x0800dbf8
 8001894:	0800dc10 	.word	0x0800dc10
 8001898:	0800dc28 	.word	0x0800dc28
 800189c:	0800dc50 	.word	0x0800dc50
 80018a0:	0800dc6c 	.word	0x0800dc6c
 80018a4:	0800dc84 	.word	0x0800dc84
 80018a8:	0800dca0 	.word	0x0800dca0
 80018ac:	0800dcb8 	.word	0x0800dcb8

080018b0 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 80018b6:	2101      	movs	r1, #1
 80018b8:	482c      	ldr	r0, [pc, #176]	@ (800196c <Si468x_get_part_info+0xbc>)
 80018ba:	f002 f93f 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 80018be:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018c0:	2208      	movs	r2, #8
 80018c2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80018c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80018ca:	4929      	ldr	r1, [pc, #164]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018cc:	2002      	movs	r0, #2
 80018ce:	f7ff ff2f 	bl	8001730 <Si468x_write_command>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <Si468x_get_part_info+0xc4>)
 80018d8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f005 ff7e 	bl	80077dc <HAL_Delay>
	Si468x_write_single_byte(0x00);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fe67 	bl	80015b4 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 80018e6:	4924      	ldr	r1, [pc, #144]	@ (8001978 <Si468x_get_part_info+0xc8>)
 80018e8:	200a      	movs	r0, #10
 80018ea:	f7ff ff43 	bl	8001774 <Si468x_read_reply>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <Si468x_get_part_info+0xc4>)
 80018f4:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 80018f6:	2100      	movs	r1, #0
 80018f8:	4820      	ldr	r0, [pc, #128]	@ (800197c <Si468x_get_part_info+0xcc>)
 80018fa:	f002 f91f 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	220a      	movs	r2, #10
 8001904:	491e      	ldr	r1, [pc, #120]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001906:	4618      	mov	r0, r3
 8001908:	f00b ff3a 	bl	800d780 <itoa>
 800190c:	4603      	mov	r3, r0
 800190e:	2101      	movs	r1, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f002 f913 	bl	8003b3c <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001916:	2100      	movs	r1, #0
 8001918:	481a      	ldr	r0, [pc, #104]	@ (8001984 <Si468x_get_part_info+0xd4>)
 800191a:	f002 f90f 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001920:	795b      	ldrb	r3, [r3, #5]
 8001922:	220a      	movs	r2, #10
 8001924:	4916      	ldr	r1, [pc, #88]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001926:	4618      	mov	r0, r3
 8001928:	f00b ff2a 	bl	800d780 <itoa>
 800192c:	4603      	mov	r3, r0
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f002 f903 	bl	8003b3c <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001936:	2100      	movs	r1, #0
 8001938:	4813      	ldr	r0, [pc, #76]	@ (8001988 <Si468x_get_part_info+0xd8>)
 800193a:	f002 f8ff 	bl	8003b3c <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001940:	7a5b      	ldrb	r3, [r3, #9]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001948:	7a12      	ldrb	r2, [r2, #8]
 800194a:	4413      	add	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	220a      	movs	r2, #10
 8001952:	490b      	ldr	r1, [pc, #44]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001954:	4618      	mov	r0, r3
 8001956:	f00b ff13 	bl	800d780 <itoa>
 800195a:	4603      	mov	r3, r0
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f002 f8ec 	bl	8003b3c <send_debug_msg>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	0800dccc 	.word	0x0800dccc
 8001970:	200001a8 	.word	0x200001a8
 8001974:	20003510 	.word	0x20003510
 8001978:	200011a8 	.word	0x200011a8
 800197c:	0800dd08 	.word	0x0800dd08
 8001980:	200034d0 	.word	0x200034d0
 8001984:	0800dd18 	.word	0x0800dd18
 8001988:	0800dd24 	.word	0x0800dd24

0800198c <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	80fb      	strh	r3, [r7, #6]
 8001998:	4613      	mov	r3, r2
 800199a:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 800199c:	2101      	movs	r1, #1
 800199e:	4832      	ldr	r0, [pc, #200]	@ (8001a68 <Si468x_set_property+0xdc>)
 80019a0:	f002 f8cc 	bl	8003b3c <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019a4:	2100      	movs	r1, #0
 80019a6:	4831      	ldr	r0, [pc, #196]	@ (8001a6c <Si468x_set_property+0xe0>)
 80019a8:	f002 f8c8 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2210      	movs	r2, #16
 80019b0:	492f      	ldr	r1, [pc, #188]	@ (8001a70 <Si468x_set_property+0xe4>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00b fee4 	bl	800d780 <itoa>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2101      	movs	r1, #1
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 f8bd 	bl	8003b3c <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 80019c2:	2100      	movs	r1, #0
 80019c4:	482b      	ldr	r0, [pc, #172]	@ (8001a74 <Si468x_set_property+0xe8>)
 80019c6:	f002 f8b9 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	2210      	movs	r2, #16
 80019ce:	4928      	ldr	r1, [pc, #160]	@ (8001a70 <Si468x_set_property+0xe4>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00b fed5 	bl	800d780 <itoa>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 f8ae 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <Si468x_set_property+0xec>)
 80019e2:	2213      	movs	r2, #19
 80019e4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <Si468x_set_property+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <Si468x_set_property+0xec>)
 80019f2:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <Si468x_set_property+0xec>)
 80019fe:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a06:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a12:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001a14:	4918      	ldr	r1, [pc, #96]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a16:	2006      	movs	r0, #6
 8001a18:	f7ff fe8a 	bl	8001730 <Si468x_write_command>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <Si468x_set_property+0xf0>)
 8001a22:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f005 fed9 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001a2a:	4915      	ldr	r1, [pc, #84]	@ (8001a80 <Si468x_set_property+0xf4>)
 8001a2c:	2005      	movs	r0, #5
 8001a2e:	f7ff fea1 	bl	8001774 <Si468x_read_reply>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <Si468x_set_property+0xf0>)
 8001a38:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f825 	bl	8001a8c <Si468x_get_property>
 8001a42:	4603      	mov	r3, r0
 8001a44:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001a46:	89fa      	ldrh	r2, [r7, #14]
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d104      	bne.n	8001a58 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <Si468x_set_property+0xf8>)
 8001a52:	f002 f873 	bl	8003b3c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 8001a56:	e003      	b.n	8001a60 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <Si468x_set_property+0xfc>)
 8001a5c:	f002 f86e 	bl	8003b3c <send_debug_msg>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	0800dd34 	.word	0x0800dd34
 8001a6c:	0800dd74 	.word	0x0800dd74
 8001a70:	200034d0 	.word	0x200034d0
 8001a74:	0800dd84 	.word	0x0800dd84
 8001a78:	200001a8 	.word	0x200001a8
 8001a7c:	20003510 	.word	0x20003510
 8001a80:	200011a8 	.word	0x200011a8
 8001a84:	0800dda0 	.word	0x0800dda0
 8001a88:	0800ddbc 	.word	0x0800ddbc

08001a8c <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a96:	2101      	movs	r1, #1
 8001a98:	482a      	ldr	r0, [pc, #168]	@ (8001b44 <Si468x_get_property+0xb8>)
 8001a9a:	f002 f84f 	bl	8003b3c <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4829      	ldr	r0, [pc, #164]	@ (8001b48 <Si468x_get_property+0xbc>)
 8001aa2:	f002 f84b 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	4928      	ldr	r1, [pc, #160]	@ (8001b4c <Si468x_get_property+0xc0>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00b fe67 	bl	800d780 <itoa>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f840 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001abc:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001abe:	2214      	movs	r2, #20
 8001ac0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ace:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ada:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001adc:	491c      	ldr	r1, [pc, #112]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ade:	2004      	movs	r0, #4
 8001ae0:	f7ff fe26 	bl	8001730 <Si468x_write_command>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <Si468x_get_property+0xc8>)
 8001aea:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f005 fe75 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001af2:	4919      	ldr	r1, [pc, #100]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001af4:	2006      	movs	r0, #6
 8001af6:	f7ff fe3d 	bl	8001774 <Si468x_read_reply>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <Si468x_get_property+0xc8>)
 8001b00:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001b02:	2100      	movs	r1, #0
 8001b04:	4815      	ldr	r0, [pc, #84]	@ (8001b5c <Si468x_get_property+0xd0>)
 8001b06:	f002 f819 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b0c:	795b      	ldrb	r3, [r3, #5]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b12:	7912      	ldrb	r2, [r2, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	2210      	movs	r2, #16
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <Si468x_get_property+0xc0>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00b fe30 	bl	800d780 <itoa>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2101      	movs	r1, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 f809 	bl	8003b3c <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b34:	7912      	ldrb	r2, [r2, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	b29b      	uxth	r3, r3
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	0800ddd4 	.word	0x0800ddd4
 8001b48:	0800dd74 	.word	0x0800dd74
 8001b4c:	200034d0 	.word	0x200034d0
 8001b50:	200001a8 	.word	0x200001a8
 8001b54:	20003510 	.word	0x20003510
 8001b58:	200011a8 	.word	0x200011a8
 8001b5c:	0800de10 	.word	0x0800de10

08001b60 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t ant_cap)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	460a      	mov	r2, r1
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001b70:	2101      	movs	r1, #1
 8001b72:	4858      	ldr	r0, [pc, #352]	@ (8001cd4 <Si468x_dab_tune_freq+0x174>)
 8001b74:	f001 ffe2 	bl	8003b3c <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4857      	ldr	r0, [pc, #348]	@ (8001cd8 <Si468x_dab_tune_freq+0x178>)
 8001b7c:	f001 ffde 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <Si468x_dab_tune_freq+0x17c>)
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	220a      	movs	r2, #10
 8001b8a:	4955      	ldr	r1, [pc, #340]	@ (8001ce0 <Si468x_dab_tune_freq+0x180>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00b fdf7 	bl	800d780 <itoa>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 ffd0 	bl	8003b3c <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4851      	ldr	r0, [pc, #324]	@ (8001ce4 <Si468x_dab_tune_freq+0x184>)
 8001ba0:	f001 ffcc 	bl	8003b3c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001ba4:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001ba6:	22b0      	movs	r2, #176	@ 0xb0
 8001ba8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001baa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	70da      	strb	r2, [r3, #3]

	switch(ant_cap)
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d012      	beq.n	8001be8 <Si468x_dab_tune_freq+0x88>
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d117      	bne.n	8001bf6 <Si468x_dab_tune_freq+0x96>
	{
		case USE_ANT_CAP:
			//use ANT_CAP value from table of best ANTCAP values
			dab_spi_tx_buffer[4] = ant_cap_values[channel] & 0xFF;	//antcap [7:0]
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4a48      	ldr	r2, [pc, #288]	@ (8001cec <Si468x_dab_tune_freq+0x18c>)
 8001bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b45      	ldr	r3, [pc, #276]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bd2:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap_values[channel] >> 8;	//antcap [15:8]
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4a45      	ldr	r2, [pc, #276]	@ (8001cec <Si468x_dab_tune_freq+0x18c>)
 8001bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001be4:	715a      	strb	r2, [r3, #5]
			break;
 8001be6:	e011      	b.n	8001c0c <Si468x_dab_tune_freq+0xac>
		case NOT_USE_ANT_CAP:
			//use algorithm of automatic setting ant_cap value based on tuning values written to Si4684
			dab_spi_tx_buffer[4] = 0x00;	//antcap [7:0]
 8001be8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = 0x00;	//antcap [15:8]
 8001bee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	715a      	strb	r2, [r3, #5]
			break;
 8001bf4:	e00a      	b.n	8001c0c <Si468x_dab_tune_freq+0xac>
		default:
			//use ant_cap value as argument of this function
			dab_spi_tx_buffer[4] = ant_cap & 0xFF;	//antcap [7:0]
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bfc:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap >> 8;	//antcap [15:8]
 8001bfe:	88bb      	ldrh	r3, [r7, #4]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b38      	ldr	r3, [pc, #224]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001c08:	715a      	strb	r2, [r3, #5]
			break;
 8001c0a:	bf00      	nop
	}

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001c0c:	4936      	ldr	r1, [pc, #216]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001c0e:	2006      	movs	r0, #6
 8001c10:	f7ff fd8e 	bl	8001730 <Si468x_write_command>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c1a:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001c1c:	4935      	ldr	r1, [pc, #212]	@ (8001cf4 <Si468x_dab_tune_freq+0x194>)
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fda8 	bl	8001774 <Si468x_read_reply>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c2a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001c2c:	4b32      	ldr	r3, [pc, #200]	@ (8001cf8 <Si468x_dab_tune_freq+0x198>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <Si468x_dab_tune_freq+0xe2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	482f      	ldr	r0, [pc, #188]	@ (8001cfc <Si468x_dab_tune_freq+0x19c>)
 8001c3e:	f001 ff7d 	bl	8003b3c <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	81fb      	strh	r3, [r7, #14]
 8001c46:	e03a      	b.n	8001cbe <Si468x_dab_tune_freq+0x15e>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001c48:	492a      	ldr	r1, [pc, #168]	@ (8001cf4 <Si468x_dab_tune_freq+0x194>)
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff fd92 	bl	8001774 <Si468x_read_reply>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c56:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001c58:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <Si468x_dab_tune_freq+0x198>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01c      	beq.n	8001ca0 <Si468x_dab_tune_freq+0x140>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001c66:	2100      	movs	r1, #0
 8001c68:	4825      	ldr	r0, [pc, #148]	@ (8001d00 <Si468x_dab_tune_freq+0x1a0>)
 8001c6a:	f001 ff67 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	220a      	movs	r2, #10
 8001c72:	491b      	ldr	r1, [pc, #108]	@ (8001ce0 <Si468x_dab_tune_freq+0x180>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00b fd83 	bl	800d780 <itoa>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 ff5c 	bl	8003b3c <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001c84:	2101      	movs	r1, #1
 8001c86:	481f      	ldr	r0, [pc, #124]	@ (8001d04 <Si468x_dab_tune_freq+0x1a4>)
 8001c88:	f001 ff58 	bl	8003b3c <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <Si468x_dab_tune_freq+0x1a8>)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <Si468x_dab_tune_freq+0x17c>)
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <Si468x_dab_tune_freq+0x1a8>)
 8001c9c:	6093      	str	r3, [r2, #8]
			break;
 8001c9e:	e014      	b.n	8001cca <Si468x_dab_tune_freq+0x16a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d103      	bne.n	8001cb2 <Si468x_dab_tune_freq+0x152>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001caa:	2101      	movs	r1, #1
 8001cac:	4817      	ldr	r0, [pc, #92]	@ (8001d0c <Si468x_dab_tune_freq+0x1ac>)
 8001cae:	f001 ff45 	bl	8003b3c <send_debug_msg>
		}
		HAL_Delay(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f005 fd92 	bl	80077dc <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	81fb      	strh	r3, [r7, #14]
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d9bf      	bls.n	8001c48 <Si468x_dab_tune_freq+0xe8>
	}
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	0800dec8 	.word	0x0800dec8
 8001cd8:	0800df04 	.word	0x0800df04
 8001cdc:	20003514 	.word	0x20003514
 8001ce0:	200034d0 	.word	0x200034d0
 8001ce4:	0800de84 	.word	0x0800de84
 8001ce8:	200001a8 	.word	0x200001a8
 8001cec:	08036688 	.word	0x08036688
 8001cf0:	20003510 	.word	0x20003510
 8001cf4:	200011a8 	.word	0x200011a8
 8001cf8:	200035fc 	.word	0x200035fc
 8001cfc:	0800dac8 	.word	0x0800dac8
 8001d00:	0800df10 	.word	0x0800df10
 8001d04:	0800df2c 	.word	0x0800df2c
 8001d08:	20004bc4 	.word	0x20004bc4
 8001d0c:	0800df34 	.word	0x0800df34

08001d10 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d1a:	22b2      	movs	r2, #178	@ 0xb2
 8001d1c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001d1e:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d20:	221a      	movs	r2, #26
 8001d22:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001d24:	4921      	ldr	r1, [pc, #132]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff fd02 	bl	8001730 <Si468x_write_command>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <Si468x_dab_digrad_status+0xa0>)
 8001d32:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f005 fd51 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001d3a:	491e      	ldr	r1, [pc, #120]	@ (8001db4 <Si468x_dab_digrad_status+0xa4>)
 8001d3c:	2028      	movs	r0, #40	@ 0x28
 8001d3e:	f7ff fd19 	bl	8001774 <Si468x_read_reply>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <Si468x_dab_digrad_status+0xa0>)
 8001d48:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <Si468x_dab_digrad_status+0xa8>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d019      	beq.n	8001d8c <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001d58:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <Si468x_dab_digrad_status+0xa4>)
 8001d5c:	4615      	mov	r5, r2
 8001d5e:	1d1c      	adds	r4, r3, #4
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d6c:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d72:	78db      	ldrb	r3, [r3, #3]
 8001d74:	2b14      	cmp	r3, #20
 8001d76:	d902      	bls.n	8001d7e <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001d78:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d80:	795b      	ldrb	r3, [r3, #5]
 8001d82:	2b36      	cmp	r3, #54	@ 0x36
 8001d84:	d902      	bls.n	8001d8c <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001d86:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d90:	461c      	mov	r4, r3
 8001d92:	4615      	mov	r5, r2
 8001d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001da0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	200001a8 	.word	0x200001a8
 8001db0:	20003510 	.word	0x20003510
 8001db4:	200011a8 	.word	0x200011a8
 8001db8:	200035fc 	.word	0x200035fc
 8001dbc:	200035d4 	.word	0x200035d4

08001dc0 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001dca:	2300      	movs	r3, #0
 8001dcc:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001dce:	2300      	movs	r3, #0
 8001dd0:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001dd6:	4ba1      	ldr	r3, [pc, #644]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001ddc:	4b9f      	ldr	r3, [pc, #636]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001de2:	499e      	ldr	r1, [pc, #632]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001de4:	2002      	movs	r0, #2
 8001de6:	f7ff fca3 	bl	8001730 <Si468x_write_command>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b9c      	ldr	r3, [pc, #624]	@ (8002060 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001df0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f005 fcf2 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001df8:	499a      	ldr	r1, [pc, #616]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001dfa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dfe:	f7ff fcb9 	bl	8001774 <Si468x_read_reply>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b96      	ldr	r3, [pc, #600]	@ (8002060 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001e08:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4896      	ldr	r0, [pc, #600]	@ (8002068 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e0e:	f001 fe95 	bl	8003b3c <send_debug_msg>

	if(rd_reply.err_cmd)
 8001e12:	4b96      	ldr	r3, [pc, #600]	@ (800206c <Si468x_dab_get_digital_service_list+0x2ac>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001e20:	2101      	movs	r1, #1
 8001e22:	4893      	ldr	r0, [pc, #588]	@ (8002070 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001e24:	f001 fe8a 	bl	8003b3c <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001e28:	4b8e      	ldr	r3, [pc, #568]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e30:	795b      	ldrb	r3, [r3, #5]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001e3a:	4b8a      	ldr	r3, [pc, #552]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e3c:	7a1b      	ldrb	r3, [r3, #8]
 8001e3e:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	773b      	strb	r3, [r7, #28]
 8001e44:	e24e      	b.n	80022e4 <Si468x_dab_get_digital_service_list+0x524>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001e46:	7f3b      	ldrb	r3, [r7, #28]
 8001e48:	4a8a      	ldr	r2, [pc, #552]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e4a:	7892      	ldrb	r2, [r2, #2]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a89      	ldr	r2, [pc, #548]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e50:	6892      	ldr	r2, [r2, #8]
 8001e52:	4989      	ldr	r1, [pc, #548]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e54:	2034      	movs	r0, #52	@ 0x34
 8001e56:	fb00 f303 	mul.w	r3, r0, r3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3324      	adds	r3, #36	@ 0x24
 8001e5e:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001e60:	7f3b      	ldrb	r3, [r7, #28]
 8001e62:	4a84      	ldr	r2, [pc, #528]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e64:	7892      	ldrb	r2, [r2, #2]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a82      	ldr	r2, [pc, #520]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e6a:	7b10      	ldrb	r0, [r2, #12]
 8001e6c:	4a82      	ldr	r2, [pc, #520]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e6e:	2134      	movs	r1, #52	@ 0x34
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3328      	adds	r3, #40	@ 0x28
 8001e78:	4602      	mov	r2, r0
 8001e7a:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001e7c:	7fba      	ldrb	r2, [r7, #30]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	f103 0210 	add.w	r2, r3, #16
 8001e8a:	7f7b      	ldrb	r3, [r7, #29]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a74      	ldr	r2, [pc, #464]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e92:	5cd2      	ldrb	r2, [r2, r3]
 8001e94:	7f3b      	ldrb	r3, [r7, #28]
 8001e96:	4977      	ldr	r1, [pc, #476]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e98:	7889      	ldrb	r1, [r1, #2]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f002 0201 	and.w	r2, r2, #1
 8001ea0:	b2d0      	uxtb	r0, r2
 8001ea2:	4a75      	ldr	r2, [pc, #468]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ea4:	2134      	movs	r1, #52	@ 0x34
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3314      	adds	r3, #20
 8001eae:	4602      	mov	r2, r0
 8001eb0:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001eb2:	7fba      	ldrb	r2, [r7, #30]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	f103 0211 	add.w	r2, r3, #17
 8001ec0:	7f7b      	ldrb	r3, [r7, #29]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a67      	ldr	r2, [pc, #412]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ec8:	5cd2      	ldrb	r2, [r2, r3]
 8001eca:	7f3b      	ldrb	r3, [r7, #28]
 8001ecc:	4969      	ldr	r1, [pc, #420]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001ece:	7889      	ldrb	r1, [r1, #2]
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f002 020f 	and.w	r2, r2, #15
 8001ed6:	b2d0      	uxtb	r0, r2
 8001ed8:	4a67      	ldr	r2, [pc, #412]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001eda:	2134      	movs	r1, #52	@ 0x34
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3329      	adds	r3, #41	@ 0x29
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001ee8:	7f3b      	ldrb	r3, [r7, #28]
 8001eea:	4a62      	ldr	r2, [pc, #392]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001eec:	7892      	ldrb	r2, [r2, #2]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a61      	ldr	r2, [pc, #388]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ef2:	2134      	movs	r1, #52	@ 0x34
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3314      	adds	r3, #20
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d017      	beq.n	8001f32 <Si468x_dab_get_digital_service_list+0x172>
		{
			services_count++;
 8001f02:	7fbb      	ldrb	r3, [r7, #30]
 8001f04:	3301      	adds	r3, #1
 8001f06:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001f08:	7f3b      	ldrb	r3, [r7, #28]
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f0c:	7892      	ldrb	r2, [r2, #2]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f12:	2134      	movs	r1, #52	@ 0x34
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3329      	adds	r3, #41	@ 0x29
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	7f7b      	ldrb	r3, [r7, #29]
 8001f20:	4413      	add	r3, r2
 8001f22:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001f24:	7f3b      	ldrb	r3, [r7, #28]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	77fb      	strb	r3, [r7, #31]
			continue;
 8001f30:	e1d5      	b.n	80022de <Si468x_dab_get_digital_service_list+0x51e>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001f32:	7fba      	ldrb	r2, [r7, #30]
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	f103 0210 	add.w	r2, r3, #16
 8001f40:	7f7b      	ldrb	r3, [r7, #29]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	4a47      	ldr	r2, [pc, #284]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	105b      	asrs	r3, r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	7f3b      	ldrb	r3, [r7, #28]
 8001f50:	4948      	ldr	r1, [pc, #288]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f52:	7889      	ldrb	r1, [r1, #2]
 8001f54:	440b      	add	r3, r1
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	b2d0      	uxtb	r0, r2
 8001f5c:	4a46      	ldr	r2, [pc, #280]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f5e:	2134      	movs	r1, #52	@ 0x34
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3315      	adds	r3, #21
 8001f68:	4602      	mov	r2, r0
 8001f6a:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001f6c:	7f3b      	ldrb	r3, [r7, #28]
 8001f6e:	4a41      	ldr	r2, [pc, #260]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f70:	7892      	ldrb	r2, [r2, #2]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a40      	ldr	r2, [pc, #256]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f76:	2134      	movs	r1, #52	@ 0x34
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3314      	adds	r3, #20
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <Si468x_dab_get_digital_service_list+0x1cc>
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d078      	beq.n	800207c <Si468x_dab_get_digital_service_list+0x2bc>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001f8a:	e0ec      	b.n	8002166 <Si468x_dab_get_digital_service_list+0x3a6>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001f8c:	7fba      	ldrb	r2, [r7, #30]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	f103 020c 	add.w	r2, r3, #12
 8001f9a:	7f7b      	ldrb	r3, [r7, #29]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a30      	ldr	r2, [pc, #192]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	7fba      	ldrb	r2, [r7, #30]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	f103 020d 	add.w	r2, r3, #13
 8001fb4:	7f7b      	ldrb	r3, [r7, #29]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a2a      	ldr	r2, [pc, #168]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001fc4:	4419      	add	r1, r3
 8001fc6:	7f3b      	ldrb	r3, [r7, #28]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001fca:	7892      	ldrb	r2, [r2, #2]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4608      	mov	r0, r1
 8001fd0:	4a29      	ldr	r2, [pc, #164]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fd2:	2134      	movs	r1, #52	@ 0x34
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3318      	adds	r3, #24
 8001fdc:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001fde:	7fba      	ldrb	r2, [r7, #30]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f103 020d 	add.w	r2, r3, #13
 8001fec:	7f7b      	ldrb	r3, [r7, #29]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ff4:	5cd2      	ldrb	r2, [r2, r3]
 8001ff6:	7f3b      	ldrb	r3, [r7, #28]
 8001ff8:	491e      	ldr	r1, [pc, #120]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001ffa:	7889      	ldrb	r1, [r1, #2]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	0912      	lsrs	r2, r2, #4
 8002000:	b2d0      	uxtb	r0, r2
 8002002:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002004:	2134      	movs	r1, #52	@ 0x34
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	331c      	adds	r3, #28
 800200e:	4602      	mov	r2, r0
 8002010:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8002012:	7f3b      	ldrb	r3, [r7, #28]
 8002014:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8002016:	7892      	ldrb	r2, [r2, #2]
 8002018:	4413      	add	r3, r2
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 800201c:	2134      	movs	r1, #52	@ 0x34
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	331c      	adds	r3, #28
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	0319      	lsls	r1, r3, #12
 800202a:	7f3b      	ldrb	r3, [r7, #28]
 800202c:	4a11      	ldr	r2, [pc, #68]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 800202e:	7892      	ldrb	r2, [r2, #2]
 8002030:	4413      	add	r3, r2
 8002032:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002034:	2034      	movs	r0, #52	@ 0x34
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	4413      	add	r3, r2
 800203c:	3318      	adds	r3, #24
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	7f3b      	ldrb	r3, [r7, #28]
 8002042:	480c      	ldr	r0, [pc, #48]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8002044:	7880      	ldrb	r0, [r0, #2]
 8002046:	4403      	add	r3, r0
 8002048:	440a      	add	r2, r1
 800204a:	490b      	ldr	r1, [pc, #44]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 800204c:	2034      	movs	r0, #52	@ 0x34
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	440b      	add	r3, r1
 8002054:	3320      	adds	r3, #32
 8002056:	601a      	str	r2, [r3, #0]
				break;
 8002058:	e085      	b.n	8002166 <Si468x_dab_get_digital_service_list+0x3a6>
 800205a:	bf00      	nop
 800205c:	200001a8 	.word	0x200001a8
 8002060:	20003510 	.word	0x20003510
 8002064:	200011a8 	.word	0x200011a8
 8002068:	0800df94 	.word	0x0800df94
 800206c:	200035fc 	.word	0x200035fc
 8002070:	0800dac8 	.word	0x0800dac8
 8002074:	20004bc4 	.word	0x20004bc4
 8002078:	20003774 	.word	0x20003774
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 800207c:	7fba      	ldrb	r2, [r7, #30]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f103 020c 	add.w	r2, r3, #12
 800208a:	7f7b      	ldrb	r3, [r7, #29]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	4aa0      	ldr	r2, [pc, #640]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	4619      	mov	r1, r3
 8002096:	7fba      	ldrb	r2, [r7, #30]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	f103 020d 	add.w	r2, r3, #13
 80020a4:	7f7b      	ldrb	r3, [r7, #29]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	4a9a      	ldr	r2, [pc, #616]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	4419      	add	r1, r3
 80020b2:	7fba      	ldrb	r2, [r7, #30]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	f103 020e 	add.w	r2, r3, #14
 80020c0:	7f7b      	ldrb	r3, [r7, #29]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	4a93      	ldr	r2, [pc, #588]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020d0:	4419      	add	r1, r3
 80020d2:	7f3b      	ldrb	r3, [r7, #28]
 80020d4:	4a90      	ldr	r2, [pc, #576]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80020d6:	7892      	ldrb	r2, [r2, #2]
 80020d8:	4413      	add	r3, r2
 80020da:	4608      	mov	r0, r1
 80020dc:	4a8f      	ldr	r2, [pc, #572]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80020de:	2134      	movs	r1, #52	@ 0x34
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3318      	adds	r3, #24
 80020e8:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80020ea:	7fba      	ldrb	r2, [r7, #30]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	f103 020e 	add.w	r2, r3, #14
 80020f8:	7f7b      	ldrb	r3, [r7, #29]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	4a85      	ldr	r2, [pc, #532]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 8002100:	5cd2      	ldrb	r2, [r2, r3]
 8002102:	7f3b      	ldrb	r3, [r7, #28]
 8002104:	4984      	ldr	r1, [pc, #528]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002106:	7889      	ldrb	r1, [r1, #2]
 8002108:	440b      	add	r3, r1
 800210a:	0912      	lsrs	r2, r2, #4
 800210c:	b2d0      	uxtb	r0, r2
 800210e:	4a83      	ldr	r2, [pc, #524]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002110:	2134      	movs	r1, #52	@ 0x34
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	331c      	adds	r3, #28
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 800211e:	7f3b      	ldrb	r3, [r7, #28]
 8002120:	4a7d      	ldr	r2, [pc, #500]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002122:	7892      	ldrb	r2, [r2, #2]
 8002124:	4413      	add	r3, r2
 8002126:	4a7d      	ldr	r2, [pc, #500]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002128:	2134      	movs	r1, #52	@ 0x34
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	331c      	adds	r3, #28
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	0519      	lsls	r1, r3, #20
 8002136:	7f3b      	ldrb	r3, [r7, #28]
 8002138:	4a77      	ldr	r2, [pc, #476]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 800213a:	7892      	ldrb	r2, [r2, #2]
 800213c:	4413      	add	r3, r2
 800213e:	4a77      	ldr	r2, [pc, #476]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002140:	2034      	movs	r0, #52	@ 0x34
 8002142:	fb00 f303 	mul.w	r3, r0, r3
 8002146:	4413      	add	r3, r2
 8002148:	3318      	adds	r3, #24
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	7f3b      	ldrb	r3, [r7, #28]
 800214e:	4872      	ldr	r0, [pc, #456]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002150:	7880      	ldrb	r0, [r0, #2]
 8002152:	4403      	add	r3, r0
 8002154:	440a      	add	r2, r1
 8002156:	4971      	ldr	r1, [pc, #452]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002158:	2034      	movs	r0, #52	@ 0x34
 800215a:	fb00 f303 	mul.w	r3, r0, r3
 800215e:	440b      	add	r3, r1
 8002160:	3320      	adds	r3, #32
 8002162:	601a      	str	r2, [r3, #0]
				break;
 8002164:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 8002166:	7fba      	ldrb	r2, [r7, #30]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	f103 0214 	add.w	r2, r3, #20
 8002174:	7f7b      	ldrb	r3, [r7, #29]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	4a66      	ldr	r2, [pc, #408]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03f      	beq.n	8002202 <Si468x_dab_get_digital_service_list+0x442>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002182:	2300      	movs	r3, #0
 8002184:	76fb      	strb	r3, [r7, #27]
 8002186:	e038      	b.n	80021fa <Si468x_dab_get_digital_service_list+0x43a>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 8002188:	7efb      	ldrb	r3, [r7, #27]
 800218a:	f103 0114 	add.w	r1, r3, #20
 800218e:	7fba      	ldrb	r2, [r7, #30]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	18ca      	adds	r2, r1, r3
 800219a:	7f7b      	ldrb	r3, [r7, #29]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	18d1      	adds	r1, r2, r3
 80021a0:	7f3b      	ldrb	r3, [r7, #28]
 80021a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021a4:	7892      	ldrb	r2, [r2, #2]
 80021a6:	441a      	add	r2, r3
 80021a8:	7efb      	ldrb	r3, [r7, #27]
 80021aa:	485a      	ldr	r0, [pc, #360]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80021ac:	5c44      	ldrb	r4, [r0, r1]
 80021ae:	495b      	ldr	r1, [pc, #364]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021b0:	2034      	movs	r0, #52	@ 0x34
 80021b2:	fb00 f202 	mul.w	r2, r0, r2
 80021b6:	440a      	add	r2, r1
 80021b8:	4413      	add	r3, r2
 80021ba:	4622      	mov	r2, r4
 80021bc:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80021be:	7f3b      	ldrb	r3, [r7, #28]
 80021c0:	4a55      	ldr	r2, [pc, #340]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021c2:	7892      	ldrb	r2, [r2, #2]
 80021c4:	441a      	add	r2, r3
 80021c6:	7efb      	ldrb	r3, [r7, #27]
 80021c8:	4954      	ldr	r1, [pc, #336]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021ca:	2034      	movs	r0, #52	@ 0x34
 80021cc:	fb00 f202 	mul.w	r2, r0, r2
 80021d0:	440a      	add	r2, r1
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b86      	cmp	r3, #134	@ 0x86
 80021d8:	d10c      	bne.n	80021f4 <Si468x_dab_get_digital_service_list+0x434>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 80021da:	7f3b      	ldrb	r3, [r7, #28]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021de:	7892      	ldrb	r2, [r2, #2]
 80021e0:	441a      	add	r2, r3
 80021e2:	7efb      	ldrb	r3, [r7, #27]
 80021e4:	494d      	ldr	r1, [pc, #308]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021e6:	2034      	movs	r0, #52	@ 0x34
 80021e8:	fb00 f202 	mul.w	r2, r0, r2
 80021ec:	440a      	add	r2, r1
 80021ee:	4413      	add	r3, r2
 80021f0:	226f      	movs	r2, #111	@ 0x6f
 80021f2:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80021f4:	7efb      	ldrb	r3, [r7, #27]
 80021f6:	3301      	adds	r3, #1
 80021f8:	76fb      	strb	r3, [r7, #27]
 80021fa:	7efb      	ldrb	r3, [r7, #27]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d9c3      	bls.n	8002188 <Si468x_dab_get_digital_service_list+0x3c8>
 8002200:	e026      	b.n	8002250 <Si468x_dab_get_digital_service_list+0x490>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 8002202:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <Si468x_dab_get_digital_service_list+0x560>)
 8002204:	463c      	mov	r4, r7
 8002206:	461d      	mov	r5, r3
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	7023      	strb	r3, [r4, #0]
 8002210:	f107 0311 	add.w	r3, r7, #17
 8002214:	2200      	movs	r2, #0
 8002216:	801a      	strh	r2, [r3, #0]
 8002218:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800221a:	2300      	movs	r3, #0
 800221c:	76bb      	strb	r3, [r7, #26]
 800221e:	e014      	b.n	800224a <Si468x_dab_get_digital_service_list+0x48a>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 8002220:	7eb9      	ldrb	r1, [r7, #26]
 8002222:	7f3b      	ldrb	r3, [r7, #28]
 8002224:	4a3c      	ldr	r2, [pc, #240]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002226:	7892      	ldrb	r2, [r2, #2]
 8002228:	441a      	add	r2, r3
 800222a:	7ebb      	ldrb	r3, [r7, #26]
 800222c:	3120      	adds	r1, #32
 800222e:	4439      	add	r1, r7
 8002230:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8002234:	4939      	ldr	r1, [pc, #228]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002236:	2034      	movs	r0, #52	@ 0x34
 8002238:	fb00 f202 	mul.w	r2, r0, r2
 800223c:	440a      	add	r2, r1
 800223e:	4413      	add	r3, r2
 8002240:	4622      	mov	r2, r4
 8002242:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002244:	7ebb      	ldrb	r3, [r7, #26]
 8002246:	3301      	adds	r3, #1
 8002248:	76bb      	strb	r3, [r7, #26]
 800224a:	7ebb      	ldrb	r3, [r7, #26]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d9e7      	bls.n	8002220 <Si468x_dab_get_digital_service_list+0x460>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 8002250:	2300      	movs	r3, #0
 8002252:	767b      	strb	r3, [r7, #25]
 8002254:	e032      	b.n	80022bc <Si468x_dab_get_digital_service_list+0x4fc>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002256:	7f3b      	ldrb	r3, [r7, #28]
 8002258:	4a2f      	ldr	r2, [pc, #188]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 800225a:	7892      	ldrb	r2, [r2, #2]
 800225c:	441a      	add	r2, r3
 800225e:	7e7b      	ldrb	r3, [r7, #25]
 8002260:	492e      	ldr	r1, [pc, #184]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002262:	201a      	movs	r0, #26
 8002264:	fb00 f202 	mul.w	r2, r0, r2
 8002268:	4413      	add	r3, r2
 800226a:	3314      	adds	r3, #20
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	440b      	add	r3, r1
 8002270:	2200      	movs	r2, #0
 8002272:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 8002274:	7fba      	ldrb	r2, [r7, #30]
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8002282:	7f7b      	ldrb	r3, [r7, #29]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 800228a:	5cd1      	ldrb	r1, [r2, r3]
 800228c:	7f3b      	ldrb	r3, [r7, #28]
 800228e:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002290:	7892      	ldrb	r2, [r2, #2]
 8002292:	441a      	add	r2, r3
 8002294:	7e7b      	ldrb	r3, [r7, #25]
 8002296:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800229a:	b2cc      	uxtb	r4, r1
 800229c:	491f      	ldr	r1, [pc, #124]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 800229e:	201a      	movs	r0, #26
 80022a0:	fb00 f202 	mul.w	r2, r0, r2
 80022a4:	4413      	add	r3, r2
 80022a6:	3314      	adds	r3, #20
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	4622      	mov	r2, r4
 80022ae:	709a      	strb	r2, [r3, #2]
			components_count++;
 80022b0:	7f7b      	ldrb	r3, [r7, #29]
 80022b2:	3301      	adds	r3, #1
 80022b4:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80022b6:	7e7b      	ldrb	r3, [r7, #25]
 80022b8:	3301      	adds	r3, #1
 80022ba:	767b      	strb	r3, [r7, #25]
 80022bc:	7f3b      	ldrb	r3, [r7, #28]
 80022be:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022c0:	7892      	ldrb	r2, [r2, #2]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a15      	ldr	r2, [pc, #84]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80022c6:	2134      	movs	r1, #52	@ 0x34
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3329      	adds	r3, #41	@ 0x29
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	7e7a      	ldrb	r2, [r7, #25]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3be      	bcc.n	8002256 <Si468x_dab_get_digital_service_list+0x496>
		}
		services_count++;
 80022d8:	7fbb      	ldrb	r3, [r7, #30]
 80022da:	3301      	adds	r3, #1
 80022dc:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 80022de:	7f3b      	ldrb	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	773b      	strb	r3, [r7, #28]
 80022e4:	7f3a      	ldrb	r2, [r7, #28]
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f4ff adac 	bcc.w	8001e46 <Si468x_dab_get_digital_service_list+0x86>
	}

	dab_management.total_services += number_of_services;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022fa:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022fe:	789a      	ldrb	r2, [r3, #2]
 8002300:	7ffb      	ldrb	r3, [r7, #31]
 8002302:	4413      	add	r3, r2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002308:	709a      	strb	r2, [r3, #2]
}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bdb0      	pop	{r4, r5, r7, pc}
 8002312:	bf00      	nop
 8002314:	200011a8 	.word	0x200011a8
 8002318:	20004bc4 	.word	0x20004bc4
 800231c:	20003774 	.word	0x20003774
 8002320:	0800dfd0 	.word	0x0800dfd0

08002324 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 800232e:	2101      	movs	r1, #1
 8002330:	482d      	ldr	r0, [pc, #180]	@ (80023e8 <Si468x_dab_start_digital_service+0xc4>)
 8002332:	f001 fc03 	bl	8003b3c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8002336:	4b2d      	ldr	r3, [pc, #180]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002338:	2281      	movs	r2, #129	@ 0x81
 800233a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800233c:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 8002342:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002344:	2200      	movs	r2, #0
 8002346:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002348:	4b28      	ldr	r3, [pc, #160]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800234a:	2200      	movs	r2, #0
 800234c:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002354:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800235e:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002368:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0e1b      	lsrs	r3, r3, #24
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002372:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800237a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002384:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800238e:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	0e1b      	lsrs	r3, r3, #24
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002398:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800239a:	4914      	ldr	r1, [pc, #80]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800239c:	200c      	movs	r0, #12
 800239e:	f7ff f9c7 	bl	8001730 <Si468x_write_command>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <Si468x_dab_start_digital_service+0xcc>)
 80023a8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f005 fa16 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80023b0:	4910      	ldr	r1, [pc, #64]	@ (80023f4 <Si468x_dab_start_digital_service+0xd0>)
 80023b2:	2005      	movs	r0, #5
 80023b4:	f7ff f9de 	bl	8001774 <Si468x_read_reply>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <Si468x_dab_start_digital_service+0xcc>)
 80023be:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <Si468x_dab_start_digital_service+0xd4>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80023ce:	2101      	movs	r1, #1
 80023d0:	480a      	ldr	r0, [pc, #40]	@ (80023fc <Si468x_dab_start_digital_service+0xd8>)
 80023d2:	f001 fbb3 	bl	8003b3c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 80023d6:	e003      	b.n	80023e0 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 80023d8:	2101      	movs	r1, #1
 80023da:	4809      	ldr	r0, [pc, #36]	@ (8002400 <Si468x_dab_start_digital_service+0xdc>)
 80023dc:	f001 fbae 	bl	8003b3c <send_debug_msg>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	0800dfe4 	.word	0x0800dfe4
 80023ec:	200001a8 	.word	0x200001a8
 80023f0:	20003510 	.word	0x20003510
 80023f4:	200011a8 	.word	0x200011a8
 80023f8:	200035fc 	.word	0x200035fc
 80023fc:	0800dac8 	.word	0x0800dac8
 8002400:	0800e020 	.word	0x0800e020

08002404 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800240e:	2101      	movs	r1, #1
 8002410:	484a      	ldr	r0, [pc, #296]	@ (800253c <Si468x_dab_get_ensemble_info+0x138>)
 8002412:	f001 fb93 	bl	8003b3c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002416:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 8002418:	22b4      	movs	r2, #180	@ 0xb4
 800241a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800241c:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 800241e:	2200      	movs	r2, #0
 8002420:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002422:	4947      	ldr	r1, [pc, #284]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 8002424:	2002      	movs	r0, #2
 8002426:	f7ff f983 	bl	8001730 <Si468x_write_command>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	4b45      	ldr	r3, [pc, #276]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002430:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8002432:	2002      	movs	r0, #2
 8002434:	f005 f9d2 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002438:	4943      	ldr	r1, [pc, #268]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 800243a:	2015      	movs	r0, #21
 800243c:	f7ff f99a 	bl	8001774 <Si468x_read_reply>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002446:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002448:	e012      	b.n	8002470 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 800244a:	493d      	ldr	r1, [pc, #244]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 800244c:	2002      	movs	r0, #2
 800244e:	f7ff f96f 	bl	8001730 <Si468x_write_command>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002458:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 800245a:	2002      	movs	r0, #2
 800245c:	f005 f9be 	bl	80077dc <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002460:	4939      	ldr	r1, [pc, #228]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002462:	2015      	movs	r0, #21
 8002464:	f7ff f986 	bl	8001774 <Si468x_read_reply>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 800246e:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002472:	799b      	ldrb	r3, [r3, #6]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0e8      	beq.n	800244a <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 8002478:	4b34      	ldr	r3, [pc, #208]	@ (800254c <Si468x_dab_get_ensemble_info+0x148>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002486:	2101      	movs	r1, #1
 8002488:	4831      	ldr	r0, [pc, #196]	@ (8002550 <Si468x_dab_get_ensemble_info+0x14c>)
 800248a:	f001 fb57 	bl	8003b3c <send_debug_msg>
		return 0;
 800248e:	2300      	movs	r3, #0
 8002490:	e050      	b.n	8002534 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002492:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002494:	795b      	ldrb	r3, [r3, #5]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	4a2b      	ldr	r2, [pc, #172]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 800249a:	7912      	ldrb	r2, [r2, #4]
 800249c:	4413      	add	r3, r2
 800249e:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d041      	beq.n	800252a <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80024a6:	2101      	movs	r1, #1
 80024a8:	482a      	ldr	r0, [pc, #168]	@ (8002554 <Si468x_dab_get_ensemble_info+0x150>)
 80024aa:	f001 fb47 	bl	8003b3c <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	b291      	uxth	r1, r2
 80024b6:	4a29      	ldr	r2, [pc, #164]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024b8:	015b      	lsls	r3, r3, #5
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 80024c0:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	4618      	mov	r0, r3
 80024c6:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	4924      	ldr	r1, [pc, #144]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024cc:	0143      	lsls	r3, r0, #5
 80024ce:	440b      	add	r3, r1
 80024d0:	3318      	adds	r3, #24
 80024d2:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024d6:	785b      	ldrb	r3, [r3, #1]
 80024d8:	4618      	mov	r0, r3
 80024da:	4b1f      	ldr	r3, [pc, #124]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024dc:	7b19      	ldrb	r1, [r3, #12]
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024e0:	0143      	lsls	r3, r0, #5
 80024e2:	4413      	add	r3, r2
 80024e4:	331c      	adds	r3, #28
 80024e6:	460a      	mov	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	e011      	b.n	8002514 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	1d9a      	adds	r2, r3, #6
 80024f4:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	461c      	mov	r4, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4912      	ldr	r1, [pc, #72]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 80024fe:	5c88      	ldrb	r0, [r1, r2]
 8002500:	4916      	ldr	r1, [pc, #88]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 8002502:	0162      	lsls	r2, r4, #5
 8002504:	440a      	add	r2, r1
 8002506:	4413      	add	r3, r2
 8002508:	3302      	adds	r3, #2
 800250a:	4602      	mov	r2, r0
 800250c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	3301      	adds	r3, #1
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d9ea      	bls.n	80024f0 <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 800251a:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	3301      	adds	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 8002524:	705a      	strb	r2, [r3, #1]
			return 1;
 8002526:	2301      	movs	r3, #1
 8002528:	e004      	b.n	8002534 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 800252a:	2101      	movs	r1, #1
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <Si468x_dab_get_ensemble_info+0x15c>)
 800252e:	f001 fb05 	bl	8003b3c <send_debug_msg>
			return 0;
 8002532:	2300      	movs	r3, #0
		}
	}
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	0800e040 	.word	0x0800e040
 8002540:	200001a8 	.word	0x200001a8
 8002544:	20003510 	.word	0x20003510
 8002548:	200011a8 	.word	0x200011a8
 800254c:	200035fc 	.word	0x200035fc
 8002550:	0800dac8 	.word	0x0800dac8
 8002554:	0800e07c 	.word	0x0800e07c
 8002558:	20004bc4 	.word	0x20004bc4
 800255c:	20003634 	.word	0x20003634
 8002560:	0800e08c 	.word	0x0800e08c

08002564 <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	b099      	sub	sp, #100	@ 0x64
 8002568:	af0a      	add	r7, sp, #40	@ 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 800256a:	2101      	movs	r1, #1
 800256c:	4887      	ldr	r0, [pc, #540]	@ (800278c <Si468x_dab_full_scan+0x228>)
 800256e:	f001 fae5 	bl	8003b3c <send_debug_msg>
	dab_management.total_services = 0;
 8002572:	4b87      	ldr	r3, [pc, #540]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 8002578:	4b85      	ldr	r3, [pc, #532]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800257a:	2200      	movs	r2, #0
 800257c:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 800257e:	4b84      	ldr	r3, [pc, #528]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002580:	2200      	movs	r2, #0
 8002582:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t fic_q_timeout = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t _scan_cancel_flag = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800259c:	e09f      	b.n	80026de <Si468x_dab_full_scan+0x17a>
	{
		_touch_coordinates = Touch_read();
 800259e:	f004 fd79 	bl	8007094 <Touch_read>
 80025a2:	4603      	mov	r3, r0
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80025a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d90c      	bls.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025ae:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80025b2:	d808      	bhi.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025b6:	2bc3      	cmp	r3, #195	@ 0xc3
 80025b8:	d905      	bls.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025bc:	2bea      	cmp	r3, #234	@ 0xea
 80025be:	d802      	bhi.n	80025c6 <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		}

		if(_scan_cancel_flag)
 80025c6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 808f 	bne.w	80026ee <Si468x_dab_full_scan+0x18a>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 80025d0:	2306      	movs	r3, #6
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 80025d6:	2396      	movs	r3, #150	@ 0x96
 80025d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		Si468x_dab_tune_freq(freq_index, USE_ANT_CAP);
 80025dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80025e0:	2101      	movs	r1, #1
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fabc 	bl	8001b60 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 80025e8:	463b      	mov	r3, r7
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fb90 	bl	8001d10 <Si468x_dab_digrad_status>
			valid_timeout--;
 80025f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025f4:	3b01      	subs	r3, #1
 80025f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if(!valid_timeout)
 80025fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002602:	2101      	movs	r1, #1
 8002604:	4863      	ldr	r0, [pc, #396]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 8002606:	f001 fa99 	bl	8003b3c <send_debug_msg>
				break;
 800260a:	e010      	b.n	800262e <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800260c:	2032      	movs	r0, #50	@ 0x32
 800260e:	f005 f8e5 	bl	80077dc <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 8002612:	4b61      	ldr	r3, [pc, #388]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0e3      	beq.n	80025e8 <Si468x_dab_full_scan+0x84>
 8002620:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0dc      	beq.n	80025e8 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 800262e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002632:	2b00      	cmp	r3, #0
 8002634:	d018      	beq.n	8002668 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002636:	463b      	mov	r3, r7
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fb69 	bl	8001d10 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 800263e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002642:	3b01      	subs	r3, #1
 8002644:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				if(!fic_q_timeout)
 8002648:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002650:	2101      	movs	r1, #1
 8002652:	4850      	ldr	r0, [pc, #320]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 8002654:	f001 fa72 	bl	8003b3c <send_debug_msg>
					break;
 8002658:	e006      	b.n	8002668 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800265a:	2032      	movs	r0, #50	@ 0x32
 800265c:	f005 f8be 	bl	80077dc <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 8002660:	4b4d      	ldr	r3, [pc, #308]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	2b31      	cmp	r3, #49	@ 0x31
 8002666:	d9e6      	bls.n	8002636 <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 8002668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01e      	beq.n	80026ae <Si468x_dab_full_scan+0x14a>
 8002670:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <Si468x_dab_full_scan+0x116>
 8002678:	e019      	b.n	80026ae <Si468x_dab_full_scan+0x14a>
		{
			do
			{
				Si468x_dab_get_event_status();
 800267a:	f000 fb11 	bl	8002ca0 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 800267e:	200a      	movs	r0, #10
 8002680:	f005 f8ac 	bl	80077dc <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 8002684:	4b45      	ldr	r3, [pc, #276]	@ (800279c <Si468x_dab_full_scan+0x238>)
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f3      	beq.n	800267a <Si468x_dab_full_scan+0x116>
 8002692:	4b42      	ldr	r3, [pc, #264]	@ (800279c <Si468x_dab_full_scan+0x238>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ec      	bne.n	800267a <Si468x_dab_full_scan+0x116>

			if(Si468x_dab_get_ensemble_info())
 80026a0:	f7ff feb0 	bl	8002404 <Si468x_dab_get_ensemble_info>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <Si468x_dab_full_scan+0x14a>
			{
				Si468x_dab_get_digital_service_list();
 80026aa:	f7ff fb89 	bl	8001dc0 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 80026ae:	4e3a      	ldr	r6, [pc, #232]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 80026b0:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 80026b2:	ac06      	add	r4, sp, #24
 80026b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80026ba:	466d      	mov	r5, sp
 80026bc:	f106 0410 	add.w	r4, r6, #16
 80026c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80026d0:	f002 f820 	bl	8004714 <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80026d4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80026d8:	3301      	adds	r3, #1
 80026da:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80026de:	4b2c      	ldr	r3, [pc, #176]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 80026e0:	7b5b      	ldrb	r3, [r3, #13]
 80026e2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80026e6:	429a      	cmp	r2, r3
 80026e8:	f4ff af59 	bcc.w	800259e <Si468x_dab_full_scan+0x3a>
 80026ec:	e000      	b.n	80026f0 <Si468x_dab_full_scan+0x18c>
			break;
 80026ee:	bf00      	nop
	}

	if(_scan_cancel_flag)
 80026f0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <Si468x_dab_full_scan+0x1a4>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 80026f8:	2101      	movs	r1, #1
 80026fa:	4829      	ldr	r0, [pc, #164]	@ (80027a0 <Si468x_dab_full_scan+0x23c>)
 80026fc:	f001 fa1e 	bl	8003b3c <send_debug_msg>
		restore_from_eeprom();
 8002700:	f000 fe32 	bl	8003368 <restore_from_eeprom>
		return 0;
 8002704:	2300      	movs	r3, #0
 8002706:	e1e8      	b.n	8002ada <Si468x_dab_full_scan+0x576>
	}

	else
	{
		eeprom_clear_scanning_data();
 8002708:	f003 f918 	bl	800593c <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 800270c:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <Si468x_dab_full_scan+0x1d8>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 8002714:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002716:	7819      	ldrb	r1, [r3, #0]
 8002718:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <Si468x_dab_full_scan+0x240>)
 800271e:	4822      	ldr	r0, [pc, #136]	@ (80027a8 <Si468x_dab_full_scan+0x244>)
 8002720:	f003 f970 	bl	8005a04 <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 8002724:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002726:	2200      	movs	r2, #0
 8002728:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800272c:	2200      	movs	r2, #0
 800272e:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8002730:	2201      	movs	r2, #1
 8002732:	491e      	ldr	r1, [pc, #120]	@ (80027ac <Si468x_dab_full_scan+0x248>)
 8002734:	f240 1007 	movw	r0, #263	@ 0x107
 8002738:	f003 f8d8 	bl	80058ec <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 800273c:	2100      	movs	r1, #0
 800273e:	481c      	ldr	r0, [pc, #112]	@ (80027b0 <Si468x_dab_full_scan+0x24c>)
 8002740:	f001 f9fc 	bl	8003b3c <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	220a      	movs	r2, #10
 800274a:	491a      	ldr	r1, [pc, #104]	@ (80027b4 <Si468x_dab_full_scan+0x250>)
 800274c:	4618      	mov	r0, r3
 800274e:	f00b f817 	bl	800d780 <itoa>
 8002752:	4603      	mov	r3, r0
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f9f0 	bl	8003b3c <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800275c:	2101      	movs	r1, #1
 800275e:	4816      	ldr	r0, [pc, #88]	@ (80027b8 <Si468x_dab_full_scan+0x254>)
 8002760:	f001 f9ec 	bl	8003b3c <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8002764:	2100      	movs	r1, #0
 8002766:	4815      	ldr	r0, [pc, #84]	@ (80027bc <Si468x_dab_full_scan+0x258>)
 8002768:	f001 f9e8 	bl	8003b3c <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 800276c:	2100      	movs	r1, #0
 800276e:	4814      	ldr	r0, [pc, #80]	@ (80027c0 <Si468x_dab_full_scan+0x25c>)
 8002770:	f001 f9e4 	bl	8003b3c <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002774:	2100      	movs	r1, #0
 8002776:	4813      	ldr	r0, [pc, #76]	@ (80027c4 <Si468x_dab_full_scan+0x260>)
 8002778:	f001 f9e0 	bl	8003b3c <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 800277c:	2101      	movs	r1, #1
 800277e:	4812      	ldr	r0, [pc, #72]	@ (80027c8 <Si468x_dab_full_scan+0x264>)
 8002780:	f001 f9dc 	bl	8003b3c <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800278a:	e07c      	b.n	8002886 <Si468x_dab_full_scan+0x322>
 800278c:	0800e0a0 	.word	0x0800e0a0
 8002790:	20004bc4 	.word	0x20004bc4
 8002794:	0800e08c 	.word	0x0800e08c
 8002798:	200035d4 	.word	0x200035d4
 800279c:	20003600 	.word	0x20003600
 80027a0:	0800e0dc 	.word	0x0800e0dc
 80027a4:	20003634 	.word	0x20003634
 80027a8:	20003774 	.word	0x20003774
 80027ac:	20004bc8 	.word	0x20004bc8
 80027b0:	0800e0f0 	.word	0x0800e0f0
 80027b4:	200034d0 	.word	0x200034d0
 80027b8:	0800e104 	.word	0x0800e104
 80027bc:	0800e138 	.word	0x0800e138
 80027c0:	0800e144 	.word	0x0800e144
 80027c4:	0800e158 	.word	0x0800e158
 80027c8:	0800e168 	.word	0x0800e168
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80027cc:	2100      	movs	r1, #0
 80027ce:	48c5      	ldr	r0, [pc, #788]	@ (8002ae4 <Si468x_dab_full_scan+0x580>)
 80027d0:	f001 f9b4 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80027d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027d8:	3301      	adds	r3, #1
 80027da:	220a      	movs	r2, #10
 80027dc:	49c2      	ldr	r1, [pc, #776]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80027de:	4618      	mov	r0, r3
 80027e0:	f00a ffce 	bl	800d780 <itoa>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 f9a7 	bl	8003b3c <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 80027ee:	2100      	movs	r1, #0
 80027f0:	48be      	ldr	r0, [pc, #760]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 80027f2:	f001 f9a3 	bl	8003b3c <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80027f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027fa:	015b      	lsls	r3, r3, #5
 80027fc:	4abc      	ldr	r2, [pc, #752]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 80027fe:	4413      	add	r3, r2
 8002800:	3302      	adds	r3, #2
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f001 f999 	bl	8003b3c <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 800280a:	2100      	movs	r1, #0
 800280c:	48b5      	ldr	r0, [pc, #724]	@ (8002ae4 <Si468x_dab_full_scan+0x580>)
 800280e:	f001 f995 	bl	8003b3c <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002812:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002816:	4ab6      	ldr	r2, [pc, #728]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 8002818:	015b      	lsls	r3, r3, #5
 800281a:	4413      	add	r3, r2
 800281c:	3318      	adds	r3, #24
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	220a      	movs	r2, #10
 8002822:	49b1      	ldr	r1, [pc, #708]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002824:	4618      	mov	r0, r3
 8002826:	f00a ffab 	bl	800d780 <itoa>
 800282a:	4603      	mov	r3, r0
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f001 f984 	bl	8003b3c <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002834:	2100      	movs	r1, #0
 8002836:	48af      	ldr	r0, [pc, #700]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 8002838:	f001 f980 	bl	8003b3c <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 800283c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002840:	4aab      	ldr	r2, [pc, #684]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	4413      	add	r3, r2
 8002846:	331c      	adds	r3, #28
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	4baa      	ldr	r3, [pc, #680]	@ (8002af8 <Si468x_dab_full_scan+0x594>)
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f001 f971 	bl	8003b3c <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 800285a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800285e:	4aa4      	ldr	r2, [pc, #656]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 8002860:	015b      	lsls	r3, r3, #5
 8002862:	4413      	add	r3, r2
 8002864:	331c      	adds	r3, #28
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b13      	cmp	r3, #19
 800286a:	d803      	bhi.n	8002874 <Si468x_dab_full_scan+0x310>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800286c:	2100      	movs	r1, #0
 800286e:	48a3      	ldr	r0, [pc, #652]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 8002870:	f001 f964 	bl	8003b3c <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 8002874:	2101      	movs	r1, #1
 8002876:	48a2      	ldr	r0, [pc, #648]	@ (8002b00 <Si468x_dab_full_scan+0x59c>)
 8002878:	f001 f960 	bl	8003b3c <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 800287c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002880:	3301      	adds	r3, #1
 8002882:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002886:	4b9f      	ldr	r3, [pc, #636]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800288e:	429a      	cmp	r2, r3
 8002890:	d39c      	bcc.n	80027cc <Si468x_dab_full_scan+0x268>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002892:	2101      	movs	r1, #1
 8002894:	489c      	ldr	r0, [pc, #624]	@ (8002b08 <Si468x_dab_full_scan+0x5a4>)
 8002896:	f001 f951 	bl	8003b3c <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 800289a:	2100      	movs	r1, #0
 800289c:	489b      	ldr	r0, [pc, #620]	@ (8002b0c <Si468x_dab_full_scan+0x5a8>)
 800289e:	f001 f94d 	bl	8003b3c <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80028a2:	4b98      	ldr	r3, [pc, #608]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	220a      	movs	r2, #10
 80028a8:	498f      	ldr	r1, [pc, #572]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	f00a ff68 	bl	800d780 <itoa>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f941 	bl	8003b3c <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80028ba:	2101      	movs	r1, #1
 80028bc:	4894      	ldr	r0, [pc, #592]	@ (8002b10 <Si468x_dab_full_scan+0x5ac>)
 80028be:	f001 f93d 	bl	8003b3c <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80028c2:	2101      	movs	r1, #1
 80028c4:	4893      	ldr	r0, [pc, #588]	@ (8002b14 <Si468x_dab_full_scan+0x5b0>)
 80028c6:	f001 f939 	bl	8003b3c <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80028d0:	e0f7      	b.n	8002ac2 <Si468x_dab_full_scan+0x55e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80028d2:	2100      	movs	r1, #0
 80028d4:	4883      	ldr	r0, [pc, #524]	@ (8002ae4 <Si468x_dab_full_scan+0x580>)
 80028d6:	f001 f931 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80028da:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028de:	3301      	adds	r3, #1
 80028e0:	220a      	movs	r2, #10
 80028e2:	4981      	ldr	r1, [pc, #516]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80028e4:	4618      	mov	r0, r3
 80028e6:	f00a ff4b 	bl	800d780 <itoa>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f924 	bl	8003b3c <send_debug_msg>
			if((services_index + 1) < 10)
 80028f4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d803      	bhi.n	8002904 <Si468x_dab_full_scan+0x3a0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80028fc:	2100      	movs	r1, #0
 80028fe:	487f      	ldr	r0, [pc, #508]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 8002900:	f001 f91c 	bl	8003b3c <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002904:	2100      	movs	r1, #0
 8002906:	4884      	ldr	r0, [pc, #528]	@ (8002b18 <Si468x_dab_full_scan+0x5b4>)
 8002908:	f001 f918 	bl	8003b3c <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 800290c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002910:	2234      	movs	r2, #52	@ 0x34
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a81      	ldr	r2, [pc, #516]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002918:	4413      	add	r3, r2
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f90d 	bl	8003b3c <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002922:	2100      	movs	r1, #0
 8002924:	487e      	ldr	r0, [pc, #504]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002926:	f001 f909 	bl	8003b3c <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002930:	e021      	b.n	8002976 <Si468x_dab_full_scan+0x412>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002932:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002936:	4a6e      	ldr	r2, [pc, #440]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 8002938:	015b      	lsls	r3, r3, #5
 800293a:	4413      	add	r3, r2
 800293c:	331c      	adds	r3, #28
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002944:	4975      	ldr	r1, [pc, #468]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002946:	2034      	movs	r0, #52	@ 0x34
 8002948:	fb00 f303 	mul.w	r3, r0, r3
 800294c:	440b      	add	r3, r1
 800294e:	3328      	adds	r3, #40	@ 0x28
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d10a      	bne.n	800296c <Si468x_dab_full_scan+0x408>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8002956:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	4a64      	ldr	r2, [pc, #400]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 800295e:	4413      	add	r3, r2
 8002960:	3302      	adds	r3, #2
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f001 f8e9 	bl	8003b3c <send_debug_msg>
					break;
 800296a:	e00a      	b.n	8002982 <Si468x_dab_full_scan+0x41e>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800296c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002970:	3301      	adds	r3, #1
 8002972:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002976:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800297e:	429a      	cmp	r2, r3
 8002980:	d3d7      	bcc.n	8002932 <Si468x_dab_full_scan+0x3ce>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002982:	2100      	movs	r1, #0
 8002984:	4866      	ldr	r0, [pc, #408]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002986:	f001 f8d9 	bl	8003b3c <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800298a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800298e:	4a63      	ldr	r2, [pc, #396]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002990:	2134      	movs	r1, #52	@ 0x34
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3324      	adds	r3, #36	@ 0x24
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	220a      	movs	r2, #10
 800299e:	4952      	ldr	r1, [pc, #328]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f00a feed 	bl	800d780 <itoa>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 f8c6 	bl	8003b3c <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80029b0:	2100      	movs	r1, #0
 80029b2:	4850      	ldr	r0, [pc, #320]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 80029b4:	f001 f8c2 	bl	8003b3c <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80029b8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029bc:	4a57      	ldr	r2, [pc, #348]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 80029be:	2134      	movs	r1, #52	@ 0x34
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3328      	adds	r3, #40	@ 0x28
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <Si468x_dab_full_scan+0x594>)
 80029ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f8b1 	bl	8003b3c <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 80029da:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029de:	4a4f      	ldr	r2, [pc, #316]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 80029e0:	2134      	movs	r1, #52	@ 0x34
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3328      	adds	r3, #40	@ 0x28
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b13      	cmp	r3, #19
 80029ee:	d803      	bhi.n	80029f8 <Si468x_dab_full_scan+0x494>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80029f0:	2100      	movs	r1, #0
 80029f2:	4842      	ldr	r0, [pc, #264]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 80029f4:	f001 f8a2 	bl	8003b3c <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80029f8:	2100      	movs	r1, #0
 80029fa:	4847      	ldr	r0, [pc, #284]	@ (8002b18 <Si468x_dab_full_scan+0x5b4>)
 80029fc:	f001 f89e 	bl	8003b3c <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002a00:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a04:	4a45      	ldr	r2, [pc, #276]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a06:	2134      	movs	r1, #52	@ 0x34
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3315      	adds	r3, #21
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	220a      	movs	r2, #10
 8002a14:	4934      	ldr	r1, [pc, #208]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002a16:	4618      	mov	r0, r3
 8002a18:	f00a feb2 	bl	800d780 <itoa>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 f88b 	bl	8003b3c <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8002a26:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a2c:	2134      	movs	r1, #52	@ 0x34
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3315      	adds	r3, #21
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	d803      	bhi.n	8002a44 <Si468x_dab_full_scan+0x4e0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	482f      	ldr	r0, [pc, #188]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 8002a40:	f001 f87c 	bl	8003b3c <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8002a44:	2100      	movs	r1, #0
 8002a46:	4837      	ldr	r0, [pc, #220]	@ (8002b24 <Si468x_dab_full_scan+0x5c0>)
 8002a48:	f001 f878 	bl	8003b3c <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4836      	ldr	r0, [pc, #216]	@ (8002b28 <Si468x_dab_full_scan+0x5c4>)
 8002a50:	f001 f874 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a54:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a58:	4a30      	ldr	r2, [pc, #192]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a5a:	2134      	movs	r1, #52	@ 0x34
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3320      	adds	r3, #32
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	491f      	ldr	r1, [pc, #124]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f00a fe88 	bl	800d780 <itoa>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f861 	bl	8003b3c <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4826      	ldr	r0, [pc, #152]	@ (8002b18 <Si468x_dab_full_scan+0x5b4>)
 8002a7e:	f001 f85d 	bl	8003b3c <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002a82:	2100      	movs	r1, #0
 8002a84:	4828      	ldr	r0, [pc, #160]	@ (8002b28 <Si468x_dab_full_scan+0x5c4>)
 8002a86:	f001 f859 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a8a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a8e:	4a23      	ldr	r2, [pc, #140]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a90:	2134      	movs	r1, #52	@ 0x34
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	332a      	adds	r3, #42	@ 0x2a
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	4912      	ldr	r1, [pc, #72]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f00a fe6d 	bl	800d780 <itoa>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f846 	bl	8003b3c <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	481e      	ldr	r0, [pc, #120]	@ (8002b2c <Si468x_dab_full_scan+0x5c8>)
 8002ab4:	f001 f842 	bl	8003b3c <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8002ab8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002abc:	3301      	adds	r3, #1
 8002abe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002aca:	429a      	cmp	r2, r3
 8002acc:	f4ff af01 	bcc.w	80028d2 <Si468x_dab_full_scan+0x36e>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	480f      	ldr	r0, [pc, #60]	@ (8002b10 <Si468x_dab_full_scan+0x5ac>)
 8002ad4:	f001 f832 	bl	8003b3c <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 8002ad8:	2301      	movs	r3, #1
	}
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	373c      	adds	r7, #60	@ 0x3c
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	0800e178 	.word	0x0800e178
 8002ae8:	200034d0 	.word	0x200034d0
 8002aec:	0800e17c 	.word	0x0800e17c
 8002af0:	20003634 	.word	0x20003634
 8002af4:	0800e188 	.word	0x0800e188
 8002af8:	20000008 	.word	0x20000008
 8002afc:	0800e190 	.word	0x0800e190
 8002b00:	0800e194 	.word	0x0800e194
 8002b04:	20004bc4 	.word	0x20004bc4
 8002b08:	0800e104 	.word	0x0800e104
 8002b0c:	0800e19c 	.word	0x0800e19c
 8002b10:	0800e1b0 	.word	0x0800e1b0
 8002b14:	0800e21c 	.word	0x0800e21c
 8002b18:	0800e288 	.word	0x0800e288
 8002b1c:	20003774 	.word	0x20003774
 8002b20:	0800e290 	.word	0x0800e290
 8002b24:	0800e294 	.word	0x0800e294
 8002b28:	0800e29c 	.word	0x0800e29c
 8002b2c:	0800e2a0 	.word	0x0800e2a0

08002b30 <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002b38:	2101      	movs	r1, #1
 8002b3a:	484d      	ldr	r0, [pc, #308]	@ (8002c70 <Si468x_dab_get_audio_info+0x140>)
 8002b3c:	f000 fffe 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002b40:	4b4c      	ldr	r3, [pc, #304]	@ (8002c74 <Si468x_dab_get_audio_info+0x144>)
 8002b42:	22bd      	movs	r2, #189	@ 0xbd
 8002b44:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002b46:	4b4b      	ldr	r3, [pc, #300]	@ (8002c74 <Si468x_dab_get_audio_info+0x144>)
 8002b48:	2203      	movs	r2, #3
 8002b4a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002b4c:	4949      	ldr	r1, [pc, #292]	@ (8002c74 <Si468x_dab_get_audio_info+0x144>)
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f7fe fdee 	bl	8001730 <Si468x_write_command>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <Si468x_dab_get_audio_info+0x148>)
 8002b5a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f004 fe3d 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002b62:	4946      	ldr	r1, [pc, #280]	@ (8002c7c <Si468x_dab_get_audio_info+0x14c>)
 8002b64:	2014      	movs	r0, #20
 8002b66:	f7fe fe05 	bl	8001774 <Si468x_read_reply>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b42      	ldr	r3, [pc, #264]	@ (8002c78 <Si468x_dab_get_audio_info+0x148>)
 8002b70:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info));
 8002b72:	4a43      	ldr	r2, [pc, #268]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002b74:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <Si468x_dab_get_audio_info+0x14c>)
 8002b76:	4614      	mov	r4, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002b80:	2100      	movs	r1, #0
 8002b82:	4840      	ldr	r0, [pc, #256]	@ (8002c84 <Si468x_dab_get_audio_info+0x154>)
 8002b84:	f000 ffda 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002b88:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	220a      	movs	r2, #10
 8002b8e:	493e      	ldr	r1, [pc, #248]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002b90:	4618      	mov	r0, r3
 8002b92:	f00a fdf5 	bl	800d780 <itoa>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 ffce 	bl	8003b3c <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	483a      	ldr	r0, [pc, #232]	@ (8002c8c <Si468x_dab_get_audio_info+0x15c>)
 8002ba4:	f000 ffca 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002ba8:	4b35      	ldr	r3, [pc, #212]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002baa:	885b      	ldrh	r3, [r3, #2]
 8002bac:	220a      	movs	r2, #10
 8002bae:	4936      	ldr	r1, [pc, #216]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f00a fde5 	bl	800d780 <itoa>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 ffbe 	bl	8003b3c <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4833      	ldr	r0, [pc, #204]	@ (8002c90 <Si468x_dab_get_audio_info+0x160>)
 8002bc4:	f000 ffba 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002bca:	791b      	ldrb	r3, [r3, #4]
 8002bcc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	220a      	movs	r2, #10
 8002bd4:	492c      	ldr	r1, [pc, #176]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f00a fdd2 	bl	800d780 <itoa>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 ffab 	bl	8003b3c <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002be6:	2100      	movs	r1, #0
 8002be8:	482a      	ldr	r0, [pc, #168]	@ (8002c94 <Si468x_dab_get_audio_info+0x164>)
 8002bea:	f000 ffa7 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002bee:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002bf0:	791b      	ldrb	r3, [r3, #4]
 8002bf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	220a      	movs	r2, #10
 8002bfa:	4923      	ldr	r1, [pc, #140]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f00a fdbf 	bl	800d780 <itoa>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 ff98 	bl	8003b3c <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4822      	ldr	r0, [pc, #136]	@ (8002c98 <Si468x_dab_get_audio_info+0x168>)
 8002c10:	f000 ff94 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002c16:	791b      	ldrb	r3, [r3, #4]
 8002c18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	220a      	movs	r2, #10
 8002c20:	4919      	ldr	r1, [pc, #100]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f00a fdac 	bl	800d780 <itoa>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 ff85 	bl	8003b3c <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002c32:	2100      	movs	r1, #0
 8002c34:	4819      	ldr	r0, [pc, #100]	@ (8002c9c <Si468x_dab_get_audio_info+0x16c>)
 8002c36:	f000 ff81 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002c3a:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	220a      	movs	r2, #10
 8002c46:	4910      	ldr	r1, [pc, #64]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f00a fd99 	bl	800d780 <itoa>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 ff72 	bl	8003b3c <send_debug_msg>

	return dab_audio_info;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a09      	ldr	r2, [pc, #36]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	4613      	mov	r3, r2
 8002c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	0800e2ac 	.word	0x0800e2ac
 8002c74:	200001a8 	.word	0x200001a8
 8002c78:	20003510 	.word	0x20003510
 8002c7c:	200011a8 	.word	0x200011a8
 8002c80:	20003610 	.word	0x20003610
 8002c84:	0800e2e8 	.word	0x0800e2e8
 8002c88:	200034d0 	.word	0x200034d0
 8002c8c:	0800e2f4 	.word	0x0800e2f4
 8002c90:	0800e304 	.word	0x0800e304
 8002c94:	0800e318 	.word	0x0800e318
 8002c98:	0800e324 	.word	0x0800e324
 8002c9c:	0800e330 	.word	0x0800e330

08002ca0 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4811      	ldr	r0, [pc, #68]	@ (8002cec <Si468x_dab_get_event_status+0x4c>)
 8002ca8:	f000 ff48 	bl	8003b3c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <Si468x_dab_get_event_status+0x50>)
 8002cae:	22b3      	movs	r2, #179	@ 0xb3
 8002cb0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <Si468x_dab_get_event_status+0x50>)
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002cb8:	490d      	ldr	r1, [pc, #52]	@ (8002cf0 <Si468x_dab_get_event_status+0x50>)
 8002cba:	2002      	movs	r0, #2
 8002cbc:	f7fe fd38 	bl	8001730 <Si468x_write_command>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <Si468x_dab_get_event_status+0x54>)
 8002cc6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f004 fd87 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002cce:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <Si468x_dab_get_event_status+0x58>)
 8002cd0:	2009      	movs	r0, #9
 8002cd2:	f7fe fd4f 	bl	8001774 <Si468x_read_reply>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <Si468x_dab_get_event_status+0x54>)
 8002cdc:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <Si468x_dab_get_event_status+0x58>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4a06      	ldr	r2, [pc, #24]	@ (8002cfc <Si468x_dab_get_event_status+0x5c>)
 8002ce4:	6013      	str	r3, [r2, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	0800e340 	.word	0x0800e340
 8002cf0:	200001a8 	.word	0x200001a8
 8002cf4:	20003510 	.word	0x20003510
 8002cf8:	200011a8 	.word	0x200011a8
 8002cfc:	20003600 	.word	0x20003600

08002d00 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	484a      	ldr	r0, [pc, #296]	@ (8002e38 <Si468x_dab_get_component_info+0x138>)
 8002d10:	f000 ff14 	bl	8003b3c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002d14:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d16:	22bb      	movs	r2, #187	@ 0xbb
 8002d18:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002d1a:	4b48      	ldr	r3, [pc, #288]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002d20:	4b46      	ldr	r3, [pc, #280]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002d26:	4b45      	ldr	r3, [pc, #276]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b42      	ldr	r3, [pc, #264]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d32:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b40      	ldr	r3, [pc, #256]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d3c:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b3d      	ldr	r3, [pc, #244]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d46:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0e1b      	lsrs	r3, r3, #24
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d50:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002d52:	4a3a      	ldr	r2, [pc, #232]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	121b      	asrs	r3, r3, #8
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d60:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	141b      	asrs	r3, r3, #16
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b34      	ldr	r3, [pc, #208]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d6a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	161b      	asrs	r3, r3, #24
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d74:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002d76:	4931      	ldr	r1, [pc, #196]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d78:	200c      	movs	r0, #12
 8002d7a:	f7fe fcd9 	bl	8001730 <Si468x_write_command>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <Si468x_dab_get_component_info+0x140>)
 8002d84:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002d86:	2005      	movs	r0, #5
 8002d88:	f004 fd28 	bl	80077dc <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002d8c:	492d      	ldr	r1, [pc, #180]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002d8e:	201a      	movs	r0, #26
 8002d90:	f7fe fcf0 	bl	8001774 <Si468x_read_reply>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <Si468x_dab_get_component_info+0x140>)
 8002d9a:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002d9c:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002d9e:	799b      	ldrb	r3, [r3, #6]
 8002da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002da4:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e00c      	b.n	8002dc6 <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002dac:	7ffb      	ldrb	r3, [r7, #31]
 8002dae:	f103 0208 	add.w	r2, r3, #8
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	4923      	ldr	r1, [pc, #140]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002db6:	5c8a      	ldrb	r2, [r1, r2]
 8002db8:	3320      	adds	r3, #32
 8002dba:	443b      	add	r3, r7
 8002dbc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002dc0:	7ffb      	ldrb	r3, [r7, #31]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d9ef      	bls.n	8002dac <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002dce:	7e1b      	ldrb	r3, [r3, #24]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002dd4:	7e5b      	ldrb	r3, [r3, #25]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002dde:	2100      	movs	r1, #0
 8002de0:	4819      	ldr	r0, [pc, #100]	@ (8002e48 <Si468x_dab_get_component_info+0x148>)
 8002de2:	f000 feab 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002de6:	7fbb      	ldrb	r3, [r7, #30]
 8002de8:	220a      	movs	r2, #10
 8002dea:	4918      	ldr	r1, [pc, #96]	@ (8002e4c <Si468x_dab_get_component_info+0x14c>)
 8002dec:	4618      	mov	r0, r3
 8002dee:	f00a fcc7 	bl	800d780 <itoa>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fea0 	bl	8003b3c <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4814      	ldr	r0, [pc, #80]	@ (8002e50 <Si468x_dab_get_component_info+0x150>)
 8002e00:	f000 fe9c 	bl	8003b3c <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fe96 	bl	8003b3c <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002e10:	2100      	movs	r1, #0
 8002e12:	4810      	ldr	r0, [pc, #64]	@ (8002e54 <Si468x_dab_get_component_info+0x154>)
 8002e14:	f000 fe92 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002e18:	8bbb      	ldrh	r3, [r7, #28]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	490b      	ldr	r1, [pc, #44]	@ (8002e4c <Si468x_dab_get_component_info+0x14c>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f00a fcae 	bl	800d780 <itoa>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fe87 	bl	8003b3c <send_debug_msg>

}
 8002e2e:	bf00      	nop
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	0800e380 	.word	0x0800e380
 8002e3c:	200001a8 	.word	0x200001a8
 8002e40:	20003510 	.word	0x20003510
 8002e44:	200011a8 	.word	0x200011a8
 8002e48:	0800e3b4 	.word	0x0800e3b4
 8002e4c:	200034d0 	.word	0x200034d0
 8002e50:	0800e3c0 	.word	0x0800e3c0
 8002e54:	0800e3d4 	.word	0x0800e3d4

08002e58 <Si468x_dab_get_digital_service_data>:

void Si468x_dab_get_digital_service_data()
{
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002e5e:	49aa      	ldr	r1, [pc, #680]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e60:	2005      	movs	r0, #5
 8002e62:	f7fe fc87 	bl	8001774 <Si468x_read_reply>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4ba8      	ldr	r3, [pc, #672]	@ (800310c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e6c:	701a      	strb	r2, [r3, #0]

	if(rd_reply.d_srv_int)
 8002e6e:	4ba8      	ldr	r3, [pc, #672]	@ (8003110 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8140 	beq.w	80030fe <Si468x_dab_get_digital_service_data+0x2a6>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_DATA;
 8002e7e:	4ba5      	ldr	r3, [pc, #660]	@ (8003114 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002e80:	2284      	movs	r2, #132	@ 0x84
 8002e82:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x01;	//+1 = ACK, +16 = STATUS_ONLY
 8002e84:	4ba3      	ldr	r3, [pc, #652]	@ (8003114 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002e8a:	49a2      	ldr	r1, [pc, #648]	@ (8003114 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7fe fc4f 	bl	8001730 <Si468x_write_command>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b9d      	ldr	r3, [pc, #628]	@ (800310c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e98:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8002e9a:	2005      	movs	r0, #5
 8002e9c:	f004 fc9e 	bl	80077dc <HAL_Delay>

		//first read only header to obtain payload data size
		status = Si468x_read_reply(30, dab_spi_rx_buffer);
 8002ea0:	4999      	ldr	r1, [pc, #612]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002ea2:	201e      	movs	r0, #30
 8002ea4:	f7fe fc66 	bl	8001774 <Si468x_read_reply>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b97      	ldr	r3, [pc, #604]	@ (800310c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002eae:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t*)&dab_service_data_reply_header, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_service_data_reply_header));
 8002eb0:	4a99      	ldr	r2, [pc, #612]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002eb2:	4b95      	ldr	r3, [pc, #596]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002eb4:	4615      	mov	r5, r2
 8002eb6:	1d1c      	adds	r4, r3, #4
 8002eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	602b      	str	r3, [r5, #0]


//		if(dab_service_data_reply_header.buff_count)
		{
			send_debug_msg("-----------Getting DAB Service Data-------------", CRLF_SEND);
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4896      	ldr	r0, [pc, #600]	@ (800311c <Si468x_dab_get_digital_service_data+0x2c4>)
 8002ec4:	f000 fe3a 	bl	8003b3c <send_debug_msg>
//			send_debug_msg(itoa(dab_service_data_reply_header.num_segs, itoa_buffer, 10), CRLF_SEND);


			//second read full data when we know data length

			if(!dab_service_data_reply_header.dsrv_ovfl_int)
 8002ec8:	4b93      	ldr	r3, [pc, #588]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 8113 	bne.w	80030fe <Si468x_dab_get_digital_service_data+0x2a6>
			{
				status = Si468x_read_reply(24 + dab_service_data_reply_header.byte_count, dab_spi_rx_buffer);
 8002ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002eda:	89db      	ldrh	r3, [r3, #14]
 8002edc:	3318      	adds	r3, #24
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4989      	ldr	r1, [pc, #548]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fc46 	bl	8001774 <Si468x_read_reply>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b87      	ldr	r3, [pc, #540]	@ (800310c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002eee:	701a      	strb	r2, [r3, #0]

				if(dab_service_data_reply_header.dsc_ty == 60)
 8002ef0:	4b89      	ldr	r3, [pc, #548]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002ef2:	78db      	ldrb	r3, [r3, #3]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b3c      	cmp	r3, #60	@ 0x3c
 8002efc:	f040 80a5 	bne.w	800304a <Si468x_dab_get_digital_service_data+0x1f2>
				{
					send_debug_msg("Slideshow Data: ", CRLF_SEND);
 8002f00:	2101      	movs	r1, #1
 8002f02:	4887      	ldr	r0, [pc, #540]	@ (8003120 <Si468x_dab_get_digital_service_data+0x2c8>)
 8002f04:	f000 fe1a 	bl	8003b3c <send_debug_msg>
					uint32_t body_size;
					uint16_t header_size;
					uint8_t content_type;
					uint16_t content_sub_type;

					body_size = (dab_spi_rx_buffer[24 + 0] << 20) + (dab_spi_rx_buffer[24 + 1] << 12) + (dab_spi_rx_buffer[24 + 2] << 4) + ((dab_spi_rx_buffer[24 + 3] && 0xF0) >> 4);
 8002f08:	4b7f      	ldr	r3, [pc, #508]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f0a:	7e1b      	ldrb	r3, [r3, #24]
 8002f0c:	051a      	lsls	r2, r3, #20
 8002f0e:	4b7e      	ldr	r3, [pc, #504]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f10:	7e5b      	ldrb	r3, [r3, #25]
 8002f12:	031b      	lsls	r3, r3, #12
 8002f14:	441a      	add	r2, r3
 8002f16:	4b7c      	ldr	r3, [pc, #496]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f18:	7e9b      	ldrb	r3, [r3, #26]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]

					header_size = ((dab_spi_rx_buffer[24 + 3] && 0x0F) << 9) + (dab_spi_rx_buffer[24 + 4] << 1) + ((dab_spi_rx_buffer[24 + 5] && 0x80) >> 7);
 8002f20:	4b79      	ldr	r3, [pc, #484]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f22:	7edb      	ldrb	r3, [r3, #27]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <Si468x_dab_get_digital_service_data+0xd6>
 8002f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2c:	e000      	b.n	8002f30 <Si468x_dab_get_digital_service_data+0xd8>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b75      	ldr	r3, [pc, #468]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f32:	7f1b      	ldrb	r3, [r3, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]

					content_type = (dab_spi_rx_buffer[24 + 5] && 0x7E) >> 1;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	717b      	strb	r3, [r7, #5]

					content_sub_type = ((dab_spi_rx_buffer[24 + 5] && 0x01) << 8) + (dab_spi_rx_buffer[24 + 6]);
 8002f40:	4b71      	ldr	r3, [pc, #452]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f42:	7f5b      	ldrb	r3, [r3, #29]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <Si468x_dab_get_digital_service_data+0xf6>
 8002f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f4c:	e000      	b.n	8002f50 <Si468x_dab_get_digital_service_data+0xf8>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	4a6d      	ldr	r2, [pc, #436]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f52:	7f92      	ldrb	r2, [r2, #30]
 8002f54:	4413      	add	r3, r2
 8002f56:	807b      	strh	r3, [r7, #2]

					for(uint16_t i = 0; i < 4096; i++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	82fb      	strh	r3, [r7, #22]
 8002f5c:	e006      	b.n	8002f6c <Si468x_dab_get_digital_service_data+0x114>
					{
						slideshow_data[i] = 0;
 8002f5e:	8afb      	ldrh	r3, [r7, #22]
 8002f60:	4a70      	ldr	r2, [pc, #448]	@ (8003124 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002f62:	2100      	movs	r1, #0
 8002f64:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < 4096; i++)
 8002f66:	8afb      	ldrh	r3, [r7, #22]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	82fb      	strh	r3, [r7, #22]
 8002f6c:	8afb      	ldrh	r3, [r7, #22]
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f72:	d3f4      	bcc.n	8002f5e <Si468x_dab_get_digital_service_data+0x106>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	82bb      	strh	r3, [r7, #20]
 8002f78:	e00a      	b.n	8002f90 <Si468x_dab_get_digital_service_data+0x138>
					{
						slideshow_data[i] = dab_spi_rx_buffer[24 + i];
 8002f7a:	8abb      	ldrh	r3, [r7, #20]
 8002f7c:	f103 0218 	add.w	r2, r3, #24
 8002f80:	8abb      	ldrh	r3, [r7, #20]
 8002f82:	4961      	ldr	r1, [pc, #388]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f84:	5c89      	ldrb	r1, [r1, r2]
 8002f86:	4a67      	ldr	r2, [pc, #412]	@ (8003124 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002f88:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f8a:	8abb      	ldrh	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	82bb      	strh	r3, [r7, #20]
 8002f90:	4b61      	ldr	r3, [pc, #388]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002f92:	89db      	ldrh	r3, [r3, #14]
 8002f94:	8aba      	ldrh	r2, [r7, #20]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3ef      	bcc.n	8002f7a <Si468x_dab_get_digital_service_data+0x122>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	827b      	strh	r3, [r7, #18]
 8002f9e:	e00f      	b.n	8002fc0 <Si468x_dab_get_digital_service_data+0x168>
					{
//						send_debug_msg(slideshow_data[i]);
						send_debug_msg(itoa(slideshow_data[i], itoa_buffer, 10), CRLF_SEND);
 8002fa0:	8a7b      	ldrh	r3, [r7, #18]
 8002fa2:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	220a      	movs	r2, #10
 8002fa8:	495f      	ldr	r1, [pc, #380]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002faa:	4618      	mov	r0, r3
 8002fac:	f00a fbe8 	bl	800d780 <itoa>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fdc1 	bl	8003b3c <send_debug_msg>
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002fba:	8a7b      	ldrh	r3, [r7, #18]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	827b      	strh	r3, [r7, #18]
 8002fc0:	4b55      	ldr	r3, [pc, #340]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002fc2:	89db      	ldrh	r3, [r3, #14]
 8002fc4:	8a7a      	ldrh	r2, [r7, #18]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d3ea      	bcc.n	8002fa0 <Si468x_dab_get_digital_service_data+0x148>
					}
//					send_debug_msg("", CRLF_SEND);
					send_debug_msg("end", CRLF_SEND);
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4857      	ldr	r0, [pc, #348]	@ (800312c <Si468x_dab_get_digital_service_data+0x2d4>)
 8002fce:	f000 fdb5 	bl	8003b3c <send_debug_msg>
					send_debug_msg("Body Size: ", CRLF_NO_SEND);
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4856      	ldr	r0, [pc, #344]	@ (8003130 <Si468x_dab_get_digital_service_data+0x2d8>)
 8002fd6:	f000 fdb1 	bl	8003b3c <send_debug_msg>
					send_debug_msg(itoa(body_size, itoa_buffer, 10), CRLF_SEND);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	220a      	movs	r2, #10
 8002fde:	4952      	ldr	r1, [pc, #328]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f00a fbcd 	bl	800d780 <itoa>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fda6 	bl	8003b3c <send_debug_msg>
					send_debug_msg("Header Size: ", CRLF_NO_SEND);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4850      	ldr	r0, [pc, #320]	@ (8003134 <Si468x_dab_get_digital_service_data+0x2dc>)
 8002ff4:	f000 fda2 	bl	8003b3c <send_debug_msg>
					send_debug_msg(itoa(header_size, itoa_buffer, 10), CRLF_SEND);
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	220a      	movs	r2, #10
 8002ffc:	494a      	ldr	r1, [pc, #296]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f00a fbbe 	bl	800d780 <itoa>
 8003004:	4603      	mov	r3, r0
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fd97 	bl	8003b3c <send_debug_msg>
					send_debug_msg("Content Type: ", CRLF_NO_SEND);
 800300e:	2100      	movs	r1, #0
 8003010:	4849      	ldr	r0, [pc, #292]	@ (8003138 <Si468x_dab_get_digital_service_data+0x2e0>)
 8003012:	f000 fd93 	bl	8003b3c <send_debug_msg>
					send_debug_msg(itoa(content_type, itoa_buffer, 10), CRLF_SEND);
 8003016:	797b      	ldrb	r3, [r7, #5]
 8003018:	220a      	movs	r2, #10
 800301a:	4943      	ldr	r1, [pc, #268]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 800301c:	4618      	mov	r0, r3
 800301e:	f00a fbaf 	bl	800d780 <itoa>
 8003022:	4603      	mov	r3, r0
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fd88 	bl	8003b3c <send_debug_msg>
					send_debug_msg("Content SubType: ", CRLF_NO_SEND);
 800302c:	2100      	movs	r1, #0
 800302e:	4843      	ldr	r0, [pc, #268]	@ (800313c <Si468x_dab_get_digital_service_data+0x2e4>)
 8003030:	f000 fd84 	bl	8003b3c <send_debug_msg>
					send_debug_msg(itoa(content_sub_type, itoa_buffer, 10), CRLF_SEND);
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	220a      	movs	r2, #10
 8003038:	493b      	ldr	r1, [pc, #236]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 800303a:	4618      	mov	r0, r3
 800303c:	f00a fba0 	bl	800d780 <itoa>
 8003040:	4603      	mov	r3, r0
 8003042:	2101      	movs	r1, #1
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd79 	bl	8003b3c <send_debug_msg>

				}

				if(dab_service_data_reply_header.data_src == 2)
 800304a:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 800304c:	78db      	ldrb	r3, [r3, #3]
 800304e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b80      	cmp	r3, #128	@ 0x80
 8003056:	d152      	bne.n	80030fe <Si468x_dab_get_digital_service_data+0x2a6>
				{
					send_debug_msg("Dynamic Label Data: ", CRLF_SEND);
 8003058:	2101      	movs	r1, #1
 800305a:	4839      	ldr	r0, [pc, #228]	@ (8003140 <Si468x_dab_get_digital_service_data+0x2e8>)
 800305c:	f000 fd6e 	bl	8003b3c <send_debug_msg>

					for(uint8_t i = 0; i < 128; i++)
 8003060:	2300      	movs	r3, #0
 8003062:	747b      	strb	r3, [r7, #17]
 8003064:	e006      	b.n	8003074 <Si468x_dab_get_digital_service_data+0x21c>
					{
						dls_label[i] = 0;
 8003066:	7c7b      	ldrb	r3, [r7, #17]
 8003068:	4a36      	ldr	r2, [pc, #216]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 800306a:	2100      	movs	r1, #0
 800306c:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 128; i++)
 800306e:	7c7b      	ldrb	r3, [r7, #17]
 8003070:	3301      	adds	r3, #1
 8003072:	747b      	strb	r3, [r7, #17]
 8003074:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003078:	2b00      	cmp	r3, #0
 800307a:	daf4      	bge.n	8003066 <Si468x_dab_get_digital_service_data+0x20e>
					}

					uint8_t label_pos = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e031      	b.n	80030ea <Si468x_dab_get_digital_service_data+0x292>
					{
						dls_label[label_pos] = dab_spi_rx_buffer[24 + 2 + i];
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	f103 021a 	add.w	r2, r3, #26
 800308c:	7c3b      	ldrb	r3, [r7, #16]
 800308e:	491e      	ldr	r1, [pc, #120]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8003090:	5c89      	ldrb	r1, [r1, r2]
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 8003094:	54d1      	strb	r1, [r2, r3]
//						send_debug_msg(itoa(dab_spi_rx_buffer[24 + 2 + i], itoa_buffer, 10), CRLF_SEND);

						//polish symbols convert
						//ó
						if(dls_label[label_pos] == 195)
 8003096:	7c3b      	ldrb	r3, [r7, #16]
 8003098:	4a2a      	ldr	r2, [pc, #168]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	2bc3      	cmp	r3, #195	@ 0xc3
 800309e:	d106      	bne.n	80030ae <Si468x_dab_get_digital_service_data+0x256>
						{
							dls_label[label_pos] = 111;//lub 243
 80030a0:	7c3b      	ldrb	r3, [r7, #16]
 80030a2:	4a28      	ldr	r2, [pc, #160]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030a4:	216f      	movs	r1, #111	@ 0x6f
 80030a6:	54d1      	strb	r1, [r2, r3]
							i++;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	3301      	adds	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 234)
						{

						}
						//ć to c
						if(dls_label[label_pos] == 196)
 80030ae:	7c3b      	ldrb	r3, [r7, #16]
 80030b0:	4a24      	ldr	r2, [pc, #144]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	2bc4      	cmp	r3, #196	@ 0xc4
 80030b6:	d106      	bne.n	80030c6 <Si468x_dab_get_digital_service_data+0x26e>
						{
							dls_label[label_pos] = 99; //lub 230
 80030b8:	7c3b      	ldrb	r3, [r7, #16]
 80030ba:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030bc:	2163      	movs	r1, #99	@ 0x63
 80030be:	54d1      	strb	r1, [r2, r3]
							i++;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	3301      	adds	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 182)
						{

						}
						//ł to l
						if(dls_label[label_pos] == 197)
 80030c6:	7c3b      	ldrb	r3, [r7, #16]
 80030c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	2bc5      	cmp	r3, #197	@ 0xc5
 80030ce:	d106      	bne.n	80030de <Si468x_dab_get_digital_service_data+0x286>
						{
							dls_label[label_pos] = 108; //lub 179
 80030d0:	7c3b      	ldrb	r3, [r7, #16]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030d4:	216c      	movs	r1, #108	@ 0x6c
 80030d6:	54d1      	strb	r1, [r2, r3]
							i++;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	3301      	adds	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 243)
						{

						}

						label_pos++;
 80030de:	7c3b      	ldrb	r3, [r7, #16]
 80030e0:	3301      	adds	r3, #1
 80030e2:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	3301      	adds	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 80030f0:	89db      	ldrh	r3, [r3, #14]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3c7      	bcc.n	8003086 <Si468x_dab_get_digital_service_data+0x22e>
					}
					send_debug_msg(dls_label, CRLF_SEND);
 80030f6:	2101      	movs	r1, #1
 80030f8:	4812      	ldr	r0, [pc, #72]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030fa:	f000 fd1f 	bl	8003b3c <send_debug_msg>
				}
			}
		}
	}
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bdb0      	pop	{r4, r5, r7, pc}
 8003106:	bf00      	nop
 8003108:	200011a8 	.word	0x200011a8
 800310c:	20003510 	.word	0x20003510
 8003110:	200035fc 	.word	0x200035fc
 8003114:	200001a8 	.word	0x200001a8
 8003118:	20003620 	.word	0x20003620
 800311c:	0800e3e8 	.word	0x0800e3e8
 8003120:	0800e41c 	.word	0x0800e41c
 8003124:	20004c58 	.word	0x20004c58
 8003128:	200034d0 	.word	0x200034d0
 800312c:	0800e430 	.word	0x0800e430
 8003130:	0800e434 	.word	0x0800e434
 8003134:	0800e440 	.word	0x0800e440
 8003138:	0800e450 	.word	0x0800e450
 800313c:	0800e460 	.word	0x0800e460
 8003140:	0800e474 	.word	0x0800e474
 8003144:	20004bd4 	.word	0x20004bd4

08003148 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 800314c:	4b1c      	ldr	r3, [pc, #112]	@ (80031c0 <Si468x_dab_get_time+0x78>)
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02f      	beq.n	80031ba <Si468x_dab_get_time+0x72>
 800315a:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <Si468x_dab_get_time+0x78>)
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d028      	beq.n	80031ba <Si468x_dab_get_time+0x72>
 8003168:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <Si468x_dab_get_time+0x78>)
 800316a:	791b      	ldrb	r3, [r3, #4]
 800316c:	2b5a      	cmp	r3, #90	@ 0x5a
 800316e:	d924      	bls.n	80031ba <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <Si468x_dab_get_time+0x7c>)
 8003172:	22bc      	movs	r2, #188	@ 0xbc
 8003174:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8003176:	4b13      	ldr	r3, [pc, #76]	@ (80031c4 <Si468x_dab_get_time+0x7c>)
 8003178:	2200      	movs	r2, #0
 800317a:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 800317c:	4911      	ldr	r1, [pc, #68]	@ (80031c4 <Si468x_dab_get_time+0x7c>)
 800317e:	2002      	movs	r0, #2
 8003180:	f7fe fad6 	bl	8001730 <Si468x_write_command>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <Si468x_dab_get_time+0x80>)
 800318a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 800318c:	2001      	movs	r0, #1
 800318e:	f004 fb25 	bl	80077dc <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8003192:	490e      	ldr	r1, [pc, #56]	@ (80031cc <Si468x_dab_get_time+0x84>)
 8003194:	200b      	movs	r0, #11
 8003196:	f7fe faed 	bl	8001774 <Si468x_read_reply>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <Si468x_dab_get_time+0x80>)
 80031a0:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 80031a2:	4a0b      	ldr	r2, [pc, #44]	@ (80031d0 <Si468x_dab_get_time+0x88>)
 80031a4:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <Si468x_dab_get_time+0x84>)
 80031a6:	3304      	adds	r3, #4
 80031a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031ac:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 80031b0:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <Si468x_dab_get_time+0x88>)
 80031b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031b6:	f002 fac1 	bl	800573c <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200035d4 	.word	0x200035d4
 80031c4:	200001a8 	.word	0x200001a8
 80031c8:	20003510 	.word	0x20003510
 80031cc:	200011a8 	.word	0x200011a8
 80031d0:	20003608 	.word	0x20003608

080031d4 <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	4619      	mov	r1, r3
 80031e2:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80031e6:	f7fe fbd1 	bl	800198c <Si468x_set_property>
	dab_management.audio_volume = _volume;
 80031ea:	79fa      	ldrb	r2, [r7, #7]
 80031ec:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <Si468x_set_audio_volume+0x58>)
 80031ee:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 80031f0:	2100      	movs	r1, #0
 80031f2:	480f      	ldr	r0, [pc, #60]	@ (8003230 <Si468x_set_audio_volume+0x5c>)
 80031f4:	f000 fca2 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 80031f8:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <Si468x_set_audio_volume+0x58>)
 80031fa:	7b9b      	ldrb	r3, [r3, #14]
 80031fc:	220a      	movs	r2, #10
 80031fe:	490d      	ldr	r1, [pc, #52]	@ (8003234 <Si468x_set_audio_volume+0x60>)
 8003200:	4618      	mov	r0, r3
 8003202:	f00a fabd 	bl	800d780 <itoa>
 8003206:	4603      	mov	r3, r0
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fc96 	bl	8003b3c <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 8003210:	2101      	movs	r1, #1
 8003212:	4809      	ldr	r0, [pc, #36]	@ (8003238 <Si468x_set_audio_volume+0x64>)
 8003214:	f000 fc92 	bl	8003b3c <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	2201      	movs	r2, #1
 800321c:	4619      	mov	r1, r3
 800321e:	200b      	movs	r0, #11
 8003220:	f002 fb64 	bl	80058ec <eeprom_write>
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20004bc4 	.word	0x20004bc4
 8003230:	0800e4c8 	.word	0x0800e4c8
 8003234:	200034d0 	.word	0x200034d0
 8003238:	0800e4d4 	.word	0x0800e4d4

0800323c <play_station>:
}



void play_station(uint8_t station_id)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	@ 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dab_management.actual_station = station_id;
 8003248:	4a40      	ldr	r2, [pc, #256]	@ (800334c <play_station+0x110>)
 800324a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800324e:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 8003250:	4b3e      	ldr	r3, [pc, #248]	@ (800334c <play_station+0x110>)
 8003252:	78da      	ldrb	r2, [r3, #3]
 8003254:	4b3d      	ldr	r3, [pc, #244]	@ (800334c <play_station+0x110>)
 8003256:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8003258:	2201      	movs	r2, #1
 800325a:	493d      	ldr	r1, [pc, #244]	@ (8003350 <play_station+0x114>)
 800325c:	f240 1007 	movw	r0, #263	@ 0x107
 8003260:	f002 fb44 	bl	80058ec <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 8003264:	2101      	movs	r1, #1
 8003266:	483b      	ldr	r0, [pc, #236]	@ (8003354 <play_station+0x118>)
 8003268:	f000 fc68 	bl	8003b3c <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 800326c:	2100      	movs	r1, #0
 800326e:	483a      	ldr	r0, [pc, #232]	@ (8003358 <play_station+0x11c>)
 8003270:	f000 fc64 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 8003274:	4b35      	ldr	r3, [pc, #212]	@ (800334c <play_station+0x110>)
 8003276:	78db      	ldrb	r3, [r3, #3]
 8003278:	3301      	adds	r3, #1
 800327a:	220a      	movs	r2, #10
 800327c:	4937      	ldr	r1, [pc, #220]	@ (800335c <play_station+0x120>)
 800327e:	4618      	mov	r0, r3
 8003280:	f00a fa7e 	bl	800d780 <itoa>
 8003284:	4603      	mov	r3, r0
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fc57 	bl	8003b3c <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 800328e:	2100      	movs	r1, #0
 8003290:	4833      	ldr	r0, [pc, #204]	@ (8003360 <play_station+0x124>)
 8003292:	f000 fc53 	bl	8003b3c <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 8003296:	4b2d      	ldr	r3, [pc, #180]	@ (800334c <play_station+0x110>)
 8003298:	78db      	ldrb	r3, [r3, #3]
 800329a:	461a      	mov	r2, r3
 800329c:	2334      	movs	r3, #52	@ 0x34
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <play_station+0x128>)
 80032a4:	4413      	add	r3, r2
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fc47 	bl	8003b3c <send_debug_msg>
	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, USE_ANT_CAP); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 80032ae:	4b27      	ldr	r3, [pc, #156]	@ (800334c <play_station+0x110>)
 80032b0:	78db      	ldrb	r3, [r3, #3]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003364 <play_station+0x128>)
 80032b6:	2334      	movs	r3, #52	@ 0x34
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	3328      	adds	r3, #40	@ 0x28
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe fc4b 	bl	8001b60 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <play_station+0x110>)
 80032cc:	78db      	ldrb	r3, [r3, #3]
 80032ce:	4619      	mov	r1, r3
 80032d0:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <play_station+0x128>)
 80032d2:	2334      	movs	r3, #52	@ 0x34
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3320      	adds	r3, #32
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <play_station+0x110>)
 80032e0:	78db      	ldrb	r3, [r3, #3]
 80032e2:	4618      	mov	r0, r3
 80032e4:	491f      	ldr	r1, [pc, #124]	@ (8003364 <play_station+0x128>)
 80032e6:	2334      	movs	r3, #52	@ 0x34
 80032e8:	fb00 f303 	mul.w	r3, r0, r3
 80032ec:	440b      	add	r3, r1
 80032ee:	332a      	adds	r3, #42	@ 0x2a
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7ff fd03 	bl	8002d00 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 80032fa:	4b14      	ldr	r3, [pc, #80]	@ (800334c <play_station+0x110>)
 80032fc:	78db      	ldrb	r3, [r3, #3]
 80032fe:	4619      	mov	r1, r3
 8003300:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <play_station+0x128>)
 8003302:	2334      	movs	r3, #52	@ 0x34
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3320      	adds	r3, #32
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <play_station+0x110>)
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	4618      	mov	r0, r3
 8003314:	4913      	ldr	r1, [pc, #76]	@ (8003364 <play_station+0x128>)
 8003316:	2334      	movs	r3, #52	@ 0x34
 8003318:	fb00 f303 	mul.w	r3, r0, r3
 800331c:	440b      	add	r3, r1
 800331e:	332a      	adds	r3, #42	@ 0x2a
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7fe fffd 	bl	8002324 <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 800332a:	463b      	mov	r3, r7
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fcef 	bl	8001d10 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 8003332:	463b      	mov	r3, r7
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fbfb 	bl	8002b30 <Si468x_dab_get_audio_info>

	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x03);	//enable both service interrupts
 800333a:	2103      	movs	r1, #3
 800333c:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 8003340:	f7fe fb24 	bl	800198c <Si468x_set_property>
}
 8003344:	bf00      	nop
 8003346:	3730      	adds	r7, #48	@ 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20004bc4 	.word	0x20004bc4
 8003350:	20004bc8 	.word	0x20004bc8
 8003354:	0800e4e8 	.word	0x0800e4e8
 8003358:	0800e50c 	.word	0x0800e50c
 800335c:	200034d0 	.word	0x200034d0
 8003360:	0800e520 	.word	0x0800e520
 8003364:	20003774 	.word	0x20003774

08003368 <restore_from_eeprom>:

void restore_from_eeprom()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b094      	sub	sp, #80	@ 0x50
 800336c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 800336e:	2101      	movs	r1, #1
 8003370:	48a7      	ldr	r0, [pc, #668]	@ (8003610 <restore_from_eeprom+0x2a8>)
 8003372:	f000 fbe3 	bl	8003b3c <send_debug_msg>

	//restore frequency table

	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 8003376:	2201      	movs	r2, #1
 8003378:	49a6      	ldr	r1, [pc, #664]	@ (8003614 <restore_from_eeprom+0x2ac>)
 800337a:	203f      	movs	r0, #63	@ 0x3f
 800337c:	f002 fa98 	bl	80058b0 <eeprom_read>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003386:	e016      	b.n	80033b6 <restore_from_eeprom+0x4e>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 8003388:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800338c:	3302      	adds	r3, #2
 800338e:	015b      	lsls	r3, r3, #5
 8003390:	4618      	mov	r0, r3
 8003392:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4a9f      	ldr	r2, [pc, #636]	@ (8003618 <restore_from_eeprom+0x2b0>)
 800339c:	4413      	add	r3, r2
 800339e:	2220      	movs	r2, #32
 80033a0:	4619      	mov	r1, r3
 80033a2:	f002 fa85 	bl	80058b0 <eeprom_read>
		HAL_Delay(5);
 80033a6:	2005      	movs	r0, #5
 80033a8:	f004 fa18 	bl	80077dc <HAL_Delay>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 80033ac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80033b0:	3301      	adds	r3, #1
 80033b2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80033b6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d9e4      	bls.n	8003388 <restore_from_eeprom+0x20>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 80033be:	2100      	movs	r1, #0
 80033c0:	4896      	ldr	r0, [pc, #600]	@ (800361c <restore_from_eeprom+0x2b4>)
 80033c2:	f000 fbbb 	bl	8003b3c <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 80033c6:	4b96      	ldr	r3, [pc, #600]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80033c8:	7b5b      	ldrb	r3, [r3, #13]
 80033ca:	220a      	movs	r2, #10
 80033cc:	4995      	ldr	r1, [pc, #596]	@ (8003624 <restore_from_eeprom+0x2bc>)
 80033ce:	4618      	mov	r0, r3
 80033d0:	f00a f9d6 	bl	800d780 <itoa>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fbaf 	bl	8003b3c <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 80033de:	2101      	movs	r1, #1
 80033e0:	4891      	ldr	r0, [pc, #580]	@ (8003628 <restore_from_eeprom+0x2c0>)
 80033e2:	f000 fbab 	bl	8003b3c <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ea:	e022      	b.n	8003432 <restore_from_eeprom+0xca>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 80033ec:	220a      	movs	r2, #10
 80033ee:	498d      	ldr	r1, [pc, #564]	@ (8003624 <restore_from_eeprom+0x2bc>)
 80033f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80033f2:	f00a f9c5 	bl	800d780 <itoa>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fb9e 	bl	8003b3c <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003400:	2100      	movs	r1, #0
 8003402:	488a      	ldr	r0, [pc, #552]	@ (800362c <restore_from_eeprom+0x2c4>)
 8003404:	f000 fb9a 	bl	8003b3c <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003408:	4a83      	ldr	r2, [pc, #524]	@ (8003618 <restore_from_eeprom+0x2b0>)
 800340a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	220a      	movs	r2, #10
 8003412:	4984      	ldr	r1, [pc, #528]	@ (8003624 <restore_from_eeprom+0x2bc>)
 8003414:	4618      	mov	r0, r3
 8003416:	f00a f9b3 	bl	800d780 <itoa>
 800341a:	4603      	mov	r3, r0
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fb8c 	bl	8003b3c <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8003424:	2101      	movs	r1, #1
 8003426:	4882      	ldr	r0, [pc, #520]	@ (8003630 <restore_from_eeprom+0x2c8>)
 8003428:	f000 fb88 	bl	8003b3c <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 800342c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800342e:	3301      	adds	r3, #1
 8003430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003432:	4b7b      	ldr	r3, [pc, #492]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003434:	7b5b      	ldrb	r3, [r3, #13]
 8003436:	461a      	mov	r2, r3
 8003438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800343a:	4293      	cmp	r3, r2
 800343c:	dbd6      	blt.n	80033ec <restore_from_eeprom+0x84>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 800343e:	2201      	movs	r2, #1
 8003440:	497c      	ldr	r1, [pc, #496]	@ (8003634 <restore_from_eeprom+0x2cc>)
 8003442:	f240 1005 	movw	r0, #261	@ 0x105
 8003446:	f002 fa33 	bl	80058b0 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 800344a:	2201      	movs	r2, #1
 800344c:	4974      	ldr	r1, [pc, #464]	@ (8003620 <restore_from_eeprom+0x2b8>)
 800344e:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8003452:	f002 fa2d 	bl	80058b0 <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 8003456:	4b72      	ldr	r3, [pc, #456]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2bff      	cmp	r3, #255	@ 0xff
 800345c:	f000 82c2 	beq.w	80039e4 <restore_from_eeprom+0x67c>
 8003460:	4b6f      	ldr	r3, [pc, #444]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	2bff      	cmp	r3, #255	@ 0xff
 8003466:	f000 82bd 	beq.w	80039e4 <restore_from_eeprom+0x67c>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 800346a:	2204      	movs	r2, #4
 800346c:	4972      	ldr	r1, [pc, #456]	@ (8003638 <restore_from_eeprom+0x2d0>)
 800346e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003472:	f002 fa1d 	bl	80058b0 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 8003476:	2201      	movs	r2, #1
 8003478:	4970      	ldr	r1, [pc, #448]	@ (800363c <restore_from_eeprom+0x2d4>)
 800347a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800347e:	f002 fa17 	bl	80058b0 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8003482:	2201      	movs	r2, #1
 8003484:	496e      	ldr	r1, [pc, #440]	@ (8003640 <restore_from_eeprom+0x2d8>)
 8003486:	f240 1007 	movw	r0, #263	@ 0x107
 800348a:	f002 fa11 	bl	80058b0 <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 800348e:	4b64      	ldr	r3, [pc, #400]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003490:	791b      	ldrb	r3, [r3, #4]
 8003492:	2bff      	cmp	r3, #255	@ 0xff
 8003494:	d102      	bne.n	800349c <restore_from_eeprom+0x134>
		{
			dab_management.last_station_index = 0;
 8003496:	4b62      	ldr	r3, [pc, #392]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003498:	2200      	movs	r2, #0
 800349a:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 800349c:	4b60      	ldr	r3, [pc, #384]	@ (8003620 <restore_from_eeprom+0x2b8>)
 800349e:	791a      	ldrb	r2, [r3, #4]
 80034a0:	4b5f      	ldr	r3, [pc, #380]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80034a2:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80034aa:	e012      	b.n	80034d2 <restore_from_eeprom+0x16a>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 80034ac:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80034b0:	330a      	adds	r3, #10
 80034b2:	015b      	lsls	r3, r3, #5
 80034b4:	4618      	mov	r0, r3
 80034b6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80034ba:	015b      	lsls	r3, r3, #5
 80034bc:	4a61      	ldr	r2, [pc, #388]	@ (8003644 <restore_from_eeprom+0x2dc>)
 80034be:	4413      	add	r3, r2
 80034c0:	2220      	movs	r2, #32
 80034c2:	4619      	mov	r1, r3
 80034c4:	f002 f9f4 	bl	80058b0 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80034c8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80034cc:	3301      	adds	r3, #1
 80034ce:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80034d2:	4b53      	ldr	r3, [pc, #332]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3e6      	bcc.n	80034ac <restore_from_eeprom+0x144>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
			}
		}
		if(PAGE_SIZE == 32)
		{
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80034e4:	e026      	b.n	8003534 <restore_from_eeprom+0x1cc>
			{
				uint8_t temp [64];
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2, &temp[0], 32);
 80034e6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80034ea:	330f      	adds	r3, #15
 80034ec:	019b      	lsls	r3, r3, #6
 80034ee:	4618      	mov	r0, r3
 80034f0:	463b      	mov	r3, r7
 80034f2:	2220      	movs	r2, #32
 80034f4:	4619      	mov	r1, r3
 80034f6:	f002 f9db 	bl	80058b0 <eeprom_read>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 80034fa:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80034fe:	330f      	adds	r3, #15
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	3320      	adds	r3, #32
 8003504:	4618      	mov	r0, r3
 8003506:	463b      	mov	r3, r7
 8003508:	3320      	adds	r3, #32
 800350a:	2214      	movs	r2, #20
 800350c:	4619      	mov	r1, r3
 800350e:	f002 f9cf 	bl	80058b0 <eeprom_read>
				memcpy(&services_list[i], &temp, sizeof(dab_service_t));
 8003512:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003516:	2234      	movs	r2, #52	@ 0x34
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	4a4a      	ldr	r2, [pc, #296]	@ (8003648 <restore_from_eeprom+0x2e0>)
 800351e:	4413      	add	r3, r2
 8003520:	4639      	mov	r1, r7
 8003522:	2234      	movs	r2, #52	@ 0x34
 8003524:	4618      	mov	r0, r3
 8003526:	f00a f99b 	bl	800d860 <memcpy>
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 800352a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800352e:	3301      	adds	r3, #1
 8003530:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003534:	4b3a      	ldr	r3, [pc, #232]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 800353c:	429a      	cmp	r2, r3
 800353e:	d3d2      	bcc.n	80034e6 <restore_from_eeprom+0x17e>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 8003540:	2100      	movs	r1, #0
 8003542:	4836      	ldr	r0, [pc, #216]	@ (800361c <restore_from_eeprom+0x2b4>)
 8003544:	f000 fafa 	bl	8003b3c <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003548:	4b35      	ldr	r3, [pc, #212]	@ (8003620 <restore_from_eeprom+0x2b8>)
 800354a:	7b5b      	ldrb	r3, [r3, #13]
 800354c:	220a      	movs	r2, #10
 800354e:	4935      	ldr	r1, [pc, #212]	@ (8003624 <restore_from_eeprom+0x2bc>)
 8003550:	4618      	mov	r0, r3
 8003552:	f00a f915 	bl	800d780 <itoa>
 8003556:	4603      	mov	r3, r0
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f000 faee 	bl	8003b3c <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 8003560:	2101      	movs	r1, #1
 8003562:	4831      	ldr	r0, [pc, #196]	@ (8003628 <restore_from_eeprom+0x2c0>)
 8003564:	f000 faea 	bl	8003b3c <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 8003568:	2300      	movs	r3, #0
 800356a:	647b      	str	r3, [r7, #68]	@ 0x44
 800356c:	e022      	b.n	80035b4 <restore_from_eeprom+0x24c>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 800356e:	220a      	movs	r2, #10
 8003570:	492c      	ldr	r1, [pc, #176]	@ (8003624 <restore_from_eeprom+0x2bc>)
 8003572:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003574:	f00a f904 	bl	800d780 <itoa>
 8003578:	4603      	mov	r3, r0
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fadd 	bl	8003b3c <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 8003582:	2100      	movs	r1, #0
 8003584:	4829      	ldr	r0, [pc, #164]	@ (800362c <restore_from_eeprom+0x2c4>)
 8003586:	f000 fad9 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 800358a:	4a23      	ldr	r2, [pc, #140]	@ (8003618 <restore_from_eeprom+0x2b0>)
 800358c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003592:	220a      	movs	r2, #10
 8003594:	4923      	ldr	r1, [pc, #140]	@ (8003624 <restore_from_eeprom+0x2bc>)
 8003596:	4618      	mov	r0, r3
 8003598:	f00a f8f2 	bl	800d780 <itoa>
 800359c:	4603      	mov	r3, r0
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 facb 	bl	8003b3c <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 80035a6:	2101      	movs	r1, #1
 80035a8:	4821      	ldr	r0, [pc, #132]	@ (8003630 <restore_from_eeprom+0x2c8>)
 80035aa:	f000 fac7 	bl	8003b3c <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 80035ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b0:	3301      	adds	r3, #1
 80035b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80035b6:	7b5b      	ldrb	r3, [r3, #13]
 80035b8:	461a      	mov	r2, r3
 80035ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035bc:	4293      	cmp	r3, r2
 80035be:	dbd6      	blt.n	800356e <restore_from_eeprom+0x206>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80035c0:	2100      	movs	r1, #0
 80035c2:	4822      	ldr	r0, [pc, #136]	@ (800364c <restore_from_eeprom+0x2e4>)
 80035c4:	f000 faba 	bl	8003b3c <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 80035c8:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	220a      	movs	r2, #10
 80035ce:	4915      	ldr	r1, [pc, #84]	@ (8003624 <restore_from_eeprom+0x2bc>)
 80035d0:	4618      	mov	r0, r3
 80035d2:	f00a f8d5 	bl	800d780 <itoa>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 faae 	bl	8003b3c <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80035e0:	2101      	movs	r1, #1
 80035e2:	481b      	ldr	r0, [pc, #108]	@ (8003650 <restore_from_eeprom+0x2e8>)
 80035e4:	f000 faaa 	bl	8003b3c <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80035e8:	2100      	movs	r1, #0
 80035ea:	481a      	ldr	r0, [pc, #104]	@ (8003654 <restore_from_eeprom+0x2ec>)
 80035ec:	f000 faa6 	bl	8003b3c <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80035f0:	2100      	movs	r1, #0
 80035f2:	4819      	ldr	r0, [pc, #100]	@ (8003658 <restore_from_eeprom+0x2f0>)
 80035f4:	f000 faa2 	bl	8003b3c <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80035f8:	2100      	movs	r1, #0
 80035fa:	4818      	ldr	r0, [pc, #96]	@ (800365c <restore_from_eeprom+0x2f4>)
 80035fc:	f000 fa9e 	bl	8003b3c <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8003600:	2101      	movs	r1, #1
 8003602:	4817      	ldr	r0, [pc, #92]	@ (8003660 <restore_from_eeprom+0x2f8>)
 8003604:	f000 fa9a 	bl	8003b3c <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800360e:	e086      	b.n	800371e <restore_from_eeprom+0x3b6>
 8003610:	0800e528 	.word	0x0800e528
 8003614:	20004bd1 	.word	0x20004bd1
 8003618:	20003514 	.word	0x20003514
 800361c:	0800de60 	.word	0x0800de60
 8003620:	20004bc4 	.word	0x20004bc4
 8003624:	200034d0 	.word	0x200034d0
 8003628:	0800de68 	.word	0x0800de68
 800362c:	0800de80 	.word	0x0800de80
 8003630:	0800de84 	.word	0x0800de84
 8003634:	20004bc5 	.word	0x20004bc5
 8003638:	20004bcc 	.word	0x20004bcc
 800363c:	20004bd0 	.word	0x20004bd0
 8003640:	20004bc8 	.word	0x20004bc8
 8003644:	20003634 	.word	0x20003634
 8003648:	20003774 	.word	0x20003774
 800364c:	0800e0f0 	.word	0x0800e0f0
 8003650:	0800e104 	.word	0x0800e104
 8003654:	0800e138 	.word	0x0800e138
 8003658:	0800e144 	.word	0x0800e144
 800365c:	0800e158 	.word	0x0800e158
 8003660:	0800e168 	.word	0x0800e168
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8003664:	2100      	movs	r1, #0
 8003666:	48cc      	ldr	r0, [pc, #816]	@ (8003998 <restore_from_eeprom+0x630>)
 8003668:	f000 fa68 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 800366c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003670:	3301      	adds	r3, #1
 8003672:	220a      	movs	r2, #10
 8003674:	49c9      	ldr	r1, [pc, #804]	@ (800399c <restore_from_eeprom+0x634>)
 8003676:	4618      	mov	r0, r3
 8003678:	f00a f882 	bl	800d780 <itoa>
 800367c:	4603      	mov	r3, r0
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa5b 	bl	8003b3c <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8003686:	2100      	movs	r1, #0
 8003688:	48c5      	ldr	r0, [pc, #788]	@ (80039a0 <restore_from_eeprom+0x638>)
 800368a:	f000 fa57 	bl	8003b3c <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 800368e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003692:	015b      	lsls	r3, r3, #5
 8003694:	4ac3      	ldr	r2, [pc, #780]	@ (80039a4 <restore_from_eeprom+0x63c>)
 8003696:	4413      	add	r3, r2
 8003698:	3302      	adds	r3, #2
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fa4d 	bl	8003b3c <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 80036a2:	2100      	movs	r1, #0
 80036a4:	48bc      	ldr	r0, [pc, #752]	@ (8003998 <restore_from_eeprom+0x630>)
 80036a6:	f000 fa49 	bl	8003b3c <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80036aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036ae:	4abd      	ldr	r2, [pc, #756]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80036b0:	015b      	lsls	r3, r3, #5
 80036b2:	4413      	add	r3, r2
 80036b4:	3318      	adds	r3, #24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	220a      	movs	r2, #10
 80036ba:	49b8      	ldr	r1, [pc, #736]	@ (800399c <restore_from_eeprom+0x634>)
 80036bc:	4618      	mov	r0, r3
 80036be:	f00a f85f 	bl	800d780 <itoa>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa38 	bl	8003b3c <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80036cc:	2100      	movs	r1, #0
 80036ce:	48b6      	ldr	r0, [pc, #728]	@ (80039a8 <restore_from_eeprom+0x640>)
 80036d0:	f000 fa34 	bl	8003b3c <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80036d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036d8:	4ab2      	ldr	r2, [pc, #712]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	4413      	add	r3, r2
 80036de:	331c      	adds	r3, #28
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4bb1      	ldr	r3, [pc, #708]	@ (80039ac <restore_from_eeprom+0x644>)
 80036e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fa25 	bl	8003b3c <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80036f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036f6:	4aab      	ldr	r2, [pc, #684]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80036f8:	015b      	lsls	r3, r3, #5
 80036fa:	4413      	add	r3, r2
 80036fc:	331c      	adds	r3, #28
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b13      	cmp	r3, #19
 8003702:	d803      	bhi.n	800370c <restore_from_eeprom+0x3a4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003704:	2100      	movs	r1, #0
 8003706:	48aa      	ldr	r0, [pc, #680]	@ (80039b0 <restore_from_eeprom+0x648>)
 8003708:	f000 fa18 	bl	8003b3c <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 800370c:	2101      	movs	r1, #1
 800370e:	48a9      	ldr	r0, [pc, #676]	@ (80039b4 <restore_from_eeprom+0x64c>)
 8003710:	f000 fa14 	bl	8003b3c <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003714:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003718:	3301      	adds	r3, #1
 800371a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800371e:	4ba6      	ldr	r3, [pc, #664]	@ (80039b8 <restore_from_eeprom+0x650>)
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8003726:	429a      	cmp	r2, r3
 8003728:	d39c      	bcc.n	8003664 <restore_from_eeprom+0x2fc>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800372a:	2101      	movs	r1, #1
 800372c:	48a3      	ldr	r0, [pc, #652]	@ (80039bc <restore_from_eeprom+0x654>)
 800372e:	f000 fa05 	bl	8003b3c <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 8003732:	2100      	movs	r1, #0
 8003734:	48a2      	ldr	r0, [pc, #648]	@ (80039c0 <restore_from_eeprom+0x658>)
 8003736:	f000 fa01 	bl	8003b3c <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 800373a:	4b9f      	ldr	r3, [pc, #636]	@ (80039b8 <restore_from_eeprom+0x650>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	220a      	movs	r2, #10
 8003740:	4996      	ldr	r1, [pc, #600]	@ (800399c <restore_from_eeprom+0x634>)
 8003742:	4618      	mov	r0, r3
 8003744:	f00a f81c 	bl	800d780 <itoa>
 8003748:	4603      	mov	r3, r0
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9f5 	bl	8003b3c <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003752:	2101      	movs	r1, #1
 8003754:	489b      	ldr	r0, [pc, #620]	@ (80039c4 <restore_from_eeprom+0x65c>)
 8003756:	f000 f9f1 	bl	8003b3c <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 800375a:	2101      	movs	r1, #1
 800375c:	489a      	ldr	r0, [pc, #616]	@ (80039c8 <restore_from_eeprom+0x660>)
 800375e:	f000 f9ed 	bl	8003b3c <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003762:	2300      	movs	r3, #0
 8003764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003768:	e0f7      	b.n	800395a <restore_from_eeprom+0x5f2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 800376a:	2100      	movs	r1, #0
 800376c:	488a      	ldr	r0, [pc, #552]	@ (8003998 <restore_from_eeprom+0x630>)
 800376e:	f000 f9e5 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003772:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003776:	3301      	adds	r3, #1
 8003778:	220a      	movs	r2, #10
 800377a:	4988      	ldr	r1, [pc, #544]	@ (800399c <restore_from_eeprom+0x634>)
 800377c:	4618      	mov	r0, r3
 800377e:	f009 ffff 	bl	800d780 <itoa>
 8003782:	4603      	mov	r3, r0
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f9d8 	bl	8003b3c <send_debug_msg>
			if((services_index +1) < 10)
 800378c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003790:	2b08      	cmp	r3, #8
 8003792:	d803      	bhi.n	800379c <restore_from_eeprom+0x434>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003794:	2100      	movs	r1, #0
 8003796:	4886      	ldr	r0, [pc, #536]	@ (80039b0 <restore_from_eeprom+0x648>)
 8003798:	f000 f9d0 	bl	8003b3c <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800379c:	2100      	movs	r1, #0
 800379e:	488b      	ldr	r0, [pc, #556]	@ (80039cc <restore_from_eeprom+0x664>)
 80037a0:	f000 f9cc 	bl	8003b3c <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 80037a4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80037a8:	2234      	movs	r2, #52	@ 0x34
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	4a88      	ldr	r2, [pc, #544]	@ (80039d0 <restore_from_eeprom+0x668>)
 80037b0:	4413      	add	r3, r2
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f9c1 	bl	8003b3c <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 80037ba:	2100      	movs	r1, #0
 80037bc:	4885      	ldr	r0, [pc, #532]	@ (80039d4 <restore_from_eeprom+0x66c>)
 80037be:	f000 f9bd 	bl	8003b3c <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80037c8:	e021      	b.n	800380e <restore_from_eeprom+0x4a6>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 80037ca:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80037ce:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	4413      	add	r3, r2
 80037d4:	331c      	adds	r3, #28
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80037dc:	497c      	ldr	r1, [pc, #496]	@ (80039d0 <restore_from_eeprom+0x668>)
 80037de:	2034      	movs	r0, #52	@ 0x34
 80037e0:	fb00 f303 	mul.w	r3, r0, r3
 80037e4:	440b      	add	r3, r1
 80037e6:	3328      	adds	r3, #40	@ 0x28
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10a      	bne.n	8003804 <restore_from_eeprom+0x49c>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80037ee:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80037f2:	015b      	lsls	r3, r3, #5
 80037f4:	4a6b      	ldr	r2, [pc, #428]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80037f6:	4413      	add	r3, r2
 80037f8:	3302      	adds	r3, #2
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f99d 	bl	8003b3c <send_debug_msg>
					break;
 8003802:	e00a      	b.n	800381a <restore_from_eeprom+0x4b2>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003804:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003808:	3301      	adds	r3, #1
 800380a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800380e:	4b6a      	ldr	r3, [pc, #424]	@ (80039b8 <restore_from_eeprom+0x650>)
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8003816:	429a      	cmp	r2, r3
 8003818:	d3d7      	bcc.n	80037ca <restore_from_eeprom+0x462>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 800381a:	2100      	movs	r1, #0
 800381c:	486d      	ldr	r0, [pc, #436]	@ (80039d4 <restore_from_eeprom+0x66c>)
 800381e:	f000 f98d 	bl	8003b3c <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003822:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003826:	4a6a      	ldr	r2, [pc, #424]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003828:	2134      	movs	r1, #52	@ 0x34
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3324      	adds	r3, #36	@ 0x24
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	220a      	movs	r2, #10
 8003836:	4959      	ldr	r1, [pc, #356]	@ (800399c <restore_from_eeprom+0x634>)
 8003838:	4618      	mov	r0, r3
 800383a:	f009 ffa1 	bl	800d780 <itoa>
 800383e:	4603      	mov	r3, r0
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f97a 	bl	8003b3c <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8003848:	2100      	movs	r1, #0
 800384a:	4857      	ldr	r0, [pc, #348]	@ (80039a8 <restore_from_eeprom+0x640>)
 800384c:	f000 f976 	bl	8003b3c <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8003850:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003854:	4a5e      	ldr	r2, [pc, #376]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003856:	2134      	movs	r1, #52	@ 0x34
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3328      	adds	r3, #40	@ 0x28
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4b51      	ldr	r3, [pc, #324]	@ (80039ac <restore_from_eeprom+0x644>)
 8003866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f965 	bl	8003b3c <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8003872:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003876:	4a56      	ldr	r2, [pc, #344]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003878:	2134      	movs	r1, #52	@ 0x34
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	3328      	adds	r3, #40	@ 0x28
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b13      	cmp	r3, #19
 8003886:	d803      	bhi.n	8003890 <restore_from_eeprom+0x528>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003888:	2100      	movs	r1, #0
 800388a:	4849      	ldr	r0, [pc, #292]	@ (80039b0 <restore_from_eeprom+0x648>)
 800388c:	f000 f956 	bl	8003b3c <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003890:	2100      	movs	r1, #0
 8003892:	484e      	ldr	r0, [pc, #312]	@ (80039cc <restore_from_eeprom+0x664>)
 8003894:	f000 f952 	bl	8003b3c <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8003898:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800389c:	4a4c      	ldr	r2, [pc, #304]	@ (80039d0 <restore_from_eeprom+0x668>)
 800389e:	2134      	movs	r1, #52	@ 0x34
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3315      	adds	r3, #21
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	220a      	movs	r2, #10
 80038ac:	493b      	ldr	r1, [pc, #236]	@ (800399c <restore_from_eeprom+0x634>)
 80038ae:	4618      	mov	r0, r3
 80038b0:	f009 ff66 	bl	800d780 <itoa>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f93f 	bl	8003b3c <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 80038be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80038c2:	4a43      	ldr	r2, [pc, #268]	@ (80039d0 <restore_from_eeprom+0x668>)
 80038c4:	2134      	movs	r1, #52	@ 0x34
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3315      	adds	r3, #21
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d803      	bhi.n	80038dc <restore_from_eeprom+0x574>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80038d4:	2100      	movs	r1, #0
 80038d6:	4836      	ldr	r0, [pc, #216]	@ (80039b0 <restore_from_eeprom+0x648>)
 80038d8:	f000 f930 	bl	8003b3c <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80038dc:	2100      	movs	r1, #0
 80038de:	483e      	ldr	r0, [pc, #248]	@ (80039d8 <restore_from_eeprom+0x670>)
 80038e0:	f000 f92c 	bl	8003b3c <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80038e4:	2100      	movs	r1, #0
 80038e6:	483d      	ldr	r0, [pc, #244]	@ (80039dc <restore_from_eeprom+0x674>)
 80038e8:	f000 f928 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 80038ec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80038f0:	4a37      	ldr	r2, [pc, #220]	@ (80039d0 <restore_from_eeprom+0x668>)
 80038f2:	2134      	movs	r1, #52	@ 0x34
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	3320      	adds	r3, #32
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2210      	movs	r2, #16
 8003900:	4926      	ldr	r1, [pc, #152]	@ (800399c <restore_from_eeprom+0x634>)
 8003902:	4618      	mov	r0, r3
 8003904:	f009 ff3c 	bl	800d780 <itoa>
 8003908:	4603      	mov	r3, r0
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f915 	bl	8003b3c <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003912:	2100      	movs	r1, #0
 8003914:	482d      	ldr	r0, [pc, #180]	@ (80039cc <restore_from_eeprom+0x664>)
 8003916:	f000 f911 	bl	8003b3c <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800391a:	2100      	movs	r1, #0
 800391c:	482f      	ldr	r0, [pc, #188]	@ (80039dc <restore_from_eeprom+0x674>)
 800391e:	f000 f90d 	bl	8003b3c <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003922:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003926:	4a2a      	ldr	r2, [pc, #168]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003928:	2134      	movs	r1, #52	@ 0x34
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	332a      	adds	r3, #42	@ 0x2a
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2210      	movs	r2, #16
 8003936:	4919      	ldr	r1, [pc, #100]	@ (800399c <restore_from_eeprom+0x634>)
 8003938:	4618      	mov	r0, r3
 800393a:	f009 ff21 	bl	800d780 <itoa>
 800393e:	4603      	mov	r3, r0
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f8fa 	bl	8003b3c <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8003948:	2101      	movs	r1, #1
 800394a:	4825      	ldr	r0, [pc, #148]	@ (80039e0 <restore_from_eeprom+0x678>)
 800394c:	f000 f8f6 	bl	8003b3c <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003950:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003954:	3301      	adds	r3, #1
 8003956:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800395a:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <restore_from_eeprom+0x650>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8003962:	429a      	cmp	r2, r3
 8003964:	f4ff af01 	bcc.w	800376a <restore_from_eeprom+0x402>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003968:	2101      	movs	r1, #1
 800396a:	4816      	ldr	r0, [pc, #88]	@ (80039c4 <restore_from_eeprom+0x65c>)
 800396c:	f000 f8e6 	bl	8003b3c <send_debug_msg>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, USE_ANT_CAP);
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <restore_from_eeprom+0x650>)
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	4619      	mov	r1, r3
 8003976:	4a16      	ldr	r2, [pc, #88]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003978:	2334      	movs	r3, #52	@ 0x34
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3328      	adds	r3, #40	@ 0x28
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe f8ea 	bl	8001b60 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <restore_from_eeprom+0x650>)
 800398e:	791b      	ldrb	r3, [r3, #4]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fc53 	bl	800323c <play_station>
 8003996:	e038      	b.n	8003a0a <restore_from_eeprom+0x6a2>
 8003998:	0800e178 	.word	0x0800e178
 800399c:	200034d0 	.word	0x200034d0
 80039a0:	0800e17c 	.word	0x0800e17c
 80039a4:	20003634 	.word	0x20003634
 80039a8:	0800e188 	.word	0x0800e188
 80039ac:	20000008 	.word	0x20000008
 80039b0:	0800e190 	.word	0x0800e190
 80039b4:	0800e194 	.word	0x0800e194
 80039b8:	20004bc4 	.word	0x20004bc4
 80039bc:	0800e104 	.word	0x0800e104
 80039c0:	0800e19c 	.word	0x0800e19c
 80039c4:	0800e1b0 	.word	0x0800e1b0
 80039c8:	0800e21c 	.word	0x0800e21c
 80039cc:	0800e288 	.word	0x0800e288
 80039d0:	20003774 	.word	0x20003774
 80039d4:	0800e290 	.word	0x0800e290
 80039d8:	0800e294 	.word	0x0800e294
 80039dc:	0800e29c 	.word	0x0800e29c
 80039e0:	0800e2a0 	.word	0x0800e2a0

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 80039e4:	2101      	movs	r1, #1
 80039e6:	4816      	ldr	r0, [pc, #88]	@ (8003a40 <restore_from_eeprom+0x6d8>)
 80039e8:	f000 f8a8 	bl	8003b3c <send_debug_msg>
		dab_management.actual_freq = 0;
 80039ec:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 80039f2:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 80039fe:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 8003a04:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	70da      	strb	r2, [r3, #3]
	}
	//restore volume level
	eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	490e      	ldr	r1, [pc, #56]	@ (8003a48 <restore_from_eeprom+0x6e0>)
 8003a0e:	200b      	movs	r0, #11
 8003a10:	f001 ff4e 	bl	80058b0 <eeprom_read>
	if(dab_management.audio_volume > 63)
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a16:	7b9b      	ldrb	r3, [r3, #14]
 8003a18:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a1a:	d907      	bls.n	8003a2c <restore_from_eeprom+0x6c4>
	{
		dab_management.audio_volume = 63;
 8003a1c:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a1e:	223f      	movs	r2, #63	@ 0x3f
 8003a20:	739a      	strb	r2, [r3, #14]
		eeprom_write(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8003a22:	2201      	movs	r2, #1
 8003a24:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <restore_from_eeprom+0x6e0>)
 8003a26:	200b      	movs	r0, #11
 8003a28:	f001 ff60 	bl	80058ec <eeprom_write>
	}
	Si468x_set_audio_volume(dab_management.audio_volume);
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a2e:	7b9b      	ldrb	r3, [r3, #14]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fbcf 	bl	80031d4 <Si468x_set_audio_volume>
}
 8003a36:	bf00      	nop
 8003a38:	3750      	adds	r7, #80	@ 0x50
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	0800e564 	.word	0x0800e564
 8003a44:	20004bc4 	.word	0x20004bc4
 8003a48:	20004bd2 	.word	0x20004bd2

08003a4c <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
	return services_list;
 8003a50:	4b02      	ldr	r3, [pc, #8]	@ (8003a5c <get_dab_service_list+0x10>)
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	20003774 	.word	0x20003774

08003a60 <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	return ensembles_list;
 8003a64:	4b02      	ldr	r3, [pc, #8]	@ (8003a70 <get_dab_ensemble_list+0x10>)
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20003634 	.word	0x20003634

08003a74 <get_dab_management>:

dab_management_t get_dab_management()
{
 8003a74:	b490      	push	{r4, r7}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	return dab_management;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <get_dab_management+0x20>)
 8003a80:	461c      	mov	r4, r3
 8003a82:	4613      	mov	r3, r2
 8003a84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc90      	pop	{r4, r7}
 8003a92:	4770      	bx	lr
 8003a94:	20004bc4 	.word	0x20004bc4

08003a98 <get_dls_label>:

char* get_dls_label()
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
	return dls_label;
 8003a9c:	4b02      	ldr	r3, [pc, #8]	@ (8003aa8 <get_dls_label+0x10>)
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20004bd4 	.word	0x20004bd4

08003aac <Alarming_Mode_1_On>:
#include "leds.h"

static alarming_status_t alarming_status;

void Alarming_Mode_1_On()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_1;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <Alarming_Mode_1_On+0x20>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
	LEDs_Red_On();
 8003ab6:	f002 fa1d 	bl	8005ef4 <LEDs_Red_On>
	LEDs_Green_Off();
 8003aba:	f002 fa3f 	bl	8005f3c <LEDs_Green_Off>
	LEDs_Blue_Off();
 8003abe:	f002 fa55 	bl	8005f6c <LEDs_Blue_Off>
	LEDs_Orange_Off();
 8003ac2:	f002 fa6b 	bl	8005f9c <LEDs_Orange_Off>

}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20006d8c 	.word	0x20006d8c

08003ad0 <Alarming_Mode_2_On>:

void Alarming_Mode_2_On()
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_2;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <Alarming_Mode_2_On+0x20>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 8003ada:	f002 fa17 	bl	8005f0c <LEDs_Red_Off>
	LEDs_Green_Off();
 8003ade:	f002 fa2d 	bl	8005f3c <LEDs_Green_Off>
	LEDs_Blue_On();
 8003ae2:	f002 fa37 	bl	8005f54 <LEDs_Blue_On>
	LEDs_Orange_Off();
 8003ae6:	f002 fa59 	bl	8005f9c <LEDs_Orange_Off>

}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20006d8c 	.word	0x20006d8c

08003af4 <Alarming_Mode_3_On>:

void Alarming_Mode_3_On()
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_3;
 8003af8:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <Alarming_Mode_3_On+0x20>)
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 8003afe:	f002 fa05 	bl	8005f0c <LEDs_Red_Off>
	LEDs_Green_Off();
 8003b02:	f002 fa1b 	bl	8005f3c <LEDs_Green_Off>
	LEDs_Blue_Off();
 8003b06:	f002 fa31 	bl	8005f6c <LEDs_Blue_Off>
	LEDs_Orange_On();
 8003b0a:	f002 fa3b 	bl	8005f84 <LEDs_Orange_On>

}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20006d8c 	.word	0x20006d8c

08003b18 <Alarming_Off>:

void Alarming_Off()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	alarming_status =  alarming_off;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <Alarming_Off+0x20>)
 8003b1e:	2203      	movs	r2, #3
 8003b20:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 8003b22:	f002 f9f3 	bl	8005f0c <LEDs_Red_Off>
	LEDs_Green_On();
 8003b26:	f002 f9fd 	bl	8005f24 <LEDs_Green_On>
	LEDs_Blue_Off();
 8003b2a:	f002 fa1f 	bl	8005f6c <LEDs_Blue_Off>
	LEDs_Orange_Off();
 8003b2e:	f002 fa35 	bl	8005f9c <LEDs_Orange_Off>

}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20006d8c 	.word	0x20006d8c

08003b3c <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fc fb47 	bl	80001dc <strlen>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	2364      	movs	r3, #100	@ 0x64
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	480a      	ldr	r0, [pc, #40]	@ (8003b84 <send_debug_msg+0x48>)
 8003b5c:	f009 fa83 	bl	800d066 <HAL_UART_Transmit>

	if(is_crlf)
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8003b66:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003b6a:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003b6c:	f107 010c 	add.w	r1, r7, #12
 8003b70:	2364      	movs	r3, #100	@ 0x64
 8003b72:	2202      	movs	r2, #2
 8003b74:	4803      	ldr	r0, [pc, #12]	@ (8003b84 <send_debug_msg+0x48>)
 8003b76:	f009 fa76 	bl	800d066 <HAL_UART_Transmit>
	}
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20007194 	.word	0x20007194

08003b88 <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[129];

void Display_clear_screen()
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fc feac 	bl	80008ec <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 8003b94:	2311      	movs	r3, #17
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003b9c:	2211      	movs	r2, #17
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8003ba4:	f7fc ff2d 	bl	8000a02 <ILI9341_Draw_Line>
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <Display_booting_screen>:

void Display_booting_screen()
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	af00      	add	r7, sp, #0
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
	*/
	ILI9341_Draw_Start_Screen();
 8003bb2:	f7fd fa71 	bl	8001098 <ILI9341_Draw_Start_Screen>
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <Display_main_screen_background>:

void Display_main_screen_background()
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 8003bc2:	f7ff ffe1 	bl	8003b88 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2);
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	4b40      	ldr	r3, [pc, #256]	@ (8003ccc <Display_main_screen_background+0x110>)
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	2005      	movs	r0, #5
 8003bd8:	f7fc ff94 	bl	8000b04 <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8003bdc:	2328      	movs	r3, #40	@ 0x28
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	238c      	movs	r3, #140	@ 0x8c
 8003be2:	2214      	movs	r2, #20
 8003be4:	2105      	movs	r1, #5
 8003be6:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003bea:	f7fc fee9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003bee:	2341      	movs	r3, #65	@ 0x41
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	238c      	movs	r3, #140	@ 0x8c
 8003bf4:	222d      	movs	r2, #45	@ 0x2d
 8003bf6:	2105      	movs	r1, #5
 8003bf8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003bfc:	f7fc fee0 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003c00:	235a      	movs	r3, #90	@ 0x5a
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	238c      	movs	r3, #140	@ 0x8c
 8003c06:	2246      	movs	r2, #70	@ 0x46
 8003c08:	2105      	movs	r1, #5
 8003c0a:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c0e:	f7fc fed7 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003c12:	2373      	movs	r3, #115	@ 0x73
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	238c      	movs	r3, #140	@ 0x8c
 8003c18:	225f      	movs	r2, #95	@ 0x5f
 8003c1a:	2105      	movs	r1, #5
 8003c1c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c20:	f7fc fece 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003c24:	238c      	movs	r3, #140	@ 0x8c
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	238c      	movs	r3, #140	@ 0x8c
 8003c2a:	2278      	movs	r2, #120	@ 0x78
 8003c2c:	2105      	movs	r1, #5
 8003c2e:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c32:	f7fc fec5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003c36:	23a5      	movs	r3, #165	@ 0xa5
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	238c      	movs	r3, #140	@ 0x8c
 8003c3c:	2291      	movs	r2, #145	@ 0x91
 8003c3e:	2105      	movs	r1, #5
 8003c40:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c44:	f7fc febc 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003c48:	23be      	movs	r3, #190	@ 0xbe
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	238c      	movs	r3, #140	@ 0x8c
 8003c4e:	22aa      	movs	r2, #170	@ 0xaa
 8003c50:	2105      	movs	r1, #5
 8003c52:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c56:	f7fc feb3 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8003c5a:	23be      	movs	r3, #190	@ 0xbe
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	f240 133b 	movw	r3, #315	@ 0x13b
 8003c62:	2214      	movs	r2, #20
 8003c64:	2191      	movs	r1, #145	@ 0x91
 8003c66:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c6a:	f7fc fea9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003c6e:	23eb      	movs	r3, #235	@ 0xeb
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	239d      	movs	r3, #157	@ 0x9d
 8003c74:	22c3      	movs	r2, #195	@ 0xc3
 8003c76:	2105      	movs	r1, #5
 8003c78:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8003c7c:	f7fc fea0 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003c80:	23eb      	movs	r3, #235	@ 0xeb
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	f240 133b 	movw	r3, #315	@ 0x13b
 8003c88:	22c3      	movs	r2, #195	@ 0xc3
 8003c8a:	21a3      	movs	r1, #163	@ 0xa3
 8003c8c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8003c90:	f7fc fe96 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(53, 207, WHITE, ORANGE, "ALARMING", 2);
 8003c94:	2302      	movs	r3, #2
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <Display_main_screen_background+0x114>)
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8003ca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ca4:	21cf      	movs	r1, #207	@ 0xcf
 8003ca6:	2035      	movs	r0, #53	@ 0x35
 8003ca8:	f7fc ff2c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8003cac:	2302      	movs	r3, #2
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <Display_main_screen_background+0x118>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8003cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cbc:	21cf      	movs	r1, #207	@ 0xcf
 8003cbe:	20c0      	movs	r0, #192	@ 0xc0
 8003cc0:	f7fc ff20 	bl	8000b04 <ILI9341_Draw_String>
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	0800e698 	.word	0x0800e698
 8003cd0:	0800e6a8 	.word	0x0800e6a8
 8003cd4:	0800e6b4 	.word	0x0800e6b4

08003cd8 <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 8003cd8:	b082      	sub	sp, #8
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af02      	add	r7, sp, #8
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
 8003ce4:	f107 0118 	add.w	r1, r7, #24
 8003ce8:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 8003cec:	7efb      	ldrb	r3, [r7, #27]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2334      	movs	r3, #52	@ 0x34
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	9200      	str	r2, [sp, #0]
 8003d02:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d0a:	2117      	movs	r1, #23
 8003d0c:	2008      	movs	r0, #8
 8003d0e:	f7fc fef9 	bl	8000b04 <ILI9341_Draw_String>
//
//	//BAr3
//	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);

	//Bar 4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 8003d12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d14:	2b63      	cmp	r3, #99	@ 0x63
 8003d16:	d81e      	bhi.n	8003d56 <Display_main_screen_data+0x7e>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003d18:	2302      	movs	r3, #2
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	4b82      	ldr	r3, [pc, #520]	@ (8003f28 <Display_main_screen_data+0x250>)
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d28:	217b      	movs	r1, #123	@ 0x7b
 8003d2a:	2008      	movs	r0, #8
 8003d2c:	f7fc feea 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003d30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d32:	220a      	movs	r2, #10
 8003d34:	497d      	ldr	r1, [pc, #500]	@ (8003f2c <Display_main_screen_data+0x254>)
 8003d36:	4618      	mov	r0, r3
 8003d38:	f009 fd22 	bl	800d780 <itoa>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2202      	movs	r2, #2
 8003d40:	9201      	str	r2, [sp, #4]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d4c:	217b      	movs	r1, #123	@ 0x7b
 8003d4e:	2011      	movs	r0, #17
 8003d50:	f7fc fed8 	bl	8000b04 <ILI9341_Draw_String>
 8003d54:	e011      	b.n	8003d7a <Display_main_screen_data+0xa2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003d56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d58:	220a      	movs	r2, #10
 8003d5a:	4974      	ldr	r1, [pc, #464]	@ (8003f2c <Display_main_screen_data+0x254>)
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f009 fd0f 	bl	800d780 <itoa>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2202      	movs	r2, #2
 8003d66:	9201      	str	r2, [sp, #4]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d72:	217b      	movs	r1, #123	@ 0x7b
 8003d74:	2008      	movs	r0, #8
 8003d76:	f7fc fec5 	bl	8000b04 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	4b6c      	ldr	r3, [pc, #432]	@ (8003f30 <Display_main_screen_data+0x258>)
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d8a:	217b      	movs	r1, #123	@ 0x7b
 8003d8c:	2024      	movs	r0, #36	@ 0x24
 8003d8e:	f7fc feb9 	bl	8000b04 <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 8003d92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003d94:	220a      	movs	r2, #10
 8003d96:	4965      	ldr	r1, [pc, #404]	@ (8003f2c <Display_main_screen_data+0x254>)
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f009 fcf1 	bl	800d780 <itoa>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2202      	movs	r2, #2
 8003da2:	9201      	str	r2, [sp, #4]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dae:	217b      	movs	r1, #123	@ 0x7b
 8003db0:	204e      	movs	r0, #78	@ 0x4e
 8003db2:	f7fc fea7 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 8003db6:	2302      	movs	r3, #2
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	4b5e      	ldr	r3, [pc, #376]	@ (8003f34 <Display_main_screen_data+0x25c>)
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003dc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dc6:	217b      	movs	r1, #123	@ 0x7b
 8003dc8:	207a      	movs	r0, #122	@ 0x7a
 8003dca:	f7fc fe9b 	bl	8000b04 <ILI9341_Draw_String>

	//Bar 5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e022      	b.n	8003e1a <Display_main_screen_data+0x142>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	015b      	lsls	r3, r3, #5
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	4413      	add	r3, r2
 8003ddc:	7f1a      	ldrb	r2, [r3, #28]
 8003dde:	7efb      	ldrb	r3, [r7, #27]
 8003de0:	4619      	mov	r1, r3
 8003de2:	2334      	movs	r3, #52	@ 0x34
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	440b      	add	r3, r1
 8003dec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d10f      	bne.n	8003e14 <Display_main_screen_data+0x13c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	015b      	lsls	r3, r3, #5
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	2202      	movs	r2, #2
 8003e00:	9201      	str	r2, [sp, #4]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e0c:	2194      	movs	r1, #148	@ 0x94
 8003e0e:	2008      	movs	r0, #8
 8003e10:	f7fc fe78 	bl	8000b04 <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	3301      	adds	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	7e7b      	ldrb	r3, [r7, #25]
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3d8      	bcc.n	8003dd4 <Display_main_screen_data+0xfc>
		}
	}

	//Bar 6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003e22:	7efb      	ldrb	r3, [r7, #27]
 8003e24:	461a      	mov	r2, r3
 8003e26:	2334      	movs	r3, #52	@ 0x34
 8003e28:	fb02 f303 	mul.w	r3, r2, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	4a41      	ldr	r2, [pc, #260]	@ (8003f38 <Display_main_screen_data+0x260>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	493b      	ldr	r1, [pc, #236]	@ (8003f2c <Display_main_screen_data+0x254>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f009 fc9e 	bl	800d780 <itoa>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2202      	movs	r2, #2
 8003e48:	9201      	str	r2, [sp, #4]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e54:	21ad      	movs	r1, #173	@ 0xad
 8003e56:	2008      	movs	r0, #8
 8003e58:	f7fc fe54 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <Display_main_screen_data+0x264>)
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e6c:	21ad      	movs	r1, #173	@ 0xad
 8003e6e:	201f      	movs	r0, #31
 8003e70:	f7fc fe48 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003e74:	7efb      	ldrb	r3, [r7, #27]
 8003e76:	461a      	mov	r2, r3
 8003e78:	2334      	movs	r3, #52	@ 0x34
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e84:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <Display_main_screen_data+0x260>)
 8003e86:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	220a      	movs	r2, #10
 8003e98:	4924      	ldr	r1, [pc, #144]	@ (8003f2c <Display_main_screen_data+0x254>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f009 fc70 	bl	800d780 <itoa>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	9201      	str	r2, [sp, #4]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003eac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eb0:	21ad      	movs	r1, #173	@ 0xad
 8003eb2:	2026      	movs	r0, #38	@ 0x26
 8003eb4:	f7fc fe26 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003eb8:	2302      	movs	r3, #2
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <Display_main_screen_data+0x268>)
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003ec4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ec8:	21ad      	movs	r1, #173	@ 0xad
 8003eca:	2041      	movs	r0, #65	@ 0x41
 8003ecc:	f7fc fe1a 	bl	8000b04 <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <Display_main_screen_data+0x26c>)
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ee0:	21ad      	movs	r1, #173	@ 0xad
 8003ee2:	205f      	movs	r0, #95	@ 0x5f
 8003ee4:	f7fc fe0e 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003ee8:	7efb      	ldrb	r3, [r7, #27]
 8003eea:	461a      	mov	r2, r3
 8003eec:	2334      	movs	r3, #52	@ 0x34
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <Display_main_screen_data+0x270>)
 8003efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f02:	2202      	movs	r2, #2
 8003f04:	9201      	str	r2, [sp, #4]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f10:	21ad      	movs	r1, #173	@ 0xad
 8003f12:	2073      	movs	r0, #115	@ 0x73
 8003f14:	f7fc fdf6 	bl	8000b04 <ILI9341_Draw_String>

	//Station picture

}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f22:	b002      	add	sp, #8
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	0800e6c4 	.word	0x0800e6c4
 8003f2c:	20006d90 	.word	0x20006d90
 8003f30:	0800e6c8 	.word	0x0800e6c8
 8003f34:	0800e6d0 	.word	0x0800e6d0
 8003f38:	10624dd3 	.word	0x10624dd3
 8003f3c:	0800e6d4 	.word	0x0800e6d4
 8003f40:	0800e6d8 	.word	0x0800e6d8
 8003f44:	0800e6dc 	.word	0x0800e6dc
 8003f48:	200000ac 	.word	0x200000ac

08003f4c <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 8003f54:	4919      	ldr	r1, [pc, #100]	@ (8003fbc <Display_main_screen_dls+0x70>)
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc f936 	bl	80001c8 <strcmp>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d027      	beq.n	8003fb2 <Display_main_screen_dls+0x66>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 8003f62:	2302      	movs	r3, #2
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	4b16      	ldr	r3, [pc, #88]	@ (8003fc0 <Display_main_screen_dls+0x74>)
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f72:	2130      	movs	r1, #48	@ 0x30
 8003f74:	2008      	movs	r0, #8
 8003f76:	f7fc fdc5 	bl	8000b04 <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f8a:	2130      	movs	r1, #48	@ 0x30
 8003f8c:	2008      	movs	r0, #8
 8003f8e:	f7fc fdb9 	bl	8000b04 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 129; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
 8003f96:	e009      	b.n	8003fac <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	441a      	add	r2, r3
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	7811      	ldrb	r1, [r2, #0]
 8003fa2:	4a06      	ldr	r2, [pc, #24]	@ (8003fbc <Display_main_screen_dls+0x70>)
 8003fa4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 129; i++)
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b80      	cmp	r3, #128	@ 0x80
 8003fb0:	d9f2      	bls.n	8003f98 <Display_main_screen_dls+0x4c>
		}
	}
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20006dd0 	.word	0x20006dd0
 8003fc0:	0800e6e0 	.word	0x0800e6e0

08003fc4 <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003fca:	2302      	movs	r3, #2
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	4b2a      	ldr	r3, [pc, #168]	@ (8004078 <Display_main_screen_empty+0xb4>)
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fda:	2117      	movs	r1, #23
 8003fdc:	2008      	movs	r0, #8
 8003fde:	f7fc fd91 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	4b25      	ldr	r3, [pc, #148]	@ (800407c <Display_main_screen_empty+0xb8>)
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ff2:	2130      	movs	r1, #48	@ 0x30
 8003ff4:	2008      	movs	r0, #8
 8003ff6:	f7fc fd85 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	4b20      	ldr	r3, [pc, #128]	@ (8004080 <Display_main_screen_empty+0xbc>)
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800400a:	2149      	movs	r1, #73	@ 0x49
 800400c:	2008      	movs	r0, #8
 800400e:	f7fc fd79 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8004012:	2302      	movs	r3, #2
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <Display_main_screen_empty+0xc0>)
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800401e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004022:	2162      	movs	r1, #98	@ 0x62
 8004024:	2008      	movs	r0, #8
 8004026:	f7fc fd6d 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 800402a:	2302      	movs	r3, #2
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	4b16      	ldr	r3, [pc, #88]	@ (8004088 <Display_main_screen_empty+0xc4>)
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004036:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800403a:	217b      	movs	r1, #123	@ 0x7b
 800403c:	2008      	movs	r0, #8
 800403e:	f7fc fd61 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8004042:	2302      	movs	r3, #2
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	4b11      	ldr	r3, [pc, #68]	@ (800408c <Display_main_screen_empty+0xc8>)
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800404e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004052:	2194      	movs	r1, #148	@ 0x94
 8004054:	2008      	movs	r0, #8
 8004056:	f7fc fd55 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 800405a:	2302      	movs	r3, #2
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <Display_main_screen_empty+0xc8>)
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004066:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800406a:	21ad      	movs	r1, #173	@ 0xad
 800406c:	2008      	movs	r0, #8
 800406e:	f7fc fd49 	bl	8000b04 <ILI9341_Draw_String>
}
 8004072:	bf00      	nop
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	0800e760 	.word	0x0800e760
 800407c:	0800e774 	.word	0x0800e774
 8004080:	0800e788 	.word	0x0800e788
 8004084:	0800e79c 	.word	0x0800e79c
 8004088:	0800e7b0 	.word	0x0800e7b0
 800408c:	0800e7c4 	.word	0x0800e7c4

08004090 <Display_stations_list_background>:


void Display_stations_list_background()
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af02      	add	r7, sp, #8
	//clear screen
	Display_clear_screen();
 8004096:	f7ff fd77 	bl	8003b88 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2);
 800409a:	2302      	movs	r3, #2
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	4b59      	ldr	r3, [pc, #356]	@ (8004204 <Display_stations_list_background+0x174>)
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2300      	movs	r3, #0
 80040a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040a8:	2101      	movs	r1, #1
 80040aa:	2005      	movs	r0, #5
 80040ac:	f7fc fd2a 	bl	8000b04 <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 80040b0:	2332      	movs	r3, #50	@ 0x32
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	f240 131d 	movw	r3, #285	@ 0x11d
 80040b8:	2214      	movs	r2, #20
 80040ba:	2105      	movs	r1, #5
 80040bc:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040c0:	f7fc fc7e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 80040c4:	2355      	movs	r3, #85	@ 0x55
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	f240 131d 	movw	r3, #285	@ 0x11d
 80040cc:	2237      	movs	r2, #55	@ 0x37
 80040ce:	2105      	movs	r1, #5
 80040d0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040d4:	f7fc fc74 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 80040d8:	2378      	movs	r3, #120	@ 0x78
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f240 131d 	movw	r3, #285	@ 0x11d
 80040e0:	225a      	movs	r2, #90	@ 0x5a
 80040e2:	2105      	movs	r1, #5
 80040e4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040e8:	f7fc fc6a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 80040ec:	239b      	movs	r3, #155	@ 0x9b
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f240 131d 	movw	r3, #285	@ 0x11d
 80040f4:	227d      	movs	r2, #125	@ 0x7d
 80040f6:	2105      	movs	r1, #5
 80040f8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040fc:	f7fc fc60 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 8004100:	23be      	movs	r3, #190	@ 0xbe
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	f240 131d 	movw	r3, #285	@ 0x11d
 8004108:	22a0      	movs	r2, #160	@ 0xa0
 800410a:	2105      	movs	r1, #5
 800410c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004110:	f7fc fc56 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8004114:	2366      	movs	r3, #102	@ 0x66
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	f240 133b 	movw	r3, #315	@ 0x13b
 800411c:	2214      	movs	r2, #20
 800411e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004122:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004126:	f7fc fc4b 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 800412a:	2302      	movs	r3, #2
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	4b36      	ldr	r3, [pc, #216]	@ (8004208 <Display_stations_list_background+0x178>)
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800413a:	2138      	movs	r1, #56	@ 0x38
 800413c:	f240 1027 	movw	r0, #295	@ 0x127
 8004140:	f7fc fce0 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 8004144:	2302      	movs	r3, #2
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	4b30      	ldr	r3, [pc, #192]	@ (800420c <Display_stations_list_background+0x17c>)
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004150:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004154:	2138      	movs	r1, #56	@ 0x38
 8004156:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 800415a:	f7fc fcd3 	bl	8000b04 <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 800415e:	23be      	movs	r3, #190	@ 0xbe
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	f240 133b 	movw	r3, #315	@ 0x13b
 8004166:	226c      	movs	r2, #108	@ 0x6c
 8004168:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800416c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004170:	f7fc fc26 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 8004174:	2302      	movs	r3, #2
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	4b24      	ldr	r3, [pc, #144]	@ (800420c <Display_stations_list_background+0x17c>)
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004180:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004184:	2192      	movs	r1, #146	@ 0x92
 8004186:	f240 1027 	movw	r0, #295	@ 0x127
 800418a:	f7fc fcbb 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 800418e:	2302      	movs	r3, #2
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <Display_stations_list_background+0x178>)
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800419a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800419e:	2192      	movs	r1, #146	@ 0x92
 80041a0:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 80041a4:	f7fc fcae 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80041a8:	23eb      	movs	r3, #235	@ 0xeb
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	239d      	movs	r3, #157	@ 0x9d
 80041ae:	22c3      	movs	r2, #195	@ 0xc3
 80041b0:	2105      	movs	r1, #5
 80041b2:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80041b6:	f7fc fc03 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80041ba:	23eb      	movs	r3, #235	@ 0xeb
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	f240 133b 	movw	r3, #315	@ 0x13b
 80041c2:	22c3      	movs	r2, #195	@ 0xc3
 80041c4:	21a3      	movs	r1, #163	@ 0xa3
 80041c6:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80041ca:	f7fc fbf9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 80041ce:	2302      	movs	r3, #2
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004210 <Display_stations_list_background+0x180>)
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80041da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041de:	21cf      	movs	r1, #207	@ 0xcf
 80041e0:	2025      	movs	r0, #37	@ 0x25
 80041e2:	f7fc fc8f 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 80041e6:	2302      	movs	r3, #2
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <Display_stations_list_background+0x184>)
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80041f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041f6:	21cf      	movs	r1, #207	@ 0xcf
 80041f8:	20c3      	movs	r0, #195	@ 0xc3
 80041fa:	f7fc fc83 	bl	8000b04 <ILI9341_Draw_String>

}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	0800e7d8 	.word	0x0800e7d8
 8004208:	0800e7ec 	.word	0x0800e7ec
 800420c:	0800e7f0 	.word	0x0800e7f0
 8004210:	0800e7f4 	.word	0x0800e7f4
 8004214:	0800e800 	.word	0x0800e800

08004218 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 8004218:	b084      	sub	sp, #16
 800421a:	b590      	push	{r4, r7, lr}
 800421c:	b087      	sub	sp, #28
 800421e:	af02      	add	r7, sp, #8
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//check if stations list is not empty
	if(_dab_management.total_services)
 800422a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8133 	beq.w	800449a <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e12a      	b.n	8004490 <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 800423a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800423e:	4619      	mov	r1, r3
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	4299      	cmp	r1, r3
 8004248:	dc02      	bgt.n	8004250 <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	425b      	negs	r3, r3
 800424e:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	2b08      	cmp	r3, #8
 8004258:	dc30      	bgt.n	80042bc <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00da      	lsls	r2, r3, #3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	331c      	adds	r3, #28
 8004268:	4619      	mov	r1, r3
 800426a:	2302      	movs	r3, #2
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	4bac      	ldr	r3, [pc, #688]	@ (8004520 <Display_stations_list_data+0x308>)
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004276:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800427a:	2008      	movs	r0, #8
 800427c:	f7fc fc42 	bl	8000b04 <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00da      	lsls	r2, r3, #3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	331c      	adds	r3, #28
 800428e:	461c      	mov	r4, r3
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	3301      	adds	r3, #1
 8004298:	220a      	movs	r2, #10
 800429a:	49a2      	ldr	r1, [pc, #648]	@ (8004524 <Display_stations_list_data+0x30c>)
 800429c:	4618      	mov	r0, r3
 800429e:	f009 fa6f 	bl	800d780 <itoa>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2202      	movs	r2, #2
 80042a6:	9201      	str	r2, [sp, #4]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80042ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042b2:	4621      	mov	r1, r4
 80042b4:	2011      	movs	r0, #17
 80042b6:	f7fc fc25 	bl	8000b04 <ILI9341_Draw_String>
 80042ba:	e01c      	b.n	80042f6 <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	00da      	lsls	r2, r3, #3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	331c      	adds	r3, #28
 80042ca:	461c      	mov	r4, r3
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	3301      	adds	r3, #1
 80042d4:	220a      	movs	r2, #10
 80042d6:	4993      	ldr	r1, [pc, #588]	@ (8004524 <Display_stations_list_data+0x30c>)
 80042d8:	4618      	mov	r0, r3
 80042da:	f009 fa51 	bl	800d780 <itoa>
 80042de:	4603      	mov	r3, r0
 80042e0:	2202      	movs	r2, #2
 80042e2:	9201      	str	r2, [sp, #4]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80042ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042ee:	4621      	mov	r1, r4
 80042f0:	2008      	movs	r0, #8
 80042f2:	f7fc fc07 	bl	8000b04 <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00da      	lsls	r2, r3, #3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	331c      	adds	r3, #28
 8004304:	4619      	mov	r1, r3
 8004306:	2302      	movs	r3, #2
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	4b87      	ldr	r3, [pc, #540]	@ (8004528 <Display_stations_list_data+0x310>)
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004316:	2018      	movs	r0, #24
 8004318:	f7fc fbf4 	bl	8000b04 <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	00da      	lsls	r2, r3, #3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	331c      	adds	r3, #28
 800432a:	4619      	mov	r1, r3
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	461a      	mov	r2, r3
 8004334:	2334      	movs	r3, #52	@ 0x34
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800433c:	4413      	add	r3, r2
 800433e:	461a      	mov	r2, r3
 8004340:	2302      	movs	r3, #2
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800434a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800434e:	2022      	movs	r0, #34	@ 0x22
 8004350:	f7fc fbd8 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	00da      	lsls	r2, r3, #3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	331c      	adds	r3, #28
 8004362:	4619      	mov	r1, r3
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	461a      	mov	r2, r3
 800436c:	2334      	movs	r3, #52	@ 0x34
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004374:	4413      	add	r3, r2
 8004376:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800437a:	461a      	mov	r2, r3
 800437c:	4b6b      	ldr	r3, [pc, #428]	@ (800452c <Display_stations_list_data+0x314>)
 800437e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004382:	2202      	movs	r2, #2
 8004384:	9201      	str	r2, [sp, #4]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800438c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004390:	20ab      	movs	r0, #171	@ 0xab
 8004392:	f7fc fbb7 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00da      	lsls	r2, r3, #3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	331c      	adds	r3, #28
 80043a4:	461c      	mov	r4, r3
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4413      	add	r3, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	2334      	movs	r3, #52	@ 0x34
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043b6:	4413      	add	r3, r2
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004530 <Display_stations_list_data+0x318>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	099b      	lsrs	r3, r3, #6
 80043c2:	220a      	movs	r2, #10
 80043c4:	4957      	ldr	r1, [pc, #348]	@ (8004524 <Display_stations_list_data+0x30c>)
 80043c6:	4618      	mov	r0, r3
 80043c8:	f009 f9da 	bl	800d780 <itoa>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2202      	movs	r2, #2
 80043d0:	9201      	str	r2, [sp, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80043d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043dc:	4621      	mov	r1, r4
 80043de:	20ca      	movs	r0, #202	@ 0xca
 80043e0:	f7fc fb90 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 80043e4:	7bfa      	ldrb	r2, [r7, #15]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	00da      	lsls	r2, r3, #3
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	331c      	adds	r3, #28
 80043f2:	4619      	mov	r1, r3
 80043f4:	2302      	movs	r3, #2
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <Display_stations_list_data+0x310>)
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004400:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004404:	20e1      	movs	r0, #225	@ 0xe1
 8004406:	f7fc fb7d 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00da      	lsls	r2, r3, #3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	331c      	adds	r3, #28
 8004418:	461c      	mov	r4, r3
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	461a      	mov	r2, r3
 8004422:	2334      	movs	r3, #52	@ 0x34
 8004424:	fb02 f303 	mul.w	r3, r2, r3
 8004428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800442a:	4413      	add	r3, r2
 800442c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800442e:	4b40      	ldr	r3, [pc, #256]	@ (8004530 <Display_stations_list_data+0x318>)
 8004430:	fba3 1302 	umull	r1, r3, r3, r2
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	220a      	movs	r2, #10
 8004442:	4938      	ldr	r1, [pc, #224]	@ (8004524 <Display_stations_list_data+0x30c>)
 8004444:	4618      	mov	r0, r3
 8004446:	f009 f99b 	bl	800d780 <itoa>
 800444a:	4603      	mov	r3, r0
 800444c:	2202      	movs	r2, #2
 800444e:	9201      	str	r2, [sp, #4]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004456:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800445a:	4621      	mov	r1, r4
 800445c:	20e8      	movs	r0, #232	@ 0xe8
 800445e:	f7fc fb51 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 8004462:	7bfa      	ldrb	r2, [r7, #15]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	00da      	lsls	r2, r3, #3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	331c      	adds	r3, #28
 8004470:	4619      	mov	r1, r3
 8004472:	2302      	movs	r3, #2
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	4b2f      	ldr	r3, [pc, #188]	@ (8004534 <Display_stations_list_data+0x31c>)
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800447e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004482:	f240 1003 	movw	r0, #259	@ 0x103
 8004486:	f7fc fb3d 	bl	8000b04 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	3301      	adds	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b04      	cmp	r3, #4
 8004494:	f67f aed1 	bls.w	800423a <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 8004498:	e03b      	b.n	8004512 <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 800449a:	2302      	movs	r3, #2
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	4b26      	ldr	r3, [pc, #152]	@ (8004538 <Display_stations_list_data+0x320>)
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044aa:	211c      	movs	r1, #28
 80044ac:	2008      	movs	r0, #8
 80044ae:	f7fc fb29 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 80044b2:	2302      	movs	r3, #2
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	4b21      	ldr	r3, [pc, #132]	@ (800453c <Display_stations_list_data+0x324>)
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044c2:	213f      	movs	r1, #63	@ 0x3f
 80044c4:	2008      	movs	r0, #8
 80044c6:	f7fc fb1d 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 80044ca:	2302      	movs	r3, #2
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004540 <Display_stations_list_data+0x328>)
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044da:	2162      	movs	r1, #98	@ 0x62
 80044dc:	2008      	movs	r0, #8
 80044de:	f7fc fb11 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 80044e2:	2302      	movs	r3, #2
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	4b17      	ldr	r3, [pc, #92]	@ (8004544 <Display_stations_list_data+0x32c>)
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044f2:	2185      	movs	r1, #133	@ 0x85
 80044f4:	2008      	movs	r0, #8
 80044f6:	f7fc fb05 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 80044fa:	2302      	movs	r3, #2
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <Display_stations_list_data+0x330>)
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800450a:	21a8      	movs	r1, #168	@ 0xa8
 800450c:	2008      	movs	r0, #8
 800450e:	f7fc faf9 	bl	8000b04 <ILI9341_Draw_String>
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800451c:	b004      	add	sp, #16
 800451e:	4770      	bx	lr
 8004520:	0800e6c4 	.word	0x0800e6c4
 8004524:	20006d90 	.word	0x20006d90
 8004528:	0800e6d4 	.word	0x0800e6d4
 800452c:	200000ac 	.word	0x200000ac
 8004530:	10624dd3 	.word	0x10624dd3
 8004534:	0800e6d8 	.word	0x0800e6d8
 8004538:	0800e80c 	.word	0x0800e80c
 800453c:	0800e824 	.word	0x0800e824
 8004540:	0800e83c 	.word	0x0800e83c
 8004544:	0800e854 	.word	0x0800e854
 8004548:	0800e870 	.word	0x0800e870

0800454c <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 8004552:	f7ff fb19 	bl	8003b88 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2);
 8004556:	2302      	movs	r3, #2
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	4b64      	ldr	r3, [pc, #400]	@ (80046ec <Display_scanning_screen_background+0x1a0>)
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004564:	2101      	movs	r1, #1
 8004566:	2005      	movs	r0, #5
 8004568:	f7fc facc 	bl	8000b04 <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 800456c:	2328      	movs	r3, #40	@ 0x28
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	f240 133b 	movw	r3, #315	@ 0x13b
 8004574:	2214      	movs	r2, #20
 8004576:	2105      	movs	r1, #5
 8004578:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800457c:	f7fc fa20 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 8004580:	2302      	movs	r3, #2
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	4b5a      	ldr	r3, [pc, #360]	@ (80046f0 <Display_scanning_screen_background+0x1a4>)
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800458c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004590:	2117      	movs	r1, #23
 8004592:	2050      	movs	r0, #80	@ 0x50
 8004594:	f7fc fab6 	bl	8000b04 <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8004598:	2341      	movs	r3, #65	@ 0x41
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	f240 133b 	movw	r3, #315	@ 0x13b
 80045a0:	222d      	movs	r2, #45	@ 0x2d
 80045a2:	2105      	movs	r1, #5
 80045a4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045a8:	f7fc fa0a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80045ac:	235a      	movs	r3, #90	@ 0x5a
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	f240 133b 	movw	r3, #315	@ 0x13b
 80045b4:	2246      	movs	r2, #70	@ 0x46
 80045b6:	2105      	movs	r1, #5
 80045b8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045bc:	f7fc fa00 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 80045c0:	2302      	movs	r3, #2
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	4b4b      	ldr	r3, [pc, #300]	@ (80046f4 <Display_scanning_screen_background+0x1a8>)
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80045cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045d0:	2149      	movs	r1, #73	@ 0x49
 80045d2:	200a      	movs	r0, #10
 80045d4:	f7fc fa96 	bl	8000b04 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80045d8:	2373      	movs	r3, #115	@ 0x73
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	f240 133b 	movw	r3, #315	@ 0x13b
 80045e0:	225f      	movs	r2, #95	@ 0x5f
 80045e2:	2105      	movs	r1, #5
 80045e4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045e8:	f7fc f9ea 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 80045ec:	2302      	movs	r3, #2
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	4b41      	ldr	r3, [pc, #260]	@ (80046f8 <Display_scanning_screen_background+0x1ac>)
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80045f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045fc:	2162      	movs	r1, #98	@ 0x62
 80045fe:	200a      	movs	r0, #10
 8004600:	f7fc fa80 	bl	8000b04 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004604:	238c      	movs	r3, #140	@ 0x8c
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	f240 133b 	movw	r3, #315	@ 0x13b
 800460c:	2278      	movs	r2, #120	@ 0x78
 800460e:	2105      	movs	r1, #5
 8004610:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004614:	f7fc f9d4 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 8004618:	2302      	movs	r3, #2
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <Display_scanning_screen_background+0x1b0>)
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004624:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004628:	217b      	movs	r1, #123	@ 0x7b
 800462a:	200a      	movs	r0, #10
 800462c:	f7fc fa6a 	bl	8000b04 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004630:	23a5      	movs	r3, #165	@ 0xa5
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	f240 133b 	movw	r3, #315	@ 0x13b
 8004638:	2291      	movs	r2, #145	@ 0x91
 800463a:	2105      	movs	r1, #5
 800463c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004640:	f7fc f9be 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 8004644:	2302      	movs	r3, #2
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	4b2d      	ldr	r3, [pc, #180]	@ (8004700 <Display_scanning_screen_background+0x1b4>)
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004654:	2194      	movs	r1, #148	@ 0x94
 8004656:	200a      	movs	r0, #10
 8004658:	f7fc fa54 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 800465c:	2302      	movs	r3, #2
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	4b28      	ldr	r3, [pc, #160]	@ (8004704 <Display_scanning_screen_background+0x1b8>)
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004668:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800466c:	2194      	movs	r1, #148	@ 0x94
 800466e:	2078      	movs	r0, #120	@ 0x78
 8004670:	f7fc fa48 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 8004674:	2302      	movs	r3, #2
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	4b23      	ldr	r3, [pc, #140]	@ (8004708 <Display_scanning_screen_background+0x1bc>)
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004684:	2194      	movs	r1, #148	@ 0x94
 8004686:	209e      	movs	r0, #158	@ 0x9e
 8004688:	f7fc fa3c 	bl	8000b04 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 800468c:	23be      	movs	r3, #190	@ 0xbe
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	f240 133b 	movw	r3, #315	@ 0x13b
 8004694:	22aa      	movs	r2, #170	@ 0xaa
 8004696:	2105      	movs	r1, #5
 8004698:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800469c:	f7fc f990 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 80046a0:	2302      	movs	r3, #2
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	4b19      	ldr	r3, [pc, #100]	@ (800470c <Display_scanning_screen_background+0x1c0>)
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80046ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046b0:	21ad      	movs	r1, #173	@ 0xad
 80046b2:	200a      	movs	r0, #10
 80046b4:	f7fc fa26 	bl	8000b04 <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80046b8:	23eb      	movs	r3, #235	@ 0xeb
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	f240 133b 	movw	r3, #315	@ 0x13b
 80046c0:	22c3      	movs	r2, #195	@ 0xc3
 80046c2:	2105      	movs	r1, #5
 80046c4:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80046c8:	f7fc f97a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 80046cc:	2302      	movs	r3, #2
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <Display_scanning_screen_background+0x1c4>)
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80046d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046dc:	21cf      	movs	r1, #207	@ 0xcf
 80046de:	2082      	movs	r0, #130	@ 0x82
 80046e0:	f7fc fa10 	bl	8000b04 <ILI9341_Draw_String>
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	0800e888 	.word	0x0800e888
 80046f0:	0800e898 	.word	0x0800e898
 80046f4:	0800e8b0 	.word	0x0800e8b0
 80046f8:	0800e8c4 	.word	0x0800e8c4
 80046fc:	0800e8d4 	.word	0x0800e8d4
 8004700:	0800e8e4 	.word	0x0800e8e4
 8004704:	0800e6d4 	.word	0x0800e6d4
 8004708:	0800e6d8 	.word	0x0800e6d8
 800470c:	0800e8f0 	.word	0x0800e8f0
 8004710:	0800e8fc 	.word	0x0800e8fc

08004714 <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 8004714:	b084      	sub	sp, #16
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af02      	add	r7, sp, #8
 800471c:	f107 0c08 	add.w	ip, r7, #8
 8004720:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 8004724:	7d3b      	ldrb	r3, [r7, #20]
 8004726:	3301      	adds	r3, #1
 8004728:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004734:	fb93 f3f2 	sdiv	r3, r3, r2
 8004738:	330a      	adds	r3, #10
 800473a:	461a      	mov	r2, r3
 800473c:	233c      	movs	r3, #60	@ 0x3c
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	2232      	movs	r2, #50	@ 0x32
 8004744:	210a      	movs	r1, #10
 8004746:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800474a:	f7fc f939 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 800474e:	7d3b      	ldrb	r3, [r7, #20]
 8004750:	3301      	adds	r3, #1
 8004752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800475e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004762:	330a      	adds	r3, #10
 8004764:	4619      	mov	r1, r3
 8004766:	233c      	movs	r3, #60	@ 0x3c
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800476e:	2232      	movs	r2, #50	@ 0x32
 8004770:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004774:	f7fc f924 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 8004778:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800477c:	220a      	movs	r2, #10
 800477e:	4954      	ldr	r1, [pc, #336]	@ (80048d0 <Display_scanning_screen_data+0x1bc>)
 8004780:	4618      	mov	r0, r3
 8004782:	f008 fffd 	bl	800d780 <itoa>
 8004786:	4603      	mov	r3, r0
 8004788:	2202      	movs	r2, #2
 800478a:	9201      	str	r2, [sp, #4]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004796:	2149      	movs	r1, #73	@ 0x49
 8004798:	2091      	movs	r0, #145	@ 0x91
 800479a:	f7fc f9b3 	bl	8000b04 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 800479e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80047a2:	220a      	movs	r2, #10
 80047a4:	494a      	ldr	r1, [pc, #296]	@ (80048d0 <Display_scanning_screen_data+0x1bc>)
 80047a6:	4618      	mov	r0, r3
 80047a8:	f008 ffea 	bl	800d780 <itoa>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2202      	movs	r2, #2
 80047b0:	9201      	str	r2, [sp, #4]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047bc:	2162      	movs	r1, #98	@ 0x62
 80047be:	2087      	movs	r0, #135	@ 0x87
 80047c0:	f7fc f9a0 	bl	8000b04 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 80047c4:	7d3b      	ldrb	r3, [r7, #20]
 80047c6:	3301      	adds	r3, #1
 80047c8:	220a      	movs	r2, #10
 80047ca:	4941      	ldr	r1, [pc, #260]	@ (80048d0 <Display_scanning_screen_data+0x1bc>)
 80047cc:	4618      	mov	r0, r3
 80047ce:	f008 ffd7 	bl	800d780 <itoa>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2202      	movs	r2, #2
 80047d6:	9201      	str	r2, [sp, #4]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047e2:	217b      	movs	r1, #123	@ 0x7b
 80047e4:	2076      	movs	r0, #118	@ 0x76
 80047e6:	f7fc f98d 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 80047ea:	2302      	movs	r3, #2
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	4b39      	ldr	r3, [pc, #228]	@ (80048d4 <Display_scanning_screen_data+0x1c0>)
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047fa:	217b      	movs	r1, #123	@ 0x7b
 80047fc:	2089      	movs	r0, #137	@ 0x89
 80047fe:	f7fc f981 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 8004802:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004806:	220a      	movs	r2, #10
 8004808:	4931      	ldr	r1, [pc, #196]	@ (80048d0 <Display_scanning_screen_data+0x1bc>)
 800480a:	4618      	mov	r0, r3
 800480c:	f008 ffb8 	bl	800d780 <itoa>
 8004810:	4603      	mov	r3, r0
 8004812:	2202      	movs	r2, #2
 8004814:	9201      	str	r2, [sp, #4]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800481c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004820:	217b      	movs	r1, #123	@ 0x7b
 8004822:	2093      	movs	r0, #147	@ 0x93
 8004824:	f7fc f96e 	bl	8000b04 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4a2b      	ldr	r2, [pc, #172]	@ (80048d8 <Display_scanning_screen_data+0x1c4>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	220a      	movs	r2, #10
 8004834:	4926      	ldr	r1, [pc, #152]	@ (80048d0 <Display_scanning_screen_data+0x1bc>)
 8004836:	4618      	mov	r0, r3
 8004838:	f008 ffa2 	bl	800d780 <itoa>
 800483c:	4603      	mov	r3, r0
 800483e:	2202      	movs	r2, #2
 8004840:	9201      	str	r2, [sp, #4]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004848:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800484c:	2194      	movs	r1, #148	@ 0x94
 800484e:	205f      	movs	r0, #95	@ 0x5f
 8004850:	f7fc f958 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4b20      	ldr	r3, [pc, #128]	@ (80048d8 <Display_scanning_screen_data+0x1c4>)
 8004858:	fba3 1302 	umull	r1, r3, r3, r2
 800485c:	099b      	lsrs	r3, r3, #6
 800485e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	220a      	movs	r2, #10
 800486a:	4919      	ldr	r1, [pc, #100]	@ (80048d0 <Display_scanning_screen_data+0x1bc>)
 800486c:	4618      	mov	r0, r3
 800486e:	f008 ff87 	bl	800d780 <itoa>
 8004872:	4603      	mov	r3, r0
 8004874:	2202      	movs	r2, #2
 8004876:	9201      	str	r2, [sp, #4]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800487e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004882:	2194      	movs	r1, #148	@ 0x94
 8004884:	2081      	movs	r0, #129	@ 0x81
 8004886:	f7fc f93d 	bl	8000b04 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 800488a:	2302      	movs	r3, #2
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	4b13      	ldr	r3, [pc, #76]	@ (80048dc <Display_scanning_screen_data+0x1c8>)
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800489a:	21ad      	movs	r1, #173	@ 0xad
 800489c:	2050      	movs	r0, #80	@ 0x50
 800489e:	f7fc f931 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 80048a2:	7d3b      	ldrb	r3, [r7, #20]
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <Display_scanning_screen_data+0x1cc>)
 80048a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ac:	2202      	movs	r2, #2
 80048ae:	9201      	str	r2, [sp, #4]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80048b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048ba:	21ad      	movs	r1, #173	@ 0xad
 80048bc:	2050      	movs	r0, #80	@ 0x50
 80048be:	f7fc f921 	bl	8000b04 <ILI9341_Draw_String>
}
 80048c2:	bf00      	nop
 80048c4:	46bd      	mov	sp, r7
 80048c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ca:	b004      	add	sp, #16
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20006d90 	.word	0x20006d90
 80048d4:	0800e7ec 	.word	0x0800e7ec
 80048d8:	10624dd3 	.word	0x10624dd3
 80048dc:	0800e904 	.word	0x0800e904
 80048e0:	200000ac 	.word	0x200000ac

080048e4 <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 80048ea:	2328      	movs	r3, #40	@ 0x28
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	f240 133b 	movw	r3, #315	@ 0x13b
 80048f2:	2214      	movs	r2, #20
 80048f4:	2105      	movs	r1, #5
 80048f6:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80048fa:	f7fc f861 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 80048fe:	2302      	movs	r3, #2
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <Display_scanning_screen_complete+0x64>)
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800490a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800490e:	2117      	movs	r1, #23
 8004910:	2050      	movs	r0, #80	@ 0x50
 8004912:	f7fc f8f7 	bl	8000b04 <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8004916:	23eb      	movs	r3, #235	@ 0xeb
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	f240 133b 	movw	r3, #315	@ 0x13b
 800491e:	22c3      	movs	r2, #195	@ 0xc3
 8004920:	2105      	movs	r1, #5
 8004922:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004926:	f7fc f84b 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 800492a:	2302      	movs	r3, #2
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	4b07      	ldr	r3, [pc, #28]	@ (800494c <Display_scanning_screen_complete+0x68>)
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800493a:	21cf      	movs	r1, #207	@ 0xcf
 800493c:	2082      	movs	r0, #130	@ 0x82
 800493e:	f7fc f8e1 	bl	8000b04 <ILI9341_Draw_String>
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	0800e90c 	.word	0x0800e90c
 800494c:	0800e924 	.word	0x0800e924

08004950 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af02      	add	r7, sp, #8
	//Clear Screen
	Display_clear_screen();
 8004956:	f7ff f917 	bl	8003b88 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2);
 800495a:	2302      	movs	r3, #2
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	4bb4      	ldr	r3, [pc, #720]	@ (8004c30 <Display_dab_digrad_status_background+0x2e0>)
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2300      	movs	r3, #0
 8004964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004968:	2101      	movs	r1, #1
 800496a:	2005      	movs	r0, #5
 800496c:	f7fc f8ca 	bl	8000b04 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 8004970:	2328      	movs	r3, #40	@ 0x28
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2369      	movs	r3, #105	@ 0x69
 8004976:	2214      	movs	r2, #20
 8004978:	2105      	movs	r1, #5
 800497a:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800497e:	f7fc f81f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 8004982:	2328      	movs	r3, #40	@ 0x28
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	23d2      	movs	r3, #210	@ 0xd2
 8004988:	2214      	movs	r2, #20
 800498a:	216e      	movs	r1, #110	@ 0x6e
 800498c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004990:	f7fc f816 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 8004994:	2328      	movs	r3, #40	@ 0x28
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	f240 133b 	movw	r3, #315	@ 0x13b
 800499c:	2214      	movs	r2, #20
 800499e:	21d7      	movs	r1, #215	@ 0xd7
 80049a0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049a4:	f7fc f80c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80049a8:	2341      	movs	r3, #65	@ 0x41
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	f240 133b 	movw	r3, #315	@ 0x13b
 80049b0:	222d      	movs	r2, #45	@ 0x2d
 80049b2:	2105      	movs	r1, #5
 80049b4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049b8:	f7fc f802 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 80049bc:	2302      	movs	r3, #2
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	4b9c      	ldr	r3, [pc, #624]	@ (8004c34 <Display_dab_digrad_status_background+0x2e4>)
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80049c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049cc:	2130      	movs	r1, #48	@ 0x30
 80049ce:	200a      	movs	r0, #10
 80049d0:	f7fc f898 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 80049d4:	2302      	movs	r3, #2
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	4b97      	ldr	r3, [pc, #604]	@ (8004c38 <Display_dab_digrad_status_background+0x2e8>)
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80049e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049e4:	2130      	movs	r1, #48	@ 0x30
 80049e6:	205a      	movs	r0, #90	@ 0x5a
 80049e8:	f7fc f88c 	bl	8000b04 <ILI9341_Draw_String>

	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80049ec:	235a      	movs	r3, #90	@ 0x5a
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	f240 133b 	movw	r3, #315	@ 0x13b
 80049f4:	2246      	movs	r2, #70	@ 0x46
 80049f6:	2105      	movs	r1, #5
 80049f8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049fc:	f7fb ffe0 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8004a00:	2302      	movs	r3, #2
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	4b8d      	ldr	r3, [pc, #564]	@ (8004c3c <Display_dab_digrad_status_background+0x2ec>)
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a10:	2149      	movs	r1, #73	@ 0x49
 8004a12:	200a      	movs	r0, #10
 8004a14:	f7fc f876 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8004a18:	2302      	movs	r3, #2
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	4b88      	ldr	r3, [pc, #544]	@ (8004c40 <Display_dab_digrad_status_background+0x2f0>)
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a28:	2149      	movs	r1, #73	@ 0x49
 8004a2a:	2069      	movs	r0, #105	@ 0x69
 8004a2c:	f7fc f86a 	bl	8000b04 <ILI9341_Draw_String>

	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004a30:	2373      	movs	r3, #115	@ 0x73
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	f240 133b 	movw	r3, #315	@ 0x13b
 8004a38:	225f      	movs	r2, #95	@ 0x5f
 8004a3a:	2105      	movs	r1, #5
 8004a3c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004a40:	f7fb ffbe 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 8004a44:	2302      	movs	r3, #2
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	4b7e      	ldr	r3, [pc, #504]	@ (8004c44 <Display_dab_digrad_status_background+0x2f4>)
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a54:	2162      	movs	r1, #98	@ 0x62
 8004a56:	200a      	movs	r0, #10
 8004a58:	f7fc f854 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	4b77      	ldr	r3, [pc, #476]	@ (8004c40 <Display_dab_digrad_status_background+0x2f0>)
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a6c:	2162      	movs	r1, #98	@ 0x62
 8004a6e:	2069      	movs	r0, #105	@ 0x69
 8004a70:	f7fc f848 	bl	8000b04 <ILI9341_Draw_String>

	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004a74:	238c      	movs	r3, #140	@ 0x8c
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	f240 133b 	movw	r3, #315	@ 0x13b
 8004a7c:	2278      	movs	r2, #120	@ 0x78
 8004a7e:	2105      	movs	r1, #5
 8004a80:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004a84:	f7fb ff9c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 8004a88:	2302      	movs	r3, #2
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	4b6e      	ldr	r3, [pc, #440]	@ (8004c48 <Display_dab_digrad_status_background+0x2f8>)
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a98:	217b      	movs	r1, #123	@ 0x7b
 8004a9a:	200a      	movs	r0, #10
 8004a9c:	f7fc f832 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	4b69      	ldr	r3, [pc, #420]	@ (8004c4c <Display_dab_digrad_status_background+0x2fc>)
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004aac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ab0:	217b      	movs	r1, #123	@ 0x7b
 8004ab2:	206e      	movs	r0, #110	@ 0x6e
 8004ab4:	f7fc f826 	bl	8000b04 <ILI9341_Draw_String>

	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004ab8:	23a5      	movs	r3, #165	@ 0xa5
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	f240 133b 	movw	r3, #315	@ 0x13b
 8004ac0:	2291      	movs	r2, #145	@ 0x91
 8004ac2:	2105      	movs	r1, #5
 8004ac4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004ac8:	f7fb ff7a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8004acc:	2302      	movs	r3, #2
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8004c50 <Display_dab_digrad_status_background+0x300>)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004adc:	2194      	movs	r1, #148	@ 0x94
 8004ade:	200a      	movs	r0, #10
 8004ae0:	f7fc f810 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8004c54 <Display_dab_digrad_status_background+0x304>)
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004af0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004af4:	2194      	movs	r1, #148	@ 0x94
 8004af6:	2071      	movs	r0, #113	@ 0x71
 8004af8:	f7fc f804 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8004afc:	2302      	movs	r3, #2
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	4b55      	ldr	r3, [pc, #340]	@ (8004c58 <Display_dab_digrad_status_background+0x308>)
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b0c:	2194      	movs	r1, #148	@ 0x94
 8004b0e:	2094      	movs	r0, #148	@ 0x94
 8004b10:	f7fb fff8 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8004b14:	2302      	movs	r3, #2
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	4b50      	ldr	r3, [pc, #320]	@ (8004c5c <Display_dab_digrad_status_background+0x30c>)
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b24:	2194      	movs	r1, #148	@ 0x94
 8004b26:	20b7      	movs	r0, #183	@ 0xb7
 8004b28:	f7fb ffec 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	4b4b      	ldr	r3, [pc, #300]	@ (8004c60 <Display_dab_digrad_status_background+0x310>)
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b3c:	2194      	movs	r1, #148	@ 0x94
 8004b3e:	20db      	movs	r0, #219	@ 0xdb
 8004b40:	f7fb ffe0 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8004b44:	2302      	movs	r3, #2
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	4b46      	ldr	r3, [pc, #280]	@ (8004c64 <Display_dab_digrad_status_background+0x314>)
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b54:	2194      	movs	r1, #148	@ 0x94
 8004b56:	f240 101b 	movw	r0, #283	@ 0x11b
 8004b5a:	f7fb ffd3 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004b5e:	2302      	movs	r3, #2
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	4b41      	ldr	r3, [pc, #260]	@ (8004c68 <Display_dab_digrad_status_background+0x318>)
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b6e:	2194      	movs	r1, #148	@ 0x94
 8004b70:	f240 1025 	movw	r0, #293	@ 0x125
 8004b74:	f7fb ffc6 	bl	8000b04 <ILI9341_Draw_String>

	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004b78:	23be      	movs	r3, #190	@ 0xbe
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	f240 133b 	movw	r3, #315	@ 0x13b
 8004b80:	22aa      	movs	r2, #170	@ 0xaa
 8004b82:	2105      	movs	r1, #5
 8004b84:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004b88:	f7fb ff1a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <Display_dab_digrad_status_background+0x31c>)
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b9c:	21ad      	movs	r1, #173	@ 0xad
 8004b9e:	200a      	movs	r0, #10
 8004ba0:	f7fb ffb0 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	4b31      	ldr	r3, [pc, #196]	@ (8004c70 <Display_dab_digrad_status_background+0x320>)
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb4:	21ad      	movs	r1, #173	@ 0xad
 8004bb6:	207d      	movs	r0, #125	@ 0x7d
 8004bb8:	f7fb ffa4 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8004c74 <Display_dab_digrad_status_background+0x324>)
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bcc:	21ad      	movs	r1, #173	@ 0xad
 8004bce:	20b4      	movs	r0, #180	@ 0xb4
 8004bd0:	f7fb ff98 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004bd4:	23eb      	movs	r3, #235	@ 0xeb
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	239d      	movs	r3, #157	@ 0x9d
 8004bda:	22c3      	movs	r2, #195	@ 0xc3
 8004bdc:	2105      	movs	r1, #5
 8004bde:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004be2:	f7fb feed 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004be6:	23eb      	movs	r3, #235	@ 0xeb
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	f240 133b 	movw	r3, #315	@ 0x13b
 8004bee:	22c3      	movs	r2, #195	@ 0xc3
 8004bf0:	21a3      	movs	r1, #163	@ 0xa3
 8004bf2:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004bf6:	f7fb fee3 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004c78 <Display_dab_digrad_status_background+0x328>)
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c0a:	21cf      	movs	r1, #207	@ 0xcf
 8004c0c:	2023      	movs	r0, #35	@ 0x23
 8004c0e:	f7fb ff79 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8004c12:	2302      	movs	r3, #2
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <Display_dab_digrad_status_background+0x32c>)
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c22:	21cf      	movs	r1, #207	@ 0xcf
 8004c24:	20cd      	movs	r0, #205	@ 0xcd
 8004c26:	f7fb ff6d 	bl	8000b04 <ILI9341_Draw_String>
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	0800e92c 	.word	0x0800e92c
 8004c34:	0800e940 	.word	0x0800e940
 8004c38:	0800e948 	.word	0x0800e948
 8004c3c:	0800e950 	.word	0x0800e950
 8004c40:	0800e954 	.word	0x0800e954
 8004c44:	0800e958 	.word	0x0800e958
 8004c48:	0800e95c 	.word	0x0800e95c
 8004c4c:	0800e964 	.word	0x0800e964
 8004c50:	0800e968 	.word	0x0800e968
 8004c54:	0800e6d4 	.word	0x0800e6d4
 8004c58:	0800e6d8 	.word	0x0800e6d8
 8004c5c:	0800e974 	.word	0x0800e974
 8004c60:	0800e97c 	.word	0x0800e97c
 8004c64:	0800e7ec 	.word	0x0800e7ec
 8004c68:	0800e984 	.word	0x0800e984
 8004c6c:	0800e988 	.word	0x0800e988
 8004c70:	0800e994 	.word	0x0800e994
 8004c74:	0800e998 	.word	0x0800e998
 8004c78:	0800e6b4 	.word	0x0800e6b4
 8004c7c:	0800e99c 	.word	0x0800e99c

08004c80 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004c80:	b084      	sub	sp, #16
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af02      	add	r7, sp, #8
 8004c88:	f107 0c18 	add.w	ip, r7, #24
 8004c8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004c90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c92:	461a      	mov	r2, r3
 8004c94:	23fa      	movs	r3, #250	@ 0xfa
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4a30      	ldr	r2, [pc, #192]	@ (8004d60 <Display_dab_digrad_status_data+0xe0>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	099b      	lsrs	r3, r3, #6
 8004ca6:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	4b2d      	ldr	r3, [pc, #180]	@ (8004d60 <Display_dab_digrad_status_data+0xe0>)
 8004cac:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb0:	099b      	lsrs	r3, r3, #6
 8004cb2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	80bb      	strh	r3, [r7, #4]

	//Valid
	if(digrad_status.valid)
 8004cbe:	7e7b      	ldrb	r3, [r7, #25]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00c      	beq.n	8004ce4 <Display_dab_digrad_status_data+0x64>
	{
		ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004cca:	2302      	movs	r3, #2
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	4b25      	ldr	r3, [pc, #148]	@ (8004d64 <Display_dab_digrad_status_data+0xe4>)
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004cd6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004cda:	2117      	movs	r1, #23
 8004cdc:	2023      	movs	r0, #35	@ 0x23
 8004cde:	f7fb ff11 	bl	8000b04 <ILI9341_Draw_String>
 8004ce2:	e00b      	b.n	8004cfc <Display_dab_digrad_status_data+0x7c>
	}
	else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d64 <Display_dab_digrad_status_data+0xe4>)
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004cf0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004cf4:	2117      	movs	r1, #23
 8004cf6:	2023      	movs	r0, #35	@ 0x23
 8004cf8:	f7fb ff04 	bl	8000b04 <ILI9341_Draw_String>

	//ACQ
	if(digrad_status.acq)
 8004cfc:	7e7b      	ldrb	r3, [r7, #25]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <Display_dab_digrad_status_data+0xa2>
	{
		ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8004d08:	2302      	movs	r3, #2
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	4b16      	ldr	r3, [pc, #88]	@ (8004d68 <Display_dab_digrad_status_data+0xe8>)
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d14:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004d18:	2117      	movs	r1, #23
 8004d1a:	2085      	movs	r0, #133	@ 0x85
 8004d1c:	f7fb fef2 	bl	8000b04 <ILI9341_Draw_String>
 8004d20:	e00b      	b.n	8004d3a <Display_dab_digrad_status_data+0xba>
	}
	else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004d22:	2302      	movs	r3, #2
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	4b10      	ldr	r3, [pc, #64]	@ (8004d68 <Display_dab_digrad_status_data+0xe8>)
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d2e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004d32:	2117      	movs	r1, #23
 8004d34:	2085      	movs	r0, #133	@ 0x85
 8004d36:	f7fb fee5 	bl	8000b04 <ILI9341_Draw_String>

	//FIC_ERROR
	if(digrad_status.fic_err)
 8004d3a:	7e7b      	ldrb	r3, [r7, #25]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d014      	beq.n	8004d70 <Display_dab_digrad_status_data+0xf0>
	{
		ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004d46:	2302      	movs	r3, #2
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <Display_dab_digrad_status_data+0xec>)
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d52:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004d56:	2117      	movs	r1, #23
 8004d58:	20e4      	movs	r0, #228	@ 0xe4
 8004d5a:	f7fb fed3 	bl	8000b04 <ILI9341_Draw_String>
 8004d5e:	e013      	b.n	8004d88 <Display_dab_digrad_status_data+0x108>
 8004d60:	10624dd3 	.word	0x10624dd3
 8004d64:	0800e9a8 	.word	0x0800e9a8
 8004d68:	0800e9b0 	.word	0x0800e9b0
 8004d6c:	0800e9b8 	.word	0x0800e9b8
	}
	else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004d70:	2302      	movs	r3, #2
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	4bb6      	ldr	r3, [pc, #728]	@ (8005050 <Display_dab_digrad_status_data+0x3d0>)
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d7c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004d80:	2117      	movs	r1, #23
 8004d82:	20e4      	movs	r0, #228	@ 0xe4
 8004d84:	f7fb febe 	bl	8000b04 <ILI9341_Draw_String>

	//RSSI
	if(digrad_status.rssi <= 13) 								color = RED;
 8004d88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d8c:	2b0d      	cmp	r3, #13
 8004d8e:	dc02      	bgt.n	8004d96 <Display_dab_digrad_status_data+0x116>
 8004d90:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004d94:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8004d96:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d9a:	2b1a      	cmp	r3, #26
 8004d9c:	dc06      	bgt.n	8004dac <Display_dab_digrad_status_data+0x12c>
 8004d9e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004da2:	2b0d      	cmp	r3, #13
 8004da4:	dd02      	ble.n	8004dac <Display_dab_digrad_status_data+0x12c>
 8004da6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004daa:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004dac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004db0:	2b27      	cmp	r3, #39	@ 0x27
 8004db2:	dc06      	bgt.n	8004dc2 <Display_dab_digrad_status_data+0x142>
 8004db4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004db8:	2b1a      	cmp	r3, #26
 8004dba:	dd02      	ble.n	8004dc2 <Display_dab_digrad_status_data+0x142>
 8004dbc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004dc0:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004dc2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dc6:	2b34      	cmp	r3, #52	@ 0x34
 8004dc8:	dc06      	bgt.n	8004dd8 <Display_dab_digrad_status_data+0x158>
 8004dca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dce:	2b27      	cmp	r3, #39	@ 0x27
 8004dd0:	dd02      	ble.n	8004dd8 <Display_dab_digrad_status_data+0x158>
 8004dd2:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004dd6:	60fb      	str	r3, [r7, #12]
	if(digrad_status.rssi > 52) 								color = GREEN;
 8004dd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004ddc:	2b34      	cmp	r3, #52	@ 0x34
 8004dde:	dd02      	ble.n	8004de6 <Display_dab_digrad_status_data+0x166>
 8004de0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004de4:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8004de6:	2302      	movs	r3, #2
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	4b9a      	ldr	r3, [pc, #616]	@ (8005054 <Display_dab_digrad_status_data+0x3d4>)
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004df2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004df6:	2130      	movs	r1, #48	@ 0x30
 8004df8:	2032      	movs	r0, #50	@ 0x32
 8004dfa:	f7fb fe83 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004dfe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e02:	220a      	movs	r2, #10
 8004e04:	4994      	ldr	r1, [pc, #592]	@ (8005058 <Display_dab_digrad_status_data+0x3d8>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f008 fcba 	bl	800d780 <itoa>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2202      	movs	r2, #2
 8004e10:	9201      	str	r2, [sp, #4]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e1c:	2130      	movs	r1, #48	@ 0x30
 8004e1e:	2032      	movs	r0, #50	@ 0x32
 8004e20:	f7fb fe70 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8004e24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	23b4      	movs	r3, #180	@ 0xb4
 8004e2c:	fb02 f303 	mul.w	r3, r2, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	da00      	bge.n	8004e36 <Display_dab_digrad_status_data+0x1b6>
 8004e34:	333f      	adds	r3, #63	@ 0x3f
 8004e36:	119b      	asrs	r3, r3, #6
 8004e38:	3382      	adds	r3, #130	@ 0x82
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	233c      	movs	r3, #60	@ 0x3c
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	2232      	movs	r2, #50	@ 0x32
 8004e44:	2182      	movs	r1, #130	@ 0x82
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7fb fdba 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004e4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e50:	461a      	mov	r2, r3
 8004e52:	23b4      	movs	r3, #180	@ 0xb4
 8004e54:	fb02 f303 	mul.w	r3, r2, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	da00      	bge.n	8004e5e <Display_dab_digrad_status_data+0x1de>
 8004e5c:	333f      	adds	r3, #63	@ 0x3f
 8004e5e:	119b      	asrs	r3, r3, #6
 8004e60:	3382      	adds	r3, #130	@ 0x82
 8004e62:	4619      	mov	r1, r3
 8004e64:	233c      	movs	r3, #60	@ 0x3c
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004e6c:	2232      	movs	r2, #50	@ 0x32
 8004e6e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004e72:	f7fb fda5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//SNR
	if(digrad_status.snr <= 4) 									color = RED;
 8004e76:	7efb      	ldrb	r3, [r7, #27]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d802      	bhi.n	8004e82 <Display_dab_digrad_status_data+0x202>
 8004e7c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004e80:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004e82:	7efb      	ldrb	r3, [r7, #27]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d805      	bhi.n	8004e94 <Display_dab_digrad_status_data+0x214>
 8004e88:	7efb      	ldrb	r3, [r7, #27]
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d902      	bls.n	8004e94 <Display_dab_digrad_status_data+0x214>
 8004e8e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004e92:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004e94:	7efb      	ldrb	r3, [r7, #27]
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	d805      	bhi.n	8004ea6 <Display_dab_digrad_status_data+0x226>
 8004e9a:	7efb      	ldrb	r3, [r7, #27]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d902      	bls.n	8004ea6 <Display_dab_digrad_status_data+0x226>
 8004ea0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004ea4:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004ea6:	7efb      	ldrb	r3, [r7, #27]
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d805      	bhi.n	8004eb8 <Display_dab_digrad_status_data+0x238>
 8004eac:	7efb      	ldrb	r3, [r7, #27]
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d902      	bls.n	8004eb8 <Display_dab_digrad_status_data+0x238>
 8004eb2:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004eb6:	60fb      	str	r3, [r7, #12]
	if(digrad_status.snr > 16) 									color = GREEN;
 8004eb8:	7efb      	ldrb	r3, [r7, #27]
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d902      	bls.n	8004ec4 <Display_dab_digrad_status_data+0x244>
 8004ebe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004ec2:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	4b62      	ldr	r3, [pc, #392]	@ (8005054 <Display_dab_digrad_status_data+0x3d4>)
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ed4:	2149      	movs	r1, #73	@ 0x49
 8004ed6:	2032      	movs	r0, #50	@ 0x32
 8004ed8:	f7fb fe14 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004edc:	7efb      	ldrb	r3, [r7, #27]
 8004ede:	220a      	movs	r2, #10
 8004ee0:	495d      	ldr	r1, [pc, #372]	@ (8005058 <Display_dab_digrad_status_data+0x3d8>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f008 fc4c 	bl	800d780 <itoa>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2202      	movs	r2, #2
 8004eec:	9201      	str	r2, [sp, #4]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ef4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ef8:	2149      	movs	r1, #73	@ 0x49
 8004efa:	2032      	movs	r0, #50	@ 0x32
 8004efc:	f7fb fe02 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004f00:	7efb      	ldrb	r3, [r7, #27]
 8004f02:	461a      	mov	r2, r3
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3382      	adds	r3, #130	@ 0x82
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2355      	movs	r3, #85	@ 0x55
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	224b      	movs	r2, #75	@ 0x4b
 8004f16:	2182      	movs	r1, #130	@ 0x82
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7fb fd51 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004f1e:	7efb      	ldrb	r3, [r7, #27]
 8004f20:	461a      	mov	r2, r3
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	3382      	adds	r3, #130	@ 0x82
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	2355      	movs	r3, #85	@ 0x55
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004f34:	224b      	movs	r2, #75	@ 0x4b
 8004f36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004f3a:	f7fb fd41 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//CNR
	if(digrad_status.cnr <= 11) 								color = RED;
 8004f3e:	7f7b      	ldrb	r3, [r7, #29]
 8004f40:	2b0b      	cmp	r3, #11
 8004f42:	d802      	bhi.n	8004f4a <Display_dab_digrad_status_data+0x2ca>
 8004f44:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f48:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004f4a:	7f7b      	ldrb	r3, [r7, #29]
 8004f4c:	2b16      	cmp	r3, #22
 8004f4e:	d805      	bhi.n	8004f5c <Display_dab_digrad_status_data+0x2dc>
 8004f50:	7f7b      	ldrb	r3, [r7, #29]
 8004f52:	2b0b      	cmp	r3, #11
 8004f54:	d902      	bls.n	8004f5c <Display_dab_digrad_status_data+0x2dc>
 8004f56:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004f5a:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004f5c:	7f7b      	ldrb	r3, [r7, #29]
 8004f5e:	2b21      	cmp	r3, #33	@ 0x21
 8004f60:	d805      	bhi.n	8004f6e <Display_dab_digrad_status_data+0x2ee>
 8004f62:	7f7b      	ldrb	r3, [r7, #29]
 8004f64:	2b16      	cmp	r3, #22
 8004f66:	d902      	bls.n	8004f6e <Display_dab_digrad_status_data+0x2ee>
 8004f68:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004f6c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004f6e:	7f7b      	ldrb	r3, [r7, #29]
 8004f70:	2b2c      	cmp	r3, #44	@ 0x2c
 8004f72:	d805      	bhi.n	8004f80 <Display_dab_digrad_status_data+0x300>
 8004f74:	7f7b      	ldrb	r3, [r7, #29]
 8004f76:	2b21      	cmp	r3, #33	@ 0x21
 8004f78:	d902      	bls.n	8004f80 <Display_dab_digrad_status_data+0x300>
 8004f7a:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004f7e:	60fb      	str	r3, [r7, #12]
	if(digrad_status.cnr > 44) 									color = GREEN;
 8004f80:	7f7b      	ldrb	r3, [r7, #29]
 8004f82:	2b2c      	cmp	r3, #44	@ 0x2c
 8004f84:	d902      	bls.n	8004f8c <Display_dab_digrad_status_data+0x30c>
 8004f86:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004f8a:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	9301      	str	r3, [sp, #4]
 8004f90:	4b30      	ldr	r3, [pc, #192]	@ (8005054 <Display_dab_digrad_status_data+0x3d4>)
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004f98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f9c:	2162      	movs	r1, #98	@ 0x62
 8004f9e:	2032      	movs	r0, #50	@ 0x32
 8004fa0:	f7fb fdb0 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004fa4:	7f7b      	ldrb	r3, [r7, #29]
 8004fa6:	220a      	movs	r2, #10
 8004fa8:	492b      	ldr	r1, [pc, #172]	@ (8005058 <Display_dab_digrad_status_data+0x3d8>)
 8004faa:	4618      	mov	r0, r3
 8004fac:	f008 fbe8 	bl	800d780 <itoa>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	9201      	str	r2, [sp, #4]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004fbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fc0:	2162      	movs	r1, #98	@ 0x62
 8004fc2:	2032      	movs	r0, #50	@ 0x32
 8004fc4:	f7fb fd9e 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004fc8:	7f7b      	ldrb	r3, [r7, #29]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	23b4      	movs	r3, #180	@ 0xb4
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	4a22      	ldr	r2, [pc, #136]	@ (800505c <Display_dab_digrad_status_data+0x3dc>)
 8004fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8004fd8:	1112      	asrs	r2, r2, #4
 8004fda:	17db      	asrs	r3, r3, #31
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	3382      	adds	r3, #130	@ 0x82
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	236e      	movs	r3, #110	@ 0x6e
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	2264      	movs	r2, #100	@ 0x64
 8004fea:	2182      	movs	r1, #130	@ 0x82
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7fb fce7 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8004ff2:	7f7b      	ldrb	r3, [r7, #29]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	23b4      	movs	r3, #180	@ 0xb4
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	4a17      	ldr	r2, [pc, #92]	@ (800505c <Display_dab_digrad_status_data+0x3dc>)
 8004ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8005002:	1112      	asrs	r2, r2, #4
 8005004:	17db      	asrs	r3, r3, #31
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	3382      	adds	r3, #130	@ 0x82
 800500a:	4619      	mov	r1, r3
 800500c:	236e      	movs	r3, #110	@ 0x6e
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8005014:	2264      	movs	r2, #100	@ 0x64
 8005016:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800501a:	f7fb fcd1 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//FIC QUALITY
	if(digrad_status.fic_quality <= 20) 										color = RED;
 800501e:	7f3b      	ldrb	r3, [r7, #28]
 8005020:	2b14      	cmp	r3, #20
 8005022:	d802      	bhi.n	800502a <Display_dab_digrad_status_data+0x3aa>
 8005024:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005028:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 800502a:	7f3b      	ldrb	r3, [r7, #28]
 800502c:	2b28      	cmp	r3, #40	@ 0x28
 800502e:	d805      	bhi.n	800503c <Display_dab_digrad_status_data+0x3bc>
 8005030:	7f3b      	ldrb	r3, [r7, #28]
 8005032:	2b14      	cmp	r3, #20
 8005034:	d902      	bls.n	800503c <Display_dab_digrad_status_data+0x3bc>
 8005036:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800503a:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 800503c:	7f3b      	ldrb	r3, [r7, #28]
 800503e:	2b3c      	cmp	r3, #60	@ 0x3c
 8005040:	d80e      	bhi.n	8005060 <Display_dab_digrad_status_data+0x3e0>
 8005042:	7f3b      	ldrb	r3, [r7, #28]
 8005044:	2b28      	cmp	r3, #40	@ 0x28
 8005046:	d90b      	bls.n	8005060 <Display_dab_digrad_status_data+0x3e0>
 8005048:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e007      	b.n	8005060 <Display_dab_digrad_status_data+0x3e0>
 8005050:	0800e9b8 	.word	0x0800e9b8
 8005054:	0800e9c4 	.word	0x0800e9c4
 8005058:	20006d90 	.word	0x20006d90
 800505c:	4bda12f7 	.word	0x4bda12f7
	if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8005060:	7f3b      	ldrb	r3, [r7, #28]
 8005062:	2b50      	cmp	r3, #80	@ 0x50
 8005064:	d805      	bhi.n	8005072 <Display_dab_digrad_status_data+0x3f2>
 8005066:	7f3b      	ldrb	r3, [r7, #28]
 8005068:	2b3c      	cmp	r3, #60	@ 0x3c
 800506a:	d902      	bls.n	8005072 <Display_dab_digrad_status_data+0x3f2>
 800506c:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8005070:	60fb      	str	r3, [r7, #12]
	if(digrad_status.fic_quality > 80) 											color = GREEN;
 8005072:	7f3b      	ldrb	r3, [r7, #28]
 8005074:	2b50      	cmp	r3, #80	@ 0x50
 8005076:	d902      	bls.n	800507e <Display_dab_digrad_status_data+0x3fe>
 8005078:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800507c:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 800507e:	2302      	movs	r3, #2
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	4ba9      	ldr	r3, [pc, #676]	@ (8005328 <Display_dab_digrad_status_data+0x6a8>)
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800508a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800508e:	217b      	movs	r1, #123	@ 0x7b
 8005090:	204b      	movs	r0, #75	@ 0x4b
 8005092:	f7fb fd37 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8005096:	7f3b      	ldrb	r3, [r7, #28]
 8005098:	220a      	movs	r2, #10
 800509a:	49a4      	ldr	r1, [pc, #656]	@ (800532c <Display_dab_digrad_status_data+0x6ac>)
 800509c:	4618      	mov	r0, r3
 800509e:	f008 fb6f 	bl	800d780 <itoa>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2202      	movs	r2, #2
 80050a6:	9201      	str	r2, [sp, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80050ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050b2:	217b      	movs	r1, #123	@ 0x7b
 80050b4:	204b      	movs	r0, #75	@ 0x4b
 80050b6:	f7fb fd25 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 80050ba:	7f3b      	ldrb	r3, [r7, #28]
 80050bc:	461a      	mov	r2, r3
 80050be:	23b4      	movs	r3, #180	@ 0xb4
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	4a9a      	ldr	r2, [pc, #616]	@ (8005330 <Display_dab_digrad_status_data+0x6b0>)
 80050c6:	fb82 1203 	smull	r1, r2, r2, r3
 80050ca:	1152      	asrs	r2, r2, #5
 80050cc:	17db      	asrs	r3, r3, #31
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	3382      	adds	r3, #130	@ 0x82
 80050d2:	461a      	mov	r2, r3
 80050d4:	2387      	movs	r3, #135	@ 0x87
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	227d      	movs	r2, #125	@ 0x7d
 80050dc:	2182      	movs	r1, #130	@ 0x82
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7fb fc6e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 80050e4:	7f3b      	ldrb	r3, [r7, #28]
 80050e6:	461a      	mov	r2, r3
 80050e8:	23b4      	movs	r3, #180	@ 0xb4
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	4a90      	ldr	r2, [pc, #576]	@ (8005330 <Display_dab_digrad_status_data+0x6b0>)
 80050f0:	fb82 1203 	smull	r1, r2, r2, r3
 80050f4:	1152      	asrs	r2, r2, #5
 80050f6:	17db      	asrs	r3, r3, #31
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	3382      	adds	r3, #130	@ 0x82
 80050fc:	4619      	mov	r1, r3
 80050fe:	2387      	movs	r3, #135	@ 0x87
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8005106:	227d      	movs	r2, #125	@ 0x7d
 8005108:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800510c:	f7fb fc58 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//TUNE FREQ
	ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	4a88      	ldr	r2, [pc, #544]	@ (8005334 <Display_dab_digrad_status_data+0x6b4>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	099b      	lsrs	r3, r3, #6
 800511a:	220a      	movs	r2, #10
 800511c:	4983      	ldr	r1, [pc, #524]	@ (800532c <Display_dab_digrad_status_data+0x6ac>)
 800511e:	4618      	mov	r0, r3
 8005120:	f008 fb2e 	bl	800d780 <itoa>
 8005124:	4603      	mov	r3, r0
 8005126:	2202      	movs	r2, #2
 8005128:	9201      	str	r2, [sp, #4]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005130:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005134:	2194      	movs	r1, #148	@ 0x94
 8005136:	205b      	movs	r0, #91	@ 0x5b
 8005138:	f7fb fce4 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	4b7d      	ldr	r3, [pc, #500]	@ (8005334 <Display_dab_digrad_status_data+0x6b4>)
 8005140:	fba3 1302 	umull	r1, r3, r3, r2
 8005144:	099b      	lsrs	r3, r3, #6
 8005146:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	220a      	movs	r2, #10
 8005152:	4976      	ldr	r1, [pc, #472]	@ (800532c <Display_dab_digrad_status_data+0x6ac>)
 8005154:	4618      	mov	r0, r3
 8005156:	f008 fb13 	bl	800d780 <itoa>
 800515a:	4603      	mov	r3, r0
 800515c:	2202      	movs	r2, #2
 800515e:	9201      	str	r2, [sp, #4]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800516a:	2194      	movs	r1, #148	@ 0x94
 800516c:	2078      	movs	r0, #120	@ 0x78
 800516e:	f7fb fcc9 	bl	8000b04 <ILI9341_Draw_String>

	//TUNE INDEX
	if(digrad_status.tune_index < 10)
 8005172:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005176:	2b09      	cmp	r3, #9
 8005178:	d821      	bhi.n	80051be <Display_dab_digrad_status_data+0x53e>
	{
		ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 800517a:	2302      	movs	r3, #2
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	4b6e      	ldr	r3, [pc, #440]	@ (8005338 <Display_dab_digrad_status_data+0x6b8>)
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800518a:	2194      	movs	r1, #148	@ 0x94
 800518c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8005190:	f7fb fcb8 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8005194:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005198:	220a      	movs	r2, #10
 800519a:	4964      	ldr	r1, [pc, #400]	@ (800532c <Display_dab_digrad_status_data+0x6ac>)
 800519c:	4618      	mov	r0, r3
 800519e:	f008 faef 	bl	800d780 <itoa>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2202      	movs	r2, #2
 80051a6:	9201      	str	r2, [sp, #4]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051b2:	2194      	movs	r1, #148	@ 0x94
 80051b4:	f240 1011 	movw	r0, #273	@ 0x111
 80051b8:	f7fb fca4 	bl	8000b04 <ILI9341_Draw_String>
 80051bc:	e013      	b.n	80051e6 <Display_dab_digrad_status_data+0x566>
	}
	else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 80051be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051c2:	220a      	movs	r2, #10
 80051c4:	4959      	ldr	r1, [pc, #356]	@ (800532c <Display_dab_digrad_status_data+0x6ac>)
 80051c6:	4618      	mov	r0, r3
 80051c8:	f008 fada 	bl	800d780 <itoa>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2202      	movs	r2, #2
 80051d0:	9201      	str	r2, [sp, #4]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051dc:	2194      	movs	r1, #148	@ 0x94
 80051de:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80051e2:	f7fb fc8f 	bl	8000b04 <ILI9341_Draw_String>

	//ANT CAP TRIM
	if(cap_val_pf_int < 10)
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	2b09      	cmp	r3, #9
 80051ea:	d81d      	bhi.n	8005228 <Display_dab_digrad_status_data+0x5a8>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 80051ec:	2302      	movs	r3, #2
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	4b52      	ldr	r3, [pc, #328]	@ (800533c <Display_dab_digrad_status_data+0x6bc>)
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051fc:	21ad      	movs	r1, #173	@ 0xad
 80051fe:	204f      	movs	r0, #79	@ 0x4f
 8005200:	f7fb fc80 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	220a      	movs	r2, #10
 8005208:	4948      	ldr	r1, [pc, #288]	@ (800532c <Display_dab_digrad_status_data+0x6ac>)
 800520a:	4618      	mov	r0, r3
 800520c:	f008 fab8 	bl	800d780 <itoa>
 8005210:	4603      	mov	r3, r0
 8005212:	2202      	movs	r2, #2
 8005214:	9201      	str	r2, [sp, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800521c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005220:	21ad      	movs	r1, #173	@ 0xad
 8005222:	2057      	movs	r0, #87	@ 0x57
 8005224:	f7fb fc6e 	bl	8000b04 <ILI9341_Draw_String>
	}
	if(cap_val_pf_int >= 10)
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b09      	cmp	r3, #9
 800522c:	d911      	bls.n	8005252 <Display_dab_digrad_status_data+0x5d2>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	220a      	movs	r2, #10
 8005232:	493e      	ldr	r1, [pc, #248]	@ (800532c <Display_dab_digrad_status_data+0x6ac>)
 8005234:	4618      	mov	r0, r3
 8005236:	f008 faa3 	bl	800d780 <itoa>
 800523a:	4603      	mov	r3, r0
 800523c:	2202      	movs	r2, #2
 800523e:	9201      	str	r2, [sp, #4]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800524a:	21ad      	movs	r1, #173	@ 0xad
 800524c:	204f      	movs	r0, #79	@ 0x4f
 800524e:	f7fb fc59 	bl	8000b04 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 8005252:	2302      	movs	r3, #2
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	4b3a      	ldr	r3, [pc, #232]	@ (8005340 <Display_dab_digrad_status_data+0x6c0>)
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800525e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005262:	21ad      	movs	r1, #173	@ 0xad
 8005264:	205f      	movs	r0, #95	@ 0x5f
 8005266:	f7fb fc4d 	bl	8000b04 <ILI9341_Draw_String>
	switch(cap_val_pf_frac)
 800526a:	88bb      	ldrh	r3, [r7, #4]
 800526c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005270:	4293      	cmp	r3, r2
 8005272:	d023      	beq.n	80052bc <Display_dab_digrad_status_data+0x63c>
 8005274:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005278:	4293      	cmp	r3, r2
 800527a:	dc2c      	bgt.n	80052d6 <Display_dab_digrad_status_data+0x656>
 800527c:	2bfa      	cmp	r3, #250	@ 0xfa
 800527e:	d003      	beq.n	8005288 <Display_dab_digrad_status_data+0x608>
 8005280:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005284:	d00d      	beq.n	80052a2 <Display_dab_digrad_status_data+0x622>
 8005286:	e026      	b.n	80052d6 <Display_dab_digrad_status_data+0x656>
	{
	case 250:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 8005288:	2302      	movs	r3, #2
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	4b2d      	ldr	r3, [pc, #180]	@ (8005344 <Display_dab_digrad_status_data+0x6c4>)
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005294:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005298:	21ad      	movs	r1, #173	@ 0xad
 800529a:	2067      	movs	r0, #103	@ 0x67
 800529c:	f7fb fc32 	bl	8000b04 <ILI9341_Draw_String>
		break;
 80052a0:	e026      	b.n	80052f0 <Display_dab_digrad_status_data+0x670>
	case 500:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 80052a2:	2302      	movs	r3, #2
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <Display_dab_digrad_status_data+0x6c8>)
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052b2:	21ad      	movs	r1, #173	@ 0xad
 80052b4:	2067      	movs	r0, #103	@ 0x67
 80052b6:	f7fb fc25 	bl	8000b04 <ILI9341_Draw_String>
		break;
 80052ba:	e019      	b.n	80052f0 <Display_dab_digrad_status_data+0x670>
	case 750:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 80052bc:	2302      	movs	r3, #2
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	4b22      	ldr	r3, [pc, #136]	@ (800534c <Display_dab_digrad_status_data+0x6cc>)
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052cc:	21ad      	movs	r1, #173	@ 0xad
 80052ce:	2067      	movs	r0, #103	@ 0x67
 80052d0:	f7fb fc18 	bl	8000b04 <ILI9341_Draw_String>
		break;
 80052d4:	e00c      	b.n	80052f0 <Display_dab_digrad_status_data+0x670>
	default:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 80052d6:	2302      	movs	r3, #2
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	4b1d      	ldr	r3, [pc, #116]	@ (8005350 <Display_dab_digrad_status_data+0x6d0>)
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052e6:	21ad      	movs	r1, #173	@ 0xad
 80052e8:	2067      	movs	r0, #103	@ 0x67
 80052ea:	f7fb fc0b 	bl	8000b04 <ILI9341_Draw_String>
		break;
 80052ee:	bf00      	nop
	}

	//BER
	ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 80052f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	220a      	movs	r2, #10
 80052fa:	490c      	ldr	r1, [pc, #48]	@ (800532c <Display_dab_digrad_status_data+0x6ac>)
 80052fc:	4618      	mov	r0, r3
 80052fe:	f008 fa3f 	bl	800d780 <itoa>
 8005302:	4603      	mov	r3, r0
 8005304:	2202      	movs	r2, #2
 8005306:	9201      	str	r2, [sp, #4]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800530e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005312:	21ad      	movs	r1, #173	@ 0xad
 8005314:	20d7      	movs	r0, #215	@ 0xd7
 8005316:	f7fb fbf5 	bl	8000b04 <ILI9341_Draw_String>
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005324:	b004      	add	sp, #16
 8005326:	4770      	bx	lr
 8005328:	0800e9c4 	.word	0x0800e9c4
 800532c:	20006d90 	.word	0x20006d90
 8005330:	51eb851f 	.word	0x51eb851f
 8005334:	10624dd3 	.word	0x10624dd3
 8005338:	0800e9c8 	.word	0x0800e9c8
 800533c:	0800e6c4 	.word	0x0800e6c4
 8005340:	0800e6d4 	.word	0x0800e6d4
 8005344:	0800e9cc 	.word	0x0800e9cc
 8005348:	0800e9d0 	.word	0x0800e9d0
 800534c:	0800e9d4 	.word	0x0800e9d4
 8005350:	0800e9d8 	.word	0x0800e9d8

08005354 <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 800535a:	f7fe fc15 	bl	8003b88 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2);
 800535e:	2302      	movs	r3, #2
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	4b6d      	ldr	r3, [pc, #436]	@ (8005518 <Display_settings_screen_background+0x1c4>)
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	2300      	movs	r3, #0
 8005368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800536c:	2101      	movs	r1, #1
 800536e:	2005      	movs	r0, #5
 8005370:	f7fb fbc8 	bl	8000b04 <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 8005374:	2337      	movs	r3, #55	@ 0x37
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	f240 133b 	movw	r3, #315	@ 0x13b
 800537c:	2214      	movs	r2, #20
 800537e:	2105      	movs	r1, #5
 8005380:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8005384:	f7fb fb1c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 8005388:	2302      	movs	r3, #2
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	4b63      	ldr	r3, [pc, #396]	@ (800551c <Display_settings_screen_background+0x1c8>)
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005394:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005398:	2116      	movs	r1, #22
 800539a:	2037      	movs	r0, #55	@ 0x37
 800539c:	f7fb fbb2 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 80053a0:	2302      	movs	r3, #2
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005520 <Display_settings_screen_background+0x1cc>)
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80053ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053b0:	2116      	movs	r1, #22
 80053b2:	20ce      	movs	r0, #206	@ 0xce
 80053b4:	f7fb fba6 	bl	8000b04 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 80053b8:	2364      	movs	r3, #100	@ 0x64
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	239d      	movs	r3, #157	@ 0x9d
 80053be:	223c      	movs	r2, #60	@ 0x3c
 80053c0:	2105      	movs	r1, #5
 80053c2:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80053c6:	f7fb fafb 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 80053ca:	2364      	movs	r3, #100	@ 0x64
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	f240 133b 	movw	r3, #315	@ 0x13b
 80053d2:	223c      	movs	r2, #60	@ 0x3c
 80053d4:	21a3      	movs	r1, #163	@ 0xa3
 80053d6:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80053da:	f7fb faf1 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 80053de:	2302      	movs	r3, #2
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	4b50      	ldr	r3, [pc, #320]	@ (8005524 <Display_settings_screen_background+0x1d0>)
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80053ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053ee:	2148      	movs	r1, #72	@ 0x48
 80053f0:	2036      	movs	r0, #54	@ 0x36
 80053f2:	f7fb fb87 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 80053f6:	2302      	movs	r3, #2
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005528 <Display_settings_screen_background+0x1d4>)
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005406:	2148      	movs	r1, #72	@ 0x48
 8005408:	20d3      	movs	r0, #211	@ 0xd3
 800540a:	f7fb fb7b 	bl	8000b04 <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 800540e:	2391      	movs	r3, #145	@ 0x91
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	239d      	movs	r3, #157	@ 0x9d
 8005414:	2269      	movs	r2, #105	@ 0x69
 8005416:	2105      	movs	r1, #5
 8005418:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800541c:	f7fb fad0 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 8005420:	2391      	movs	r3, #145	@ 0x91
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	f240 133b 	movw	r3, #315	@ 0x13b
 8005428:	2269      	movs	r2, #105	@ 0x69
 800542a:	21a3      	movs	r1, #163	@ 0xa3
 800542c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005430:	f7fb fac6 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 8005434:	2302      	movs	r3, #2
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	4b3c      	ldr	r3, [pc, #240]	@ (800552c <Display_settings_screen_background+0x1d8>)
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005444:	2175      	movs	r1, #117	@ 0x75
 8005446:	2023      	movs	r0, #35	@ 0x23
 8005448:	f7fb fb5c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 800544c:	2302      	movs	r3, #2
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	4b37      	ldr	r3, [pc, #220]	@ (8005530 <Display_settings_screen_background+0x1dc>)
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005458:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800545c:	2175      	movs	r1, #117	@ 0x75
 800545e:	20c1      	movs	r0, #193	@ 0xc1
 8005460:	f7fb fb50 	bl	8000b04 <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 8005464:	23be      	movs	r3, #190	@ 0xbe
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	239d      	movs	r3, #157	@ 0x9d
 800546a:	2296      	movs	r2, #150	@ 0x96
 800546c:	2105      	movs	r1, #5
 800546e:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005472:	f7fb faa5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 8005476:	23be      	movs	r3, #190	@ 0xbe
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	f240 133b 	movw	r3, #315	@ 0x13b
 800547e:	2296      	movs	r2, #150	@ 0x96
 8005480:	21a3      	movs	r1, #163	@ 0xa3
 8005482:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005486:	f7fb fa9b 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 800548a:	2302      	movs	r3, #2
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	4b29      	ldr	r3, [pc, #164]	@ (8005534 <Display_settings_screen_background+0x1e0>)
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005496:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800549a:	21a2      	movs	r1, #162	@ 0xa2
 800549c:	2020      	movs	r0, #32
 800549e:	f7fb fb31 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 80054a2:	2302      	movs	r3, #2
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <Display_settings_screen_background+0x1e4>)
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80054ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054b2:	21a2      	movs	r1, #162	@ 0xa2
 80054b4:	20a8      	movs	r0, #168	@ 0xa8
 80054b6:	f7fb fb25 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80054ba:	23eb      	movs	r3, #235	@ 0xeb
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	239d      	movs	r3, #157	@ 0x9d
 80054c0:	22c3      	movs	r2, #195	@ 0xc3
 80054c2:	2105      	movs	r1, #5
 80054c4:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80054c8:	f7fb fa7a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80054cc:	23eb      	movs	r3, #235	@ 0xeb
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	f240 133b 	movw	r3, #315	@ 0x13b
 80054d4:	22c3      	movs	r2, #195	@ 0xc3
 80054d6:	21a3      	movs	r1, #163	@ 0xa3
 80054d8:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80054dc:	f7fb fa70 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 80054e0:	2302      	movs	r3, #2
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	4b15      	ldr	r3, [pc, #84]	@ (800553c <Display_settings_screen_background+0x1e8>)
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80054ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054f0:	21cf      	movs	r1, #207	@ 0xcf
 80054f2:	2025      	movs	r0, #37	@ 0x25
 80054f4:	f7fb fb06 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(203, 207, WHITE, ORANGE, "ALARMING", 2);
 80054f8:	2302      	movs	r3, #2
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <Display_settings_screen_background+0x1ec>)
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005508:	21cf      	movs	r1, #207	@ 0xcf
 800550a:	20cb      	movs	r0, #203	@ 0xcb
 800550c:	f7fb fafa 	bl	8000b04 <ILI9341_Draw_String>
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	0800e9dc 	.word	0x0800e9dc
 800551c:	0800e9ec 	.word	0x0800e9ec
 8005520:	0800e9f4 	.word	0x0800e9f4
 8005524:	0800ea00 	.word	0x0800ea00
 8005528:	0800ea0c 	.word	0x0800ea0c
 800552c:	0800ea18 	.word	0x0800ea18
 8005530:	0800ea24 	.word	0x0800ea24
 8005534:	0800ea30 	.word	0x0800ea30
 8005538:	0800ea40 	.word	0x0800ea40
 800553c:	0800e800 	.word	0x0800e800
 8005540:	0800e6a8 	.word	0x0800e6a8

08005544 <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b087      	sub	sp, #28
 8005548:	af02      	add	r7, sp, #8
 800554a:	463c      	mov	r4, r7
 800554c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	461a      	mov	r2, r3
 8005554:	238c      	movs	r3, #140	@ 0x8c
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <Display_settings_screen_data+0x84>)
 800555c:	fb82 1203 	smull	r1, r2, r2, r3
 8005560:	441a      	add	r2, r3
 8005562:	1152      	asrs	r2, r2, #5
 8005564:	17db      	asrs	r3, r3, #31
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	330c      	adds	r3, #12
 800556a:	4619      	mov	r1, r3
 800556c:	2332      	movs	r3, #50	@ 0x32
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2398      	movs	r3, #152	@ 0x98
 8005572:	2228      	movs	r2, #40	@ 0x28
 8005574:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005578:	f7fb fa22 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	461a      	mov	r2, r3
 8005580:	238c      	movs	r3, #140	@ 0x8c
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	4a10      	ldr	r2, [pc, #64]	@ (80055c8 <Display_settings_screen_data+0x84>)
 8005588:	fb82 1203 	smull	r1, r2, r2, r3
 800558c:	441a      	add	r2, r3
 800558e:	1152      	asrs	r2, r2, #5
 8005590:	17db      	asrs	r3, r3, #31
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	330c      	adds	r3, #12
 8005596:	461a      	mov	r2, r3
 8005598:	2332      	movs	r3, #50	@ 0x32
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	2228      	movs	r2, #40	@ 0x28
 80055a0:	210c      	movs	r1, #12
 80055a2:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80055a6:	f7fb fa0b 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 80055aa:	2332      	movs	r3, #50	@ 0x32
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	f44f 739a 	mov.w	r3, #308	@ 0x134
 80055b2:	2228      	movs	r2, #40	@ 0x28
 80055b4:	21a8      	movs	r1, #168	@ 0xa8
 80055b6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80055ba:	f7fb fa01 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
}
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd90      	pop	{r4, r7, pc}
 80055c6:	bf00      	nop
 80055c8:	82082083 	.word	0x82082083

080055cc <Display_alarming_screen_background>:

void Display_alarming_screen_background()
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 80055d2:	f7fe fad9 	bl	8003b88 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "ALARMING SETTINGS", 2);
 80055d6:	2302      	movs	r3, #2
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	4b50      	ldr	r3, [pc, #320]	@ (800571c <Display_alarming_screen_background+0x150>)
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	2300      	movs	r3, #0
 80055e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055e4:	2101      	movs	r1, #1
 80055e6:	2005      	movs	r0, #5
 80055e8:	f7fb fa8c 	bl	8000b04 <ILI9341_Draw_String>

	//alarming mode description bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 38);
 80055ec:	2326      	movs	r3, #38	@ 0x26
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	f240 133b 	movw	r3, #315	@ 0x13b
 80055f4:	2214      	movs	r2, #20
 80055f6:	2105      	movs	r1, #5
 80055f8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80055fc:	f7fb f9e0 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(48, 22, WHITE, DARKGREY, "TAP TO CHOOSE ALARMING OPTION", 2);
 8005600:	2302      	movs	r3, #2
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	4b46      	ldr	r3, [pc, #280]	@ (8005720 <Display_alarming_screen_background+0x154>)
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800560c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005610:	2116      	movs	r1, #22
 8005612:	2030      	movs	r0, #48	@ 0x30
 8005614:	f7fb fa76 	bl	8000b04 <ILI9341_Draw_String>

	//Alarming by DLS Label button
	ILI9341_Draw_Filled_Rectangle(RED, 5, 43, 157, 114);
 8005618:	2372      	movs	r3, #114	@ 0x72
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	239d      	movs	r3, #157	@ 0x9d
 800561e:	222b      	movs	r2, #43	@ 0x2b
 8005620:	2105      	movs	r1, #5
 8005622:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8005626:	f7fb f9cb 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, RED, "ALARM DLS", 2);
 800562a:	2302      	movs	r3, #2
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	4b3d      	ldr	r3, [pc, #244]	@ (8005724 <Display_alarming_screen_background+0x158>)
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800563a:	2148      	movs	r1, #72	@ 0x48
 800563c:	2036      	movs	r0, #54	@ 0x36
 800563e:	f7fb fa61 	bl	8000b04 <ILI9341_Draw_String>
	//Alarming by ...1 button
	ILI9341_Draw_Filled_Rectangle(BLUE, 163, 43, 315, 114);
 8005642:	2372      	movs	r3, #114	@ 0x72
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	f240 133b 	movw	r3, #315	@ 0x13b
 800564a:	222b      	movs	r2, #43	@ 0x2b
 800564c:	21a3      	movs	r1, #163	@ 0xa3
 800564e:	201f      	movs	r0, #31
 8005650:	f7fb f9b6 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(211, 72, WHITE, BLUE, "ALARM 1", 2);
 8005654:	2302      	movs	r3, #2
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	4b33      	ldr	r3, [pc, #204]	@ (8005728 <Display_alarming_screen_background+0x15c>)
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	231f      	movs	r3, #31
 800565e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005662:	2148      	movs	r1, #72	@ 0x48
 8005664:	20d3      	movs	r0, #211	@ 0xd3
 8005666:	f7fb fa4d 	bl	8000b04 <ILI9341_Draw_String>

	//Alarming by ...2 button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 119, 157, 190);
 800566a:	23be      	movs	r3, #190	@ 0xbe
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	239d      	movs	r3, #157	@ 0x9d
 8005670:	2277      	movs	r2, #119	@ 0x77
 8005672:	2105      	movs	r1, #5
 8005674:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005678:	f7fb f9a2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 127, WHITE, ORANGE, "ALARM 2", 2);
 800567c:	2302      	movs	r3, #2
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	4b2a      	ldr	r3, [pc, #168]	@ (800572c <Display_alarming_screen_background+0x160>)
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800568c:	217f      	movs	r1, #127	@ 0x7f
 800568e:	2023      	movs	r0, #35	@ 0x23
 8005690:	f7fb fa38 	bl	8000b04 <ILI9341_Draw_String>

	//No alarming - normal mode button
	ILI9341_Draw_Filled_Rectangle(GREEN, 163, 119, 315, 190);
 8005694:	23be      	movs	r3, #190	@ 0xbe
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	f240 133b 	movw	r3, #315	@ 0x13b
 800569c:	2277      	movs	r2, #119	@ 0x77
 800569e:	21a3      	movs	r1, #163	@ 0xa3
 80056a0:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80056a4:	f7fb f98c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(193, 127, WHITE, GREEN, "NO ALARM", 2);
 80056a8:	2302      	movs	r3, #2
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	4b20      	ldr	r3, [pc, #128]	@ (8005730 <Display_alarming_screen_background+0x164>)
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80056b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056b8:	217f      	movs	r1, #127	@ 0x7f
 80056ba:	20c1      	movs	r0, #193	@ 0xc1
 80056bc:	f7fb fa22 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80056c0:	23eb      	movs	r3, #235	@ 0xeb
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	239d      	movs	r3, #157	@ 0x9d
 80056c6:	22c3      	movs	r2, #195	@ 0xc3
 80056c8:	2105      	movs	r1, #5
 80056ca:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80056ce:	f7fb f977 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80056d2:	23eb      	movs	r3, #235	@ 0xeb
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	f240 133b 	movw	r3, #315	@ 0x13b
 80056da:	22c3      	movs	r2, #195	@ 0xc3
 80056dc:	21a3      	movs	r1, #163	@ 0xa3
 80056de:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80056e2:	f7fb f96d 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(47, 207, WHITE, ORANGE, "SETTINGS", 2);
 80056e6:	2302      	movs	r3, #2
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	4b12      	ldr	r3, [pc, #72]	@ (8005734 <Display_alarming_screen_background+0x168>)
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80056f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056f6:	21cf      	movs	r1, #207	@ 0xcf
 80056f8:	202f      	movs	r0, #47	@ 0x2f
 80056fa:	f7fb fa03 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 80056fe:	2302      	movs	r3, #2
 8005700:	9301      	str	r3, [sp, #4]
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <Display_alarming_screen_background+0x16c>)
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800570a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800570e:	21cf      	movs	r1, #207	@ 0xcf
 8005710:	20c3      	movs	r0, #195	@ 0xc3
 8005712:	f7fb f9f7 	bl	8000b04 <ILI9341_Draw_String>
}
 8005716:	bf00      	nop
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	0800ea54 	.word	0x0800ea54
 8005720:	0800ea68 	.word	0x0800ea68
 8005724:	0800ea88 	.word	0x0800ea88
 8005728:	0800ea94 	.word	0x0800ea94
 800572c:	0800ea9c 	.word	0x0800ea9c
 8005730:	0800eaa4 	.word	0x0800eaa4
 8005734:	0800e99c 	.word	0x0800e99c
 8005738:	0800e7f4 	.word	0x0800e7f4

0800573c <Display_time>:



void Display_time(time_t time_val)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af02      	add	r7, sp, #8
 8005742:	463b      	mov	r3, r7
 8005744:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 8005748:	883b      	ldrh	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d076      	beq.n	800583c <Display_time+0x100>
 800574e:	78bb      	ldrb	r3, [r7, #2]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d073      	beq.n	800583c <Display_time+0x100>
	{
		if(time_val.hour < 10)
 8005754:	793b      	ldrb	r3, [r7, #4]
 8005756:	2b09      	cmp	r3, #9
 8005758:	d81e      	bhi.n	8005798 <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 800575a:	2302      	movs	r3, #2
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	4b39      	ldr	r3, [pc, #228]	@ (8005844 <Display_time+0x108>)
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005768:	2101      	movs	r1, #1
 800576a:	f240 100f 	movw	r0, #271	@ 0x10f
 800576e:	f7fb f9c9 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005772:	793b      	ldrb	r3, [r7, #4]
 8005774:	220a      	movs	r2, #10
 8005776:	4934      	ldr	r1, [pc, #208]	@ (8005848 <Display_time+0x10c>)
 8005778:	4618      	mov	r0, r3
 800577a:	f008 f801 	bl	800d780 <itoa>
 800577e:	4603      	mov	r3, r0
 8005780:	2202      	movs	r2, #2
 8005782:	9201      	str	r2, [sp, #4]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2300      	movs	r3, #0
 8005788:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800578c:	2101      	movs	r1, #1
 800578e:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8005792:	f7fb f9b7 	bl	8000b04 <ILI9341_Draw_String>
 8005796:	e011      	b.n	80057bc <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005798:	793b      	ldrb	r3, [r7, #4]
 800579a:	220a      	movs	r2, #10
 800579c:	492a      	ldr	r1, [pc, #168]	@ (8005848 <Display_time+0x10c>)
 800579e:	4618      	mov	r0, r3
 80057a0:	f007 ffee 	bl	800d780 <itoa>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2202      	movs	r2, #2
 80057a8:	9201      	str	r2, [sp, #4]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2300      	movs	r3, #0
 80057ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057b2:	2101      	movs	r1, #1
 80057b4:	f240 100f 	movw	r0, #271	@ 0x10f
 80057b8:	f7fb f9a4 	bl	8000b04 <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 80057bc:	2302      	movs	r3, #2
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	4b22      	ldr	r3, [pc, #136]	@ (800584c <Display_time+0x110>)
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057ca:	2101      	movs	r1, #1
 80057cc:	f240 101f 	movw	r0, #287	@ 0x11f
 80057d0:	f7fb f998 	bl	8000b04 <ILI9341_Draw_String>

		if(time_val.minute < 10)
 80057d4:	797b      	ldrb	r3, [r7, #5]
 80057d6:	2b09      	cmp	r3, #9
 80057d8:	d81e      	bhi.n	8005818 <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 80057da:	2302      	movs	r3, #2
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	4b19      	ldr	r3, [pc, #100]	@ (8005844 <Display_time+0x108>)
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2300      	movs	r3, #0
 80057e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057e8:	2101      	movs	r1, #1
 80057ea:	f240 1027 	movw	r0, #295	@ 0x127
 80057ee:	f7fb f989 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 80057f2:	797b      	ldrb	r3, [r7, #5]
 80057f4:	220a      	movs	r2, #10
 80057f6:	4914      	ldr	r1, [pc, #80]	@ (8005848 <Display_time+0x10c>)
 80057f8:	4618      	mov	r0, r3
 80057fa:	f007 ffc1 	bl	800d780 <itoa>
 80057fe:	4603      	mov	r3, r0
 8005800:	2202      	movs	r2, #2
 8005802:	9201      	str	r2, [sp, #4]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2300      	movs	r3, #0
 8005808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800580c:	2101      	movs	r1, #1
 800580e:	f44f 7098 	mov.w	r0, #304	@ 0x130
 8005812:	f7fb f977 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 8005816:	e011      	b.n	800583c <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8005818:	797b      	ldrb	r3, [r7, #5]
 800581a:	220a      	movs	r2, #10
 800581c:	490a      	ldr	r1, [pc, #40]	@ (8005848 <Display_time+0x10c>)
 800581e:	4618      	mov	r0, r3
 8005820:	f007 ffae 	bl	800d780 <itoa>
 8005824:	4603      	mov	r3, r0
 8005826:	2202      	movs	r2, #2
 8005828:	9201      	str	r2, [sp, #4]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	2300      	movs	r3, #0
 800582e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005832:	2101      	movs	r1, #1
 8005834:	f240 1027 	movw	r0, #295	@ 0x127
 8005838:	f7fb f964 	bl	8000b04 <ILI9341_Draw_String>
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	0800e9c8 	.word	0x0800e9c8
 8005848:	20006d90 	.word	0x20006d90
 800584c:	0800eab0 	.word	0x0800eab0

08005850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	4b0c      	ldr	r3, [pc, #48]	@ (800588c <MX_DMA_Init+0x3c>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	4a0b      	ldr	r2, [pc, #44]	@ (800588c <MX_DMA_Init+0x3c>)
 8005860:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005864:	6313      	str	r3, [r2, #48]	@ 0x30
 8005866:	4b09      	ldr	r3, [pc, #36]	@ (800588c <MX_DMA_Init+0x3c>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800586e:	607b      	str	r3, [r7, #4]
 8005870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005872:	2200      	movs	r2, #0
 8005874:	2100      	movs	r1, #0
 8005876:	200f      	movs	r0, #15
 8005878:	f002 f8af 	bl	80079da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800587c:	200f      	movs	r0, #15
 800587e:	f002 f8c8 	bl	8007a12 <HAL_NVIC_EnableIRQ>

}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800

08005890 <eeprom_wait>:
//#define ADDR_SIZE 1	//for 24c08 1, for 24c256 2, because of bigger memory size - we must habe 2 bytes for memory Address

static uint32_t last_write;	//variable used to save time of last writing operation in eeprom_wait function

void eeprom_wait(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 8005894:	bf00      	nop
 8005896:	f001 ff95 	bl	80077c4 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	4b03      	ldr	r3, [pc, #12]	@ (80058ac <eeprom_wait+0x1c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b14      	cmp	r3, #20
 80058a4:	d9f7      	bls.n	8005896 <eeprom_wait+0x6>
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20006e54 	.word	0x20006e54

080058b0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af04      	add	r7, sp, #16
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80058bc:	f7ff ffe8 	bl	8005890 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80058cc:	9102      	str	r1, [sp, #8]
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2302      	movs	r3, #2
 80058d6:	21a0      	movs	r1, #160	@ 0xa0
 80058d8:	4803      	ldr	r0, [pc, #12]	@ (80058e8 <eeprom_read+0x38>)
 80058da:	f002 ffdb 	bl	8008894 <HAL_I2C_Mem_Read>
 80058de:	4603      	mov	r3, r0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20006e58 	.word	0x20006e58

080058ec <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	@ 0x28
 80058f0:	af04      	add	r7, sp, #16
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 80058f8:	f7ff ffca 	bl	8005890 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	b29a      	uxth	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005908:	9102      	str	r1, [sp, #8]
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2302      	movs	r3, #2
 8005912:	21a0      	movs	r1, #160	@ 0xa0
 8005914:	4807      	ldr	r0, [pc, #28]	@ (8005934 <eeprom_write+0x48>)
 8005916:	f002 fec3 	bl	80086a0 <HAL_I2C_Mem_Write>
 800591a:	4603      	mov	r3, r0
 800591c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800591e:	f001 ff51 	bl	80077c4 <HAL_GetTick>
 8005922:	4603      	mov	r3, r0
 8005924:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <eeprom_write+0x4c>)
 8005926:	6013      	str	r3, [r2, #0]

    return rc;
 8005928:	7dfb      	ldrb	r3, [r7, #23]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20006e58 	.word	0x20006e58
 8005938:	20006e54 	.word	0x20006e54

0800593c <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	@ 0x28
 8005940:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 8005942:	2101      	movs	r1, #1
 8005944:	482d      	ldr	r0, [pc, #180]	@ (80059fc <eeprom_clear_scanning_data+0xc0>)
 8005946:	f7fe f8f9 	bl	8003b3c <send_debug_msg>

	 uint8_t clear_page_sequence[PAGE_SIZE];

	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 800594a:	2300      	movs	r3, #0
 800594c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005950:	e00b      	b.n	800596a <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 8005952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005956:	3328      	adds	r3, #40	@ 0x28
 8005958:	443b      	add	r3, r7
 800595a:	22ff      	movs	r2, #255	@ 0xff
 800595c:	f803 2c24 	strb.w	r2, [r3, #-36]
	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 8005960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005964:	3301      	adds	r3, #1
 8005966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800596a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800596e:	2b1f      	cmp	r3, #31
 8005970:	d9ef      	bls.n	8005952 <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 8005972:	1d3b      	adds	r3, r7, #4
 8005974:	2220      	movs	r2, #32
 8005976:	4619      	mov	r1, r3
 8005978:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800597c:	f7ff ffb6 	bl	80058ec <eeprom_write>
	if(PAGE_SIZE == 32)
	{
		eeprom_write(PAGE_SIZE * (SCAN_RELATED_DATA_PAGE + 1), &clear_page_sequence, sizeof(clear_page_sequence));
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	2220      	movs	r2, #32
 8005984:	4619      	mov	r1, r3
 8005986:	f44f 7090 	mov.w	r0, #288	@ 0x120
 800598a:	f7ff ffaf 	bl	80058ec <eeprom_write>
	}

	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 800598e:	2300      	movs	r3, #0
 8005990:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005994:	e00e      	b.n	80059b4 <eeprom_clear_scanning_data+0x78>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 8005996:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800599a:	330a      	adds	r3, #10
 800599c:	015b      	lsls	r3, r3, #5
 800599e:	4618      	mov	r0, r3
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	2220      	movs	r2, #32
 80059a4:	4619      	mov	r1, r3
 80059a6:	f7ff ffa1 	bl	80058ec <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80059aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059ae:	3301      	adds	r3, #1
 80059b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80059b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059b8:	2b09      	cmp	r3, #9
 80059ba:	d9ec      	bls.n	8005996 <eeprom_clear_scanning_data+0x5a>
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
		}
	}
	if(PAGE_SIZE == 32)
	{
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80059c2:	e00e      	b.n	80059e2 <eeprom_clear_scanning_data+0xa6>
		{
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80059c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059c8:	331e      	adds	r3, #30
 80059ca:	015b      	lsls	r3, r3, #5
 80059cc:	4618      	mov	r0, r3
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	2220      	movs	r2, #32
 80059d2:	4619      	mov	r1, r3
 80059d4:	f7ff ff8a 	bl	80058ec <eeprom_write>
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 80059d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059dc:	3301      	adds	r3, #1
 80059de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80059e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80059e8:	d9ec      	bls.n	80059c4 <eeprom_clear_scanning_data+0x88>
		}
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 80059ea:	2101      	movs	r1, #1
 80059ec:	4804      	ldr	r0, [pc, #16]	@ (8005a00 <eeprom_clear_scanning_data+0xc4>)
 80059ee:	f7fe f8a5 	bl	8003b3c <send_debug_msg>
}
 80059f2:	bf00      	nop
 80059f4:	3728      	adds	r7, #40	@ 0x28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	0800eb64 	.word	0x0800eb64
 8005a00:	0800eb84 	.word	0x0800eb84

08005a04 <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b096      	sub	sp, #88	@ 0x58
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	460b      	mov	r3, r1
 8005a12:	72fb      	strb	r3, [r7, #11]
 8005a14:	4613      	mov	r3, r2
 8005a16:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4835      	ldr	r0, [pc, #212]	@ (8005af0 <eeprom_save_scanning_data+0xec>)
 8005a1c:	f7fe f88e 	bl	8003b3c <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 8005a20:	f107 030a 	add.w	r3, r7, #10
 8005a24:	2201      	movs	r2, #1
 8005a26:	4619      	mov	r1, r3
 8005a28:	f240 1005 	movw	r0, #261	@ 0x105
 8005a2c:	f7ff ff5e 	bl	80058ec <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 8005a30:	f107 030b 	add.w	r3, r7, #11
 8005a34:	2201      	movs	r2, #1
 8005a36:	4619      	mov	r1, r3
 8005a38:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8005a3c:	f7ff ff56 	bl	80058ec <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8005a46:	e012      	b.n	8005a6e <eeprom_save_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 8005a48:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8005a4c:	330a      	adds	r3, #10
 8005a4e:	015b      	lsls	r3, r3, #5
 8005a50:	4618      	mov	r0, r3
 8005a52:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8005a56:	015b      	lsls	r3, r3, #5
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f7ff ff44 	bl	80058ec <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005a64:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8005a6e:	7abb      	ldrb	r3, [r7, #10]
 8005a70:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3e7      	bcc.n	8005a48 <eeprom_save_scanning_data+0x44>
	}
	if(PAGE_SIZE == 32)
	{
		uint8_t temp [64];

		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8005a7e:	e029      	b.n	8005ad4 <eeprom_save_scanning_data+0xd0>
		{
			memcpy(&temp, &_services_list[services_index], sizeof(dab_service_t));
 8005a80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a84:	2234      	movs	r2, #52	@ 0x34
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	18d1      	adds	r1, r2, r3
 8005a8e:	f107 0314 	add.w	r3, r7, #20
 8005a92:	2234      	movs	r2, #52	@ 0x34
 8005a94:	4618      	mov	r0, r3
 8005a96:	f007 fee3 	bl	800d860 <memcpy>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2, &temp[0], 32);
 8005a9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a9e:	330f      	adds	r3, #15
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f7ff ff1e 	bl	80058ec <eeprom_write>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 8005ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ab4:	330f      	adds	r3, #15
 8005ab6:	019b      	lsls	r3, r3, #6
 8005ab8:	3320      	adds	r3, #32
 8005aba:	4618      	mov	r0, r3
 8005abc:	f107 0314 	add.w	r3, r7, #20
 8005ac0:	3320      	adds	r3, #32
 8005ac2:	2214      	movs	r2, #20
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7ff ff11 	bl	80058ec <eeprom_write>
		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8005aca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
 8005ad6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d3d0      	bcc.n	8005a80 <eeprom_save_scanning_data+0x7c>
		}
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4804      	ldr	r0, [pc, #16]	@ (8005af4 <eeprom_save_scanning_data+0xf0>)
 8005ae2:	f7fe f82b 	bl	8003b3c <send_debug_msg>
}
 8005ae6:	bf00      	nop
 8005ae8:	3758      	adds	r7, #88	@ 0x58
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	0800eb90 	.word	0x0800eb90
 8005af4:	0800ebac 	.word	0x0800ebac

08005af8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08c      	sub	sp, #48	@ 0x30
 8005afc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005afe:	f107 031c 	add.w	r3, r7, #28
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	609a      	str	r2, [r3, #8]
 8005b0a:	60da      	str	r2, [r3, #12]
 8005b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	4a6b      	ldr	r2, [pc, #428]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b1e:	4b69      	ldr	r3, [pc, #420]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	4b65      	ldr	r3, [pc, #404]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b32:	4a64      	ldr	r2, [pc, #400]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b3a:	4b62      	ldr	r3, [pc, #392]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b50:	f043 0304 	orr.w	r3, r3, #4
 8005b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b56:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	4b57      	ldr	r3, [pc, #348]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	4a56      	ldr	r2, [pc, #344]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b6c:	f043 0302 	orr.w	r3, r3, #2
 8005b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b72:	4b54      	ldr	r3, [pc, #336]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	4b50      	ldr	r3, [pc, #320]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	4a4f      	ldr	r2, [pc, #316]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b88:	f043 0310 	orr.w	r3, r3, #16
 8005b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	4b49      	ldr	r3, [pc, #292]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	4a48      	ldr	r2, [pc, #288]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005ba4:	f043 0308 	orr.w	r3, r3, #8
 8005ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005baa:	4b46      	ldr	r3, [pc, #280]	@ (8005cc4 <MX_GPIO_Init+0x1cc>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	607b      	str	r3, [r7, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2130      	movs	r1, #48	@ 0x30
 8005bba:	4843      	ldr	r0, [pc, #268]	@ (8005cc8 <MX_GPIO_Init+0x1d0>)
 8005bbc:	f002 fc12 	bl	80083e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005bc6:	4841      	ldr	r0, [pc, #260]	@ (8005ccc <MX_GPIO_Init+0x1d4>)
 8005bc8:	f002 fc0c 	bl	80083e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f24f 7180 	movw	r1, #63360	@ 0xf780
 8005bd2:	483f      	ldr	r0, [pc, #252]	@ (8005cd0 <MX_GPIO_Init+0x1d8>)
 8005bd4:	f002 fc06 	bl	80083e4 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2128      	movs	r1, #40	@ 0x28
 8005bdc:	483d      	ldr	r0, [pc, #244]	@ (8005cd4 <MX_GPIO_Init+0x1dc>)
 8005bde:	f002 fc01 	bl	80083e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8005be2:	2310      	movs	r3, #16
 8005be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005be6:	2300      	movs	r3, #0
 8005be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8005bee:	f107 031c 	add.w	r3, r7, #28
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4838      	ldr	r0, [pc, #224]	@ (8005cd8 <MX_GPIO_Init+0x1e0>)
 8005bf6:	f002 fa41 	bl	800807c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8005bfa:	2330      	movs	r3, #48	@ 0x30
 8005bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c06:	2302      	movs	r3, #2
 8005c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c0a:	f107 031c 	add.w	r3, r7, #28
 8005c0e:	4619      	mov	r1, r3
 8005c10:	482d      	ldr	r0, [pc, #180]	@ (8005cc8 <MX_GPIO_Init+0x1d0>)
 8005c12:	f002 fa33 	bl	800807c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8005c16:	2311      	movs	r3, #17
 8005c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c22:	f107 031c 	add.w	r3, r7, #28
 8005c26:	4619      	mov	r1, r3
 8005c28:	482a      	ldr	r0, [pc, #168]	@ (8005cd4 <MX_GPIO_Init+0x1dc>)
 8005c2a:	f002 fa27 	bl	800807c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8005c2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c34:	2301      	movs	r3, #1
 8005c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8005c40:	f107 031c 	add.w	r3, r7, #28
 8005c44:	4619      	mov	r1, r3
 8005c46:	4821      	ldr	r0, [pc, #132]	@ (8005ccc <MX_GPIO_Init+0x1d4>)
 8005c48:	f002 fa18 	bl	800807c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8005c4c:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8005c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c52:	2301      	movs	r3, #1
 8005c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c5e:	f107 031c 	add.w	r3, r7, #28
 8005c62:	4619      	mov	r1, r3
 8005c64:	481a      	ldr	r0, [pc, #104]	@ (8005cd0 <MX_GPIO_Init+0x1d8>)
 8005c66:	f002 fa09 	bl	800807c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005c6a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8005c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c70:	2301      	movs	r3, #1
 8005c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c7c:	f107 031c 	add.w	r3, r7, #28
 8005c80:	4619      	mov	r1, r3
 8005c82:	4813      	ldr	r0, [pc, #76]	@ (8005cd0 <MX_GPIO_Init+0x1d8>)
 8005c84:	f002 f9fa 	bl	800807c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005c88:	2340      	movs	r3, #64	@ 0x40
 8005c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005c94:	f107 031c 	add.w	r3, r7, #28
 8005c98:	4619      	mov	r1, r3
 8005c9a:	480d      	ldr	r0, [pc, #52]	@ (8005cd0 <MX_GPIO_Init+0x1d8>)
 8005c9c:	f002 f9ee 	bl	800807c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8005ca0:	2328      	movs	r3, #40	@ 0x28
 8005ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cac:	2302      	movs	r3, #2
 8005cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cb0:	f107 031c 	add.w	r3, r7, #28
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4807      	ldr	r0, [pc, #28]	@ (8005cd4 <MX_GPIO_Init+0x1dc>)
 8005cb8:	f002 f9e0 	bl	800807c <HAL_GPIO_Init>

}
 8005cbc:	bf00      	nop
 8005cbe:	3730      	adds	r7, #48	@ 0x30
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	40020800 	.word	0x40020800
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	40020c00 	.word	0x40020c00
 8005cd4:	40020400 	.word	0x40020400
 8005cd8:	40020000 	.word	0x40020000

08005cdc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005ce0:	4b12      	ldr	r3, [pc, #72]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005ce2:	4a13      	ldr	r2, [pc, #76]	@ (8005d30 <MX_I2C1_Init+0x54>)
 8005ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005ce6:	4b11      	ldr	r3, [pc, #68]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005ce8:	4a12      	ldr	r2, [pc, #72]	@ (8005d34 <MX_I2C1_Init+0x58>)
 8005cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005cec:	4b0f      	ldr	r3, [pc, #60]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005cfa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005cfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d00:	4b0a      	ldr	r3, [pc, #40]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d06:	4b09      	ldr	r3, [pc, #36]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d0c:	4b07      	ldr	r3, [pc, #28]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d12:	4b06      	ldr	r3, [pc, #24]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d18:	4804      	ldr	r0, [pc, #16]	@ (8005d2c <MX_I2C1_Init+0x50>)
 8005d1a:	f002 fb7d 	bl	8008418 <HAL_I2C_Init>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d24:	f000 f9e2 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d28:	bf00      	nop
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20006e58 	.word	0x20006e58
 8005d30:	40005400 	.word	0x40005400
 8005d34:	000186a0 	.word	0x000186a0

08005d38 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005d3c:	4b12      	ldr	r3, [pc, #72]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d3e:	4a13      	ldr	r2, [pc, #76]	@ (8005d8c <MX_I2C3_Init+0x54>)
 8005d40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005d42:	4b11      	ldr	r3, [pc, #68]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d44:	4a12      	ldr	r2, [pc, #72]	@ (8005d90 <MX_I2C3_Init+0x58>)
 8005d46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d48:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d54:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005d5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d68:	4b07      	ldr	r3, [pc, #28]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d6e:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005d74:	4804      	ldr	r0, [pc, #16]	@ (8005d88 <MX_I2C3_Init+0x50>)
 8005d76:	f002 fb4f 	bl	8008418 <HAL_I2C_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005d80:	f000 f9b4 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005d84:	bf00      	nop
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20006eac 	.word	0x20006eac
 8005d8c:	40005c00 	.word	0x40005c00
 8005d90:	000186a0 	.word	0x000186a0

08005d94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	@ 0x30
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d9c:	f107 031c 	add.w	r3, r7, #28
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a4a      	ldr	r2, [pc, #296]	@ (8005edc <HAL_I2C_MspInit+0x148>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d12c      	bne.n	8005e10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	4b49      	ldr	r3, [pc, #292]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbe:	4a48      	ldr	r2, [pc, #288]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dc6:	4b46      	ldr	r3, [pc, #280]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005dd2:	23c0      	movs	r3, #192	@ 0xc0
 8005dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dd6:	2312      	movs	r3, #18
 8005dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dde:	2303      	movs	r3, #3
 8005de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005de2:	2304      	movs	r3, #4
 8005de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de6:	f107 031c 	add.w	r3, r7, #28
 8005dea:	4619      	mov	r1, r3
 8005dec:	483d      	ldr	r0, [pc, #244]	@ (8005ee4 <HAL_I2C_MspInit+0x150>)
 8005dee:	f002 f945 	bl	800807c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	4a39      	ldr	r2, [pc, #228]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005dfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e02:	4b37      	ldr	r3, [pc, #220]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005e0e:	e060      	b.n	8005ed2 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a34      	ldr	r2, [pc, #208]	@ (8005ee8 <HAL_I2C_MspInit+0x154>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d15b      	bne.n	8005ed2 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	4b30      	ldr	r3, [pc, #192]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e22:	4a2f      	ldr	r2, [pc, #188]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005e24:	f043 0304 	orr.w	r3, r3, #4
 8005e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	4b29      	ldr	r3, [pc, #164]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3e:	4a28      	ldr	r2, [pc, #160]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e46:	4b26      	ldr	r3, [pc, #152]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8005e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e58:	2312      	movs	r3, #18
 8005e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e60:	2303      	movs	r3, #3
 8005e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e64:	2304      	movs	r3, #4
 8005e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005e68:	f107 031c 	add.w	r3, r7, #28
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	481f      	ldr	r0, [pc, #124]	@ (8005eec <HAL_I2C_MspInit+0x158>)
 8005e70:	f002 f904 	bl	800807c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8005e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e7a:	2312      	movs	r3, #18
 8005e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e82:	2303      	movs	r3, #3
 8005e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e86:	2304      	movs	r3, #4
 8005e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8005e8a:	f107 031c 	add.w	r3, r7, #28
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4817      	ldr	r0, [pc, #92]	@ (8005ef0 <HAL_I2C_MspInit+0x15c>)
 8005e92:	f002 f8f3 	bl	800807c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	4a10      	ldr	r2, [pc, #64]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <HAL_I2C_MspInit+0x14c>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	2048      	movs	r0, #72	@ 0x48
 8005eb8:	f001 fd8f 	bl	80079da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005ebc:	2048      	movs	r0, #72	@ 0x48
 8005ebe:	f001 fda8 	bl	8007a12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	2049      	movs	r0, #73	@ 0x49
 8005ec8:	f001 fd87 	bl	80079da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005ecc:	2049      	movs	r0, #73	@ 0x49
 8005ece:	f001 fda0 	bl	8007a12 <HAL_NVIC_EnableIRQ>
}
 8005ed2:	bf00      	nop
 8005ed4:	3730      	adds	r7, #48	@ 0x30
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40005400 	.word	0x40005400
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	40020400 	.word	0x40020400
 8005ee8:	40005c00 	.word	0x40005c00
 8005eec:	40020800 	.word	0x40020800
 8005ef0:	40020000 	.word	0x40020000

08005ef4 <LEDs_Red_On>:

uint8_t led_number = 1;


void LEDs_Red_On()
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005efe:	4802      	ldr	r0, [pc, #8]	@ (8005f08 <LEDs_Red_On+0x14>)
 8005f00:	f002 fa70 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8005f04:	bf00      	nop
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40020c00 	.word	0x40020c00

08005f0c <LEDs_Red_Off>:

void LEDs_Red_Off()
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8005f10:	2200      	movs	r2, #0
 8005f12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005f16:	4802      	ldr	r0, [pc, #8]	@ (8005f20 <LEDs_Red_Off+0x14>)
 8005f18:	f002 fa64 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8005f1c:	bf00      	nop
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40020c00 	.word	0x40020c00

08005f24 <LEDs_Green_On>:
{
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
}

void LEDs_Green_On()
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f2e:	4802      	ldr	r0, [pc, #8]	@ (8005f38 <LEDs_Green_On+0x14>)
 8005f30:	f002 fa58 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8005f34:	bf00      	nop
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40020c00 	.word	0x40020c00

08005f3c <LEDs_Green_Off>:

void LEDs_Green_Off()
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f46:	4802      	ldr	r0, [pc, #8]	@ (8005f50 <LEDs_Green_Off+0x14>)
 8005f48:	f002 fa4c 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8005f4c:	bf00      	nop
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40020c00 	.word	0x40020c00

08005f54 <LEDs_Blue_On>:
{
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}

void LEDs_Blue_On()
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f5e:	4802      	ldr	r0, [pc, #8]	@ (8005f68 <LEDs_Blue_On+0x14>)
 8005f60:	f002 fa40 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8005f64:	bf00      	nop
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40020c00 	.word	0x40020c00

08005f6c <LEDs_Blue_Off>:

void LEDs_Blue_Off()
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 8005f70:	2200      	movs	r2, #0
 8005f72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f76:	4802      	ldr	r0, [pc, #8]	@ (8005f80 <LEDs_Blue_Off+0x14>)
 8005f78:	f002 fa34 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8005f7c:	bf00      	nop
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40020c00 	.word	0x40020c00

08005f84 <LEDs_Orange_On>:
void LEDs_Blue_Toggle()
{
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
}
void LEDs_Orange_On()
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1);
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f8e:	4802      	ldr	r0, [pc, #8]	@ (8005f98 <LEDs_Orange_On+0x14>)
 8005f90:	f002 fa28 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8005f94:	bf00      	nop
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40020c00 	.word	0x40020c00

08005f9c <LEDs_Orange_Off>:

void LEDs_Orange_Off()
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005fa6:	4802      	ldr	r0, [pc, #8]	@ (8005fb0 <LEDs_Orange_Off+0x14>)
 8005fa8:	f002 fa1c 	bl	80083e4 <HAL_GPIO_WritePin>
}
 8005fac:	bf00      	nop
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40020c00 	.word	0x40020c00

08005fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fb8:	f001 fb9e 	bl	80076f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fbc:	f000 f82c 	bl	8006018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fc0:	f7ff fd9a 	bl	8005af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005fc4:	f7ff fc44 	bl	8005850 <MX_DMA_Init>
  MX_I2C1_Init();
 8005fc8:	f7ff fe88 	bl	8005cdc <MX_I2C1_Init>
  MX_I2C3_Init();
 8005fcc:	f7ff feb4 	bl	8005d38 <MX_I2C3_Init>
  MX_SPI1_Init();
 8005fd0:	f000 f892 	bl	80060f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005fd4:	f000 f8c6 	bl	8006164 <MX_SPI2_Init>
  MX_TIM3_Init();
 8005fd8:	f000 ff18 	bl	8006e0c <MX_TIM3_Init>
  MX_UART5_Init();
 8005fdc:	f001 fa6e 	bl	80074bc <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005fe0:	f001 fa96 	bl	8007510 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8005fe4:	f000 ff6c 	bl	8006ec0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005fe8:	f000 ff8e 	bl	8006f08 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8005fec:	2101      	movs	r1, #1
 8005fee:	4808      	ldr	r0, [pc, #32]	@ (8006010 <main+0x5c>)
 8005ff0:	f7fd fda4 	bl	8003b3c <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8005ff4:	4807      	ldr	r0, [pc, #28]	@ (8006014 <main+0x60>)
 8005ff6:	f006 fa57 	bl	800c4a8 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8005ffa:	f7fa fa8d 	bl	8000518 <ILI9341_Init>
  Display_booting_screen();
 8005ffe:	f7fd fdd6 	bl	8003bae <Display_booting_screen>

  //eeprom_show();

  //HAL_Delay(50000);

  Si468x_dab_init();
 8006002:	f7fb f891 	bl	8001128 <Si468x_dab_init>
  restore_from_eeprom();
 8006006:	f7fd f9af 	bl	8003368 <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 800600a:	f000 f999 	bl	8006340 <state_machine>
 800600e:	e7fc      	b.n	800600a <main+0x56>
 8006010:	0800ef0c 	.word	0x0800ef0c
 8006014:	20007104 	.word	0x20007104

08006018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b094      	sub	sp, #80	@ 0x50
 800601c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800601e:	f107 0320 	add.w	r3, r7, #32
 8006022:	2230      	movs	r2, #48	@ 0x30
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f007 fbee 	bl	800d808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800602c:	f107 030c 	add.w	r3, r7, #12
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	609a      	str	r2, [r3, #8]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800603c:	2300      	movs	r3, #0
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	4b28      	ldr	r3, [pc, #160]	@ (80060e4 <SystemClock_Config+0xcc>)
 8006042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006044:	4a27      	ldr	r2, [pc, #156]	@ (80060e4 <SystemClock_Config+0xcc>)
 8006046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800604a:	6413      	str	r3, [r2, #64]	@ 0x40
 800604c:	4b25      	ldr	r3, [pc, #148]	@ (80060e4 <SystemClock_Config+0xcc>)
 800604e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006058:	2300      	movs	r3, #0
 800605a:	607b      	str	r3, [r7, #4]
 800605c:	4b22      	ldr	r3, [pc, #136]	@ (80060e8 <SystemClock_Config+0xd0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a21      	ldr	r2, [pc, #132]	@ (80060e8 <SystemClock_Config+0xd0>)
 8006062:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	4b1f      	ldr	r3, [pc, #124]	@ (80060e8 <SystemClock_Config+0xd0>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006070:	607b      	str	r3, [r7, #4]
 8006072:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006074:	2301      	movs	r3, #1
 8006076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006078:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800607e:	2302      	movs	r3, #2
 8006080:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006082:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006088:	2304      	movs	r3, #4
 800608a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 800608c:	23f0      	movs	r3, #240	@ 0xf0
 800608e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006090:	2302      	movs	r3, #2
 8006092:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006094:	2304      	movs	r3, #4
 8006096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006098:	f107 0320 	add.w	r3, r7, #32
 800609c:	4618      	mov	r0, r3
 800609e:	f004 fe55 	bl	800ad4c <HAL_RCC_OscConfig>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80060a8:	f000 f820 	bl	80060ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060ac:	230f      	movs	r3, #15
 80060ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060b0:	2302      	movs	r3, #2
 80060b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80060b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80060bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80060be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	2105      	movs	r1, #5
 80060ca:	4618      	mov	r0, r3
 80060cc:	f005 f8b6 	bl	800b23c <HAL_RCC_ClockConfig>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80060d6:	f000 f809 	bl	80060ec <Error_Handler>
  }
}
 80060da:	bf00      	nop
 80060dc:	3750      	adds	r7, #80	@ 0x50
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40023800 	.word	0x40023800
 80060e8:	40007000 	.word	0x40007000

080060ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80060f0:	b672      	cpsid	i
}
 80060f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <Error_Handler+0x8>

080060f8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80060fc:	4b17      	ldr	r3, [pc, #92]	@ (800615c <MX_SPI1_Init+0x64>)
 80060fe:	4a18      	ldr	r2, [pc, #96]	@ (8006160 <MX_SPI1_Init+0x68>)
 8006100:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006102:	4b16      	ldr	r3, [pc, #88]	@ (800615c <MX_SPI1_Init+0x64>)
 8006104:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006108:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800610a:	4b14      	ldr	r3, [pc, #80]	@ (800615c <MX_SPI1_Init+0x64>)
 800610c:	2200      	movs	r2, #0
 800610e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006110:	4b12      	ldr	r3, [pc, #72]	@ (800615c <MX_SPI1_Init+0x64>)
 8006112:	2200      	movs	r2, #0
 8006114:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006116:	4b11      	ldr	r3, [pc, #68]	@ (800615c <MX_SPI1_Init+0x64>)
 8006118:	2200      	movs	r2, #0
 800611a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800611c:	4b0f      	ldr	r3, [pc, #60]	@ (800615c <MX_SPI1_Init+0x64>)
 800611e:	2200      	movs	r2, #0
 8006120:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006122:	4b0e      	ldr	r3, [pc, #56]	@ (800615c <MX_SPI1_Init+0x64>)
 8006124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006128:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800612a:	4b0c      	ldr	r3, [pc, #48]	@ (800615c <MX_SPI1_Init+0x64>)
 800612c:	2220      	movs	r2, #32
 800612e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006130:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <MX_SPI1_Init+0x64>)
 8006132:	2200      	movs	r2, #0
 8006134:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006136:	4b09      	ldr	r3, [pc, #36]	@ (800615c <MX_SPI1_Init+0x64>)
 8006138:	2200      	movs	r2, #0
 800613a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800613c:	4b07      	ldr	r3, [pc, #28]	@ (800615c <MX_SPI1_Init+0x64>)
 800613e:	2200      	movs	r2, #0
 8006140:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006142:	4b06      	ldr	r3, [pc, #24]	@ (800615c <MX_SPI1_Init+0x64>)
 8006144:	220a      	movs	r2, #10
 8006146:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006148:	4804      	ldr	r0, [pc, #16]	@ (800615c <MX_SPI1_Init+0x64>)
 800614a:	f005 fa97 	bl	800b67c <HAL_SPI_Init>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006154:	f7ff ffca 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20006f00 	.word	0x20006f00
 8006160:	40013000 	.word	0x40013000

08006164 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006168:	4b17      	ldr	r3, [pc, #92]	@ (80061c8 <MX_SPI2_Init+0x64>)
 800616a:	4a18      	ldr	r2, [pc, #96]	@ (80061cc <MX_SPI2_Init+0x68>)
 800616c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800616e:	4b16      	ldr	r3, [pc, #88]	@ (80061c8 <MX_SPI2_Init+0x64>)
 8006170:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006176:	4b14      	ldr	r3, [pc, #80]	@ (80061c8 <MX_SPI2_Init+0x64>)
 8006178:	2200      	movs	r2, #0
 800617a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800617c:	4b12      	ldr	r3, [pc, #72]	@ (80061c8 <MX_SPI2_Init+0x64>)
 800617e:	2200      	movs	r2, #0
 8006180:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006182:	4b11      	ldr	r3, [pc, #68]	@ (80061c8 <MX_SPI2_Init+0x64>)
 8006184:	2200      	movs	r2, #0
 8006186:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006188:	4b0f      	ldr	r3, [pc, #60]	@ (80061c8 <MX_SPI2_Init+0x64>)
 800618a:	2200      	movs	r2, #0
 800618c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800618e:	4b0e      	ldr	r3, [pc, #56]	@ (80061c8 <MX_SPI2_Init+0x64>)
 8006190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006194:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006196:	4b0c      	ldr	r3, [pc, #48]	@ (80061c8 <MX_SPI2_Init+0x64>)
 8006198:	2200      	movs	r2, #0
 800619a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800619c:	4b0a      	ldr	r3, [pc, #40]	@ (80061c8 <MX_SPI2_Init+0x64>)
 800619e:	2200      	movs	r2, #0
 80061a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80061a2:	4b09      	ldr	r3, [pc, #36]	@ (80061c8 <MX_SPI2_Init+0x64>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a8:	4b07      	ldr	r3, [pc, #28]	@ (80061c8 <MX_SPI2_Init+0x64>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80061ae:	4b06      	ldr	r3, [pc, #24]	@ (80061c8 <MX_SPI2_Init+0x64>)
 80061b0:	220a      	movs	r2, #10
 80061b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80061b4:	4804      	ldr	r0, [pc, #16]	@ (80061c8 <MX_SPI2_Init+0x64>)
 80061b6:	f005 fa61 	bl	800b67c <HAL_SPI_Init>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80061c0:	f7ff ff94 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80061c4:	bf00      	nop
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20006f58 	.word	0x20006f58
 80061cc:	40003800 	.word	0x40003800

080061d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08c      	sub	sp, #48	@ 0x30
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d8:	f107 031c 	add.w	r3, r7, #28
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a4d      	ldr	r2, [pc, #308]	@ (8006324 <HAL_SPI_MspInit+0x154>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d12c      	bne.n	800624c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80061f2:	2300      	movs	r3, #0
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 80061f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fa:	4a4b      	ldr	r2, [pc, #300]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 80061fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006200:	6453      	str	r3, [r2, #68]	@ 0x44
 8006202:	4b49      	ldr	r3, [pc, #292]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 8006204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	4b45      	ldr	r3, [pc, #276]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	4a44      	ldr	r2, [pc, #272]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	6313      	str	r3, [r2, #48]	@ 0x30
 800621e:	4b42      	ldr	r3, [pc, #264]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 800622a:	23e0      	movs	r3, #224	@ 0xe0
 800622c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622e:	2302      	movs	r3, #2
 8006230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006232:	2300      	movs	r3, #0
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006236:	2303      	movs	r3, #3
 8006238:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800623a:	2305      	movs	r3, #5
 800623c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800623e:	f107 031c 	add.w	r3, r7, #28
 8006242:	4619      	mov	r1, r3
 8006244:	4839      	ldr	r0, [pc, #228]	@ (800632c <HAL_SPI_MspInit+0x15c>)
 8006246:	f001 ff19 	bl	800807c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800624a:	e066      	b.n	800631a <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a37      	ldr	r2, [pc, #220]	@ (8006330 <HAL_SPI_MspInit+0x160>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d161      	bne.n	800631a <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	4b33      	ldr	r3, [pc, #204]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	4a32      	ldr	r2, [pc, #200]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 8006260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006264:	6413      	str	r3, [r2, #64]	@ 0x40
 8006266:	4b30      	ldr	r3, [pc, #192]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	4b2c      	ldr	r3, [pc, #176]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627a:	4a2b      	ldr	r2, [pc, #172]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 800627c:	f043 0302 	orr.w	r3, r3, #2
 8006280:	6313      	str	r3, [r2, #48]	@ 0x30
 8006282:	4b29      	ldr	r3, [pc, #164]	@ (8006328 <HAL_SPI_MspInit+0x158>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800628e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8006292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006294:	2302      	movs	r3, #2
 8006296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006298:	2300      	movs	r3, #0
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800629c:	2303      	movs	r3, #3
 800629e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80062a0:	2305      	movs	r3, #5
 80062a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062a4:	f107 031c 	add.w	r3, r7, #28
 80062a8:	4619      	mov	r1, r3
 80062aa:	4822      	ldr	r0, [pc, #136]	@ (8006334 <HAL_SPI_MspInit+0x164>)
 80062ac:	f001 fee6 	bl	800807c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80062b0:	4b21      	ldr	r3, [pc, #132]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062b2:	4a22      	ldr	r2, [pc, #136]	@ (800633c <HAL_SPI_MspInit+0x16c>)
 80062b4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80062b6:	4b20      	ldr	r3, [pc, #128]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062be:	2240      	movs	r2, #64	@ 0x40
 80062c0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062ce:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062d0:	4b19      	ldr	r3, [pc, #100]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062d6:	4b18      	ldr	r3, [pc, #96]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062d8:	2200      	movs	r2, #0
 80062da:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80062dc:	4b16      	ldr	r3, [pc, #88]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062de:	2200      	movs	r2, #0
 80062e0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80062e2:	4b15      	ldr	r3, [pc, #84]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062e8:	4b13      	ldr	r3, [pc, #76]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80062ee:	4812      	ldr	r0, [pc, #72]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 80062f0:	f001 fbaa 	bl	8007a48 <HAL_DMA_Init>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 80062fa:	f7ff fef7 	bl	80060ec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a0d      	ldr	r2, [pc, #52]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 8006302:	649a      	str	r2, [r3, #72]	@ 0x48
 8006304:	4a0c      	ldr	r2, [pc, #48]	@ (8006338 <HAL_SPI_MspInit+0x168>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800630a:	2200      	movs	r2, #0
 800630c:	2100      	movs	r1, #0
 800630e:	2024      	movs	r0, #36	@ 0x24
 8006310:	f001 fb63 	bl	80079da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006314:	2024      	movs	r0, #36	@ 0x24
 8006316:	f001 fb7c 	bl	8007a12 <HAL_NVIC_EnableIRQ>
}
 800631a:	bf00      	nop
 800631c:	3730      	adds	r7, #48	@ 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40013000 	.word	0x40013000
 8006328:	40023800 	.word	0x40023800
 800632c:	40020000 	.word	0x40020000
 8006330:	40003800 	.word	0x40003800
 8006334:	40020400 	.word	0x40020400
 8006338:	20006fb0 	.word	0x20006fb0
 800633c:	40026070 	.word	0x40026070

08006340 <state_machine>:
uint8_t scan_complete_flag = 0;

uint16_t audio_info_timeout;

void state_machine()
{
 8006340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006342:	b097      	sub	sp, #92	@ 0x5c
 8006344:	af06      	add	r7, sp, #24
	if(state_change_done)
 8006346:	4b65      	ldr	r3, [pc, #404]	@ (80064dc <state_machine+0x19c>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 800634e:	f000 fea1 	bl	8007094 <Touch_read>
 8006352:	4603      	mov	r3, r0
 8006354:	4a62      	ldr	r2, [pc, #392]	@ (80064e0 <state_machine+0x1a0>)
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	e005      	b.n	8006366 <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 800635a:	4b61      	ldr	r3, [pc, #388]	@ (80064e0 <state_machine+0x1a0>)
 800635c:	2200      	movs	r2, #0
 800635e:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 8006360:	4b5f      	ldr	r3, [pc, #380]	@ (80064e0 <state_machine+0x1a0>)
 8006362:	2200      	movs	r2, #0
 8006364:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 8006366:	4c5f      	ldr	r4, [pc, #380]	@ (80064e4 <state_machine+0x1a4>)
 8006368:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800636c:	4618      	mov	r0, r3
 800636e:	f7fd fb81 	bl	8003a74 <get_dab_management>
 8006372:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 800637c:	f7fd fb8c 	bl	8003a98 <get_dls_label>
 8006380:	4603      	mov	r3, r0
 8006382:	4a59      	ldr	r2, [pc, #356]	@ (80064e8 <state_machine+0x1a8>)
 8006384:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 8006386:	f7fc fedf 	bl	8003148 <Si468x_dab_get_time>


	switch(system_state)
 800638a:	4b58      	ldr	r3, [pc, #352]	@ (80064ec <state_machine+0x1ac>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b05      	cmp	r3, #5
 8006390:	f200 8475 	bhi.w	8006c7e <state_machine+0x93e>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <state_machine+0x5c>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063b5 	.word	0x080063b5
 80063a0:	08006505 	.word	0x08006505
 80063a4:	0800696d 	.word	0x0800696d
 80063a8:	0800689d 	.word	0x0800689d
 80063ac:	080069e1 	.word	0x080069e1
 80063b0:	08006b7d 	.word	0x08006b7d
	{
	case main_screen:

		if(!state_change_done)
 80063b4:	4b49      	ldr	r3, [pc, #292]	@ (80064dc <state_machine+0x19c>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d14e      	bne.n	800645a <state_machine+0x11a>
		{
			if(!dab_management_to_display.total_services)
 80063bc:	4b49      	ldr	r3, [pc, #292]	@ (80064e4 <state_machine+0x1a4>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d103      	bne.n	80063cc <state_machine+0x8c>
			{
				playing_state = not_playing;
 80063c4:	4b4a      	ldr	r3, [pc, #296]	@ (80064f0 <state_machine+0x1b0>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e028      	b.n	800641e <state_machine+0xde>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 80063cc:	f7fd fb3e 	bl	8003a4c <get_dab_service_list>
 80063d0:	4603      	mov	r3, r0
 80063d2:	4a48      	ldr	r2, [pc, #288]	@ (80064f4 <state_machine+0x1b4>)
 80063d4:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 80063d6:	f7fd fb43 	bl	8003a60 <get_dab_ensemble_list>
 80063da:	4603      	mov	r3, r0
 80063dc:	4a46      	ldr	r2, [pc, #280]	@ (80064f8 <state_machine+0x1b8>)
 80063de:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 80063e0:	4b46      	ldr	r3, [pc, #280]	@ (80064fc <state_machine+0x1bc>)
 80063e2:	2232      	movs	r2, #50	@ 0x32
 80063e4:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 80063e6:	e014      	b.n	8006412 <state_machine+0xd2>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 80063e8:	4c45      	ldr	r4, [pc, #276]	@ (8006500 <state_machine+0x1c0>)
 80063ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fc fb9e 	bl	8002b30 <Si468x_dab_get_audio_info>
 80063f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 80063fe:	4b3f      	ldr	r3, [pc, #252]	@ (80064fc <state_machine+0x1bc>)
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	4b3d      	ldr	r3, [pc, #244]	@ (80064fc <state_machine+0x1bc>)
 8006408:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 800640a:	4b3c      	ldr	r3, [pc, #240]	@ (80064fc <state_machine+0x1bc>)
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <state_machine+0xdc>
				while(!dab_audio_info_to_display.audio_sample_rate)
 8006412:	4b3b      	ldr	r3, [pc, #236]	@ (8006500 <state_machine+0x1c0>)
 8006414:	885b      	ldrh	r3, [r3, #2]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0e6      	beq.n	80063e8 <state_machine+0xa8>
 800641a:	e000      	b.n	800641e <state_machine+0xde>
					{
						break;
 800641c:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 800641e:	f7fd fbcd 	bl	8003bbc <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 8006422:	4b34      	ldr	r3, [pc, #208]	@ (80064f4 <state_machine+0x1b4>)
 8006424:	681e      	ldr	r6, [r3, #0]
 8006426:	4b34      	ldr	r3, [pc, #208]	@ (80064f8 <state_machine+0x1b8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	4c2d      	ldr	r4, [pc, #180]	@ (80064e4 <state_machine+0x1a4>)
 800642e:	4b34      	ldr	r3, [pc, #208]	@ (8006500 <state_machine+0x1c0>)
 8006430:	ad02      	add	r5, sp, #8
 8006432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006434:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006438:	466a      	mov	r2, sp
 800643a:	f104 0308 	add.w	r3, r4, #8
 800643e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006442:	e882 0003 	stmia.w	r2, {r0, r1}
 8006446:	e894 000c 	ldmia.w	r4, {r2, r3}
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4630      	mov	r0, r6
 800644e:	f7fd fc43 	bl	8003cd8 <Display_main_screen_data>
			state_change_done = 1;
 8006452:	4b22      	ldr	r3, [pc, #136]	@ (80064dc <state_machine+0x19c>)
 8006454:	2201      	movs	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e00d      	b.n	8006476 <state_machine+0x136>
		}

		else
		{
			if(playing_state == playing)
 800645a:	4b25      	ldr	r3, [pc, #148]	@ (80064f0 <state_machine+0x1b0>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d107      	bne.n	8006472 <state_machine+0x132>
			{
				Si468x_dab_get_digital_service_data();
 8006462:	f7fc fcf9 	bl	8002e58 <Si468x_dab_get_digital_service_data>
				Display_main_screen_dls(dls_label_to_display);
 8006466:	4b20      	ldr	r3, [pc, #128]	@ (80064e8 <state_machine+0x1a8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f7fd fd6e 	bl	8003f4c <Display_main_screen_dls>
 8006470:	e001      	b.n	8006476 <state_machine+0x136>
			}
			else
			{
				Display_main_screen_empty();
 8006472:	f7fd fda7 	bl	8003fc4 <Display_main_screen_empty>
			}
		}

		//left button handling (alarming)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006476:	4b1a      	ldr	r3, [pc, #104]	@ (80064e0 <state_machine+0x1a0>)
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	2b05      	cmp	r3, #5
 800647c:	d911      	bls.n	80064a2 <state_machine+0x162>
 800647e:	4b18      	ldr	r3, [pc, #96]	@ (80064e0 <state_machine+0x1a0>)
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	2b9c      	cmp	r3, #156	@ 0x9c
 8006484:	d80d      	bhi.n	80064a2 <state_machine+0x162>
 8006486:	4b16      	ldr	r3, [pc, #88]	@ (80064e0 <state_machine+0x1a0>)
 8006488:	885b      	ldrh	r3, [r3, #2]
 800648a:	2bc3      	cmp	r3, #195	@ 0xc3
 800648c:	d909      	bls.n	80064a2 <state_machine+0x162>
 800648e:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <state_machine+0x1a0>)
 8006490:	885b      	ldrh	r3, [r3, #2]
 8006492:	2bea      	cmp	r3, #234	@ 0xea
 8006494:	d805      	bhi.n	80064a2 <state_machine+0x162>
		{
			state_change_done = 0;
 8006496:	4b11      	ldr	r3, [pc, #68]	@ (80064dc <state_machine+0x19c>)
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
			system_state = alarming;
 800649c:	4b13      	ldr	r3, [pc, #76]	@ (80064ec <state_machine+0x1ac>)
 800649e:	2205      	movs	r2, #5
 80064a0:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80064a2:	4b0f      	ldr	r3, [pc, #60]	@ (80064e0 <state_machine+0x1a0>)
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	2ba3      	cmp	r3, #163	@ 0xa3
 80064a8:	f240 83eb 	bls.w	8006c82 <state_machine+0x942>
 80064ac:	4b0c      	ldr	r3, [pc, #48]	@ (80064e0 <state_machine+0x1a0>)
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80064b4:	f200 83e5 	bhi.w	8006c82 <state_machine+0x942>
 80064b8:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <state_machine+0x1a0>)
 80064ba:	885b      	ldrh	r3, [r3, #2]
 80064bc:	2bc3      	cmp	r3, #195	@ 0xc3
 80064be:	f240 83e0 	bls.w	8006c82 <state_machine+0x942>
 80064c2:	4b07      	ldr	r3, [pc, #28]	@ (80064e0 <state_machine+0x1a0>)
 80064c4:	885b      	ldrh	r3, [r3, #2]
 80064c6:	2bea      	cmp	r3, #234	@ 0xea
 80064c8:	f200 83db 	bhi.w	8006c82 <state_machine+0x942>
		{
			state_change_done = 0;
 80064cc:	4b03      	ldr	r3, [pc, #12]	@ (80064dc <state_machine+0x19c>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 80064d2:	4b06      	ldr	r3, [pc, #24]	@ (80064ec <state_machine+0x1ac>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]
		}

		break;
 80064d8:	e3d3      	b.n	8006c82 <state_machine+0x942>
 80064da:	bf00      	nop
 80064dc:	20007011 	.word	0x20007011
 80064e0:	20007018 	.word	0x20007018
 80064e4:	20007044 	.word	0x20007044
 80064e8:	2000706c 	.word	0x2000706c
 80064ec:	20007010 	.word	0x20007010
 80064f0:	20000150 	.word	0x20000150
 80064f4:	20007054 	.word	0x20007054
 80064f8:	20007058 	.word	0x20007058
 80064fc:	20007072 	.word	0x20007072
 8006500:	2000705c 	.word	0x2000705c

	case services_list_screen:
		if(!state_change_done)
 8006504:	4b7d      	ldr	r3, [pc, #500]	@ (80066fc <state_machine+0x3bc>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d114      	bne.n	8006536 <state_machine+0x1f6>
		{
			services_list_to_display = get_dab_service_list();
 800650c:	f7fd fa9e 	bl	8003a4c <get_dab_service_list>
 8006510:	4603      	mov	r3, r0
 8006512:	4a7b      	ldr	r2, [pc, #492]	@ (8006700 <state_machine+0x3c0>)
 8006514:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 8006516:	f7fd fdbb 	bl	8004090 <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800651a:	4b7a      	ldr	r3, [pc, #488]	@ (8006704 <state_machine+0x3c4>)
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	4b78      	ldr	r3, [pc, #480]	@ (8006700 <state_machine+0x3c0>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b79      	ldr	r3, [pc, #484]	@ (8006708 <state_machine+0x3c8>)
 8006524:	9201      	str	r2, [sp, #4]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	9200      	str	r2, [sp, #0]
 800652a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800652c:	f7fd fe74 	bl	8004218 <Display_stations_list_data>
			state_change_done = 1;
 8006530:	4b72      	ldr	r3, [pc, #456]	@ (80066fc <state_machine+0x3bc>)
 8006532:	2201      	movs	r2, #1
 8006534:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006536:	4b75      	ldr	r3, [pc, #468]	@ (800670c <state_machine+0x3cc>)
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	2b05      	cmp	r3, #5
 800653c:	d911      	bls.n	8006562 <state_machine+0x222>
 800653e:	4b73      	ldr	r3, [pc, #460]	@ (800670c <state_machine+0x3cc>)
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	2b9c      	cmp	r3, #156	@ 0x9c
 8006544:	d80d      	bhi.n	8006562 <state_machine+0x222>
 8006546:	4b71      	ldr	r3, [pc, #452]	@ (800670c <state_machine+0x3cc>)
 8006548:	885b      	ldrh	r3, [r3, #2]
 800654a:	2bc3      	cmp	r3, #195	@ 0xc3
 800654c:	d909      	bls.n	8006562 <state_machine+0x222>
 800654e:	4b6f      	ldr	r3, [pc, #444]	@ (800670c <state_machine+0x3cc>)
 8006550:	885b      	ldrh	r3, [r3, #2]
 8006552:	2bea      	cmp	r3, #234	@ 0xea
 8006554:	d805      	bhi.n	8006562 <state_machine+0x222>
		{
			state_change_done = 0;
 8006556:	4b69      	ldr	r3, [pc, #420]	@ (80066fc <state_machine+0x3bc>)
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 800655c:	4b6c      	ldr	r3, [pc, #432]	@ (8006710 <state_machine+0x3d0>)
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006562:	4b6a      	ldr	r3, [pc, #424]	@ (800670c <state_machine+0x3cc>)
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	2ba3      	cmp	r3, #163	@ 0xa3
 8006568:	d912      	bls.n	8006590 <state_machine+0x250>
 800656a:	4b68      	ldr	r3, [pc, #416]	@ (800670c <state_machine+0x3cc>)
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006572:	d80d      	bhi.n	8006590 <state_machine+0x250>
 8006574:	4b65      	ldr	r3, [pc, #404]	@ (800670c <state_machine+0x3cc>)
 8006576:	885b      	ldrh	r3, [r3, #2]
 8006578:	2bc3      	cmp	r3, #195	@ 0xc3
 800657a:	d909      	bls.n	8006590 <state_machine+0x250>
 800657c:	4b63      	ldr	r3, [pc, #396]	@ (800670c <state_machine+0x3cc>)
 800657e:	885b      	ldrh	r3, [r3, #2]
 8006580:	2bea      	cmp	r3, #234	@ 0xea
 8006582:	d805      	bhi.n	8006590 <state_machine+0x250>
		{
			state_change_done = 0;
 8006584:	4b5d      	ldr	r3, [pc, #372]	@ (80066fc <state_machine+0x3bc>)
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 800658a:	4b61      	ldr	r3, [pc, #388]	@ (8006710 <state_machine+0x3d0>)
 800658c:	2203      	movs	r2, #3
 800658e:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8006590:	4b5e      	ldr	r3, [pc, #376]	@ (800670c <state_machine+0x3cc>)
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8006598:	d930      	bls.n	80065fc <state_machine+0x2bc>
 800659a:	4b5c      	ldr	r3, [pc, #368]	@ (800670c <state_machine+0x3cc>)
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80065a2:	d82b      	bhi.n	80065fc <state_machine+0x2bc>
 80065a4:	4b59      	ldr	r3, [pc, #356]	@ (800670c <state_machine+0x3cc>)
 80065a6:	885b      	ldrh	r3, [r3, #2]
 80065a8:	2b14      	cmp	r3, #20
 80065aa:	d927      	bls.n	80065fc <state_machine+0x2bc>
 80065ac:	4b57      	ldr	r3, [pc, #348]	@ (800670c <state_machine+0x3cc>)
 80065ae:	885b      	ldrh	r3, [r3, #2]
 80065b0:	2b65      	cmp	r3, #101	@ 0x65
 80065b2:	d823      	bhi.n	80065fc <state_machine+0x2bc>
		{
			if(dab_management_to_display.total_services)
 80065b4:	4b54      	ldr	r3, [pc, #336]	@ (8006708 <state_machine+0x3c8>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01f      	beq.n	80065fc <state_machine+0x2bc>
			{
				srv_list_start_index--;
 80065bc:	4b51      	ldr	r3, [pc, #324]	@ (8006704 <state_machine+0x3c4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4a50      	ldr	r2, [pc, #320]	@ (8006704 <state_machine+0x3c4>)
 80065c4:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 80065c6:	4b50      	ldr	r3, [pc, #320]	@ (8006708 <state_machine+0x3c8>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006704 <state_machine+0x3c4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	db03      	blt.n	80065dc <state_machine+0x29c>
 80065d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006704 <state_machine+0x3c4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	da04      	bge.n	80065e6 <state_machine+0x2a6>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 80065dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006708 <state_machine+0x3c8>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	4a48      	ldr	r2, [pc, #288]	@ (8006704 <state_machine+0x3c4>)
 80065e4:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80065e6:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <state_machine+0x3c4>)
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	4b45      	ldr	r3, [pc, #276]	@ (8006700 <state_machine+0x3c0>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b46      	ldr	r3, [pc, #280]	@ (8006708 <state_machine+0x3c8>)
 80065f0:	9201      	str	r2, [sp, #4]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	9200      	str	r2, [sp, #0]
 80065f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065f8:	f7fd fe0e 	bl	8004218 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 80065fc:	4b43      	ldr	r3, [pc, #268]	@ (800670c <state_machine+0x3cc>)
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8006604:	d92a      	bls.n	800665c <state_machine+0x31c>
 8006606:	4b41      	ldr	r3, [pc, #260]	@ (800670c <state_machine+0x3cc>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800660e:	d825      	bhi.n	800665c <state_machine+0x31c>
 8006610:	4b3e      	ldr	r3, [pc, #248]	@ (800670c <state_machine+0x3cc>)
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	2b6c      	cmp	r3, #108	@ 0x6c
 8006616:	d921      	bls.n	800665c <state_machine+0x31c>
 8006618:	4b3c      	ldr	r3, [pc, #240]	@ (800670c <state_machine+0x3cc>)
 800661a:	885b      	ldrh	r3, [r3, #2]
 800661c:	2bbd      	cmp	r3, #189	@ 0xbd
 800661e:	d81d      	bhi.n	800665c <state_machine+0x31c>
		{
			if(dab_management_to_display.total_services)
 8006620:	4b39      	ldr	r3, [pc, #228]	@ (8006708 <state_machine+0x3c8>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d019      	beq.n	800665c <state_machine+0x31c>
			{
				srv_list_start_index++;
 8006628:	4b36      	ldr	r3, [pc, #216]	@ (8006704 <state_machine+0x3c4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	4a35      	ldr	r2, [pc, #212]	@ (8006704 <state_machine+0x3c4>)
 8006630:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 8006632:	4b35      	ldr	r3, [pc, #212]	@ (8006708 <state_machine+0x3c8>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	4b32      	ldr	r3, [pc, #200]	@ (8006704 <state_machine+0x3c4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	dc02      	bgt.n	8006646 <state_machine+0x306>
				{
					srv_list_start_index = 0;
 8006640:	4b30      	ldr	r3, [pc, #192]	@ (8006704 <state_machine+0x3c4>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 8006646:	4b2f      	ldr	r3, [pc, #188]	@ (8006704 <state_machine+0x3c4>)
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	4b2d      	ldr	r3, [pc, #180]	@ (8006700 <state_machine+0x3c0>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4b2e      	ldr	r3, [pc, #184]	@ (8006708 <state_machine+0x3c8>)
 8006650:	9201      	str	r2, [sp, #4]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	9200      	str	r2, [sp, #0]
 8006656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006658:	f7fd fdde 	bl	8004218 <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 800665c:	4b2b      	ldr	r3, [pc, #172]	@ (800670c <state_machine+0x3cc>)
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	2b05      	cmp	r3, #5
 8006662:	d91f      	bls.n	80066a4 <state_machine+0x364>
 8006664:	4b29      	ldr	r3, [pc, #164]	@ (800670c <state_machine+0x3cc>)
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800666c:	d81a      	bhi.n	80066a4 <state_machine+0x364>
 800666e:	4b27      	ldr	r3, [pc, #156]	@ (800670c <state_machine+0x3cc>)
 8006670:	885b      	ldrh	r3, [r3, #2]
 8006672:	2b14      	cmp	r3, #20
 8006674:	d916      	bls.n	80066a4 <state_machine+0x364>
 8006676:	4b25      	ldr	r3, [pc, #148]	@ (800670c <state_machine+0x3cc>)
 8006678:	885b      	ldrh	r3, [r3, #2]
 800667a:	2b31      	cmp	r3, #49	@ 0x31
 800667c:	d812      	bhi.n	80066a4 <state_machine+0x364>
		{
			if(dab_management_to_display.total_services)
 800667e:	4b22      	ldr	r3, [pc, #136]	@ (8006708 <state_machine+0x3c8>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00e      	beq.n	80066a4 <state_machine+0x364>
			{
				state_change_done = 0;
 8006686:	4b1d      	ldr	r3, [pc, #116]	@ (80066fc <state_machine+0x3bc>)
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 800668c:	4b1d      	ldr	r3, [pc, #116]	@ (8006704 <state_machine+0x3c4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4618      	mov	r0, r3
 8006694:	f7fc fdd2 	bl	800323c <play_station>
				playing_state = playing;
 8006698:	4b1e      	ldr	r3, [pc, #120]	@ (8006714 <state_machine+0x3d4>)
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800669e:	4b1c      	ldr	r3, [pc, #112]	@ (8006710 <state_machine+0x3d0>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 80066a4:	4b19      	ldr	r3, [pc, #100]	@ (800670c <state_machine+0x3cc>)
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	2b05      	cmp	r3, #5
 80066aa:	d943      	bls.n	8006734 <state_machine+0x3f4>
 80066ac:	4b17      	ldr	r3, [pc, #92]	@ (800670c <state_machine+0x3cc>)
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80066b4:	d83e      	bhi.n	8006734 <state_machine+0x3f4>
 80066b6:	4b15      	ldr	r3, [pc, #84]	@ (800670c <state_machine+0x3cc>)
 80066b8:	885b      	ldrh	r3, [r3, #2]
 80066ba:	2b37      	cmp	r3, #55	@ 0x37
 80066bc:	d93a      	bls.n	8006734 <state_machine+0x3f4>
 80066be:	4b13      	ldr	r3, [pc, #76]	@ (800670c <state_machine+0x3cc>)
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	2b54      	cmp	r3, #84	@ 0x54
 80066c4:	d836      	bhi.n	8006734 <state_machine+0x3f4>
		{
			if(dab_management_to_display.total_services)
 80066c6:	4b10      	ldr	r3, [pc, #64]	@ (8006708 <state_machine+0x3c8>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d032      	beq.n	8006734 <state_machine+0x3f4>
			{
				state_change_done = 0;
 80066ce:	4b0b      	ldr	r3, [pc, #44]	@ (80066fc <state_machine+0x3bc>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 80066d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <state_machine+0x3c4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	4a0b      	ldr	r2, [pc, #44]	@ (8006708 <state_machine+0x3c8>)
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	4293      	cmp	r3, r2
 80066e0:	db1a      	blt.n	8006718 <state_machine+0x3d8>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 80066e2:	4b08      	ldr	r3, [pc, #32]	@ (8006704 <state_machine+0x3c4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	4b07      	ldr	r3, [pc, #28]	@ (8006708 <state_machine+0x3c8>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	3301      	adds	r3, #1
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fc fda1 	bl	800323c <play_station>
 80066fa:	e015      	b.n	8006728 <state_machine+0x3e8>
 80066fc:	20007011 	.word	0x20007011
 8006700:	20007054 	.word	0x20007054
 8006704:	20007014 	.word	0x20007014
 8006708:	20007044 	.word	0x20007044
 800670c:	20007018 	.word	0x20007018
 8006710:	20007010 	.word	0x20007010
 8006714:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 8006718:	4b8d      	ldr	r3, [pc, #564]	@ (8006950 <state_machine+0x610>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	3301      	adds	r3, #1
 8006720:	b2db      	uxtb	r3, r3
 8006722:	4618      	mov	r0, r3
 8006724:	f7fc fd8a 	bl	800323c <play_station>
				}

				playing_state = playing;
 8006728:	4b8a      	ldr	r3, [pc, #552]	@ (8006954 <state_machine+0x614>)
 800672a:	2201      	movs	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800672e:	4b8a      	ldr	r3, [pc, #552]	@ (8006958 <state_machine+0x618>)
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 8006734:	4b89      	ldr	r3, [pc, #548]	@ (800695c <state_machine+0x61c>)
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	2b05      	cmp	r3, #5
 800673a:	d935      	bls.n	80067a8 <state_machine+0x468>
 800673c:	4b87      	ldr	r3, [pc, #540]	@ (800695c <state_machine+0x61c>)
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8006744:	d830      	bhi.n	80067a8 <state_machine+0x468>
 8006746:	4b85      	ldr	r3, [pc, #532]	@ (800695c <state_machine+0x61c>)
 8006748:	885b      	ldrh	r3, [r3, #2]
 800674a:	2b5a      	cmp	r3, #90	@ 0x5a
 800674c:	d92c      	bls.n	80067a8 <state_machine+0x468>
 800674e:	4b83      	ldr	r3, [pc, #524]	@ (800695c <state_machine+0x61c>)
 8006750:	885b      	ldrh	r3, [r3, #2]
 8006752:	2b77      	cmp	r3, #119	@ 0x77
 8006754:	d828      	bhi.n	80067a8 <state_machine+0x468>
		{
			if(dab_management_to_display.total_services)
 8006756:	4b82      	ldr	r3, [pc, #520]	@ (8006960 <state_machine+0x620>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d024      	beq.n	80067a8 <state_machine+0x468>
			{
				state_change_done = 0;
 800675e:	4b81      	ldr	r3, [pc, #516]	@ (8006964 <state_machine+0x624>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 8006764:	4b7a      	ldr	r3, [pc, #488]	@ (8006950 <state_machine+0x610>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3302      	adds	r3, #2
 800676a:	4a7d      	ldr	r2, [pc, #500]	@ (8006960 <state_machine+0x620>)
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	4293      	cmp	r3, r2
 8006770:	db0c      	blt.n	800678c <state_machine+0x44c>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 8006772:	4b77      	ldr	r3, [pc, #476]	@ (8006950 <state_machine+0x610>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	4b79      	ldr	r3, [pc, #484]	@ (8006960 <state_machine+0x620>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	b2db      	uxtb	r3, r3
 8006780:	3302      	adds	r3, #2
 8006782:	b2db      	uxtb	r3, r3
 8006784:	4618      	mov	r0, r3
 8006786:	f7fc fd59 	bl	800323c <play_station>
 800678a:	e007      	b.n	800679c <state_machine+0x45c>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 800678c:	4b70      	ldr	r3, [pc, #448]	@ (8006950 <state_machine+0x610>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	3302      	adds	r3, #2
 8006794:	b2db      	uxtb	r3, r3
 8006796:	4618      	mov	r0, r3
 8006798:	f7fc fd50 	bl	800323c <play_station>
				}

				playing_state = playing;
 800679c:	4b6d      	ldr	r3, [pc, #436]	@ (8006954 <state_machine+0x614>)
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80067a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006958 <state_machine+0x618>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 80067a8:	4b6c      	ldr	r3, [pc, #432]	@ (800695c <state_machine+0x61c>)
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	d935      	bls.n	800681c <state_machine+0x4dc>
 80067b0:	4b6a      	ldr	r3, [pc, #424]	@ (800695c <state_machine+0x61c>)
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80067b8:	d830      	bhi.n	800681c <state_machine+0x4dc>
 80067ba:	4b68      	ldr	r3, [pc, #416]	@ (800695c <state_machine+0x61c>)
 80067bc:	885b      	ldrh	r3, [r3, #2]
 80067be:	2b7d      	cmp	r3, #125	@ 0x7d
 80067c0:	d92c      	bls.n	800681c <state_machine+0x4dc>
 80067c2:	4b66      	ldr	r3, [pc, #408]	@ (800695c <state_machine+0x61c>)
 80067c4:	885b      	ldrh	r3, [r3, #2]
 80067c6:	2b9a      	cmp	r3, #154	@ 0x9a
 80067c8:	d828      	bhi.n	800681c <state_machine+0x4dc>
		{
			if(dab_management_to_display.total_services)
 80067ca:	4b65      	ldr	r3, [pc, #404]	@ (8006960 <state_machine+0x620>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d024      	beq.n	800681c <state_machine+0x4dc>
			{
				state_change_done = 0;
 80067d2:	4b64      	ldr	r3, [pc, #400]	@ (8006964 <state_machine+0x624>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 80067d8:	4b5d      	ldr	r3, [pc, #372]	@ (8006950 <state_machine+0x610>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3303      	adds	r3, #3
 80067de:	4a60      	ldr	r2, [pc, #384]	@ (8006960 <state_machine+0x620>)
 80067e0:	7812      	ldrb	r2, [r2, #0]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	db0c      	blt.n	8006800 <state_machine+0x4c0>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 80067e6:	4b5a      	ldr	r3, [pc, #360]	@ (8006950 <state_machine+0x610>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	4b5c      	ldr	r3, [pc, #368]	@ (8006960 <state_machine+0x620>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	3303      	adds	r3, #3
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fc fd1f 	bl	800323c <play_station>
 80067fe:	e007      	b.n	8006810 <state_machine+0x4d0>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 8006800:	4b53      	ldr	r3, [pc, #332]	@ (8006950 <state_machine+0x610>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	3303      	adds	r3, #3
 8006808:	b2db      	uxtb	r3, r3
 800680a:	4618      	mov	r0, r3
 800680c:	f7fc fd16 	bl	800323c <play_station>
				}

				playing_state = playing;
 8006810:	4b50      	ldr	r3, [pc, #320]	@ (8006954 <state_machine+0x614>)
 8006812:	2201      	movs	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006816:	4b50      	ldr	r3, [pc, #320]	@ (8006958 <state_machine+0x618>)
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 800681c:	4b4f      	ldr	r3, [pc, #316]	@ (800695c <state_machine+0x61c>)
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	2b05      	cmp	r3, #5
 8006822:	f240 8230 	bls.w	8006c86 <state_machine+0x946>
 8006826:	4b4d      	ldr	r3, [pc, #308]	@ (800695c <state_machine+0x61c>)
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800682e:	f200 822a 	bhi.w	8006c86 <state_machine+0x946>
 8006832:	4b4a      	ldr	r3, [pc, #296]	@ (800695c <state_machine+0x61c>)
 8006834:	885b      	ldrh	r3, [r3, #2]
 8006836:	2ba0      	cmp	r3, #160	@ 0xa0
 8006838:	f240 8225 	bls.w	8006c86 <state_machine+0x946>
 800683c:	4b47      	ldr	r3, [pc, #284]	@ (800695c <state_machine+0x61c>)
 800683e:	885b      	ldrh	r3, [r3, #2]
 8006840:	2bbd      	cmp	r3, #189	@ 0xbd
 8006842:	f200 8220 	bhi.w	8006c86 <state_machine+0x946>
		{
			if(dab_management_to_display.total_services)
 8006846:	4b46      	ldr	r3, [pc, #280]	@ (8006960 <state_machine+0x620>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 821b 	beq.w	8006c86 <state_machine+0x946>
			{
				state_change_done = 0;
 8006850:	4b44      	ldr	r3, [pc, #272]	@ (8006964 <state_machine+0x624>)
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 8006856:	4b3e      	ldr	r3, [pc, #248]	@ (8006950 <state_machine+0x610>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3304      	adds	r3, #4
 800685c:	4a40      	ldr	r2, [pc, #256]	@ (8006960 <state_machine+0x620>)
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	4293      	cmp	r3, r2
 8006862:	db0c      	blt.n	800687e <state_machine+0x53e>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 8006864:	4b3a      	ldr	r3, [pc, #232]	@ (8006950 <state_machine+0x610>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b3d      	ldr	r3, [pc, #244]	@ (8006960 <state_machine+0x620>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	b2db      	uxtb	r3, r3
 8006872:	3304      	adds	r3, #4
 8006874:	b2db      	uxtb	r3, r3
 8006876:	4618      	mov	r0, r3
 8006878:	f7fc fce0 	bl	800323c <play_station>
 800687c:	e007      	b.n	800688e <state_machine+0x54e>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 800687e:	4b34      	ldr	r3, [pc, #208]	@ (8006950 <state_machine+0x610>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	3304      	adds	r3, #4
 8006886:	b2db      	uxtb	r3, r3
 8006888:	4618      	mov	r0, r3
 800688a:	f7fc fcd7 	bl	800323c <play_station>
				}

				playing_state = playing;
 800688e:	4b31      	ldr	r3, [pc, #196]	@ (8006954 <state_machine+0x614>)
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006894:	4b30      	ldr	r3, [pc, #192]	@ (8006958 <state_machine+0x618>)
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800689a:	e1f4      	b.n	8006c86 <state_machine+0x946>

	case signal_info:
		if(!state_change_done)
 800689c:	4b31      	ldr	r3, [pc, #196]	@ (8006964 <state_machine+0x624>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <state_machine+0x56e>
		{
			Display_dab_digrad_status_background();
 80068a4:	f7fe f854 	bl	8004950 <Display_dab_digrad_status_background>
			state_change_done = 1;
 80068a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006964 <state_machine+0x624>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 80068ae:	4c2e      	ldr	r4, [pc, #184]	@ (8006968 <state_machine+0x628>)
 80068b0:	f107 0308 	add.w	r3, r7, #8
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fb fa2b 	bl	8001d10 <Si468x_dab_digrad_status>
 80068ba:	4625      	mov	r5, r4
 80068bc:	f107 0408 	add.w	r4, r7, #8
 80068c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068cc:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 80068d0:	4e25      	ldr	r6, [pc, #148]	@ (8006968 <state_machine+0x628>)
 80068d2:	466d      	mov	r5, sp
 80068d4:	f106 0410 	add.w	r4, r6, #16
 80068d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80068e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80068e8:	f7fe f9ca 	bl	8004c80 <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80068ec:	4b1b      	ldr	r3, [pc, #108]	@ (800695c <state_machine+0x61c>)
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	2b05      	cmp	r3, #5
 80068f2:	d911      	bls.n	8006918 <state_machine+0x5d8>
 80068f4:	4b19      	ldr	r3, [pc, #100]	@ (800695c <state_machine+0x61c>)
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	2b9c      	cmp	r3, #156	@ 0x9c
 80068fa:	d80d      	bhi.n	8006918 <state_machine+0x5d8>
 80068fc:	4b17      	ldr	r3, [pc, #92]	@ (800695c <state_machine+0x61c>)
 80068fe:	885b      	ldrh	r3, [r3, #2]
 8006900:	2bc3      	cmp	r3, #195	@ 0xc3
 8006902:	d909      	bls.n	8006918 <state_machine+0x5d8>
 8006904:	4b15      	ldr	r3, [pc, #84]	@ (800695c <state_machine+0x61c>)
 8006906:	885b      	ldrh	r3, [r3, #2]
 8006908:	2bea      	cmp	r3, #234	@ 0xea
 800690a:	d805      	bhi.n	8006918 <state_machine+0x5d8>
		{
			state_change_done = 0;
 800690c:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <state_machine+0x624>)
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 8006912:	4b11      	ldr	r3, [pc, #68]	@ (8006958 <state_machine+0x618>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006918:	4b10      	ldr	r3, [pc, #64]	@ (800695c <state_machine+0x61c>)
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	2ba3      	cmp	r3, #163	@ 0xa3
 800691e:	f240 81b4 	bls.w	8006c8a <state_machine+0x94a>
 8006922:	4b0e      	ldr	r3, [pc, #56]	@ (800695c <state_machine+0x61c>)
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800692a:	f200 81ae 	bhi.w	8006c8a <state_machine+0x94a>
 800692e:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <state_machine+0x61c>)
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	2bc3      	cmp	r3, #195	@ 0xc3
 8006934:	f240 81a9 	bls.w	8006c8a <state_machine+0x94a>
 8006938:	4b08      	ldr	r3, [pc, #32]	@ (800695c <state_machine+0x61c>)
 800693a:	885b      	ldrh	r3, [r3, #2]
 800693c:	2bea      	cmp	r3, #234	@ 0xea
 800693e:	f200 81a4 	bhi.w	8006c8a <state_machine+0x94a>
		{
			state_change_done = 0;
 8006942:	4b08      	ldr	r3, [pc, #32]	@ (8006964 <state_machine+0x624>)
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006948:	4b03      	ldr	r3, [pc, #12]	@ (8006958 <state_machine+0x618>)
 800694a:	2204      	movs	r2, #4
 800694c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800694e:	e19c      	b.n	8006c8a <state_machine+0x94a>
 8006950:	20007014 	.word	0x20007014
 8006954:	20000150 	.word	0x20000150
 8006958:	20007010 	.word	0x20007010
 800695c:	20007018 	.word	0x20007018
 8006960:	20007044 	.word	0x20007044
 8006964:	20007011 	.word	0x20007011
 8006968:	2000701c 	.word	0x2000701c

	case scanning:
		if(!state_change_done)
 800696c:	4b7c      	ldr	r3, [pc, #496]	@ (8006b60 <state_machine+0x820>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d116      	bne.n	80069a2 <state_machine+0x662>
		{
			playing_state = not_playing;
 8006974:	4b7b      	ldr	r3, [pc, #492]	@ (8006b64 <state_machine+0x824>)
 8006976:	2200      	movs	r2, #0
 8006978:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 800697a:	f7fd fde7 	bl	800454c <Display_scanning_screen_background>
			state_change_done = 1;
 800697e:	4b78      	ldr	r3, [pc, #480]	@ (8006b60 <state_machine+0x820>)
 8006980:	2201      	movs	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 8006984:	f7fb fdee 	bl	8002564 <Si468x_dab_full_scan>
 8006988:	4603      	mov	r3, r0
 800698a:	461a      	mov	r2, r3
 800698c:	4b76      	ldr	r3, [pc, #472]	@ (8006b68 <state_machine+0x828>)
 800698e:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8006990:	4b75      	ldr	r3, [pc, #468]	@ (8006b68 <state_machine+0x828>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <state_machine+0x662>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 8006998:	f7fd ffa4 	bl	80048e4 <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 800699c:	4b72      	ldr	r3, [pc, #456]	@ (8006b68 <state_machine+0x828>)
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80069a2:	4b72      	ldr	r3, [pc, #456]	@ (8006b6c <state_machine+0x82c>)
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	f240 8171 	bls.w	8006c8e <state_machine+0x94e>
 80069ac:	4b6f      	ldr	r3, [pc, #444]	@ (8006b6c <state_machine+0x82c>)
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80069b4:	f200 816b 	bhi.w	8006c8e <state_machine+0x94e>
 80069b8:	4b6c      	ldr	r3, [pc, #432]	@ (8006b6c <state_machine+0x82c>)
 80069ba:	885b      	ldrh	r3, [r3, #2]
 80069bc:	2bc3      	cmp	r3, #195	@ 0xc3
 80069be:	f240 8166 	bls.w	8006c8e <state_machine+0x94e>
 80069c2:	4b6a      	ldr	r3, [pc, #424]	@ (8006b6c <state_machine+0x82c>)
 80069c4:	885b      	ldrh	r3, [r3, #2]
 80069c6:	2bea      	cmp	r3, #234	@ 0xea
 80069c8:	f200 8161 	bhi.w	8006c8e <state_machine+0x94e>
		{
			scan_cancel_flag = 1;
 80069cc:	4b68      	ldr	r3, [pc, #416]	@ (8006b70 <state_machine+0x830>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 80069d2:	4b63      	ldr	r3, [pc, #396]	@ (8006b60 <state_machine+0x820>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 80069d8:	4b66      	ldr	r3, [pc, #408]	@ (8006b74 <state_machine+0x834>)
 80069da:	2204      	movs	r2, #4
 80069dc:	701a      	strb	r2, [r3, #0]
		}

		break;
 80069de:	e156      	b.n	8006c8e <state_machine+0x94e>

	case settings:
		if(!state_change_done)
 80069e0:	4b5f      	ldr	r3, [pc, #380]	@ (8006b60 <state_machine+0x820>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d107      	bne.n	80069f8 <state_machine+0x6b8>
		{
			Display_settings_screen_background();
 80069e8:	f7fe fcb4 	bl	8005354 <Display_settings_screen_background>
			scan_cancel_flag = 0;
 80069ec:	4b60      	ldr	r3, [pc, #384]	@ (8006b70 <state_machine+0x830>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 80069f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006b60 <state_machine+0x820>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 80069f8:	4b5f      	ldr	r3, [pc, #380]	@ (8006b78 <state_machine+0x838>)
 80069fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069fc:	f7fe fda2 	bl	8005544 <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8006a00:	4b5a      	ldr	r3, [pc, #360]	@ (8006b6c <state_machine+0x82c>)
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	2ba3      	cmp	r3, #163	@ 0xa3
 8006a06:	d91e      	bls.n	8006a46 <state_machine+0x706>
 8006a08:	4b58      	ldr	r3, [pc, #352]	@ (8006b6c <state_machine+0x82c>)
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006a10:	d819      	bhi.n	8006a46 <state_machine+0x706>
 8006a12:	4b56      	ldr	r3, [pc, #344]	@ (8006b6c <state_machine+0x82c>)
 8006a14:	885b      	ldrh	r3, [r3, #2]
 8006a16:	2b3c      	cmp	r3, #60	@ 0x3c
 8006a18:	d915      	bls.n	8006a46 <state_machine+0x706>
 8006a1a:	4b54      	ldr	r3, [pc, #336]	@ (8006b6c <state_machine+0x82c>)
 8006a1c:	885b      	ldrh	r3, [r3, #2]
 8006a1e:	2b63      	cmp	r3, #99	@ 0x63
 8006a20:	d811      	bhi.n	8006a46 <state_machine+0x706>
		{
			dab_management_to_display.audio_volume += 2;
 8006a22:	4b55      	ldr	r3, [pc, #340]	@ (8006b78 <state_machine+0x838>)
 8006a24:	7b9b      	ldrb	r3, [r3, #14]
 8006a26:	3302      	adds	r3, #2
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	4b53      	ldr	r3, [pc, #332]	@ (8006b78 <state_machine+0x838>)
 8006a2c:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 8006a2e:	4b52      	ldr	r3, [pc, #328]	@ (8006b78 <state_machine+0x838>)
 8006a30:	7b9b      	ldrb	r3, [r3, #14]
 8006a32:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a34:	d902      	bls.n	8006a3c <state_machine+0x6fc>
			{
				dab_management_to_display.audio_volume = 63;
 8006a36:	4b50      	ldr	r3, [pc, #320]	@ (8006b78 <state_machine+0x838>)
 8006a38:	223f      	movs	r2, #63	@ 0x3f
 8006a3a:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8006b78 <state_machine+0x838>)
 8006a3e:	7b9b      	ldrb	r3, [r3, #14]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fc fbc7 	bl	80031d4 <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8006a46:	4b49      	ldr	r3, [pc, #292]	@ (8006b6c <state_machine+0x82c>)
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d91d      	bls.n	8006a8a <state_machine+0x74a>
 8006a4e:	4b47      	ldr	r3, [pc, #284]	@ (8006b6c <state_machine+0x82c>)
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	2b9c      	cmp	r3, #156	@ 0x9c
 8006a54:	d819      	bhi.n	8006a8a <state_machine+0x74a>
 8006a56:	4b45      	ldr	r3, [pc, #276]	@ (8006b6c <state_machine+0x82c>)
 8006a58:	885b      	ldrh	r3, [r3, #2]
 8006a5a:	2b3c      	cmp	r3, #60	@ 0x3c
 8006a5c:	d915      	bls.n	8006a8a <state_machine+0x74a>
 8006a5e:	4b43      	ldr	r3, [pc, #268]	@ (8006b6c <state_machine+0x82c>)
 8006a60:	885b      	ldrh	r3, [r3, #2]
 8006a62:	2b63      	cmp	r3, #99	@ 0x63
 8006a64:	d811      	bhi.n	8006a8a <state_machine+0x74a>
		{
			dab_management_to_display.audio_volume -= 2;
 8006a66:	4b44      	ldr	r3, [pc, #272]	@ (8006b78 <state_machine+0x838>)
 8006a68:	7b9b      	ldrb	r3, [r3, #14]
 8006a6a:	3b02      	subs	r3, #2
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4b42      	ldr	r3, [pc, #264]	@ (8006b78 <state_machine+0x838>)
 8006a70:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 8006a72:	4b41      	ldr	r3, [pc, #260]	@ (8006b78 <state_machine+0x838>)
 8006a74:	7b9b      	ldrb	r3, [r3, #14]
 8006a76:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a78:	d902      	bls.n	8006a80 <state_machine+0x740>
			{
				dab_management_to_display.audio_volume = 0;
 8006a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b78 <state_machine+0x838>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006a80:	4b3d      	ldr	r3, [pc, #244]	@ (8006b78 <state_machine+0x838>)
 8006a82:	7b9b      	ldrb	r3, [r3, #14]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fc fba5 	bl	80031d4 <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006a8a:	4b38      	ldr	r3, [pc, #224]	@ (8006b6c <state_machine+0x82c>)
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	2ba3      	cmp	r3, #163	@ 0xa3
 8006a90:	d907      	bls.n	8006aa2 <state_machine+0x762>
 8006a92:	4b36      	ldr	r3, [pc, #216]	@ (8006b6c <state_machine+0x82c>)
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006a9a:	d802      	bhi.n	8006aa2 <state_machine+0x762>
 8006a9c:	4b33      	ldr	r3, [pc, #204]	@ (8006b6c <state_machine+0x82c>)
 8006a9e:	885b      	ldrh	r3, [r3, #2]
 8006aa0:	2b69      	cmp	r3, #105	@ 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006aa2:	4b32      	ldr	r3, [pc, #200]	@ (8006b6c <state_machine+0x82c>)
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	d906      	bls.n	8006ab8 <state_machine+0x778>
 8006aaa:	4b30      	ldr	r3, [pc, #192]	@ (8006b6c <state_machine+0x82c>)
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	2b9c      	cmp	r3, #156	@ 0x9c
 8006ab0:	d802      	bhi.n	8006ab8 <state_machine+0x778>
 8006ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8006b6c <state_machine+0x82c>)
 8006ab4:	885b      	ldrh	r3, [r3, #2]
 8006ab6:	2b69      	cmp	r3, #105	@ 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8006b6c <state_machine+0x82c>)
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	2b05      	cmp	r3, #5
 8006abe:	d911      	bls.n	8006ae4 <state_machine+0x7a4>
 8006ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8006b6c <state_machine+0x82c>)
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	2b9c      	cmp	r3, #156	@ 0x9c
 8006ac6:	d80d      	bhi.n	8006ae4 <state_machine+0x7a4>
 8006ac8:	4b28      	ldr	r3, [pc, #160]	@ (8006b6c <state_machine+0x82c>)
 8006aca:	885b      	ldrh	r3, [r3, #2]
 8006acc:	2b96      	cmp	r3, #150	@ 0x96
 8006ace:	d909      	bls.n	8006ae4 <state_machine+0x7a4>
 8006ad0:	4b26      	ldr	r3, [pc, #152]	@ (8006b6c <state_machine+0x82c>)
 8006ad2:	885b      	ldrh	r3, [r3, #2]
 8006ad4:	2bbd      	cmp	r3, #189	@ 0xbd
 8006ad6:	d805      	bhi.n	8006ae4 <state_machine+0x7a4>
		{
			state_change_done = 0;
 8006ad8:	4b21      	ldr	r3, [pc, #132]	@ (8006b60 <state_machine+0x820>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 8006ade:	4b25      	ldr	r3, [pc, #148]	@ (8006b74 <state_machine+0x834>)
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006ae4:	4b21      	ldr	r3, [pc, #132]	@ (8006b6c <state_machine+0x82c>)
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	2ba3      	cmp	r3, #163	@ 0xa3
 8006aea:	d907      	bls.n	8006afc <state_machine+0x7bc>
 8006aec:	4b1f      	ldr	r3, [pc, #124]	@ (8006b6c <state_machine+0x82c>)
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006af4:	d802      	bhi.n	8006afc <state_machine+0x7bc>
 8006af6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b6c <state_machine+0x82c>)
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	2b96      	cmp	r3, #150	@ 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006afc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b6c <state_machine+0x82c>)
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	2b05      	cmp	r3, #5
 8006b02:	d911      	bls.n	8006b28 <state_machine+0x7e8>
 8006b04:	4b19      	ldr	r3, [pc, #100]	@ (8006b6c <state_machine+0x82c>)
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	2b9c      	cmp	r3, #156	@ 0x9c
 8006b0a:	d80d      	bhi.n	8006b28 <state_machine+0x7e8>
 8006b0c:	4b17      	ldr	r3, [pc, #92]	@ (8006b6c <state_machine+0x82c>)
 8006b0e:	885b      	ldrh	r3, [r3, #2]
 8006b10:	2bc3      	cmp	r3, #195	@ 0xc3
 8006b12:	d909      	bls.n	8006b28 <state_machine+0x7e8>
 8006b14:	4b15      	ldr	r3, [pc, #84]	@ (8006b6c <state_machine+0x82c>)
 8006b16:	885b      	ldrh	r3, [r3, #2]
 8006b18:	2bea      	cmp	r3, #234	@ 0xea
 8006b1a:	d805      	bhi.n	8006b28 <state_machine+0x7e8>
		{
			state_change_done = 0;
 8006b1c:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <state_machine+0x820>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 8006b22:	4b14      	ldr	r3, [pc, #80]	@ (8006b74 <state_machine+0x834>)
 8006b24:	2203      	movs	r2, #3
 8006b26:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (alarming)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006b28:	4b10      	ldr	r3, [pc, #64]	@ (8006b6c <state_machine+0x82c>)
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	2ba3      	cmp	r3, #163	@ 0xa3
 8006b2e:	f240 80b0 	bls.w	8006c92 <state_machine+0x952>
 8006b32:	4b0e      	ldr	r3, [pc, #56]	@ (8006b6c <state_machine+0x82c>)
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006b3a:	f200 80aa 	bhi.w	8006c92 <state_machine+0x952>
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <state_machine+0x82c>)
 8006b40:	885b      	ldrh	r3, [r3, #2]
 8006b42:	2bc3      	cmp	r3, #195	@ 0xc3
 8006b44:	f240 80a5 	bls.w	8006c92 <state_machine+0x952>
 8006b48:	4b08      	ldr	r3, [pc, #32]	@ (8006b6c <state_machine+0x82c>)
 8006b4a:	885b      	ldrh	r3, [r3, #2]
 8006b4c:	2bea      	cmp	r3, #234	@ 0xea
 8006b4e:	f200 80a0 	bhi.w	8006c92 <state_machine+0x952>
		{
			state_change_done = 0;
 8006b52:	4b03      	ldr	r3, [pc, #12]	@ (8006b60 <state_machine+0x820>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	701a      	strb	r2, [r3, #0]
			system_state = alarming;
 8006b58:	4b06      	ldr	r3, [pc, #24]	@ (8006b74 <state_machine+0x834>)
 8006b5a:	2205      	movs	r2, #5
 8006b5c:	701a      	strb	r2, [r3, #0]
		}


		break;
 8006b5e:	e098      	b.n	8006c92 <state_machine+0x952>
 8006b60:	20007011 	.word	0x20007011
 8006b64:	20000150 	.word	0x20000150
 8006b68:	20007071 	.word	0x20007071
 8006b6c:	20007018 	.word	0x20007018
 8006b70:	20007070 	.word	0x20007070
 8006b74:	20007010 	.word	0x20007010
 8006b78:	20007044 	.word	0x20007044

	case alarming:
		if(!state_change_done)
 8006b7c:	4b48      	ldr	r3, [pc, #288]	@ (8006ca0 <state_machine+0x960>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <state_machine+0x84e>
		{
			Display_alarming_screen_background();
 8006b84:	f7fe fd22 	bl	80055cc <Display_alarming_screen_background>
			//scan_cancel_flag = 0;
			state_change_done = 1;
 8006b88:	4b45      	ldr	r3, [pc, #276]	@ (8006ca0 <state_machine+0x960>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
		}

		//Display_settings_screen_data(dab_management_to_display);

		//Alarming by DLS button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 43 && touch_coordinates.y < 114)
 8006b8e:	4b45      	ldr	r3, [pc, #276]	@ (8006ca4 <state_machine+0x964>)
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	2b05      	cmp	r3, #5
 8006b94:	d90d      	bls.n	8006bb2 <state_machine+0x872>
 8006b96:	4b43      	ldr	r3, [pc, #268]	@ (8006ca4 <state_machine+0x964>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	2b9c      	cmp	r3, #156	@ 0x9c
 8006b9c:	d809      	bhi.n	8006bb2 <state_machine+0x872>
 8006b9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <state_machine+0x964>)
 8006ba0:	885b      	ldrh	r3, [r3, #2]
 8006ba2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006ba4:	d905      	bls.n	8006bb2 <state_machine+0x872>
 8006ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ca4 <state_machine+0x964>)
 8006ba8:	885b      	ldrh	r3, [r3, #2]
 8006baa:	2b71      	cmp	r3, #113	@ 0x71
 8006bac:	d801      	bhi.n	8006bb2 <state_machine+0x872>
		{
			Alarming_Mode_1_On();
 8006bae:	f7fc ff7d 	bl	8003aac <Alarming_Mode_1_On>
		}

		//Alarming by ...1 button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 43 && touch_coordinates.y < 114)
 8006bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ca4 <state_machine+0x964>)
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	2ba3      	cmp	r3, #163	@ 0xa3
 8006bb8:	d90e      	bls.n	8006bd8 <state_machine+0x898>
 8006bba:	4b3a      	ldr	r3, [pc, #232]	@ (8006ca4 <state_machine+0x964>)
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006bc2:	d809      	bhi.n	8006bd8 <state_machine+0x898>
 8006bc4:	4b37      	ldr	r3, [pc, #220]	@ (8006ca4 <state_machine+0x964>)
 8006bc6:	885b      	ldrh	r3, [r3, #2]
 8006bc8:	2b2b      	cmp	r3, #43	@ 0x2b
 8006bca:	d905      	bls.n	8006bd8 <state_machine+0x898>
 8006bcc:	4b35      	ldr	r3, [pc, #212]	@ (8006ca4 <state_machine+0x964>)
 8006bce:	885b      	ldrh	r3, [r3, #2]
 8006bd0:	2b71      	cmp	r3, #113	@ 0x71
 8006bd2:	d801      	bhi.n	8006bd8 <state_machine+0x898>
		{
			Alarming_Mode_2_On();
 8006bd4:	f7fc ff7c 	bl	8003ad0 <Alarming_Mode_2_On>
		}

		//Alarming by ...2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 119 && touch_coordinates.y < 190)
 8006bd8:	4b32      	ldr	r3, [pc, #200]	@ (8006ca4 <state_machine+0x964>)
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d90d      	bls.n	8006bfc <state_machine+0x8bc>
 8006be0:	4b30      	ldr	r3, [pc, #192]	@ (8006ca4 <state_machine+0x964>)
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	2b9c      	cmp	r3, #156	@ 0x9c
 8006be6:	d809      	bhi.n	8006bfc <state_machine+0x8bc>
 8006be8:	4b2e      	ldr	r3, [pc, #184]	@ (8006ca4 <state_machine+0x964>)
 8006bea:	885b      	ldrh	r3, [r3, #2]
 8006bec:	2b77      	cmp	r3, #119	@ 0x77
 8006bee:	d905      	bls.n	8006bfc <state_machine+0x8bc>
 8006bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8006ca4 <state_machine+0x964>)
 8006bf2:	885b      	ldrh	r3, [r3, #2]
 8006bf4:	2bbd      	cmp	r3, #189	@ 0xbd
 8006bf6:	d801      	bhi.n	8006bfc <state_machine+0x8bc>
		{
			Alarming_Mode_3_On();
 8006bf8:	f7fc ff7c 	bl	8003af4 <Alarming_Mode_3_On>
		}

		//No alarming - normal mode button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 119 && touch_coordinates.y < 190)
 8006bfc:	4b29      	ldr	r3, [pc, #164]	@ (8006ca4 <state_machine+0x964>)
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	2ba3      	cmp	r3, #163	@ 0xa3
 8006c02:	d90e      	bls.n	8006c22 <state_machine+0x8e2>
 8006c04:	4b27      	ldr	r3, [pc, #156]	@ (8006ca4 <state_machine+0x964>)
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006c0c:	d809      	bhi.n	8006c22 <state_machine+0x8e2>
 8006c0e:	4b25      	ldr	r3, [pc, #148]	@ (8006ca4 <state_machine+0x964>)
 8006c10:	885b      	ldrh	r3, [r3, #2]
 8006c12:	2b77      	cmp	r3, #119	@ 0x77
 8006c14:	d905      	bls.n	8006c22 <state_machine+0x8e2>
 8006c16:	4b23      	ldr	r3, [pc, #140]	@ (8006ca4 <state_machine+0x964>)
 8006c18:	885b      	ldrh	r3, [r3, #2]
 8006c1a:	2bbd      	cmp	r3, #189	@ 0xbd
 8006c1c:	d801      	bhi.n	8006c22 <state_machine+0x8e2>
		{
			Alarming_Off();
 8006c1e:	f7fc ff7b 	bl	8003b18 <Alarming_Off>
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006c22:	4b20      	ldr	r3, [pc, #128]	@ (8006ca4 <state_machine+0x964>)
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	2b05      	cmp	r3, #5
 8006c28:	d911      	bls.n	8006c4e <state_machine+0x90e>
 8006c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca4 <state_machine+0x964>)
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	2b9c      	cmp	r3, #156	@ 0x9c
 8006c30:	d80d      	bhi.n	8006c4e <state_machine+0x90e>
 8006c32:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca4 <state_machine+0x964>)
 8006c34:	885b      	ldrh	r3, [r3, #2]
 8006c36:	2bc3      	cmp	r3, #195	@ 0xc3
 8006c38:	d909      	bls.n	8006c4e <state_machine+0x90e>
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca4 <state_machine+0x964>)
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	2bea      	cmp	r3, #234	@ 0xea
 8006c40:	d805      	bhi.n	8006c4e <state_machine+0x90e>
		{
			state_change_done = 0;
 8006c42:	4b17      	ldr	r3, [pc, #92]	@ (8006ca0 <state_machine+0x960>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006c48:	4b17      	ldr	r3, [pc, #92]	@ (8006ca8 <state_machine+0x968>)
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006c4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ca4 <state_machine+0x964>)
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	2ba3      	cmp	r3, #163	@ 0xa3
 8006c54:	d91f      	bls.n	8006c96 <state_machine+0x956>
 8006c56:	4b13      	ldr	r3, [pc, #76]	@ (8006ca4 <state_machine+0x964>)
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006c5e:	d81a      	bhi.n	8006c96 <state_machine+0x956>
 8006c60:	4b10      	ldr	r3, [pc, #64]	@ (8006ca4 <state_machine+0x964>)
 8006c62:	885b      	ldrh	r3, [r3, #2]
 8006c64:	2bc3      	cmp	r3, #195	@ 0xc3
 8006c66:	d916      	bls.n	8006c96 <state_machine+0x956>
 8006c68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca4 <state_machine+0x964>)
 8006c6a:	885b      	ldrh	r3, [r3, #2]
 8006c6c:	2bea      	cmp	r3, #234	@ 0xea
 8006c6e:	d812      	bhi.n	8006c96 <state_machine+0x956>
		{
			state_change_done = 0;
 8006c70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca0 <state_machine+0x960>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006c76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca8 <state_machine+0x968>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
		}


		break;
 8006c7c:	e00b      	b.n	8006c96 <state_machine+0x956>

	default:
		break;
 8006c7e:	bf00      	nop
 8006c80:	e00a      	b.n	8006c98 <state_machine+0x958>
		break;
 8006c82:	bf00      	nop
 8006c84:	e008      	b.n	8006c98 <state_machine+0x958>
		break;
 8006c86:	bf00      	nop
 8006c88:	e006      	b.n	8006c98 <state_machine+0x958>
		break;
 8006c8a:	bf00      	nop
 8006c8c:	e004      	b.n	8006c98 <state_machine+0x958>
		break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <state_machine+0x958>
		break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <state_machine+0x958>
		break;
 8006c96:	bf00      	nop
	}
}
 8006c98:	bf00      	nop
 8006c9a:	3744      	adds	r7, #68	@ 0x44
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca0:	20007011 	.word	0x20007011
 8006ca4:	20007018 	.word	0x20007018
 8006ca8:	20007010 	.word	0x20007010

08006cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	4b10      	ldr	r3, [pc, #64]	@ (8006cf8 <HAL_MspInit+0x4c>)
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cba:	4a0f      	ldr	r2, [pc, #60]	@ (8006cf8 <HAL_MspInit+0x4c>)
 8006cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <HAL_MspInit+0x4c>)
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	4b09      	ldr	r3, [pc, #36]	@ (8006cf8 <HAL_MspInit+0x4c>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd6:	4a08      	ldr	r2, [pc, #32]	@ (8006cf8 <HAL_MspInit+0x4c>)
 8006cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cde:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <HAL_MspInit+0x4c>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40023800 	.word	0x40023800

08006cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <NMI_Handler+0x4>

08006d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d08:	bf00      	nop
 8006d0a:	e7fd      	b.n	8006d08 <HardFault_Handler+0x4>

08006d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d10:	bf00      	nop
 8006d12:	e7fd      	b.n	8006d10 <MemManage_Handler+0x4>

08006d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <BusFault_Handler+0x4>

08006d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d20:	bf00      	nop
 8006d22:	e7fd      	b.n	8006d20 <UsageFault_Handler+0x4>

08006d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d32:	b480      	push	{r7}
 8006d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d36:	bf00      	nop
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d44:	bf00      	nop
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d52:	f000 fd23 	bl	800779c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d56:	bf00      	nop
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006d60:	4802      	ldr	r0, [pc, #8]	@ (8006d6c <DMA1_Stream4_IRQHandler+0x10>)
 8006d62:	f000 ff41 	bl	8007be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006d66:	bf00      	nop
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20006fb0 	.word	0x20006fb0

08006d70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006d74:	4802      	ldr	r0, [pc, #8]	@ (8006d80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006d76:	f005 fc56 	bl	800c626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006d7a:	bf00      	nop
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	200070bc 	.word	0x200070bc

08006d84 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006d88:	4802      	ldr	r0, [pc, #8]	@ (8006d94 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006d8a:	f005 fc4c 	bl	800c626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20007104 	.word	0x20007104

08006d98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006d9c:	4802      	ldr	r0, [pc, #8]	@ (8006da8 <SPI2_IRQHandler+0x10>)
 8006d9e:	f005 f8e5 	bl	800bf6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006da2:	bf00      	nop
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20006f58 	.word	0x20006f58

08006dac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8006db0:	4802      	ldr	r0, [pc, #8]	@ (8006dbc <I2C3_EV_IRQHandler+0x10>)
 8006db2:	f001 ff95 	bl	8008ce0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20006eac 	.word	0x20006eac

08006dc0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006dc4:	4802      	ldr	r0, [pc, #8]	@ (8006dd0 <I2C3_ER_IRQHandler+0x10>)
 8006dc6:	f002 f8fc 	bl	8008fc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20006eac 	.word	0x20006eac

08006dd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006dec:	4b06      	ldr	r3, [pc, #24]	@ (8006e08 <SystemInit+0x20>)
 8006dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df2:	4a05      	ldr	r2, [pc, #20]	@ (8006e08 <SystemInit+0x20>)
 8006df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006dfc:	bf00      	nop
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	e000ed00 	.word	0xe000ed00

08006e0c <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	@ 0x28
 8006e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e12:	f107 0320 	add.w	r3, r7, #32
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	605a      	str	r2, [r3, #4]
 8006e24:	609a      	str	r2, [r3, #8]
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	611a      	str	r2, [r3, #16]
 8006e2a:	615a      	str	r2, [r3, #20]
 8006e2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006e2e:	4b22      	ldr	r3, [pc, #136]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e30:	4a22      	ldr	r2, [pc, #136]	@ (8006ebc <MX_TIM3_Init+0xb0>)
 8006e32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006e34:	4b20      	ldr	r3, [pc, #128]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006e40:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e48:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006e54:	4818      	ldr	r0, [pc, #96]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e56:	f005 fb97 	bl	800c588 <HAL_TIM_PWM_Init>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006e60:	f7ff f944 	bl	80060ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e64:	2300      	movs	r3, #0
 8006e66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006e6c:	f107 0320 	add.w	r3, r7, #32
 8006e70:	4619      	mov	r1, r3
 8006e72:	4811      	ldr	r0, [pc, #68]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e74:	f006 f81a 	bl	800ceac <HAL_TIMEx_MasterConfigSynchronization>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006e7e:	f7ff f935 	bl	80060ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006e82:	2360      	movs	r3, #96	@ 0x60
 8006e84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006e92:	1d3b      	adds	r3, r7, #4
 8006e94:	2208      	movs	r2, #8
 8006e96:	4619      	mov	r1, r3
 8006e98:	4807      	ldr	r0, [pc, #28]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006e9a:	f005 fccd 	bl	800c838 <HAL_TIM_PWM_ConfigChannel>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006ea4:	f7ff f922 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006ea8:	4803      	ldr	r0, [pc, #12]	@ (8006eb8 <MX_TIM3_Init+0xac>)
 8006eaa:	f000 f8b9 	bl	8007020 <HAL_TIM_MspPostInit>

}
 8006eae:	bf00      	nop
 8006eb0:	3728      	adds	r7, #40	@ 0x28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20007074 	.word	0x20007074
 8006ebc:	40000400 	.word	0x40000400

08006ec0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8006f00 <MX_TIM10_Init+0x40>)
 8006ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8006f04 <MX_TIM10_Init+0x44>)
 8006ec8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <MX_TIM10_Init+0x40>)
 8006ecc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006ed0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8006f00 <MX_TIM10_Init+0x40>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8006ed8:	4b09      	ldr	r3, [pc, #36]	@ (8006f00 <MX_TIM10_Init+0x40>)
 8006eda:	f240 2257 	movw	r2, #599	@ 0x257
 8006ede:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ee0:	4b07      	ldr	r3, [pc, #28]	@ (8006f00 <MX_TIM10_Init+0x40>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <MX_TIM10_Init+0x40>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006eec:	4804      	ldr	r0, [pc, #16]	@ (8006f00 <MX_TIM10_Init+0x40>)
 8006eee:	f005 fa8b 	bl	800c408 <HAL_TIM_Base_Init>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006ef8:	f7ff f8f8 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006efc:	bf00      	nop
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	200070bc 	.word	0x200070bc
 8006f04:	40014400 	.word	0x40014400

08006f08 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f48 <MX_TIM11_Init+0x40>)
 8006f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8006f4c <MX_TIM11_Init+0x44>)
 8006f10:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8006f12:	4b0d      	ldr	r3, [pc, #52]	@ (8006f48 <MX_TIM11_Init+0x40>)
 8006f14:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006f18:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f48 <MX_TIM11_Init+0x40>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8006f20:	4b09      	ldr	r3, [pc, #36]	@ (8006f48 <MX_TIM11_Init+0x40>)
 8006f22:	f240 5213 	movw	r2, #1299	@ 0x513
 8006f26:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f28:	4b07      	ldr	r3, [pc, #28]	@ (8006f48 <MX_TIM11_Init+0x40>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f2e:	4b06      	ldr	r3, [pc, #24]	@ (8006f48 <MX_TIM11_Init+0x40>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006f34:	4804      	ldr	r0, [pc, #16]	@ (8006f48 <MX_TIM11_Init+0x40>)
 8006f36:	f005 fa67 	bl	800c408 <HAL_TIM_Base_Init>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8006f40:	f7ff f8d4 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006f44:	bf00      	nop
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20007104 	.word	0x20007104
 8006f4c:	40014800 	.word	0x40014800

08006f50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f8c <HAL_TIM_PWM_MspInit+0x3c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10d      	bne.n	8006f7e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <HAL_TIM_PWM_MspInit+0x40>)
 8006f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6a:	4a09      	ldr	r2, [pc, #36]	@ (8006f90 <HAL_TIM_PWM_MspInit+0x40>)
 8006f6c:	f043 0302 	orr.w	r3, r3, #2
 8006f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f72:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <HAL_TIM_PWM_MspInit+0x40>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40000400 	.word	0x40000400
 8006f90:	40023800 	.word	0x40023800

08006f94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8007014 <HAL_TIM_Base_MspInit+0x80>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d116      	bne.n	8006fd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	4b1b      	ldr	r3, [pc, #108]	@ (8007018 <HAL_TIM_Base_MspInit+0x84>)
 8006fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fae:	4a1a      	ldr	r2, [pc, #104]	@ (8007018 <HAL_TIM_Base_MspInit+0x84>)
 8006fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fb6:	4b18      	ldr	r3, [pc, #96]	@ (8007018 <HAL_TIM_Base_MspInit+0x84>)
 8006fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	2019      	movs	r0, #25
 8006fc8:	f000 fd07 	bl	80079da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006fcc:	2019      	movs	r0, #25
 8006fce:	f000 fd20 	bl	8007a12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006fd2:	e01a      	b.n	800700a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a10      	ldr	r2, [pc, #64]	@ (800701c <HAL_TIM_Base_MspInit+0x88>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d115      	bne.n	800700a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <HAL_TIM_Base_MspInit+0x84>)
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8007018 <HAL_TIM_Base_MspInit+0x84>)
 8006fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fee:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <HAL_TIM_Base_MspInit+0x84>)
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ff6:	60bb      	str	r3, [r7, #8]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	201a      	movs	r0, #26
 8007000:	f000 fceb 	bl	80079da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007004:	201a      	movs	r0, #26
 8007006:	f000 fd04 	bl	8007a12 <HAL_NVIC_EnableIRQ>
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	40014400 	.word	0x40014400
 8007018:	40023800 	.word	0x40023800
 800701c:	40014800 	.word	0x40014800

08007020 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007028:	f107 030c 	add.w	r3, r7, #12
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	60da      	str	r2, [r3, #12]
 8007036:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a12      	ldr	r2, [pc, #72]	@ (8007088 <HAL_TIM_MspPostInit+0x68>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d11e      	bne.n	8007080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007042:	2300      	movs	r3, #0
 8007044:	60bb      	str	r3, [r7, #8]
 8007046:	4b11      	ldr	r3, [pc, #68]	@ (800708c <HAL_TIM_MspPostInit+0x6c>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704a:	4a10      	ldr	r2, [pc, #64]	@ (800708c <HAL_TIM_MspPostInit+0x6c>)
 800704c:	f043 0304 	orr.w	r3, r3, #4
 8007050:	6313      	str	r3, [r2, #48]	@ 0x30
 8007052:	4b0e      	ldr	r3, [pc, #56]	@ (800708c <HAL_TIM_MspPostInit+0x6c>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	60bb      	str	r3, [r7, #8]
 800705c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 800705e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007064:	2302      	movs	r3, #2
 8007066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800706c:	2300      	movs	r3, #0
 800706e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007070:	2302      	movs	r3, #2
 8007072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007074:	f107 030c 	add.w	r3, r7, #12
 8007078:	4619      	mov	r1, r3
 800707a:	4805      	ldr	r0, [pc, #20]	@ (8007090 <HAL_TIM_MspPostInit+0x70>)
 800707c:	f000 fffe 	bl	800807c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007080:	bf00      	nop
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40000400 	.word	0x40000400
 800708c:	40023800 	.word	0x40023800
 8007090:	40020800 	.word	0x40020800

08007094 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 800709a:	4b24      	ldr	r3, [pc, #144]	@ (800712c <Touch_read+0x98>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2000      	movs	r0, #0
 80070a0:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 80070a2:	4b22      	ldr	r3, [pc, #136]	@ (800712c <Touch_read+0x98>)
 80070a4:	7c1b      	ldrb	r3, [r3, #16]
 80070a6:	b25b      	sxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	da2d      	bge.n	8007108 <Touch_read+0x74>
	{
		xtemp = TP_Read_XOY(0xD0);
 80070ac:	20d0      	movs	r0, #208	@ 0xd0
 80070ae:	f000 f8e5 	bl	800727c <TP_Read_XOY>
 80070b2:	4603      	mov	r3, r0
 80070b4:	461a      	mov	r2, r3
 80070b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007130 <Touch_read+0x9c>)
 80070b8:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 80070ba:	2090      	movs	r0, #144	@ 0x90
 80070bc:	f000 f8de 	bl	800727c <TP_Read_XOY>
 80070c0:	4603      	mov	r3, r0
 80070c2:	461a      	mov	r2, r3
 80070c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007134 <Touch_read+0xa0>)
 80070c6:	801a      	strh	r2, [r3, #0]
			touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
			touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
		}
		else
		{
			touch_coordinates.x = 320 * (ytemp - 350) / (3900-350);
 80070c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007134 <Touch_read+0xa0>)
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	f5a3 72af 	sub.w	r2, r3, #350	@ 0x15e
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	019b      	lsls	r3, r3, #6
 80070d8:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <Touch_read+0xa4>)
 80070da:	fb82 1203 	smull	r1, r2, r2, r3
 80070de:	441a      	add	r2, r3
 80070e0:	12d2      	asrs	r2, r2, #11
 80070e2:	17db      	asrs	r3, r3, #31
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	803b      	strh	r3, [r7, #0]
			touch_coordinates.y = 230 * (xtemp - 240) / (3800-230);
 80070ea:	4b11      	ldr	r3, [pc, #68]	@ (8007130 <Touch_read+0x9c>)
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	3bf0      	subs	r3, #240	@ 0xf0
 80070f0:	22e6      	movs	r2, #230	@ 0xe6
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	4a11      	ldr	r2, [pc, #68]	@ (800713c <Touch_read+0xa8>)
 80070f8:	fb82 1203 	smull	r1, r2, r2, r3
 80070fc:	1252      	asrs	r2, r2, #9
 80070fe:	17db      	asrs	r3, r3, #31
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	807b      	strh	r3, [r7, #2]
 8007106:	e003      	b.n	8007110 <Touch_read+0x7c>

	}

	else
	{
		touch_coordinates.x = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	607b      	str	r3, [r7, #4]
 8007114:	2300      	movs	r3, #0
 8007116:	88ba      	ldrh	r2, [r7, #4]
 8007118:	f362 030f 	bfi	r3, r2, #0, #16
 800711c:	88fa      	ldrh	r2, [r7, #6]
 800711e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000158 	.word	0x20000158
 8007130:	2000714c 	.word	0x2000714c
 8007134:	2000714e 	.word	0x2000714e
 8007138:	93afcf8b 	.word	0x93afcf8b
 800713c:	24b70025 	.word	0x24b70025

08007140 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
 8007152:	e021      	b.n	8007198 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8007154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007158:	2b00      	cmp	r3, #0
 800715a:	da05      	bge.n	8007168 <TP_Write_Byte+0x28>
			T_DIN_ON;
 800715c:	2201      	movs	r2, #1
 800715e:	2120      	movs	r1, #32
 8007160:	4811      	ldr	r0, [pc, #68]	@ (80071a8 <TP_Write_Byte+0x68>)
 8007162:	f001 f93f 	bl	80083e4 <HAL_GPIO_WritePin>
 8007166:	e004      	b.n	8007172 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8007168:	2200      	movs	r2, #0
 800716a:	2120      	movs	r1, #32
 800716c:	480e      	ldr	r0, [pc, #56]	@ (80071a8 <TP_Write_Byte+0x68>)
 800716e:	f001 f939 	bl	80083e4 <HAL_GPIO_WritePin>

		num <<= 1;
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8007178:	2200      	movs	r2, #0
 800717a:	2108      	movs	r1, #8
 800717c:	480a      	ldr	r0, [pc, #40]	@ (80071a8 <TP_Write_Byte+0x68>)
 800717e:	f001 f931 	bl	80083e4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8007182:	2001      	movs	r0, #1
 8007184:	f000 fb2a 	bl	80077dc <HAL_Delay>
		T_CLK_ON;
 8007188:	2201      	movs	r2, #1
 800718a:	2108      	movs	r1, #8
 800718c:	4806      	ldr	r0, [pc, #24]	@ (80071a8 <TP_Write_Byte+0x68>)
 800718e:	f001 f929 	bl	80083e4 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	3301      	adds	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b07      	cmp	r3, #7
 800719c:	d9da      	bls.n	8007154 <TP_Write_Byte+0x14>
	}
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40020400 	.word	0x40020400

080071ac <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 80071be:	2200      	movs	r2, #0
 80071c0:	2108      	movs	r1, #8
 80071c2:	482c      	ldr	r0, [pc, #176]	@ (8007274 <TP_Read_AD+0xc8>)
 80071c4:	f001 f90e 	bl	80083e4 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 80071c8:	2200      	movs	r2, #0
 80071ca:	2120      	movs	r1, #32
 80071cc:	4829      	ldr	r0, [pc, #164]	@ (8007274 <TP_Read_AD+0xc8>)
 80071ce:	f001 f909 	bl	80083e4 <HAL_GPIO_WritePin>
	T_CS_OFF;
 80071d2:	2200      	movs	r2, #0
 80071d4:	2180      	movs	r1, #128	@ 0x80
 80071d6:	4828      	ldr	r0, [pc, #160]	@ (8007278 <TP_Read_AD+0xcc>)
 80071d8:	f001 f904 	bl	80083e4 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff ffae 	bl	8007140 <TP_Write_Byte>
	HAL_Delay(1);
 80071e4:	2001      	movs	r0, #1
 80071e6:	f000 faf9 	bl	80077dc <HAL_Delay>
	T_CLK_OFF;
 80071ea:	2200      	movs	r2, #0
 80071ec:	2108      	movs	r1, #8
 80071ee:	4821      	ldr	r0, [pc, #132]	@ (8007274 <TP_Read_AD+0xc8>)
 80071f0:	f001 f8f8 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80071f4:	2001      	movs	r0, #1
 80071f6:	f000 faf1 	bl	80077dc <HAL_Delay>
	T_CLK_ON;
 80071fa:	2201      	movs	r2, #1
 80071fc:	2108      	movs	r1, #8
 80071fe:	481d      	ldr	r0, [pc, #116]	@ (8007274 <TP_Read_AD+0xc8>)
 8007200:	f001 f8f0 	bl	80083e4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007204:	2001      	movs	r0, #1
 8007206:	f000 fae9 	bl	80077dc <HAL_Delay>
	T_CLK_OFF;
 800720a:	2200      	movs	r2, #0
 800720c:	2108      	movs	r1, #8
 800720e:	4819      	ldr	r0, [pc, #100]	@ (8007274 <TP_Read_AD+0xc8>)
 8007210:	f001 f8e8 	bl	80083e4 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
 8007218:	e01c      	b.n	8007254 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 800721a:	89bb      	ldrh	r3, [r7, #12]
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8007220:	2200      	movs	r2, #0
 8007222:	2108      	movs	r1, #8
 8007224:	4813      	ldr	r0, [pc, #76]	@ (8007274 <TP_Read_AD+0xc8>)
 8007226:	f001 f8dd 	bl	80083e4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800722a:	2001      	movs	r0, #1
 800722c:	f000 fad6 	bl	80077dc <HAL_Delay>
		T_CLK_ON;
 8007230:	2201      	movs	r2, #1
 8007232:	2108      	movs	r1, #8
 8007234:	480f      	ldr	r0, [pc, #60]	@ (8007274 <TP_Read_AD+0xc8>)
 8007236:	f001 f8d5 	bl	80083e4 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 800723a:	2110      	movs	r1, #16
 800723c:	480d      	ldr	r0, [pc, #52]	@ (8007274 <TP_Read_AD+0xc8>)
 800723e:	f001 f8b9 	bl	80083b4 <HAL_GPIO_ReadPin>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <TP_Read_AD+0xa2>
 8007248:	89bb      	ldrh	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	3301      	adds	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b0f      	cmp	r3, #15
 8007258:	d9df      	bls.n	800721a <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 800725a:	89bb      	ldrh	r3, [r7, #12]
 800725c:	091b      	lsrs	r3, r3, #4
 800725e:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8007260:	2201      	movs	r2, #1
 8007262:	2180      	movs	r1, #128	@ 0x80
 8007264:	4804      	ldr	r0, [pc, #16]	@ (8007278 <TP_Read_AD+0xcc>)
 8007266:	f001 f8bd 	bl	80083e4 <HAL_GPIO_WritePin>
	return(Num);
 800726a:	89bb      	ldrh	r3, [r7, #12]

}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40020400 	.word	0x40020400
 8007278:	40020c00 	.word	0x40020c00

0800727c <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff ff8f 	bl	80071ac <TP_Read_AD>
}
 800728e:	bf00      	nop
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 80072a2:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <TP_Read_XY+0x3c>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff ffe8 	bl	800727c <TP_Read_XOY>
 80072ac:	4603      	mov	r3, r0
 80072ae:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 80072b0:	4b09      	ldr	r3, [pc, #36]	@ (80072d8 <TP_Read_XY+0x40>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ffe1 	bl	800727c <TP_Read_XOY>
 80072ba:	4603      	mov	r3, r0
 80072bc:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	89fa      	ldrh	r2, [r7, #14]
 80072c2:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	89ba      	ldrh	r2, [r7, #12]
 80072c8:	801a      	strh	r2, [r3, #0]
	return 1;
 80072ca:	2301      	movs	r3, #1
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	2000017c 	.word	0x2000017c
 80072d8:	2000017d 	.word	0x2000017d

080072dc <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 80072e6:	f107 0212 	add.w	r2, r7, #18
 80072ea:	f107 0314 	add.w	r3, r7, #20
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff ffd1 	bl	8007298 <TP_Read_XY>
 80072f6:	4603      	mov	r3, r0
 80072f8:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <TP_Read_XY2+0x28>
    	return(0);
 8007300:	2300      	movs	r3, #0
 8007302:	e049      	b.n	8007398 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8007304:	f107 020e 	add.w	r2, r7, #14
 8007308:	f107 0310 	add.w	r3, r7, #16
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff ffc2 	bl	8007298 <TP_Read_XY>
 8007314:	4603      	mov	r3, r0
 8007316:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <TP_Read_XY2+0x46>
    	return(0);
 800731e:	2300      	movs	r3, #0
 8007320:	e03a      	b.n	8007398 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8007322:	8a3a      	ldrh	r2, [r7, #16]
 8007324:	8abb      	ldrh	r3, [r7, #20]
 8007326:	429a      	cmp	r2, r3
 8007328:	d804      	bhi.n	8007334 <TP_Read_XY2+0x58>
 800732a:	8a3b      	ldrh	r3, [r7, #16]
 800732c:	3331      	adds	r3, #49	@ 0x31
 800732e:	8aba      	ldrh	r2, [r7, #20]
 8007330:	4293      	cmp	r3, r2
 8007332:	da08      	bge.n	8007346 <TP_Read_XY2+0x6a>
 8007334:	8aba      	ldrh	r2, [r7, #20]
 8007336:	8a3b      	ldrh	r3, [r7, #16]
 8007338:	429a      	cmp	r2, r3
 800733a:	d82c      	bhi.n	8007396 <TP_Read_XY2+0xba>
 800733c:	8abb      	ldrh	r3, [r7, #20]
 800733e:	3331      	adds	r3, #49	@ 0x31
 8007340:	8a3a      	ldrh	r2, [r7, #16]
 8007342:	4293      	cmp	r3, r2
 8007344:	db27      	blt.n	8007396 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8007346:	89fa      	ldrh	r2, [r7, #14]
 8007348:	8a7b      	ldrh	r3, [r7, #18]
 800734a:	429a      	cmp	r2, r3
 800734c:	d804      	bhi.n	8007358 <TP_Read_XY2+0x7c>
 800734e:	89fb      	ldrh	r3, [r7, #14]
 8007350:	3331      	adds	r3, #49	@ 0x31
 8007352:	8a7a      	ldrh	r2, [r7, #18]
 8007354:	4293      	cmp	r3, r2
 8007356:	da08      	bge.n	800736a <TP_Read_XY2+0x8e>
 8007358:	8a7a      	ldrh	r2, [r7, #18]
 800735a:	89fb      	ldrh	r3, [r7, #14]
 800735c:	429a      	cmp	r2, r3
 800735e:	d81a      	bhi.n	8007396 <TP_Read_XY2+0xba>
 8007360:	8a7b      	ldrh	r3, [r7, #18]
 8007362:	3331      	adds	r3, #49	@ 0x31
 8007364:	89fa      	ldrh	r2, [r7, #14]
 8007366:	4293      	cmp	r3, r2
 8007368:	db15      	blt.n	8007396 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 800736a:	8abb      	ldrh	r3, [r7, #20]
 800736c:	461a      	mov	r2, r3
 800736e:	8a3b      	ldrh	r3, [r7, #16]
 8007370:	4413      	add	r3, r2
 8007372:	0fda      	lsrs	r2, r3, #31
 8007374:	4413      	add	r3, r2
 8007376:	105b      	asrs	r3, r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 800737e:	8a7b      	ldrh	r3, [r7, #18]
 8007380:	461a      	mov	r2, r3
 8007382:	89fb      	ldrh	r3, [r7, #14]
 8007384:	4413      	add	r3, r2
 8007386:	0fda      	lsrs	r2, r3, #31
 8007388:	4413      	add	r3, r2
 800738a:	105b      	asrs	r3, r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	801a      	strh	r2, [r3, #0]
        return 1;
 8007392:	2301      	movs	r3, #1
 8007394:	e000      	b.n	8007398 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 80073aa:	2140      	movs	r1, #64	@ 0x40
 80073ac:	483f      	ldr	r0, [pc, #252]	@ (80074ac <TP_Scan+0x10c>)
 80073ae:	f001 f801 	bl	80083b4 <HAL_GPIO_ReadPin>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d155      	bne.n	8007464 <TP_Scan+0xc4>
	{
		if(tp)
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 80073be:	493c      	ldr	r1, [pc, #240]	@ (80074b0 <TP_Scan+0x110>)
 80073c0:	483c      	ldr	r0, [pc, #240]	@ (80074b4 <TP_Scan+0x114>)
 80073c2:	f7ff ff8b 	bl	80072dc <TP_Read_XY2>
 80073c6:	e03c      	b.n	8007442 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 80073c8:	4939      	ldr	r1, [pc, #228]	@ (80074b0 <TP_Scan+0x110>)
 80073ca:	483a      	ldr	r0, [pc, #232]	@ (80074b4 <TP_Scan+0x114>)
 80073cc:	f7ff ff86 	bl	80072dc <TP_Read_XY2>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d035      	beq.n	8007442 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 80073d6:	4b38      	ldr	r3, [pc, #224]	@ (80074b8 <TP_Scan+0x118>)
 80073d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80073dc:	4b36      	ldr	r3, [pc, #216]	@ (80074b8 <TP_Scan+0x118>)
 80073de:	899b      	ldrh	r3, [r3, #12]
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073ec:	4b32      	ldr	r3, [pc, #200]	@ (80074b8 <TP_Scan+0x118>)
 80073ee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007402:	ee17 3a90 	vmov	r3, s15
 8007406:	b29a      	uxth	r2, r3
 8007408:	4b2b      	ldr	r3, [pc, #172]	@ (80074b8 <TP_Scan+0x118>)
 800740a:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 800740c:	4b2a      	ldr	r3, [pc, #168]	@ (80074b8 <TP_Scan+0x118>)
 800740e:	ed93 7a06 	vldr	s14, [r3, #24]
 8007412:	4b29      	ldr	r3, [pc, #164]	@ (80074b8 <TP_Scan+0x118>)
 8007414:	89db      	ldrh	r3, [r3, #14]
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800741e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007422:	4b25      	ldr	r3, [pc, #148]	@ (80074b8 <TP_Scan+0x118>)
 8007424:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007438:	ee17 3a90 	vmov	r3, s15
 800743c:	b29a      	uxth	r2, r3
 800743e:	4b1e      	ldr	r3, [pc, #120]	@ (80074b8 <TP_Scan+0x118>)
 8007440:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8007442:	4b1d      	ldr	r3, [pc, #116]	@ (80074b8 <TP_Scan+0x118>)
 8007444:	7c1b      	ldrb	r3, [r3, #16]
 8007446:	b25b      	sxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	db26      	blt.n	800749a <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 800744c:	4b1a      	ldr	r3, [pc, #104]	@ (80074b8 <TP_Scan+0x118>)
 800744e:	22c0      	movs	r2, #192	@ 0xc0
 8007450:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8007452:	4b19      	ldr	r3, [pc, #100]	@ (80074b8 <TP_Scan+0x118>)
 8007454:	899a      	ldrh	r2, [r3, #12]
 8007456:	4b18      	ldr	r3, [pc, #96]	@ (80074b8 <TP_Scan+0x118>)
 8007458:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 800745a:	4b17      	ldr	r3, [pc, #92]	@ (80074b8 <TP_Scan+0x118>)
 800745c:	89da      	ldrh	r2, [r3, #14]
 800745e:	4b16      	ldr	r3, [pc, #88]	@ (80074b8 <TP_Scan+0x118>)
 8007460:	815a      	strh	r2, [r3, #10]
 8007462:	e01a      	b.n	800749a <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8007464:	4b14      	ldr	r3, [pc, #80]	@ (80074b8 <TP_Scan+0x118>)
 8007466:	7c1b      	ldrb	r3, [r3, #16]
 8007468:	b25b      	sxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	da07      	bge.n	800747e <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 800746e:	4b12      	ldr	r3, [pc, #72]	@ (80074b8 <TP_Scan+0x118>)
 8007470:	7c1b      	ldrb	r3, [r3, #16]
 8007472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007476:	b2da      	uxtb	r2, r3
 8007478:	4b0f      	ldr	r3, [pc, #60]	@ (80074b8 <TP_Scan+0x118>)
 800747a:	741a      	strb	r2, [r3, #16]
 800747c:	e00d      	b.n	800749a <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 800747e:	4b0e      	ldr	r3, [pc, #56]	@ (80074b8 <TP_Scan+0x118>)
 8007480:	2200      	movs	r2, #0
 8007482:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8007484:	4b0c      	ldr	r3, [pc, #48]	@ (80074b8 <TP_Scan+0x118>)
 8007486:	2200      	movs	r2, #0
 8007488:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 800748a:	4b0b      	ldr	r3, [pc, #44]	@ (80074b8 <TP_Scan+0x118>)
 800748c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007490:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 8007492:	4b09      	ldr	r3, [pc, #36]	@ (80074b8 <TP_Scan+0x118>)
 8007494:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007498:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 800749a:	4b07      	ldr	r3, [pc, #28]	@ (80074b8 <TP_Scan+0x118>)
 800749c:	7c1b      	ldrb	r3, [r3, #16]
 800749e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074a2:	b2db      	uxtb	r3, r3
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40020c00 	.word	0x40020c00
 80074b0:	20000166 	.word	0x20000166
 80074b4:	20000164 	.word	0x20000164
 80074b8:	20000158 	.word	0x20000158

080074bc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80074c0:	4b11      	ldr	r3, [pc, #68]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074c2:	4a12      	ldr	r2, [pc, #72]	@ (800750c <MX_UART5_Init+0x50>)
 80074c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80074c6:	4b10      	ldr	r3, [pc, #64]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80074cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80074ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80074d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80074da:	4b0b      	ldr	r3, [pc, #44]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074dc:	2200      	movs	r2, #0
 80074de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80074e0:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074e2:	220c      	movs	r2, #12
 80074e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074e6:	4b08      	ldr	r3, [pc, #32]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80074ec:	4b06      	ldr	r3, [pc, #24]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80074f2:	4805      	ldr	r0, [pc, #20]	@ (8007508 <MX_UART5_Init+0x4c>)
 80074f4:	f005 fd6a 	bl	800cfcc <HAL_UART_Init>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80074fe:	f7fe fdf5 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007502:	bf00      	nop
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20007150 	.word	0x20007150
 800750c:	40005000 	.word	0x40005000

08007510 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007514:	4b11      	ldr	r3, [pc, #68]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 8007516:	4a12      	ldr	r2, [pc, #72]	@ (8007560 <MX_USART3_UART_Init+0x50>)
 8007518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800751a:	4b10      	ldr	r3, [pc, #64]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 800751c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007522:	4b0e      	ldr	r3, [pc, #56]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 8007524:	2200      	movs	r2, #0
 8007526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007528:	4b0c      	ldr	r3, [pc, #48]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 800752a:	2200      	movs	r2, #0
 800752c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800752e:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 8007530:	2200      	movs	r2, #0
 8007532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007534:	4b09      	ldr	r3, [pc, #36]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 8007536:	220c      	movs	r2, #12
 8007538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800753a:	4b08      	ldr	r3, [pc, #32]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 800753c:	2200      	movs	r2, #0
 800753e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007540:	4b06      	ldr	r3, [pc, #24]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 8007542:	2200      	movs	r2, #0
 8007544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007546:	4805      	ldr	r0, [pc, #20]	@ (800755c <MX_USART3_UART_Init+0x4c>)
 8007548:	f005 fd40 	bl	800cfcc <HAL_UART_Init>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007552:	f7fe fdcb 	bl	80060ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007556:	bf00      	nop
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20007194 	.word	0x20007194
 8007560:	40004800 	.word	0x40004800

08007564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08c      	sub	sp, #48	@ 0x30
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800756c:	f107 031c 	add.w	r3, r7, #28
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	605a      	str	r2, [r3, #4]
 8007576:	609a      	str	r2, [r3, #8]
 8007578:	60da      	str	r2, [r3, #12]
 800757a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a42      	ldr	r2, [pc, #264]	@ (800768c <HAL_UART_MspInit+0x128>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d14b      	bne.n	800761e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8007586:	2300      	movs	r3, #0
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	4b41      	ldr	r3, [pc, #260]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	4a40      	ldr	r2, [pc, #256]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 8007590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007594:	6413      	str	r3, [r2, #64]	@ 0x40
 8007596:	4b3e      	ldr	r3, [pc, #248]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 80075a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075aa:	4a39      	ldr	r2, [pc, #228]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 80075ac:	f043 0304 	orr.w	r3, r3, #4
 80075b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80075b2:	4b37      	ldr	r3, [pc, #220]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 80075b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80075be:	2300      	movs	r3, #0
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	4b33      	ldr	r3, [pc, #204]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 80075c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c6:	4a32      	ldr	r2, [pc, #200]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 80075c8:	f043 0308 	orr.w	r3, r3, #8
 80075cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80075ce:	4b30      	ldr	r3, [pc, #192]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80075da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e0:	2302      	movs	r3, #2
 80075e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e8:	2303      	movs	r3, #3
 80075ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80075ec:	2308      	movs	r3, #8
 80075ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075f0:	f107 031c 	add.w	r3, r7, #28
 80075f4:	4619      	mov	r1, r3
 80075f6:	4827      	ldr	r0, [pc, #156]	@ (8007694 <HAL_UART_MspInit+0x130>)
 80075f8:	f000 fd40 	bl	800807c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80075fc:	2304      	movs	r3, #4
 80075fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007600:	2302      	movs	r3, #2
 8007602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007604:	2300      	movs	r3, #0
 8007606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007608:	2303      	movs	r3, #3
 800760a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800760c:	2308      	movs	r3, #8
 800760e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007610:	f107 031c 	add.w	r3, r7, #28
 8007614:	4619      	mov	r1, r3
 8007616:	4820      	ldr	r0, [pc, #128]	@ (8007698 <HAL_UART_MspInit+0x134>)
 8007618:	f000 fd30 	bl	800807c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800761c:	e031      	b.n	8007682 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1e      	ldr	r2, [pc, #120]	@ (800769c <HAL_UART_MspInit+0x138>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d12c      	bne.n	8007682 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	4b18      	ldr	r3, [pc, #96]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 800762e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007630:	4a17      	ldr	r2, [pc, #92]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 8007632:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007636:	6413      	str	r3, [r2, #64]	@ 0x40
 8007638:	4b15      	ldr	r3, [pc, #84]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 800763a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007644:	2300      	movs	r3, #0
 8007646:	60bb      	str	r3, [r7, #8]
 8007648:	4b11      	ldr	r3, [pc, #68]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 800764a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764c:	4a10      	ldr	r2, [pc, #64]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 800764e:	f043 0302 	orr.w	r3, r3, #2
 8007652:	6313      	str	r3, [r2, #48]	@ 0x30
 8007654:	4b0e      	ldr	r3, [pc, #56]	@ (8007690 <HAL_UART_MspInit+0x12c>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8007660:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007666:	2302      	movs	r3, #2
 8007668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766a:	2300      	movs	r3, #0
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800766e:	2303      	movs	r3, #3
 8007670:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007672:	2307      	movs	r3, #7
 8007674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007676:	f107 031c 	add.w	r3, r7, #28
 800767a:	4619      	mov	r1, r3
 800767c:	4808      	ldr	r0, [pc, #32]	@ (80076a0 <HAL_UART_MspInit+0x13c>)
 800767e:	f000 fcfd 	bl	800807c <HAL_GPIO_Init>
}
 8007682:	bf00      	nop
 8007684:	3730      	adds	r7, #48	@ 0x30
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	40005000 	.word	0x40005000
 8007690:	40023800 	.word	0x40023800
 8007694:	40020800 	.word	0x40020800
 8007698:	40020c00 	.word	0x40020c00
 800769c:	40004800 	.word	0x40004800
 80076a0:	40020400 	.word	0x40020400

080076a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80076a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80076dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80076a8:	480d      	ldr	r0, [pc, #52]	@ (80076e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80076aa:	490e      	ldr	r1, [pc, #56]	@ (80076e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80076ac:	4a0e      	ldr	r2, [pc, #56]	@ (80076e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80076ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076b0:	e002      	b.n	80076b8 <LoopCopyDataInit>

080076b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076b6:	3304      	adds	r3, #4

080076b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076bc:	d3f9      	bcc.n	80076b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076be:	4a0b      	ldr	r2, [pc, #44]	@ (80076ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80076c0:	4c0b      	ldr	r4, [pc, #44]	@ (80076f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80076c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076c4:	e001      	b.n	80076ca <LoopFillZerobss>

080076c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076c8:	3204      	adds	r2, #4

080076ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076cc:	d3fb      	bcc.n	80076c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80076ce:	f7ff fb8b 	bl	8006de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076d2:	f006 f8a1 	bl	800d818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076d6:	f7fe fc6d 	bl	8005fb4 <main>
  bx  lr    
 80076da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80076dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80076e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076e4:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80076e8:	08036734 	.word	0x08036734
  ldr r2, =_sbss
 80076ec:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80076f0:	200071dc 	.word	0x200071dc

080076f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076f4:	e7fe      	b.n	80076f4 <ADC_IRQHandler>
	...

080076f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80076fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <HAL_Init+0x40>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a0d      	ldr	r2, [pc, #52]	@ (8007738 <HAL_Init+0x40>)
 8007702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007708:	4b0b      	ldr	r3, [pc, #44]	@ (8007738 <HAL_Init+0x40>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a0a      	ldr	r2, [pc, #40]	@ (8007738 <HAL_Init+0x40>)
 800770e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007714:	4b08      	ldr	r3, [pc, #32]	@ (8007738 <HAL_Init+0x40>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a07      	ldr	r2, [pc, #28]	@ (8007738 <HAL_Init+0x40>)
 800771a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800771e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007720:	2003      	movs	r0, #3
 8007722:	f000 f94f 	bl	80079c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007726:	200f      	movs	r0, #15
 8007728:	f000 f808 	bl	800773c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800772c:	f7ff fabe 	bl	8006cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40023c00 	.word	0x40023c00

0800773c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007744:	4b12      	ldr	r3, [pc, #72]	@ (8007790 <HAL_InitTick+0x54>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	4b12      	ldr	r3, [pc, #72]	@ (8007794 <HAL_InitTick+0x58>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	4619      	mov	r1, r3
 800774e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007752:	fbb3 f3f1 	udiv	r3, r3, r1
 8007756:	fbb2 f3f3 	udiv	r3, r2, r3
 800775a:	4618      	mov	r0, r3
 800775c:	f000 f967 	bl	8007a2e <HAL_SYSTICK_Config>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e00e      	b.n	8007788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b0f      	cmp	r3, #15
 800776e:	d80a      	bhi.n	8007786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007770:	2200      	movs	r2, #0
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	f04f 30ff 	mov.w	r0, #4294967295
 8007778:	f000 f92f 	bl	80079da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800777c:	4a06      	ldr	r2, [pc, #24]	@ (8007798 <HAL_InitTick+0x5c>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000154 	.word	0x20000154
 8007794:	20000184 	.word	0x20000184
 8007798:	20000180 	.word	0x20000180

0800779c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <HAL_IncTick+0x20>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	4b06      	ldr	r3, [pc, #24]	@ (80077c0 <HAL_IncTick+0x24>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4413      	add	r3, r2
 80077ac:	4a04      	ldr	r2, [pc, #16]	@ (80077c0 <HAL_IncTick+0x24>)
 80077ae:	6013      	str	r3, [r2, #0]
}
 80077b0:	bf00      	nop
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20000184 	.word	0x20000184
 80077c0:	200071d8 	.word	0x200071d8

080077c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  return uwTick;
 80077c8:	4b03      	ldr	r3, [pc, #12]	@ (80077d8 <HAL_GetTick+0x14>)
 80077ca:	681b      	ldr	r3, [r3, #0]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	200071d8 	.word	0x200071d8

080077dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077e4:	f7ff ffee 	bl	80077c4 <HAL_GetTick>
 80077e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f4:	d005      	beq.n	8007802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007820 <HAL_Delay+0x44>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007802:	bf00      	nop
 8007804:	f7ff ffde 	bl	80077c4 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	429a      	cmp	r2, r3
 8007812:	d8f7      	bhi.n	8007804 <HAL_Delay+0x28>
  {
  }
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000184 	.word	0x20000184

08007824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007834:	4b0c      	ldr	r3, [pc, #48]	@ (8007868 <__NVIC_SetPriorityGrouping+0x44>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007840:	4013      	ands	r3, r2
 8007842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800784c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007856:	4a04      	ldr	r2, [pc, #16]	@ (8007868 <__NVIC_SetPriorityGrouping+0x44>)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	60d3      	str	r3, [r2, #12]
}
 800785c:	bf00      	nop
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	e000ed00 	.word	0xe000ed00

0800786c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007870:	4b04      	ldr	r3, [pc, #16]	@ (8007884 <__NVIC_GetPriorityGrouping+0x18>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	0a1b      	lsrs	r3, r3, #8
 8007876:	f003 0307 	and.w	r3, r3, #7
}
 800787a:	4618      	mov	r0, r3
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	e000ed00 	.word	0xe000ed00

08007888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007896:	2b00      	cmp	r3, #0
 8007898:	db0b      	blt.n	80078b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	f003 021f 	and.w	r2, r3, #31
 80078a0:	4907      	ldr	r1, [pc, #28]	@ (80078c0 <__NVIC_EnableIRQ+0x38>)
 80078a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	2001      	movs	r0, #1
 80078aa:	fa00 f202 	lsl.w	r2, r0, r2
 80078ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	e000e100 	.word	0xe000e100

080078c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	6039      	str	r1, [r7, #0]
 80078ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	db0a      	blt.n	80078ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	490c      	ldr	r1, [pc, #48]	@ (8007910 <__NVIC_SetPriority+0x4c>)
 80078de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078e2:	0112      	lsls	r2, r2, #4
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	440b      	add	r3, r1
 80078e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078ec:	e00a      	b.n	8007904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	4908      	ldr	r1, [pc, #32]	@ (8007914 <__NVIC_SetPriority+0x50>)
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	3b04      	subs	r3, #4
 80078fc:	0112      	lsls	r2, r2, #4
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	440b      	add	r3, r1
 8007902:	761a      	strb	r2, [r3, #24]
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	e000e100 	.word	0xe000e100
 8007914:	e000ed00 	.word	0xe000ed00

08007918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007918:	b480      	push	{r7}
 800791a:	b089      	sub	sp, #36	@ 0x24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f1c3 0307 	rsb	r3, r3, #7
 8007932:	2b04      	cmp	r3, #4
 8007934:	bf28      	it	cs
 8007936:	2304      	movcs	r3, #4
 8007938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	3304      	adds	r3, #4
 800793e:	2b06      	cmp	r3, #6
 8007940:	d902      	bls.n	8007948 <NVIC_EncodePriority+0x30>
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3b03      	subs	r3, #3
 8007946:	e000      	b.n	800794a <NVIC_EncodePriority+0x32>
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800794c:	f04f 32ff 	mov.w	r2, #4294967295
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	fa02 f303 	lsl.w	r3, r2, r3
 8007956:	43da      	mvns	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	401a      	ands	r2, r3
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007960:	f04f 31ff 	mov.w	r1, #4294967295
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	fa01 f303 	lsl.w	r3, r1, r3
 800796a:	43d9      	mvns	r1, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007970:	4313      	orrs	r3, r2
         );
}
 8007972:	4618      	mov	r0, r3
 8007974:	3724      	adds	r7, #36	@ 0x24
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
	...

08007980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3b01      	subs	r3, #1
 800798c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007990:	d301      	bcc.n	8007996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007992:	2301      	movs	r3, #1
 8007994:	e00f      	b.n	80079b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007996:	4a0a      	ldr	r2, [pc, #40]	@ (80079c0 <SysTick_Config+0x40>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3b01      	subs	r3, #1
 800799c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800799e:	210f      	movs	r1, #15
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	f7ff ff8e 	bl	80078c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079a8:	4b05      	ldr	r3, [pc, #20]	@ (80079c0 <SysTick_Config+0x40>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079ae:	4b04      	ldr	r3, [pc, #16]	@ (80079c0 <SysTick_Config+0x40>)
 80079b0:	2207      	movs	r2, #7
 80079b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	e000e010 	.word	0xe000e010

080079c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ff29 	bl	8007824 <__NVIC_SetPriorityGrouping>
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	4603      	mov	r3, r0
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
 80079e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079ec:	f7ff ff3e 	bl	800786c <__NVIC_GetPriorityGrouping>
 80079f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	6978      	ldr	r0, [r7, #20]
 80079f8:	f7ff ff8e 	bl	8007918 <NVIC_EncodePriority>
 80079fc:	4602      	mov	r2, r0
 80079fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a02:	4611      	mov	r1, r2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff ff5d 	bl	80078c4 <__NVIC_SetPriority>
}
 8007a0a:	bf00      	nop
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	4603      	mov	r3, r0
 8007a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff ff31 	bl	8007888 <__NVIC_EnableIRQ>
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff ffa2 	bl	8007980 <SysTick_Config>
 8007a3c:	4603      	mov	r3, r0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a54:	f7ff feb6 	bl	80077c4 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e099      	b.n	8007b98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0201 	bic.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a84:	e00f      	b.n	8007aa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a86:	f7ff fe9d 	bl	80077c4 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b05      	cmp	r3, #5
 8007a92:	d908      	bls.n	8007aa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e078      	b.n	8007b98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e8      	bne.n	8007a86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4b38      	ldr	r3, [pc, #224]	@ (8007ba0 <HAL_DMA_Init+0x158>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d107      	bne.n	8007b10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0307 	bic.w	r3, r3, #7
 8007b26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d117      	bne.n	8007b6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00e      	beq.n	8007b6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fa19 	bl	8007f84 <DMA_CheckFifoParam>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d008      	beq.n	8007b6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2240      	movs	r2, #64	@ 0x40
 8007b5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007b66:	2301      	movs	r3, #1
 8007b68:	e016      	b.n	8007b98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f9d0 	bl	8007f18 <DMA_CalcBaseAndBitshift>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b80:	223f      	movs	r2, #63	@ 0x3f
 8007b82:	409a      	lsls	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	f010803f 	.word	0xf010803f

08007ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2280      	movs	r2, #128	@ 0x80
 8007bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e00c      	b.n	8007bdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2205      	movs	r2, #5
 8007bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0201 	bic.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007bf4:	4b8e      	ldr	r3, [pc, #568]	@ (8007e30 <HAL_DMA_IRQHandler+0x248>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8007e34 <HAL_DMA_IRQHandler+0x24c>)
 8007bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfe:	0a9b      	lsrs	r3, r3, #10
 8007c00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c12:	2208      	movs	r2, #8
 8007c14:	409a      	lsls	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d01a      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d013      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0204 	bic.w	r2, r2, #4
 8007c3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c40:	2208      	movs	r2, #8
 8007c42:	409a      	lsls	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4c:	f043 0201 	orr.w	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c58:	2201      	movs	r2, #1
 8007c5a:	409a      	lsls	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d012      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c76:	2201      	movs	r2, #1
 8007c78:	409a      	lsls	r2, r3
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c82:	f043 0202 	orr.w	r2, r3, #2
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c8e:	2204      	movs	r2, #4
 8007c90:	409a      	lsls	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4013      	ands	r3, r2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d012      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cac:	2204      	movs	r2, #4
 8007cae:	409a      	lsls	r2, r3
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb8:	f043 0204 	orr.w	r2, r3, #4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cc4:	2210      	movs	r2, #16
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d043      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d03c      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce2:	2210      	movs	r2, #16
 8007ce4:	409a      	lsls	r2, r3
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d018      	beq.n	8007d2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d108      	bne.n	8007d18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d024      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
 8007d16:	e01f      	b.n	8007d58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01b      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
 8007d28:	e016      	b.n	8007d58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d107      	bne.n	8007d48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0208 	bic.w	r2, r2, #8
 8007d46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	409a      	lsls	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4013      	ands	r3, r2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 808f 	beq.w	8007e88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0310 	and.w	r3, r3, #16
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8087 	beq.w	8007e88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d7e:	2220      	movs	r2, #32
 8007d80:	409a      	lsls	r2, r3
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	d136      	bne.n	8007e00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0216 	bic.w	r2, r2, #22
 8007da0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695a      	ldr	r2, [r3, #20]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007db0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d103      	bne.n	8007dc2 <HAL_DMA_IRQHandler+0x1da>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0208 	bic.w	r2, r2, #8
 8007dd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd6:	223f      	movs	r2, #63	@ 0x3f
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d07e      	beq.n	8007ef4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
        }
        return;
 8007dfe:	e079      	b.n	8007ef4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01d      	beq.n	8007e4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10d      	bne.n	8007e38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d031      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
 8007e2c:	e02c      	b.n	8007e88 <HAL_DMA_IRQHandler+0x2a0>
 8007e2e:	bf00      	nop
 8007e30:	20000154 	.word	0x20000154
 8007e34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d023      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	4798      	blx	r3
 8007e48:	e01e      	b.n	8007e88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10f      	bne.n	8007e78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0210 	bic.w	r2, r2, #16
 8007e66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d032      	beq.n	8007ef6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d022      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2205      	movs	r2, #5
 8007ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d307      	bcc.n	8007ed0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f2      	bne.n	8007eb4 <HAL_DMA_IRQHandler+0x2cc>
 8007ece:	e000      	b.n	8007ed2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007ed0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
 8007ef2:	e000      	b.n	8007ef6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007ef4:	bf00      	nop
    }
  }
}
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f0a:	b2db      	uxtb	r3, r3
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	3b10      	subs	r3, #16
 8007f28:	4a14      	ldr	r2, [pc, #80]	@ (8007f7c <DMA_CalcBaseAndBitshift+0x64>)
 8007f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2e:	091b      	lsrs	r3, r3, #4
 8007f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007f32:	4a13      	ldr	r2, [pc, #76]	@ (8007f80 <DMA_CalcBaseAndBitshift+0x68>)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d909      	bls.n	8007f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007f4e:	f023 0303 	bic.w	r3, r3, #3
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f58:	e007      	b.n	8007f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007f62:	f023 0303 	bic.w	r3, r3, #3
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	aaaaaaab 	.word	0xaaaaaaab
 8007f80:	080366f4 	.word	0x080366f4

08007f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d11f      	bne.n	8007fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d856      	bhi.n	8008052 <DMA_CheckFifoParam+0xce>
 8007fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <DMA_CheckFifoParam+0x28>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fcf 	.word	0x08007fcf
 8007fb4:	08007fbd 	.word	0x08007fbd
 8007fb8:	08008053 	.word	0x08008053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d046      	beq.n	8008056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fcc:	e043      	b.n	8008056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007fd6:	d140      	bne.n	800805a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fdc:	e03d      	b.n	800805a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe6:	d121      	bne.n	800802c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d837      	bhi.n	800805e <DMA_CheckFifoParam+0xda>
 8007fee:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff4 <DMA_CheckFifoParam+0x70>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	08008005 	.word	0x08008005
 8007ff8:	0800800b 	.word	0x0800800b
 8007ffc:	08008005 	.word	0x08008005
 8008000:	0800801d 	.word	0x0800801d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	73fb      	strb	r3, [r7, #15]
      break;
 8008008:	e030      	b.n	800806c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d025      	beq.n	8008062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800801a:	e022      	b.n	8008062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008024:	d11f      	bne.n	8008066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800802a:	e01c      	b.n	8008066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d903      	bls.n	800803a <DMA_CheckFifoParam+0xb6>
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d003      	beq.n	8008040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008038:	e018      	b.n	800806c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	73fb      	strb	r3, [r7, #15]
      break;
 800803e:	e015      	b.n	800806c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00e      	beq.n	800806a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]
      break;
 8008050:	e00b      	b.n	800806a <DMA_CheckFifoParam+0xe6>
      break;
 8008052:	bf00      	nop
 8008054:	e00a      	b.n	800806c <DMA_CheckFifoParam+0xe8>
      break;
 8008056:	bf00      	nop
 8008058:	e008      	b.n	800806c <DMA_CheckFifoParam+0xe8>
      break;
 800805a:	bf00      	nop
 800805c:	e006      	b.n	800806c <DMA_CheckFifoParam+0xe8>
      break;
 800805e:	bf00      	nop
 8008060:	e004      	b.n	800806c <DMA_CheckFifoParam+0xe8>
      break;
 8008062:	bf00      	nop
 8008064:	e002      	b.n	800806c <DMA_CheckFifoParam+0xe8>
      break;   
 8008066:	bf00      	nop
 8008068:	e000      	b.n	800806c <DMA_CheckFifoParam+0xe8>
      break;
 800806a:	bf00      	nop
    }
  } 
  
  return status; 
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop

0800807c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800807c:	b480      	push	{r7}
 800807e:	b089      	sub	sp, #36	@ 0x24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800808a:	2300      	movs	r3, #0
 800808c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800808e:	2300      	movs	r3, #0
 8008090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	e16b      	b.n	8008370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008098:	2201      	movs	r2, #1
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4013      	ands	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	f040 815a 	bne.w	800836a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d005      	beq.n	80080ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d130      	bne.n	8008130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	2203      	movs	r2, #3
 80080da:	fa02 f303 	lsl.w	r3, r2, r3
 80080de:	43db      	mvns	r3, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	4013      	ands	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008104:	2201      	movs	r2, #1
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	43db      	mvns	r3, r3
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	4013      	ands	r3, r2
 8008112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	091b      	lsrs	r3, r3, #4
 800811a:	f003 0201 	and.w	r2, r3, #1
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	fa02 f303 	lsl.w	r3, r2, r3
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	4313      	orrs	r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f003 0303 	and.w	r3, r3, #3
 8008138:	2b03      	cmp	r3, #3
 800813a:	d017      	beq.n	800816c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	2203      	movs	r2, #3
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	43db      	mvns	r3, r3
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	4013      	ands	r3, r2
 8008152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	fa02 f303 	lsl.w	r3, r2, r3
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	4313      	orrs	r3, r2
 8008164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d123      	bne.n	80081c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	08da      	lsrs	r2, r3, #3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3208      	adds	r2, #8
 8008180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	220f      	movs	r2, #15
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	43db      	mvns	r3, r3
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	4013      	ands	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	08da      	lsrs	r2, r3, #3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3208      	adds	r2, #8
 80081ba:	69b9      	ldr	r1, [r7, #24]
 80081bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	2203      	movs	r2, #3
 80081cc:	fa02 f303 	lsl.w	r3, r2, r3
 80081d0:	43db      	mvns	r3, r3
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	4013      	ands	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f003 0203 	and.w	r2, r3, #3
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 80b4 	beq.w	800836a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	4b60      	ldr	r3, [pc, #384]	@ (8008388 <HAL_GPIO_Init+0x30c>)
 8008208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800820a:	4a5f      	ldr	r2, [pc, #380]	@ (8008388 <HAL_GPIO_Init+0x30c>)
 800820c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008210:	6453      	str	r3, [r2, #68]	@ 0x44
 8008212:	4b5d      	ldr	r3, [pc, #372]	@ (8008388 <HAL_GPIO_Init+0x30c>)
 8008214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800821e:	4a5b      	ldr	r2, [pc, #364]	@ (800838c <HAL_GPIO_Init+0x310>)
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	089b      	lsrs	r3, r3, #2
 8008224:	3302      	adds	r3, #2
 8008226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800822a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	220f      	movs	r2, #15
 8008236:	fa02 f303 	lsl.w	r3, r2, r3
 800823a:	43db      	mvns	r3, r3
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	4013      	ands	r3, r2
 8008240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a52      	ldr	r2, [pc, #328]	@ (8008390 <HAL_GPIO_Init+0x314>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d02b      	beq.n	80082a2 <HAL_GPIO_Init+0x226>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a51      	ldr	r2, [pc, #324]	@ (8008394 <HAL_GPIO_Init+0x318>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d025      	beq.n	800829e <HAL_GPIO_Init+0x222>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a50      	ldr	r2, [pc, #320]	@ (8008398 <HAL_GPIO_Init+0x31c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01f      	beq.n	800829a <HAL_GPIO_Init+0x21e>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a4f      	ldr	r2, [pc, #316]	@ (800839c <HAL_GPIO_Init+0x320>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d019      	beq.n	8008296 <HAL_GPIO_Init+0x21a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a4e      	ldr	r2, [pc, #312]	@ (80083a0 <HAL_GPIO_Init+0x324>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <HAL_GPIO_Init+0x216>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a4d      	ldr	r2, [pc, #308]	@ (80083a4 <HAL_GPIO_Init+0x328>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00d      	beq.n	800828e <HAL_GPIO_Init+0x212>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a4c      	ldr	r2, [pc, #304]	@ (80083a8 <HAL_GPIO_Init+0x32c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d007      	beq.n	800828a <HAL_GPIO_Init+0x20e>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a4b      	ldr	r2, [pc, #300]	@ (80083ac <HAL_GPIO_Init+0x330>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d101      	bne.n	8008286 <HAL_GPIO_Init+0x20a>
 8008282:	2307      	movs	r3, #7
 8008284:	e00e      	b.n	80082a4 <HAL_GPIO_Init+0x228>
 8008286:	2308      	movs	r3, #8
 8008288:	e00c      	b.n	80082a4 <HAL_GPIO_Init+0x228>
 800828a:	2306      	movs	r3, #6
 800828c:	e00a      	b.n	80082a4 <HAL_GPIO_Init+0x228>
 800828e:	2305      	movs	r3, #5
 8008290:	e008      	b.n	80082a4 <HAL_GPIO_Init+0x228>
 8008292:	2304      	movs	r3, #4
 8008294:	e006      	b.n	80082a4 <HAL_GPIO_Init+0x228>
 8008296:	2303      	movs	r3, #3
 8008298:	e004      	b.n	80082a4 <HAL_GPIO_Init+0x228>
 800829a:	2302      	movs	r3, #2
 800829c:	e002      	b.n	80082a4 <HAL_GPIO_Init+0x228>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <HAL_GPIO_Init+0x228>
 80082a2:	2300      	movs	r3, #0
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	f002 0203 	and.w	r2, r2, #3
 80082aa:	0092      	lsls	r2, r2, #2
 80082ac:	4093      	lsls	r3, r2
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082b4:	4935      	ldr	r1, [pc, #212]	@ (800838c <HAL_GPIO_Init+0x310>)
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	089b      	lsrs	r3, r3, #2
 80082ba:	3302      	adds	r3, #2
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80082c2:	4b3b      	ldr	r3, [pc, #236]	@ (80083b0 <HAL_GPIO_Init+0x334>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	43db      	mvns	r3, r3
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	4013      	ands	r3, r2
 80082d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80082e6:	4a32      	ldr	r2, [pc, #200]	@ (80083b0 <HAL_GPIO_Init+0x334>)
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80082ec:	4b30      	ldr	r3, [pc, #192]	@ (80083b0 <HAL_GPIO_Init+0x334>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	43db      	mvns	r3, r3
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	4013      	ands	r3, r2
 80082fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008310:	4a27      	ldr	r2, [pc, #156]	@ (80083b0 <HAL_GPIO_Init+0x334>)
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008316:	4b26      	ldr	r3, [pc, #152]	@ (80083b0 <HAL_GPIO_Init+0x334>)
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	43db      	mvns	r3, r3
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	4013      	ands	r3, r2
 8008324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800833a:	4a1d      	ldr	r2, [pc, #116]	@ (80083b0 <HAL_GPIO_Init+0x334>)
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008340:	4b1b      	ldr	r3, [pc, #108]	@ (80083b0 <HAL_GPIO_Init+0x334>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	43db      	mvns	r3, r3
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	4013      	ands	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008364:	4a12      	ldr	r2, [pc, #72]	@ (80083b0 <HAL_GPIO_Init+0x334>)
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	3301      	adds	r3, #1
 800836e:	61fb      	str	r3, [r7, #28]
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	2b0f      	cmp	r3, #15
 8008374:	f67f ae90 	bls.w	8008098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	3724      	adds	r7, #36	@ 0x24
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	40023800 	.word	0x40023800
 800838c:	40013800 	.word	0x40013800
 8008390:	40020000 	.word	0x40020000
 8008394:	40020400 	.word	0x40020400
 8008398:	40020800 	.word	0x40020800
 800839c:	40020c00 	.word	0x40020c00
 80083a0:	40021000 	.word	0x40021000
 80083a4:	40021400 	.word	0x40021400
 80083a8:	40021800 	.word	0x40021800
 80083ac:	40021c00 	.word	0x40021c00
 80083b0:	40013c00 	.word	0x40013c00

080083b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	887b      	ldrh	r3, [r7, #2]
 80083c6:	4013      	ands	r3, r2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083cc:	2301      	movs	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
 80083d0:	e001      	b.n	80083d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083d2:	2300      	movs	r3, #0
 80083d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	807b      	strh	r3, [r7, #2]
 80083f0:	4613      	mov	r3, r2
 80083f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083f4:	787b      	ldrb	r3, [r7, #1]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083fa:	887a      	ldrh	r2, [r7, #2]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008400:	e003      	b.n	800840a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008402:	887b      	ldrh	r3, [r7, #2]
 8008404:	041a      	lsls	r2, r3, #16
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	619a      	str	r2, [r3, #24]
}
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
	...

08008418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e12b      	b.n	8008682 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7fd fca8 	bl	8005d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2224      	movs	r2, #36	@ 0x24
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0201 	bic.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800846a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800847a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800847c:	f003 f8d6 	bl	800b62c <HAL_RCC_GetPCLK1Freq>
 8008480:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	4a81      	ldr	r2, [pc, #516]	@ (800868c <HAL_I2C_Init+0x274>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d807      	bhi.n	800849c <HAL_I2C_Init+0x84>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4a80      	ldr	r2, [pc, #512]	@ (8008690 <HAL_I2C_Init+0x278>)
 8008490:	4293      	cmp	r3, r2
 8008492:	bf94      	ite	ls
 8008494:	2301      	movls	r3, #1
 8008496:	2300      	movhi	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	e006      	b.n	80084aa <HAL_I2C_Init+0x92>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4a7d      	ldr	r2, [pc, #500]	@ (8008694 <HAL_I2C_Init+0x27c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bf94      	ite	ls
 80084a4:	2301      	movls	r3, #1
 80084a6:	2300      	movhi	r3, #0
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e0e7      	b.n	8008682 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4a78      	ldr	r2, [pc, #480]	@ (8008698 <HAL_I2C_Init+0x280>)
 80084b6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ba:	0c9b      	lsrs	r3, r3, #18
 80084bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	4a6a      	ldr	r2, [pc, #424]	@ (800868c <HAL_I2C_Init+0x274>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d802      	bhi.n	80084ec <HAL_I2C_Init+0xd4>
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	3301      	adds	r3, #1
 80084ea:	e009      	b.n	8008500 <HAL_I2C_Init+0xe8>
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80084f2:	fb02 f303 	mul.w	r3, r2, r3
 80084f6:	4a69      	ldr	r2, [pc, #420]	@ (800869c <HAL_I2C_Init+0x284>)
 80084f8:	fba2 2303 	umull	r2, r3, r2, r3
 80084fc:	099b      	lsrs	r3, r3, #6
 80084fe:	3301      	adds	r3, #1
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6812      	ldr	r2, [r2, #0]
 8008504:	430b      	orrs	r3, r1
 8008506:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008512:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	495c      	ldr	r1, [pc, #368]	@ (800868c <HAL_I2C_Init+0x274>)
 800851c:	428b      	cmp	r3, r1
 800851e:	d819      	bhi.n	8008554 <HAL_I2C_Init+0x13c>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	1e59      	subs	r1, r3, #1
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	fbb1 f3f3 	udiv	r3, r1, r3
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008534:	400b      	ands	r3, r1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <HAL_I2C_Init+0x138>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	1e59      	subs	r1, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	fbb1 f3f3 	udiv	r3, r1, r3
 8008548:	3301      	adds	r3, #1
 800854a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800854e:	e051      	b.n	80085f4 <HAL_I2C_Init+0x1dc>
 8008550:	2304      	movs	r3, #4
 8008552:	e04f      	b.n	80085f4 <HAL_I2C_Init+0x1dc>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d111      	bne.n	8008580 <HAL_I2C_Init+0x168>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	1e58      	subs	r0, r3, #1
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6859      	ldr	r1, [r3, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	440b      	add	r3, r1
 800856a:	fbb0 f3f3 	udiv	r3, r0, r3
 800856e:	3301      	adds	r3, #1
 8008570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008574:	2b00      	cmp	r3, #0
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	e012      	b.n	80085a6 <HAL_I2C_Init+0x18e>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	1e58      	subs	r0, r3, #1
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6859      	ldr	r1, [r3, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	440b      	add	r3, r1
 800858e:	0099      	lsls	r1, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	fbb0 f3f3 	udiv	r3, r0, r3
 8008596:	3301      	adds	r3, #1
 8008598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800859c:	2b00      	cmp	r3, #0
 800859e:	bf0c      	ite	eq
 80085a0:	2301      	moveq	r3, #1
 80085a2:	2300      	movne	r3, #0
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <HAL_I2C_Init+0x196>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e022      	b.n	80085f4 <HAL_I2C_Init+0x1dc>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10e      	bne.n	80085d4 <HAL_I2C_Init+0x1bc>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	1e58      	subs	r0, r3, #1
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6859      	ldr	r1, [r3, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	440b      	add	r3, r1
 80085c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80085c8:	3301      	adds	r3, #1
 80085ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d2:	e00f      	b.n	80085f4 <HAL_I2C_Init+0x1dc>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	1e58      	subs	r0, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6859      	ldr	r1, [r3, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	0099      	lsls	r1, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80085ea:	3301      	adds	r3, #1
 80085ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	6809      	ldr	r1, [r1, #0]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69da      	ldr	r2, [r3, #28]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008622:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6911      	ldr	r1, [r2, #16]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	68d2      	ldr	r2, [r2, #12]
 800862e:	4311      	orrs	r1, r2
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6812      	ldr	r2, [r2, #0]
 8008634:	430b      	orrs	r3, r1
 8008636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695a      	ldr	r2, [r3, #20]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	430a      	orrs	r2, r1
 8008652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0201 	orr.w	r2, r2, #1
 8008662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	000186a0 	.word	0x000186a0
 8008690:	001e847f 	.word	0x001e847f
 8008694:	003d08ff 	.word	0x003d08ff
 8008698:	431bde83 	.word	0x431bde83
 800869c:	10624dd3 	.word	0x10624dd3

080086a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	4608      	mov	r0, r1
 80086aa:	4611      	mov	r1, r2
 80086ac:	461a      	mov	r2, r3
 80086ae:	4603      	mov	r3, r0
 80086b0:	817b      	strh	r3, [r7, #10]
 80086b2:	460b      	mov	r3, r1
 80086b4:	813b      	strh	r3, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086ba:	f7ff f883 	bl	80077c4 <HAL_GetTick>
 80086be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	f040 80d9 	bne.w	8008880 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	2319      	movs	r3, #25
 80086d4:	2201      	movs	r2, #1
 80086d6:	496d      	ldr	r1, [pc, #436]	@ (800888c <HAL_I2C_Mem_Write+0x1ec>)
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f002 f90d 	bl	800a8f8 <I2C_WaitOnFlagUntilTimeout>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80086e4:	2302      	movs	r3, #2
 80086e6:	e0cc      	b.n	8008882 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_I2C_Mem_Write+0x56>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e0c5      	b.n	8008882 <HAL_I2C_Mem_Write+0x1e2>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d007      	beq.n	800871c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f042 0201 	orr.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800872a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2221      	movs	r2, #33	@ 0x21
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2240      	movs	r2, #64	@ 0x40
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6a3a      	ldr	r2, [r7, #32]
 8008746:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800874c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008752:	b29a      	uxth	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4a4d      	ldr	r2, [pc, #308]	@ (8008890 <HAL_I2C_Mem_Write+0x1f0>)
 800875c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800875e:	88f8      	ldrh	r0, [r7, #6]
 8008760:	893a      	ldrh	r2, [r7, #8]
 8008762:	8979      	ldrh	r1, [r7, #10]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	4603      	mov	r3, r0
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f001 fe9c 	bl	800a4ac <I2C_RequestMemoryWrite>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d052      	beq.n	8008820 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e081      	b.n	8008882 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f002 f98e 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00d      	beq.n	80087aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	2b04      	cmp	r3, #4
 8008794:	d107      	bne.n	80087a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e06b      	b.n	8008882 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d11b      	bne.n	8008820 <HAL_I2C_Mem_Write+0x180>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d017      	beq.n	8008820 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	781a      	ldrb	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800880a:	3b01      	subs	r3, #1
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1aa      	bne.n	800877e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f002 f97a 	bl	800ab26 <I2C_WaitOnBTFFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00d      	beq.n	8008854 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883c:	2b04      	cmp	r3, #4
 800883e:	d107      	bne.n	8008850 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800884e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e016      	b.n	8008882 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	e000      	b.n	8008882 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008880:	2302      	movs	r3, #2
  }
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	00100002 	.word	0x00100002
 8008890:	ffff0000 	.word	0xffff0000

08008894 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08c      	sub	sp, #48	@ 0x30
 8008898:	af02      	add	r7, sp, #8
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	4608      	mov	r0, r1
 800889e:	4611      	mov	r1, r2
 80088a0:	461a      	mov	r2, r3
 80088a2:	4603      	mov	r3, r0
 80088a4:	817b      	strh	r3, [r7, #10]
 80088a6:	460b      	mov	r3, r1
 80088a8:	813b      	strh	r3, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80088ae:	f7fe ff89 	bl	80077c4 <HAL_GetTick>
 80088b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b20      	cmp	r3, #32
 80088be:	f040 8208 	bne.w	8008cd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	2319      	movs	r3, #25
 80088c8:	2201      	movs	r2, #1
 80088ca:	497b      	ldr	r1, [pc, #492]	@ (8008ab8 <HAL_I2C_Mem_Read+0x224>)
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f002 f813 	bl	800a8f8 <I2C_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80088d8:	2302      	movs	r3, #2
 80088da:	e1fb      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <HAL_I2C_Mem_Read+0x56>
 80088e6:	2302      	movs	r3, #2
 80088e8:	e1f4      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d007      	beq.n	8008910 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0201 	orr.w	r2, r2, #1
 800890e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800891e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2222      	movs	r2, #34	@ 0x22
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2240      	movs	r2, #64	@ 0x40
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800893a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a5b      	ldr	r2, [pc, #364]	@ (8008abc <HAL_I2C_Mem_Read+0x228>)
 8008950:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008952:	88f8      	ldrh	r0, [r7, #6]
 8008954:	893a      	ldrh	r2, [r7, #8]
 8008956:	8979      	ldrh	r1, [r7, #10]
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	4603      	mov	r3, r0
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f001 fe38 	bl	800a5d8 <I2C_RequestMemoryRead>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e1b0      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	d113      	bne.n	80089a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800897a:	2300      	movs	r3, #0
 800897c:	623b      	str	r3, [r7, #32]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	623b      	str	r3, [r7, #32]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	623b      	str	r3, [r7, #32]
 800898e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e184      	b.n	8008cac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d11b      	bne.n	80089e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ba:	2300      	movs	r3, #0
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	61fb      	str	r3, [r7, #28]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	61fb      	str	r3, [r7, #28]
 80089ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e164      	b.n	8008cac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d11b      	bne.n	8008a22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61bb      	str	r3, [r7, #24]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	61bb      	str	r3, [r7, #24]
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	e144      	b.n	8008cac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008a38:	e138      	b.n	8008cac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	f200 80f1 	bhi.w	8008c26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d123      	bne.n	8008a94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f002 f8db 	bl	800ac0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e139      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691a      	ldr	r2, [r3, #16]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008a92:	e10b      	b.n	8008cac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d14e      	bne.n	8008b3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4906      	ldr	r1, [pc, #24]	@ (8008ac0 <HAL_I2C_Mem_Read+0x22c>)
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f001 ff26 	bl	800a8f8 <I2C_WaitOnFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d008      	beq.n	8008ac4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e10e      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
 8008ab6:	bf00      	nop
 8008ab8:	00100002 	.word	0x00100002
 8008abc:	ffff0000 	.word	0xffff0000
 8008ac0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691a      	ldr	r2, [r3, #16]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af0:	3b01      	subs	r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	3b01      	subs	r3, #1
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008b38:	e0b8      	b.n	8008cac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	2200      	movs	r2, #0
 8008b42:	4966      	ldr	r1, [pc, #408]	@ (8008cdc <HAL_I2C_Mem_Read+0x448>)
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f001 fed7 	bl	800a8f8 <I2C_WaitOnFlagUntilTimeout>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e0bf      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	494f      	ldr	r1, [pc, #316]	@ (8008cdc <HAL_I2C_Mem_Read+0x448>)
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f001 fea9 	bl	800a8f8 <I2C_WaitOnFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e091      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691a      	ldr	r2, [r3, #16]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	691a      	ldr	r2, [r3, #16]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	b2d2      	uxtb	r2, r2
 8008bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008c24:	e042      	b.n	8008cac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f001 ffee 	bl	800ac0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e04c      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c44:	b2d2      	uxtb	r2, r2
 8008c46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	f003 0304 	and.w	r3, r3, #4
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d118      	bne.n	8008cac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	691a      	ldr	r2, [r3, #16]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c84:	b2d2      	uxtb	r2, r2
 8008c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f47f aec2 	bne.w	8008a3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e000      	b.n	8008cd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008cd2:	2302      	movs	r3, #2
  }
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3728      	adds	r7, #40	@ 0x28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	00010004 	.word	0x00010004

08008ce0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	2b10      	cmp	r3, #16
 8008d0e:	d003      	beq.n	8008d18 <HAL_I2C_EV_IRQHandler+0x38>
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	2b40      	cmp	r3, #64	@ 0x40
 8008d14:	f040 80c1 	bne.w	8008e9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10d      	bne.n	8008d4e <HAL_I2C_EV_IRQHandler+0x6e>
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008d38:	d003      	beq.n	8008d42 <HAL_I2C_EV_IRQHandler+0x62>
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008d40:	d101      	bne.n	8008d46 <HAL_I2C_EV_IRQHandler+0x66>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <HAL_I2C_EV_IRQHandler+0x68>
 8008d46:	2300      	movs	r3, #0
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	f000 8132 	beq.w	8008fb2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <HAL_I2C_EV_IRQHandler+0x92>
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	0a5b      	lsrs	r3, r3, #9
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d006      	beq.n	8008d72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 ffd6 	bl	800ad16 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fd83 	bl	8009876 <I2C_Master_SB>
 8008d70:	e092      	b.n	8008e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	08db      	lsrs	r3, r3, #3
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <HAL_I2C_EV_IRQHandler+0xb2>
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	0a5b      	lsrs	r3, r3, #9
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fdf9 	bl	8009982 <I2C_Master_ADD10>
 8008d90:	e082      	b.n	8008e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	085b      	lsrs	r3, r3, #1
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <HAL_I2C_EV_IRQHandler+0xd2>
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	0a5b      	lsrs	r3, r3, #9
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fe13 	bl	80099d6 <I2C_Master_ADDR>
 8008db0:	e072      	b.n	8008e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	089b      	lsrs	r3, r3, #2
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d03b      	beq.n	8008e36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dcc:	f000 80f3 	beq.w	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	09db      	lsrs	r3, r3, #7
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00f      	beq.n	8008dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	0a9b      	lsrs	r3, r3, #10
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d009      	beq.n	8008dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	089b      	lsrs	r3, r3, #2
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d103      	bne.n	8008dfc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f9f3 	bl	80091e0 <I2C_MasterTransmit_TXE>
 8008dfa:	e04d      	b.n	8008e98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	089b      	lsrs	r3, r3, #2
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80d6 	beq.w	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	0a5b      	lsrs	r3, r3, #9
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80cf 	beq.w	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	2b21      	cmp	r3, #33	@ 0x21
 8008e1c:	d103      	bne.n	8008e26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa7a 	bl	8009318 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e24:	e0c7      	b.n	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b40      	cmp	r3, #64	@ 0x40
 8008e2a:	f040 80c4 	bne.w	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fae8 	bl	8009404 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e34:	e0bf      	b.n	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e44:	f000 80b7 	beq.w	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	099b      	lsrs	r3, r3, #6
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00f      	beq.n	8008e74 <HAL_I2C_EV_IRQHandler+0x194>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	0a9b      	lsrs	r3, r3, #10
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d009      	beq.n	8008e74 <HAL_I2C_EV_IRQHandler+0x194>
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	089b      	lsrs	r3, r3, #2
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d103      	bne.n	8008e74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fb5d 	bl	800952c <I2C_MasterReceive_RXNE>
 8008e72:	e011      	b.n	8008e98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	089b      	lsrs	r3, r3, #2
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 809a 	beq.w	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	0a5b      	lsrs	r3, r3, #9
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 8093 	beq.w	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fc06 	bl	80096a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e96:	e08e      	b.n	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008e98:	e08d      	b.n	8008fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d004      	beq.n	8008eac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	61fb      	str	r3, [r7, #28]
 8008eaa:	e007      	b.n	8008ebc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	085b      	lsrs	r3, r3, #1
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d012      	beq.n	8008eee <HAL_I2C_EV_IRQHandler+0x20e>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	0a5b      	lsrs	r3, r3, #9
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00c      	beq.n	8008eee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008ee4:	69b9      	ldr	r1, [r7, #24]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 ffc4 	bl	8009e74 <I2C_Slave_ADDR>
 8008eec:	e066      	b.n	8008fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	091b      	lsrs	r3, r3, #4
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d009      	beq.n	8008f0e <HAL_I2C_EV_IRQHandler+0x22e>
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	0a5b      	lsrs	r3, r3, #9
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fffe 	bl	8009f08 <I2C_Slave_STOPF>
 8008f0c:	e056      	b.n	8008fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	2b21      	cmp	r3, #33	@ 0x21
 8008f12:	d002      	beq.n	8008f1a <HAL_I2C_EV_IRQHandler+0x23a>
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	2b29      	cmp	r3, #41	@ 0x29
 8008f18:	d125      	bne.n	8008f66 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	09db      	lsrs	r3, r3, #7
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00f      	beq.n	8008f46 <HAL_I2C_EV_IRQHandler+0x266>
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	0a9b      	lsrs	r3, r3, #10
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <HAL_I2C_EV_IRQHandler+0x266>
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	089b      	lsrs	r3, r3, #2
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 feda 	bl	8009cf8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f44:	e039      	b.n	8008fba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	089b      	lsrs	r3, r3, #2
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d033      	beq.n	8008fba <HAL_I2C_EV_IRQHandler+0x2da>
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	0a5b      	lsrs	r3, r3, #9
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d02d      	beq.n	8008fba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 ff07 	bl	8009d72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f64:	e029      	b.n	8008fba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	099b      	lsrs	r3, r3, #6
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00f      	beq.n	8008f92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	0a9b      	lsrs	r3, r3, #10
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	089b      	lsrs	r3, r3, #2
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 ff12 	bl	8009db4 <I2C_SlaveReceive_RXNE>
 8008f90:	e014      	b.n	8008fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	089b      	lsrs	r3, r3, #2
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00e      	beq.n	8008fbc <HAL_I2C_EV_IRQHandler+0x2dc>
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	0a5b      	lsrs	r3, r3, #9
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 ff40 	bl	8009e30 <I2C_SlaveReceive_BTF>
 8008fb0:	e004      	b.n	8008fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008fb2:	bf00      	nop
 8008fb4:	e002      	b.n	8008fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fb6:	bf00      	nop
 8008fb8:	e000      	b.n	8008fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008fba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008fbc:	3720      	adds	r7, #32
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b08a      	sub	sp, #40	@ 0x28
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fe4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	0a1b      	lsrs	r3, r3, #8
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00e      	beq.n	8009010 <HAL_I2C_ER_IRQHandler+0x4e>
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	0a1b      	lsrs	r3, r3, #8
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d008      	beq.n	8009010 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	f043 0301 	orr.w	r3, r3, #1
 8009004:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800900e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	0a5b      	lsrs	r3, r3, #9
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00e      	beq.n	800903a <HAL_I2C_ER_IRQHandler+0x78>
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	0a1b      	lsrs	r3, r3, #8
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d008      	beq.n	800903a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	f043 0302 	orr.w	r3, r3, #2
 800902e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8009038:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	0a9b      	lsrs	r3, r3, #10
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d03f      	beq.n	80090c6 <HAL_I2C_ER_IRQHandler+0x104>
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	0a1b      	lsrs	r3, r3, #8
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d039      	beq.n	80090c6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8009052:	7efb      	ldrb	r3, [r7, #27]
 8009054:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800905a:	b29b      	uxth	r3, r3
 800905c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009064:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800906c:	7ebb      	ldrb	r3, [r7, #26]
 800906e:	2b20      	cmp	r3, #32
 8009070:	d112      	bne.n	8009098 <HAL_I2C_ER_IRQHandler+0xd6>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10f      	bne.n	8009098 <HAL_I2C_ER_IRQHandler+0xd6>
 8009078:	7cfb      	ldrb	r3, [r7, #19]
 800907a:	2b21      	cmp	r3, #33	@ 0x21
 800907c:	d008      	beq.n	8009090 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800907e:	7cfb      	ldrb	r3, [r7, #19]
 8009080:	2b29      	cmp	r3, #41	@ 0x29
 8009082:	d005      	beq.n	8009090 <HAL_I2C_ER_IRQHandler+0xce>
 8009084:	7cfb      	ldrb	r3, [r7, #19]
 8009086:	2b28      	cmp	r3, #40	@ 0x28
 8009088:	d106      	bne.n	8009098 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b21      	cmp	r3, #33	@ 0x21
 800908e:	d103      	bne.n	8009098 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 f869 	bl	800a168 <I2C_Slave_AF>
 8009096:	e016      	b.n	80090c6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80090a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	f043 0304 	orr.w	r3, r3, #4
 80090a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80090aa:	7efb      	ldrb	r3, [r7, #27]
 80090ac:	2b10      	cmp	r3, #16
 80090ae:	d002      	beq.n	80090b6 <HAL_I2C_ER_IRQHandler+0xf4>
 80090b0:	7efb      	ldrb	r3, [r7, #27]
 80090b2:	2b40      	cmp	r3, #64	@ 0x40
 80090b4:	d107      	bne.n	80090c6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	0adb      	lsrs	r3, r3, #11
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00e      	beq.n	80090f0 <HAL_I2C_ER_IRQHandler+0x12e>
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	0a1b      	lsrs	r3, r3, #8
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d008      	beq.n	80090f0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80090de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e0:	f043 0308 	orr.w	r3, r3, #8
 80090e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80090ee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80090f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d008      	beq.n	8009108 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 f8a0 	bl	800a248 <I2C_ITError>
  }
}
 8009108:	bf00      	nop
 800910a:	3728      	adds	r7, #40	@ 0x28
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
 800916c:	4613      	mov	r3, r2
 800916e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009202:	2b00      	cmp	r3, #0
 8009204:	d150      	bne.n	80092a8 <I2C_MasterTransmit_TXE+0xc8>
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	2b21      	cmp	r3, #33	@ 0x21
 800920a:	d14d      	bne.n	80092a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b08      	cmp	r3, #8
 8009210:	d01d      	beq.n	800924e <I2C_MasterTransmit_TXE+0x6e>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b20      	cmp	r3, #32
 8009216:	d01a      	beq.n	800924e <I2C_MasterTransmit_TXE+0x6e>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800921e:	d016      	beq.n	800924e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800922e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2211      	movs	r2, #17
 8009234:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff ff62 	bl	8009110 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800924c:	e060      	b.n	8009310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800925c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800926c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b40      	cmp	r3, #64	@ 0x40
 8009286:	d107      	bne.n	8009298 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff ff7d 	bl	8009190 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009296:	e03b      	b.n	8009310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ff35 	bl	8009110 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80092a6:	e033      	b.n	8009310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	2b21      	cmp	r3, #33	@ 0x21
 80092ac:	d005      	beq.n	80092ba <I2C_MasterTransmit_TXE+0xda>
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
 80092b0:	2b40      	cmp	r3, #64	@ 0x40
 80092b2:	d12d      	bne.n	8009310 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b22      	cmp	r3, #34	@ 0x22
 80092b8:	d12a      	bne.n	8009310 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d108      	bne.n	80092d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80092d4:	e01c      	b.n	8009310 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b40      	cmp	r3, #64	@ 0x40
 80092e0:	d103      	bne.n	80092ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f88e 	bl	8009404 <I2C_MemoryTransmit_TXE_BTF>
}
 80092e8:	e012      	b.n	8009310 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ee:	781a      	ldrb	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800930e:	e7ff      	b.n	8009310 <I2C_MasterTransmit_TXE+0x130>
 8009310:	bf00      	nop
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009324:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b21      	cmp	r3, #33	@ 0x21
 8009330:	d164      	bne.n	80093fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009336:	b29b      	uxth	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d012      	beq.n	8009362 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	781a      	ldrb	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009356:	b29b      	uxth	r3, r3
 8009358:	3b01      	subs	r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009360:	e04c      	b.n	80093fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b08      	cmp	r3, #8
 8009366:	d01d      	beq.n	80093a4 <I2C_MasterTransmit_BTF+0x8c>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b20      	cmp	r3, #32
 800936c:	d01a      	beq.n	80093a4 <I2C_MasterTransmit_BTF+0x8c>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009374:	d016      	beq.n	80093a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009384:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2211      	movs	r2, #17
 800938a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff feb7 	bl	8009110 <HAL_I2C_MasterTxCpltCallback>
}
 80093a2:	e02b      	b.n	80093fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80093b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b40      	cmp	r3, #64	@ 0x40
 80093dc:	d107      	bne.n	80093ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7ff fed2 	bl	8009190 <HAL_I2C_MemTxCpltCallback>
}
 80093ec:	e006      	b.n	80093fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fe8a 	bl	8009110 <HAL_I2C_MasterTxCpltCallback>
}
 80093fc:	bf00      	nop
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009412:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009418:	2b00      	cmp	r3, #0
 800941a:	d11d      	bne.n	8009458 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009420:	2b01      	cmp	r3, #1
 8009422:	d10b      	bne.n	800943c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009428:	b2da      	uxtb	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009434:	1c9a      	adds	r2, r3, #2
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800943a:	e073      	b.n	8009524 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009440:	b29b      	uxth	r3, r3
 8009442:	121b      	asrs	r3, r3, #8
 8009444:	b2da      	uxtb	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009456:	e065      	b.n	8009524 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800945c:	2b01      	cmp	r3, #1
 800945e:	d10b      	bne.n	8009478 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009464:	b2da      	uxtb	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009476:	e055      	b.n	8009524 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800947c:	2b02      	cmp	r3, #2
 800947e:	d151      	bne.n	8009524 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009480:	7bfb      	ldrb	r3, [r7, #15]
 8009482:	2b22      	cmp	r3, #34	@ 0x22
 8009484:	d10d      	bne.n	80094a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009494:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80094a0:	e040      	b.n	8009524 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d015      	beq.n	80094d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	2b21      	cmp	r3, #33	@ 0x21
 80094b0:	d112      	bne.n	80094d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b6:	781a      	ldrb	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	3b01      	subs	r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80094d6:	e025      	b.n	8009524 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d120      	bne.n	8009524 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2b21      	cmp	r3, #33	@ 0x21
 80094e6:	d11d      	bne.n	8009524 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80094f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009506:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff fe36 	bl	8009190 <HAL_I2C_MemTxCpltCallback>
}
 8009524:	bf00      	nop
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b22      	cmp	r3, #34	@ 0x22
 800953e:	f040 80ac 	bne.w	800969a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009546:	b29b      	uxth	r3, r3
 8009548:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2b03      	cmp	r3, #3
 800954e:	d921      	bls.n	8009594 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691a      	ldr	r2, [r3, #16]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800957a:	b29b      	uxth	r3, r3
 800957c:	2b03      	cmp	r3, #3
 800957e:	f040 808c 	bne.w	800969a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009590:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009592:	e082      	b.n	800969a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009598:	2b02      	cmp	r3, #2
 800959a:	d075      	beq.n	8009688 <I2C_MasterReceive_RXNE+0x15c>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d002      	beq.n	80095a8 <I2C_MasterReceive_RXNE+0x7c>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d16f      	bne.n	8009688 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f001 fafd 	bl	800aba8 <I2C_WaitOnSTOPRequestThroughIT>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d142      	bne.n	800963a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685a      	ldr	r2, [r3, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80095d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b40      	cmp	r3, #64	@ 0x40
 800960c:	d10a      	bne.n	8009624 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff fdc1 	bl	80091a4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009622:	e03a      	b.n	800969a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2212      	movs	r2, #18
 8009630:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7ff fd76 	bl	8009124 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009638:	e02f      	b.n	800969a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009648:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009654:	b2d2      	uxtb	r2, r2
 8009656:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009666:	b29b      	uxth	r3, r3
 8009668:	3b01      	subs	r3, #1
 800966a:	b29a      	uxth	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2220      	movs	r2, #32
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff fd99 	bl	80091b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009686:	e008      	b.n	800969a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009696:	605a      	str	r2, [r3, #4]
}
 8009698:	e7ff      	b.n	800969a <I2C_MasterReceive_RXNE+0x16e>
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d11b      	bne.n	80096f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	691a      	ldr	r2, [r3, #16]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d4:	b2d2      	uxtb	r2, r2
 80096d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80096f0:	e0bd      	b.n	800986e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d129      	bne.n	8009750 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800970a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b04      	cmp	r3, #4
 8009710:	d00a      	beq.n	8009728 <I2C_MasterReceive_BTF+0x86>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d007      	beq.n	8009728 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009726:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	691a      	ldr	r2, [r3, #16]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	b2d2      	uxtb	r2, r2
 8009734:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800974e:	e08e      	b.n	800986e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009754:	b29b      	uxth	r3, r3
 8009756:	2b02      	cmp	r3, #2
 8009758:	d176      	bne.n	8009848 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d002      	beq.n	8009766 <I2C_MasterReceive_BTF+0xc4>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b10      	cmp	r3, #16
 8009764:	d108      	bne.n	8009778 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	e019      	b.n	80097ac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b04      	cmp	r3, #4
 800977c:	d002      	beq.n	8009784 <I2C_MasterReceive_BTF+0xe2>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d108      	bne.n	8009796 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	e00a      	b.n	80097ac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b10      	cmp	r3, #16
 800979a:	d007      	beq.n	80097ac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	691a      	ldr	r2, [r3, #16]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b6:	b2d2      	uxtb	r2, r2
 80097b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691a      	ldr	r2, [r3, #16]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097dc:	b2d2      	uxtb	r2, r2
 80097de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009806:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b40      	cmp	r3, #64	@ 0x40
 800981a:	d10a      	bne.n	8009832 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff fcba 	bl	80091a4 <HAL_I2C_MemRxCpltCallback>
}
 8009830:	e01d      	b.n	800986e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2212      	movs	r2, #18
 800983e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff fc6f 	bl	8009124 <HAL_I2C_MasterRxCpltCallback>
}
 8009846:	e012      	b.n	800986e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	691a      	ldr	r2, [r3, #16]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009864:	b29b      	uxth	r3, r3
 8009866:	3b01      	subs	r3, #1
 8009868:	b29a      	uxth	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b40      	cmp	r3, #64	@ 0x40
 8009888:	d117      	bne.n	80098ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800988e:	2b00      	cmp	r3, #0
 8009890:	d109      	bne.n	80098a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009896:	b2db      	uxtb	r3, r3
 8009898:	461a      	mov	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80098a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80098a4:	e067      	b.n	8009976 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	f043 0301 	orr.w	r3, r3, #1
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	611a      	str	r2, [r3, #16]
}
 80098b8:	e05d      	b.n	8009976 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098c2:	d133      	bne.n	800992c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b21      	cmp	r3, #33	@ 0x21
 80098ce:	d109      	bne.n	80098e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80098e0:	611a      	str	r2, [r3, #16]
 80098e2:	e008      	b.n	80098f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f043 0301 	orr.w	r3, r3, #1
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <I2C_Master_SB+0x92>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d108      	bne.n	800991a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d032      	beq.n	8009976 <I2C_Master_SB+0x100>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d02d      	beq.n	8009976 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009928:	605a      	str	r2, [r3, #4]
}
 800992a:	e024      	b.n	8009976 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10e      	bne.n	8009952 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009938:	b29b      	uxth	r3, r3
 800993a:	11db      	asrs	r3, r3, #7
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f003 0306 	and.w	r3, r3, #6
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f063 030f 	orn	r3, r3, #15
 8009948:	b2da      	uxtb	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	611a      	str	r2, [r3, #16]
}
 8009950:	e011      	b.n	8009976 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009956:	2b01      	cmp	r3, #1
 8009958:	d10d      	bne.n	8009976 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800995e:	b29b      	uxth	r3, r3
 8009960:	11db      	asrs	r3, r3, #7
 8009962:	b2db      	uxtb	r3, r3
 8009964:	f003 0306 	and.w	r3, r3, #6
 8009968:	b2db      	uxtb	r3, r3
 800996a:	f063 030e 	orn	r3, r3, #14
 800996e:	b2da      	uxtb	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	611a      	str	r2, [r3, #16]
}
 8009976:	bf00      	nop
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800998e:	b2da      	uxtb	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800999a:	2b00      	cmp	r3, #0
 800999c:	d004      	beq.n	80099a8 <I2C_Master_ADD10+0x26>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d108      	bne.n	80099ba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00c      	beq.n	80099ca <I2C_Master_ADD10+0x48>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d007      	beq.n	80099ca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099c8:	605a      	str	r2, [r3, #4]
  }
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b091      	sub	sp, #68	@ 0x44
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b22      	cmp	r3, #34	@ 0x22
 80099fe:	f040 8169 	bne.w	8009cd4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10f      	bne.n	8009a2a <I2C_Master_ADDR+0x54>
 8009a0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a0e:	2b40      	cmp	r3, #64	@ 0x40
 8009a10:	d10b      	bne.n	8009a2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a12:	2300      	movs	r3, #0
 8009a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	e160      	b.n	8009cec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d11d      	bne.n	8009a6e <I2C_Master_ADDR+0x98>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a3a:	d118      	bne.n	8009a6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a6c:	e13e      	b.n	8009cec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d113      	bne.n	8009aa0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e115      	b.n	8009ccc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	f040 808a 	bne.w	8009bc0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009ab2:	d137      	bne.n	8009b24 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ac2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ad2:	d113      	bne.n	8009afc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ae2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afa:	e0e7      	b.n	8009ccc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009afc:	2300      	movs	r3, #0
 8009afe:	623b      	str	r3, [r7, #32]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	623b      	str	r3, [r7, #32]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	623b      	str	r3, [r7, #32]
 8009b10:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	e0d3      	b.n	8009ccc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	d02e      	beq.n	8009b88 <I2C_Master_ADDR+0x1b2>
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	d02b      	beq.n	8009b88 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b32:	2b12      	cmp	r3, #18
 8009b34:	d102      	bne.n	8009b3c <I2C_Master_ADDR+0x166>
 8009b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d125      	bne.n	8009b88 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d00e      	beq.n	8009b60 <I2C_Master_ADDR+0x18a>
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d00b      	beq.n	8009b60 <I2C_Master_ADDR+0x18a>
 8009b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4a:	2b10      	cmp	r3, #16
 8009b4c:	d008      	beq.n	8009b60 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e007      	b.n	8009b70 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009b6e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b70:	2300      	movs	r3, #0
 8009b72:	61fb      	str	r3, [r7, #28]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	61fb      	str	r3, [r7, #28]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	61fb      	str	r3, [r7, #28]
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	e0a1      	b.n	8009ccc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61bb      	str	r3, [r7, #24]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	61bb      	str	r3, [r7, #24]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	61bb      	str	r3, [r7, #24]
 8009bac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	e085      	b.n	8009ccc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d14d      	bne.n	8009c66 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d016      	beq.n	8009bfe <I2C_Master_ADDR+0x228>
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d013      	beq.n	8009bfe <I2C_Master_ADDR+0x228>
 8009bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d010      	beq.n	8009bfe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	e007      	b.n	8009c0e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c0c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c1c:	d117      	bne.n	8009c4e <I2C_Master_ADDR+0x278>
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c24:	d00b      	beq.n	8009c3e <I2C_Master_ADDR+0x268>
 8009c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d008      	beq.n	8009c3e <I2C_Master_ADDR+0x268>
 8009c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d005      	beq.n	8009c3e <I2C_Master_ADDR+0x268>
 8009c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c34:	2b10      	cmp	r3, #16
 8009c36:	d002      	beq.n	8009c3e <I2C_Master_ADDR+0x268>
 8009c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3a:	2b20      	cmp	r3, #32
 8009c3c:	d107      	bne.n	8009c4e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	617b      	str	r3, [r7, #20]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	617b      	str	r3, [r7, #20]
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	e032      	b.n	8009ccc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c74:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c84:	d117      	bne.n	8009cb6 <I2C_Master_ADDR+0x2e0>
 8009c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c8c:	d00b      	beq.n	8009ca6 <I2C_Master_ADDR+0x2d0>
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d008      	beq.n	8009ca6 <I2C_Master_ADDR+0x2d0>
 8009c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	d005      	beq.n	8009ca6 <I2C_Master_ADDR+0x2d0>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d002      	beq.n	8009ca6 <I2C_Master_ADDR+0x2d0>
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	d107      	bne.n	8009cb6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cb4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	613b      	str	r3, [r7, #16]
 8009cca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009cd2:	e00b      	b.n	8009cec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
}
 8009cea:	e7ff      	b.n	8009cec <I2C_Master_ADDR+0x316>
 8009cec:	bf00      	nop
 8009cee:	3744      	adds	r7, #68	@ 0x44
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d02b      	beq.n	8009d6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d16:	781a      	ldrb	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d114      	bne.n	8009d6a <I2C_SlaveTransmit_TXE+0x72>
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b29      	cmp	r3, #41	@ 0x29
 8009d44:	d111      	bne.n	8009d6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2221      	movs	r2, #33	@ 0x21
 8009d5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2228      	movs	r2, #40	@ 0x28
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff f9e7 	bl	8009138 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d011      	beq.n	8009da8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d88:	781a      	ldrb	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	3b01      	subs	r3, #1
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d02c      	beq.n	8009e28 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	691a      	ldr	r2, [r3, #16]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd8:	b2d2      	uxtb	r2, r2
 8009dda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de0:	1c5a      	adds	r2, r3, #1
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d114      	bne.n	8009e28 <I2C_SlaveReceive_RXNE+0x74>
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e02:	d111      	bne.n	8009e28 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2222      	movs	r2, #34	@ 0x22
 8009e18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2228      	movs	r2, #40	@ 0x28
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff f992 	bl	800914c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009e28:	bf00      	nop
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d012      	beq.n	8009e68 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4c:	b2d2      	uxtb	r2, r2
 8009e4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009e8e:	2b28      	cmp	r3, #40	@ 0x28
 8009e90:	d127      	bne.n	8009ee2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ea0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	089b      	lsrs	r3, r3, #2
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	09db      	lsrs	r3, r3, #7
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d103      	bne.n	8009ec6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	81bb      	strh	r3, [r7, #12]
 8009ec4:	e002      	b.n	8009ecc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009ed4:	89ba      	ldrh	r2, [r7, #12]
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff f940 	bl	8009160 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009ee0:	e00e      	b.n	8009f00 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60bb      	str	r3, [r7, #8]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	60bb      	str	r3, [r7, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	60bb      	str	r3, [r7, #8]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009f00:	bf00      	nop
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f16:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009f26:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60bb      	str	r3, [r7, #8]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	60bb      	str	r3, [r7, #8]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0201 	orr.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f54:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f64:	d172      	bne.n	800a04c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b22      	cmp	r3, #34	@ 0x22
 8009f6a:	d002      	beq.n	8009f72 <I2C_Slave_STOPF+0x6a>
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f70:	d135      	bne.n	8009fde <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d005      	beq.n	8009f96 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8e:	f043 0204 	orr.w	r2, r3, #4
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fa4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fd ffa6 	bl	8007efc <HAL_DMA_GetState>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d049      	beq.n	800a04a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fba:	4a69      	ldr	r2, [pc, #420]	@ (800a160 <I2C_Slave_STOPF+0x258>)
 8009fbc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fd fdee 	bl	8007ba4 <HAL_DMA_Abort_IT>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d03d      	beq.n	800a04a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fdc:	e035      	b.n	800a04a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffa:	f043 0204 	orr.w	r2, r3, #4
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a010:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a016:	4618      	mov	r0, r3
 800a018:	f7fd ff70 	bl	8007efc <HAL_DMA_GetState>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d014      	beq.n	800a04c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a026:	4a4e      	ldr	r2, [pc, #312]	@ (800a160 <I2C_Slave_STOPF+0x258>)
 800a028:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fd fdb8 	bl	8007ba4 <HAL_DMA_Abort_IT>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d008      	beq.n	800a04c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	e000      	b.n	800a04c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a04a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a050:	b29b      	uxth	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d03e      	beq.n	800a0d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	695b      	ldr	r3, [r3, #20]
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b04      	cmp	r3, #4
 800a062:	d112      	bne.n	800a08a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06e:	b2d2      	uxtb	r2, r2
 800a070:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a076:	1c5a      	adds	r2, r3, #1
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a080:	b29b      	uxth	r3, r3
 800a082:	3b01      	subs	r3, #1
 800a084:	b29a      	uxth	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a094:	2b40      	cmp	r3, #64	@ 0x40
 800a096:	d112      	bne.n	800a0be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a2:	b2d2      	uxtb	r2, r2
 800a0a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d005      	beq.n	800a0d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0cc:	f043 0204 	orr.w	r2, r3, #4
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f8b3 	bl	800a248 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a0e2:	e039      	b.n	800a158 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0e8:	d109      	bne.n	800a0fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2228      	movs	r2, #40	@ 0x28
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff f827 	bl	800914c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b28      	cmp	r3, #40	@ 0x28
 800a108:	d111      	bne.n	800a12e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a15      	ldr	r2, [pc, #84]	@ (800a164 <I2C_Slave_STOPF+0x25c>)
 800a10e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2220      	movs	r2, #32
 800a11a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7ff f828 	bl	800917c <HAL_I2C_ListenCpltCallback>
}
 800a12c:	e014      	b.n	800a158 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a132:	2b22      	cmp	r3, #34	@ 0x22
 800a134:	d002      	beq.n	800a13c <I2C_Slave_STOPF+0x234>
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b22      	cmp	r3, #34	@ 0x22
 800a13a:	d10d      	bne.n	800a158 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7fe fffa 	bl	800914c <HAL_I2C_SlaveRxCpltCallback>
}
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	0800a7a9 	.word	0x0800a7a9
 800a164:	ffff0000 	.word	0xffff0000

0800a168 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a176:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b08      	cmp	r3, #8
 800a182:	d002      	beq.n	800a18a <I2C_Slave_AF+0x22>
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b20      	cmp	r3, #32
 800a188:	d129      	bne.n	800a1de <I2C_Slave_AF+0x76>
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	2b28      	cmp	r3, #40	@ 0x28
 800a18e:	d126      	bne.n	800a1de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a2c      	ldr	r2, [pc, #176]	@ (800a244 <I2C_Slave_AF+0xdc>)
 800a194:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a1a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a1ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7fe ffd0 	bl	800917c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a1dc:	e02e      	b.n	800a23c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	2b21      	cmp	r3, #33	@ 0x21
 800a1e2:	d126      	bne.n	800a232 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a17      	ldr	r2, [pc, #92]	@ (800a244 <I2C_Slave_AF+0xdc>)
 800a1e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2221      	movs	r2, #33	@ 0x21
 800a1ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2220      	movs	r2, #32
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a20e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a218:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a228:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7fe ff84 	bl	8009138 <HAL_I2C_SlaveTxCpltCallback>
}
 800a230:	e004      	b.n	800a23c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a23a:	615a      	str	r2, [r3, #20]
}
 800a23c:	bf00      	nop
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	ffff0000 	.word	0xffff0000

0800a248 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a256:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a25e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a260:	7bbb      	ldrb	r3, [r7, #14]
 800a262:	2b10      	cmp	r3, #16
 800a264:	d002      	beq.n	800a26c <I2C_ITError+0x24>
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	2b40      	cmp	r3, #64	@ 0x40
 800a26a:	d10a      	bne.n	800a282 <I2C_ITError+0x3a>
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
 800a26e:	2b22      	cmp	r3, #34	@ 0x22
 800a270:	d107      	bne.n	800a282 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a280:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a288:	2b28      	cmp	r3, #40	@ 0x28
 800a28a:	d107      	bne.n	800a29c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2228      	movs	r2, #40	@ 0x28
 800a296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a29a:	e015      	b.n	800a2c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2aa:	d00a      	beq.n	800a2c2 <I2C_ITError+0x7a>
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	2b60      	cmp	r3, #96	@ 0x60
 800a2b0:	d007      	beq.n	800a2c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2d6:	d162      	bne.n	800a39e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a2e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d020      	beq.n	800a338 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2fa:	4a6a      	ldr	r2, [pc, #424]	@ (800a4a4 <I2C_ITError+0x25c>)
 800a2fc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd fc4e 	bl	8007ba4 <HAL_DMA_Abort_IT>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 8089 	beq.w	800a422 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 0201 	bic.w	r2, r2, #1
 800a31e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a32c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a332:	4610      	mov	r0, r2
 800a334:	4798      	blx	r3
 800a336:	e074      	b.n	800a422 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a33c:	4a59      	ldr	r2, [pc, #356]	@ (800a4a4 <I2C_ITError+0x25c>)
 800a33e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a344:	4618      	mov	r0, r3
 800a346:	f7fd fc2d 	bl	8007ba4 <HAL_DMA_Abort_IT>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d068      	beq.n	800a422 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a35a:	2b40      	cmp	r3, #64	@ 0x40
 800a35c:	d10b      	bne.n	800a376 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	691a      	ldr	r2, [r3, #16]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a368:	b2d2      	uxtb	r2, r2
 800a36a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f022 0201 	bic.w	r2, r2, #1
 800a384:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2220      	movs	r2, #32
 800a38a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a398:	4610      	mov	r0, r2
 800a39a:	4798      	blx	r3
 800a39c:	e041      	b.n	800a422 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b60      	cmp	r3, #96	@ 0x60
 800a3a8:	d125      	bne.n	800a3f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c2:	2b40      	cmp	r3, #64	@ 0x40
 800a3c4:	d10b      	bne.n	800a3de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	691a      	ldr	r2, [r3, #16]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d0:	b2d2      	uxtb	r2, r2
 800a3d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f022 0201 	bic.w	r2, r2, #1
 800a3ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7fe feec 	bl	80091cc <HAL_I2C_AbortCpltCallback>
 800a3f4:	e015      	b.n	800a422 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a400:	2b40      	cmp	r3, #64	@ 0x40
 800a402:	d10b      	bne.n	800a41c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691a      	ldr	r2, [r3, #16]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7fe fecb 	bl	80091b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a426:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10e      	bne.n	800a450 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d109      	bne.n	800a450 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a442:	2b00      	cmp	r3, #0
 800a444:	d104      	bne.n	800a450 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d007      	beq.n	800a460 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a45e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a466:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b04      	cmp	r3, #4
 800a472:	d113      	bne.n	800a49c <I2C_ITError+0x254>
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	2b28      	cmp	r3, #40	@ 0x28
 800a478:	d110      	bne.n	800a49c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a8 <I2C_ITError+0x260>)
 800a47e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2220      	movs	r2, #32
 800a48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fe fe70 	bl	800917c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a49c:	bf00      	nop
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	0800a7a9 	.word	0x0800a7a9
 800a4a8:	ffff0000 	.word	0xffff0000

0800a4ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	817b      	strh	r3, [r7, #10]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	813b      	strh	r3, [r7, #8]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 fa08 	bl	800a8f8 <I2C_WaitOnFlagUntilTimeout>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00d      	beq.n	800a50a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4fc:	d103      	bne.n	800a506 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a504:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e05f      	b.n	800a5ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a50a:	897b      	ldrh	r3, [r7, #10]
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	461a      	mov	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a518:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51c:	6a3a      	ldr	r2, [r7, #32]
 800a51e:	492d      	ldr	r1, [pc, #180]	@ (800a5d4 <I2C_RequestMemoryWrite+0x128>)
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 fa40 	bl	800a9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e04c      	b.n	800a5ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a548:	6a39      	ldr	r1, [r7, #32]
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f000 faaa 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00d      	beq.n	800a572 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d107      	bne.n	800a56e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a56c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e02b      	b.n	800a5ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a572:	88fb      	ldrh	r3, [r7, #6]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d105      	bne.n	800a584 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a578:	893b      	ldrh	r3, [r7, #8]
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	611a      	str	r2, [r3, #16]
 800a582:	e021      	b.n	800a5c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a584:	893b      	ldrh	r3, [r7, #8]
 800a586:	0a1b      	lsrs	r3, r3, #8
 800a588:	b29b      	uxth	r3, r3
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a594:	6a39      	ldr	r1, [r7, #32]
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 fa84 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00d      	beq.n	800a5be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a6:	2b04      	cmp	r3, #4
 800a5a8:	d107      	bne.n	800a5ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e005      	b.n	800a5ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5be:	893b      	ldrh	r3, [r7, #8]
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	00010002 	.word	0x00010002

0800a5d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af02      	add	r7, sp, #8
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	817b      	strh	r3, [r7, #10]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	813b      	strh	r3, [r7, #8]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a600:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a610:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	2200      	movs	r2, #0
 800a61a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 f96a 	bl	800a8f8 <I2C_WaitOnFlagUntilTimeout>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00d      	beq.n	800a646 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a638:	d103      	bne.n	800a642 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a640:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e0aa      	b.n	800a79c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a646:	897b      	ldrh	r3, [r7, #10]
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	461a      	mov	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a654:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a658:	6a3a      	ldr	r2, [r7, #32]
 800a65a:	4952      	ldr	r1, [pc, #328]	@ (800a7a4 <I2C_RequestMemoryRead+0x1cc>)
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 f9a2 	bl	800a9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e097      	b.n	800a79c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	617b      	str	r3, [r7, #20]
 800a680:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a684:	6a39      	ldr	r1, [r7, #32]
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f000 fa0c 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00d      	beq.n	800a6ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a696:	2b04      	cmp	r3, #4
 800a698:	d107      	bne.n	800a6aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e076      	b.n	800a79c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6ae:	88fb      	ldrh	r3, [r7, #6]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d105      	bne.n	800a6c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6b4:	893b      	ldrh	r3, [r7, #8]
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	611a      	str	r2, [r3, #16]
 800a6be:	e021      	b.n	800a704 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a6c0:	893b      	ldrh	r3, [r7, #8]
 800a6c2:	0a1b      	lsrs	r3, r3, #8
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6d0:	6a39      	ldr	r1, [r7, #32]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f9e6 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00d      	beq.n	800a6fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d107      	bne.n	800a6f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e050      	b.n	800a79c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6fa:	893b      	ldrh	r3, [r7, #8]
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a706:	6a39      	ldr	r1, [r7, #32]
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 f9cb 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00d      	beq.n	800a730 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d107      	bne.n	800a72c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a72a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e035      	b.n	800a79c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a73e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	2200      	movs	r2, #0
 800a748:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f8d3 	bl	800a8f8 <I2C_WaitOnFlagUntilTimeout>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00d      	beq.n	800a774 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a766:	d103      	bne.n	800a770 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a76e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e013      	b.n	800a79c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a774:	897b      	ldrh	r3, [r7, #10]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	f043 0301 	orr.w	r3, r3, #1
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	6a3a      	ldr	r2, [r7, #32]
 800a788:	4906      	ldr	r1, [pc, #24]	@ (800a7a4 <I2C_RequestMemoryRead+0x1cc>)
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f90b 	bl	800a9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e000      	b.n	800a79c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	00010002 	.word	0x00010002

0800a7a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a7c2:	4b4b      	ldr	r3, [pc, #300]	@ (800a8f0 <I2C_DMAAbort+0x148>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	08db      	lsrs	r3, r3, #3
 800a7c8:	4a4a      	ldr	r2, [pc, #296]	@ (800a8f4 <I2C_DMAAbort+0x14c>)
 800a7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ce:	0a1a      	lsrs	r2, r3, #8
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	00da      	lsls	r2, r3, #3
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e6:	f043 0220 	orr.w	r2, r3, #32
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a7ee:	e00a      	b.n	800a806 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a804:	d0ea      	beq.n	800a7dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a812:	2200      	movs	r2, #0
 800a814:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a822:	2200      	movs	r2, #0
 800a824:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a834:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2200      	movs	r2, #0
 800a83a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a840:	2b00      	cmp	r3, #0
 800a842:	d003      	beq.n	800a84c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a848:	2200      	movs	r2, #0
 800a84a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a858:	2200      	movs	r2, #0
 800a85a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 0201 	bic.w	r2, r2, #1
 800a86a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b60      	cmp	r3, #96	@ 0x60
 800a876:	d10e      	bne.n	800a896 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	2200      	movs	r2, #0
 800a88c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a88e:	6978      	ldr	r0, [r7, #20]
 800a890:	f7fe fc9c 	bl	80091cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a894:	e027      	b.n	800a8e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a896:	7cfb      	ldrb	r3, [r7, #19]
 800a898:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a89c:	2b28      	cmp	r3, #40	@ 0x28
 800a89e:	d117      	bne.n	800a8d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f042 0201 	orr.w	r2, r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a8be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2228      	movs	r2, #40	@ 0x28
 800a8ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a8ce:	e007      	b.n	800a8e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a8e0:	6978      	ldr	r0, [r7, #20]
 800a8e2:	f7fe fc69 	bl	80091b8 <HAL_I2C_ErrorCallback>
}
 800a8e6:	bf00      	nop
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000154 	.word	0x20000154
 800a8f4:	14f8b589 	.word	0x14f8b589

0800a8f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	4613      	mov	r3, r2
 800a906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a908:	e025      	b.n	800a956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a910:	d021      	beq.n	800a956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a912:	f7fc ff57 	bl	80077c4 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d302      	bcc.n	800a928 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d116      	bne.n	800a956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2220      	movs	r2, #32
 800a932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a942:	f043 0220 	orr.w	r2, r3, #32
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e023      	b.n	800a99e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	0c1b      	lsrs	r3, r3, #16
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10d      	bne.n	800a97c <I2C_WaitOnFlagUntilTimeout+0x84>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	695b      	ldr	r3, [r3, #20]
 800a966:	43da      	mvns	r2, r3
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	4013      	ands	r3, r2
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bf0c      	ite	eq
 800a972:	2301      	moveq	r3, #1
 800a974:	2300      	movne	r3, #0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	e00c      	b.n	800a996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	43da      	mvns	r2, r3
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	4013      	ands	r3, r2
 800a988:	b29b      	uxth	r3, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bf0c      	ite	eq
 800a98e:	2301      	moveq	r3, #1
 800a990:	2300      	movne	r3, #0
 800a992:	b2db      	uxtb	r3, r3
 800a994:	461a      	mov	r2, r3
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d0b6      	beq.n	800a90a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	60f8      	str	r0, [r7, #12]
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	607a      	str	r2, [r7, #4]
 800a9b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a9b4:	e051      	b.n	800aa5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9c4:	d123      	bne.n	800aa0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a9de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2220      	movs	r2, #32
 800a9ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9fa:	f043 0204 	orr.w	r2, r3, #4
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e046      	b.n	800aa9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa14:	d021      	beq.n	800aa5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa16:	f7fc fed5 	bl	80077c4 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d302      	bcc.n	800aa2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d116      	bne.n	800aa5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa46:	f043 0220 	orr.w	r2, r3, #32
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e020      	b.n	800aa9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	0c1b      	lsrs	r3, r3, #16
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d10c      	bne.n	800aa7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	43da      	mvns	r2, r3
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	4013      	ands	r3, r2
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bf14      	ite	ne
 800aa76:	2301      	movne	r3, #1
 800aa78:	2300      	moveq	r3, #0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	e00b      	b.n	800aa96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	43da      	mvns	r2, r3
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf14      	ite	ne
 800aa90:	2301      	movne	r3, #1
 800aa92:	2300      	moveq	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d18d      	bne.n	800a9b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aab0:	e02d      	b.n	800ab0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f000 f900 	bl	800acb8 <I2C_IsAcknowledgeFailed>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e02d      	b.n	800ab1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d021      	beq.n	800ab0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaca:	f7fc fe7b 	bl	80077c4 <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d302      	bcc.n	800aae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d116      	bne.n	800ab0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafa:	f043 0220 	orr.w	r2, r3, #32
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e007      	b.n	800ab1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab18:	2b80      	cmp	r3, #128	@ 0x80
 800ab1a:	d1ca      	bne.n	800aab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	60b9      	str	r1, [r7, #8]
 800ab30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab32:	e02d      	b.n	800ab90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 f8bf 	bl	800acb8 <I2C_IsAcknowledgeFailed>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e02d      	b.n	800aba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4a:	d021      	beq.n	800ab90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab4c:	f7fc fe3a 	bl	80077c4 <HAL_GetTick>
 800ab50:	4602      	mov	r2, r0
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d302      	bcc.n	800ab62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d116      	bne.n	800ab90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab7c:	f043 0220 	orr.w	r2, r3, #32
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e007      	b.n	800aba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	f003 0304 	and.w	r3, r3, #4
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	d1ca      	bne.n	800ab34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800abb4:	4b13      	ldr	r3, [pc, #76]	@ (800ac04 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	08db      	lsrs	r3, r3, #3
 800abba:	4a13      	ldr	r2, [pc, #76]	@ (800ac08 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800abbc:	fba2 2303 	umull	r2, r3, r2, r3
 800abc0:	0a1a      	lsrs	r2, r3, #8
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3b01      	subs	r3, #1
 800abce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d107      	bne.n	800abe6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abda:	f043 0220 	orr.w	r2, r3, #32
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e008      	b.n	800abf8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800abf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abf4:	d0e9      	beq.n	800abca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	20000154 	.word	0x20000154
 800ac08:	14f8b589 	.word	0x14f8b589

0800ac0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac18:	e042      	b.n	800aca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	f003 0310 	and.w	r3, r3, #16
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	d119      	bne.n	800ac5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f06f 0210 	mvn.w	r2, #16
 800ac30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2220      	movs	r2, #32
 800ac3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e029      	b.n	800acb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac5c:	f7fc fdb2 	bl	80077c4 <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d302      	bcc.n	800ac72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d116      	bne.n	800aca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2220      	movs	r2, #32
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8c:	f043 0220 	orr.w	r2, r3, #32
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e007      	b.n	800acb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acaa:	2b40      	cmp	r3, #64	@ 0x40
 800acac:	d1b5      	bne.n	800ac1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acce:	d11b      	bne.n	800ad08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800acd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2220      	movs	r2, #32
 800ace4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf4:	f043 0204 	orr.w	r2, r3, #4
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e000      	b.n	800ad0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ad16:	b480      	push	{r7}
 800ad18:	b083      	sub	sp, #12
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad22:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800ad26:	d103      	bne.n	800ad30 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ad2e:	e007      	b.n	800ad40 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad34:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800ad38:	d102      	bne.n	800ad40 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2208      	movs	r2, #8
 800ad3e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e267      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d075      	beq.n	800ae56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ad6a:	4b88      	ldr	r3, [pc, #544]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f003 030c 	and.w	r3, r3, #12
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	d00c      	beq.n	800ad90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad76:	4b85      	ldr	r3, [pc, #532]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ad7e:	2b08      	cmp	r3, #8
 800ad80:	d112      	bne.n	800ada8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad82:	4b82      	ldr	r3, [pc, #520]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad8e:	d10b      	bne.n	800ada8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad90:	4b7e      	ldr	r3, [pc, #504]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d05b      	beq.n	800ae54 <HAL_RCC_OscConfig+0x108>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d157      	bne.n	800ae54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e242      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adb0:	d106      	bne.n	800adc0 <HAL_RCC_OscConfig+0x74>
 800adb2:	4b76      	ldr	r3, [pc, #472]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a75      	ldr	r2, [pc, #468]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800adb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	e01d      	b.n	800adfc <HAL_RCC_OscConfig+0xb0>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800adc8:	d10c      	bne.n	800ade4 <HAL_RCC_OscConfig+0x98>
 800adca:	4b70      	ldr	r3, [pc, #448]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a6f      	ldr	r2, [pc, #444]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800add0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	4b6d      	ldr	r3, [pc, #436]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a6c      	ldr	r2, [pc, #432]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800addc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	e00b      	b.n	800adfc <HAL_RCC_OscConfig+0xb0>
 800ade4:	4b69      	ldr	r3, [pc, #420]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a68      	ldr	r2, [pc, #416]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800adea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	4b66      	ldr	r3, [pc, #408]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a65      	ldr	r2, [pc, #404]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800adf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800adfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d013      	beq.n	800ae2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae04:	f7fc fcde 	bl	80077c4 <HAL_GetTick>
 800ae08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae0a:	e008      	b.n	800ae1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae0c:	f7fc fcda 	bl	80077c4 <HAL_GetTick>
 800ae10:	4602      	mov	r2, r0
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	2b64      	cmp	r3, #100	@ 0x64
 800ae18:	d901      	bls.n	800ae1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e207      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae1e:	4b5b      	ldr	r3, [pc, #364]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d0f0      	beq.n	800ae0c <HAL_RCC_OscConfig+0xc0>
 800ae2a:	e014      	b.n	800ae56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae2c:	f7fc fcca 	bl	80077c4 <HAL_GetTick>
 800ae30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae34:	f7fc fcc6 	bl	80077c4 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b64      	cmp	r3, #100	@ 0x64
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e1f3      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae46:	4b51      	ldr	r3, [pc, #324]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f0      	bne.n	800ae34 <HAL_RCC_OscConfig+0xe8>
 800ae52:	e000      	b.n	800ae56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d063      	beq.n	800af2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ae62:	4b4a      	ldr	r3, [pc, #296]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f003 030c 	and.w	r3, r3, #12
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00b      	beq.n	800ae86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae6e:	4b47      	ldr	r3, [pc, #284]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ae76:	2b08      	cmp	r3, #8
 800ae78:	d11c      	bne.n	800aeb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae7a:	4b44      	ldr	r3, [pc, #272]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d116      	bne.n	800aeb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae86:	4b41      	ldr	r3, [pc, #260]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <HAL_RCC_OscConfig+0x152>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d001      	beq.n	800ae9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e1c7      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae9e:	4b3b      	ldr	r3, [pc, #236]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	4937      	ldr	r1, [pc, #220]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aeb2:	e03a      	b.n	800af2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d020      	beq.n	800aefe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aebc:	4b34      	ldr	r3, [pc, #208]	@ (800af90 <HAL_RCC_OscConfig+0x244>)
 800aebe:	2201      	movs	r2, #1
 800aec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aec2:	f7fc fc7f 	bl	80077c4 <HAL_GetTick>
 800aec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aec8:	e008      	b.n	800aedc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aeca:	f7fc fc7b 	bl	80077c4 <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d901      	bls.n	800aedc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e1a8      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aedc:	4b2b      	ldr	r3, [pc, #172]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0302 	and.w	r3, r3, #2
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0f0      	beq.n	800aeca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aee8:	4b28      	ldr	r3, [pc, #160]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	4925      	ldr	r1, [pc, #148]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	600b      	str	r3, [r1, #0]
 800aefc:	e015      	b.n	800af2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aefe:	4b24      	ldr	r3, [pc, #144]	@ (800af90 <HAL_RCC_OscConfig+0x244>)
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af04:	f7fc fc5e 	bl	80077c4 <HAL_GetTick>
 800af08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af0a:	e008      	b.n	800af1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af0c:	f7fc fc5a 	bl	80077c4 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b02      	cmp	r3, #2
 800af18:	d901      	bls.n	800af1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e187      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af1e:	4b1b      	ldr	r3, [pc, #108]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1f0      	bne.n	800af0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0308 	and.w	r3, r3, #8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d036      	beq.n	800afa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d016      	beq.n	800af6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af3e:	4b15      	ldr	r3, [pc, #84]	@ (800af94 <HAL_RCC_OscConfig+0x248>)
 800af40:	2201      	movs	r2, #1
 800af42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af44:	f7fc fc3e 	bl	80077c4 <HAL_GetTick>
 800af48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af4a:	e008      	b.n	800af5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af4c:	f7fc fc3a 	bl	80077c4 <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	2b02      	cmp	r3, #2
 800af58:	d901      	bls.n	800af5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e167      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af5e:	4b0b      	ldr	r3, [pc, #44]	@ (800af8c <HAL_RCC_OscConfig+0x240>)
 800af60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0f0      	beq.n	800af4c <HAL_RCC_OscConfig+0x200>
 800af6a:	e01b      	b.n	800afa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af6c:	4b09      	ldr	r3, [pc, #36]	@ (800af94 <HAL_RCC_OscConfig+0x248>)
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af72:	f7fc fc27 	bl	80077c4 <HAL_GetTick>
 800af76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af78:	e00e      	b.n	800af98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af7a:	f7fc fc23 	bl	80077c4 <HAL_GetTick>
 800af7e:	4602      	mov	r2, r0
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	2b02      	cmp	r3, #2
 800af86:	d907      	bls.n	800af98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800af88:	2303      	movs	r3, #3
 800af8a:	e150      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
 800af8c:	40023800 	.word	0x40023800
 800af90:	42470000 	.word	0x42470000
 800af94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af98:	4b88      	ldr	r3, [pc, #544]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800af9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1ea      	bne.n	800af7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0304 	and.w	r3, r3, #4
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 8097 	beq.w	800b0e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afb2:	2300      	movs	r3, #0
 800afb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afb6:	4b81      	ldr	r3, [pc, #516]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10f      	bne.n	800afe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afc2:	2300      	movs	r3, #0
 800afc4:	60bb      	str	r3, [r7, #8]
 800afc6:	4b7d      	ldr	r3, [pc, #500]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800afc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afca:	4a7c      	ldr	r2, [pc, #496]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800afcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afd0:	6413      	str	r3, [r2, #64]	@ 0x40
 800afd2:	4b7a      	ldr	r3, [pc, #488]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800afd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afda:	60bb      	str	r3, [r7, #8]
 800afdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800afde:	2301      	movs	r3, #1
 800afe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afe2:	4b77      	ldr	r3, [pc, #476]	@ (800b1c0 <HAL_RCC_OscConfig+0x474>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afea:	2b00      	cmp	r3, #0
 800afec:	d118      	bne.n	800b020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800afee:	4b74      	ldr	r3, [pc, #464]	@ (800b1c0 <HAL_RCC_OscConfig+0x474>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a73      	ldr	r2, [pc, #460]	@ (800b1c0 <HAL_RCC_OscConfig+0x474>)
 800aff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800affa:	f7fc fbe3 	bl	80077c4 <HAL_GetTick>
 800affe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b000:	e008      	b.n	800b014 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b002:	f7fc fbdf 	bl	80077c4 <HAL_GetTick>
 800b006:	4602      	mov	r2, r0
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d901      	bls.n	800b014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	e10c      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b014:	4b6a      	ldr	r3, [pc, #424]	@ (800b1c0 <HAL_RCC_OscConfig+0x474>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0f0      	beq.n	800b002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d106      	bne.n	800b036 <HAL_RCC_OscConfig+0x2ea>
 800b028:	4b64      	ldr	r3, [pc, #400]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b02c:	4a63      	ldr	r2, [pc, #396]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b02e:	f043 0301 	orr.w	r3, r3, #1
 800b032:	6713      	str	r3, [r2, #112]	@ 0x70
 800b034:	e01c      	b.n	800b070 <HAL_RCC_OscConfig+0x324>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	2b05      	cmp	r3, #5
 800b03c:	d10c      	bne.n	800b058 <HAL_RCC_OscConfig+0x30c>
 800b03e:	4b5f      	ldr	r3, [pc, #380]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b042:	4a5e      	ldr	r2, [pc, #376]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b044:	f043 0304 	orr.w	r3, r3, #4
 800b048:	6713      	str	r3, [r2, #112]	@ 0x70
 800b04a:	4b5c      	ldr	r3, [pc, #368]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b04c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b04e:	4a5b      	ldr	r2, [pc, #364]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b050:	f043 0301 	orr.w	r3, r3, #1
 800b054:	6713      	str	r3, [r2, #112]	@ 0x70
 800b056:	e00b      	b.n	800b070 <HAL_RCC_OscConfig+0x324>
 800b058:	4b58      	ldr	r3, [pc, #352]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b05a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b05c:	4a57      	ldr	r2, [pc, #348]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b05e:	f023 0301 	bic.w	r3, r3, #1
 800b062:	6713      	str	r3, [r2, #112]	@ 0x70
 800b064:	4b55      	ldr	r3, [pc, #340]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b068:	4a54      	ldr	r2, [pc, #336]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b06a:	f023 0304 	bic.w	r3, r3, #4
 800b06e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d015      	beq.n	800b0a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b078:	f7fc fba4 	bl	80077c4 <HAL_GetTick>
 800b07c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b07e:	e00a      	b.n	800b096 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b080:	f7fc fba0 	bl	80077c4 <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b08e:	4293      	cmp	r3, r2
 800b090:	d901      	bls.n	800b096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b092:	2303      	movs	r3, #3
 800b094:	e0cb      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b096:	4b49      	ldr	r3, [pc, #292]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0ee      	beq.n	800b080 <HAL_RCC_OscConfig+0x334>
 800b0a2:	e014      	b.n	800b0ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0a4:	f7fc fb8e 	bl	80077c4 <HAL_GetTick>
 800b0a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0aa:	e00a      	b.n	800b0c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0ac:	f7fc fb8a 	bl	80077c4 <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d901      	bls.n	800b0c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e0b5      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0c2:	4b3e      	ldr	r3, [pc, #248]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b0c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0c6:	f003 0302 	and.w	r3, r3, #2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1ee      	bne.n	800b0ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d105      	bne.n	800b0e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0d4:	4b39      	ldr	r3, [pc, #228]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d8:	4a38      	ldr	r2, [pc, #224]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b0da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 80a1 	beq.w	800b22c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b0ea:	4b34      	ldr	r3, [pc, #208]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	f003 030c 	and.w	r3, r3, #12
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	d05c      	beq.n	800b1b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d141      	bne.n	800b182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0fe:	4b31      	ldr	r3, [pc, #196]	@ (800b1c4 <HAL_RCC_OscConfig+0x478>)
 800b100:	2200      	movs	r2, #0
 800b102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b104:	f7fc fb5e 	bl	80077c4 <HAL_GetTick>
 800b108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b10a:	e008      	b.n	800b11e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b10c:	f7fc fb5a 	bl	80077c4 <HAL_GetTick>
 800b110:	4602      	mov	r2, r0
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	2b02      	cmp	r3, #2
 800b118:	d901      	bls.n	800b11e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e087      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b11e:	4b27      	ldr	r3, [pc, #156]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1f0      	bne.n	800b10c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	69da      	ldr	r2, [r3, #28]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	431a      	orrs	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b138:	019b      	lsls	r3, r3, #6
 800b13a:	431a      	orrs	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b140:	085b      	lsrs	r3, r3, #1
 800b142:	3b01      	subs	r3, #1
 800b144:	041b      	lsls	r3, r3, #16
 800b146:	431a      	orrs	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14c:	061b      	lsls	r3, r3, #24
 800b14e:	491b      	ldr	r1, [pc, #108]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b150:	4313      	orrs	r3, r2
 800b152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b154:	4b1b      	ldr	r3, [pc, #108]	@ (800b1c4 <HAL_RCC_OscConfig+0x478>)
 800b156:	2201      	movs	r2, #1
 800b158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b15a:	f7fc fb33 	bl	80077c4 <HAL_GetTick>
 800b15e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b160:	e008      	b.n	800b174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b162:	f7fc fb2f 	bl	80077c4 <HAL_GetTick>
 800b166:	4602      	mov	r2, r0
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d901      	bls.n	800b174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b170:	2303      	movs	r3, #3
 800b172:	e05c      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b174:	4b11      	ldr	r3, [pc, #68]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0f0      	beq.n	800b162 <HAL_RCC_OscConfig+0x416>
 800b180:	e054      	b.n	800b22c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b182:	4b10      	ldr	r3, [pc, #64]	@ (800b1c4 <HAL_RCC_OscConfig+0x478>)
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b188:	f7fc fb1c 	bl	80077c4 <HAL_GetTick>
 800b18c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b18e:	e008      	b.n	800b1a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b190:	f7fc fb18 	bl	80077c4 <HAL_GetTick>
 800b194:	4602      	mov	r2, r0
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d901      	bls.n	800b1a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e045      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1a2:	4b06      	ldr	r3, [pc, #24]	@ (800b1bc <HAL_RCC_OscConfig+0x470>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1f0      	bne.n	800b190 <HAL_RCC_OscConfig+0x444>
 800b1ae:	e03d      	b.n	800b22c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d107      	bne.n	800b1c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e038      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
 800b1bc:	40023800 	.word	0x40023800
 800b1c0:	40007000 	.word	0x40007000
 800b1c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b1c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b238 <HAL_RCC_OscConfig+0x4ec>)
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d028      	beq.n	800b228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d121      	bne.n	800b228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d11a      	bne.n	800b228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b1fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b200:	4293      	cmp	r3, r2
 800b202:	d111      	bne.n	800b228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20e:	085b      	lsrs	r3, r3, #1
 800b210:	3b01      	subs	r3, #1
 800b212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b214:	429a      	cmp	r2, r3
 800b216:	d107      	bne.n	800b228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b224:	429a      	cmp	r2, r3
 800b226:	d001      	beq.n	800b22c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e000      	b.n	800b22e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	40023800 	.word	0x40023800

0800b23c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e0cc      	b.n	800b3ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b250:	4b68      	ldr	r3, [pc, #416]	@ (800b3f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 0307 	and.w	r3, r3, #7
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d90c      	bls.n	800b278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b25e:	4b65      	ldr	r3, [pc, #404]	@ (800b3f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	b2d2      	uxtb	r2, r2
 800b264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b266:	4b63      	ldr	r3, [pc, #396]	@ (800b3f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0307 	and.w	r3, r3, #7
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d001      	beq.n	800b278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e0b8      	b.n	800b3ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 0302 	and.w	r3, r3, #2
 800b280:	2b00      	cmp	r3, #0
 800b282:	d020      	beq.n	800b2c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0304 	and.w	r3, r3, #4
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d005      	beq.n	800b29c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b290:	4b59      	ldr	r3, [pc, #356]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	4a58      	ldr	r2, [pc, #352]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b296:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b29a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0308 	and.w	r3, r3, #8
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b2a8:	4b53      	ldr	r3, [pc, #332]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	4a52      	ldr	r2, [pc, #328]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b2b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2b4:	4b50      	ldr	r3, [pc, #320]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	494d      	ldr	r1, [pc, #308]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d044      	beq.n	800b35c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d107      	bne.n	800b2ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2da:	4b47      	ldr	r3, [pc, #284]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d119      	bne.n	800b31a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e07f      	b.n	800b3ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d003      	beq.n	800b2fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d107      	bne.n	800b30a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2fa:	4b3f      	ldr	r3, [pc, #252]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d109      	bne.n	800b31a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e06f      	b.n	800b3ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b30a:	4b3b      	ldr	r3, [pc, #236]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0302 	and.w	r3, r3, #2
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e067      	b.n	800b3ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b31a:	4b37      	ldr	r3, [pc, #220]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	f023 0203 	bic.w	r2, r3, #3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	4934      	ldr	r1, [pc, #208]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b328:	4313      	orrs	r3, r2
 800b32a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b32c:	f7fc fa4a 	bl	80077c4 <HAL_GetTick>
 800b330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b332:	e00a      	b.n	800b34a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b334:	f7fc fa46 	bl	80077c4 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b342:	4293      	cmp	r3, r2
 800b344:	d901      	bls.n	800b34a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	e04f      	b.n	800b3ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b34a:	4b2b      	ldr	r3, [pc, #172]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	f003 020c 	and.w	r2, r3, #12
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	429a      	cmp	r2, r3
 800b35a:	d1eb      	bne.n	800b334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b35c:	4b25      	ldr	r3, [pc, #148]	@ (800b3f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0307 	and.w	r3, r3, #7
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d20c      	bcs.n	800b384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b36a:	4b22      	ldr	r3, [pc, #136]	@ (800b3f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b372:	4b20      	ldr	r3, [pc, #128]	@ (800b3f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d001      	beq.n	800b384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e032      	b.n	800b3ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d008      	beq.n	800b3a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b390:	4b19      	ldr	r3, [pc, #100]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	4916      	ldr	r1, [pc, #88]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0308 	and.w	r3, r3, #8
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d009      	beq.n	800b3c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3ae:	4b12      	ldr	r3, [pc, #72]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	490e      	ldr	r1, [pc, #56]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b3c2:	f000 f821 	bl	800b408 <HAL_RCC_GetSysClockFreq>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	091b      	lsrs	r3, r3, #4
 800b3ce:	f003 030f 	and.w	r3, r3, #15
 800b3d2:	490a      	ldr	r1, [pc, #40]	@ (800b3fc <HAL_RCC_ClockConfig+0x1c0>)
 800b3d4:	5ccb      	ldrb	r3, [r1, r3]
 800b3d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3da:	4a09      	ldr	r2, [pc, #36]	@ (800b400 <HAL_RCC_ClockConfig+0x1c4>)
 800b3dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b3de:	4b09      	ldr	r3, [pc, #36]	@ (800b404 <HAL_RCC_ClockConfig+0x1c8>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fc f9aa 	bl	800773c <HAL_InitTick>

  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	40023c00 	.word	0x40023c00
 800b3f8:	40023800 	.word	0x40023800
 800b3fc:	080366dc 	.word	0x080366dc
 800b400:	20000154 	.word	0x20000154
 800b404:	20000180 	.word	0x20000180

0800b408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b40c:	b094      	sub	sp, #80	@ 0x50
 800b40e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	647b      	str	r3, [r7, #68]	@ 0x44
 800b414:	2300      	movs	r3, #0
 800b416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b418:	2300      	movs	r3, #0
 800b41a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b41c:	2300      	movs	r3, #0
 800b41e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b420:	4b79      	ldr	r3, [pc, #484]	@ (800b608 <HAL_RCC_GetSysClockFreq+0x200>)
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f003 030c 	and.w	r3, r3, #12
 800b428:	2b08      	cmp	r3, #8
 800b42a:	d00d      	beq.n	800b448 <HAL_RCC_GetSysClockFreq+0x40>
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	f200 80e1 	bhi.w	800b5f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <HAL_RCC_GetSysClockFreq+0x34>
 800b436:	2b04      	cmp	r3, #4
 800b438:	d003      	beq.n	800b442 <HAL_RCC_GetSysClockFreq+0x3a>
 800b43a:	e0db      	b.n	800b5f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b43c:	4b73      	ldr	r3, [pc, #460]	@ (800b60c <HAL_RCC_GetSysClockFreq+0x204>)
 800b43e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800b440:	e0db      	b.n	800b5fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b442:	4b73      	ldr	r3, [pc, #460]	@ (800b610 <HAL_RCC_GetSysClockFreq+0x208>)
 800b444:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b446:	e0d8      	b.n	800b5fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b448:	4b6f      	ldr	r3, [pc, #444]	@ (800b608 <HAL_RCC_GetSysClockFreq+0x200>)
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b450:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b452:	4b6d      	ldr	r3, [pc, #436]	@ (800b608 <HAL_RCC_GetSysClockFreq+0x200>)
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d063      	beq.n	800b526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b45e:	4b6a      	ldr	r3, [pc, #424]	@ (800b608 <HAL_RCC_GetSysClockFreq+0x200>)
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	099b      	lsrs	r3, r3, #6
 800b464:	2200      	movs	r2, #0
 800b466:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b468:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b470:	633b      	str	r3, [r7, #48]	@ 0x30
 800b472:	2300      	movs	r3, #0
 800b474:	637b      	str	r3, [r7, #52]	@ 0x34
 800b476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b47a:	4622      	mov	r2, r4
 800b47c:	462b      	mov	r3, r5
 800b47e:	f04f 0000 	mov.w	r0, #0
 800b482:	f04f 0100 	mov.w	r1, #0
 800b486:	0159      	lsls	r1, r3, #5
 800b488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b48c:	0150      	lsls	r0, r2, #5
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	4621      	mov	r1, r4
 800b494:	1a51      	subs	r1, r2, r1
 800b496:	6139      	str	r1, [r7, #16]
 800b498:	4629      	mov	r1, r5
 800b49a:	eb63 0301 	sbc.w	r3, r3, r1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	f04f 0200 	mov.w	r2, #0
 800b4a4:	f04f 0300 	mov.w	r3, #0
 800b4a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	018b      	lsls	r3, r1, #6
 800b4b0:	4651      	mov	r1, sl
 800b4b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b4b6:	4651      	mov	r1, sl
 800b4b8:	018a      	lsls	r2, r1, #6
 800b4ba:	4651      	mov	r1, sl
 800b4bc:	ebb2 0801 	subs.w	r8, r2, r1
 800b4c0:	4659      	mov	r1, fp
 800b4c2:	eb63 0901 	sbc.w	r9, r3, r1
 800b4c6:	f04f 0200 	mov.w	r2, #0
 800b4ca:	f04f 0300 	mov.w	r3, #0
 800b4ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4da:	4690      	mov	r8, r2
 800b4dc:	4699      	mov	r9, r3
 800b4de:	4623      	mov	r3, r4
 800b4e0:	eb18 0303 	adds.w	r3, r8, r3
 800b4e4:	60bb      	str	r3, [r7, #8]
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	eb49 0303 	adc.w	r3, r9, r3
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	f04f 0200 	mov.w	r2, #0
 800b4f2:	f04f 0300 	mov.w	r3, #0
 800b4f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	024b      	lsls	r3, r1, #9
 800b4fe:	4621      	mov	r1, r4
 800b500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b504:	4621      	mov	r1, r4
 800b506:	024a      	lsls	r2, r1, #9
 800b508:	4610      	mov	r0, r2
 800b50a:	4619      	mov	r1, r3
 800b50c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b50e:	2200      	movs	r2, #0
 800b510:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b518:	f7f4 fe68 	bl	80001ec <__aeabi_uldivmod>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4613      	mov	r3, r2
 800b522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b524:	e058      	b.n	800b5d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b526:	4b38      	ldr	r3, [pc, #224]	@ (800b608 <HAL_RCC_GetSysClockFreq+0x200>)
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	099b      	lsrs	r3, r3, #6
 800b52c:	2200      	movs	r2, #0
 800b52e:	4618      	mov	r0, r3
 800b530:	4611      	mov	r1, r2
 800b532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b536:	623b      	str	r3, [r7, #32]
 800b538:	2300      	movs	r3, #0
 800b53a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b53c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b540:	4642      	mov	r2, r8
 800b542:	464b      	mov	r3, r9
 800b544:	f04f 0000 	mov.w	r0, #0
 800b548:	f04f 0100 	mov.w	r1, #0
 800b54c:	0159      	lsls	r1, r3, #5
 800b54e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b552:	0150      	lsls	r0, r2, #5
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4641      	mov	r1, r8
 800b55a:	ebb2 0a01 	subs.w	sl, r2, r1
 800b55e:	4649      	mov	r1, r9
 800b560:	eb63 0b01 	sbc.w	fp, r3, r1
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b578:	ebb2 040a 	subs.w	r4, r2, sl
 800b57c:	eb63 050b 	sbc.w	r5, r3, fp
 800b580:	f04f 0200 	mov.w	r2, #0
 800b584:	f04f 0300 	mov.w	r3, #0
 800b588:	00eb      	lsls	r3, r5, #3
 800b58a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b58e:	00e2      	lsls	r2, r4, #3
 800b590:	4614      	mov	r4, r2
 800b592:	461d      	mov	r5, r3
 800b594:	4643      	mov	r3, r8
 800b596:	18e3      	adds	r3, r4, r3
 800b598:	603b      	str	r3, [r7, #0]
 800b59a:	464b      	mov	r3, r9
 800b59c:	eb45 0303 	adc.w	r3, r5, r3
 800b5a0:	607b      	str	r3, [r7, #4]
 800b5a2:	f04f 0200 	mov.w	r2, #0
 800b5a6:	f04f 0300 	mov.w	r3, #0
 800b5aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	028b      	lsls	r3, r1, #10
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	028a      	lsls	r2, r1, #10
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4619      	mov	r1, r3
 800b5c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	61bb      	str	r3, [r7, #24]
 800b5c6:	61fa      	str	r2, [r7, #28]
 800b5c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5cc:	f7f4 fe0e 	bl	80001ec <__aeabi_uldivmod>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b5d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b608 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	0c1b      	lsrs	r3, r3, #16
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800b5e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b5f2:	e002      	b.n	800b5fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b5f4:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <HAL_RCC_GetSysClockFreq+0x204>)
 800b5f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b5f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3750      	adds	r7, #80	@ 0x50
 800b600:	46bd      	mov	sp, r7
 800b602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b606:	bf00      	nop
 800b608:	40023800 	.word	0x40023800
 800b60c:	00f42400 	.word	0x00f42400
 800b610:	007a1200 	.word	0x007a1200

0800b614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b614:	b480      	push	{r7}
 800b616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b618:	4b03      	ldr	r3, [pc, #12]	@ (800b628 <HAL_RCC_GetHCLKFreq+0x14>)
 800b61a:	681b      	ldr	r3, [r3, #0]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	20000154 	.word	0x20000154

0800b62c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b630:	f7ff fff0 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b634:	4602      	mov	r2, r0
 800b636:	4b05      	ldr	r3, [pc, #20]	@ (800b64c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	0a9b      	lsrs	r3, r3, #10
 800b63c:	f003 0307 	and.w	r3, r3, #7
 800b640:	4903      	ldr	r1, [pc, #12]	@ (800b650 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b642:	5ccb      	ldrb	r3, [r1, r3]
 800b644:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b648:	4618      	mov	r0, r3
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	40023800 	.word	0x40023800
 800b650:	080366ec 	.word	0x080366ec

0800b654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b658:	f7ff ffdc 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b65c:	4602      	mov	r2, r0
 800b65e:	4b05      	ldr	r3, [pc, #20]	@ (800b674 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	0b5b      	lsrs	r3, r3, #13
 800b664:	f003 0307 	and.w	r3, r3, #7
 800b668:	4903      	ldr	r1, [pc, #12]	@ (800b678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b66a:	5ccb      	ldrb	r3, [r1, r3]
 800b66c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b670:	4618      	mov	r0, r3
 800b672:	bd80      	pop	{r7, pc}
 800b674:	40023800 	.word	0x40023800
 800b678:	080366ec 	.word	0x080366ec

0800b67c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d101      	bne.n	800b68e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e07b      	b.n	800b786 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b692:	2b00      	cmp	r3, #0
 800b694:	d108      	bne.n	800b6a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b69e:	d009      	beq.n	800b6b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	61da      	str	r2, [r3, #28]
 800b6a6:	e005      	b.n	800b6b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7fa fd7e 	bl	80061d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b6ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b6fc:	431a      	orrs	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b706:	431a      	orrs	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	f003 0302 	and.w	r3, r3, #2
 800b710:	431a      	orrs	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b724:	431a      	orrs	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b72e:	431a      	orrs	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b738:	ea42 0103 	orr.w	r1, r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b740:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	0c1b      	lsrs	r3, r3, #16
 800b752:	f003 0104 	and.w	r1, r3, #4
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b75a:	f003 0210 	and.w	r2, r3, #16
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	69da      	ldr	r2, [r3, #28]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b774:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b088      	sub	sp, #32
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	603b      	str	r3, [r7, #0]
 800b79a:	4613      	mov	r3, r2
 800b79c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d101      	bne.n	800b7b0 <HAL_SPI_Transmit+0x22>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e126      	b.n	800b9fe <HAL_SPI_Transmit+0x270>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7b8:	f7fc f804 	bl	80077c4 <HAL_GetTick>
 800b7bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b7be:	88fb      	ldrh	r3, [r7, #6]
 800b7c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d002      	beq.n	800b7d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b7d2:	e10b      	b.n	800b9ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <HAL_SPI_Transmit+0x52>
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b7e4:	e102      	b.n	800b9ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2203      	movs	r2, #3
 800b7ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	88fa      	ldrh	r2, [r7, #6]
 800b7fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	88fa      	ldrh	r2, [r7, #6]
 800b804:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b82c:	d10f      	bne.n	800b84e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b83c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b84c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b858:	2b40      	cmp	r3, #64	@ 0x40
 800b85a:	d007      	beq.n	800b86c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b86a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b874:	d14b      	bne.n	800b90e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <HAL_SPI_Transmit+0xf6>
 800b87e:	8afb      	ldrh	r3, [r7, #22]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d13e      	bne.n	800b902 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b888:	881a      	ldrh	r2, [r3, #0]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b894:	1c9a      	adds	r2, r3, #2
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b8a8:	e02b      	b.n	800b902 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f003 0302 	and.w	r3, r3, #2
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d112      	bne.n	800b8de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8bc:	881a      	ldrh	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8c8:	1c9a      	adds	r2, r3, #2
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b8dc:	e011      	b.n	800b902 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8de:	f7fb ff71 	bl	80077c4 <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d803      	bhi.n	800b8f6 <HAL_SPI_Transmit+0x168>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d102      	bne.n	800b8fc <HAL_SPI_Transmit+0x16e>
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d102      	bne.n	800b902 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b900:	e074      	b.n	800b9ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b906:	b29b      	uxth	r3, r3
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1ce      	bne.n	800b8aa <HAL_SPI_Transmit+0x11c>
 800b90c:	e04c      	b.n	800b9a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d002      	beq.n	800b91c <HAL_SPI_Transmit+0x18e>
 800b916:	8afb      	ldrh	r3, [r7, #22]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d140      	bne.n	800b99e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	330c      	adds	r3, #12
 800b926:	7812      	ldrb	r2, [r2, #0]
 800b928:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b938:	b29b      	uxth	r3, r3
 800b93a:	3b01      	subs	r3, #1
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b942:	e02c      	b.n	800b99e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f003 0302 	and.w	r3, r3, #2
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d113      	bne.n	800b97a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	330c      	adds	r3, #12
 800b95c:	7812      	ldrb	r2, [r2, #0]
 800b95e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b96e:	b29b      	uxth	r3, r3
 800b970:	3b01      	subs	r3, #1
 800b972:	b29a      	uxth	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b978:	e011      	b.n	800b99e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b97a:	f7fb ff23 	bl	80077c4 <HAL_GetTick>
 800b97e:	4602      	mov	r2, r0
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d803      	bhi.n	800b992 <HAL_SPI_Transmit+0x204>
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b990:	d102      	bne.n	800b998 <HAL_SPI_Transmit+0x20a>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d102      	bne.n	800b99e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b99c:	e026      	b.n	800b9ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1cd      	bne.n	800b944 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9a8:	69ba      	ldr	r2, [r7, #24]
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 fce9 	bl	800c384 <SPI_EndRxTxTransaction>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10a      	bne.n	800b9dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	613b      	str	r3, [r7, #16]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	613b      	str	r3, [r7, #16]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	613b      	str	r3, [r7, #16]
 800b9da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	77fb      	strb	r3, [r7, #31]
 800b9e8:	e000      	b.n	800b9ec <HAL_SPI_Transmit+0x25e>
  }

error:
 800b9ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800b9fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3720      	adds	r7, #32
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b088      	sub	sp, #32
 800ba0a:	af02      	add	r7, sp, #8
 800ba0c:	60f8      	str	r0, [r7, #12]
 800ba0e:	60b9      	str	r1, [r7, #8]
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	4613      	mov	r3, r2
 800ba14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ba22:	d112      	bne.n	800ba4a <HAL_SPI_Receive+0x44>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10e      	bne.n	800ba4a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2204      	movs	r2, #4
 800ba30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ba34:	88fa      	ldrh	r2, [r7, #6]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	68b9      	ldr	r1, [r7, #8]
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 f8f1 	bl	800bc28 <HAL_SPI_TransmitReceive>
 800ba46:	4603      	mov	r3, r0
 800ba48:	e0ea      	b.n	800bc20 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d101      	bne.n	800ba58 <HAL_SPI_Receive+0x52>
 800ba54:	2302      	movs	r3, #2
 800ba56:	e0e3      	b.n	800bc20 <HAL_SPI_Receive+0x21a>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba60:	f7fb feb0 	bl	80077c4 <HAL_GetTick>
 800ba64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d002      	beq.n	800ba78 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ba72:	2302      	movs	r3, #2
 800ba74:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba76:	e0ca      	b.n	800bc0e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <HAL_SPI_Receive+0x7e>
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba88:	e0c1      	b.n	800bc0e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2204      	movs	r2, #4
 800ba8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	88fa      	ldrh	r2, [r7, #6]
 800baa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	88fa      	ldrh	r2, [r7, #6]
 800baa8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bad0:	d10f      	bne.n	800baf2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bae0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800baf0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bafc:	2b40      	cmp	r3, #64	@ 0x40
 800bafe:	d007      	beq.n	800bb10 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d162      	bne.n	800bbde <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bb18:	e02e      	b.n	800bb78 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d115      	bne.n	800bb54 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f103 020c 	add.w	r2, r3, #12
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb34:	7812      	ldrb	r2, [r2, #0]
 800bb36:	b2d2      	uxtb	r2, r2
 800bb38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bb52:	e011      	b.n	800bb78 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb54:	f7fb fe36 	bl	80077c4 <HAL_GetTick>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d803      	bhi.n	800bb6c <HAL_SPI_Receive+0x166>
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6a:	d102      	bne.n	800bb72 <HAL_SPI_Receive+0x16c>
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d102      	bne.n	800bb78 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bb76:	e04a      	b.n	800bc0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1cb      	bne.n	800bb1a <HAL_SPI_Receive+0x114>
 800bb82:	e031      	b.n	800bbe8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d113      	bne.n	800bbba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68da      	ldr	r2, [r3, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb9c:	b292      	uxth	r2, r2
 800bb9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba4:	1c9a      	adds	r2, r3, #2
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bbb8:	e011      	b.n	800bbde <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbba:	f7fb fe03 	bl	80077c4 <HAL_GetTick>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	1ad3      	subs	r3, r2, r3
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d803      	bhi.n	800bbd2 <HAL_SPI_Receive+0x1cc>
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd0:	d102      	bne.n	800bbd8 <HAL_SPI_Receive+0x1d2>
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d102      	bne.n	800bbde <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bbdc:	e017      	b.n	800bc0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1cd      	bne.n	800bb84 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f000 fb63 	bl	800c2b8 <SPI_EndRxTransaction>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	75fb      	strb	r3, [r7, #23]
 800bc0a:	e000      	b.n	800bc0e <HAL_SPI_Receive+0x208>
  }

error :
 800bc0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2201      	movs	r2, #1
 800bc12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800bc1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08c      	sub	sp, #48	@ 0x30
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bc36:	2301      	movs	r3, #1
 800bc38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d101      	bne.n	800bc4e <HAL_SPI_TransmitReceive+0x26>
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	e18a      	b.n	800bf64 <HAL_SPI_TransmitReceive+0x33c>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc56:	f7fb fdb5 	bl	80077c4 <HAL_GetTick>
 800bc5a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bc62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bc6c:	887b      	ldrh	r3, [r7, #2]
 800bc6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bc70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d00f      	beq.n	800bc98 <HAL_SPI_TransmitReceive+0x70>
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bc7e:	d107      	bne.n	800bc90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d103      	bne.n	800bc90 <HAL_SPI_TransmitReceive+0x68>
 800bc88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d003      	beq.n	800bc98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bc90:	2302      	movs	r3, #2
 800bc92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800bc96:	e15b      	b.n	800bf50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d005      	beq.n	800bcaa <HAL_SPI_TransmitReceive+0x82>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <HAL_SPI_TransmitReceive+0x82>
 800bca4:	887b      	ldrh	r3, [r7, #2]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d103      	bne.n	800bcb2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800bcb0:	e14e      	b.n	800bf50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b04      	cmp	r3, #4
 800bcbc:	d003      	beq.n	800bcc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2205      	movs	r2, #5
 800bcc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	887a      	ldrh	r2, [r7, #2]
 800bcd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	887a      	ldrh	r2, [r7, #2]
 800bcdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	887a      	ldrh	r2, [r7, #2]
 800bce8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	887a      	ldrh	r2, [r7, #2]
 800bcee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd06:	2b40      	cmp	r3, #64	@ 0x40
 800bd08:	d007      	beq.n	800bd1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd22:	d178      	bne.n	800be16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <HAL_SPI_TransmitReceive+0x10a>
 800bd2c:	8b7b      	ldrh	r3, [r7, #26]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d166      	bne.n	800be00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd36:	881a      	ldrh	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd42:	1c9a      	adds	r2, r3, #2
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd56:	e053      	b.n	800be00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d11b      	bne.n	800bd9e <HAL_SPI_TransmitReceive+0x176>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d016      	beq.n	800bd9e <HAL_SPI_TransmitReceive+0x176>
 800bd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d113      	bne.n	800bd9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd7a:	881a      	ldrh	r2, [r3, #0]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd86:	1c9a      	adds	r2, r3, #2
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f003 0301 	and.w	r3, r3, #1
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d119      	bne.n	800bde0 <HAL_SPI_TransmitReceive+0x1b8>
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d014      	beq.n	800bde0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc0:	b292      	uxth	r2, r2
 800bdc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc8:	1c9a      	adds	r2, r3, #2
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bddc:	2301      	movs	r3, #1
 800bdde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bde0:	f7fb fcf0 	bl	80077c4 <HAL_GetTick>
 800bde4:	4602      	mov	r2, r0
 800bde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d807      	bhi.n	800be00 <HAL_SPI_TransmitReceive+0x1d8>
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d003      	beq.n	800be00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800bdfe:	e0a7      	b.n	800bf50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be04:	b29b      	uxth	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1a6      	bne.n	800bd58 <HAL_SPI_TransmitReceive+0x130>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be0e:	b29b      	uxth	r3, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1a1      	bne.n	800bd58 <HAL_SPI_TransmitReceive+0x130>
 800be14:	e07c      	b.n	800bf10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <HAL_SPI_TransmitReceive+0x1fc>
 800be1e:	8b7b      	ldrh	r3, [r7, #26]
 800be20:	2b01      	cmp	r3, #1
 800be22:	d16b      	bne.n	800befc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	330c      	adds	r3, #12
 800be2e:	7812      	ldrb	r2, [r2, #0]
 800be30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be40:	b29b      	uxth	r3, r3
 800be42:	3b01      	subs	r3, #1
 800be44:	b29a      	uxth	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be4a:	e057      	b.n	800befc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f003 0302 	and.w	r3, r3, #2
 800be56:	2b02      	cmp	r3, #2
 800be58:	d11c      	bne.n	800be94 <HAL_SPI_TransmitReceive+0x26c>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be5e:	b29b      	uxth	r3, r3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d017      	beq.n	800be94 <HAL_SPI_TransmitReceive+0x26c>
 800be64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be66:	2b01      	cmp	r3, #1
 800be68:	d114      	bne.n	800be94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	330c      	adds	r3, #12
 800be74:	7812      	ldrb	r2, [r2, #0]
 800be76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be86:	b29b      	uxth	r3, r3
 800be88:	3b01      	subs	r3, #1
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be90:	2300      	movs	r3, #0
 800be92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d119      	bne.n	800bed6 <HAL_SPI_TransmitReceive+0x2ae>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d014      	beq.n	800bed6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68da      	ldr	r2, [r3, #12]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beb6:	b2d2      	uxtb	r2, r2
 800beb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bebe:	1c5a      	adds	r2, r3, #1
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bec8:	b29b      	uxth	r3, r3
 800beca:	3b01      	subs	r3, #1
 800becc:	b29a      	uxth	r2, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bed2:	2301      	movs	r3, #1
 800bed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bed6:	f7fb fc75 	bl	80077c4 <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d803      	bhi.n	800beee <HAL_SPI_TransmitReceive+0x2c6>
 800bee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beec:	d102      	bne.n	800bef4 <HAL_SPI_TransmitReceive+0x2cc>
 800beee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d103      	bne.n	800befc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bef4:	2303      	movs	r3, #3
 800bef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800befa:	e029      	b.n	800bf50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1a2      	bne.n	800be4c <HAL_SPI_TransmitReceive+0x224>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d19d      	bne.n	800be4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bf10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 fa35 	bl	800c384 <SPI_EndRxTxTransaction>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d006      	beq.n	800bf2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2220      	movs	r2, #32
 800bf2a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800bf2c:	e010      	b.n	800bf50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10b      	bne.n	800bf4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	617b      	str	r3, [r7, #20]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	617b      	str	r3, [r7, #20]
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	e000      	b.n	800bf50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bf4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800bf60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3730      	adds	r7, #48	@ 0x30
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b088      	sub	sp, #32
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	099b      	lsrs	r3, r3, #6
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10f      	bne.n	800bfb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	099b      	lsrs	r3, r3, #6
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d004      	beq.n	800bfb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	4798      	blx	r3
    return;
 800bfae:	e0d7      	b.n	800c160 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	085b      	lsrs	r3, r3, #1
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00a      	beq.n	800bfd2 <HAL_SPI_IRQHandler+0x66>
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	09db      	lsrs	r3, r3, #7
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d004      	beq.n	800bfd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	4798      	blx	r3
    return;
 800bfd0:	e0c6      	b.n	800c160 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	095b      	lsrs	r3, r3, #5
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10c      	bne.n	800bff8 <HAL_SPI_IRQHandler+0x8c>
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	099b      	lsrs	r3, r3, #6
 800bfe2:	f003 0301 	and.w	r3, r3, #1
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	0a1b      	lsrs	r3, r3, #8
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 80b4 	beq.w	800c160 <HAL_SPI_IRQHandler+0x1f4>
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	095b      	lsrs	r3, r3, #5
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 80ad 	beq.w	800c160 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	099b      	lsrs	r3, r3, #6
 800c00a:	f003 0301 	and.w	r3, r3, #1
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d023      	beq.n	800c05a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d011      	beq.n	800c042 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c022:	f043 0204 	orr.w	r2, r3, #4
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	617b      	str	r3, [r7, #20]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	617b      	str	r3, [r7, #20]
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	e00b      	b.n	800c05a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c042:	2300      	movs	r3, #0
 800c044:	613b      	str	r3, [r7, #16]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	613b      	str	r3, [r7, #16]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	613b      	str	r3, [r7, #16]
 800c056:	693b      	ldr	r3, [r7, #16]
        return;
 800c058:	e082      	b.n	800c160 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	095b      	lsrs	r3, r3, #5
 800c05e:	f003 0301 	and.w	r3, r3, #1
 800c062:	2b00      	cmp	r3, #0
 800c064:	d014      	beq.n	800c090 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c06a:	f043 0201 	orr.w	r2, r3, #1
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c072:	2300      	movs	r3, #0
 800c074:	60fb      	str	r3, [r7, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c08c:	601a      	str	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	0a1b      	lsrs	r3, r3, #8
 800c094:	f003 0301 	and.w	r3, r3, #1
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00c      	beq.n	800c0b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0a0:	f043 0208 	orr.w	r2, r3, #8
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60bb      	str	r3, [r7, #8]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	60bb      	str	r3, [r7, #8]
 800c0b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d04f      	beq.n	800c15e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c0cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	f003 0302 	and.w	r3, r3, #2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d104      	bne.n	800c0ea <HAL_SPI_IRQHandler+0x17e>
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d034      	beq.n	800c154 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 0203 	bic.w	r2, r2, #3
 800c0f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d011      	beq.n	800c126 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c106:	4a18      	ldr	r2, [pc, #96]	@ (800c168 <HAL_SPI_IRQHandler+0x1fc>)
 800c108:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fb fd48 	bl	8007ba4 <HAL_DMA_Abort_IT>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d005      	beq.n	800c126 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c11e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d016      	beq.n	800c15c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c132:	4a0d      	ldr	r2, [pc, #52]	@ (800c168 <HAL_SPI_IRQHandler+0x1fc>)
 800c134:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fb fd32 	bl	8007ba4 <HAL_DMA_Abort_IT>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00a      	beq.n	800c15c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c14a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800c152:	e003      	b.n	800c15c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f809 	bl	800c16c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c15a:	e000      	b.n	800c15e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c15c:	bf00      	nop
    return;
 800c15e:	bf00      	nop
  }
}
 800c160:	3720      	adds	r7, #32
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	0800c181 	.word	0x0800c181

0800c16c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c18c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f7ff ffe6 	bl	800c16c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c1a0:	bf00      	nop
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b088      	sub	sp, #32
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c1b8:	f7fb fb04 	bl	80077c4 <HAL_GetTick>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c0:	1a9b      	subs	r3, r3, r2
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c1c8:	f7fb fafc 	bl	80077c4 <HAL_GetTick>
 800c1cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c1ce:	4b39      	ldr	r3, [pc, #228]	@ (800c2b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	015b      	lsls	r3, r3, #5
 800c1d4:	0d1b      	lsrs	r3, r3, #20
 800c1d6:	69fa      	ldr	r2, [r7, #28]
 800c1d8:	fb02 f303 	mul.w	r3, r2, r3
 800c1dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1de:	e054      	b.n	800c28a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d050      	beq.n	800c28a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c1e8:	f7fb faec 	bl	80077c4 <HAL_GetTick>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	69fa      	ldr	r2, [r7, #28]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d902      	bls.n	800c1fe <SPI_WaitFlagStateUntilTimeout+0x56>
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d13d      	bne.n	800c27a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c20c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c216:	d111      	bne.n	800c23c <SPI_WaitFlagStateUntilTimeout+0x94>
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c220:	d004      	beq.n	800c22c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c22a:	d107      	bne.n	800c23c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c23a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c244:	d10f      	bne.n	800c266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800c276:	2303      	movs	r3, #3
 800c278:	e017      	b.n	800c2aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	3b01      	subs	r3, #1
 800c288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	689a      	ldr	r2, [r3, #8]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	4013      	ands	r3, r2
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	429a      	cmp	r2, r3
 800c298:	bf0c      	ite	eq
 800c29a:	2301      	moveq	r3, #1
 800c29c:	2300      	movne	r3, #0
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	79fb      	ldrb	r3, [r7, #7]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d19b      	bne.n	800c1e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3720      	adds	r7, #32
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000154 	.word	0x20000154

0800c2b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af02      	add	r7, sp, #8
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c2cc:	d111      	bne.n	800c2f2 <SPI_EndRxTransaction+0x3a>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2d6:	d004      	beq.n	800c2e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2e0:	d107      	bne.n	800c2f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c2f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c2fa:	d12a      	bne.n	800c352 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c304:	d012      	beq.n	800c32c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2200      	movs	r2, #0
 800c30e:	2180      	movs	r1, #128	@ 0x80
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f7ff ff49 	bl	800c1a8 <SPI_WaitFlagStateUntilTimeout>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d02d      	beq.n	800c378 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c320:	f043 0220 	orr.w	r2, r3, #32
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800c328:	2303      	movs	r3, #3
 800c32a:	e026      	b.n	800c37a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2200      	movs	r2, #0
 800c334:	2101      	movs	r1, #1
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7ff ff36 	bl	800c1a8 <SPI_WaitFlagStateUntilTimeout>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01a      	beq.n	800c378 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c346:	f043 0220 	orr.w	r2, r3, #32
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800c34e:	2303      	movs	r3, #3
 800c350:	e013      	b.n	800c37a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2200      	movs	r2, #0
 800c35a:	2101      	movs	r1, #1
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7ff ff23 	bl	800c1a8 <SPI_WaitFlagStateUntilTimeout>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d007      	beq.n	800c378 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c36c:	f043 0220 	orr.w	r2, r3, #32
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c374:	2303      	movs	r3, #3
 800c376:	e000      	b.n	800c37a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
	...

0800c384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b088      	sub	sp, #32
 800c388:	af02      	add	r7, sp, #8
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c390:	4b1b      	ldr	r3, [pc, #108]	@ (800c400 <SPI_EndRxTxTransaction+0x7c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a1b      	ldr	r2, [pc, #108]	@ (800c404 <SPI_EndRxTxTransaction+0x80>)
 800c396:	fba2 2303 	umull	r2, r3, r2, r3
 800c39a:	0d5b      	lsrs	r3, r3, #21
 800c39c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c3a0:	fb02 f303 	mul.w	r3, r2, r3
 800c3a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c3ae:	d112      	bne.n	800c3d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	2180      	movs	r1, #128	@ 0x80
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7ff fef4 	bl	800c1a8 <SPI_WaitFlagStateUntilTimeout>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d016      	beq.n	800c3f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ca:	f043 0220 	orr.w	r2, r3, #32
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	e00f      	b.n	800c3f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00a      	beq.n	800c3f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3ec:	2b80      	cmp	r3, #128	@ 0x80
 800c3ee:	d0f2      	beq.n	800c3d6 <SPI_EndRxTxTransaction+0x52>
 800c3f0:	e000      	b.n	800c3f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800c3f2:	bf00      	nop
  }

  return HAL_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3718      	adds	r7, #24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20000154 	.word	0x20000154
 800c404:	165e9f81 	.word	0x165e9f81

0800c408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e041      	b.n	800c49e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b00      	cmp	r3, #0
 800c424:	d106      	bne.n	800c434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7fa fdb0 	bl	8006f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2202      	movs	r2, #2
 800c438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3304      	adds	r3, #4
 800c444:	4619      	mov	r1, r3
 800c446:	4610      	mov	r0, r2
 800c448:	f000 fae0 	bl	800ca0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d001      	beq.n	800c4c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e04e      	b.n	800c55e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68da      	ldr	r2, [r3, #12]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f042 0201 	orr.w	r2, r2, #1
 800c4d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a23      	ldr	r2, [pc, #140]	@ (800c56c <HAL_TIM_Base_Start_IT+0xc4>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d022      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x80>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4ea:	d01d      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x80>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a1f      	ldr	r2, [pc, #124]	@ (800c570 <HAL_TIM_Base_Start_IT+0xc8>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d018      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x80>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a1e      	ldr	r2, [pc, #120]	@ (800c574 <HAL_TIM_Base_Start_IT+0xcc>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d013      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x80>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a1c      	ldr	r2, [pc, #112]	@ (800c578 <HAL_TIM_Base_Start_IT+0xd0>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d00e      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x80>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a1b      	ldr	r2, [pc, #108]	@ (800c57c <HAL_TIM_Base_Start_IT+0xd4>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d009      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x80>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a19      	ldr	r2, [pc, #100]	@ (800c580 <HAL_TIM_Base_Start_IT+0xd8>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d004      	beq.n	800c528 <HAL_TIM_Base_Start_IT+0x80>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a18      	ldr	r2, [pc, #96]	@ (800c584 <HAL_TIM_Base_Start_IT+0xdc>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d111      	bne.n	800c54c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f003 0307 	and.w	r3, r3, #7
 800c532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b06      	cmp	r3, #6
 800c538:	d010      	beq.n	800c55c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f042 0201 	orr.w	r2, r2, #1
 800c548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c54a:	e007      	b.n	800c55c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f042 0201 	orr.w	r2, r2, #1
 800c55a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	40010000 	.word	0x40010000
 800c570:	40000400 	.word	0x40000400
 800c574:	40000800 	.word	0x40000800
 800c578:	40000c00 	.word	0x40000c00
 800c57c:	40010400 	.word	0x40010400
 800c580:	40014000 	.word	0x40014000
 800c584:	40001800 	.word	0x40001800

0800c588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d101      	bne.n	800c59a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e041      	b.n	800c61e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7fa fcce 	bl	8006f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2202      	movs	r2, #2
 800c5b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	4610      	mov	r0, r2
 800c5c8:	f000 fa20 	bl	800ca0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d122      	bne.n	800c682 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	f003 0302 	and.w	r3, r3, #2
 800c646:	2b02      	cmp	r3, #2
 800c648:	d11b      	bne.n	800c682 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f06f 0202 	mvn.w	r2, #2
 800c652:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	f003 0303 	and.w	r3, r3, #3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d003      	beq.n	800c670 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f9b1 	bl	800c9d0 <HAL_TIM_IC_CaptureCallback>
 800c66e:	e005      	b.n	800c67c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f9a3 	bl	800c9bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f9b4 	bl	800c9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	f003 0304 	and.w	r3, r3, #4
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	d122      	bne.n	800c6d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	f003 0304 	and.w	r3, r3, #4
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	d11b      	bne.n	800c6d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f06f 0204 	mvn.w	r2, #4
 800c6a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f987 	bl	800c9d0 <HAL_TIM_IC_CaptureCallback>
 800c6c2:	e005      	b.n	800c6d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f979 	bl	800c9bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f98a 	bl	800c9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	f003 0308 	and.w	r3, r3, #8
 800c6e0:	2b08      	cmp	r3, #8
 800c6e2:	d122      	bne.n	800c72a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	f003 0308 	and.w	r3, r3, #8
 800c6ee:	2b08      	cmp	r3, #8
 800c6f0:	d11b      	bne.n	800c72a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f06f 0208 	mvn.w	r2, #8
 800c6fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2204      	movs	r2, #4
 800c700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	69db      	ldr	r3, [r3, #28]
 800c708:	f003 0303 	and.w	r3, r3, #3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d003      	beq.n	800c718 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 f95d 	bl	800c9d0 <HAL_TIM_IC_CaptureCallback>
 800c716:	e005      	b.n	800c724 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 f94f 	bl	800c9bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f960 	bl	800c9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	f003 0310 	and.w	r3, r3, #16
 800c734:	2b10      	cmp	r3, #16
 800c736:	d122      	bne.n	800c77e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f003 0310 	and.w	r3, r3, #16
 800c742:	2b10      	cmp	r3, #16
 800c744:	d11b      	bne.n	800c77e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f06f 0210 	mvn.w	r2, #16
 800c74e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2208      	movs	r2, #8
 800c754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c760:	2b00      	cmp	r3, #0
 800c762:	d003      	beq.n	800c76c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f933 	bl	800c9d0 <HAL_TIM_IC_CaptureCallback>
 800c76a:	e005      	b.n	800c778 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f925 	bl	800c9bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f936 	bl	800c9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d10e      	bne.n	800c7aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	f003 0301 	and.w	r3, r3, #1
 800c796:	2b01      	cmp	r3, #1
 800c798:	d107      	bne.n	800c7aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f06f 0201 	mvn.w	r2, #1
 800c7a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7fa fb15 	bl	8006dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b4:	2b80      	cmp	r3, #128	@ 0x80
 800c7b6:	d10e      	bne.n	800c7d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c2:	2b80      	cmp	r3, #128	@ 0x80
 800c7c4:	d107      	bne.n	800c7d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c7ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fbf1 	bl	800cfb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7e0:	2b40      	cmp	r3, #64	@ 0x40
 800c7e2:	d10e      	bne.n	800c802 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7ee:	2b40      	cmp	r3, #64	@ 0x40
 800c7f0:	d107      	bne.n	800c802 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c7fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f8fb 	bl	800c9f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	f003 0320 	and.w	r3, r3, #32
 800c80c:	2b20      	cmp	r3, #32
 800c80e:	d10e      	bne.n	800c82e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f003 0320 	and.w	r3, r3, #32
 800c81a:	2b20      	cmp	r3, #32
 800c81c:	d107      	bne.n	800c82e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f06f 0220 	mvn.w	r2, #32
 800c826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fbbb 	bl	800cfa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c82e:	bf00      	nop
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
	...

0800c838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b086      	sub	sp, #24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c844:	2300      	movs	r3, #0
 800c846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d101      	bne.n	800c856 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c852:	2302      	movs	r3, #2
 800c854:	e0ae      	b.n	800c9b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b0c      	cmp	r3, #12
 800c862:	f200 809f 	bhi.w	800c9a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c866:	a201      	add	r2, pc, #4	@ (adr r2, 800c86c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86c:	0800c8a1 	.word	0x0800c8a1
 800c870:	0800c9a5 	.word	0x0800c9a5
 800c874:	0800c9a5 	.word	0x0800c9a5
 800c878:	0800c9a5 	.word	0x0800c9a5
 800c87c:	0800c8e1 	.word	0x0800c8e1
 800c880:	0800c9a5 	.word	0x0800c9a5
 800c884:	0800c9a5 	.word	0x0800c9a5
 800c888:	0800c9a5 	.word	0x0800c9a5
 800c88c:	0800c923 	.word	0x0800c923
 800c890:	0800c9a5 	.word	0x0800c9a5
 800c894:	0800c9a5 	.word	0x0800c9a5
 800c898:	0800c9a5 	.word	0x0800c9a5
 800c89c:	0800c963 	.word	0x0800c963
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68b9      	ldr	r1, [r7, #8]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 f950 	bl	800cb4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	699a      	ldr	r2, [r3, #24]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f042 0208 	orr.w	r2, r2, #8
 800c8ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	699a      	ldr	r2, [r3, #24]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f022 0204 	bic.w	r2, r2, #4
 800c8ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6999      	ldr	r1, [r3, #24]
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	691a      	ldr	r2, [r3, #16]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	430a      	orrs	r2, r1
 800c8dc:	619a      	str	r2, [r3, #24]
      break;
 800c8de:	e064      	b.n	800c9aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68b9      	ldr	r1, [r7, #8]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 f9a0 	bl	800cc2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	699a      	ldr	r2, [r3, #24]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c8fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	699a      	ldr	r2, [r3, #24]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c90a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6999      	ldr	r1, [r3, #24]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	021a      	lsls	r2, r3, #8
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	430a      	orrs	r2, r1
 800c91e:	619a      	str	r2, [r3, #24]
      break;
 800c920:	e043      	b.n	800c9aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68b9      	ldr	r1, [r7, #8]
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 f9f5 	bl	800cd18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	69da      	ldr	r2, [r3, #28]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f042 0208 	orr.w	r2, r2, #8
 800c93c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	69da      	ldr	r2, [r3, #28]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f022 0204 	bic.w	r2, r2, #4
 800c94c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	69d9      	ldr	r1, [r3, #28]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	691a      	ldr	r2, [r3, #16]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	430a      	orrs	r2, r1
 800c95e:	61da      	str	r2, [r3, #28]
      break;
 800c960:	e023      	b.n	800c9aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68b9      	ldr	r1, [r7, #8]
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fa49 	bl	800ce00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69da      	ldr	r2, [r3, #28]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c97c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	69da      	ldr	r2, [r3, #28]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c98c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69d9      	ldr	r1, [r3, #28]
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	021a      	lsls	r2, r3, #8
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	430a      	orrs	r2, r1
 800c9a0:	61da      	str	r2, [r3, #28]
      break;
 800c9a2:	e002      	b.n	800c9aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	75fb      	strb	r3, [r7, #23]
      break;
 800c9a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c9c4:	bf00      	nop
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a40      	ldr	r2, [pc, #256]	@ (800cb20 <TIM_Base_SetConfig+0x114>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d013      	beq.n	800ca4c <TIM_Base_SetConfig+0x40>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca2a:	d00f      	beq.n	800ca4c <TIM_Base_SetConfig+0x40>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a3d      	ldr	r2, [pc, #244]	@ (800cb24 <TIM_Base_SetConfig+0x118>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d00b      	beq.n	800ca4c <TIM_Base_SetConfig+0x40>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a3c      	ldr	r2, [pc, #240]	@ (800cb28 <TIM_Base_SetConfig+0x11c>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d007      	beq.n	800ca4c <TIM_Base_SetConfig+0x40>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a3b      	ldr	r2, [pc, #236]	@ (800cb2c <TIM_Base_SetConfig+0x120>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d003      	beq.n	800ca4c <TIM_Base_SetConfig+0x40>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a3a      	ldr	r2, [pc, #232]	@ (800cb30 <TIM_Base_SetConfig+0x124>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d108      	bne.n	800ca5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4a2f      	ldr	r2, [pc, #188]	@ (800cb20 <TIM_Base_SetConfig+0x114>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d02b      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca6c:	d027      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4a2c      	ldr	r2, [pc, #176]	@ (800cb24 <TIM_Base_SetConfig+0x118>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d023      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4a2b      	ldr	r2, [pc, #172]	@ (800cb28 <TIM_Base_SetConfig+0x11c>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d01f      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4a2a      	ldr	r2, [pc, #168]	@ (800cb2c <TIM_Base_SetConfig+0x120>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d01b      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4a29      	ldr	r2, [pc, #164]	@ (800cb30 <TIM_Base_SetConfig+0x124>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d017      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a28      	ldr	r2, [pc, #160]	@ (800cb34 <TIM_Base_SetConfig+0x128>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d013      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a27      	ldr	r2, [pc, #156]	@ (800cb38 <TIM_Base_SetConfig+0x12c>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d00f      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a26      	ldr	r2, [pc, #152]	@ (800cb3c <TIM_Base_SetConfig+0x130>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d00b      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a25      	ldr	r2, [pc, #148]	@ (800cb40 <TIM_Base_SetConfig+0x134>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d007      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a24      	ldr	r2, [pc, #144]	@ (800cb44 <TIM_Base_SetConfig+0x138>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d003      	beq.n	800cabe <TIM_Base_SetConfig+0xb2>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a23      	ldr	r2, [pc, #140]	@ (800cb48 <TIM_Base_SetConfig+0x13c>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d108      	bne.n	800cad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	4313      	orrs	r3, r2
 800cace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	695b      	ldr	r3, [r3, #20]
 800cada:	4313      	orrs	r3, r2
 800cadc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	689a      	ldr	r2, [r3, #8]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a0a      	ldr	r2, [pc, #40]	@ (800cb20 <TIM_Base_SetConfig+0x114>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d003      	beq.n	800cb04 <TIM_Base_SetConfig+0xf8>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a0c      	ldr	r2, [pc, #48]	@ (800cb30 <TIM_Base_SetConfig+0x124>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d103      	bne.n	800cb0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	691a      	ldr	r2, [r3, #16]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	615a      	str	r2, [r3, #20]
}
 800cb12:	bf00      	nop
 800cb14:	3714      	adds	r7, #20
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	40010000 	.word	0x40010000
 800cb24:	40000400 	.word	0x40000400
 800cb28:	40000800 	.word	0x40000800
 800cb2c:	40000c00 	.word	0x40000c00
 800cb30:	40010400 	.word	0x40010400
 800cb34:	40014000 	.word	0x40014000
 800cb38:	40014400 	.word	0x40014400
 800cb3c:	40014800 	.word	0x40014800
 800cb40:	40001800 	.word	0x40001800
 800cb44:	40001c00 	.word	0x40001c00
 800cb48:	40002000 	.word	0x40002000

0800cb4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b087      	sub	sp, #28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	f023 0201 	bic.w	r2, r3, #1
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f023 0303 	bic.w	r3, r3, #3
 800cb82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	f023 0302 	bic.w	r3, r3, #2
 800cb94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a20      	ldr	r2, [pc, #128]	@ (800cc24 <TIM_OC1_SetConfig+0xd8>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d003      	beq.n	800cbb0 <TIM_OC1_SetConfig+0x64>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a1f      	ldr	r2, [pc, #124]	@ (800cc28 <TIM_OC1_SetConfig+0xdc>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d10c      	bne.n	800cbca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	f023 0308 	bic.w	r3, r3, #8
 800cbb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f023 0304 	bic.w	r3, r3, #4
 800cbc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a15      	ldr	r2, [pc, #84]	@ (800cc24 <TIM_OC1_SetConfig+0xd8>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d003      	beq.n	800cbda <TIM_OC1_SetConfig+0x8e>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a14      	ldr	r2, [pc, #80]	@ (800cc28 <TIM_OC1_SetConfig+0xdc>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d111      	bne.n	800cbfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cbe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cbe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	621a      	str	r2, [r3, #32]
}
 800cc18:	bf00      	nop
 800cc1a:	371c      	adds	r7, #28
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	40010000 	.word	0x40010000
 800cc28:	40010400 	.word	0x40010400

0800cc2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b087      	sub	sp, #28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	f023 0210 	bic.w	r2, r3, #16
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	699b      	ldr	r3, [r3, #24]
 800cc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	021b      	lsls	r3, r3, #8
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	f023 0320 	bic.w	r3, r3, #32
 800cc76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	011b      	lsls	r3, r3, #4
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a22      	ldr	r2, [pc, #136]	@ (800cd10 <TIM_OC2_SetConfig+0xe4>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d003      	beq.n	800cc94 <TIM_OC2_SetConfig+0x68>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a21      	ldr	r2, [pc, #132]	@ (800cd14 <TIM_OC2_SetConfig+0xe8>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d10d      	bne.n	800ccb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	011b      	lsls	r3, r3, #4
 800cca2:	697a      	ldr	r2, [r7, #20]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a17      	ldr	r2, [pc, #92]	@ (800cd10 <TIM_OC2_SetConfig+0xe4>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d003      	beq.n	800ccc0 <TIM_OC2_SetConfig+0x94>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a16      	ldr	r2, [pc, #88]	@ (800cd14 <TIM_OC2_SetConfig+0xe8>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d113      	bne.n	800cce8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ccc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ccce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	693a      	ldr	r2, [r7, #16]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	693a      	ldr	r2, [r7, #16]
 800ccec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	685a      	ldr	r2, [r3, #4]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	697a      	ldr	r2, [r7, #20]
 800cd00:	621a      	str	r2, [r3, #32]
}
 800cd02:	bf00      	nop
 800cd04:	371c      	adds	r7, #28
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	40010000 	.word	0x40010000
 800cd14:	40010400 	.word	0x40010400

0800cd18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a1b      	ldr	r3, [r3, #32]
 800cd26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	69db      	ldr	r3, [r3, #28]
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f023 0303 	bic.w	r3, r3, #3
 800cd4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cd60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	021b      	lsls	r3, r3, #8
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a21      	ldr	r2, [pc, #132]	@ (800cdf8 <TIM_OC3_SetConfig+0xe0>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d003      	beq.n	800cd7e <TIM_OC3_SetConfig+0x66>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4a20      	ldr	r2, [pc, #128]	@ (800cdfc <TIM_OC3_SetConfig+0xe4>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d10d      	bne.n	800cd9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	021b      	lsls	r3, r3, #8
 800cd8c:	697a      	ldr	r2, [r7, #20]
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a16      	ldr	r2, [pc, #88]	@ (800cdf8 <TIM_OC3_SetConfig+0xe0>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d003      	beq.n	800cdaa <TIM_OC3_SetConfig+0x92>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a15      	ldr	r2, [pc, #84]	@ (800cdfc <TIM_OC3_SetConfig+0xe4>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d113      	bne.n	800cdd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cdb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	011b      	lsls	r3, r3, #4
 800cdc0:	693a      	ldr	r2, [r7, #16]
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	699b      	ldr	r3, [r3, #24]
 800cdca:	011b      	lsls	r3, r3, #4
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	685a      	ldr	r2, [r3, #4]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	697a      	ldr	r2, [r7, #20]
 800cdea:	621a      	str	r2, [r3, #32]
}
 800cdec:	bf00      	nop
 800cdee:	371c      	adds	r7, #28
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	40010000 	.word	0x40010000
 800cdfc:	40010400 	.word	0x40010400

0800ce00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b087      	sub	sp, #28
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	69db      	ldr	r3, [r3, #28]
 800ce26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	021b      	lsls	r3, r3, #8
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	031b      	lsls	r3, r3, #12
 800ce52:	693a      	ldr	r2, [r7, #16]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a12      	ldr	r2, [pc, #72]	@ (800cea4 <TIM_OC4_SetConfig+0xa4>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d003      	beq.n	800ce68 <TIM_OC4_SetConfig+0x68>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a11      	ldr	r2, [pc, #68]	@ (800cea8 <TIM_OC4_SetConfig+0xa8>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d109      	bne.n	800ce7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	695b      	ldr	r3, [r3, #20]
 800ce74:	019b      	lsls	r3, r3, #6
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	697a      	ldr	r2, [r7, #20]
 800ce80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	685a      	ldr	r2, [r3, #4]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	693a      	ldr	r2, [r7, #16]
 800ce94:	621a      	str	r2, [r3, #32]
}
 800ce96:	bf00      	nop
 800ce98:	371c      	adds	r7, #28
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	40010000 	.word	0x40010000
 800cea8:	40010400 	.word	0x40010400

0800ceac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d101      	bne.n	800cec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cec0:	2302      	movs	r3, #2
 800cec2:	e05a      	b.n	800cf7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2202      	movs	r2, #2
 800ced0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ceea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a21      	ldr	r2, [pc, #132]	@ (800cf88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d022      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf10:	d01d      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a1d      	ldr	r2, [pc, #116]	@ (800cf8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d018      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a1b      	ldr	r2, [pc, #108]	@ (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d013      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a1a      	ldr	r2, [pc, #104]	@ (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d00e      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a18      	ldr	r2, [pc, #96]	@ (800cf98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d009      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a17      	ldr	r2, [pc, #92]	@ (800cf9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d004      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a15      	ldr	r2, [pc, #84]	@ (800cfa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d10c      	bne.n	800cf68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	40010000 	.word	0x40010000
 800cf8c:	40000400 	.word	0x40000400
 800cf90:	40000800 	.word	0x40000800
 800cf94:	40000c00 	.word	0x40000c00
 800cf98:	40010400 	.word	0x40010400
 800cf9c:	40014000 	.word	0x40014000
 800cfa0:	40001800 	.word	0x40001800

0800cfa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d101      	bne.n	800cfde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e03f      	b.n	800d05e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7fa fab6 	bl	8007564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2224      	movs	r2, #36	@ 0x24
 800cffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68da      	ldr	r2, [r3, #12]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d00e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f929 	bl	800d268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	691a      	ldr	r2, [r3, #16]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	695a      	ldr	r2, [r3, #20]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68da      	ldr	r2, [r3, #12]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2220      	movs	r2, #32
 800d050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2220      	movs	r2, #32
 800d058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b08a      	sub	sp, #40	@ 0x28
 800d06a:	af02      	add	r7, sp, #8
 800d06c:	60f8      	str	r0, [r7, #12]
 800d06e:	60b9      	str	r1, [r7, #8]
 800d070:	603b      	str	r3, [r7, #0]
 800d072:	4613      	mov	r3, r2
 800d074:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d076:	2300      	movs	r3, #0
 800d078:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b20      	cmp	r3, #32
 800d084:	d17c      	bne.n	800d180 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <HAL_UART_Transmit+0x2c>
 800d08c:	88fb      	ldrh	r3, [r7, #6]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d101      	bne.n	800d096 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	e075      	b.n	800d182 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d101      	bne.n	800d0a4 <HAL_UART_Transmit+0x3e>
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	e06e      	b.n	800d182 <HAL_UART_Transmit+0x11c>
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2221      	movs	r2, #33	@ 0x21
 800d0b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d0ba:	f7fa fb83 	bl	80077c4 <HAL_GetTick>
 800d0be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	88fa      	ldrh	r2, [r7, #6]
 800d0c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	88fa      	ldrh	r2, [r7, #6]
 800d0ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0d4:	d108      	bne.n	800d0e8 <HAL_UART_Transmit+0x82>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d104      	bne.n	800d0e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	61bb      	str	r3, [r7, #24]
 800d0e6:	e003      	b.n	800d0f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800d0f8:	e02a      	b.n	800d150 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2200      	movs	r2, #0
 800d102:	2180      	movs	r1, #128	@ 0x80
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f000 f840 	bl	800d18a <UART_WaitOnFlagUntilTimeout>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d001      	beq.n	800d114 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	e036      	b.n	800d182 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10b      	bne.n	800d132 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	461a      	mov	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d128:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	3302      	adds	r3, #2
 800d12e:	61bb      	str	r3, [r7, #24]
 800d130:	e007      	b.n	800d142 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	781a      	ldrb	r2, [r3, #0]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	3301      	adds	r3, #1
 800d140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d146:	b29b      	uxth	r3, r3
 800d148:	3b01      	subs	r3, #1
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d154:	b29b      	uxth	r3, r3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1cf      	bne.n	800d0fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	9300      	str	r3, [sp, #0]
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	2200      	movs	r2, #0
 800d162:	2140      	movs	r1, #64	@ 0x40
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f000 f810 	bl	800d18a <UART_WaitOnFlagUntilTimeout>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d001      	beq.n	800d174 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d170:	2303      	movs	r3, #3
 800d172:	e006      	b.n	800d182 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2220      	movs	r2, #32
 800d178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	e000      	b.n	800d182 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d180:	2302      	movs	r3, #2
  }
}
 800d182:	4618      	mov	r0, r3
 800d184:	3720      	adds	r7, #32
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b090      	sub	sp, #64	@ 0x40
 800d18e:	af00      	add	r7, sp, #0
 800d190:	60f8      	str	r0, [r7, #12]
 800d192:	60b9      	str	r1, [r7, #8]
 800d194:	603b      	str	r3, [r7, #0]
 800d196:	4613      	mov	r3, r2
 800d198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d19a:	e050      	b.n	800d23e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d19c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a2:	d04c      	beq.n	800d23e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d1a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d007      	beq.n	800d1ba <UART_WaitOnFlagUntilTimeout+0x30>
 800d1aa:	f7fa fb0b 	bl	80077c4 <HAL_GetTick>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d241      	bcs.n	800d23e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	330c      	adds	r3, #12
 800d1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c4:	e853 3f00 	ldrex	r3, [r3]
 800d1c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	330c      	adds	r3, #12
 800d1d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d1da:	637a      	str	r2, [r7, #52]	@ 0x34
 800d1dc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d1e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1e2:	e841 2300 	strex	r3, r2, [r1]
 800d1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1e5      	bne.n	800d1ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3314      	adds	r3, #20
 800d1f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	e853 3f00 	ldrex	r3, [r3]
 800d1fc:	613b      	str	r3, [r7, #16]
   return(result);
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	f023 0301 	bic.w	r3, r3, #1
 800d204:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3314      	adds	r3, #20
 800d20c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d20e:	623a      	str	r2, [r7, #32]
 800d210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d212:	69f9      	ldr	r1, [r7, #28]
 800d214:	6a3a      	ldr	r2, [r7, #32]
 800d216:	e841 2300 	strex	r3, r2, [r1]
 800d21a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1e5      	bne.n	800d1ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2220      	movs	r2, #32
 800d226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2220      	movs	r2, #32
 800d22e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800d23a:	2303      	movs	r3, #3
 800d23c:	e00f      	b.n	800d25e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	4013      	ands	r3, r2
 800d248:	68ba      	ldr	r2, [r7, #8]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	bf0c      	ite	eq
 800d24e:	2301      	moveq	r3, #1
 800d250:	2300      	movne	r3, #0
 800d252:	b2db      	uxtb	r3, r3
 800d254:	461a      	mov	r2, r3
 800d256:	79fb      	ldrb	r3, [r7, #7]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d09f      	beq.n	800d19c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3740      	adds	r7, #64	@ 0x40
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
	...

0800d268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d26c:	b0c0      	sub	sp, #256	@ 0x100
 800d26e:	af00      	add	r7, sp, #0
 800d270:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d284:	68d9      	ldr	r1, [r3, #12]
 800d286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	ea40 0301 	orr.w	r3, r0, r1
 800d290:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d296:	689a      	ldr	r2, [r3, #8]
 800d298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	431a      	orrs	r2, r3
 800d2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2a4:	695b      	ldr	r3, [r3, #20]
 800d2a6:	431a      	orrs	r2, r3
 800d2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2ac:	69db      	ldr	r3, [r3, #28]
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d2c0:	f021 010c 	bic.w	r1, r1, #12
 800d2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d2ce:	430b      	orrs	r3, r1
 800d2d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	695b      	ldr	r3, [r3, #20]
 800d2da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d2de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2e2:	6999      	ldr	r1, [r3, #24]
 800d2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	ea40 0301 	orr.w	r3, r0, r1
 800d2ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	4b8f      	ldr	r3, [pc, #572]	@ (800d534 <UART_SetConfig+0x2cc>)
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d005      	beq.n	800d308 <UART_SetConfig+0xa0>
 800d2fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	4b8d      	ldr	r3, [pc, #564]	@ (800d538 <UART_SetConfig+0x2d0>)
 800d304:	429a      	cmp	r2, r3
 800d306:	d104      	bne.n	800d312 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d308:	f7fe f9a4 	bl	800b654 <HAL_RCC_GetPCLK2Freq>
 800d30c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d310:	e003      	b.n	800d31a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d312:	f7fe f98b 	bl	800b62c <HAL_RCC_GetPCLK1Freq>
 800d316:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d31e:	69db      	ldr	r3, [r3, #28]
 800d320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d324:	f040 810c 	bne.w	800d540 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d32c:	2200      	movs	r2, #0
 800d32e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d332:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d336:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d33a:	4622      	mov	r2, r4
 800d33c:	462b      	mov	r3, r5
 800d33e:	1891      	adds	r1, r2, r2
 800d340:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d342:	415b      	adcs	r3, r3
 800d344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d346:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d34a:	4621      	mov	r1, r4
 800d34c:	eb12 0801 	adds.w	r8, r2, r1
 800d350:	4629      	mov	r1, r5
 800d352:	eb43 0901 	adc.w	r9, r3, r1
 800d356:	f04f 0200 	mov.w	r2, #0
 800d35a:	f04f 0300 	mov.w	r3, #0
 800d35e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d36a:	4690      	mov	r8, r2
 800d36c:	4699      	mov	r9, r3
 800d36e:	4623      	mov	r3, r4
 800d370:	eb18 0303 	adds.w	r3, r8, r3
 800d374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d378:	462b      	mov	r3, r5
 800d37a:	eb49 0303 	adc.w	r3, r9, r3
 800d37e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d38e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d396:	460b      	mov	r3, r1
 800d398:	18db      	adds	r3, r3, r3
 800d39a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d39c:	4613      	mov	r3, r2
 800d39e:	eb42 0303 	adc.w	r3, r2, r3
 800d3a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d3a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d3ac:	f7f2 ff1e 	bl	80001ec <__aeabi_uldivmod>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4b61      	ldr	r3, [pc, #388]	@ (800d53c <UART_SetConfig+0x2d4>)
 800d3b6:	fba3 2302 	umull	r2, r3, r3, r2
 800d3ba:	095b      	lsrs	r3, r3, #5
 800d3bc:	011c      	lsls	r4, r3, #4
 800d3be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d3c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d3cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d3d0:	4642      	mov	r2, r8
 800d3d2:	464b      	mov	r3, r9
 800d3d4:	1891      	adds	r1, r2, r2
 800d3d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d3d8:	415b      	adcs	r3, r3
 800d3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d3e0:	4641      	mov	r1, r8
 800d3e2:	eb12 0a01 	adds.w	sl, r2, r1
 800d3e6:	4649      	mov	r1, r9
 800d3e8:	eb43 0b01 	adc.w	fp, r3, r1
 800d3ec:	f04f 0200 	mov.w	r2, #0
 800d3f0:	f04f 0300 	mov.w	r3, #0
 800d3f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d3f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d3fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d400:	4692      	mov	sl, r2
 800d402:	469b      	mov	fp, r3
 800d404:	4643      	mov	r3, r8
 800d406:	eb1a 0303 	adds.w	r3, sl, r3
 800d40a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d40e:	464b      	mov	r3, r9
 800d410:	eb4b 0303 	adc.w	r3, fp, r3
 800d414:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d424:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d428:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d42c:	460b      	mov	r3, r1
 800d42e:	18db      	adds	r3, r3, r3
 800d430:	643b      	str	r3, [r7, #64]	@ 0x40
 800d432:	4613      	mov	r3, r2
 800d434:	eb42 0303 	adc.w	r3, r2, r3
 800d438:	647b      	str	r3, [r7, #68]	@ 0x44
 800d43a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d43e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d442:	f7f2 fed3 	bl	80001ec <__aeabi_uldivmod>
 800d446:	4602      	mov	r2, r0
 800d448:	460b      	mov	r3, r1
 800d44a:	4611      	mov	r1, r2
 800d44c:	4b3b      	ldr	r3, [pc, #236]	@ (800d53c <UART_SetConfig+0x2d4>)
 800d44e:	fba3 2301 	umull	r2, r3, r3, r1
 800d452:	095b      	lsrs	r3, r3, #5
 800d454:	2264      	movs	r2, #100	@ 0x64
 800d456:	fb02 f303 	mul.w	r3, r2, r3
 800d45a:	1acb      	subs	r3, r1, r3
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d462:	4b36      	ldr	r3, [pc, #216]	@ (800d53c <UART_SetConfig+0x2d4>)
 800d464:	fba3 2302 	umull	r2, r3, r3, r2
 800d468:	095b      	lsrs	r3, r3, #5
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d470:	441c      	add	r4, r3
 800d472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d476:	2200      	movs	r2, #0
 800d478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d47c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d480:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d484:	4642      	mov	r2, r8
 800d486:	464b      	mov	r3, r9
 800d488:	1891      	adds	r1, r2, r2
 800d48a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d48c:	415b      	adcs	r3, r3
 800d48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d494:	4641      	mov	r1, r8
 800d496:	1851      	adds	r1, r2, r1
 800d498:	6339      	str	r1, [r7, #48]	@ 0x30
 800d49a:	4649      	mov	r1, r9
 800d49c:	414b      	adcs	r3, r1
 800d49e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a0:	f04f 0200 	mov.w	r2, #0
 800d4a4:	f04f 0300 	mov.w	r3, #0
 800d4a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d4ac:	4659      	mov	r1, fp
 800d4ae:	00cb      	lsls	r3, r1, #3
 800d4b0:	4651      	mov	r1, sl
 800d4b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d4b6:	4651      	mov	r1, sl
 800d4b8:	00ca      	lsls	r2, r1, #3
 800d4ba:	4610      	mov	r0, r2
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4603      	mov	r3, r0
 800d4c0:	4642      	mov	r2, r8
 800d4c2:	189b      	adds	r3, r3, r2
 800d4c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	460a      	mov	r2, r1
 800d4cc:	eb42 0303 	adc.w	r3, r2, r3
 800d4d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d4d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d4e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d4e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	18db      	adds	r3, r3, r3
 800d4ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	eb42 0303 	adc.w	r3, r2, r3
 800d4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d4fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d4fe:	f7f2 fe75 	bl	80001ec <__aeabi_uldivmod>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4b0d      	ldr	r3, [pc, #52]	@ (800d53c <UART_SetConfig+0x2d4>)
 800d508:	fba3 1302 	umull	r1, r3, r3, r2
 800d50c:	095b      	lsrs	r3, r3, #5
 800d50e:	2164      	movs	r1, #100	@ 0x64
 800d510:	fb01 f303 	mul.w	r3, r1, r3
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	3332      	adds	r3, #50	@ 0x32
 800d51a:	4a08      	ldr	r2, [pc, #32]	@ (800d53c <UART_SetConfig+0x2d4>)
 800d51c:	fba2 2303 	umull	r2, r3, r2, r3
 800d520:	095b      	lsrs	r3, r3, #5
 800d522:	f003 0207 	and.w	r2, r3, #7
 800d526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4422      	add	r2, r4
 800d52e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d530:	e106      	b.n	800d740 <UART_SetConfig+0x4d8>
 800d532:	bf00      	nop
 800d534:	40011000 	.word	0x40011000
 800d538:	40011400 	.word	0x40011400
 800d53c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d544:	2200      	movs	r2, #0
 800d546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d54a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d54e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d552:	4642      	mov	r2, r8
 800d554:	464b      	mov	r3, r9
 800d556:	1891      	adds	r1, r2, r2
 800d558:	6239      	str	r1, [r7, #32]
 800d55a:	415b      	adcs	r3, r3
 800d55c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d55e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d562:	4641      	mov	r1, r8
 800d564:	1854      	adds	r4, r2, r1
 800d566:	4649      	mov	r1, r9
 800d568:	eb43 0501 	adc.w	r5, r3, r1
 800d56c:	f04f 0200 	mov.w	r2, #0
 800d570:	f04f 0300 	mov.w	r3, #0
 800d574:	00eb      	lsls	r3, r5, #3
 800d576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d57a:	00e2      	lsls	r2, r4, #3
 800d57c:	4614      	mov	r4, r2
 800d57e:	461d      	mov	r5, r3
 800d580:	4643      	mov	r3, r8
 800d582:	18e3      	adds	r3, r4, r3
 800d584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d588:	464b      	mov	r3, r9
 800d58a:	eb45 0303 	adc.w	r3, r5, r3
 800d58e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d59e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d5a2:	f04f 0200 	mov.w	r2, #0
 800d5a6:	f04f 0300 	mov.w	r3, #0
 800d5aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	008b      	lsls	r3, r1, #2
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	008a      	lsls	r2, r1, #2
 800d5bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d5c0:	f7f2 fe14 	bl	80001ec <__aeabi_uldivmod>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4b60      	ldr	r3, [pc, #384]	@ (800d74c <UART_SetConfig+0x4e4>)
 800d5ca:	fba3 2302 	umull	r2, r3, r3, r2
 800d5ce:	095b      	lsrs	r3, r3, #5
 800d5d0:	011c      	lsls	r4, r3, #4
 800d5d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d5dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d5e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d5e4:	4642      	mov	r2, r8
 800d5e6:	464b      	mov	r3, r9
 800d5e8:	1891      	adds	r1, r2, r2
 800d5ea:	61b9      	str	r1, [r7, #24]
 800d5ec:	415b      	adcs	r3, r3
 800d5ee:	61fb      	str	r3, [r7, #28]
 800d5f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d5f4:	4641      	mov	r1, r8
 800d5f6:	1851      	adds	r1, r2, r1
 800d5f8:	6139      	str	r1, [r7, #16]
 800d5fa:	4649      	mov	r1, r9
 800d5fc:	414b      	adcs	r3, r1
 800d5fe:	617b      	str	r3, [r7, #20]
 800d600:	f04f 0200 	mov.w	r2, #0
 800d604:	f04f 0300 	mov.w	r3, #0
 800d608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d60c:	4659      	mov	r1, fp
 800d60e:	00cb      	lsls	r3, r1, #3
 800d610:	4651      	mov	r1, sl
 800d612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d616:	4651      	mov	r1, sl
 800d618:	00ca      	lsls	r2, r1, #3
 800d61a:	4610      	mov	r0, r2
 800d61c:	4619      	mov	r1, r3
 800d61e:	4603      	mov	r3, r0
 800d620:	4642      	mov	r2, r8
 800d622:	189b      	adds	r3, r3, r2
 800d624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d628:	464b      	mov	r3, r9
 800d62a:	460a      	mov	r2, r1
 800d62c:	eb42 0303 	adc.w	r3, r2, r3
 800d630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d63e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d640:	f04f 0200 	mov.w	r2, #0
 800d644:	f04f 0300 	mov.w	r3, #0
 800d648:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d64c:	4649      	mov	r1, r9
 800d64e:	008b      	lsls	r3, r1, #2
 800d650:	4641      	mov	r1, r8
 800d652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d656:	4641      	mov	r1, r8
 800d658:	008a      	lsls	r2, r1, #2
 800d65a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d65e:	f7f2 fdc5 	bl	80001ec <__aeabi_uldivmod>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4611      	mov	r1, r2
 800d668:	4b38      	ldr	r3, [pc, #224]	@ (800d74c <UART_SetConfig+0x4e4>)
 800d66a:	fba3 2301 	umull	r2, r3, r3, r1
 800d66e:	095b      	lsrs	r3, r3, #5
 800d670:	2264      	movs	r2, #100	@ 0x64
 800d672:	fb02 f303 	mul.w	r3, r2, r3
 800d676:	1acb      	subs	r3, r1, r3
 800d678:	011b      	lsls	r3, r3, #4
 800d67a:	3332      	adds	r3, #50	@ 0x32
 800d67c:	4a33      	ldr	r2, [pc, #204]	@ (800d74c <UART_SetConfig+0x4e4>)
 800d67e:	fba2 2303 	umull	r2, r3, r2, r3
 800d682:	095b      	lsrs	r3, r3, #5
 800d684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d688:	441c      	add	r4, r3
 800d68a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d68e:	2200      	movs	r2, #0
 800d690:	673b      	str	r3, [r7, #112]	@ 0x70
 800d692:	677a      	str	r2, [r7, #116]	@ 0x74
 800d694:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d698:	4642      	mov	r2, r8
 800d69a:	464b      	mov	r3, r9
 800d69c:	1891      	adds	r1, r2, r2
 800d69e:	60b9      	str	r1, [r7, #8]
 800d6a0:	415b      	adcs	r3, r3
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6a8:	4641      	mov	r1, r8
 800d6aa:	1851      	adds	r1, r2, r1
 800d6ac:	6039      	str	r1, [r7, #0]
 800d6ae:	4649      	mov	r1, r9
 800d6b0:	414b      	adcs	r3, r1
 800d6b2:	607b      	str	r3, [r7, #4]
 800d6b4:	f04f 0200 	mov.w	r2, #0
 800d6b8:	f04f 0300 	mov.w	r3, #0
 800d6bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d6c0:	4659      	mov	r1, fp
 800d6c2:	00cb      	lsls	r3, r1, #3
 800d6c4:	4651      	mov	r1, sl
 800d6c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6ca:	4651      	mov	r1, sl
 800d6cc:	00ca      	lsls	r2, r1, #3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	4642      	mov	r2, r8
 800d6d6:	189b      	adds	r3, r3, r2
 800d6d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d6da:	464b      	mov	r3, r9
 800d6dc:	460a      	mov	r2, r1
 800d6de:	eb42 0303 	adc.w	r3, r2, r3
 800d6e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800d6ee:	667a      	str	r2, [r7, #100]	@ 0x64
 800d6f0:	f04f 0200 	mov.w	r2, #0
 800d6f4:	f04f 0300 	mov.w	r3, #0
 800d6f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	008b      	lsls	r3, r1, #2
 800d700:	4641      	mov	r1, r8
 800d702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d706:	4641      	mov	r1, r8
 800d708:	008a      	lsls	r2, r1, #2
 800d70a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d70e:	f7f2 fd6d 	bl	80001ec <__aeabi_uldivmod>
 800d712:	4602      	mov	r2, r0
 800d714:	460b      	mov	r3, r1
 800d716:	4b0d      	ldr	r3, [pc, #52]	@ (800d74c <UART_SetConfig+0x4e4>)
 800d718:	fba3 1302 	umull	r1, r3, r3, r2
 800d71c:	095b      	lsrs	r3, r3, #5
 800d71e:	2164      	movs	r1, #100	@ 0x64
 800d720:	fb01 f303 	mul.w	r3, r1, r3
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	011b      	lsls	r3, r3, #4
 800d728:	3332      	adds	r3, #50	@ 0x32
 800d72a:	4a08      	ldr	r2, [pc, #32]	@ (800d74c <UART_SetConfig+0x4e4>)
 800d72c:	fba2 2303 	umull	r2, r3, r2, r3
 800d730:	095b      	lsrs	r3, r3, #5
 800d732:	f003 020f 	and.w	r2, r3, #15
 800d736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4422      	add	r2, r4
 800d73e:	609a      	str	r2, [r3, #8]
}
 800d740:	bf00      	nop
 800d742:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d746:	46bd      	mov	sp, r7
 800d748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d74c:	51eb851f 	.word	0x51eb851f

0800d750 <__itoa>:
 800d750:	1e93      	subs	r3, r2, #2
 800d752:	2b22      	cmp	r3, #34	@ 0x22
 800d754:	b510      	push	{r4, lr}
 800d756:	460c      	mov	r4, r1
 800d758:	d904      	bls.n	800d764 <__itoa+0x14>
 800d75a:	2300      	movs	r3, #0
 800d75c:	700b      	strb	r3, [r1, #0]
 800d75e:	461c      	mov	r4, r3
 800d760:	4620      	mov	r0, r4
 800d762:	bd10      	pop	{r4, pc}
 800d764:	2a0a      	cmp	r2, #10
 800d766:	d109      	bne.n	800d77c <__itoa+0x2c>
 800d768:	2800      	cmp	r0, #0
 800d76a:	da07      	bge.n	800d77c <__itoa+0x2c>
 800d76c:	232d      	movs	r3, #45	@ 0x2d
 800d76e:	700b      	strb	r3, [r1, #0]
 800d770:	4240      	negs	r0, r0
 800d772:	2101      	movs	r1, #1
 800d774:	4421      	add	r1, r4
 800d776:	f000 f805 	bl	800d784 <__utoa>
 800d77a:	e7f1      	b.n	800d760 <__itoa+0x10>
 800d77c:	2100      	movs	r1, #0
 800d77e:	e7f9      	b.n	800d774 <__itoa+0x24>

0800d780 <itoa>:
 800d780:	f7ff bfe6 	b.w	800d750 <__itoa>

0800d784 <__utoa>:
 800d784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d786:	4c1f      	ldr	r4, [pc, #124]	@ (800d804 <__utoa+0x80>)
 800d788:	b08b      	sub	sp, #44	@ 0x2c
 800d78a:	4605      	mov	r5, r0
 800d78c:	460b      	mov	r3, r1
 800d78e:	466e      	mov	r6, sp
 800d790:	f104 0c20 	add.w	ip, r4, #32
 800d794:	6820      	ldr	r0, [r4, #0]
 800d796:	6861      	ldr	r1, [r4, #4]
 800d798:	4637      	mov	r7, r6
 800d79a:	c703      	stmia	r7!, {r0, r1}
 800d79c:	3408      	adds	r4, #8
 800d79e:	4564      	cmp	r4, ip
 800d7a0:	463e      	mov	r6, r7
 800d7a2:	d1f7      	bne.n	800d794 <__utoa+0x10>
 800d7a4:	7921      	ldrb	r1, [r4, #4]
 800d7a6:	7139      	strb	r1, [r7, #4]
 800d7a8:	1e91      	subs	r1, r2, #2
 800d7aa:	6820      	ldr	r0, [r4, #0]
 800d7ac:	6038      	str	r0, [r7, #0]
 800d7ae:	2922      	cmp	r1, #34	@ 0x22
 800d7b0:	f04f 0100 	mov.w	r1, #0
 800d7b4:	d904      	bls.n	800d7c0 <__utoa+0x3c>
 800d7b6:	7019      	strb	r1, [r3, #0]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	b00b      	add	sp, #44	@ 0x2c
 800d7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c0:	1e58      	subs	r0, r3, #1
 800d7c2:	4684      	mov	ip, r0
 800d7c4:	fbb5 f7f2 	udiv	r7, r5, r2
 800d7c8:	fb02 5617 	mls	r6, r2, r7, r5
 800d7cc:	3628      	adds	r6, #40	@ 0x28
 800d7ce:	446e      	add	r6, sp
 800d7d0:	460c      	mov	r4, r1
 800d7d2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d7d6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d7da:	462e      	mov	r6, r5
 800d7dc:	42b2      	cmp	r2, r6
 800d7de:	f101 0101 	add.w	r1, r1, #1
 800d7e2:	463d      	mov	r5, r7
 800d7e4:	d9ee      	bls.n	800d7c4 <__utoa+0x40>
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	545a      	strb	r2, [r3, r1]
 800d7ea:	1919      	adds	r1, r3, r4
 800d7ec:	1aa5      	subs	r5, r4, r2
 800d7ee:	42aa      	cmp	r2, r5
 800d7f0:	dae3      	bge.n	800d7ba <__utoa+0x36>
 800d7f2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d7f6:	780e      	ldrb	r6, [r1, #0]
 800d7f8:	7006      	strb	r6, [r0, #0]
 800d7fa:	3201      	adds	r2, #1
 800d7fc:	f801 5901 	strb.w	r5, [r1], #-1
 800d800:	e7f4      	b.n	800d7ec <__utoa+0x68>
 800d802:	bf00      	nop
 800d804:	080366fc 	.word	0x080366fc

0800d808 <memset>:
 800d808:	4402      	add	r2, r0
 800d80a:	4603      	mov	r3, r0
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d100      	bne.n	800d812 <memset+0xa>
 800d810:	4770      	bx	lr
 800d812:	f803 1b01 	strb.w	r1, [r3], #1
 800d816:	e7f9      	b.n	800d80c <memset+0x4>

0800d818 <__libc_init_array>:
 800d818:	b570      	push	{r4, r5, r6, lr}
 800d81a:	4d0d      	ldr	r5, [pc, #52]	@ (800d850 <__libc_init_array+0x38>)
 800d81c:	4c0d      	ldr	r4, [pc, #52]	@ (800d854 <__libc_init_array+0x3c>)
 800d81e:	1b64      	subs	r4, r4, r5
 800d820:	10a4      	asrs	r4, r4, #2
 800d822:	2600      	movs	r6, #0
 800d824:	42a6      	cmp	r6, r4
 800d826:	d109      	bne.n	800d83c <__libc_init_array+0x24>
 800d828:	4d0b      	ldr	r5, [pc, #44]	@ (800d858 <__libc_init_array+0x40>)
 800d82a:	4c0c      	ldr	r4, [pc, #48]	@ (800d85c <__libc_init_array+0x44>)
 800d82c:	f000 f826 	bl	800d87c <_init>
 800d830:	1b64      	subs	r4, r4, r5
 800d832:	10a4      	asrs	r4, r4, #2
 800d834:	2600      	movs	r6, #0
 800d836:	42a6      	cmp	r6, r4
 800d838:	d105      	bne.n	800d846 <__libc_init_array+0x2e>
 800d83a:	bd70      	pop	{r4, r5, r6, pc}
 800d83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d840:	4798      	blx	r3
 800d842:	3601      	adds	r6, #1
 800d844:	e7ee      	b.n	800d824 <__libc_init_array+0xc>
 800d846:	f855 3b04 	ldr.w	r3, [r5], #4
 800d84a:	4798      	blx	r3
 800d84c:	3601      	adds	r6, #1
 800d84e:	e7f2      	b.n	800d836 <__libc_init_array+0x1e>
 800d850:	0803672c 	.word	0x0803672c
 800d854:	0803672c 	.word	0x0803672c
 800d858:	0803672c 	.word	0x0803672c
 800d85c:	08036730 	.word	0x08036730

0800d860 <memcpy>:
 800d860:	440a      	add	r2, r1
 800d862:	4291      	cmp	r1, r2
 800d864:	f100 33ff 	add.w	r3, r0, #4294967295
 800d868:	d100      	bne.n	800d86c <memcpy+0xc>
 800d86a:	4770      	bx	lr
 800d86c:	b510      	push	{r4, lr}
 800d86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d872:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d876:	4291      	cmp	r1, r2
 800d878:	d1f9      	bne.n	800d86e <memcpy+0xe>
 800d87a:	bd10      	pop	{r4, pc}

0800d87c <_init>:
 800d87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87e:	bf00      	nop
 800d880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d882:	bc08      	pop	{r3}
 800d884:	469e      	mov	lr, r3
 800d886:	4770      	bx	lr

0800d888 <_fini>:
 800d888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88a:	bf00      	nop
 800d88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d88e:	bc08      	pop	{r3}
 800d890:	469e      	mov	lr, r3
 800d892:	4770      	bx	lr
