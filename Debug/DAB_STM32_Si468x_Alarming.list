
DAB_STM32_Si468x_Alarming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e23c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000293c0  0800e3c4  0800e3c4  0000f3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037784  08037784  00039188  2**0
                  CONTENTS
  4 .ARM          00000008  08037784  08037784  00038784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803778c  0803778c  00039188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803778c  0803778c  0003878c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08037790  08037790  00038790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08037794  00039000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00039188  2**0
                  CONTENTS
 10 .bss          00007128  20000188  20000188  00039188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200072b0  200072b0  00039188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00039188  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196d8  00000000  00000000  000391b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c7  00000000  00000000  00052890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  00056958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011df  00000000  00000000  00058010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d94  00000000  00000000  000591ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f640  00000000  00000000  0007df83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3901  00000000  00000000  0009d5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00170ec4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e14  00000000  00000000  00170f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00176d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e3ac 	.word	0x0800e3ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800e3ac 	.word	0x0800e3ac

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 800051c:	f000 f914 	bl	8000748 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fb97 	bl	8000c54 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8000526:	20cb      	movs	r0, #203	@ 0xcb
 8000528:	f000 fb94 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800052c:	2039      	movs	r0, #57	@ 0x39
 800052e:	f000 fba0 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8000532:	202c      	movs	r0, #44	@ 0x2c
 8000534:	f000 fb9d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fb9a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800053e:	2034      	movs	r0, #52	@ 0x34
 8000540:	f000 fb97 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fb94 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800054a:	20cf      	movs	r0, #207	@ 0xcf
 800054c:	f000 fb82 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fb8e 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000556:	20c1      	movs	r0, #193	@ 0xc1
 8000558:	f000 fb8b 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 800055c:	2030      	movs	r0, #48	@ 0x30
 800055e:	f000 fb88 	bl	8000c72 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000562:	20e8      	movs	r0, #232	@ 0xe8
 8000564:	f000 fb76 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000568:	2085      	movs	r0, #133	@ 0x85
 800056a:	f000 fb82 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fb7f 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000574:	2078      	movs	r0, #120	@ 0x78
 8000576:	f000 fb7c 	bl	8000c72 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800057a:	20ea      	movs	r0, #234	@ 0xea
 800057c:	f000 fb6a 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fb76 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fb73 	bl	8000c72 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 800058c:	20ed      	movs	r0, #237	@ 0xed
 800058e:	f000 fb61 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000592:	2064      	movs	r0, #100	@ 0x64
 8000594:	f000 fb6d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fb6a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800059e:	2012      	movs	r0, #18
 80005a0:	f000 fb67 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80005a4:	2081      	movs	r0, #129	@ 0x81
 80005a6:	f000 fb64 	bl	8000c72 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80005aa:	20f7      	movs	r0, #247	@ 0xf7
 80005ac:	f000 fb52 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80005b0:	2020      	movs	r0, #32
 80005b2:	f000 fb5e 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80005b6:	20c0      	movs	r0, #192	@ 0xc0
 80005b8:	f000 fb4c 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 fb58 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80005c2:	20c1      	movs	r0, #193	@ 0xc1
 80005c4:	f000 fb46 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f000 fb52 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80005ce:	20c5      	movs	r0, #197	@ 0xc5
 80005d0:	f000 fb40 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80005d4:	203e      	movs	r0, #62	@ 0x3e
 80005d6:	f000 fb4c 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80005da:	2028      	movs	r0, #40	@ 0x28
 80005dc:	f000 fb49 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005e0:	20c7      	movs	r0, #199	@ 0xc7
 80005e2:	f000 fb37 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005e6:	2086      	movs	r0, #134	@ 0x86
 80005e8:	f000 fb43 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005ec:	2036      	movs	r0, #54	@ 0x36
 80005ee:	f000 fb31 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005f2:	2048      	movs	r0, #72	@ 0x48
 80005f4:	f000 fb3d 	bl	8000c72 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f000 fb2b 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005fe:	2055      	movs	r0, #85	@ 0x55
 8000600:	f000 fb37 	bl	8000c72 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8000604:	20b1      	movs	r0, #177	@ 0xb1
 8000606:	f000 fb25 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fb31 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8000610:	2018      	movs	r0, #24
 8000612:	f000 fb2e 	bl	8000c72 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8000616:	20b6      	movs	r0, #182	@ 0xb6
 8000618:	f000 fb1c 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800061c:	2008      	movs	r0, #8
 800061e:	f000 fb28 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8000622:	2082      	movs	r0, #130	@ 0x82
 8000624:	f000 fb25 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000628:	2027      	movs	r0, #39	@ 0x27
 800062a:	f000 fb22 	bl	8000c72 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800062e:	20f2      	movs	r0, #242	@ 0xf2
 8000630:	f000 fb10 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fb1c 	bl	8000c72 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800063a:	2026      	movs	r0, #38	@ 0x26
 800063c:	f000 fb0a 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fb16 	bl	8000c72 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8000646:	20e0      	movs	r0, #224	@ 0xe0
 8000648:	f000 fb04 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800064c:	200f      	movs	r0, #15
 800064e:	f000 fb10 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000652:	2031      	movs	r0, #49	@ 0x31
 8000654:	f000 fb0d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000658:	202b      	movs	r0, #43	@ 0x2b
 800065a:	f000 fb0a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800065e:	200c      	movs	r0, #12
 8000660:	f000 fb07 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000664:	200e      	movs	r0, #14
 8000666:	f000 fb04 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800066a:	2008      	movs	r0, #8
 800066c:	f000 fb01 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000670:	204e      	movs	r0, #78	@ 0x4e
 8000672:	f000 fafe 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8000676:	20f1      	movs	r0, #241	@ 0xf1
 8000678:	f000 fafb 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 800067c:	2037      	movs	r0, #55	@ 0x37
 800067e:	f000 faf8 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000682:	2007      	movs	r0, #7
 8000684:	f000 faf5 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000688:	2010      	movs	r0, #16
 800068a:	f000 faf2 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800068e:	2003      	movs	r0, #3
 8000690:	f000 faef 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000694:	200e      	movs	r0, #14
 8000696:	f000 faec 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800069a:	2009      	movs	r0, #9
 800069c:	f000 fae9 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fae6 	bl	8000c72 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80006a6:	20e1      	movs	r0, #225	@ 0xe1
 80006a8:	f000 fad4 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fae0 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80006b2:	200e      	movs	r0, #14
 80006b4:	f000 fadd 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80006b8:	2014      	movs	r0, #20
 80006ba:	f000 fada 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80006be:	2003      	movs	r0, #3
 80006c0:	f000 fad7 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80006c4:	2011      	movs	r0, #17
 80006c6:	f000 fad4 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80006ca:	2007      	movs	r0, #7
 80006cc:	f000 fad1 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006d0:	2031      	movs	r0, #49	@ 0x31
 80006d2:	f000 face 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80006d6:	20c1      	movs	r0, #193	@ 0xc1
 80006d8:	f000 facb 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006dc:	2048      	movs	r0, #72	@ 0x48
 80006de:	f000 fac8 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006e2:	2008      	movs	r0, #8
 80006e4:	f000 fac5 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006e8:	200f      	movs	r0, #15
 80006ea:	f000 fac2 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006ee:	200c      	movs	r0, #12
 80006f0:	f000 fabf 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006f4:	2031      	movs	r0, #49	@ 0x31
 80006f6:	f000 fabc 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006fa:	2036      	movs	r0, #54	@ 0x36
 80006fc:	f000 fab9 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000700:	200f      	movs	r0, #15
 8000702:	f000 fab6 	bl	8000c72 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8000706:	2011      	movs	r0, #17
 8000708:	f000 faa4 	bl	8000c54 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800070c:	2029      	movs	r0, #41	@ 0x29
 800070e:	f000 faa1 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8000712:	202c      	movs	r0, #44	@ 0x2c
 8000714:	f000 faad 	bl	8000c72 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f83d 	bl	8000798 <ILI9341_Set_Rotation>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	2301      	movs	r3, #1
 8000732:	2201      	movs	r2, #1
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <ILI9341_SPI_Send+0x20>)
 8000736:	f00b fdc2 	bl	800c2be <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000702c 	.word	0x2000702c

08000748 <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	RESET_ON;
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000752:	4810      	ldr	r0, [pc, #64]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000754:	f008 fbde 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000758:	2032      	movs	r0, #50	@ 0x32
 800075a:	f007 fdd7 	bl	800830c <HAL_Delay>
	RESET_OFF;
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000766:	f008 fbd5 	bl	8008f14 <HAL_GPIO_WritePin>
	CS_ON;
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000772:	f008 fbcf 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f007 fdc8 	bl	800830c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fa69 	bl	8000c54 <ILI9341_Send_Command>
	CS_OFF;
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <ILI9341_Reset+0x4c>)
 800078a:	f008 fbc3 	bl	8008f14 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020c00 	.word	0x40020c00

08000798 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 80007a2:	2036      	movs	r0, #54	@ 0x36
 80007a4:	f000 fa56 	bl	8000c54 <ILI9341_Send_Command>
	switch (rotation) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d836      	bhi.n	800081c <ILI9341_Set_Rotation+0x84>
 80007ae:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <ILI9341_Set_Rotation+0x1c>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007c5 	.word	0x080007c5
 80007b8:	080007db 	.word	0x080007db
 80007bc:	080007f1 	.word	0x080007f1
 80007c0:	08000807 	.word	0x08000807
	case 0:
		ILI9341_Send_Data(0x48);
 80007c4:	2048      	movs	r0, #72	@ 0x48
 80007c6:	f000 fa54 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007cc:	22f0      	movs	r2, #240	@ 0xf0
 80007ce:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		break;
 80007d8:	e020      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80007da:	2028      	movs	r0, #40	@ 0x28
 80007dc:	f000 fa49 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007e6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007ea:	22f0      	movs	r2, #240	@ 0xf0
 80007ec:	601a      	str	r2, [r3, #0]
		break;
 80007ee:	e015      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007f0:	2088      	movs	r0, #136	@ 0x88
 80007f2:	f000 fa3e 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007f8:	22f0      	movs	r2, #240	@ 0xf0
 80007fa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000802:	601a      	str	r2, [r3, #0]
		break;
 8000804:	e00a      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 8000806:	20e8      	movs	r0, #232	@ 0xe8
 8000808:	f000 fa33 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 320;
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 800080e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000812:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 8000816:	22f0      	movs	r2, #240	@ 0xf0
 8000818:	601a      	str	r2, [r3, #0]
		break;
 800081a:	bf00      	nop
	}
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000004 	.word	0x20000004

0800082c <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083e:	4817      	ldr	r0, [pc, #92]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 8000840:	f008 fb68 	bl	8008f14 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084a:	4814      	ldr	r0, [pc, #80]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 800084c:	f008 fb62 	bl	8008f14 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff66 	bl	8000724 <ILI9341_SPI_Send>

	DC_DATA;
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085e:	480f      	ldr	r0, [pc, #60]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 8000860:	f008 fb58 	bl	8008f14 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0e1b      	lsrs	r3, r3, #24
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff5a 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff54 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff4e 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff49 	bl	8000724 <ILI9341_SPI_Send>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00

080008a0 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	617b      	str	r3, [r7, #20]
	t |= x2;
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4313      	orrs	r3, r2
 80008be:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 80008c0:	6979      	ldr	r1, [r7, #20]
 80008c2:	202a      	movs	r0, #42	@ 0x2a
 80008c4:	f7ff ffb2 	bl	800082c <ILI9341_SPI_Send_32>
	t = y1;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	617b      	str	r3, [r7, #20]
	t |= y2;
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80008da:	6979      	ldr	r1, [r7, #20]
 80008dc:	202b      	movs	r0, #43	@ 0x2b
 80008de:	f7ff ffa5 	bl	800082c <ILI9341_SPI_Send_32>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <ILI9341_Fill_Screen+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <ILI9341_Fill_Screen+0x44>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ffcc 	bl	80008a0 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	b29b      	uxth	r3, r3
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <ILI9341_Fill_Screen+0x40>)
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	4611      	mov	r1, r2
 8000912:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <ILI9341_Fill_Screen+0x44>)
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	fb01 f202 	mul.w	r2, r1, r2
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f9b7 	bl	8000c90 <ILI9341_Send_Burst>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004

08000934 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db31      	blt.n	80009aa <ILI9341_Draw_Pixel+0x76>
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db2e      	blt.n	80009aa <ILI9341_Draw_Pixel+0x76>
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <ILI9341_Draw_Pixel+0x80>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	d229      	bcs.n	80009aa <ILI9341_Draw_Pixel+0x76>
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <ILI9341_Draw_Pixel+0x84>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d224      	bcs.n	80009aa <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <ILI9341_Draw_Pixel+0x80>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <ILI9341_Draw_Pixel+0x84>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3b01      	subs	r3, #1
 8000970:	f7ff ff96 	bl	80008a0 <ILI9341_Set_Address>
	DC_COMMAND;
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097a:	4810      	ldr	r0, [pc, #64]	@ (80009bc <ILI9341_Draw_Pixel+0x88>)
 800097c:	f008 faca 	bl	8008f14 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000980:	202c      	movs	r0, #44	@ 0x2c
 8000982:	f7ff fecf 	bl	8000724 <ILI9341_SPI_Send>
	DC_DATA;
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098c:	480b      	ldr	r0, [pc, #44]	@ (80009bc <ILI9341_Draw_Pixel+0x88>)
 800098e:	f008 fac1 	bl	8008f14 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fec3 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff febe 	bl	8000724 <ILI9341_SPI_Send>
 80009a8:	e000      	b.n	80009ac <ILI9341_Draw_Pixel+0x78>
		return;
 80009aa:	bf00      	nop
}
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f7ff ff63 	bl	80008a0 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	b298      	uxth	r0, r3
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	4619      	mov	r1, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	fb01 f303 	mul.w	r3, r1, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	f000 f94b 	bl	8000c90 <ILI9341_Send_Burst>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b08c      	sub	sp, #48	@ 0x30
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1acb      	subs	r3, r1, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bfb8      	it	lt
 8000a28:	425b      	neglt	r3, r3
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	bfcc      	ite	gt
 8000a2e:	2301      	movgt	r3, #1
 8000a30:	2300      	movle	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24

	if (steep)
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00d      	beq.n	8000a58 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000a48:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	843b      	strh	r3, [r7, #32]
 8000a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a56:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	if(x1>x2)
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d90d      	bls.n	8000a7c <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	83fb      	strh	r3, [r7, #30]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a6c:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	83bb      	strh	r3, [r7, #28]
 8000a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bfb8      	it	lt
 8000a8e:	425b      	neglt	r3, r3
 8000a90:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	0fda      	lsrs	r2, r3, #31
 8000a96:	4413      	add	r3, r2
 8000a98:	105b      	asrs	r3, r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ystep;
	if(y1 < y2)
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d202      	bcs.n	8000aaa <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	e023      	b.n	8000af2 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	for (; x1 <= x2; x1++)
 8000ab0:	e01f      	b.n	8000af2 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff38 	bl	8000934 <ILI9341_Draw_Pixel>
 8000ac4:	e005      	b.n	8000ad2 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff31 	bl	8000934 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (err < 0)
 8000ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	da05      	bge.n	8000aec <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
			err = dx;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (; x1 <= x2; x1++)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d9db      	bls.n	8000ab2 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	@ 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b12:	7f3b      	ldrb	r3, [r7, #28]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d061      	beq.n	8000bdc <ILI9341_Draw_String+0xd8>
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	f300 8092 	bgt.w	8000c42 <ILI9341_Draw_String+0x13e>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d028      	beq.n	8000b74 <ILI9341_Draw_String+0x70>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d02b      	beq.n	8000b7e <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b26:	e08c      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b28:	7f3b      	ldrb	r3, [r7, #28]
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	441a      	add	r2, r3
 8000b32:	4b46      	ldr	r3, [pc, #280]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d907      	bls.n	8000b4a <ILI9341_Draw_String+0x46>
				x = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b3e:	7f3b      	ldrb	r3, [r7, #28]
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	461a      	mov	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4413      	add	r3, r2
 8000b48:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	7f3a      	ldrb	r2, [r7, #28]
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	f000 f95a 	bl	8000e14 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	3b02      	subs	r3, #2
 8000b6c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3301      	adds	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1d5      	bne.n	8000b28 <ILI9341_Draw_String+0x24>
	break;
 8000b7c:	e061      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b7e:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b84:	e025      	b.n	8000bd2 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b86:	7f3b      	ldrb	r3, [r7, #28]
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	441a      	add	r2, r3
 8000b90:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d907      	bls.n	8000ba8 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b9c:	7f3b      	ldrb	r3, [r7, #28]
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	7f3a      	ldrb	r2, [r7, #28]
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	f000 f92b 	bl	8000e14 <ILI9341_Draw_Char>
			x += hh*8;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1d5      	bne.n	8000b86 <ILI9341_Draw_String+0x82>
	break;
 8000bda:	e032      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000be2:	e029      	b.n	8000c38 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000be4:	7f3b      	ldrb	r3, [r7, #28]
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	461a      	mov	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	441a      	add	r2, r3
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d907      	bls.n	8000c06 <ILI9341_Draw_String+0x102>
				x = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4413      	add	r3, r2
 8000c04:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	7f3a      	ldrb	r2, [r7, #28]
 8000c10:	9201      	str	r2, [sp, #4]
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f000 f8fc 	bl	8000e14 <ILI9341_Draw_Char>
			x += hh*10;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1d1      	bne.n	8000be4 <ILI9341_Draw_String+0xe0>
	break;
 8000c40:	bf00      	nop
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	200001a4 	.word	0x200001a4

08000c54 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c5e:	f000 fa09 	bl	8001074 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd5d 	bl	8000724 <ILI9341_SPI_Send>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c7c:	f000 f9e8 	bl	8001050 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd4e 	bl	8000724 <ILI9341_SPI_Send>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	733b      	strb	r3, [r7, #12]
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cae:	4858      	ldr	r0, [pc, #352]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cb0:	f008 f930 	bl	8008f14 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cba:	4855      	ldr	r0, [pc, #340]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cbc:	f008 f92a 	bl	8008f14 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cc0:	202c      	movs	r0, #44	@ 0x2c
 8000cc2:	f7ff fd2f 	bl	8000724 <ILI9341_SPI_Send>
	DC_DATA;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ccc:	4850      	ldr	r0, [pc, #320]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cce:	f008 f921 	bl	8008f14 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cd2:	7b3b      	ldrb	r3, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd25 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd21 	bl	8000724 <ILI9341_SPI_Send>
	len--;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cee:	7b3a      	ldrb	r2, [r7, #12]
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d169      	bne.n	8000dca <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cf6:	e027      	b.n	8000d48 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd10 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fd0c 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fd08 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd04 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd00 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d24:	7afb      	ldrb	r3, [r7, #11]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcfc 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fcf8 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcf4 	bl	8000724 <ILI9341_SPI_Send>
			} while (--i);
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	737b      	strb	r3, [r7, #13]
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1d9      	bne.n	8000cfc <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	81fa      	strh	r2, [r7, #14]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1d2      	bne.n	8000cf8 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d5a:	737b      	strb	r3, [r7, #13]
 8000d5c:	e007      	b.n	8000d6e <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fcdf 	bl	8000724 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcdb 	bl	8000724 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	7b7b      	ldrb	r3, [r7, #13]
 8000d70:	1e5a      	subs	r2, r3, #1
 8000d72:	737a      	strb	r2, [r7, #13]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f2      	bne.n	8000d5e <ILI9341_Send_Burst+0xce>
 8000d78:	e03f      	b.n	8000dfa <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d7e:	7b3b      	ldrb	r3, [r7, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fccf 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fccb 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcc7 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcc3 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fcbf 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fcbb 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dae:	7b3b      	ldrb	r3, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fcb7 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fcb3 	bl	8000724 <ILI9341_SPI_Send>
			} while (--i);
 8000dbe:	7b7b      	ldrb	r3, [r7, #13]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	737b      	strb	r3, [r7, #13]
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1d9      	bne.n	8000d7e <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	1e5a      	subs	r2, r3, #1
 8000dce:	81fa      	strh	r2, [r7, #14]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1d2      	bne.n	8000d7a <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ddc:	737b      	strb	r3, [r7, #13]
 8000dde:	e007      	b.n	8000df0 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc9e 	bl	8000724 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fc9a 	bl	8000724 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	7b7b      	ldrb	r3, [r7, #13]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	737a      	strb	r2, [r7, #13]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f2      	bne.n	8000de0 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000e02:	f008 f887 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40020c00 	.word	0x40020c00

08000e14 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	f000 80b2 	beq.w	8000f90 <ILI9341_Draw_Char+0x17c>
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	f300 8104 	bgt.w	800103a <ILI9341_Draw_Char+0x226>
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d002      	beq.n	8000e3c <ILI9341_Draw_Char+0x28>
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d055      	beq.n	8000ee6 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e3a:	e0fe      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3305      	adds	r3, #5
 8000e44:	461a      	mov	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3308      	adds	r3, #8
 8000e4a:	f7ff fd29 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e54:	487b      	ldr	r0, [pc, #492]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000e56:	f008 f85d 	bl	8008f14 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e5a:	202c      	movs	r0, #44	@ 0x2c
 8000e5c:	f7ff fc62 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e66:	4877      	ldr	r0, [pc, #476]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000e68:	f008 f854 	bl	8008f14 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	e035      	b.n	8000ede <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e72:	2302      	movs	r3, #2
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e02c      	b.n	8000ed2 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e7c:	3b20      	subs	r3, #32
 8000e7e:	4a72      	ldr	r2, [pc, #456]	@ (8001048 <ILI9341_Draw_Char+0x234>)
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	441a      	add	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	fa42 f303 	asr.w	r3, r2, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc3d 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fc38 	bl	8000724 <ILI9341_SPI_Send>
 8000eb4:	e00a      	b.n	8000ecc <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc31 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fc2c 	bl	8000724 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	ddcf      	ble.n	8000e78 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	3301      	adds	r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	ddc6      	ble.n	8000e72 <ILI9341_Draw_Char+0x5e>
			break;
 8000ee4:	e0a9      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3307      	adds	r3, #7
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	f7ff fcd4 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efe:	4851      	ldr	r0, [pc, #324]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000f00:	f008 f808 	bl	8008f14 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f04:	202c      	movs	r0, #44	@ 0x2c
 8000f06:	f7ff fc0d 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f10:	484c      	ldr	r0, [pc, #304]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000f12:	f007 ffff 	bl	8008f14 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	e035      	b.n	8000f88 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e02c      	b.n	8000f7c <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f26:	3b20      	subs	r3, #32
 8000f28:	4a48      	ldr	r2, [pc, #288]	@ (800104c <ILI9341_Draw_Char+0x238>)
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	441a      	add	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f1c3 0307 	rsb	r3, r3, #7
 8000f3c:	fa42 f303 	asr.w	r3, r2, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00b      	beq.n	8000f60 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fbe8 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbe3 	bl	8000724 <ILI9341_SPI_Send>
 8000f5e:	e00a      	b.n	8000f76 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fbdc 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fbd7 	bl	8000724 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	ddcf      	ble.n	8000f22 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	3301      	adds	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	ddc6      	ble.n	8000f1c <ILI9341_Draw_Char+0x108>
		break;
 8000f8e:	e054      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3309      	adds	r3, #9
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3310      	adds	r3, #16
 8000f9e:	f7ff fc7f 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa8:	4826      	ldr	r0, [pc, #152]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000faa:	f007 ffb3 	bl	8008f14 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fae:	202c      	movs	r0, #44	@ 0x2c
 8000fb0:	f7ff fbb8 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fba:	4822      	ldr	r0, [pc, #136]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000fbc:	f007 ffaa 	bl	8008f14 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e035      	b.n	8001032 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e02c      	b.n	8001026 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <ILI9341_Draw_Char+0x238>)
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	441a      	add	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	fa42 f303 	asr.w	r3, r2, r3
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fb93 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fb8e 	bl	8000724 <ILI9341_SPI_Send>
 8001008:	e00a      	b.n	8001020 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fb87 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fb82 	bl	8000724 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b07      	cmp	r3, #7
 800102a:	ddcf      	ble.n	8000fcc <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3301      	adds	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b1d      	cmp	r3, #29
 8001036:	ddc6      	ble.n	8000fc6 <ILI9341_Draw_Char+0x1b2>
		break;
 8001038:	bf00      	nop
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020c00 	.word	0x40020c00
 8001048:	0800ff7c 	.word	0x0800ff7c
 800104c:	08010254 	.word	0x08010254

08001050 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <Before_Sending_Data+0x20>)
 800105c:	f007 ff5a 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001066:	4802      	ldr	r0, [pc, #8]	@ (8001070 <Before_Sending_Data+0x20>)
 8001068:	f007 ff54 	bl	8008f14 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020c00 	.word	0x40020c00

08001074 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <Before_Sending_Command+0x20>)
 8001080:	f007 ff48 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800108a:	4802      	ldr	r0, [pc, #8]	@ (8001094 <Before_Sending_Command+0x20>)
 800108c:	f007 ff42 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020c00 	.word	0x40020c00

08001098 <ILI9341_Draw_Start_Screen>:



void ILI9341_Draw_Start_Screen(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    ILI9341_Set_Address(0, 0, 319, 239);
 800109e:	23ef      	movs	r3, #239	@ 0xef
 80010a0:	f240 123f 	movw	r2, #319	@ 0x13f
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbfa 	bl	80008a0 <ILI9341_Set_Address>

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // Komenda
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b2:	481b      	ldr	r0, [pc, #108]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010b4:	f007 ff2e 	bl	8008f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010be:	4818      	ldr	r0, [pc, #96]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010c0:	f007 ff28 	bl	8008f14 <HAL_GPIO_WritePin>
    ILI9341_SPI_Send(0x2C);
 80010c4:	202c      	movs	r0, #44	@ 0x2c
 80010c6:	f7ff fb2d 	bl	8000724 <ILI9341_SPI_Send>

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // Dane
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d0:	4813      	ldr	r0, [pc, #76]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010d2:	f007 ff1f 	bl	8008f14 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < 320 * 240; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	e013      	b.n	8001104 <ILI9341_Draw_Start_Screen+0x6c>
    {
        uint16_t color = start_screen[i];
 80010dc:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <ILI9341_Draw_Start_Screen+0x8c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e4:	807b      	strh	r3, [r7, #2]
        ILI9341_SPI_Send(color >> 8);
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fb18 	bl	8000724 <ILI9341_SPI_Send>
        ILI9341_SPI_Send(color & 0xFF);
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fb13 	bl	8000724 <ILI9341_SPI_Send>
    for (uint32_t i = 0; i < 320 * 240; i++)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800110a:	d3e7      	bcc.n	80010dc <ILI9341_Draw_Start_Screen+0x44>
    }

    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 8001114:	f007 fefe 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020c00 	.word	0x40020c00
 8001124:	08010844 	.word	0x08010844

08001128 <Si468x_dab_init>:

static uint16_t rssi_hi_res;


void Si468x_dab_init()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 800112c:	2101      	movs	r1, #1
 800112e:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <Si468x_dab_init+0xa8>)
 8001130:	f003 f9f8 	bl	8004524 <send_debug_msg>
	Si468x_reset();
 8001134:	f000 f84e 	bl	80011d4 <Si468x_reset>
	Si468x_power_up();
 8001138:	f000 f868 	bl	800120c <Si468x_power_up>
	Si468x_bootloader_load_host();
 800113c:	f000 f8ea 	bl	8001314 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_6_0_9_START_ADDR);
 8001140:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8001144:	f000 f95a 	bl	80013fc <Si468x_firmware_load_flash>
	Si468x_boot();
 8001148:	f000 f9f8 	bl	800153c <Si468x_boot>
	Si468x_get_part_info();
 800114c:	f000 fbb0 	bl	80018b0 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001150:	f000 fb28 	bl	80017a4 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, dla FM dać 0x00 (otwarty), dla DAB 0x01 (zamkniety)
 8001154:	2101      	movs	r1, #1
 8001156:	f241 7012 	movw	r0, #5906	@ 0x1712
 800115a:	f000 fc17 	bl	800198c <Si468x_set_property>
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF468); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5. Wartość z kalibracji DAB: 0xF468 (-2968)
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x250); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3. Wartość z kalibracji DAB: 0x0250 (592)
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x5); 				//prog RSSI od kiedy łapie kanał, default 12
 800115e:	2105      	movs	r1, #5
 8001160:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8001164:	f000 fc12 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 8001168:	2130      	movs	r1, #48	@ 0x30
 800116a:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 800116e:	f000 fc0d 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 8001172:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001176:	f24b 2002 	movw	r0, #45570	@ 0xb202
 800117a:	f000 fc07 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta. bylo 0x4005
 800117e:	f244 0105 	movw	r1, #16389	@ 0x4005
 8001182:	f44f 4034 	mov.w	r0, #46080	@ 0xb400
 8001186:	f000 fc01 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 800118a:	2101      	movs	r1, #1
 800118c:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8001190:	f000 fbfc 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001194:	2101      	movs	r1, #1
 8001196:	f24b 3002 	movw	r0, #45826	@ 0xb302
 800119a:	f000 fbf7 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 800119e:	2101      	movs	r1, #1
 80011a0:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 80011a4:	f000 fbf2 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80011a8:	2105      	movs	r1, #5
 80011aa:	f24b 5001 	movw	r0, #46337	@ 0xb501
 80011ae:	f000 fbed 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80011b2:	f24e 21c4 	movw	r1, #58052	@ 0xe2c4
 80011b6:	f24b 5003 	movw	r0, #46339	@ 0xb503
 80011ba:	f000 fbe7 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 80011be:	2101      	movs	r1, #1
 80011c0:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 80011c4:	f000 fbe2 	bl	800198c <Si468x_set_property>
	//Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 80011c8:	f000 faec 	bl	80017a4 <Si468x_get_sys_state>

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	0800e474 	.word	0x0800e474

080011d4 <Si468x_reset>:

void Si468x_reset()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 80011d8:	2101      	movs	r1, #1
 80011da:	480a      	ldr	r0, [pc, #40]	@ (8001204 <Si468x_reset+0x30>)
 80011dc:	f003 f9a2 	bl	8004524 <send_debug_msg>
	RESET_PIN_LOW;
 80011e0:	2200      	movs	r2, #0
 80011e2:	2120      	movs	r1, #32
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <Si468x_reset+0x34>)
 80011e6:	f007 fe95 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	@ 0x64
 80011ec:	f007 f88e 	bl	800830c <HAL_Delay>
	RESET_PIN_HIGH;
 80011f0:	2201      	movs	r2, #1
 80011f2:	2120      	movs	r1, #32
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <Si468x_reset+0x34>)
 80011f6:	f007 fe8d 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80011fa:	20c8      	movs	r0, #200	@ 0xc8
 80011fc:	f007 f886 	bl	800830c <HAL_Delay>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800e4c4 	.word	0x0800e4c4
 8001208:	40020800 	.word	0x40020800

0800120c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001210:	2101      	movs	r1, #1
 8001212:	4826      	ldr	r0, [pc, #152]	@ (80012ac <Si468x_power_up+0xa0>)
 8001214:	f003 f986 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <Si468x_power_up+0xa4>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001220:	2280      	movs	r2, #128	@ 0x80
 8001222:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001226:	2217      	movs	r2, #23
 8001228:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <Si468x_power_up+0xa4>)
 800122c:	2250      	movs	r2, #80	@ 0x50
 800122e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001238:	22f8      	movs	r2, #248	@ 0xf8
 800123a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <Si468x_power_up+0xa4>)
 800123e:	2224      	movs	r2, #36	@ 0x24
 8001240:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001244:	2201      	movs	r2, #1
 8001246:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <Si468x_power_up+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001250:	2210      	movs	r2, #16
 8001252:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <Si468x_power_up+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001268:	2228      	movs	r2, #40	@ 0x28
 800126a:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <Si468x_power_up+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001278:	490d      	ldr	r1, [pc, #52]	@ (80012b0 <Si468x_power_up+0xa4>)
 800127a:	2010      	movs	r0, #16
 800127c:	f000 fa58 	bl	8001730 <Si468x_write_command>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <Si468x_power_up+0xa8>)
 8001286:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f007 f83f 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800128e:	490a      	ldr	r1, [pc, #40]	@ (80012b8 <Si468x_power_up+0xac>)
 8001290:	2005      	movs	r0, #5
 8001292:	f000 fa6f 	bl	8001774 <Si468x_read_reply>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <Si468x_power_up+0xa8>)
 800129c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800129e:	2101      	movs	r1, #1
 80012a0:	4806      	ldr	r0, [pc, #24]	@ (80012bc <Si468x_power_up+0xb0>)
 80012a2:	f003 f93f 	bl	8004524 <send_debug_msg>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	0800e4d8 	.word	0x0800e4d8
 80012b0:	200001a8 	.word	0x200001a8
 80012b4:	20003520 	.word	0x20003520
 80012b8:	200011a8 	.word	0x200011a8
 80012bc:	0800e514 	.word	0x0800e514

080012c0 <Si468x_load_init>:

void Si468x_load_init()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 80012c4:	2101      	movs	r1, #1
 80012c6:	480f      	ldr	r0, [pc, #60]	@ (8001304 <Si468x_load_init+0x44>)
 80012c8:	f003 f92c 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <Si468x_load_init+0x48>)
 80012ce:	2206      	movs	r2, #6
 80012d0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <Si468x_load_init+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80012d8:	490b      	ldr	r1, [pc, #44]	@ (8001308 <Si468x_load_init+0x48>)
 80012da:	2002      	movs	r0, #2
 80012dc:	f000 fa28 	bl	8001730 <Si468x_write_command>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <Si468x_load_init+0x4c>)
 80012e6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f007 f80f 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012ee:	4908      	ldr	r1, [pc, #32]	@ (8001310 <Si468x_load_init+0x50>)
 80012f0:	2005      	movs	r0, #5
 80012f2:	f000 fa3f 	bl	8001774 <Si468x_read_reply>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <Si468x_load_init+0x4c>)
 80012fc:	701a      	strb	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0800e534 	.word	0x0800e534
 8001308:	200001a8 	.word	0x200001a8
 800130c:	20003520 	.word	0x20003520
 8001310:	200011a8 	.word	0x200011a8

08001314 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800131a:	2101      	movs	r1, #1
 800131c:	4830      	ldr	r0, [pc, #192]	@ (80013e0 <Si468x_bootloader_load_host+0xcc>)
 800131e:	f003 f901 	bl	8004524 <send_debug_msg>
	Si468x_load_init();
 8001322:	f7ff ffcd 	bl	80012c0 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001326:	f241 63a4 	movw	r3, #5796	@ 0x16a4
 800132a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800132e:	2204      	movs	r2, #4
 8001330:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001334:	2200      	movs	r2, #0
 8001336:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800133a:	2200      	movs	r2, #0
 800133c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001340:	2200      	movs	r2, #0
 8001342:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	e03e      	b.n	80013c8 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 800134a:	2300      	movs	r3, #0
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	e014      	b.n	800137a <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001350:	88ba      	ldrh	r2, [r7, #4]
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	4924      	ldr	r1, [pc, #144]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 8001356:	fba1 1303 	umull	r1, r3, r1, r3
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	441a      	add	r2, r3
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	3304      	adds	r3, #4
 800136c:	491f      	ldr	r1, [pc, #124]	@ (80013ec <Si468x_bootloader_load_host+0xd8>)
 800136e:	5c89      	ldrb	r1, [r1, r2]
 8001370:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001372:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	3301      	adds	r3, #1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	4a1a      	ldr	r2, [pc, #104]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	88ba      	ldrh	r2, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3e1      	bcc.n	8001350 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4a16      	ldr	r2, [pc, #88]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	3304      	adds	r3, #4
 800139a:	b29b      	uxth	r3, r3
 800139c:	4911      	ldr	r1, [pc, #68]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f9c6 	bl	8001730 <Si468x_write_command>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <Si468x_bootloader_load_host+0xdc>)
 80013aa:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f006 ffad 	bl	800830c <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80013b2:	4910      	ldr	r1, [pc, #64]	@ (80013f4 <Si468x_bootloader_load_host+0xe0>)
 80013b4:	2005      	movs	r0, #5
 80013b6:	f000 f9dd 	bl	8001774 <Si468x_read_reply>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <Si468x_bootloader_load_host+0xdc>)
 80013c0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	3301      	adds	r3, #1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d9bd      	bls.n	800134a <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 80013ce:	2101      	movs	r1, #1
 80013d0:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <Si468x_bootloader_load_host+0xe4>)
 80013d2:	f003 f8a7 	bl	8004524 <send_debug_msg>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800e54c 	.word	0x0800e54c
 80013e4:	200001a8 	.word	0x200001a8
 80013e8:	aaaaaaab 	.word	0xaaaaaaab
 80013ec:	08036044 	.word	0x08036044
 80013f0:	20003520 	.word	0x20003520
 80013f4:	200011a8 	.word	0x200011a8
 80013f8:	0800e588 	.word	0x0800e588

080013fc <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001404:	2101      	movs	r1, #1
 8001406:	4845      	ldr	r0, [pc, #276]	@ (800151c <Si468x_firmware_load_flash+0x120>)
 8001408:	f003 f88c 	bl	8004524 <send_debug_msg>
	Si468x_load_init();
 800140c:	f7ff ff58 	bl	80012c0 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001410:	4b43      	ldr	r3, [pc, #268]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001412:	2205      	movs	r2, #5
 8001414:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001416:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800141c:	4b40      	ldr	r3, [pc, #256]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800141e:	2200      	movs	r2, #0
 8001420:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001424:	2200      	movs	r2, #0
 8001426:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800142e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001438:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001442:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0e1b      	lsrs	r3, r3, #24
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800144c:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800144e:	2100      	movs	r1, #0
 8001450:	4834      	ldr	r0, [pc, #208]	@ (8001524 <Si468x_firmware_load_flash+0x128>)
 8001452:	f003 f867 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 8001456:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	2210      	movs	r2, #16
 800145c:	4932      	ldr	r1, [pc, #200]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f00c ff26 	bl	800e2b0 <itoa>
 8001464:	4603      	mov	r3, r0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f003 f85b 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001470:	795b      	ldrb	r3, [r3, #5]
 8001472:	2210      	movs	r2, #16
 8001474:	492c      	ldr	r1, [pc, #176]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 8001476:	4618      	mov	r0, r3
 8001478:	f00c ff1a 	bl	800e2b0 <itoa>
 800147c:	4603      	mov	r3, r0
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f003 f84f 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001488:	799b      	ldrb	r3, [r3, #6]
 800148a:	2210      	movs	r2, #16
 800148c:	4926      	ldr	r1, [pc, #152]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 800148e:	4618      	mov	r0, r3
 8001490:	f00c ff0e 	bl	800e2b0 <itoa>
 8001494:	4603      	mov	r3, r0
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f003 f843 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014a0:	79db      	ldrb	r3, [r3, #7]
 80014a2:	2210      	movs	r2, #16
 80014a4:	4920      	ldr	r1, [pc, #128]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00c ff02 	bl	800e2b0 <itoa>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2101      	movs	r1, #1
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 f837 	bl	8004524 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014be:	2200      	movs	r2, #0
 80014c0:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80014ce:	4914      	ldr	r1, [pc, #80]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014d0:	200c      	movs	r0, #12
 80014d2:	f000 f92d 	bl	8001730 <Si468x_write_command>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <Si468x_firmware_load_flash+0x130>)
 80014dc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f006 ff14 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014e4:	4912      	ldr	r1, [pc, #72]	@ (8001530 <Si468x_firmware_load_flash+0x134>)
 80014e6:	2005      	movs	r0, #5
 80014e8:	f000 f944 	bl	8001774 <Si468x_read_reply>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <Si468x_firmware_load_flash+0x130>)
 80014f2:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <Si468x_firmware_load_flash+0x134>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001500:	2101      	movs	r1, #1
 8001502:	480c      	ldr	r0, [pc, #48]	@ (8001534 <Si468x_firmware_load_flash+0x138>)
 8001504:	f003 f80e 	bl	8004524 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001508:	e003      	b.n	8001512 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800150a:	2101      	movs	r1, #1
 800150c:	480a      	ldr	r0, [pc, #40]	@ (8001538 <Si468x_firmware_load_flash+0x13c>)
 800150e:	f003 f809 	bl	8004524 <send_debug_msg>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	0800e5a8 	.word	0x0800e5a8
 8001520:	200001a8 	.word	0x200001a8
 8001524:	0800e5e4 	.word	0x0800e5e4
 8001528:	200034d0 	.word	0x200034d0
 800152c:	20003520 	.word	0x20003520
 8001530:	200011a8 	.word	0x200011a8
 8001534:	0800e5f8 	.word	0x0800e5f8
 8001538:	0800e608 	.word	0x0800e608

0800153c <Si468x_boot>:

void Si468x_boot()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 8001540:	2101      	movs	r1, #1
 8001542:	4816      	ldr	r0, [pc, #88]	@ (800159c <Si468x_boot+0x60>)
 8001544:	f002 ffee 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <Si468x_boot+0x64>)
 800154a:	2207      	movs	r2, #7
 800154c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <Si468x_boot+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <Si468x_boot+0x64>)
 8001556:	2002      	movs	r0, #2
 8001558:	f000 f8ea 	bl	8001730 <Si468x_write_command>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <Si468x_boot+0x68>)
 8001562:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f006 fed1 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800156a:	490f      	ldr	r1, [pc, #60]	@ (80015a8 <Si468x_boot+0x6c>)
 800156c:	2005      	movs	r0, #5
 800156e:	f000 f901 	bl	8001774 <Si468x_read_reply>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <Si468x_boot+0x68>)
 8001578:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <Si468x_boot+0x6c>)
 800157c:	78db      	ldrb	r3, [r3, #3]
 800157e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001582:	2bc0      	cmp	r3, #192	@ 0xc0
 8001584:	d104      	bne.n	8001590 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 8001586:	2101      	movs	r1, #1
 8001588:	4808      	ldr	r0, [pc, #32]	@ (80015ac <Si468x_boot+0x70>)
 800158a:	f002 ffcb 	bl	8004524 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 800158e:	e003      	b.n	8001598 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001590:	2101      	movs	r1, #1
 8001592:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <Si468x_boot+0x74>)
 8001594:	f002 ffc6 	bl	8004524 <send_debug_msg>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0800e624 	.word	0x0800e624
 80015a0:	200001a8 	.word	0x200001a8
 80015a4:	20003520 	.word	0x20003520
 80015a8:	200011a8 	.word	0x200011a8
 80015ac:	0800e660 	.word	0x0800e660
 80015b0:	0800e67c 	.word	0x0800e67c

080015b4 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 80015be:	1df9      	adds	r1, r7, #7
 80015c0:	2364      	movs	r3, #100	@ 0x64
 80015c2:	2201      	movs	r2, #1
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <Si468x_write_single_byte+0x20>)
 80015c6:	f00a fe7a 	bl	800c2be <HAL_SPI_Transmit>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20006fd4 	.word	0x20006fd4

080015d8 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 80015e2:	1df9      	adds	r1, r7, #7
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	2201      	movs	r2, #1
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <Si468x_read_single_byte+0x20>)
 80015ea:	f00a ffa4 	bl	800c536 <HAL_SPI_Receive>
	return data_buffer;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20006fd4 	.word	0x20006fd4

080015fc <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	81fb      	strh	r3, [r7, #14]
 800160a:	e01f      	b.n	800164c <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 800160c:	4916      	ldr	r1, [pc, #88]	@ (8001668 <Si468x_wait_for_CTS+0x6c>)
 800160e:	2001      	movs	r0, #1
 8001610:	f000 f8b0 	bl	8001774 <Si468x_read_reply>
		if(rd_reply.cts)
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <Si468x_wait_for_CTS+0x70>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00e      	beq.n	8001640 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <Si468x_wait_for_CTS+0x70>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001630:	2101      	movs	r1, #1
 8001632:	480f      	ldr	r0, [pc, #60]	@ (8001670 <Si468x_wait_for_CTS+0x74>)
 8001634:	f002 ff76 	bl	8004524 <send_debug_msg>
				return COMMAND_ERROR;
 8001638:	2320      	movs	r3, #32
 800163a:	e010      	b.n	800165e <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 800163c:	2300      	movs	r3, #0
 800163e:	e00e      	b.n	800165e <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f006 fe63 	bl	800830c <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	3301      	adds	r3, #1
 800164a:	81fb      	strh	r3, [r7, #14]
 800164c:	89fa      	ldrh	r2, [r7, #14]
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3db      	bcc.n	800160c <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 8001654:	2101      	movs	r1, #1
 8001656:	4807      	ldr	r0, [pc, #28]	@ (8001674 <Si468x_wait_for_CTS+0x78>)
 8001658:	f002 ff64 	bl	8004524 <send_debug_msg>
	return TIMEOUT;
 800165c:	2308      	movs	r3, #8
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200011a8 	.word	0x200011a8
 800166c:	2000360c 	.word	0x2000360c
 8001670:	0800e690 	.word	0x0800e690
 8001674:	0800e6b8 	.word	0x0800e6b8

08001678 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001688:	2200      	movs	r2, #0
 800168a:	2110      	movs	r1, #16
 800168c:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <Si468x_write_multiple+0x4c>)
 800168e:	f007 fc41 	bl	8008f14 <HAL_GPIO_WritePin>
	while(len--)
 8001692:	e009      	b.n	80016a8 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	81fa      	strh	r2, [r7, #14]
 800169a:	461a      	mov	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff86 	bl	80015b4 <Si468x_write_single_byte>
	while(len--)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	1e5a      	subs	r2, r3, #1
 80016ac:	80fa      	strh	r2, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80016b2:	2201      	movs	r2, #1
 80016b4:	2110      	movs	r1, #16
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <Si468x_write_multiple+0x4c>)
 80016b8:	f007 fc2c 	bl	8008f14 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800

080016c8 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 80016d8:	2201      	movs	r2, #1
 80016da:	2110      	movs	r1, #16
 80016dc:	4813      	ldr	r0, [pc, #76]	@ (800172c <Si468x_read_multiple+0x64>)
 80016de:	f007 fc19 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f006 fe12 	bl	800830c <HAL_Delay>
	CS_PIN_LOW;
 80016e8:	2200      	movs	r2, #0
 80016ea:	2110      	movs	r1, #16
 80016ec:	480f      	ldr	r0, [pc, #60]	@ (800172c <Si468x_read_multiple+0x64>)
 80016ee:	f007 fc11 	bl	8008f14 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff ff5e 	bl	80015b4 <Si468x_write_single_byte>
	while(len--)
 80016f8:	e009      	b.n	800170e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	81fa      	strh	r2, [r7, #14]
 8001700:	461a      	mov	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	189c      	adds	r4, r3, r2
 8001706:	f7ff ff67 	bl	80015d8 <Si468x_read_single_byte>
 800170a:	4603      	mov	r3, r0
 800170c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	80fa      	strh	r2, [r7, #6]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001718:	2201      	movs	r2, #1
 800171a:	2110      	movs	r1, #16
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <Si468x_read_multiple+0x64>)
 800171e:	f007 fbf9 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	40020800 	.word	0x40020800

08001730 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800173c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001740:	f7ff ff5c 	bl	80015fc <Si468x_wait_for_CTS>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <Si468x_write_command+0x24>
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b20      	cmp	r3, #32
 8001752:	d10a      	bne.n	800176a <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff8d 	bl	8001678 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800175e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001762:	f7ff ff4b 	bl	80015fc <Si468x_wait_for_CTS>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff9f 	bl	80016c8 <Si468x_read_multiple>
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <Si468x_read_reply+0x28>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <Si468x_read_reply+0x2c>)
 8001790:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200011a8 	.word	0x200011a8
 80017a0:	2000360c 	.word	0x2000360c

080017a4 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80017a8:	2101      	movs	r1, #1
 80017aa:	4833      	ldr	r0, [pc, #204]	@ (8001878 <Si468x_get_sys_state+0xd4>)
 80017ac:	f002 feba 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80017b0:	4b32      	ldr	r3, [pc, #200]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017b2:	2209      	movs	r2, #9
 80017b4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80017bc:	492f      	ldr	r1, [pc, #188]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017be:	2002      	movs	r0, #2
 80017c0:	f7ff ffb6 	bl	8001730 <Si468x_write_command>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <Si468x_get_sys_state+0xdc>)
 80017ca:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f006 fd9d 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80017d2:	492c      	ldr	r1, [pc, #176]	@ (8001884 <Si468x_get_sys_state+0xe0>)
 80017d4:	2005      	movs	r0, #5
 80017d6:	f7ff ffcd 	bl	8001774 <Si468x_read_reply>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <Si468x_get_sys_state+0xdc>)
 80017e0:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 80017e2:	2100      	movs	r1, #0
 80017e4:	4828      	ldr	r0, [pc, #160]	@ (8001888 <Si468x_get_sys_state+0xe4>)
 80017e6:	f002 fe9d 	bl	8004524 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <Si468x_get_sys_state+0xe0>)
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d83a      	bhi.n	8001868 <Si468x_get_sys_state+0xc4>
 80017f2:	a201      	add	r2, pc, #4	@ (adr r2, 80017f8 <Si468x_get_sys_state+0x54>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001819 	.word	0x08001819
 80017fc:	08001823 	.word	0x08001823
 8001800:	0800182d 	.word	0x0800182d
 8001804:	08001837 	.word	0x08001837
 8001808:	08001841 	.word	0x08001841
 800180c:	0800184b 	.word	0x0800184b
 8001810:	08001855 	.word	0x08001855
 8001814:	0800185f 	.word	0x0800185f
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001818:	2101      	movs	r1, #1
 800181a:	481c      	ldr	r0, [pc, #112]	@ (800188c <Si468x_get_sys_state+0xe8>)
 800181c:	f002 fe82 	bl	8004524 <send_debug_msg>
			break;
 8001820:	e027      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001822:	2101      	movs	r1, #1
 8001824:	481a      	ldr	r0, [pc, #104]	@ (8001890 <Si468x_get_sys_state+0xec>)
 8001826:	f002 fe7d 	bl	8004524 <send_debug_msg>
			break;
 800182a:	e022      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 800182c:	2101      	movs	r1, #1
 800182e:	4819      	ldr	r0, [pc, #100]	@ (8001894 <Si468x_get_sys_state+0xf0>)
 8001830:	f002 fe78 	bl	8004524 <send_debug_msg>
			break;
 8001834:	e01d      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001836:	2101      	movs	r1, #1
 8001838:	4817      	ldr	r0, [pc, #92]	@ (8001898 <Si468x_get_sys_state+0xf4>)
 800183a:	f002 fe73 	bl	8004524 <send_debug_msg>
			break;
 800183e:	e018      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 8001840:	2101      	movs	r1, #1
 8001842:	4816      	ldr	r0, [pc, #88]	@ (800189c <Si468x_get_sys_state+0xf8>)
 8001844:	f002 fe6e 	bl	8004524 <send_debug_msg>
			break;
 8001848:	e013      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 800184a:	2101      	movs	r1, #1
 800184c:	4814      	ldr	r0, [pc, #80]	@ (80018a0 <Si468x_get_sys_state+0xfc>)
 800184e:	f002 fe69 	bl	8004524 <send_debug_msg>
			break;
 8001852:	e00e      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 8001854:	2101      	movs	r1, #1
 8001856:	4813      	ldr	r0, [pc, #76]	@ (80018a4 <Si468x_get_sys_state+0x100>)
 8001858:	f002 fe64 	bl	8004524 <send_debug_msg>
			break;
 800185c:	e009      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 800185e:	2101      	movs	r1, #1
 8001860:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <Si468x_get_sys_state+0x104>)
 8001862:	f002 fe5f 	bl	8004524 <send_debug_msg>
			break;
 8001866:	e004      	b.n	8001872 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 8001868:	2101      	movs	r1, #1
 800186a:	4810      	ldr	r0, [pc, #64]	@ (80018ac <Si468x_get_sys_state+0x108>)
 800186c:	f002 fe5a 	bl	8004524 <send_debug_msg>
			break;
 8001870:	bf00      	nop
	}
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	0800e6c8 	.word	0x0800e6c8
 800187c:	200001a8 	.word	0x200001a8
 8001880:	20003520 	.word	0x20003520
 8001884:	200011a8 	.word	0x200011a8
 8001888:	0800e704 	.word	0x0800e704
 800188c:	0800e710 	.word	0x0800e710
 8001890:	0800e728 	.word	0x0800e728
 8001894:	0800e740 	.word	0x0800e740
 8001898:	0800e758 	.word	0x0800e758
 800189c:	0800e780 	.word	0x0800e780
 80018a0:	0800e79c 	.word	0x0800e79c
 80018a4:	0800e7b4 	.word	0x0800e7b4
 80018a8:	0800e7d0 	.word	0x0800e7d0
 80018ac:	0800e7e8 	.word	0x0800e7e8

080018b0 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 80018b6:	2101      	movs	r1, #1
 80018b8:	482c      	ldr	r0, [pc, #176]	@ (800196c <Si468x_get_part_info+0xbc>)
 80018ba:	f002 fe33 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 80018be:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018c0:	2208      	movs	r2, #8
 80018c2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80018c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80018ca:	4929      	ldr	r1, [pc, #164]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018cc:	2002      	movs	r0, #2
 80018ce:	f7ff ff2f 	bl	8001730 <Si468x_write_command>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <Si468x_get_part_info+0xc4>)
 80018d8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f006 fd16 	bl	800830c <HAL_Delay>
	Si468x_write_single_byte(0x00);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fe67 	bl	80015b4 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 80018e6:	4924      	ldr	r1, [pc, #144]	@ (8001978 <Si468x_get_part_info+0xc8>)
 80018e8:	200a      	movs	r0, #10
 80018ea:	f7ff ff43 	bl	8001774 <Si468x_read_reply>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <Si468x_get_part_info+0xc4>)
 80018f4:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 80018f6:	2100      	movs	r1, #0
 80018f8:	4820      	ldr	r0, [pc, #128]	@ (800197c <Si468x_get_part_info+0xcc>)
 80018fa:	f002 fe13 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	220a      	movs	r2, #10
 8001904:	491e      	ldr	r1, [pc, #120]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001906:	4618      	mov	r0, r3
 8001908:	f00c fcd2 	bl	800e2b0 <itoa>
 800190c:	4603      	mov	r3, r0
 800190e:	2101      	movs	r1, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fe07 	bl	8004524 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001916:	2100      	movs	r1, #0
 8001918:	481a      	ldr	r0, [pc, #104]	@ (8001984 <Si468x_get_part_info+0xd4>)
 800191a:	f002 fe03 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001920:	795b      	ldrb	r3, [r3, #5]
 8001922:	220a      	movs	r2, #10
 8001924:	4916      	ldr	r1, [pc, #88]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001926:	4618      	mov	r0, r3
 8001928:	f00c fcc2 	bl	800e2b0 <itoa>
 800192c:	4603      	mov	r3, r0
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fdf7 	bl	8004524 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001936:	2100      	movs	r1, #0
 8001938:	4813      	ldr	r0, [pc, #76]	@ (8001988 <Si468x_get_part_info+0xd8>)
 800193a:	f002 fdf3 	bl	8004524 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001940:	7a5b      	ldrb	r3, [r3, #9]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001948:	7a12      	ldrb	r2, [r2, #8]
 800194a:	4413      	add	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	220a      	movs	r2, #10
 8001952:	490b      	ldr	r1, [pc, #44]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001954:	4618      	mov	r0, r3
 8001956:	f00c fcab 	bl	800e2b0 <itoa>
 800195a:	4603      	mov	r3, r0
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fde0 	bl	8004524 <send_debug_msg>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	0800e7fc 	.word	0x0800e7fc
 8001970:	200001a8 	.word	0x200001a8
 8001974:	20003520 	.word	0x20003520
 8001978:	200011a8 	.word	0x200011a8
 800197c:	0800e838 	.word	0x0800e838
 8001980:	200034d0 	.word	0x200034d0
 8001984:	0800e848 	.word	0x0800e848
 8001988:	0800e854 	.word	0x0800e854

0800198c <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	80fb      	strh	r3, [r7, #6]
 8001998:	4613      	mov	r3, r2
 800199a:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 800199c:	2101      	movs	r1, #1
 800199e:	4832      	ldr	r0, [pc, #200]	@ (8001a68 <Si468x_set_property+0xdc>)
 80019a0:	f002 fdc0 	bl	8004524 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019a4:	2100      	movs	r1, #0
 80019a6:	4831      	ldr	r0, [pc, #196]	@ (8001a6c <Si468x_set_property+0xe0>)
 80019a8:	f002 fdbc 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2210      	movs	r2, #16
 80019b0:	492f      	ldr	r1, [pc, #188]	@ (8001a70 <Si468x_set_property+0xe4>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00c fc7c 	bl	800e2b0 <itoa>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2101      	movs	r1, #1
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 fdb1 	bl	8004524 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 80019c2:	2100      	movs	r1, #0
 80019c4:	482b      	ldr	r0, [pc, #172]	@ (8001a74 <Si468x_set_property+0xe8>)
 80019c6:	f002 fdad 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	2210      	movs	r2, #16
 80019ce:	4928      	ldr	r1, [pc, #160]	@ (8001a70 <Si468x_set_property+0xe4>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00c fc6d 	bl	800e2b0 <itoa>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fda2 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <Si468x_set_property+0xec>)
 80019e2:	2213      	movs	r2, #19
 80019e4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <Si468x_set_property+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <Si468x_set_property+0xec>)
 80019f2:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <Si468x_set_property+0xec>)
 80019fe:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a06:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a12:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001a14:	4918      	ldr	r1, [pc, #96]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a16:	2006      	movs	r0, #6
 8001a18:	f7ff fe8a 	bl	8001730 <Si468x_write_command>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <Si468x_set_property+0xf0>)
 8001a22:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f006 fc71 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001a2a:	4915      	ldr	r1, [pc, #84]	@ (8001a80 <Si468x_set_property+0xf4>)
 8001a2c:	2005      	movs	r0, #5
 8001a2e:	f7ff fea1 	bl	8001774 <Si468x_read_reply>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <Si468x_set_property+0xf0>)
 8001a38:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f825 	bl	8001a8c <Si468x_get_property>
 8001a42:	4603      	mov	r3, r0
 8001a44:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001a46:	89fa      	ldrh	r2, [r7, #14]
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d104      	bne.n	8001a58 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <Si468x_set_property+0xf8>)
 8001a52:	f002 fd67 	bl	8004524 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 8001a56:	e003      	b.n	8001a60 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <Si468x_set_property+0xfc>)
 8001a5c:	f002 fd62 	bl	8004524 <send_debug_msg>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	0800e864 	.word	0x0800e864
 8001a6c:	0800e8a4 	.word	0x0800e8a4
 8001a70:	200034d0 	.word	0x200034d0
 8001a74:	0800e8b4 	.word	0x0800e8b4
 8001a78:	200001a8 	.word	0x200001a8
 8001a7c:	20003520 	.word	0x20003520
 8001a80:	200011a8 	.word	0x200011a8
 8001a84:	0800e8d0 	.word	0x0800e8d0
 8001a88:	0800e8ec 	.word	0x0800e8ec

08001a8c <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a96:	2101      	movs	r1, #1
 8001a98:	482a      	ldr	r0, [pc, #168]	@ (8001b44 <Si468x_get_property+0xb8>)
 8001a9a:	f002 fd43 	bl	8004524 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4829      	ldr	r0, [pc, #164]	@ (8001b48 <Si468x_get_property+0xbc>)
 8001aa2:	f002 fd3f 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	4928      	ldr	r1, [pc, #160]	@ (8001b4c <Si468x_get_property+0xc0>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00c fbff 	bl	800e2b0 <itoa>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 fd34 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001abc:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001abe:	2214      	movs	r2, #20
 8001ac0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ace:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ada:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001adc:	491c      	ldr	r1, [pc, #112]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ade:	2004      	movs	r0, #4
 8001ae0:	f7ff fe26 	bl	8001730 <Si468x_write_command>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <Si468x_get_property+0xc8>)
 8001aea:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f006 fc0d 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001af2:	4919      	ldr	r1, [pc, #100]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001af4:	2006      	movs	r0, #6
 8001af6:	f7ff fe3d 	bl	8001774 <Si468x_read_reply>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <Si468x_get_property+0xc8>)
 8001b00:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001b02:	2100      	movs	r1, #0
 8001b04:	4815      	ldr	r0, [pc, #84]	@ (8001b5c <Si468x_get_property+0xd0>)
 8001b06:	f002 fd0d 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b0c:	795b      	ldrb	r3, [r3, #5]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b12:	7912      	ldrb	r2, [r2, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	2210      	movs	r2, #16
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <Si468x_get_property+0xc0>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00c fbc8 	bl	800e2b0 <itoa>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2101      	movs	r1, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fcfd 	bl	8004524 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b34:	7912      	ldrb	r2, [r2, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	b29b      	uxth	r3, r3
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	0800e904 	.word	0x0800e904
 8001b48:	0800e8a4 	.word	0x0800e8a4
 8001b4c:	200034d0 	.word	0x200034d0
 8001b50:	200001a8 	.word	0x200001a8
 8001b54:	20003520 	.word	0x20003520
 8001b58:	200011a8 	.word	0x200011a8
 8001b5c:	0800e940 	.word	0x0800e940

08001b60 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t ant_cap)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	460a      	mov	r2, r1
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001b70:	2101      	movs	r1, #1
 8001b72:	4858      	ldr	r0, [pc, #352]	@ (8001cd4 <Si468x_dab_tune_freq+0x174>)
 8001b74:	f002 fcd6 	bl	8004524 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4857      	ldr	r0, [pc, #348]	@ (8001cd8 <Si468x_dab_tune_freq+0x178>)
 8001b7c:	f002 fcd2 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <Si468x_dab_tune_freq+0x17c>)
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	220a      	movs	r2, #10
 8001b8a:	4955      	ldr	r1, [pc, #340]	@ (8001ce0 <Si468x_dab_tune_freq+0x180>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00c fb8f 	bl	800e2b0 <itoa>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fcc4 	bl	8004524 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4851      	ldr	r0, [pc, #324]	@ (8001ce4 <Si468x_dab_tune_freq+0x184>)
 8001ba0:	f002 fcc0 	bl	8004524 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001ba4:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001ba6:	22b0      	movs	r2, #176	@ 0xb0
 8001ba8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001baa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	70da      	strb	r2, [r3, #3]

	switch(ant_cap)
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d012      	beq.n	8001be8 <Si468x_dab_tune_freq+0x88>
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d117      	bne.n	8001bf6 <Si468x_dab_tune_freq+0x96>
	{
		case USE_ANT_CAP:
			//use ANT_CAP value from table of best ANTCAP values
			dab_spi_tx_buffer[4] = ant_cap_values[channel] & 0xFF;	//antcap [7:0]
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4a48      	ldr	r2, [pc, #288]	@ (8001cec <Si468x_dab_tune_freq+0x18c>)
 8001bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b45      	ldr	r3, [pc, #276]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bd2:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap_values[channel] >> 8;	//antcap [15:8]
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4a45      	ldr	r2, [pc, #276]	@ (8001cec <Si468x_dab_tune_freq+0x18c>)
 8001bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001be4:	715a      	strb	r2, [r3, #5]
			break;
 8001be6:	e011      	b.n	8001c0c <Si468x_dab_tune_freq+0xac>
		case NOT_USE_ANT_CAP:
			//use algorithm of automatic setting ant_cap value based on tuning values written to Si4684
			dab_spi_tx_buffer[4] = 0x00;	//antcap [7:0]
 8001be8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = 0x00;	//antcap [15:8]
 8001bee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	715a      	strb	r2, [r3, #5]
			break;
 8001bf4:	e00a      	b.n	8001c0c <Si468x_dab_tune_freq+0xac>
		default:
			//use ant_cap value as argument of this function
			dab_spi_tx_buffer[4] = ant_cap & 0xFF;	//antcap [7:0]
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bfc:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap >> 8;	//antcap [15:8]
 8001bfe:	88bb      	ldrh	r3, [r7, #4]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b38      	ldr	r3, [pc, #224]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001c08:	715a      	strb	r2, [r3, #5]
			break;
 8001c0a:	bf00      	nop
	}

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001c0c:	4936      	ldr	r1, [pc, #216]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001c0e:	2006      	movs	r0, #6
 8001c10:	f7ff fd8e 	bl	8001730 <Si468x_write_command>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c1a:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001c1c:	4935      	ldr	r1, [pc, #212]	@ (8001cf4 <Si468x_dab_tune_freq+0x194>)
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fda8 	bl	8001774 <Si468x_read_reply>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c2a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001c2c:	4b32      	ldr	r3, [pc, #200]	@ (8001cf8 <Si468x_dab_tune_freq+0x198>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <Si468x_dab_tune_freq+0xe2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	482f      	ldr	r0, [pc, #188]	@ (8001cfc <Si468x_dab_tune_freq+0x19c>)
 8001c3e:	f002 fc71 	bl	8004524 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	81fb      	strh	r3, [r7, #14]
 8001c46:	e03a      	b.n	8001cbe <Si468x_dab_tune_freq+0x15e>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001c48:	492a      	ldr	r1, [pc, #168]	@ (8001cf4 <Si468x_dab_tune_freq+0x194>)
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff fd92 	bl	8001774 <Si468x_read_reply>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c56:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001c58:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <Si468x_dab_tune_freq+0x198>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01c      	beq.n	8001ca0 <Si468x_dab_tune_freq+0x140>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001c66:	2100      	movs	r1, #0
 8001c68:	4825      	ldr	r0, [pc, #148]	@ (8001d00 <Si468x_dab_tune_freq+0x1a0>)
 8001c6a:	f002 fc5b 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	220a      	movs	r2, #10
 8001c72:	491b      	ldr	r1, [pc, #108]	@ (8001ce0 <Si468x_dab_tune_freq+0x180>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00c fb1b 	bl	800e2b0 <itoa>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fc50 	bl	8004524 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001c84:	2101      	movs	r1, #1
 8001c86:	481f      	ldr	r0, [pc, #124]	@ (8001d04 <Si468x_dab_tune_freq+0x1a4>)
 8001c88:	f002 fc4c 	bl	8004524 <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <Si468x_dab_tune_freq+0x1a8>)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <Si468x_dab_tune_freq+0x17c>)
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <Si468x_dab_tune_freq+0x1a8>)
 8001c9c:	6093      	str	r3, [r2, #8]
			break;
 8001c9e:	e014      	b.n	8001cca <Si468x_dab_tune_freq+0x16a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d103      	bne.n	8001cb2 <Si468x_dab_tune_freq+0x152>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001caa:	2101      	movs	r1, #1
 8001cac:	4817      	ldr	r0, [pc, #92]	@ (8001d0c <Si468x_dab_tune_freq+0x1ac>)
 8001cae:	f002 fc39 	bl	8004524 <send_debug_msg>
		}
		HAL_Delay(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f006 fb2a 	bl	800830c <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	81fb      	strh	r3, [r7, #14]
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d9bf      	bls.n	8001c48 <Si468x_dab_tune_freq+0xe8>
	}
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	0800e9f8 	.word	0x0800e9f8
 8001cd8:	0800ea34 	.word	0x0800ea34
 8001cdc:	20003524 	.word	0x20003524
 8001ce0:	200034d0 	.word	0x200034d0
 8001ce4:	0800e9b4 	.word	0x0800e9b4
 8001ce8:	200001a8 	.word	0x200001a8
 8001cec:	080376e8 	.word	0x080376e8
 8001cf0:	20003520 	.word	0x20003520
 8001cf4:	200011a8 	.word	0x200011a8
 8001cf8:	2000360c 	.word	0x2000360c
 8001cfc:	0800e5f8 	.word	0x0800e5f8
 8001d00:	0800ea40 	.word	0x0800ea40
 8001d04:	0800ea5c 	.word	0x0800ea5c
 8001d08:	20004c14 	.word	0x20004c14
 8001d0c:	0800ea64 	.word	0x0800ea64

08001d10 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d1a:	22b2      	movs	r2, #178	@ 0xb2
 8001d1c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001d1e:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d20:	221a      	movs	r2, #26
 8001d22:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001d24:	4921      	ldr	r1, [pc, #132]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff fd02 	bl	8001730 <Si468x_write_command>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <Si468x_dab_digrad_status+0xa0>)
 8001d32:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f006 fae9 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001d3a:	491e      	ldr	r1, [pc, #120]	@ (8001db4 <Si468x_dab_digrad_status+0xa4>)
 8001d3c:	2028      	movs	r0, #40	@ 0x28
 8001d3e:	f7ff fd19 	bl	8001774 <Si468x_read_reply>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <Si468x_dab_digrad_status+0xa0>)
 8001d48:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <Si468x_dab_digrad_status+0xa8>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d019      	beq.n	8001d8c <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status_t));	//
 8001d58:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <Si468x_dab_digrad_status+0xa4>)
 8001d5c:	4615      	mov	r5, r2
 8001d5e:	1d1c      	adds	r4, r3, #4
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d6c:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d72:	78db      	ldrb	r3, [r3, #3]
 8001d74:	2b14      	cmp	r3, #20
 8001d76:	d902      	bls.n	8001d7e <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001d78:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d80:	795b      	ldrb	r3, [r3, #5]
 8001d82:	2b36      	cmp	r3, #54	@ 0x36
 8001d84:	d902      	bls.n	8001d8c <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001d86:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d90:	461c      	mov	r4, r3
 8001d92:	4615      	mov	r5, r2
 8001d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001da0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	200001a8 	.word	0x200001a8
 8001db0:	20003520 	.word	0x20003520
 8001db4:	200011a8 	.word	0x200011a8
 8001db8:	2000360c 	.word	0x2000360c
 8001dbc:	200035e4 	.word	0x200035e4

08001dc0 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001dca:	2300      	movs	r3, #0
 8001dcc:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001dce:	2300      	movs	r3, #0
 8001dd0:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001dd6:	4ba1      	ldr	r3, [pc, #644]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001ddc:	4b9f      	ldr	r3, [pc, #636]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001de2:	499e      	ldr	r1, [pc, #632]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001de4:	2002      	movs	r0, #2
 8001de6:	f7ff fca3 	bl	8001730 <Si468x_write_command>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b9c      	ldr	r3, [pc, #624]	@ (8002060 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001df0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f006 fa8a 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001df8:	499a      	ldr	r1, [pc, #616]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001dfa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dfe:	f7ff fcb9 	bl	8001774 <Si468x_read_reply>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b96      	ldr	r3, [pc, #600]	@ (8002060 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001e08:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4896      	ldr	r0, [pc, #600]	@ (8002068 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e0e:	f002 fb89 	bl	8004524 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001e12:	4b96      	ldr	r3, [pc, #600]	@ (800206c <Si468x_dab_get_digital_service_list+0x2ac>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001e20:	2101      	movs	r1, #1
 8001e22:	4893      	ldr	r0, [pc, #588]	@ (8002070 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001e24:	f002 fb7e 	bl	8004524 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001e28:	4b8e      	ldr	r3, [pc, #568]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e30:	795b      	ldrb	r3, [r3, #5]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001e3a:	4b8a      	ldr	r3, [pc, #552]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e3c:	7a1b      	ldrb	r3, [r3, #8]
 8001e3e:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	773b      	strb	r3, [r7, #28]
 8001e44:	e24e      	b.n	80022e4 <Si468x_dab_get_digital_service_list+0x524>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001e46:	7f3b      	ldrb	r3, [r7, #28]
 8001e48:	4a8a      	ldr	r2, [pc, #552]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e4a:	7892      	ldrb	r2, [r2, #2]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a89      	ldr	r2, [pc, #548]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e50:	6892      	ldr	r2, [r2, #8]
 8001e52:	4989      	ldr	r1, [pc, #548]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e54:	2034      	movs	r0, #52	@ 0x34
 8001e56:	fb00 f303 	mul.w	r3, r0, r3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3324      	adds	r3, #36	@ 0x24
 8001e5e:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001e60:	7f3b      	ldrb	r3, [r7, #28]
 8001e62:	4a84      	ldr	r2, [pc, #528]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e64:	7892      	ldrb	r2, [r2, #2]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a82      	ldr	r2, [pc, #520]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e6a:	7b10      	ldrb	r0, [r2, #12]
 8001e6c:	4a82      	ldr	r2, [pc, #520]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e6e:	2134      	movs	r1, #52	@ 0x34
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3328      	adds	r3, #40	@ 0x28
 8001e78:	4602      	mov	r2, r0
 8001e7a:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001e7c:	7fba      	ldrb	r2, [r7, #30]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	f103 0210 	add.w	r2, r3, #16
 8001e8a:	7f7b      	ldrb	r3, [r7, #29]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a74      	ldr	r2, [pc, #464]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e92:	5cd2      	ldrb	r2, [r2, r3]
 8001e94:	7f3b      	ldrb	r3, [r7, #28]
 8001e96:	4977      	ldr	r1, [pc, #476]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e98:	7889      	ldrb	r1, [r1, #2]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f002 0201 	and.w	r2, r2, #1
 8001ea0:	b2d0      	uxtb	r0, r2
 8001ea2:	4a75      	ldr	r2, [pc, #468]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ea4:	2134      	movs	r1, #52	@ 0x34
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3314      	adds	r3, #20
 8001eae:	4602      	mov	r2, r0
 8001eb0:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001eb2:	7fba      	ldrb	r2, [r7, #30]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	f103 0211 	add.w	r2, r3, #17
 8001ec0:	7f7b      	ldrb	r3, [r7, #29]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a67      	ldr	r2, [pc, #412]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ec8:	5cd2      	ldrb	r2, [r2, r3]
 8001eca:	7f3b      	ldrb	r3, [r7, #28]
 8001ecc:	4969      	ldr	r1, [pc, #420]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001ece:	7889      	ldrb	r1, [r1, #2]
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f002 020f 	and.w	r2, r2, #15
 8001ed6:	b2d0      	uxtb	r0, r2
 8001ed8:	4a67      	ldr	r2, [pc, #412]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001eda:	2134      	movs	r1, #52	@ 0x34
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3329      	adds	r3, #41	@ 0x29
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001ee8:	7f3b      	ldrb	r3, [r7, #28]
 8001eea:	4a62      	ldr	r2, [pc, #392]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001eec:	7892      	ldrb	r2, [r2, #2]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a61      	ldr	r2, [pc, #388]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ef2:	2134      	movs	r1, #52	@ 0x34
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3314      	adds	r3, #20
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d017      	beq.n	8001f32 <Si468x_dab_get_digital_service_list+0x172>
		{
			services_count++;
 8001f02:	7fbb      	ldrb	r3, [r7, #30]
 8001f04:	3301      	adds	r3, #1
 8001f06:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001f08:	7f3b      	ldrb	r3, [r7, #28]
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f0c:	7892      	ldrb	r2, [r2, #2]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f12:	2134      	movs	r1, #52	@ 0x34
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3329      	adds	r3, #41	@ 0x29
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	7f7b      	ldrb	r3, [r7, #29]
 8001f20:	4413      	add	r3, r2
 8001f22:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001f24:	7f3b      	ldrb	r3, [r7, #28]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	77fb      	strb	r3, [r7, #31]
			continue;
 8001f30:	e1d5      	b.n	80022de <Si468x_dab_get_digital_service_list+0x51e>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001f32:	7fba      	ldrb	r2, [r7, #30]
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	f103 0210 	add.w	r2, r3, #16
 8001f40:	7f7b      	ldrb	r3, [r7, #29]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	4a47      	ldr	r2, [pc, #284]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	105b      	asrs	r3, r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	7f3b      	ldrb	r3, [r7, #28]
 8001f50:	4948      	ldr	r1, [pc, #288]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f52:	7889      	ldrb	r1, [r1, #2]
 8001f54:	440b      	add	r3, r1
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	b2d0      	uxtb	r0, r2
 8001f5c:	4a46      	ldr	r2, [pc, #280]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f5e:	2134      	movs	r1, #52	@ 0x34
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3315      	adds	r3, #21
 8001f68:	4602      	mov	r2, r0
 8001f6a:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001f6c:	7f3b      	ldrb	r3, [r7, #28]
 8001f6e:	4a41      	ldr	r2, [pc, #260]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f70:	7892      	ldrb	r2, [r2, #2]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a40      	ldr	r2, [pc, #256]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f76:	2134      	movs	r1, #52	@ 0x34
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3314      	adds	r3, #20
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <Si468x_dab_get_digital_service_list+0x1cc>
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d078      	beq.n	800207c <Si468x_dab_get_digital_service_list+0x2bc>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001f8a:	e0ec      	b.n	8002166 <Si468x_dab_get_digital_service_list+0x3a6>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001f8c:	7fba      	ldrb	r2, [r7, #30]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	f103 020c 	add.w	r2, r3, #12
 8001f9a:	7f7b      	ldrb	r3, [r7, #29]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a30      	ldr	r2, [pc, #192]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	7fba      	ldrb	r2, [r7, #30]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	f103 020d 	add.w	r2, r3, #13
 8001fb4:	7f7b      	ldrb	r3, [r7, #29]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a2a      	ldr	r2, [pc, #168]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001fc4:	4419      	add	r1, r3
 8001fc6:	7f3b      	ldrb	r3, [r7, #28]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001fca:	7892      	ldrb	r2, [r2, #2]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4608      	mov	r0, r1
 8001fd0:	4a29      	ldr	r2, [pc, #164]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fd2:	2134      	movs	r1, #52	@ 0x34
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3318      	adds	r3, #24
 8001fdc:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001fde:	7fba      	ldrb	r2, [r7, #30]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f103 020d 	add.w	r2, r3, #13
 8001fec:	7f7b      	ldrb	r3, [r7, #29]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ff4:	5cd2      	ldrb	r2, [r2, r3]
 8001ff6:	7f3b      	ldrb	r3, [r7, #28]
 8001ff8:	491e      	ldr	r1, [pc, #120]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001ffa:	7889      	ldrb	r1, [r1, #2]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	0912      	lsrs	r2, r2, #4
 8002000:	b2d0      	uxtb	r0, r2
 8002002:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002004:	2134      	movs	r1, #52	@ 0x34
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	331c      	adds	r3, #28
 800200e:	4602      	mov	r2, r0
 8002010:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8002012:	7f3b      	ldrb	r3, [r7, #28]
 8002014:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8002016:	7892      	ldrb	r2, [r2, #2]
 8002018:	4413      	add	r3, r2
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 800201c:	2134      	movs	r1, #52	@ 0x34
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	331c      	adds	r3, #28
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	0319      	lsls	r1, r3, #12
 800202a:	7f3b      	ldrb	r3, [r7, #28]
 800202c:	4a11      	ldr	r2, [pc, #68]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 800202e:	7892      	ldrb	r2, [r2, #2]
 8002030:	4413      	add	r3, r2
 8002032:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002034:	2034      	movs	r0, #52	@ 0x34
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	4413      	add	r3, r2
 800203c:	3318      	adds	r3, #24
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	7f3b      	ldrb	r3, [r7, #28]
 8002042:	480c      	ldr	r0, [pc, #48]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8002044:	7880      	ldrb	r0, [r0, #2]
 8002046:	4403      	add	r3, r0
 8002048:	440a      	add	r2, r1
 800204a:	490b      	ldr	r1, [pc, #44]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 800204c:	2034      	movs	r0, #52	@ 0x34
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	440b      	add	r3, r1
 8002054:	3320      	adds	r3, #32
 8002056:	601a      	str	r2, [r3, #0]
				break;
 8002058:	e085      	b.n	8002166 <Si468x_dab_get_digital_service_list+0x3a6>
 800205a:	bf00      	nop
 800205c:	200001a8 	.word	0x200001a8
 8002060:	20003520 	.word	0x20003520
 8002064:	200011a8 	.word	0x200011a8
 8002068:	0800eac4 	.word	0x0800eac4
 800206c:	2000360c 	.word	0x2000360c
 8002070:	0800e5f8 	.word	0x0800e5f8
 8002074:	20004c14 	.word	0x20004c14
 8002078:	200037c4 	.word	0x200037c4
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 800207c:	7fba      	ldrb	r2, [r7, #30]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f103 020c 	add.w	r2, r3, #12
 800208a:	7f7b      	ldrb	r3, [r7, #29]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	4aa0      	ldr	r2, [pc, #640]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	4619      	mov	r1, r3
 8002096:	7fba      	ldrb	r2, [r7, #30]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	f103 020d 	add.w	r2, r3, #13
 80020a4:	7f7b      	ldrb	r3, [r7, #29]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	4a9a      	ldr	r2, [pc, #616]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	4419      	add	r1, r3
 80020b2:	7fba      	ldrb	r2, [r7, #30]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	f103 020e 	add.w	r2, r3, #14
 80020c0:	7f7b      	ldrb	r3, [r7, #29]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	4a93      	ldr	r2, [pc, #588]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020d0:	4419      	add	r1, r3
 80020d2:	7f3b      	ldrb	r3, [r7, #28]
 80020d4:	4a90      	ldr	r2, [pc, #576]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80020d6:	7892      	ldrb	r2, [r2, #2]
 80020d8:	4413      	add	r3, r2
 80020da:	4608      	mov	r0, r1
 80020dc:	4a8f      	ldr	r2, [pc, #572]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80020de:	2134      	movs	r1, #52	@ 0x34
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3318      	adds	r3, #24
 80020e8:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80020ea:	7fba      	ldrb	r2, [r7, #30]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	f103 020e 	add.w	r2, r3, #14
 80020f8:	7f7b      	ldrb	r3, [r7, #29]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	4a85      	ldr	r2, [pc, #532]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 8002100:	5cd2      	ldrb	r2, [r2, r3]
 8002102:	7f3b      	ldrb	r3, [r7, #28]
 8002104:	4984      	ldr	r1, [pc, #528]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002106:	7889      	ldrb	r1, [r1, #2]
 8002108:	440b      	add	r3, r1
 800210a:	0912      	lsrs	r2, r2, #4
 800210c:	b2d0      	uxtb	r0, r2
 800210e:	4a83      	ldr	r2, [pc, #524]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002110:	2134      	movs	r1, #52	@ 0x34
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	331c      	adds	r3, #28
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 800211e:	7f3b      	ldrb	r3, [r7, #28]
 8002120:	4a7d      	ldr	r2, [pc, #500]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002122:	7892      	ldrb	r2, [r2, #2]
 8002124:	4413      	add	r3, r2
 8002126:	4a7d      	ldr	r2, [pc, #500]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002128:	2134      	movs	r1, #52	@ 0x34
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	331c      	adds	r3, #28
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	0519      	lsls	r1, r3, #20
 8002136:	7f3b      	ldrb	r3, [r7, #28]
 8002138:	4a77      	ldr	r2, [pc, #476]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 800213a:	7892      	ldrb	r2, [r2, #2]
 800213c:	4413      	add	r3, r2
 800213e:	4a77      	ldr	r2, [pc, #476]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002140:	2034      	movs	r0, #52	@ 0x34
 8002142:	fb00 f303 	mul.w	r3, r0, r3
 8002146:	4413      	add	r3, r2
 8002148:	3318      	adds	r3, #24
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	7f3b      	ldrb	r3, [r7, #28]
 800214e:	4872      	ldr	r0, [pc, #456]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002150:	7880      	ldrb	r0, [r0, #2]
 8002152:	4403      	add	r3, r0
 8002154:	440a      	add	r2, r1
 8002156:	4971      	ldr	r1, [pc, #452]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002158:	2034      	movs	r0, #52	@ 0x34
 800215a:	fb00 f303 	mul.w	r3, r0, r3
 800215e:	440b      	add	r3, r1
 8002160:	3320      	adds	r3, #32
 8002162:	601a      	str	r2, [r3, #0]
				break;
 8002164:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 8002166:	7fba      	ldrb	r2, [r7, #30]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	f103 0214 	add.w	r2, r3, #20
 8002174:	7f7b      	ldrb	r3, [r7, #29]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	4a66      	ldr	r2, [pc, #408]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03f      	beq.n	8002202 <Si468x_dab_get_digital_service_list+0x442>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002182:	2300      	movs	r3, #0
 8002184:	76fb      	strb	r3, [r7, #27]
 8002186:	e038      	b.n	80021fa <Si468x_dab_get_digital_service_list+0x43a>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 8002188:	7efb      	ldrb	r3, [r7, #27]
 800218a:	f103 0114 	add.w	r1, r3, #20
 800218e:	7fba      	ldrb	r2, [r7, #30]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	18ca      	adds	r2, r1, r3
 800219a:	7f7b      	ldrb	r3, [r7, #29]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	18d1      	adds	r1, r2, r3
 80021a0:	7f3b      	ldrb	r3, [r7, #28]
 80021a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021a4:	7892      	ldrb	r2, [r2, #2]
 80021a6:	441a      	add	r2, r3
 80021a8:	7efb      	ldrb	r3, [r7, #27]
 80021aa:	485a      	ldr	r0, [pc, #360]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80021ac:	5c44      	ldrb	r4, [r0, r1]
 80021ae:	495b      	ldr	r1, [pc, #364]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021b0:	2034      	movs	r0, #52	@ 0x34
 80021b2:	fb00 f202 	mul.w	r2, r0, r2
 80021b6:	440a      	add	r2, r1
 80021b8:	4413      	add	r3, r2
 80021ba:	4622      	mov	r2, r4
 80021bc:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80021be:	7f3b      	ldrb	r3, [r7, #28]
 80021c0:	4a55      	ldr	r2, [pc, #340]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021c2:	7892      	ldrb	r2, [r2, #2]
 80021c4:	441a      	add	r2, r3
 80021c6:	7efb      	ldrb	r3, [r7, #27]
 80021c8:	4954      	ldr	r1, [pc, #336]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021ca:	2034      	movs	r0, #52	@ 0x34
 80021cc:	fb00 f202 	mul.w	r2, r0, r2
 80021d0:	440a      	add	r2, r1
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b86      	cmp	r3, #134	@ 0x86
 80021d8:	d10c      	bne.n	80021f4 <Si468x_dab_get_digital_service_list+0x434>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 80021da:	7f3b      	ldrb	r3, [r7, #28]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021de:	7892      	ldrb	r2, [r2, #2]
 80021e0:	441a      	add	r2, r3
 80021e2:	7efb      	ldrb	r3, [r7, #27]
 80021e4:	494d      	ldr	r1, [pc, #308]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021e6:	2034      	movs	r0, #52	@ 0x34
 80021e8:	fb00 f202 	mul.w	r2, r0, r2
 80021ec:	440a      	add	r2, r1
 80021ee:	4413      	add	r3, r2
 80021f0:	226f      	movs	r2, #111	@ 0x6f
 80021f2:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80021f4:	7efb      	ldrb	r3, [r7, #27]
 80021f6:	3301      	adds	r3, #1
 80021f8:	76fb      	strb	r3, [r7, #27]
 80021fa:	7efb      	ldrb	r3, [r7, #27]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d9c3      	bls.n	8002188 <Si468x_dab_get_digital_service_list+0x3c8>
 8002200:	e026      	b.n	8002250 <Si468x_dab_get_digital_service_list+0x490>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 8002202:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <Si468x_dab_get_digital_service_list+0x560>)
 8002204:	463c      	mov	r4, r7
 8002206:	461d      	mov	r5, r3
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	7023      	strb	r3, [r4, #0]
 8002210:	f107 0311 	add.w	r3, r7, #17
 8002214:	2200      	movs	r2, #0
 8002216:	801a      	strh	r2, [r3, #0]
 8002218:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800221a:	2300      	movs	r3, #0
 800221c:	76bb      	strb	r3, [r7, #26]
 800221e:	e014      	b.n	800224a <Si468x_dab_get_digital_service_list+0x48a>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 8002220:	7eb9      	ldrb	r1, [r7, #26]
 8002222:	7f3b      	ldrb	r3, [r7, #28]
 8002224:	4a3c      	ldr	r2, [pc, #240]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002226:	7892      	ldrb	r2, [r2, #2]
 8002228:	441a      	add	r2, r3
 800222a:	7ebb      	ldrb	r3, [r7, #26]
 800222c:	3120      	adds	r1, #32
 800222e:	4439      	add	r1, r7
 8002230:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8002234:	4939      	ldr	r1, [pc, #228]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002236:	2034      	movs	r0, #52	@ 0x34
 8002238:	fb00 f202 	mul.w	r2, r0, r2
 800223c:	440a      	add	r2, r1
 800223e:	4413      	add	r3, r2
 8002240:	4622      	mov	r2, r4
 8002242:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002244:	7ebb      	ldrb	r3, [r7, #26]
 8002246:	3301      	adds	r3, #1
 8002248:	76bb      	strb	r3, [r7, #26]
 800224a:	7ebb      	ldrb	r3, [r7, #26]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d9e7      	bls.n	8002220 <Si468x_dab_get_digital_service_list+0x460>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 8002250:	2300      	movs	r3, #0
 8002252:	767b      	strb	r3, [r7, #25]
 8002254:	e032      	b.n	80022bc <Si468x_dab_get_digital_service_list+0x4fc>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002256:	7f3b      	ldrb	r3, [r7, #28]
 8002258:	4a2f      	ldr	r2, [pc, #188]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 800225a:	7892      	ldrb	r2, [r2, #2]
 800225c:	441a      	add	r2, r3
 800225e:	7e7b      	ldrb	r3, [r7, #25]
 8002260:	492e      	ldr	r1, [pc, #184]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002262:	201a      	movs	r0, #26
 8002264:	fb00 f202 	mul.w	r2, r0, r2
 8002268:	4413      	add	r3, r2
 800226a:	3314      	adds	r3, #20
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	440b      	add	r3, r1
 8002270:	2200      	movs	r2, #0
 8002272:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 8002274:	7fba      	ldrb	r2, [r7, #30]
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8002282:	7f7b      	ldrb	r3, [r7, #29]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 800228a:	5cd1      	ldrb	r1, [r2, r3]
 800228c:	7f3b      	ldrb	r3, [r7, #28]
 800228e:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002290:	7892      	ldrb	r2, [r2, #2]
 8002292:	441a      	add	r2, r3
 8002294:	7e7b      	ldrb	r3, [r7, #25]
 8002296:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800229a:	b2cc      	uxtb	r4, r1
 800229c:	491f      	ldr	r1, [pc, #124]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 800229e:	201a      	movs	r0, #26
 80022a0:	fb00 f202 	mul.w	r2, r0, r2
 80022a4:	4413      	add	r3, r2
 80022a6:	3314      	adds	r3, #20
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	4622      	mov	r2, r4
 80022ae:	709a      	strb	r2, [r3, #2]
			components_count++;
 80022b0:	7f7b      	ldrb	r3, [r7, #29]
 80022b2:	3301      	adds	r3, #1
 80022b4:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80022b6:	7e7b      	ldrb	r3, [r7, #25]
 80022b8:	3301      	adds	r3, #1
 80022ba:	767b      	strb	r3, [r7, #25]
 80022bc:	7f3b      	ldrb	r3, [r7, #28]
 80022be:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022c0:	7892      	ldrb	r2, [r2, #2]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a15      	ldr	r2, [pc, #84]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80022c6:	2134      	movs	r1, #52	@ 0x34
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3329      	adds	r3, #41	@ 0x29
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	7e7a      	ldrb	r2, [r7, #25]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3be      	bcc.n	8002256 <Si468x_dab_get_digital_service_list+0x496>
		}
		services_count++;
 80022d8:	7fbb      	ldrb	r3, [r7, #30]
 80022da:	3301      	adds	r3, #1
 80022dc:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 80022de:	7f3b      	ldrb	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	773b      	strb	r3, [r7, #28]
 80022e4:	7f3a      	ldrb	r2, [r7, #28]
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f4ff adac 	bcc.w	8001e46 <Si468x_dab_get_digital_service_list+0x86>
	}

	dab_management.total_services += number_of_services;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022fa:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022fe:	789a      	ldrb	r2, [r3, #2]
 8002300:	7ffb      	ldrb	r3, [r7, #31]
 8002302:	4413      	add	r3, r2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002308:	709a      	strb	r2, [r3, #2]
}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bdb0      	pop	{r4, r5, r7, pc}
 8002312:	bf00      	nop
 8002314:	200011a8 	.word	0x200011a8
 8002318:	20004c14 	.word	0x20004c14
 800231c:	200037c4 	.word	0x200037c4
 8002320:	0800eb00 	.word	0x0800eb00

08002324 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 800232e:	2101      	movs	r1, #1
 8002330:	482d      	ldr	r0, [pc, #180]	@ (80023e8 <Si468x_dab_start_digital_service+0xc4>)
 8002332:	f002 f8f7 	bl	8004524 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8002336:	4b2d      	ldr	r3, [pc, #180]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002338:	2281      	movs	r2, #129	@ 0x81
 800233a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800233c:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 8002342:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002344:	2200      	movs	r2, #0
 8002346:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002348:	4b28      	ldr	r3, [pc, #160]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800234a:	2200      	movs	r2, #0
 800234c:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002354:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800235e:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002368:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0e1b      	lsrs	r3, r3, #24
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002372:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800237a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002384:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800238e:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	0e1b      	lsrs	r3, r3, #24
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002398:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800239a:	4914      	ldr	r1, [pc, #80]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800239c:	200c      	movs	r0, #12
 800239e:	f7ff f9c7 	bl	8001730 <Si468x_write_command>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <Si468x_dab_start_digital_service+0xcc>)
 80023a8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f005 ffae 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80023b0:	4910      	ldr	r1, [pc, #64]	@ (80023f4 <Si468x_dab_start_digital_service+0xd0>)
 80023b2:	2005      	movs	r0, #5
 80023b4:	f7ff f9de 	bl	8001774 <Si468x_read_reply>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <Si468x_dab_start_digital_service+0xcc>)
 80023be:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <Si468x_dab_start_digital_service+0xd4>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80023ce:	2101      	movs	r1, #1
 80023d0:	480a      	ldr	r0, [pc, #40]	@ (80023fc <Si468x_dab_start_digital_service+0xd8>)
 80023d2:	f002 f8a7 	bl	8004524 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 80023d6:	e003      	b.n	80023e0 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 80023d8:	2101      	movs	r1, #1
 80023da:	4809      	ldr	r0, [pc, #36]	@ (8002400 <Si468x_dab_start_digital_service+0xdc>)
 80023dc:	f002 f8a2 	bl	8004524 <send_debug_msg>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	0800eb14 	.word	0x0800eb14
 80023ec:	200001a8 	.word	0x200001a8
 80023f0:	20003520 	.word	0x20003520
 80023f4:	200011a8 	.word	0x200011a8
 80023f8:	2000360c 	.word	0x2000360c
 80023fc:	0800e5f8 	.word	0x0800e5f8
 8002400:	0800eb50 	.word	0x0800eb50

08002404 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800240e:	2101      	movs	r1, #1
 8002410:	484a      	ldr	r0, [pc, #296]	@ (800253c <Si468x_dab_get_ensemble_info+0x138>)
 8002412:	f002 f887 	bl	8004524 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002416:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 8002418:	22b4      	movs	r2, #180	@ 0xb4
 800241a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800241c:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 800241e:	2200      	movs	r2, #0
 8002420:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002422:	4947      	ldr	r1, [pc, #284]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 8002424:	2002      	movs	r0, #2
 8002426:	f7ff f983 	bl	8001730 <Si468x_write_command>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	4b45      	ldr	r3, [pc, #276]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002430:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8002432:	2002      	movs	r0, #2
 8002434:	f005 ff6a 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002438:	4943      	ldr	r1, [pc, #268]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 800243a:	2015      	movs	r0, #21
 800243c:	f7ff f99a 	bl	8001774 <Si468x_read_reply>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002446:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002448:	e012      	b.n	8002470 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 800244a:	493d      	ldr	r1, [pc, #244]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 800244c:	2002      	movs	r0, #2
 800244e:	f7ff f96f 	bl	8001730 <Si468x_write_command>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002458:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 800245a:	2002      	movs	r0, #2
 800245c:	f005 ff56 	bl	800830c <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002460:	4939      	ldr	r1, [pc, #228]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002462:	2015      	movs	r0, #21
 8002464:	f7ff f986 	bl	8001774 <Si468x_read_reply>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 800246e:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002472:	799b      	ldrb	r3, [r3, #6]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0e8      	beq.n	800244a <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 8002478:	4b34      	ldr	r3, [pc, #208]	@ (800254c <Si468x_dab_get_ensemble_info+0x148>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002486:	2101      	movs	r1, #1
 8002488:	4831      	ldr	r0, [pc, #196]	@ (8002550 <Si468x_dab_get_ensemble_info+0x14c>)
 800248a:	f002 f84b 	bl	8004524 <send_debug_msg>
		return 0;
 800248e:	2300      	movs	r3, #0
 8002490:	e050      	b.n	8002534 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002492:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002494:	795b      	ldrb	r3, [r3, #5]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	4a2b      	ldr	r2, [pc, #172]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 800249a:	7912      	ldrb	r2, [r2, #4]
 800249c:	4413      	add	r3, r2
 800249e:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d041      	beq.n	800252a <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80024a6:	2101      	movs	r1, #1
 80024a8:	482a      	ldr	r0, [pc, #168]	@ (8002554 <Si468x_dab_get_ensemble_info+0x150>)
 80024aa:	f002 f83b 	bl	8004524 <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	b291      	uxth	r1, r2
 80024b6:	4a29      	ldr	r2, [pc, #164]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024b8:	015b      	lsls	r3, r3, #5
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 80024c0:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	4618      	mov	r0, r3
 80024c6:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	4924      	ldr	r1, [pc, #144]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024cc:	0143      	lsls	r3, r0, #5
 80024ce:	440b      	add	r3, r1
 80024d0:	3318      	adds	r3, #24
 80024d2:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024d6:	785b      	ldrb	r3, [r3, #1]
 80024d8:	4618      	mov	r0, r3
 80024da:	4b1f      	ldr	r3, [pc, #124]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024dc:	7b19      	ldrb	r1, [r3, #12]
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024e0:	0143      	lsls	r3, r0, #5
 80024e2:	4413      	add	r3, r2
 80024e4:	331c      	adds	r3, #28
 80024e6:	460a      	mov	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	e011      	b.n	8002514 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	1d9a      	adds	r2, r3, #6
 80024f4:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	461c      	mov	r4, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4912      	ldr	r1, [pc, #72]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 80024fe:	5c88      	ldrb	r0, [r1, r2]
 8002500:	4916      	ldr	r1, [pc, #88]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 8002502:	0162      	lsls	r2, r4, #5
 8002504:	440a      	add	r2, r1
 8002506:	4413      	add	r3, r2
 8002508:	3302      	adds	r3, #2
 800250a:	4602      	mov	r2, r0
 800250c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	3301      	adds	r3, #1
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d9ea      	bls.n	80024f0 <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 800251a:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	3301      	adds	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 8002524:	705a      	strb	r2, [r3, #1]
			return 1;
 8002526:	2301      	movs	r3, #1
 8002528:	e004      	b.n	8002534 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 800252a:	2101      	movs	r1, #1
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <Si468x_dab_get_ensemble_info+0x15c>)
 800252e:	f001 fff9 	bl	8004524 <send_debug_msg>
			return 0;
 8002532:	2300      	movs	r3, #0
		}
	}
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	0800eb70 	.word	0x0800eb70
 8002540:	200001a8 	.word	0x200001a8
 8002544:	20003520 	.word	0x20003520
 8002548:	200011a8 	.word	0x200011a8
 800254c:	2000360c 	.word	0x2000360c
 8002550:	0800e5f8 	.word	0x0800e5f8
 8002554:	0800ebac 	.word	0x0800ebac
 8002558:	20004c14 	.word	0x20004c14
 800255c:	20003684 	.word	0x20003684
 8002560:	0800ebbc 	.word	0x0800ebbc

08002564 <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	b099      	sub	sp, #100	@ 0x64
 8002568:	af0a      	add	r7, sp, #40	@ 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 800256a:	2101      	movs	r1, #1
 800256c:	4888      	ldr	r0, [pc, #544]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800256e:	f001 ffd9 	bl	8004524 <send_debug_msg>
	dab_management.total_services = 0;
 8002572:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 8002578:	4b86      	ldr	r3, [pc, #536]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 800257a:	2200      	movs	r2, #0
 800257c:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 800257e:	4b85      	ldr	r3, [pc, #532]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 8002580:	2200      	movs	r2, #0
 8002582:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t fic_q_timeout = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t _scan_cancel_flag = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800259c:	e0a1      	b.n	80026e2 <Si468x_dab_full_scan+0x17e>
	{
		_touch_coordinates = Touch_read();
 800259e:	f005 fb11 	bl	8007bc4 <Touch_read>
 80025a2:	4603      	mov	r3, r0
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80025a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d90c      	bls.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025ae:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80025b2:	d808      	bhi.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025b6:	2bc3      	cmp	r3, #195	@ 0xc3
 80025b8:	d905      	bls.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025bc:	2bea      	cmp	r3, #234	@ 0xea
 80025be:	d802      	bhi.n	80025c6 <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		}

		if(_scan_cancel_flag)
 80025c6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 8091 	bne.w	80026f2 <Si468x_dab_full_scan+0x18e>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 80025d0:	2306      	movs	r3, #6
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 80025d6:	2396      	movs	r3, #150	@ 0x96
 80025d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		Si468x_dab_tune_freq(freq_index, USE_ANT_CAP);
 80025dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80025e0:	2101      	movs	r1, #1
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fabc 	bl	8001b60 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 80025e8:	463b      	mov	r3, r7
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fb90 	bl	8001d10 <Si468x_dab_digrad_status>
			valid_timeout--;
 80025f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025f4:	3b01      	subs	r3, #1
 80025f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if(!valid_timeout)
 80025fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002602:	2101      	movs	r1, #1
 8002604:	4864      	ldr	r0, [pc, #400]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 8002606:	f001 ff8d 	bl	8004524 <send_debug_msg>
				break;
 800260a:	e010      	b.n	800262e <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800260c:	2032      	movs	r0, #50	@ 0x32
 800260e:	f005 fe7d 	bl	800830c <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 8002612:	4b62      	ldr	r3, [pc, #392]	@ (800279c <Si468x_dab_full_scan+0x238>)
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0e3      	beq.n	80025e8 <Si468x_dab_full_scan+0x84>
 8002620:	4b5e      	ldr	r3, [pc, #376]	@ (800279c <Si468x_dab_full_scan+0x238>)
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0dc      	beq.n	80025e8 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 800262e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002632:	2b00      	cmp	r3, #0
 8002634:	d018      	beq.n	8002668 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002636:	463b      	mov	r3, r7
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fb69 	bl	8001d10 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 800263e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002642:	3b01      	subs	r3, #1
 8002644:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				if(!fic_q_timeout)
 8002648:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002650:	2101      	movs	r1, #1
 8002652:	4851      	ldr	r0, [pc, #324]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 8002654:	f001 ff66 	bl	8004524 <send_debug_msg>
					break;
 8002658:	e006      	b.n	8002668 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800265a:	2032      	movs	r0, #50	@ 0x32
 800265c:	f005 fe56 	bl	800830c <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 8002660:	4b4e      	ldr	r3, [pc, #312]	@ (800279c <Si468x_dab_full_scan+0x238>)
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	2b31      	cmp	r3, #49	@ 0x31
 8002666:	d9e6      	bls.n	8002636 <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 8002668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <Si468x_dab_full_scan+0x14e>
 8002670:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <Si468x_dab_full_scan+0x116>
 8002678:	e01b      	b.n	80026b2 <Si468x_dab_full_scan+0x14e>
		{
			do
			{
				Si468x_dab_get_event_status();
 800267a:	463b      	mov	r3, r7
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fb11 	bl	8002ca4 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 8002682:	200a      	movs	r0, #10
 8002684:	f005 fe42 	bl	800830c <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 8002688:	4b45      	ldr	r3, [pc, #276]	@ (80027a0 <Si468x_dab_full_scan+0x23c>)
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f1      	beq.n	800267a <Si468x_dab_full_scan+0x116>
 8002696:	4b42      	ldr	r3, [pc, #264]	@ (80027a0 <Si468x_dab_full_scan+0x23c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ea      	bne.n	800267a <Si468x_dab_full_scan+0x116>

			if(Si468x_dab_get_ensemble_info())
 80026a4:	f7ff feae 	bl	8002404 <Si468x_dab_get_ensemble_info>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <Si468x_dab_full_scan+0x14e>
			{
				Si468x_dab_get_digital_service_list();
 80026ae:	f7ff fb87 	bl	8001dc0 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 80026b2:	4e3a      	ldr	r6, [pc, #232]	@ (800279c <Si468x_dab_full_scan+0x238>)
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 80026b6:	ac06      	add	r4, sp, #24
 80026b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80026be:	466d      	mov	r5, sp
 80026c0:	f106 0410 	add.w	r4, r6, #16
 80026c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80026d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80026d4:	f002 fd26 	bl	8005124 <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80026d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80026dc:	3301      	adds	r3, #1
 80026de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80026e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 80026e4:	7b5b      	ldrb	r3, [r3, #13]
 80026e6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80026ea:	429a      	cmp	r2, r3
 80026ec:	f4ff af57 	bcc.w	800259e <Si468x_dab_full_scan+0x3a>
 80026f0:	e000      	b.n	80026f4 <Si468x_dab_full_scan+0x190>
			break;
 80026f2:	bf00      	nop
	}

	if(_scan_cancel_flag)
 80026f4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <Si468x_dab_full_scan+0x1a8>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 80026fc:	2101      	movs	r1, #1
 80026fe:	4829      	ldr	r0, [pc, #164]	@ (80027a4 <Si468x_dab_full_scan+0x240>)
 8002700:	f001 ff10 	bl	8004524 <send_debug_msg>
		restore_from_eeprom();
 8002704:	f001 f956 	bl	80039b4 <restore_from_eeprom>
		return 0;
 8002708:	2300      	movs	r3, #0
 800270a:	e1e8      	b.n	8002ade <Si468x_dab_full_scan+0x57a>
	}

	else
	{
		eeprom_clear_scanning_data();
 800270c:	f003 fe2c 	bl	8006368 <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <Si468x_dab_full_scan+0x1dc>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 8002718:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 800271a:	7819      	ldrb	r1, [r3, #0]
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	4a21      	ldr	r2, [pc, #132]	@ (80027a8 <Si468x_dab_full_scan+0x244>)
 8002722:	4822      	ldr	r0, [pc, #136]	@ (80027ac <Si468x_dab_full_scan+0x248>)
 8002724:	f003 fe84 	bl	8006430 <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 8002728:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 800272a:	2200      	movs	r2, #0
 800272c:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 800272e:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 8002730:	2200      	movs	r2, #0
 8002732:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8002734:	2201      	movs	r2, #1
 8002736:	491e      	ldr	r1, [pc, #120]	@ (80027b0 <Si468x_dab_full_scan+0x24c>)
 8002738:	f240 1007 	movw	r0, #263	@ 0x107
 800273c:	f003 fdec 	bl	8006318 <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002740:	2100      	movs	r1, #0
 8002742:	481c      	ldr	r0, [pc, #112]	@ (80027b4 <Si468x_dab_full_scan+0x250>)
 8002744:	f001 feee 	bl	8004524 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002748:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	220a      	movs	r2, #10
 800274e:	491a      	ldr	r1, [pc, #104]	@ (80027b8 <Si468x_dab_full_scan+0x254>)
 8002750:	4618      	mov	r0, r3
 8002752:	f00b fdad 	bl	800e2b0 <itoa>
 8002756:	4603      	mov	r3, r0
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f001 fee2 	bl	8004524 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002760:	2101      	movs	r1, #1
 8002762:	4816      	ldr	r0, [pc, #88]	@ (80027bc <Si468x_dab_full_scan+0x258>)
 8002764:	f001 fede 	bl	8004524 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8002768:	2100      	movs	r1, #0
 800276a:	4815      	ldr	r0, [pc, #84]	@ (80027c0 <Si468x_dab_full_scan+0x25c>)
 800276c:	f001 feda 	bl	8004524 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8002770:	2100      	movs	r1, #0
 8002772:	4814      	ldr	r0, [pc, #80]	@ (80027c4 <Si468x_dab_full_scan+0x260>)
 8002774:	f001 fed6 	bl	8004524 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002778:	2100      	movs	r1, #0
 800277a:	4813      	ldr	r0, [pc, #76]	@ (80027c8 <Si468x_dab_full_scan+0x264>)
 800277c:	f001 fed2 	bl	8004524 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8002780:	2101      	movs	r1, #1
 8002782:	4812      	ldr	r0, [pc, #72]	@ (80027cc <Si468x_dab_full_scan+0x268>)
 8002784:	f001 fece 	bl	8004524 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8002788:	2300      	movs	r3, #0
 800278a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800278e:	e07c      	b.n	800288a <Si468x_dab_full_scan+0x326>
 8002790:	0800ebd0 	.word	0x0800ebd0
 8002794:	20004c14 	.word	0x20004c14
 8002798:	0800ebbc 	.word	0x0800ebbc
 800279c:	200035e4 	.word	0x200035e4
 80027a0:	20003610 	.word	0x20003610
 80027a4:	0800ec0c 	.word	0x0800ec0c
 80027a8:	20003684 	.word	0x20003684
 80027ac:	200037c4 	.word	0x200037c4
 80027b0:	20004c18 	.word	0x20004c18
 80027b4:	0800ec20 	.word	0x0800ec20
 80027b8:	200034d0 	.word	0x200034d0
 80027bc:	0800ec34 	.word	0x0800ec34
 80027c0:	0800ec68 	.word	0x0800ec68
 80027c4:	0800ec74 	.word	0x0800ec74
 80027c8:	0800ec88 	.word	0x0800ec88
 80027cc:	0800ec98 	.word	0x0800ec98
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80027d0:	2100      	movs	r1, #0
 80027d2:	48c5      	ldr	r0, [pc, #788]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80027d4:	f001 fea6 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80027d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027dc:	3301      	adds	r3, #1
 80027de:	220a      	movs	r2, #10
 80027e0:	49c2      	ldr	r1, [pc, #776]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f00b fd64 	bl	800e2b0 <itoa>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 fe99 	bl	8004524 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 80027f2:	2100      	movs	r1, #0
 80027f4:	48be      	ldr	r0, [pc, #760]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 80027f6:	f001 fe95 	bl	8004524 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80027fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027fe:	015b      	lsls	r3, r3, #5
 8002800:	4abc      	ldr	r2, [pc, #752]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 8002802:	4413      	add	r3, r2
 8002804:	3302      	adds	r3, #2
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fe8b 	bl	8004524 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 800280e:	2100      	movs	r1, #0
 8002810:	48b5      	ldr	r0, [pc, #724]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002812:	f001 fe87 	bl	8004524 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002816:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800281a:	4ab6      	ldr	r2, [pc, #728]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 800281c:	015b      	lsls	r3, r3, #5
 800281e:	4413      	add	r3, r2
 8002820:	3318      	adds	r3, #24
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	220a      	movs	r2, #10
 8002826:	49b1      	ldr	r1, [pc, #708]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 8002828:	4618      	mov	r0, r3
 800282a:	f00b fd41 	bl	800e2b0 <itoa>
 800282e:	4603      	mov	r3, r0
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f001 fe76 	bl	8004524 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002838:	2100      	movs	r1, #0
 800283a:	48af      	ldr	r0, [pc, #700]	@ (8002af8 <Si468x_dab_full_scan+0x594>)
 800283c:	f001 fe72 	bl	8004524 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002844:	4aab      	ldr	r2, [pc, #684]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 8002846:	015b      	lsls	r3, r3, #5
 8002848:	4413      	add	r3, r2
 800284a:	331c      	adds	r3, #28
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4baa      	ldr	r3, [pc, #680]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 8002852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fe63 	bl	8004524 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 800285e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002862:	4aa4      	ldr	r2, [pc, #656]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	4413      	add	r3, r2
 8002868:	331c      	adds	r3, #28
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b13      	cmp	r3, #19
 800286e:	d803      	bhi.n	8002878 <Si468x_dab_full_scan+0x314>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002870:	2100      	movs	r1, #0
 8002872:	48a3      	ldr	r0, [pc, #652]	@ (8002b00 <Si468x_dab_full_scan+0x59c>)
 8002874:	f001 fe56 	bl	8004524 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 8002878:	2101      	movs	r1, #1
 800287a:	48a2      	ldr	r0, [pc, #648]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 800287c:	f001 fe52 	bl	8004524 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8002880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002884:	3301      	adds	r3, #1
 8002886:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800288a:	4b9f      	ldr	r3, [pc, #636]	@ (8002b08 <Si468x_dab_full_scan+0x5a4>)
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002892:	429a      	cmp	r2, r3
 8002894:	d39c      	bcc.n	80027d0 <Si468x_dab_full_scan+0x26c>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002896:	2101      	movs	r1, #1
 8002898:	489c      	ldr	r0, [pc, #624]	@ (8002b0c <Si468x_dab_full_scan+0x5a8>)
 800289a:	f001 fe43 	bl	8004524 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 800289e:	2100      	movs	r1, #0
 80028a0:	489b      	ldr	r0, [pc, #620]	@ (8002b10 <Si468x_dab_full_scan+0x5ac>)
 80028a2:	f001 fe3f 	bl	8004524 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80028a6:	4b98      	ldr	r3, [pc, #608]	@ (8002b08 <Si468x_dab_full_scan+0x5a4>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	220a      	movs	r2, #10
 80028ac:	498f      	ldr	r1, [pc, #572]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f00b fcfe 	bl	800e2b0 <itoa>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fe33 	bl	8004524 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80028be:	2101      	movs	r1, #1
 80028c0:	4894      	ldr	r0, [pc, #592]	@ (8002b14 <Si468x_dab_full_scan+0x5b0>)
 80028c2:	f001 fe2f 	bl	8004524 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80028c6:	2101      	movs	r1, #1
 80028c8:	4893      	ldr	r0, [pc, #588]	@ (8002b18 <Si468x_dab_full_scan+0x5b4>)
 80028ca:	f001 fe2b 	bl	8004524 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80028d4:	e0f7      	b.n	8002ac6 <Si468x_dab_full_scan+0x562>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80028d6:	2100      	movs	r1, #0
 80028d8:	4883      	ldr	r0, [pc, #524]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80028da:	f001 fe23 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80028de:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028e2:	3301      	adds	r3, #1
 80028e4:	220a      	movs	r2, #10
 80028e6:	4981      	ldr	r1, [pc, #516]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 80028e8:	4618      	mov	r0, r3
 80028ea:	f00b fce1 	bl	800e2b0 <itoa>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fe16 	bl	8004524 <send_debug_msg>
			if((services_index + 1) < 10)
 80028f8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d803      	bhi.n	8002908 <Si468x_dab_full_scan+0x3a4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002900:	2100      	movs	r1, #0
 8002902:	487f      	ldr	r0, [pc, #508]	@ (8002b00 <Si468x_dab_full_scan+0x59c>)
 8002904:	f001 fe0e 	bl	8004524 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002908:	2100      	movs	r1, #0
 800290a:	4884      	ldr	r0, [pc, #528]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 800290c:	f001 fe0a 	bl	8004524 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002910:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002914:	2234      	movs	r2, #52	@ 0x34
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	4a81      	ldr	r2, [pc, #516]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 800291c:	4413      	add	r3, r2
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f001 fdff 	bl	8004524 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002926:	2100      	movs	r1, #0
 8002928:	487e      	ldr	r0, [pc, #504]	@ (8002b24 <Si468x_dab_full_scan+0x5c0>)
 800292a:	f001 fdfb 	bl	8004524 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002934:	e021      	b.n	800297a <Si468x_dab_full_scan+0x416>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002936:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800293a:	4a6e      	ldr	r2, [pc, #440]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 800293c:	015b      	lsls	r3, r3, #5
 800293e:	4413      	add	r3, r2
 8002940:	331c      	adds	r3, #28
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002948:	4975      	ldr	r1, [pc, #468]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 800294a:	2034      	movs	r0, #52	@ 0x34
 800294c:	fb00 f303 	mul.w	r3, r0, r3
 8002950:	440b      	add	r3, r1
 8002952:	3328      	adds	r3, #40	@ 0x28
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d10a      	bne.n	8002970 <Si468x_dab_full_scan+0x40c>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 800295a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	4a64      	ldr	r2, [pc, #400]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 8002962:	4413      	add	r3, r2
 8002964:	3302      	adds	r3, #2
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fddb 	bl	8004524 <send_debug_msg>
					break;
 800296e:	e00a      	b.n	8002986 <Si468x_dab_full_scan+0x422>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002970:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002974:	3301      	adds	r3, #1
 8002976:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800297a:	4b63      	ldr	r3, [pc, #396]	@ (8002b08 <Si468x_dab_full_scan+0x5a4>)
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8002982:	429a      	cmp	r2, r3
 8002984:	d3d7      	bcc.n	8002936 <Si468x_dab_full_scan+0x3d2>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002986:	2100      	movs	r1, #0
 8002988:	4866      	ldr	r0, [pc, #408]	@ (8002b24 <Si468x_dab_full_scan+0x5c0>)
 800298a:	f001 fdcb 	bl	8004524 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800298e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002992:	4a63      	ldr	r2, [pc, #396]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002994:	2134      	movs	r1, #52	@ 0x34
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3324      	adds	r3, #36	@ 0x24
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	220a      	movs	r2, #10
 80029a2:	4952      	ldr	r1, [pc, #328]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	f00b fc83 	bl	800e2b0 <itoa>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 fdb8 	bl	8004524 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80029b4:	2100      	movs	r1, #0
 80029b6:	4850      	ldr	r0, [pc, #320]	@ (8002af8 <Si468x_dab_full_scan+0x594>)
 80029b8:	f001 fdb4 	bl	8004524 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80029bc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029c0:	4a57      	ldr	r2, [pc, #348]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 80029c2:	2134      	movs	r1, #52	@ 0x34
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3328      	adds	r3, #40	@ 0x28
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b4a      	ldr	r3, [pc, #296]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 80029d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fda3 	bl	8004524 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 80029de:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 80029e4:	2134      	movs	r1, #52	@ 0x34
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3328      	adds	r3, #40	@ 0x28
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b13      	cmp	r3, #19
 80029f2:	d803      	bhi.n	80029fc <Si468x_dab_full_scan+0x498>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80029f4:	2100      	movs	r1, #0
 80029f6:	4842      	ldr	r0, [pc, #264]	@ (8002b00 <Si468x_dab_full_scan+0x59c>)
 80029f8:	f001 fd94 	bl	8004524 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80029fc:	2100      	movs	r1, #0
 80029fe:	4847      	ldr	r0, [pc, #284]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a00:	f001 fd90 	bl	8004524 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002a04:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a08:	4a45      	ldr	r2, [pc, #276]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002a0a:	2134      	movs	r1, #52	@ 0x34
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3315      	adds	r3, #21
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	220a      	movs	r2, #10
 8002a18:	4934      	ldr	r1, [pc, #208]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00b fc48 	bl	800e2b0 <itoa>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fd7d 	bl	8004524 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8002a2a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002a30:	2134      	movs	r1, #52	@ 0x34
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3315      	adds	r3, #21
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b09      	cmp	r3, #9
 8002a3e:	d803      	bhi.n	8002a48 <Si468x_dab_full_scan+0x4e4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002a40:	2100      	movs	r1, #0
 8002a42:	482f      	ldr	r0, [pc, #188]	@ (8002b00 <Si468x_dab_full_scan+0x59c>)
 8002a44:	f001 fd6e 	bl	8004524 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4837      	ldr	r0, [pc, #220]	@ (8002b28 <Si468x_dab_full_scan+0x5c4>)
 8002a4c:	f001 fd6a 	bl	8004524 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002a50:	2100      	movs	r1, #0
 8002a52:	4836      	ldr	r0, [pc, #216]	@ (8002b2c <Si468x_dab_full_scan+0x5c8>)
 8002a54:	f001 fd66 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a58:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a5c:	4a30      	ldr	r2, [pc, #192]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002a5e:	2134      	movs	r1, #52	@ 0x34
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3320      	adds	r3, #32
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	491f      	ldr	r1, [pc, #124]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f00b fc1e 	bl	800e2b0 <itoa>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 fd53 	bl	8004524 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4826      	ldr	r0, [pc, #152]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a82:	f001 fd4f 	bl	8004524 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002a86:	2100      	movs	r1, #0
 8002a88:	4828      	ldr	r0, [pc, #160]	@ (8002b2c <Si468x_dab_full_scan+0x5c8>)
 8002a8a:	f001 fd4b 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a8e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a92:	4a23      	ldr	r2, [pc, #140]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002a94:	2134      	movs	r1, #52	@ 0x34
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	332a      	adds	r3, #42	@ 0x2a
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	4912      	ldr	r1, [pc, #72]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00b fc03 	bl	800e2b0 <itoa>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 fd38 	bl	8004524 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	481e      	ldr	r0, [pc, #120]	@ (8002b30 <Si468x_dab_full_scan+0x5cc>)
 8002ab8:	f001 fd34 	bl	8004524 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8002abc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <Si468x_dab_full_scan+0x5a4>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	f4ff af01 	bcc.w	80028d6 <Si468x_dab_full_scan+0x372>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	480f      	ldr	r0, [pc, #60]	@ (8002b14 <Si468x_dab_full_scan+0x5b0>)
 8002ad8:	f001 fd24 	bl	8004524 <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 8002adc:	2301      	movs	r3, #1
	}
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	373c      	adds	r7, #60	@ 0x3c
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	0800eca8 	.word	0x0800eca8
 8002aec:	200034d0 	.word	0x200034d0
 8002af0:	0800ecac 	.word	0x0800ecac
 8002af4:	20003684 	.word	0x20003684
 8002af8:	0800ecb8 	.word	0x0800ecb8
 8002afc:	20000008 	.word	0x20000008
 8002b00:	0800ecc0 	.word	0x0800ecc0
 8002b04:	0800ecc4 	.word	0x0800ecc4
 8002b08:	20004c14 	.word	0x20004c14
 8002b0c:	0800ec34 	.word	0x0800ec34
 8002b10:	0800eccc 	.word	0x0800eccc
 8002b14:	0800ece0 	.word	0x0800ece0
 8002b18:	0800ed4c 	.word	0x0800ed4c
 8002b1c:	0800edb8 	.word	0x0800edb8
 8002b20:	200037c4 	.word	0x200037c4
 8002b24:	0800edc0 	.word	0x0800edc0
 8002b28:	0800edc4 	.word	0x0800edc4
 8002b2c:	0800edcc 	.word	0x0800edcc
 8002b30:	0800edd0 	.word	0x0800edd0

08002b34 <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	484d      	ldr	r0, [pc, #308]	@ (8002c74 <Si468x_dab_get_audio_info+0x140>)
 8002b40:	f001 fcf0 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002b44:	4b4c      	ldr	r3, [pc, #304]	@ (8002c78 <Si468x_dab_get_audio_info+0x144>)
 8002b46:	22bd      	movs	r2, #189	@ 0xbd
 8002b48:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c78 <Si468x_dab_get_audio_info+0x144>)
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002b50:	4949      	ldr	r1, [pc, #292]	@ (8002c78 <Si468x_dab_get_audio_info+0x144>)
 8002b52:	2002      	movs	r0, #2
 8002b54:	f7fe fdec 	bl	8001730 <Si468x_write_command>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b47      	ldr	r3, [pc, #284]	@ (8002c7c <Si468x_dab_get_audio_info+0x148>)
 8002b5e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f005 fbd3 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002b66:	4946      	ldr	r1, [pc, #280]	@ (8002c80 <Si468x_dab_get_audio_info+0x14c>)
 8002b68:	2014      	movs	r0, #20
 8002b6a:	f7fe fe03 	bl	8001774 <Si468x_read_reply>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b42      	ldr	r3, [pc, #264]	@ (8002c7c <Si468x_dab_get_audio_info+0x148>)
 8002b74:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info_t));
 8002b76:	4a43      	ldr	r2, [pc, #268]	@ (8002c84 <Si468x_dab_get_audio_info+0x150>)
 8002b78:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <Si468x_dab_get_audio_info+0x14c>)
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002b84:	2100      	movs	r1, #0
 8002b86:	4840      	ldr	r0, [pc, #256]	@ (8002c88 <Si468x_dab_get_audio_info+0x154>)
 8002b88:	f001 fccc 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c84 <Si468x_dab_get_audio_info+0x150>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	220a      	movs	r2, #10
 8002b92:	493e      	ldr	r1, [pc, #248]	@ (8002c8c <Si468x_dab_get_audio_info+0x158>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	f00b fb8b 	bl	800e2b0 <itoa>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fcc0 	bl	8004524 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	483a      	ldr	r0, [pc, #232]	@ (8002c90 <Si468x_dab_get_audio_info+0x15c>)
 8002ba8:	f001 fcbc 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002bac:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <Si468x_dab_get_audio_info+0x150>)
 8002bae:	885b      	ldrh	r3, [r3, #2]
 8002bb0:	220a      	movs	r2, #10
 8002bb2:	4936      	ldr	r1, [pc, #216]	@ (8002c8c <Si468x_dab_get_audio_info+0x158>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f00b fb7b 	bl	800e2b0 <itoa>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f001 fcb0 	bl	8004524 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4833      	ldr	r0, [pc, #204]	@ (8002c94 <Si468x_dab_get_audio_info+0x160>)
 8002bc8:	f001 fcac 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002c84 <Si468x_dab_get_audio_info+0x150>)
 8002bce:	791b      	ldrb	r3, [r3, #4]
 8002bd0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	492c      	ldr	r1, [pc, #176]	@ (8002c8c <Si468x_dab_get_audio_info+0x158>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f00b fb68 	bl	800e2b0 <itoa>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2101      	movs	r1, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 fc9d 	bl	8004524 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002bea:	2100      	movs	r1, #0
 8002bec:	482a      	ldr	r0, [pc, #168]	@ (8002c98 <Si468x_dab_get_audio_info+0x164>)
 8002bee:	f001 fc99 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <Si468x_dab_get_audio_info+0x150>)
 8002bf4:	791b      	ldrb	r3, [r3, #4]
 8002bf6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	220a      	movs	r2, #10
 8002bfe:	4923      	ldr	r1, [pc, #140]	@ (8002c8c <Si468x_dab_get_audio_info+0x158>)
 8002c00:	4618      	mov	r0, r3
 8002c02:	f00b fb55 	bl	800e2b0 <itoa>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 fc8a 	bl	8004524 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002c10:	2100      	movs	r1, #0
 8002c12:	4822      	ldr	r0, [pc, #136]	@ (8002c9c <Si468x_dab_get_audio_info+0x168>)
 8002c14:	f001 fc86 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002c18:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <Si468x_dab_get_audio_info+0x150>)
 8002c1a:	791b      	ldrb	r3, [r3, #4]
 8002c1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	220a      	movs	r2, #10
 8002c24:	4919      	ldr	r1, [pc, #100]	@ (8002c8c <Si468x_dab_get_audio_info+0x158>)
 8002c26:	4618      	mov	r0, r3
 8002c28:	f00b fb42 	bl	800e2b0 <itoa>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fc77 	bl	8004524 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002c36:	2100      	movs	r1, #0
 8002c38:	4819      	ldr	r0, [pc, #100]	@ (8002ca0 <Si468x_dab_get_audio_info+0x16c>)
 8002c3a:	f001 fc73 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <Si468x_dab_get_audio_info+0x150>)
 8002c40:	791b      	ldrb	r3, [r3, #4]
 8002c42:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	220a      	movs	r2, #10
 8002c4a:	4910      	ldr	r1, [pc, #64]	@ (8002c8c <Si468x_dab_get_audio_info+0x158>)
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f00b fb2f 	bl	800e2b0 <itoa>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 fc64 	bl	8004524 <send_debug_msg>

	return dab_audio_info;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <Si468x_dab_get_audio_info+0x150>)
 8002c60:	461c      	mov	r4, r3
 8002c62:	4613      	mov	r3, r2
 8002c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd90      	pop	{r4, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	0800eddc 	.word	0x0800eddc
 8002c78:	200001a8 	.word	0x200001a8
 8002c7c:	20003520 	.word	0x20003520
 8002c80:	200011a8 	.word	0x200011a8
 8002c84:	20003660 	.word	0x20003660
 8002c88:	0800ee18 	.word	0x0800ee18
 8002c8c:	200034d0 	.word	0x200034d0
 8002c90:	0800ee24 	.word	0x0800ee24
 8002c94:	0800ee34 	.word	0x0800ee34
 8002c98:	0800ee48 	.word	0x0800ee48
 8002c9c:	0800ee54 	.word	0x0800ee54
 8002ca0:	0800ee60 	.word	0x0800ee60

08002ca4 <Si468x_dab_get_event_status>:

dab_events_t Si468x_dab_get_event_status()
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	//send_debug_msg("----------------Getting DAB Event Status from Si468x------------------", CRLF_SEND);
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002cac:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <Si468x_dab_get_event_status+0x60>)
 8002cae:	22b3      	movs	r2, #179	@ 0xb3
 8002cb0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002cb2:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <Si468x_dab_get_event_status+0x60>)
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002cb8:	4912      	ldr	r1, [pc, #72]	@ (8002d04 <Si468x_dab_get_event_status+0x60>)
 8002cba:	2002      	movs	r0, #2
 8002cbc:	f7fe fd38 	bl	8001730 <Si468x_write_command>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <Si468x_dab_get_event_status+0x64>)
 8002cc6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f005 fb1f 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002cce:	490f      	ldr	r1, [pc, #60]	@ (8002d0c <Si468x_dab_get_event_status+0x68>)
 8002cd0:	2009      	movs	r0, #9
 8002cd2:	f7fe fd4f 	bl	8001774 <Si468x_read_reply>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <Si468x_dab_get_event_status+0x64>)
 8002cdc:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_events_t));
 8002cde:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <Si468x_dab_get_event_status+0x6c>)
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <Si468x_dab_get_event_status+0x68>)
 8002ce2:	3204      	adds	r2, #4
 8002ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce8:	6018      	str	r0, [r3, #0]
 8002cea:	3304      	adds	r3, #4
 8002cec:	8019      	strh	r1, [r3, #0]
	send_debug_msg("AUDIO_STATUS->BLK_LOSS (detected an audio block loss event) (0=NOLOSS, 1=LOSS): ", CRLF_NO_SEND);
	send_debug_msg(itoa(dab_events.blk_loss, itoa_buffer, 10), CRLF_SEND);

	send_debug_msg("----------------------------------------------------------------------------", CRLF_SEND);
	*/
	return dab_events;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a07      	ldr	r2, [pc, #28]	@ (8002d10 <Si468x_dab_get_event_status+0x6c>)
 8002cf2:	6810      	ldr	r0, [r2, #0]
 8002cf4:	6018      	str	r0, [r3, #0]
 8002cf6:	8892      	ldrh	r2, [r2, #4]
 8002cf8:	809a      	strh	r2, [r3, #4]
}
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200001a8 	.word	0x200001a8
 8002d08:	20003520 	.word	0x20003520
 8002d0c:	200011a8 	.word	0x200011a8
 8002d10:	20003610 	.word	0x20003610

08002d14 <Si468x_dab_get_announcement_info>:

dab_announcement_info_t Si468x_dab_get_announcement_info()
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	send_debug_msg("-----------Getting DAB Announcement Info from Si468x-------------", CRLF_SEND);
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	488c      	ldr	r0, [pc, #560]	@ (8002f50 <Si468x_dab_get_announcement_info+0x23c>)
 8002d20:	f001 fc00 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ANNOUNCEMENT_INFO;
 8002d24:	4b8b      	ldr	r3, [pc, #556]	@ (8002f54 <Si468x_dab_get_announcement_info+0x240>)
 8002d26:	22b6      	movs	r2, #182	@ 0xb6
 8002d28:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//padding - always 0
 8002d2a:	4b8a      	ldr	r3, [pc, #552]	@ (8002f54 <Si468x_dab_get_announcement_info+0x240>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002d30:	4988      	ldr	r1, [pc, #544]	@ (8002f54 <Si468x_dab_get_announcement_info+0x240>)
 8002d32:	2002      	movs	r0, #2
 8002d34:	f7fe fcfc 	bl	8001730 <Si468x_write_command>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b86      	ldr	r3, [pc, #536]	@ (8002f58 <Si468x_dab_get_announcement_info+0x244>)
 8002d3e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f005 fae3 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(16, dab_spi_rx_buffer);
 8002d46:	4985      	ldr	r1, [pc, #532]	@ (8002f5c <Si468x_dab_get_announcement_info+0x248>)
 8002d48:	2010      	movs	r0, #16
 8002d4a:	f7fe fd13 	bl	8001774 <Si468x_read_reply>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b81      	ldr	r3, [pc, #516]	@ (8002f58 <Si468x_dab_get_announcement_info+0x244>)
 8002d54:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_announcement_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_announcement_info_t));
 8002d56:	4a82      	ldr	r2, [pc, #520]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002d58:	4b80      	ldr	r3, [pc, #512]	@ (8002f5c <Si468x_dab_get_announcement_info+0x248>)
 8002d5a:	4614      	mov	r4, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	send_debug_msg("Anno Queue Overflow (0=FALSE, 1=TRUE): ", CRLF_NO_SEND);
 8002d66:	2100      	movs	r1, #0
 8002d68:	487e      	ldr	r0, [pc, #504]	@ (8002f64 <Si468x_dab_get_announcement_info+0x250>)
 8002d6a:	f001 fbdb 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.anno_q_ovfl, itoa_buffer, 10), CRLF_SEND);
 8002d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	220a      	movs	r2, #10
 8002d7a:	497b      	ldr	r1, [pc, #492]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f00b fa97 	bl	800e2b0 <itoa>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fbcc 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno Queue Size (0...10): ", CRLF_NO_SEND);
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4877      	ldr	r0, [pc, #476]	@ (8002f6c <Si468x_dab_get_announcement_info+0x258>)
 8002d90:	f001 fbc8 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.anno_q_size, itoa_buffer, 10), CRLF_SEND);
 8002d94:	4b72      	ldr	r3, [pc, #456]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	220a      	movs	r2, #10
 8002da0:	4971      	ldr	r1, [pc, #452]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f00b fa84 	bl	800e2b0 <itoa>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 fbb9 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno Cluster ID (0...255): ", CRLF_NO_SEND);
 8002db2:	2100      	movs	r1, #0
 8002db4:	486e      	ldr	r0, [pc, #440]	@ (8002f70 <Si468x_dab_get_announcement_info+0x25c>)
 8002db6:	f001 fbb5 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.cluster_id, itoa_buffer, 10), CRLF_SEND);
 8002dba:	4b69      	ldr	r3, [pc, #420]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002dbc:	789b      	ldrb	r3, [r3, #2]
 8002dbe:	220a      	movs	r2, #10
 8002dc0:	4969      	ldr	r1, [pc, #420]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f00b fa74 	bl	800e2b0 <itoa>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 fba9 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno Flags: NEW_FLAG (0=REPEAT, 1=NEW): ", CRLF_NO_SEND);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4867      	ldr	r0, [pc, #412]	@ (8002f74 <Si468x_dab_get_announcement_info+0x260>)
 8002dd6:	f001 fba5 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.new_flag, itoa_buffer, 10), CRLF_SEND);
 8002dda:	4b61      	ldr	r3, [pc, #388]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	220a      	movs	r2, #10
 8002de6:	4960      	ldr	r1, [pc, #384]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002de8:	4618      	mov	r0, r3
 8002dea:	f00b fa61 	bl	800e2b0 <itoa>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fb96 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno Flags: ANNO_STAT (0=OFF, 1=ON): ", CRLF_NO_SEND);
 8002df8:	2100      	movs	r1, #0
 8002dfa:	485f      	ldr	r0, [pc, #380]	@ (8002f78 <Si468x_dab_get_announcement_info+0x264>)
 8002dfc:	f001 fb92 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.anno_stat, itoa_buffer, 10), CRLF_SEND);
 8002e00:	4b57      	ldr	r3, [pc, #348]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002e02:	78db      	ldrb	r3, [r3, #3]
 8002e04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	220a      	movs	r2, #10
 8002e0c:	4956      	ldr	r1, [pc, #344]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f00b fa4e 	bl	800e2b0 <itoa>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2101      	movs	r1, #1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 fb83 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno Flags: REGION_FLAG (0=NOT AVAILABLE, 1=AVAILABLE): ", CRLF_NO_SEND);
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4856      	ldr	r0, [pc, #344]	@ (8002f7c <Si468x_dab_get_announcement_info+0x268>)
 8002e22:	f001 fb7f 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.region_flag, itoa_buffer, 10), CRLF_SEND);
 8002e26:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002e28:	78db      	ldrb	r3, [r3, #3]
 8002e2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	220a      	movs	r2, #10
 8002e32:	494d      	ldr	r1, [pc, #308]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002e34:	4618      	mov	r0, r3
 8002e36:	f00b fa3b 	bl	800e2b0 <itoa>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fb70 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno Flags: SOURCE (0=CURRENT ENS, 1=OTHER ENS, 2=FM): ", CRLF_NO_SEND);
 8002e44:	2100      	movs	r1, #0
 8002e46:	484e      	ldr	r0, [pc, #312]	@ (8002f80 <Si468x_dab_get_announcement_info+0x26c>)
 8002e48:	f001 fb6c 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.src, itoa_buffer, 10), CRLF_SEND);
 8002e4c:	4b44      	ldr	r3, [pc, #272]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002e4e:	78db      	ldrb	r3, [r3, #3]
 8002e50:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	220a      	movs	r2, #10
 8002e58:	4943      	ldr	r1, [pc, #268]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f00b fa28 	bl	800e2b0 <itoa>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 fb5d 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno Types Flags. Each bit means different anno type: ", CRLF_NO_SEND);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4845      	ldr	r0, [pc, #276]	@ (8002f84 <Si468x_dab_get_announcement_info+0x270>)
 8002e6e:	f001 fb59 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.asw, itoa_buffer, 10), CRLF_SEND);
 8002e72:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002e74:	889b      	ldrh	r3, [r3, #4]
 8002e76:	220a      	movs	r2, #10
 8002e78:	493b      	ldr	r1, [pc, #236]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f00b fa18 	bl	800e2b0 <itoa>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fb4d 	bl	8004524 <send_debug_msg>

	send_debug_msg("Announcement Flags: NEW_FLAG (0=REPEAT, 1=NEW): ", CRLF_NO_SEND);
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	483e      	ldr	r0, [pc, #248]	@ (8002f88 <Si468x_dab_get_announcement_info+0x274>)
 8002e8e:	f001 fb49 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.new_flag, itoa_buffer, 10), CRLF_SEND);
 8002e92:	4b33      	ldr	r3, [pc, #204]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002e94:	78db      	ldrb	r3, [r3, #3]
 8002e96:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	220a      	movs	r2, #10
 8002e9e:	4932      	ldr	r1, [pc, #200]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f00b fa05 	bl	800e2b0 <itoa>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 fb3a 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno ID1: ", CRLF_NO_SEND);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4836      	ldr	r0, [pc, #216]	@ (8002f8c <Si468x_dab_get_announcement_info+0x278>)
 8002eb4:	f001 fb36 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.id_1, itoa_buffer, 10), CRLF_SEND);
 8002eb8:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002eba:	88db      	ldrh	r3, [r3, #6]
 8002ebc:	220a      	movs	r2, #10
 8002ebe:	492a      	ldr	r1, [pc, #168]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f00b f9f5 	bl	800e2b0 <itoa>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 fb2a 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno ID2: ", CRLF_NO_SEND);
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	482f      	ldr	r0, [pc, #188]	@ (8002f90 <Si468x_dab_get_announcement_info+0x27c>)
 8002ed4:	f001 fb26 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.id_2, itoa_buffer, 10), CRLF_SEND);
 8002ed8:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002eda:	891b      	ldrh	r3, [r3, #8]
 8002edc:	220a      	movs	r2, #10
 8002ede:	4922      	ldr	r1, [pc, #136]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00b f9e5 	bl	800e2b0 <itoa>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 fb1a 	bl	8004524 <send_debug_msg>

	send_debug_msg("Region ID1: ", CRLF_NO_SEND);
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4828      	ldr	r0, [pc, #160]	@ (8002f94 <Si468x_dab_get_announcement_info+0x280>)
 8002ef4:	f001 fb16 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.region_id_1, itoa_buffer, 10), CRLF_SEND);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002efa:	7a9b      	ldrb	r3, [r3, #10]
 8002efc:	220a      	movs	r2, #10
 8002efe:	491a      	ldr	r1, [pc, #104]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002f00:	4618      	mov	r0, r3
 8002f02:	f00b f9d5 	bl	800e2b0 <itoa>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fb0a 	bl	8004524 <send_debug_msg>

	send_debug_msg("Region ID2: ", CRLF_NO_SEND);
 8002f10:	2100      	movs	r1, #0
 8002f12:	4821      	ldr	r0, [pc, #132]	@ (8002f98 <Si468x_dab_get_announcement_info+0x284>)
 8002f14:	f001 fb06 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_info.region_id_2, itoa_buffer, 10), CRLF_SEND);
 8002f18:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002f1a:	7adb      	ldrb	r3, [r3, #11]
 8002f1c:	220a      	movs	r2, #10
 8002f1e:	4912      	ldr	r1, [pc, #72]	@ (8002f68 <Si468x_dab_get_announcement_info+0x254>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f00b f9c5 	bl	800e2b0 <itoa>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 fafa 	bl	8004524 <send_debug_msg>

	send_debug_msg("------------------------------------------------------------------------", CRLF_SEND);
 8002f30:	2101      	movs	r1, #1
 8002f32:	481a      	ldr	r0, [pc, #104]	@ (8002f9c <Si468x_dab_get_announcement_info+0x288>)
 8002f34:	f001 faf6 	bl	8004524 <send_debug_msg>
	return dab_announcement_info;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a09      	ldr	r2, [pc, #36]	@ (8002f60 <Si468x_dab_get_announcement_info+0x24c>)
 8002f3c:	461c      	mov	r4, r3
 8002f3e:	4613      	mov	r3, r2
 8002f40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f42:	6020      	str	r0, [r4, #0]
 8002f44:	6061      	str	r1, [r4, #4]
 8002f46:	60a2      	str	r2, [r4, #8]
}
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}
 8002f50:	0800ee70 	.word	0x0800ee70
 8002f54:	200001a8 	.word	0x200001a8
 8002f58:	20003520 	.word	0x20003520
 8002f5c:	200011a8 	.word	0x200011a8
 8002f60:	20003618 	.word	0x20003618
 8002f64:	0800eeb4 	.word	0x0800eeb4
 8002f68:	200034d0 	.word	0x200034d0
 8002f6c:	0800eedc 	.word	0x0800eedc
 8002f70:	0800eef8 	.word	0x0800eef8
 8002f74:	0800ef14 	.word	0x0800ef14
 8002f78:	0800ef40 	.word	0x0800ef40
 8002f7c:	0800ef68 	.word	0x0800ef68
 8002f80:	0800efa4 	.word	0x0800efa4
 8002f84:	0800efdc 	.word	0x0800efdc
 8002f88:	0800f014 	.word	0x0800f014
 8002f8c:	0800f048 	.word	0x0800f048
 8002f90:	0800f054 	.word	0x0800f054
 8002f94:	0800f060 	.word	0x0800f060
 8002f98:	0800f070 	.word	0x0800f070
 8002f9c:	0800f080 	.word	0x0800f080

08002fa0 <Si468x_dab_get_announcement_support_info>:

dab_announcement_support_info_t Si468x_dab_get_announcement_support_info(uint32_t _service_id)
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
	send_debug_msg("-----------Getting DAB Announcement Support Info from Si468x-------------", CRLF_SEND);
 8002faa:	2101      	movs	r1, #1
 8002fac:	48c4      	ldr	r0, [pc, #784]	@ (80032c0 <Si468x_dab_get_announcement_support_info+0x320>)
 8002fae:	f001 fab9 	bl	8004524 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ANNOUNCEMENT_SUPPORT_INFO;
 8002fb2:	4bc4      	ldr	r3, [pc, #784]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002fb4:	22b5      	movs	r2, #181	@ 0xb5
 8002fb6:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//Announcement source. 0 = current ensemble (FIG 0/18), 1 = other ensemble (FIG 0/25), 2 = FM (FIG 0/27)
 8002fb8:	4bc2      	ldr	r3, [pc, #776]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//padding - always 0
 8002fbe:	4bc1      	ldr	r3, [pc, #772]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//padding - always 0
 8002fc4:	4bbf      	ldr	r3, [pc, #764]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = _service_id & 0xFF;					//Service ID [7:0] The service ID of which the announcement support information will be returned.
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4bbd      	ldr	r3, [pc, #756]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002fd0:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = _service_id >> 8;					//Service ID [15:8] The service ID of which the announcement support information will be returned.
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	4bba      	ldr	r3, [pc, #744]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002fda:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = _service_id >> 16;					//Service ID [23:16] The service ID of which the announcement support information will be returned.
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4bb8      	ldr	r3, [pc, #736]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002fe4:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = _service_id >> 24;					//Service ID [31:24] The service ID of which the announcement support information will be returned.
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	0e1b      	lsrs	r3, r3, #24
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	4bb5      	ldr	r3, [pc, #724]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002fee:	71da      	strb	r2, [r3, #7]


	status = Si468x_write_command(8, dab_spi_tx_buffer);
 8002ff0:	49b4      	ldr	r1, [pc, #720]	@ (80032c4 <Si468x_dab_get_announcement_support_info+0x324>)
 8002ff2:	2008      	movs	r0, #8
 8002ff4:	f7fe fb9c 	bl	8001730 <Si468x_write_command>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4bb2      	ldr	r3, [pc, #712]	@ (80032c8 <Si468x_dab_get_announcement_support_info+0x328>)
 8002ffe:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8003000:	2001      	movs	r0, #1
 8003002:	f005 f983 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8003006:	49b1      	ldr	r1, [pc, #708]	@ (80032cc <Si468x_dab_get_announcement_support_info+0x32c>)
 8003008:	2005      	movs	r0, #5
 800300a:	f7fe fbb3 	bl	8001774 <Si468x_read_reply>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	4bad      	ldr	r3, [pc, #692]	@ (80032c8 <Si468x_dab_get_announcement_support_info+0x328>)
 8003014:	701a      	strb	r2, [r3, #0]

	if(dab_spi_rx_buffer[4] <= 23) //when num_ids valid (23 maximum)
 8003016:	4bad      	ldr	r3, [pc, #692]	@ (80032cc <Si468x_dab_get_announcement_support_info+0x32c>)
 8003018:	791b      	ldrb	r3, [r3, #4]
 800301a:	2b17      	cmp	r3, #23
 800301c:	d817      	bhi.n	800304e <Si468x_dab_get_announcement_support_info+0xae>
	{
		status = Si468x_read_reply(8 + 2 * dab_spi_rx_buffer[4], dab_spi_rx_buffer); //first 8 bytes + 2 bytes for each ID
 800301e:	4bab      	ldr	r3, [pc, #684]	@ (80032cc <Si468x_dab_get_announcement_support_info+0x32c>)
 8003020:	791b      	ldrb	r3, [r3, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	b29b      	uxth	r3, r3
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	b29b      	uxth	r3, r3
 800302a:	49a8      	ldr	r1, [pc, #672]	@ (80032cc <Si468x_dab_get_announcement_support_info+0x32c>)
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fba1 	bl	8001774 <Si468x_read_reply>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	4ba4      	ldr	r3, [pc, #656]	@ (80032c8 <Si468x_dab_get_announcement_support_info+0x328>)
 8003038:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&dab_announcement_support_info, (uint8_t*)&dab_spi_rx_buffer[4], 4 + 2 * dab_spi_rx_buffer[4]); //copy only valid data
 800303a:	4ba4      	ldr	r3, [pc, #656]	@ (80032cc <Si468x_dab_get_announcement_support_info+0x32c>)
 800303c:	791b      	ldrb	r3, [r3, #4]
 800303e:	3302      	adds	r3, #2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	461a      	mov	r2, r3
 8003044:	49a2      	ldr	r1, [pc, #648]	@ (80032d0 <Si468x_dab_get_announcement_support_info+0x330>)
 8003046:	48a3      	ldr	r0, [pc, #652]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003048:	f00b f9a2 	bl	800e390 <memcpy>
 800304c:	e003      	b.n	8003056 <Si468x_dab_get_announcement_support_info+0xb6>
	}

	else	//when num_ids not valid
	{
		memcpy((uint8_t*)&dab_announcement_support_info, (uint8_t*)&dab_spi_rx_buffer[4], 4); //only num_ids, padding and 16-bit ASU
 800304e:	4b9f      	ldr	r3, [pc, #636]	@ (80032cc <Si468x_dab_get_announcement_support_info+0x32c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4aa0      	ldr	r2, [pc, #640]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003054:	6013      	str	r3, [r2, #0]
	}

	send_debug_msg("Number of IDs: ", CRLF_NO_SEND);
 8003056:	2100      	movs	r1, #0
 8003058:	489f      	ldr	r0, [pc, #636]	@ (80032d8 <Si468x_dab_get_announcement_support_info+0x338>)
 800305a:	f001 fa63 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.num_ids, itoa_buffer, 10), CRLF_SEND);
 800305e:	4b9d      	ldr	r3, [pc, #628]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	220a      	movs	r2, #10
 8003064:	499d      	ldr	r1, [pc, #628]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 8003066:	4618      	mov	r0, r3
 8003068:	f00b f922 	bl	800e2b0 <itoa>
 800306c:	4603      	mov	r3, r0
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fa57 	bl	8004524 <send_debug_msg>

	send_debug_msg("Anno Types Support Flags. 1 = supported, 0 = not supported: ", CRLF_SEND);
 8003076:	2101      	movs	r1, #1
 8003078:	4899      	ldr	r0, [pc, #612]	@ (80032e0 <Si468x_dab_get_announcement_support_info+0x340>)
 800307a:	f001 fa53 	bl	8004524 <send_debug_msg>
	send_debug_msg("Alarm:      ", CRLF_NO_SEND);
 800307e:	2100      	movs	r1, #0
 8003080:	4898      	ldr	r0, [pc, #608]	@ (80032e4 <Si468x_dab_get_announcement_support_info+0x344>)
 8003082:	f001 fa4f 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.alarm, itoa_buffer, 10), CRLF_SEND);
 8003086:	4b93      	ldr	r3, [pc, #588]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003088:	789b      	ldrb	r3, [r3, #2]
 800308a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	220a      	movs	r2, #10
 8003092:	4992      	ldr	r1, [pc, #584]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 8003094:	4618      	mov	r0, r3
 8003096:	f00b f90b 	bl	800e2b0 <itoa>
 800309a:	4603      	mov	r3, r0
 800309c:	2101      	movs	r1, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 fa40 	bl	8004524 <send_debug_msg>
	send_debug_msg("Traffic:    ", CRLF_NO_SEND);
 80030a4:	2100      	movs	r1, #0
 80030a6:	4890      	ldr	r0, [pc, #576]	@ (80032e8 <Si468x_dab_get_announcement_support_info+0x348>)
 80030a8:	f001 fa3c 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.traffic, itoa_buffer, 10), CRLF_SEND);
 80030ac:	4b89      	ldr	r3, [pc, #548]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 80030ae:	789b      	ldrb	r3, [r3, #2]
 80030b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	220a      	movs	r2, #10
 80030b8:	4988      	ldr	r1, [pc, #544]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 80030ba:	4618      	mov	r0, r3
 80030bc:	f00b f8f8 	bl	800e2b0 <itoa>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2101      	movs	r1, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 fa2d 	bl	8004524 <send_debug_msg>
	send_debug_msg("Transport:  ", CRLF_NO_SEND);
 80030ca:	2100      	movs	r1, #0
 80030cc:	4887      	ldr	r0, [pc, #540]	@ (80032ec <Si468x_dab_get_announcement_support_info+0x34c>)
 80030ce:	f001 fa29 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.transport, itoa_buffer, 10), CRLF_SEND);
 80030d2:	4b80      	ldr	r3, [pc, #512]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 80030d4:	789b      	ldrb	r3, [r3, #2]
 80030d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	220a      	movs	r2, #10
 80030de:	497f      	ldr	r1, [pc, #508]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 80030e0:	4618      	mov	r0, r3
 80030e2:	f00b f8e5 	bl	800e2b0 <itoa>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2101      	movs	r1, #1
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 fa1a 	bl	8004524 <send_debug_msg>
	send_debug_msg("Warning:    ", CRLF_NO_SEND);
 80030f0:	2100      	movs	r1, #0
 80030f2:	487f      	ldr	r0, [pc, #508]	@ (80032f0 <Si468x_dab_get_announcement_support_info+0x350>)
 80030f4:	f001 fa16 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.warning, itoa_buffer, 10), CRLF_SEND);
 80030f8:	4b76      	ldr	r3, [pc, #472]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 80030fa:	789b      	ldrb	r3, [r3, #2]
 80030fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	220a      	movs	r2, #10
 8003104:	4975      	ldr	r1, [pc, #468]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 8003106:	4618      	mov	r0, r3
 8003108:	f00b f8d2 	bl	800e2b0 <itoa>
 800310c:	4603      	mov	r3, r0
 800310e:	2101      	movs	r1, #1
 8003110:	4618      	mov	r0, r3
 8003112:	f001 fa07 	bl	8004524 <send_debug_msg>
	send_debug_msg("News:       ", CRLF_NO_SEND);
 8003116:	2100      	movs	r1, #0
 8003118:	4876      	ldr	r0, [pc, #472]	@ (80032f4 <Si468x_dab_get_announcement_support_info+0x354>)
 800311a:	f001 fa03 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.news, itoa_buffer, 10), CRLF_SEND);
 800311e:	4b6d      	ldr	r3, [pc, #436]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003120:	789b      	ldrb	r3, [r3, #2]
 8003122:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	220a      	movs	r2, #10
 800312a:	496c      	ldr	r1, [pc, #432]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 800312c:	4618      	mov	r0, r3
 800312e:	f00b f8bf 	bl	800e2b0 <itoa>
 8003132:	4603      	mov	r3, r0
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f001 f9f4 	bl	8004524 <send_debug_msg>
	send_debug_msg("Weather:    ", CRLF_NO_SEND);
 800313c:	2100      	movs	r1, #0
 800313e:	486e      	ldr	r0, [pc, #440]	@ (80032f8 <Si468x_dab_get_announcement_support_info+0x358>)
 8003140:	f001 f9f0 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.weather, itoa_buffer, 10), CRLF_SEND);
 8003144:	4b63      	ldr	r3, [pc, #396]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003146:	789b      	ldrb	r3, [r3, #2]
 8003148:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	220a      	movs	r2, #10
 8003150:	4962      	ldr	r1, [pc, #392]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 8003152:	4618      	mov	r0, r3
 8003154:	f00b f8ac 	bl	800e2b0 <itoa>
 8003158:	4603      	mov	r3, r0
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f9e1 	bl	8004524 <send_debug_msg>
	send_debug_msg("Event:      ", CRLF_NO_SEND);
 8003162:	2100      	movs	r1, #0
 8003164:	4865      	ldr	r0, [pc, #404]	@ (80032fc <Si468x_dab_get_announcement_support_info+0x35c>)
 8003166:	f001 f9dd 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.event, itoa_buffer, 10), CRLF_SEND);
 800316a:	4b5a      	ldr	r3, [pc, #360]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 800316c:	789b      	ldrb	r3, [r3, #2]
 800316e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	220a      	movs	r2, #10
 8003176:	4959      	ldr	r1, [pc, #356]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 8003178:	4618      	mov	r0, r3
 800317a:	f00b f899 	bl	800e2b0 <itoa>
 800317e:	4603      	mov	r3, r0
 8003180:	2101      	movs	r1, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f9ce 	bl	8004524 <send_debug_msg>
	send_debug_msg("Special:    ", CRLF_NO_SEND);
 8003188:	2100      	movs	r1, #0
 800318a:	485d      	ldr	r0, [pc, #372]	@ (8003300 <Si468x_dab_get_announcement_support_info+0x360>)
 800318c:	f001 f9ca 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.special, itoa_buffer, 10), CRLF_SEND);
 8003190:	4b50      	ldr	r3, [pc, #320]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003192:	789b      	ldrb	r3, [r3, #2]
 8003194:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	220a      	movs	r2, #10
 800319c:	494f      	ldr	r1, [pc, #316]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f00b f886 	bl	800e2b0 <itoa>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f001 f9bb 	bl	8004524 <send_debug_msg>
	send_debug_msg("Radio_Info: ", CRLF_NO_SEND);
 80031ae:	2100      	movs	r1, #0
 80031b0:	4854      	ldr	r0, [pc, #336]	@ (8003304 <Si468x_dab_get_announcement_support_info+0x364>)
 80031b2:	f001 f9b7 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.rad_info, itoa_buffer, 10), CRLF_SEND);
 80031b6:	4b47      	ldr	r3, [pc, #284]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 80031b8:	78db      	ldrb	r3, [r3, #3]
 80031ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	220a      	movs	r2, #10
 80031c2:	4946      	ldr	r1, [pc, #280]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00b f873 	bl	800e2b0 <itoa>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2101      	movs	r1, #1
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 f9a8 	bl	8004524 <send_debug_msg>
	send_debug_msg("Sport:      ", CRLF_NO_SEND);
 80031d4:	2100      	movs	r1, #0
 80031d6:	484c      	ldr	r0, [pc, #304]	@ (8003308 <Si468x_dab_get_announcement_support_info+0x368>)
 80031d8:	f001 f9a4 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.sport, itoa_buffer, 10), CRLF_SEND);
 80031dc:	4b3d      	ldr	r3, [pc, #244]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 80031de:	78db      	ldrb	r3, [r3, #3]
 80031e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	220a      	movs	r2, #10
 80031e8:	493c      	ldr	r1, [pc, #240]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 80031ea:	4618      	mov	r0, r3
 80031ec:	f00b f860 	bl	800e2b0 <itoa>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 f995 	bl	8004524 <send_debug_msg>
	send_debug_msg("Finance:    ", CRLF_NO_SEND);
 80031fa:	2100      	movs	r1, #0
 80031fc:	4843      	ldr	r0, [pc, #268]	@ (800330c <Si468x_dab_get_announcement_support_info+0x36c>)
 80031fe:	f001 f991 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_announcement_support_info.anno_support.finance, itoa_buffer, 10), CRLF_SEND);
 8003202:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003204:	78db      	ldrb	r3, [r3, #3]
 8003206:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800320a:	b2db      	uxtb	r3, r3
 800320c:	220a      	movs	r2, #10
 800320e:	4933      	ldr	r1, [pc, #204]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 8003210:	4618      	mov	r0, r3
 8003212:	f00b f84d 	bl	800e2b0 <itoa>
 8003216:	4603      	mov	r3, r0
 8003218:	2101      	movs	r1, #1
 800321a:	4618      	mov	r0, r3
 800321c:	f001 f982 	bl	8004524 <send_debug_msg>

	uint8_t _num_ids = dab_announcement_support_info.num_ids;
 8003220:	4b2c      	ldr	r3, [pc, #176]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	73bb      	strb	r3, [r7, #14]

	if(_num_ids > 23) _num_ids = 0;
 8003226:	7bbb      	ldrb	r3, [r7, #14]
 8003228:	2b17      	cmp	r3, #23
 800322a:	d901      	bls.n	8003230 <Si468x_dab_get_announcement_support_info+0x290>
 800322c:	2300      	movs	r3, #0
 800322e:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = 0; i < dab_announcement_support_info.num_ids; i++)
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e024      	b.n	8003280 <Si468x_dab_get_announcement_support_info+0x2e0>
	{
		send_debug_msg("ID ", CRLF_NO_SEND);
 8003236:	2100      	movs	r1, #0
 8003238:	4835      	ldr	r0, [pc, #212]	@ (8003310 <Si468x_dab_get_announcement_support_info+0x370>)
 800323a:	f001 f973 	bl	8004524 <send_debug_msg>
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	220a      	movs	r2, #10
 8003242:	4926      	ldr	r1, [pc, #152]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 8003244:	4618      	mov	r0, r3
 8003246:	f00b f833 	bl	800e2b0 <itoa>
 800324a:	4603      	mov	r3, r0
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f001 f968 	bl	8004524 <send_debug_msg>
		send_debug_msg(". When SRC is current ensemble, this is the cluster id. : ", CRLF_NO_SEND);
 8003254:	2100      	movs	r1, #0
 8003256:	482f      	ldr	r0, [pc, #188]	@ (8003314 <Si468x_dab_get_announcement_support_info+0x374>)
 8003258:	f001 f964 	bl	8004524 <send_debug_msg>
		send_debug_msg(itoa(dab_announcement_support_info.id[i], itoa_buffer, 10), CRLF_SEND);
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	4a1d      	ldr	r2, [pc, #116]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	889b      	ldrh	r3, [r3, #4]
 8003266:	220a      	movs	r2, #10
 8003268:	491c      	ldr	r1, [pc, #112]	@ (80032dc <Si468x_dab_get_announcement_support_info+0x33c>)
 800326a:	4618      	mov	r0, r3
 800326c:	f00b f820 	bl	800e2b0 <itoa>
 8003270:	4603      	mov	r3, r0
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f001 f955 	bl	8004524 <send_debug_msg>
	for(uint8_t i = 0; i < dab_announcement_support_info.num_ids; i++)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	3301      	adds	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3d5      	bcc.n	8003236 <Si468x_dab_get_announcement_support_info+0x296>
	}
	return dab_announcement_support_info;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a11      	ldr	r2, [pc, #68]	@ (80032d4 <Si468x_dab_get_announcement_support_info+0x334>)
 800328e:	4614      	mov	r4, r2
 8003290:	469c      	mov	ip, r3
 8003292:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8003296:	4665      	mov	r5, ip
 8003298:	4626      	mov	r6, r4
 800329a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800329c:	6028      	str	r0, [r5, #0]
 800329e:	6069      	str	r1, [r5, #4]
 80032a0:	60aa      	str	r2, [r5, #8]
 80032a2:	60eb      	str	r3, [r5, #12]
 80032a4:	3410      	adds	r4, #16
 80032a6:	f10c 0c10 	add.w	ip, ip, #16
 80032aa:	4574      	cmp	r4, lr
 80032ac:	d1f3      	bne.n	8003296 <Si468x_dab_get_announcement_support_info+0x2f6>
 80032ae:	4662      	mov	r2, ip
 80032b0:	4623      	mov	r3, r4
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	8013      	strh	r3, [r2, #0]
}
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032be:	bf00      	nop
 80032c0:	0800f0cc 	.word	0x0800f0cc
 80032c4:	200001a8 	.word	0x200001a8
 80032c8:	20003520 	.word	0x20003520
 80032cc:	200011a8 	.word	0x200011a8
 80032d0:	200011ac 	.word	0x200011ac
 80032d4:	20003624 	.word	0x20003624
 80032d8:	0800f118 	.word	0x0800f118
 80032dc:	200034d0 	.word	0x200034d0
 80032e0:	0800f128 	.word	0x0800f128
 80032e4:	0800f168 	.word	0x0800f168
 80032e8:	0800f178 	.word	0x0800f178
 80032ec:	0800f188 	.word	0x0800f188
 80032f0:	0800f198 	.word	0x0800f198
 80032f4:	0800f1a8 	.word	0x0800f1a8
 80032f8:	0800f1b8 	.word	0x0800f1b8
 80032fc:	0800f1c8 	.word	0x0800f1c8
 8003300:	0800f1d8 	.word	0x0800f1d8
 8003304:	0800f1e8 	.word	0x0800f1e8
 8003308:	0800f1f8 	.word	0x0800f1f8
 800330c:	0800f208 	.word	0x0800f208
 8003310:	0800f218 	.word	0x0800f218
 8003314:	0800f21c 	.word	0x0800f21c

08003318 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8003324:	2101      	movs	r1, #1
 8003326:	484a      	ldr	r0, [pc, #296]	@ (8003450 <Si468x_dab_get_component_info+0x138>)
 8003328:	f001 f8fc 	bl	8004524 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 800332c:	4b49      	ldr	r3, [pc, #292]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 800332e:	22bb      	movs	r2, #187	@ 0xbb
 8003330:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8003332:	4b48      	ldr	r3, [pc, #288]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 8003334:	2200      	movs	r2, #0
 8003336:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8003338:	4b46      	ldr	r3, [pc, #280]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 800333a:	2200      	movs	r2, #0
 800333c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 800333e:	4b45      	ldr	r3, [pc, #276]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 8003340:	2200      	movs	r2, #0
 8003342:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b42      	ldr	r3, [pc, #264]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 800334a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b40      	ldr	r3, [pc, #256]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 8003354:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	b2da      	uxtb	r2, r3
 800335c:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 800335e:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0e1b      	lsrs	r3, r3, #24
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 8003368:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 800336a:	4a3a      	ldr	r2, [pc, #232]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	121b      	asrs	r3, r3, #8
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4b37      	ldr	r3, [pc, #220]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 8003378:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	141b      	asrs	r3, r3, #16
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b34      	ldr	r3, [pc, #208]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 8003382:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	161b      	asrs	r3, r3, #24
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b32      	ldr	r3, [pc, #200]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 800338c:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800338e:	4931      	ldr	r1, [pc, #196]	@ (8003454 <Si468x_dab_get_component_info+0x13c>)
 8003390:	200c      	movs	r0, #12
 8003392:	f7fe f9cd 	bl	8001730 <Si468x_write_command>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	4b2f      	ldr	r3, [pc, #188]	@ (8003458 <Si468x_dab_get_component_info+0x140>)
 800339c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 800339e:	2005      	movs	r0, #5
 80033a0:	f004 ffb4 	bl	800830c <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 80033a4:	492d      	ldr	r1, [pc, #180]	@ (800345c <Si468x_dab_get_component_info+0x144>)
 80033a6:	201a      	movs	r0, #26
 80033a8:	f7fe f9e4 	bl	8001774 <Si468x_read_reply>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b29      	ldr	r3, [pc, #164]	@ (8003458 <Si468x_dab_get_component_info+0x140>)
 80033b2:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 80033b4:	4b29      	ldr	r3, [pc, #164]	@ (800345c <Si468x_dab_get_component_info+0x144>)
 80033b6:	799b      	ldrb	r3, [r3, #6]
 80033b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033bc:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 80033be:	2300      	movs	r3, #0
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e00c      	b.n	80033de <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 80033c4:	7ffb      	ldrb	r3, [r7, #31]
 80033c6:	f103 0208 	add.w	r2, r3, #8
 80033ca:	7ffb      	ldrb	r3, [r7, #31]
 80033cc:	4923      	ldr	r1, [pc, #140]	@ (800345c <Si468x_dab_get_component_info+0x144>)
 80033ce:	5c8a      	ldrb	r2, [r1, r2]
 80033d0:	3320      	adds	r3, #32
 80033d2:	443b      	add	r3, r7
 80033d4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
 80033da:	3301      	adds	r3, #1
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	7ffb      	ldrb	r3, [r7, #31]
 80033e0:	2b0f      	cmp	r3, #15
 80033e2:	d9ef      	bls.n	80033c4 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 80033e4:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <Si468x_dab_get_component_info+0x144>)
 80033e6:	7e1b      	ldrb	r3, [r3, #24]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b1c      	ldr	r3, [pc, #112]	@ (800345c <Si468x_dab_get_component_info+0x144>)
 80033ec:	7e5b      	ldrb	r3, [r3, #25]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 80033f6:	2100      	movs	r1, #0
 80033f8:	4819      	ldr	r0, [pc, #100]	@ (8003460 <Si468x_dab_get_component_info+0x148>)
 80033fa:	f001 f893 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 80033fe:	7fbb      	ldrb	r3, [r7, #30]
 8003400:	220a      	movs	r2, #10
 8003402:	4918      	ldr	r1, [pc, #96]	@ (8003464 <Si468x_dab_get_component_info+0x14c>)
 8003404:	4618      	mov	r0, r3
 8003406:	f00a ff53 	bl	800e2b0 <itoa>
 800340a:	4603      	mov	r3, r0
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f001 f888 	bl	8004524 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8003414:	2100      	movs	r1, #0
 8003416:	4814      	ldr	r0, [pc, #80]	@ (8003468 <Si468x_dab_get_component_info+0x150>)
 8003418:	f001 f884 	bl	8004524 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f001 f87e 	bl	8004524 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8003428:	2100      	movs	r1, #0
 800342a:	4810      	ldr	r0, [pc, #64]	@ (800346c <Si468x_dab_get_component_info+0x154>)
 800342c:	f001 f87a 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8003430:	8bbb      	ldrh	r3, [r7, #28]
 8003432:	2202      	movs	r2, #2
 8003434:	490b      	ldr	r1, [pc, #44]	@ (8003464 <Si468x_dab_get_component_info+0x14c>)
 8003436:	4618      	mov	r0, r3
 8003438:	f00a ff3a 	bl	800e2b0 <itoa>
 800343c:	4603      	mov	r3, r0
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f001 f86f 	bl	8004524 <send_debug_msg>

}
 8003446:	bf00      	nop
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	0800f258 	.word	0x0800f258
 8003454:	200001a8 	.word	0x200001a8
 8003458:	20003520 	.word	0x20003520
 800345c:	200011a8 	.word	0x200011a8
 8003460:	0800f28c 	.word	0x0800f28c
 8003464:	200034d0 	.word	0x200034d0
 8003468:	0800f298 	.word	0x0800f298
 800346c:	0800f2ac 	.word	0x0800f2ac

08003470 <Si468x_dab_get_digital_service_data>:

void Si468x_dab_get_digital_service_data()
{
 8003470:	b5b0      	push	{r4, r5, r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8003476:	49aa      	ldr	r1, [pc, #680]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 8003478:	2005      	movs	r0, #5
 800347a:	f7fe f97b 	bl	8001774 <Si468x_read_reply>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	4ba8      	ldr	r3, [pc, #672]	@ (8003724 <Si468x_dab_get_digital_service_data+0x2b4>)
 8003484:	701a      	strb	r2, [r3, #0]

	if(rd_reply.d_srv_int)
 8003486:	4ba8      	ldr	r3, [pc, #672]	@ (8003728 <Si468x_dab_get_digital_service_data+0x2b8>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8140 	beq.w	8003716 <Si468x_dab_get_digital_service_data+0x2a6>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_DATA;
 8003496:	4ba5      	ldr	r3, [pc, #660]	@ (800372c <Si468x_dab_get_digital_service_data+0x2bc>)
 8003498:	2284      	movs	r2, #132	@ 0x84
 800349a:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x01;	//+1 = ACK, +16 = STATUS_ONLY
 800349c:	4ba3      	ldr	r3, [pc, #652]	@ (800372c <Si468x_dab_get_digital_service_data+0x2bc>)
 800349e:	2201      	movs	r2, #1
 80034a0:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80034a2:	49a2      	ldr	r1, [pc, #648]	@ (800372c <Si468x_dab_get_digital_service_data+0x2bc>)
 80034a4:	2002      	movs	r0, #2
 80034a6:	f7fe f943 	bl	8001730 <Si468x_write_command>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b9d      	ldr	r3, [pc, #628]	@ (8003724 <Si468x_dab_get_digital_service_data+0x2b4>)
 80034b0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 80034b2:	2005      	movs	r0, #5
 80034b4:	f004 ff2a 	bl	800830c <HAL_Delay>

		//first read only header to obtain payload data size
		status = Si468x_read_reply(30, dab_spi_rx_buffer);
 80034b8:	4999      	ldr	r1, [pc, #612]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 80034ba:	201e      	movs	r0, #30
 80034bc:	f7fe f95a 	bl	8001774 <Si468x_read_reply>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b97      	ldr	r3, [pc, #604]	@ (8003724 <Si468x_dab_get_digital_service_data+0x2b4>)
 80034c6:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t*)&dab_service_data_reply_header, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_service_data_reply_header_t));
 80034c8:	4a99      	ldr	r2, [pc, #612]	@ (8003730 <Si468x_dab_get_digital_service_data+0x2c0>)
 80034ca:	4b95      	ldr	r3, [pc, #596]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 80034cc:	4615      	mov	r5, r2
 80034ce:	1d1c      	adds	r4, r3, #4
 80034d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	602b      	str	r3, [r5, #0]


//		if(dab_service_data_reply_header.buff_count)
		{
			send_debug_msg("-----------Getting DAB Service Data-------------", CRLF_SEND);
 80034d8:	2101      	movs	r1, #1
 80034da:	4896      	ldr	r0, [pc, #600]	@ (8003734 <Si468x_dab_get_digital_service_data+0x2c4>)
 80034dc:	f001 f822 	bl	8004524 <send_debug_msg>
//			send_debug_msg(itoa(dab_service_data_reply_header.num_segs, itoa_buffer, 10), CRLF_SEND);


			//second read full data when we know data length

			if(!dab_service_data_reply_header.dsrv_ovfl_int)
 80034e0:	4b93      	ldr	r3, [pc, #588]	@ (8003730 <Si468x_dab_get_digital_service_data+0x2c0>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8113 	bne.w	8003716 <Si468x_dab_get_digital_service_data+0x2a6>
			{
				status = Si468x_read_reply(24 + dab_service_data_reply_header.byte_count, dab_spi_rx_buffer);
 80034f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003730 <Si468x_dab_get_digital_service_data+0x2c0>)
 80034f2:	89db      	ldrh	r3, [r3, #14]
 80034f4:	3318      	adds	r3, #24
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4989      	ldr	r1, [pc, #548]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f93a 	bl	8001774 <Si468x_read_reply>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	4b87      	ldr	r3, [pc, #540]	@ (8003724 <Si468x_dab_get_digital_service_data+0x2b4>)
 8003506:	701a      	strb	r2, [r3, #0]

				if(dab_service_data_reply_header.dsc_ty == 60)
 8003508:	4b89      	ldr	r3, [pc, #548]	@ (8003730 <Si468x_dab_get_digital_service_data+0x2c0>)
 800350a:	78db      	ldrb	r3, [r3, #3]
 800350c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b3c      	cmp	r3, #60	@ 0x3c
 8003514:	f040 80a5 	bne.w	8003662 <Si468x_dab_get_digital_service_data+0x1f2>
				{
					send_debug_msg("Slideshow Data: ", CRLF_SEND);
 8003518:	2101      	movs	r1, #1
 800351a:	4887      	ldr	r0, [pc, #540]	@ (8003738 <Si468x_dab_get_digital_service_data+0x2c8>)
 800351c:	f001 f802 	bl	8004524 <send_debug_msg>
					uint32_t body_size;
					uint16_t header_size;
					uint8_t content_type;
					uint16_t content_sub_type;

					body_size = (dab_spi_rx_buffer[24 + 0] << 20) + (dab_spi_rx_buffer[24 + 1] << 12) + (dab_spi_rx_buffer[24 + 2] << 4) + ((dab_spi_rx_buffer[24 + 3] && 0xF0) >> 4);
 8003520:	4b7f      	ldr	r3, [pc, #508]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 8003522:	7e1b      	ldrb	r3, [r3, #24]
 8003524:	051a      	lsls	r2, r3, #20
 8003526:	4b7e      	ldr	r3, [pc, #504]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 8003528:	7e5b      	ldrb	r3, [r3, #25]
 800352a:	031b      	lsls	r3, r3, #12
 800352c:	441a      	add	r2, r3
 800352e:	4b7c      	ldr	r3, [pc, #496]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 8003530:	7e9b      	ldrb	r3, [r3, #26]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4413      	add	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]

					header_size = ((dab_spi_rx_buffer[24 + 3] && 0x0F) << 9) + (dab_spi_rx_buffer[24 + 4] << 1) + ((dab_spi_rx_buffer[24 + 5] && 0x80) >> 7);
 8003538:	4b79      	ldr	r3, [pc, #484]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 800353a:	7edb      	ldrb	r3, [r3, #27]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <Si468x_dab_get_digital_service_data+0xd6>
 8003540:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003544:	e000      	b.n	8003548 <Si468x_dab_get_digital_service_data+0xd8>
 8003546:	2200      	movs	r2, #0
 8003548:	4b75      	ldr	r3, [pc, #468]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 800354a:	7f1b      	ldrb	r3, [r3, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	b29b      	uxth	r3, r3
 8003550:	4413      	add	r3, r2
 8003552:	80fb      	strh	r3, [r7, #6]

					content_type = (dab_spi_rx_buffer[24 + 5] && 0x7E) >> 1;
 8003554:	2300      	movs	r3, #0
 8003556:	717b      	strb	r3, [r7, #5]

					content_sub_type = ((dab_spi_rx_buffer[24 + 5] && 0x01) << 8) + (dab_spi_rx_buffer[24 + 6]);
 8003558:	4b71      	ldr	r3, [pc, #452]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 800355a:	7f5b      	ldrb	r3, [r3, #29]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <Si468x_dab_get_digital_service_data+0xf6>
 8003560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003564:	e000      	b.n	8003568 <Si468x_dab_get_digital_service_data+0xf8>
 8003566:	2300      	movs	r3, #0
 8003568:	4a6d      	ldr	r2, [pc, #436]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 800356a:	7f92      	ldrb	r2, [r2, #30]
 800356c:	4413      	add	r3, r2
 800356e:	807b      	strh	r3, [r7, #2]

					for(uint16_t i = 0; i < 4096; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	82fb      	strh	r3, [r7, #22]
 8003574:	e006      	b.n	8003584 <Si468x_dab_get_digital_service_data+0x114>
					{
						slideshow_data[i] = 0;
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	4a70      	ldr	r2, [pc, #448]	@ (800373c <Si468x_dab_get_digital_service_data+0x2cc>)
 800357a:	2100      	movs	r1, #0
 800357c:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < 4096; i++)
 800357e:	8afb      	ldrh	r3, [r7, #22]
 8003580:	3301      	adds	r3, #1
 8003582:	82fb      	strh	r3, [r7, #22]
 8003584:	8afb      	ldrh	r3, [r7, #22]
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358a:	d3f4      	bcc.n	8003576 <Si468x_dab_get_digital_service_data+0x106>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	82bb      	strh	r3, [r7, #20]
 8003590:	e00a      	b.n	80035a8 <Si468x_dab_get_digital_service_data+0x138>
					{
						slideshow_data[i] = dab_spi_rx_buffer[24 + i];
 8003592:	8abb      	ldrh	r3, [r7, #20]
 8003594:	f103 0218 	add.w	r2, r3, #24
 8003598:	8abb      	ldrh	r3, [r7, #20]
 800359a:	4961      	ldr	r1, [pc, #388]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 800359c:	5c89      	ldrb	r1, [r1, r2]
 800359e:	4a67      	ldr	r2, [pc, #412]	@ (800373c <Si468x_dab_get_digital_service_data+0x2cc>)
 80035a0:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 80035a2:	8abb      	ldrh	r3, [r7, #20]
 80035a4:	3301      	adds	r3, #1
 80035a6:	82bb      	strh	r3, [r7, #20]
 80035a8:	4b61      	ldr	r3, [pc, #388]	@ (8003730 <Si468x_dab_get_digital_service_data+0x2c0>)
 80035aa:	89db      	ldrh	r3, [r3, #14]
 80035ac:	8aba      	ldrh	r2, [r7, #20]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d3ef      	bcc.n	8003592 <Si468x_dab_get_digital_service_data+0x122>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	827b      	strh	r3, [r7, #18]
 80035b6:	e00f      	b.n	80035d8 <Si468x_dab_get_digital_service_data+0x168>
					{
//						send_debug_msg(slideshow_data[i]);
						send_debug_msg(itoa(slideshow_data[i], itoa_buffer, 10), CRLF_SEND);
 80035b8:	8a7b      	ldrh	r3, [r7, #18]
 80035ba:	4a60      	ldr	r2, [pc, #384]	@ (800373c <Si468x_dab_get_digital_service_data+0x2cc>)
 80035bc:	5cd3      	ldrb	r3, [r2, r3]
 80035be:	220a      	movs	r2, #10
 80035c0:	495f      	ldr	r1, [pc, #380]	@ (8003740 <Si468x_dab_get_digital_service_data+0x2d0>)
 80035c2:	4618      	mov	r0, r3
 80035c4:	f00a fe74 	bl	800e2b0 <itoa>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 ffa9 	bl	8004524 <send_debug_msg>
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 80035d2:	8a7b      	ldrh	r3, [r7, #18]
 80035d4:	3301      	adds	r3, #1
 80035d6:	827b      	strh	r3, [r7, #18]
 80035d8:	4b55      	ldr	r3, [pc, #340]	@ (8003730 <Si468x_dab_get_digital_service_data+0x2c0>)
 80035da:	89db      	ldrh	r3, [r3, #14]
 80035dc:	8a7a      	ldrh	r2, [r7, #18]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3ea      	bcc.n	80035b8 <Si468x_dab_get_digital_service_data+0x148>
					}
//					send_debug_msg("", CRLF_SEND);
					send_debug_msg("end", CRLF_SEND);
 80035e2:	2101      	movs	r1, #1
 80035e4:	4857      	ldr	r0, [pc, #348]	@ (8003744 <Si468x_dab_get_digital_service_data+0x2d4>)
 80035e6:	f000 ff9d 	bl	8004524 <send_debug_msg>
					send_debug_msg("Body Size: ", CRLF_NO_SEND);
 80035ea:	2100      	movs	r1, #0
 80035ec:	4856      	ldr	r0, [pc, #344]	@ (8003748 <Si468x_dab_get_digital_service_data+0x2d8>)
 80035ee:	f000 ff99 	bl	8004524 <send_debug_msg>
					send_debug_msg(itoa(body_size, itoa_buffer, 10), CRLF_SEND);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	220a      	movs	r2, #10
 80035f6:	4952      	ldr	r1, [pc, #328]	@ (8003740 <Si468x_dab_get_digital_service_data+0x2d0>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f00a fe59 	bl	800e2b0 <itoa>
 80035fe:	4603      	mov	r3, r0
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f000 ff8e 	bl	8004524 <send_debug_msg>
					send_debug_msg("Header Size: ", CRLF_NO_SEND);
 8003608:	2100      	movs	r1, #0
 800360a:	4850      	ldr	r0, [pc, #320]	@ (800374c <Si468x_dab_get_digital_service_data+0x2dc>)
 800360c:	f000 ff8a 	bl	8004524 <send_debug_msg>
					send_debug_msg(itoa(header_size, itoa_buffer, 10), CRLF_SEND);
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	220a      	movs	r2, #10
 8003614:	494a      	ldr	r1, [pc, #296]	@ (8003740 <Si468x_dab_get_digital_service_data+0x2d0>)
 8003616:	4618      	mov	r0, r3
 8003618:	f00a fe4a 	bl	800e2b0 <itoa>
 800361c:	4603      	mov	r3, r0
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f000 ff7f 	bl	8004524 <send_debug_msg>
					send_debug_msg("Content Type: ", CRLF_NO_SEND);
 8003626:	2100      	movs	r1, #0
 8003628:	4849      	ldr	r0, [pc, #292]	@ (8003750 <Si468x_dab_get_digital_service_data+0x2e0>)
 800362a:	f000 ff7b 	bl	8004524 <send_debug_msg>
					send_debug_msg(itoa(content_type, itoa_buffer, 10), CRLF_SEND);
 800362e:	797b      	ldrb	r3, [r7, #5]
 8003630:	220a      	movs	r2, #10
 8003632:	4943      	ldr	r1, [pc, #268]	@ (8003740 <Si468x_dab_get_digital_service_data+0x2d0>)
 8003634:	4618      	mov	r0, r3
 8003636:	f00a fe3b 	bl	800e2b0 <itoa>
 800363a:	4603      	mov	r3, r0
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f000 ff70 	bl	8004524 <send_debug_msg>
					send_debug_msg("Content SubType: ", CRLF_NO_SEND);
 8003644:	2100      	movs	r1, #0
 8003646:	4843      	ldr	r0, [pc, #268]	@ (8003754 <Si468x_dab_get_digital_service_data+0x2e4>)
 8003648:	f000 ff6c 	bl	8004524 <send_debug_msg>
					send_debug_msg(itoa(content_sub_type, itoa_buffer, 10), CRLF_SEND);
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	220a      	movs	r2, #10
 8003650:	493b      	ldr	r1, [pc, #236]	@ (8003740 <Si468x_dab_get_digital_service_data+0x2d0>)
 8003652:	4618      	mov	r0, r3
 8003654:	f00a fe2c 	bl	800e2b0 <itoa>
 8003658:	4603      	mov	r3, r0
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f000 ff61 	bl	8004524 <send_debug_msg>

				}

				if(dab_service_data_reply_header.data_src == 2)
 8003662:	4b33      	ldr	r3, [pc, #204]	@ (8003730 <Si468x_dab_get_digital_service_data+0x2c0>)
 8003664:	78db      	ldrb	r3, [r3, #3]
 8003666:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b80      	cmp	r3, #128	@ 0x80
 800366e:	d152      	bne.n	8003716 <Si468x_dab_get_digital_service_data+0x2a6>
				{
					send_debug_msg("Dynamic Label Data: ", CRLF_SEND);
 8003670:	2101      	movs	r1, #1
 8003672:	4839      	ldr	r0, [pc, #228]	@ (8003758 <Si468x_dab_get_digital_service_data+0x2e8>)
 8003674:	f000 ff56 	bl	8004524 <send_debug_msg>

					for(uint8_t i = 0; i < 128; i++)
 8003678:	2300      	movs	r3, #0
 800367a:	747b      	strb	r3, [r7, #17]
 800367c:	e006      	b.n	800368c <Si468x_dab_get_digital_service_data+0x21c>
					{
						dls_label[i] = 0;
 800367e:	7c7b      	ldrb	r3, [r7, #17]
 8003680:	4a36      	ldr	r2, [pc, #216]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 8003682:	2100      	movs	r1, #0
 8003684:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 128; i++)
 8003686:	7c7b      	ldrb	r3, [r7, #17]
 8003688:	3301      	adds	r3, #1
 800368a:	747b      	strb	r3, [r7, #17]
 800368c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003690:	2b00      	cmp	r3, #0
 8003692:	daf4      	bge.n	800367e <Si468x_dab_get_digital_service_data+0x20e>
					}

					uint8_t label_pos = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e031      	b.n	8003702 <Si468x_dab_get_digital_service_data+0x292>
					{
						dls_label[label_pos] = dab_spi_rx_buffer[24 + 2 + i];
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	f103 021a 	add.w	r2, r3, #26
 80036a4:	7c3b      	ldrb	r3, [r7, #16]
 80036a6:	491e      	ldr	r1, [pc, #120]	@ (8003720 <Si468x_dab_get_digital_service_data+0x2b0>)
 80036a8:	5c89      	ldrb	r1, [r1, r2]
 80036aa:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 80036ac:	54d1      	strb	r1, [r2, r3]
//						send_debug_msg(itoa(dab_spi_rx_buffer[24 + 2 + i], itoa_buffer, 10), CRLF_SEND);

						//polish symbols convert
						//ó
						if(dls_label[label_pos] == 195)
 80036ae:	7c3b      	ldrb	r3, [r7, #16]
 80036b0:	4a2a      	ldr	r2, [pc, #168]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	2bc3      	cmp	r3, #195	@ 0xc3
 80036b6:	d106      	bne.n	80036c6 <Si468x_dab_get_digital_service_data+0x256>
						{
							dls_label[label_pos] = 111;//lub 243
 80036b8:	7c3b      	ldrb	r3, [r7, #16]
 80036ba:	4a28      	ldr	r2, [pc, #160]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 80036bc:	216f      	movs	r1, #111	@ 0x6f
 80036be:	54d1      	strb	r1, [r2, r3]
							i++;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	3301      	adds	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 234)
						{

						}
						//ć to c
						if(dls_label[label_pos] == 196)
 80036c6:	7c3b      	ldrb	r3, [r7, #16]
 80036c8:	4a24      	ldr	r2, [pc, #144]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	2bc4      	cmp	r3, #196	@ 0xc4
 80036ce:	d106      	bne.n	80036de <Si468x_dab_get_digital_service_data+0x26e>
						{
							dls_label[label_pos] = 99; //lub 230
 80036d0:	7c3b      	ldrb	r3, [r7, #16]
 80036d2:	4a22      	ldr	r2, [pc, #136]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 80036d4:	2163      	movs	r1, #99	@ 0x63
 80036d6:	54d1      	strb	r1, [r2, r3]
							i++;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	3301      	adds	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 182)
						{

						}
						//ł to l
						if(dls_label[label_pos] == 197)
 80036de:	7c3b      	ldrb	r3, [r7, #16]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	2bc5      	cmp	r3, #197	@ 0xc5
 80036e6:	d106      	bne.n	80036f6 <Si468x_dab_get_digital_service_data+0x286>
						{
							dls_label[label_pos] = 108; //lub 179
 80036e8:	7c3b      	ldrb	r3, [r7, #16]
 80036ea:	4a1c      	ldr	r2, [pc, #112]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 80036ec:	216c      	movs	r1, #108	@ 0x6c
 80036ee:	54d1      	strb	r1, [r2, r3]
							i++;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	3301      	adds	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 243)
						{

						}

						label_pos++;
 80036f6:	7c3b      	ldrb	r3, [r7, #16]
 80036f8:	3301      	adds	r3, #1
 80036fa:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	3301      	adds	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	b29a      	uxth	r2, r3
 8003706:	4b0a      	ldr	r3, [pc, #40]	@ (8003730 <Si468x_dab_get_digital_service_data+0x2c0>)
 8003708:	89db      	ldrh	r3, [r3, #14]
 800370a:	429a      	cmp	r2, r3
 800370c:	d3c7      	bcc.n	800369e <Si468x_dab_get_digital_service_data+0x22e>
					}
					send_debug_msg(dls_label, CRLF_SEND);
 800370e:	2101      	movs	r1, #1
 8003710:	4812      	ldr	r0, [pc, #72]	@ (800375c <Si468x_dab_get_digital_service_data+0x2ec>)
 8003712:	f000 ff07 	bl	8004524 <send_debug_msg>
				}
			}
		}
	}
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bdb0      	pop	{r4, r5, r7, pc}
 800371e:	bf00      	nop
 8003720:	200011a8 	.word	0x200011a8
 8003724:	20003520 	.word	0x20003520
 8003728:	2000360c 	.word	0x2000360c
 800372c:	200001a8 	.word	0x200001a8
 8003730:	20003670 	.word	0x20003670
 8003734:	0800f2c0 	.word	0x0800f2c0
 8003738:	0800f2f4 	.word	0x0800f2f4
 800373c:	20004ca8 	.word	0x20004ca8
 8003740:	200034d0 	.word	0x200034d0
 8003744:	0800f308 	.word	0x0800f308
 8003748:	0800f30c 	.word	0x0800f30c
 800374c:	0800f318 	.word	0x0800f318
 8003750:	0800f328 	.word	0x0800f328
 8003754:	0800f338 	.word	0x0800f338
 8003758:	0800f34c 	.word	0x0800f34c
 800375c:	20004c24 	.word	0x20004c24

08003760 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 8003764:	4b1c      	ldr	r3, [pc, #112]	@ (80037d8 <Si468x_dab_get_time+0x78>)
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02f      	beq.n	80037d2 <Si468x_dab_get_time+0x72>
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <Si468x_dab_get_time+0x78>)
 8003774:	785b      	ldrb	r3, [r3, #1]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d028      	beq.n	80037d2 <Si468x_dab_get_time+0x72>
 8003780:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <Si468x_dab_get_time+0x78>)
 8003782:	791b      	ldrb	r3, [r3, #4]
 8003784:	2b5a      	cmp	r3, #90	@ 0x5a
 8003786:	d924      	bls.n	80037d2 <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8003788:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <Si468x_dab_get_time+0x7c>)
 800378a:	22bc      	movs	r2, #188	@ 0xbc
 800378c:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 800378e:	4b13      	ldr	r3, [pc, #76]	@ (80037dc <Si468x_dab_get_time+0x7c>)
 8003790:	2200      	movs	r2, #0
 8003792:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8003794:	4911      	ldr	r1, [pc, #68]	@ (80037dc <Si468x_dab_get_time+0x7c>)
 8003796:	2002      	movs	r0, #2
 8003798:	f7fd ffca 	bl	8001730 <Si468x_write_command>
 800379c:	4603      	mov	r3, r0
 800379e:	461a      	mov	r2, r3
 80037a0:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <Si468x_dab_get_time+0x80>)
 80037a2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80037a4:	2001      	movs	r0, #1
 80037a6:	f004 fdb1 	bl	800830c <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 80037aa:	490e      	ldr	r1, [pc, #56]	@ (80037e4 <Si468x_dab_get_time+0x84>)
 80037ac:	200b      	movs	r0, #11
 80037ae:	f7fd ffe1 	bl	8001774 <Si468x_read_reply>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <Si468x_dab_get_time+0x80>)
 80037b8:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time_t));
 80037ba:	4a0b      	ldr	r2, [pc, #44]	@ (80037e8 <Si468x_dab_get_time+0x88>)
 80037bc:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <Si468x_dab_get_time+0x84>)
 80037be:	3304      	adds	r3, #4
 80037c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037c4:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 80037c8:	4b07      	ldr	r3, [pc, #28]	@ (80037e8 <Si468x_dab_get_time+0x88>)
 80037ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037ce:	f002 fccb 	bl	8006168 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200035e4 	.word	0x200035e4
 80037dc:	200001a8 	.word	0x200001a8
 80037e0:	20003520 	.word	0x20003520
 80037e4:	200011a8 	.word	0x200011a8
 80037e8:	20003658 	.word	0x20003658

080037ec <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80037fe:	f7fe f8c5 	bl	800198c <Si468x_set_property>
	dab_management.audio_volume = _volume;
 8003802:	79fa      	ldrb	r2, [r7, #7]
 8003804:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <Si468x_set_audio_volume+0x58>)
 8003806:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 8003808:	2100      	movs	r1, #0
 800380a:	480f      	ldr	r0, [pc, #60]	@ (8003848 <Si468x_set_audio_volume+0x5c>)
 800380c:	f000 fe8a 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 8003810:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <Si468x_set_audio_volume+0x58>)
 8003812:	7b9b      	ldrb	r3, [r3, #14]
 8003814:	220a      	movs	r2, #10
 8003816:	490d      	ldr	r1, [pc, #52]	@ (800384c <Si468x_set_audio_volume+0x60>)
 8003818:	4618      	mov	r0, r3
 800381a:	f00a fd49 	bl	800e2b0 <itoa>
 800381e:	4603      	mov	r3, r0
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fe7e 	bl	8004524 <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 8003828:	2101      	movs	r1, #1
 800382a:	4809      	ldr	r0, [pc, #36]	@ (8003850 <Si468x_set_audio_volume+0x64>)
 800382c:	f000 fe7a 	bl	8004524 <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	2201      	movs	r2, #1
 8003834:	4619      	mov	r1, r3
 8003836:	200b      	movs	r0, #11
 8003838:	f002 fd6e 	bl	8006318 <eeprom_write>
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20004c14 	.word	0x20004c14
 8003848:	0800f3a0 	.word	0x0800f3a0
 800384c:	200034d0 	.word	0x200034d0
 8003850:	0800f3ac 	.word	0x0800f3ac

08003854 <play_station>:
}



void play_station(uint8_t station_id)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	@ 0x30
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dab_management.actual_station = station_id;
 8003860:	4a4c      	ldr	r2, [pc, #304]	@ (8003994 <play_station+0x140>)
 8003862:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003866:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 8003868:	4b4a      	ldr	r3, [pc, #296]	@ (8003994 <play_station+0x140>)
 800386a:	78da      	ldrb	r2, [r3, #3]
 800386c:	4b49      	ldr	r3, [pc, #292]	@ (8003994 <play_station+0x140>)
 800386e:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8003870:	2201      	movs	r2, #1
 8003872:	4949      	ldr	r1, [pc, #292]	@ (8003998 <play_station+0x144>)
 8003874:	f240 1007 	movw	r0, #263	@ 0x107
 8003878:	f002 fd4e 	bl	8006318 <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 800387c:	2101      	movs	r1, #1
 800387e:	4847      	ldr	r0, [pc, #284]	@ (800399c <play_station+0x148>)
 8003880:	f000 fe50 	bl	8004524 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8003884:	2100      	movs	r1, #0
 8003886:	4846      	ldr	r0, [pc, #280]	@ (80039a0 <play_station+0x14c>)
 8003888:	f000 fe4c 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 800388c:	4b41      	ldr	r3, [pc, #260]	@ (8003994 <play_station+0x140>)
 800388e:	78db      	ldrb	r3, [r3, #3]
 8003890:	3301      	adds	r3, #1
 8003892:	220a      	movs	r2, #10
 8003894:	4943      	ldr	r1, [pc, #268]	@ (80039a4 <play_station+0x150>)
 8003896:	4618      	mov	r0, r3
 8003898:	f00a fd0a 	bl	800e2b0 <itoa>
 800389c:	4603      	mov	r3, r0
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fe3f 	bl	8004524 <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 80038a6:	2100      	movs	r1, #0
 80038a8:	483f      	ldr	r0, [pc, #252]	@ (80039a8 <play_station+0x154>)
 80038aa:	f000 fe3b 	bl	8004524 <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 80038ae:	4b39      	ldr	r3, [pc, #228]	@ (8003994 <play_station+0x140>)
 80038b0:	78db      	ldrb	r3, [r3, #3]
 80038b2:	461a      	mov	r2, r3
 80038b4:	2334      	movs	r3, #52	@ 0x34
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	4a3c      	ldr	r2, [pc, #240]	@ (80039ac <play_station+0x158>)
 80038bc:	4413      	add	r3, r2
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fe2f 	bl	8004524 <send_debug_msg>
	send_debug_msg("Service ID: ", CRLF_NO_SEND);
 80038c6:	2100      	movs	r1, #0
 80038c8:	4839      	ldr	r0, [pc, #228]	@ (80039b0 <play_station+0x15c>)
 80038ca:	f000 fe2b 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(services_list[dab_management.actual_station].service_id, itoa_buffer, 10), CRLF_SEND);
 80038ce:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <play_station+0x140>)
 80038d0:	78db      	ldrb	r3, [r3, #3]
 80038d2:	4619      	mov	r1, r3
 80038d4:	4a35      	ldr	r2, [pc, #212]	@ (80039ac <play_station+0x158>)
 80038d6:	2334      	movs	r3, #52	@ 0x34
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	3320      	adds	r3, #32
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	220a      	movs	r2, #10
 80038e4:	492f      	ldr	r1, [pc, #188]	@ (80039a4 <play_station+0x150>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f00a fce2 	bl	800e2b0 <itoa>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fe17 	bl	8004524 <send_debug_msg>

	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, USE_ANT_CAP); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 80038f6:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <play_station+0x140>)
 80038f8:	78db      	ldrb	r3, [r3, #3]
 80038fa:	4619      	mov	r1, r3
 80038fc:	4a2b      	ldr	r2, [pc, #172]	@ (80039ac <play_station+0x158>)
 80038fe:	2334      	movs	r3, #52	@ 0x34
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	3328      	adds	r3, #40	@ 0x28
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe f927 	bl	8001b60 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <play_station+0x140>)
 8003914:	78db      	ldrb	r3, [r3, #3]
 8003916:	4619      	mov	r1, r3
 8003918:	4a24      	ldr	r2, [pc, #144]	@ (80039ac <play_station+0x158>)
 800391a:	2334      	movs	r3, #52	@ 0x34
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3320      	adds	r3, #32
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <play_station+0x140>)
 8003928:	78db      	ldrb	r3, [r3, #3]
 800392a:	4618      	mov	r0, r3
 800392c:	491f      	ldr	r1, [pc, #124]	@ (80039ac <play_station+0x158>)
 800392e:	2334      	movs	r3, #52	@ 0x34
 8003930:	fb00 f303 	mul.w	r3, r0, r3
 8003934:	440b      	add	r3, r1
 8003936:	332a      	adds	r3, #42	@ 0x2a
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7ff fceb 	bl	8003318 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 8003942:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <play_station+0x140>)
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	4619      	mov	r1, r3
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <play_station+0x158>)
 800394a:	2334      	movs	r3, #52	@ 0x34
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3320      	adds	r3, #32
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <play_station+0x140>)
 8003958:	78db      	ldrb	r3, [r3, #3]
 800395a:	4618      	mov	r0, r3
 800395c:	4913      	ldr	r1, [pc, #76]	@ (80039ac <play_station+0x158>)
 800395e:	2334      	movs	r3, #52	@ 0x34
 8003960:	fb00 f303 	mul.w	r3, r0, r3
 8003964:	440b      	add	r3, r1
 8003966:	332a      	adds	r3, #42	@ 0x2a
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f7fe fcd9 	bl	8002324 <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 8003972:	463b      	mov	r3, r7
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe f9cb 	bl	8001d10 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 800397a:	463b      	mov	r3, r7
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f8d9 	bl	8002b34 <Si468x_dab_get_audio_info>

	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x03);	//enable both service interrupts
 8003982:	2103      	movs	r1, #3
 8003984:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 8003988:	f7fe f800 	bl	800198c <Si468x_set_property>
}
 800398c:	bf00      	nop
 800398e:	3730      	adds	r7, #48	@ 0x30
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20004c14 	.word	0x20004c14
 8003998:	20004c18 	.word	0x20004c18
 800399c:	0800f3c0 	.word	0x0800f3c0
 80039a0:	0800f3e4 	.word	0x0800f3e4
 80039a4:	200034d0 	.word	0x200034d0
 80039a8:	0800f3f8 	.word	0x0800f3f8
 80039ac:	200037c4 	.word	0x200037c4
 80039b0:	0800f400 	.word	0x0800f400

080039b4 <restore_from_eeprom>:

void restore_from_eeprom()
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b094      	sub	sp, #80	@ 0x50
 80039b8:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 80039ba:	2101      	movs	r1, #1
 80039bc:	48a7      	ldr	r0, [pc, #668]	@ (8003c5c <restore_from_eeprom+0x2a8>)
 80039be:	f000 fdb1 	bl	8004524 <send_debug_msg>

	//restore frequency table

	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 80039c2:	2201      	movs	r2, #1
 80039c4:	49a6      	ldr	r1, [pc, #664]	@ (8003c60 <restore_from_eeprom+0x2ac>)
 80039c6:	203f      	movs	r0, #63	@ 0x3f
 80039c8:	f002 fc88 	bl	80062dc <eeprom_read>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80039d2:	e016      	b.n	8003a02 <restore_from_eeprom+0x4e>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 80039d4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80039d8:	3302      	adds	r3, #2
 80039da:	015b      	lsls	r3, r3, #5
 80039dc:	4618      	mov	r0, r3
 80039de:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4a9f      	ldr	r2, [pc, #636]	@ (8003c64 <restore_from_eeprom+0x2b0>)
 80039e8:	4413      	add	r3, r2
 80039ea:	2220      	movs	r2, #32
 80039ec:	4619      	mov	r1, r3
 80039ee:	f002 fc75 	bl	80062dc <eeprom_read>
		HAL_Delay(5);
 80039f2:	2005      	movs	r0, #5
 80039f4:	f004 fc8a 	bl	800830c <HAL_Delay>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 80039f8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80039fc:	3301      	adds	r3, #1
 80039fe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003a02:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d9e4      	bls.n	80039d4 <restore_from_eeprom+0x20>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4896      	ldr	r0, [pc, #600]	@ (8003c68 <restore_from_eeprom+0x2b4>)
 8003a0e:	f000 fd89 	bl	8004524 <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003a12:	4b96      	ldr	r3, [pc, #600]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003a14:	7b5b      	ldrb	r3, [r3, #13]
 8003a16:	220a      	movs	r2, #10
 8003a18:	4995      	ldr	r1, [pc, #596]	@ (8003c70 <restore_from_eeprom+0x2bc>)
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f00a fc48 	bl	800e2b0 <itoa>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fd7d 	bl	8004524 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4891      	ldr	r0, [pc, #580]	@ (8003c74 <restore_from_eeprom+0x2c0>)
 8003a2e:	f000 fd79 	bl	8004524 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a36:	e022      	b.n	8003a7e <restore_from_eeprom+0xca>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8003a38:	220a      	movs	r2, #10
 8003a3a:	498d      	ldr	r1, [pc, #564]	@ (8003c70 <restore_from_eeprom+0x2bc>)
 8003a3c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003a3e:	f00a fc37 	bl	800e2b0 <itoa>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fd6c 	bl	8004524 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	488a      	ldr	r0, [pc, #552]	@ (8003c78 <restore_from_eeprom+0x2c4>)
 8003a50:	f000 fd68 	bl	8004524 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003a54:	4a83      	ldr	r2, [pc, #524]	@ (8003c64 <restore_from_eeprom+0x2b0>)
 8003a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	4984      	ldr	r1, [pc, #528]	@ (8003c70 <restore_from_eeprom+0x2bc>)
 8003a60:	4618      	mov	r0, r3
 8003a62:	f00a fc25 	bl	800e2b0 <itoa>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fd5a 	bl	8004524 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8003a70:	2101      	movs	r1, #1
 8003a72:	4882      	ldr	r0, [pc, #520]	@ (8003c7c <restore_from_eeprom+0x2c8>)
 8003a74:	f000 fd56 	bl	8004524 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8003a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003a80:	7b5b      	ldrb	r3, [r3, #13]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a86:	4293      	cmp	r3, r2
 8003a88:	dbd6      	blt.n	8003a38 <restore_from_eeprom+0x84>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	497c      	ldr	r1, [pc, #496]	@ (8003c80 <restore_from_eeprom+0x2cc>)
 8003a8e:	f240 1005 	movw	r0, #261	@ 0x105
 8003a92:	f002 fc23 	bl	80062dc <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 8003a96:	2201      	movs	r2, #1
 8003a98:	4974      	ldr	r1, [pc, #464]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003a9a:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8003a9e:	f002 fc1d 	bl	80062dc <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 8003aa2:	4b72      	ldr	r3, [pc, #456]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2bff      	cmp	r3, #255	@ 0xff
 8003aa8:	f000 82c2 	beq.w	8004030 <restore_from_eeprom+0x67c>
 8003aac:	4b6f      	ldr	r3, [pc, #444]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2bff      	cmp	r3, #255	@ 0xff
 8003ab2:	f000 82bd 	beq.w	8004030 <restore_from_eeprom+0x67c>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	4972      	ldr	r1, [pc, #456]	@ (8003c84 <restore_from_eeprom+0x2d0>)
 8003aba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003abe:	f002 fc0d 	bl	80062dc <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4970      	ldr	r1, [pc, #448]	@ (8003c88 <restore_from_eeprom+0x2d4>)
 8003ac6:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8003aca:	f002 fc07 	bl	80062dc <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8003ace:	2201      	movs	r2, #1
 8003ad0:	496e      	ldr	r1, [pc, #440]	@ (8003c8c <restore_from_eeprom+0x2d8>)
 8003ad2:	f240 1007 	movw	r0, #263	@ 0x107
 8003ad6:	f002 fc01 	bl	80062dc <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 8003ada:	4b64      	ldr	r3, [pc, #400]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003adc:	791b      	ldrb	r3, [r3, #4]
 8003ade:	2bff      	cmp	r3, #255	@ 0xff
 8003ae0:	d102      	bne.n	8003ae8 <restore_from_eeprom+0x134>
		{
			dab_management.last_station_index = 0;
 8003ae2:	4b62      	ldr	r3, [pc, #392]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 8003ae8:	4b60      	ldr	r3, [pc, #384]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003aea:	791a      	ldrb	r2, [r3, #4]
 8003aec:	4b5f      	ldr	r3, [pc, #380]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003aee:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8003af6:	e012      	b.n	8003b1e <restore_from_eeprom+0x16a>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 8003af8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003afc:	330a      	adds	r3, #10
 8003afe:	015b      	lsls	r3, r3, #5
 8003b00:	4618      	mov	r0, r3
 8003b02:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003b06:	015b      	lsls	r3, r3, #5
 8003b08:	4a61      	ldr	r2, [pc, #388]	@ (8003c90 <restore_from_eeprom+0x2dc>)
 8003b0a:	4413      	add	r3, r2
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f002 fbe4 	bl	80062dc <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003b14:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8003b1e:	4b53      	ldr	r3, [pc, #332]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d3e6      	bcc.n	8003af8 <restore_from_eeprom+0x144>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
			}
		}
		if(PAGE_SIZE == 32)
		{
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003b30:	e026      	b.n	8003b80 <restore_from_eeprom+0x1cc>
			{
				uint8_t temp [64];
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2, &temp[0], 32);
 8003b32:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003b36:	330f      	adds	r3, #15
 8003b38:	019b      	lsls	r3, r3, #6
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	2220      	movs	r2, #32
 8003b40:	4619      	mov	r1, r3
 8003b42:	f002 fbcb 	bl	80062dc <eeprom_read>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 8003b46:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003b4a:	330f      	adds	r3, #15
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	3320      	adds	r3, #32
 8003b50:	4618      	mov	r0, r3
 8003b52:	463b      	mov	r3, r7
 8003b54:	3320      	adds	r3, #32
 8003b56:	2214      	movs	r2, #20
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f002 fbbf 	bl	80062dc <eeprom_read>
				memcpy(&services_list[i], &temp, sizeof(dab_service_t));
 8003b5e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003b62:	2234      	movs	r2, #52	@ 0x34
 8003b64:	fb02 f303 	mul.w	r3, r2, r3
 8003b68:	4a4a      	ldr	r2, [pc, #296]	@ (8003c94 <restore_from_eeprom+0x2e0>)
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	2234      	movs	r2, #52	@ 0x34
 8003b70:	4618      	mov	r0, r3
 8003b72:	f00a fc0d 	bl	800e390 <memcpy>
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 8003b76:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003b80:	4b3a      	ldr	r3, [pc, #232]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d3d2      	bcc.n	8003b32 <restore_from_eeprom+0x17e>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4836      	ldr	r0, [pc, #216]	@ (8003c68 <restore_from_eeprom+0x2b4>)
 8003b90:	f000 fcc8 	bl	8004524 <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003b94:	4b35      	ldr	r3, [pc, #212]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003b96:	7b5b      	ldrb	r3, [r3, #13]
 8003b98:	220a      	movs	r2, #10
 8003b9a:	4935      	ldr	r1, [pc, #212]	@ (8003c70 <restore_from_eeprom+0x2bc>)
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f00a fb87 	bl	800e2b0 <itoa>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fcbc 	bl	8004524 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 8003bac:	2101      	movs	r1, #1
 8003bae:	4831      	ldr	r0, [pc, #196]	@ (8003c74 <restore_from_eeprom+0x2c0>)
 8003bb0:	f000 fcb8 	bl	8004524 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb8:	e022      	b.n	8003c00 <restore_from_eeprom+0x24c>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8003bba:	220a      	movs	r2, #10
 8003bbc:	492c      	ldr	r1, [pc, #176]	@ (8003c70 <restore_from_eeprom+0x2bc>)
 8003bbe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003bc0:	f00a fb76 	bl	800e2b0 <itoa>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fcab 	bl	8004524 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4829      	ldr	r0, [pc, #164]	@ (8003c78 <restore_from_eeprom+0x2c4>)
 8003bd2:	f000 fca7 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003bd6:	4a23      	ldr	r2, [pc, #140]	@ (8003c64 <restore_from_eeprom+0x2b0>)
 8003bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	220a      	movs	r2, #10
 8003be0:	4923      	ldr	r1, [pc, #140]	@ (8003c70 <restore_from_eeprom+0x2bc>)
 8003be2:	4618      	mov	r0, r3
 8003be4:	f00a fb64 	bl	800e2b0 <itoa>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fc99 	bl	8004524 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4821      	ldr	r0, [pc, #132]	@ (8003c7c <restore_from_eeprom+0x2c8>)
 8003bf6:	f000 fc95 	bl	8004524 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 8003bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c00:	4b1a      	ldr	r3, [pc, #104]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003c02:	7b5b      	ldrb	r3, [r3, #13]
 8003c04:	461a      	mov	r2, r3
 8003c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	dbd6      	blt.n	8003bba <restore_from_eeprom+0x206>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4822      	ldr	r0, [pc, #136]	@ (8003c98 <restore_from_eeprom+0x2e4>)
 8003c10:	f000 fc88 	bl	8004524 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8003c14:	4b15      	ldr	r3, [pc, #84]	@ (8003c6c <restore_from_eeprom+0x2b8>)
 8003c16:	785b      	ldrb	r3, [r3, #1]
 8003c18:	220a      	movs	r2, #10
 8003c1a:	4915      	ldr	r1, [pc, #84]	@ (8003c70 <restore_from_eeprom+0x2bc>)
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f00a fb47 	bl	800e2b0 <itoa>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fc7c 	bl	8004524 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	481b      	ldr	r0, [pc, #108]	@ (8003c9c <restore_from_eeprom+0x2e8>)
 8003c30:	f000 fc78 	bl	8004524 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8003c34:	2100      	movs	r1, #0
 8003c36:	481a      	ldr	r0, [pc, #104]	@ (8003ca0 <restore_from_eeprom+0x2ec>)
 8003c38:	f000 fc74 	bl	8004524 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4819      	ldr	r0, [pc, #100]	@ (8003ca4 <restore_from_eeprom+0x2f0>)
 8003c40:	f000 fc70 	bl	8004524 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8003c44:	2100      	movs	r1, #0
 8003c46:	4818      	ldr	r0, [pc, #96]	@ (8003ca8 <restore_from_eeprom+0x2f4>)
 8003c48:	f000 fc6c 	bl	8004524 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4817      	ldr	r0, [pc, #92]	@ (8003cac <restore_from_eeprom+0x2f8>)
 8003c50:	f000 fc68 	bl	8004524 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c5a:	e086      	b.n	8003d6a <restore_from_eeprom+0x3b6>
 8003c5c:	0800f410 	.word	0x0800f410
 8003c60:	20004c21 	.word	0x20004c21
 8003c64:	20003524 	.word	0x20003524
 8003c68:	0800e990 	.word	0x0800e990
 8003c6c:	20004c14 	.word	0x20004c14
 8003c70:	200034d0 	.word	0x200034d0
 8003c74:	0800e998 	.word	0x0800e998
 8003c78:	0800e9b0 	.word	0x0800e9b0
 8003c7c:	0800e9b4 	.word	0x0800e9b4
 8003c80:	20004c15 	.word	0x20004c15
 8003c84:	20004c1c 	.word	0x20004c1c
 8003c88:	20004c20 	.word	0x20004c20
 8003c8c:	20004c18 	.word	0x20004c18
 8003c90:	20003684 	.word	0x20003684
 8003c94:	200037c4 	.word	0x200037c4
 8003c98:	0800ec20 	.word	0x0800ec20
 8003c9c:	0800ec34 	.word	0x0800ec34
 8003ca0:	0800ec68 	.word	0x0800ec68
 8003ca4:	0800ec74 	.word	0x0800ec74
 8003ca8:	0800ec88 	.word	0x0800ec88
 8003cac:	0800ec98 	.word	0x0800ec98
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	48cc      	ldr	r0, [pc, #816]	@ (8003fe4 <restore_from_eeprom+0x630>)
 8003cb4:	f000 fc36 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003cb8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	220a      	movs	r2, #10
 8003cc0:	49c9      	ldr	r1, [pc, #804]	@ (8003fe8 <restore_from_eeprom+0x634>)
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f00a faf4 	bl	800e2b0 <itoa>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fc29 	bl	8004524 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	48c5      	ldr	r0, [pc, #788]	@ (8003fec <restore_from_eeprom+0x638>)
 8003cd6:	f000 fc25 	bl	8004524 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8003cda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003cde:	015b      	lsls	r3, r3, #5
 8003ce0:	4ac3      	ldr	r2, [pc, #780]	@ (8003ff0 <restore_from_eeprom+0x63c>)
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fc1b 	bl	8004524 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	48bc      	ldr	r0, [pc, #752]	@ (8003fe4 <restore_from_eeprom+0x630>)
 8003cf2:	f000 fc17 	bl	8004524 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003cf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003cfa:	4abd      	ldr	r2, [pc, #756]	@ (8003ff0 <restore_from_eeprom+0x63c>)
 8003cfc:	015b      	lsls	r3, r3, #5
 8003cfe:	4413      	add	r3, r2
 8003d00:	3318      	adds	r3, #24
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	220a      	movs	r2, #10
 8003d06:	49b8      	ldr	r1, [pc, #736]	@ (8003fe8 <restore_from_eeprom+0x634>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f00a fad1 	bl	800e2b0 <itoa>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fc06 	bl	8004524 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8003d18:	2100      	movs	r1, #0
 8003d1a:	48b6      	ldr	r0, [pc, #728]	@ (8003ff4 <restore_from_eeprom+0x640>)
 8003d1c:	f000 fc02 	bl	8004524 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8003d20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003d24:	4ab2      	ldr	r2, [pc, #712]	@ (8003ff0 <restore_from_eeprom+0x63c>)
 8003d26:	015b      	lsls	r3, r3, #5
 8003d28:	4413      	add	r3, r2
 8003d2a:	331c      	adds	r3, #28
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4bb1      	ldr	r3, [pc, #708]	@ (8003ff8 <restore_from_eeprom+0x644>)
 8003d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fbf3 	bl	8004524 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8003d3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003d42:	4aab      	ldr	r2, [pc, #684]	@ (8003ff0 <restore_from_eeprom+0x63c>)
 8003d44:	015b      	lsls	r3, r3, #5
 8003d46:	4413      	add	r3, r2
 8003d48:	331c      	adds	r3, #28
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b13      	cmp	r3, #19
 8003d4e:	d803      	bhi.n	8003d58 <restore_from_eeprom+0x3a4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003d50:	2100      	movs	r1, #0
 8003d52:	48aa      	ldr	r0, [pc, #680]	@ (8003ffc <restore_from_eeprom+0x648>)
 8003d54:	f000 fbe6 	bl	8004524 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 8003d58:	2101      	movs	r1, #1
 8003d5a:	48a9      	ldr	r0, [pc, #676]	@ (8004000 <restore_from_eeprom+0x64c>)
 8003d5c:	f000 fbe2 	bl	8004524 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003d60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003d64:	3301      	adds	r3, #1
 8003d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003d6a:	4ba6      	ldr	r3, [pc, #664]	@ (8004004 <restore_from_eeprom+0x650>)
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d39c      	bcc.n	8003cb0 <restore_from_eeprom+0x2fc>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8003d76:	2101      	movs	r1, #1
 8003d78:	48a3      	ldr	r0, [pc, #652]	@ (8004008 <restore_from_eeprom+0x654>)
 8003d7a:	f000 fbd3 	bl	8004524 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	48a2      	ldr	r0, [pc, #648]	@ (800400c <restore_from_eeprom+0x658>)
 8003d82:	f000 fbcf 	bl	8004524 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 8003d86:	4b9f      	ldr	r3, [pc, #636]	@ (8004004 <restore_from_eeprom+0x650>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	220a      	movs	r2, #10
 8003d8c:	4996      	ldr	r1, [pc, #600]	@ (8003fe8 <restore_from_eeprom+0x634>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f00a fa8e 	bl	800e2b0 <itoa>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fbc3 	bl	8004524 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003d9e:	2101      	movs	r1, #1
 8003da0:	489b      	ldr	r0, [pc, #620]	@ (8004010 <restore_from_eeprom+0x65c>)
 8003da2:	f000 fbbf 	bl	8004524 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8003da6:	2101      	movs	r1, #1
 8003da8:	489a      	ldr	r0, [pc, #616]	@ (8004014 <restore_from_eeprom+0x660>)
 8003daa:	f000 fbbb 	bl	8004524 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003db4:	e0f7      	b.n	8003fa6 <restore_from_eeprom+0x5f2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 8003db6:	2100      	movs	r1, #0
 8003db8:	488a      	ldr	r0, [pc, #552]	@ (8003fe4 <restore_from_eeprom+0x630>)
 8003dba:	f000 fbb3 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003dbe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	220a      	movs	r2, #10
 8003dc6:	4988      	ldr	r1, [pc, #544]	@ (8003fe8 <restore_from_eeprom+0x634>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f00a fa71 	bl	800e2b0 <itoa>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fba6 	bl	8004524 <send_debug_msg>
			if((services_index +1) < 10)
 8003dd8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d803      	bhi.n	8003de8 <restore_from_eeprom+0x434>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003de0:	2100      	movs	r1, #0
 8003de2:	4886      	ldr	r0, [pc, #536]	@ (8003ffc <restore_from_eeprom+0x648>)
 8003de4:	f000 fb9e 	bl	8004524 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003de8:	2100      	movs	r1, #0
 8003dea:	488b      	ldr	r0, [pc, #556]	@ (8004018 <restore_from_eeprom+0x664>)
 8003dec:	f000 fb9a 	bl	8004524 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8003df0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003df4:	2234      	movs	r2, #52	@ 0x34
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	4a88      	ldr	r2, [pc, #544]	@ (800401c <restore_from_eeprom+0x668>)
 8003dfc:	4413      	add	r3, r2
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fb8f 	bl	8004524 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 8003e06:	2100      	movs	r1, #0
 8003e08:	4885      	ldr	r0, [pc, #532]	@ (8004020 <restore_from_eeprom+0x66c>)
 8003e0a:	f000 fb8b 	bl	8004524 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003e14:	e021      	b.n	8003e5a <restore_from_eeprom+0x4a6>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8003e16:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003e1a:	4a75      	ldr	r2, [pc, #468]	@ (8003ff0 <restore_from_eeprom+0x63c>)
 8003e1c:	015b      	lsls	r3, r3, #5
 8003e1e:	4413      	add	r3, r2
 8003e20:	331c      	adds	r3, #28
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003e28:	497c      	ldr	r1, [pc, #496]	@ (800401c <restore_from_eeprom+0x668>)
 8003e2a:	2034      	movs	r0, #52	@ 0x34
 8003e2c:	fb00 f303 	mul.w	r3, r0, r3
 8003e30:	440b      	add	r3, r1
 8003e32:	3328      	adds	r3, #40	@ 0x28
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d10a      	bne.n	8003e50 <restore_from_eeprom+0x49c>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8003e3a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003e3e:	015b      	lsls	r3, r3, #5
 8003e40:	4a6b      	ldr	r2, [pc, #428]	@ (8003ff0 <restore_from_eeprom+0x63c>)
 8003e42:	4413      	add	r3, r2
 8003e44:	3302      	adds	r3, #2
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fb6b 	bl	8004524 <send_debug_msg>
					break;
 8003e4e:	e00a      	b.n	8003e66 <restore_from_eeprom+0x4b2>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003e50:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003e54:	3301      	adds	r3, #1
 8003e56:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004004 <restore_from_eeprom+0x650>)
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d3d7      	bcc.n	8003e16 <restore_from_eeprom+0x462>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8003e66:	2100      	movs	r1, #0
 8003e68:	486d      	ldr	r0, [pc, #436]	@ (8004020 <restore_from_eeprom+0x66c>)
 8003e6a:	f000 fb5b 	bl	8004524 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003e6e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003e72:	4a6a      	ldr	r2, [pc, #424]	@ (800401c <restore_from_eeprom+0x668>)
 8003e74:	2134      	movs	r1, #52	@ 0x34
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3324      	adds	r3, #36	@ 0x24
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	220a      	movs	r2, #10
 8003e82:	4959      	ldr	r1, [pc, #356]	@ (8003fe8 <restore_from_eeprom+0x634>)
 8003e84:	4618      	mov	r0, r3
 8003e86:	f00a fa13 	bl	800e2b0 <itoa>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fb48 	bl	8004524 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8003e94:	2100      	movs	r1, #0
 8003e96:	4857      	ldr	r0, [pc, #348]	@ (8003ff4 <restore_from_eeprom+0x640>)
 8003e98:	f000 fb44 	bl	8004524 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8003e9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003ea0:	4a5e      	ldr	r2, [pc, #376]	@ (800401c <restore_from_eeprom+0x668>)
 8003ea2:	2134      	movs	r1, #52	@ 0x34
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3328      	adds	r3, #40	@ 0x28
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b51      	ldr	r3, [pc, #324]	@ (8003ff8 <restore_from_eeprom+0x644>)
 8003eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fb33 	bl	8004524 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8003ebe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003ec2:	4a56      	ldr	r2, [pc, #344]	@ (800401c <restore_from_eeprom+0x668>)
 8003ec4:	2134      	movs	r1, #52	@ 0x34
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3328      	adds	r3, #40	@ 0x28
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b13      	cmp	r3, #19
 8003ed2:	d803      	bhi.n	8003edc <restore_from_eeprom+0x528>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4849      	ldr	r0, [pc, #292]	@ (8003ffc <restore_from_eeprom+0x648>)
 8003ed8:	f000 fb24 	bl	8004524 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003edc:	2100      	movs	r1, #0
 8003ede:	484e      	ldr	r0, [pc, #312]	@ (8004018 <restore_from_eeprom+0x664>)
 8003ee0:	f000 fb20 	bl	8004524 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8003ee4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800401c <restore_from_eeprom+0x668>)
 8003eea:	2134      	movs	r1, #52	@ 0x34
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3315      	adds	r3, #21
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	220a      	movs	r2, #10
 8003ef8:	493b      	ldr	r1, [pc, #236]	@ (8003fe8 <restore_from_eeprom+0x634>)
 8003efa:	4618      	mov	r0, r3
 8003efc:	f00a f9d8 	bl	800e2b0 <itoa>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fb0d 	bl	8004524 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8003f0a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003f0e:	4a43      	ldr	r2, [pc, #268]	@ (800401c <restore_from_eeprom+0x668>)
 8003f10:	2134      	movs	r1, #52	@ 0x34
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3315      	adds	r3, #21
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b09      	cmp	r3, #9
 8003f1e:	d803      	bhi.n	8003f28 <restore_from_eeprom+0x574>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003f20:	2100      	movs	r1, #0
 8003f22:	4836      	ldr	r0, [pc, #216]	@ (8003ffc <restore_from_eeprom+0x648>)
 8003f24:	f000 fafe 	bl	8004524 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8003f28:	2100      	movs	r1, #0
 8003f2a:	483e      	ldr	r0, [pc, #248]	@ (8004024 <restore_from_eeprom+0x670>)
 8003f2c:	f000 fafa 	bl	8004524 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003f30:	2100      	movs	r1, #0
 8003f32:	483d      	ldr	r0, [pc, #244]	@ (8004028 <restore_from_eeprom+0x674>)
 8003f34:	f000 faf6 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003f38:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003f3c:	4a37      	ldr	r2, [pc, #220]	@ (800401c <restore_from_eeprom+0x668>)
 8003f3e:	2134      	movs	r1, #52	@ 0x34
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3320      	adds	r3, #32
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	4926      	ldr	r1, [pc, #152]	@ (8003fe8 <restore_from_eeprom+0x634>)
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f00a f9ae 	bl	800e2b0 <itoa>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fae3 	bl	8004524 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003f5e:	2100      	movs	r1, #0
 8003f60:	482d      	ldr	r0, [pc, #180]	@ (8004018 <restore_from_eeprom+0x664>)
 8003f62:	f000 fadf 	bl	8004524 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003f66:	2100      	movs	r1, #0
 8003f68:	482f      	ldr	r0, [pc, #188]	@ (8004028 <restore_from_eeprom+0x674>)
 8003f6a:	f000 fadb 	bl	8004524 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003f6e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <restore_from_eeprom+0x668>)
 8003f74:	2134      	movs	r1, #52	@ 0x34
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	332a      	adds	r3, #42	@ 0x2a
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2210      	movs	r2, #16
 8003f82:	4919      	ldr	r1, [pc, #100]	@ (8003fe8 <restore_from_eeprom+0x634>)
 8003f84:	4618      	mov	r0, r3
 8003f86:	f00a f993 	bl	800e2b0 <itoa>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fac8 	bl	8004524 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8003f94:	2101      	movs	r1, #1
 8003f96:	4825      	ldr	r0, [pc, #148]	@ (800402c <restore_from_eeprom+0x678>)
 8003f98:	f000 fac4 	bl	8004524 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003f9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003fa6:	4b17      	ldr	r3, [pc, #92]	@ (8004004 <restore_from_eeprom+0x650>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	f4ff af01 	bcc.w	8003db6 <restore_from_eeprom+0x402>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4816      	ldr	r0, [pc, #88]	@ (8004010 <restore_from_eeprom+0x65c>)
 8003fb8:	f000 fab4 	bl	8004524 <send_debug_msg>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, USE_ANT_CAP);
 8003fbc:	4b11      	ldr	r3, [pc, #68]	@ (8004004 <restore_from_eeprom+0x650>)
 8003fbe:	791b      	ldrb	r3, [r3, #4]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4a16      	ldr	r2, [pc, #88]	@ (800401c <restore_from_eeprom+0x668>)
 8003fc4:	2334      	movs	r3, #52	@ 0x34
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3328      	adds	r3, #40	@ 0x28
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fd fdc4 	bl	8001b60 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <restore_from_eeprom+0x650>)
 8003fda:	791b      	ldrb	r3, [r3, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fc39 	bl	8003854 <play_station>
 8003fe2:	e038      	b.n	8004056 <restore_from_eeprom+0x6a2>
 8003fe4:	0800eca8 	.word	0x0800eca8
 8003fe8:	200034d0 	.word	0x200034d0
 8003fec:	0800ecac 	.word	0x0800ecac
 8003ff0:	20003684 	.word	0x20003684
 8003ff4:	0800ecb8 	.word	0x0800ecb8
 8003ff8:	20000008 	.word	0x20000008
 8003ffc:	0800ecc0 	.word	0x0800ecc0
 8004000:	0800ecc4 	.word	0x0800ecc4
 8004004:	20004c14 	.word	0x20004c14
 8004008:	0800ec34 	.word	0x0800ec34
 800400c:	0800eccc 	.word	0x0800eccc
 8004010:	0800ece0 	.word	0x0800ece0
 8004014:	0800ed4c 	.word	0x0800ed4c
 8004018:	0800edb8 	.word	0x0800edb8
 800401c:	200037c4 	.word	0x200037c4
 8004020:	0800edc0 	.word	0x0800edc0
 8004024:	0800edc4 	.word	0x0800edc4
 8004028:	0800edcc 	.word	0x0800edcc
 800402c:	0800edd0 	.word	0x0800edd0

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 8004030:	2101      	movs	r1, #1
 8004032:	4816      	ldr	r0, [pc, #88]	@ (800408c <restore_from_eeprom+0x6d8>)
 8004034:	f000 fa76 	bl	8004524 <send_debug_msg>
		dab_management.actual_freq = 0;
 8004038:	4b15      	ldr	r3, [pc, #84]	@ (8004090 <restore_from_eeprom+0x6dc>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 800403e:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <restore_from_eeprom+0x6dc>)
 8004040:	2200      	movs	r2, #0
 8004042:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 8004044:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <restore_from_eeprom+0x6dc>)
 8004046:	2200      	movs	r2, #0
 8004048:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 800404a:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <restore_from_eeprom+0x6dc>)
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 8004050:	4b0f      	ldr	r3, [pc, #60]	@ (8004090 <restore_from_eeprom+0x6dc>)
 8004052:	2200      	movs	r2, #0
 8004054:	70da      	strb	r2, [r3, #3]
	}
	//restore volume level
	eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8004056:	2201      	movs	r2, #1
 8004058:	490e      	ldr	r1, [pc, #56]	@ (8004094 <restore_from_eeprom+0x6e0>)
 800405a:	200b      	movs	r0, #11
 800405c:	f002 f93e 	bl	80062dc <eeprom_read>
	if(dab_management.audio_volume > 63)
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <restore_from_eeprom+0x6dc>)
 8004062:	7b9b      	ldrb	r3, [r3, #14]
 8004064:	2b3f      	cmp	r3, #63	@ 0x3f
 8004066:	d907      	bls.n	8004078 <restore_from_eeprom+0x6c4>
	{
		dab_management.audio_volume = 63;
 8004068:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <restore_from_eeprom+0x6dc>)
 800406a:	223f      	movs	r2, #63	@ 0x3f
 800406c:	739a      	strb	r2, [r3, #14]
		eeprom_write(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 800406e:	2201      	movs	r2, #1
 8004070:	4908      	ldr	r1, [pc, #32]	@ (8004094 <restore_from_eeprom+0x6e0>)
 8004072:	200b      	movs	r0, #11
 8004074:	f002 f950 	bl	8006318 <eeprom_write>
	}
	Si468x_set_audio_volume(dab_management.audio_volume);
 8004078:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <restore_from_eeprom+0x6dc>)
 800407a:	7b9b      	ldrb	r3, [r3, #14]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fbb5 	bl	80037ec <Si468x_set_audio_volume>
}
 8004082:	bf00      	nop
 8004084:	3750      	adds	r7, #80	@ 0x50
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	0800f44c 	.word	0x0800f44c
 8004090:	20004c14 	.word	0x20004c14
 8004094:	20004c22 	.word	0x20004c22

08004098 <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
	return services_list;
 800409c:	4b02      	ldr	r3, [pc, #8]	@ (80040a8 <get_dab_service_list+0x10>)
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	200037c4 	.word	0x200037c4

080040ac <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
	return ensembles_list;
 80040b0:	4b02      	ldr	r3, [pc, #8]	@ (80040bc <get_dab_ensemble_list+0x10>)
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20003684 	.word	0x20003684

080040c0 <get_dab_management>:

dab_management_t get_dab_management()
{
 80040c0:	b490      	push	{r4, r7}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	return dab_management;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a05      	ldr	r2, [pc, #20]	@ (80040e0 <get_dab_management+0x20>)
 80040cc:	461c      	mov	r4, r3
 80040ce:	4613      	mov	r3, r2
 80040d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc90      	pop	{r4, r7}
 80040de:	4770      	bx	lr
 80040e0:	20004c14 	.word	0x20004c14

080040e4 <get_dls_label>:

char* get_dls_label()
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
	return dls_label;
 80040e8:	4b02      	ldr	r3, [pc, #8]	@ (80040f4 <get_dls_label+0x10>)
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	20004c24 	.word	0x20004c24

080040f8 <Alarming_Init>:

static uint32_t announcement_service_id = 0;


void Alarming_Init()
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	Alarming_Off();
 80040fc:	f000 f8a8 	bl	8004250 <Alarming_Off>
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}

08004104 <Alarming_Manage>:

void Alarming_Manage()
{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
	dls_label_for_alarming = get_dls_label();
 800410a:	f7ff ffeb 	bl	80040e4 <get_dls_label>
 800410e:	4603      	mov	r3, r0
 8004110:	4a2e      	ldr	r2, [pc, #184]	@ (80041cc <Alarming_Manage+0xc8>)
 8004112:	6013      	str	r3, [r2, #0]

	switch(alarming_status)
 8004114:	4b2e      	ldr	r3, [pc, #184]	@ (80041d0 <Alarming_Manage+0xcc>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d84e      	bhi.n	80041ba <Alarming_Manage+0xb6>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <Alarming_Manage+0x20>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	080041bb 	.word	0x080041bb
 8004128:	08004135 	.word	0x08004135
 800412c:	08004163 	.word	0x08004163
 8004130:	080041bb 	.word	0x080041bb
	{
	case alarming_mode_1: //alarming by DLS
		if(!strcmp(dls_label_for_alarming, DLS_ALARM_START_STRING)) //strcmp returns 0 if both strings are the same
 8004134:	4b25      	ldr	r3, [pc, #148]	@ (80041cc <Alarming_Manage+0xc8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4926      	ldr	r1, [pc, #152]	@ (80041d4 <Alarming_Manage+0xd0>)
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc f844 	bl	80001c8 <strcmp>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <Alarming_Manage+0x46>
		{
			Alarming_Mode_1_Start();
 8004146:	f000 f895 	bl	8004274 <Alarming_Mode_1_Start>
		}
		if(!strcmp(dls_label_for_alarming, DLS_ALARM_STOP_STRING)) //strcmp returns 0 if both strings are the same
 800414a:	4b20      	ldr	r3, [pc, #128]	@ (80041cc <Alarming_Manage+0xc8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4922      	ldr	r1, [pc, #136]	@ (80041d8 <Alarming_Manage+0xd4>)
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc f839 	bl	80001c8 <strcmp>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d130      	bne.n	80041be <Alarming_Manage+0xba>
		{
			Alarming_Mode_1_Stop();
 800415c:	f000 f8f6 	bl	800434c <Alarming_Mode_1_Stop>
		}
		break;
 8004160:	e02d      	b.n	80041be <Alarming_Manage+0xba>


	case alarming_mode_2: //alarming by Announcement FIG0/18

		dab_events_for_alarming = Si468x_dab_get_event_status();
 8004162:	4c1e      	ldr	r4, [pc, #120]	@ (80041dc <Alarming_Manage+0xd8>)
 8004164:	f107 0310 	add.w	r3, r7, #16
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe fd9b 	bl	8002ca4 <Si468x_dab_get_event_status>
 800416e:	4622      	mov	r2, r4
 8004170:	f107 0310 	add.w	r3, r7, #16
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	6010      	str	r0, [r2, #0]
 8004178:	889b      	ldrh	r3, [r3, #4]
 800417a:	8093      	strh	r3, [r2, #4]

		if(dab_events_for_alarming.anno_int)
 800417c:	4b17      	ldr	r3, [pc, #92]	@ (80041dc <Alarming_Manage+0xd8>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01b      	beq.n	80041c2 <Alarming_Manage+0xbe>
		{
			dab_announcement_info_for_alarming = Si468x_dab_get_announcement_info();
 800418a:	4c15      	ldr	r4, [pc, #84]	@ (80041e0 <Alarming_Manage+0xdc>)
 800418c:	463b      	mov	r3, r7
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fdc0 	bl	8002d14 <Si468x_dab_get_announcement_info>
 8004194:	4623      	mov	r3, r4
 8004196:	463a      	mov	r2, r7
 8004198:	6810      	ldr	r0, [r2, #0]
 800419a:	6851      	ldr	r1, [r2, #4]
 800419c:	6892      	ldr	r2, [r2, #8]
 800419e:	c307      	stmia	r3!, {r0, r1, r2}
			if(dab_announcement_info_for_alarming.anno_stat) //announcement just started
 80041a0:	4b0f      	ldr	r3, [pc, #60]	@ (80041e0 <Alarming_Manage+0xdc>)
 80041a2:	78db      	ldrb	r3, [r3, #3]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <Alarming_Manage+0xb0>
			{
				Alarming_Mode_2_Start();
 80041ae:	f000 f8eb 	bl	8004388 <Alarming_Mode_2_Start>
				Alarming_Mode_2_Stop();
				//HAL_Delay(10000);
			}
		}

		break;
 80041b2:	e006      	b.n	80041c2 <Alarming_Manage+0xbe>
				Alarming_Mode_2_Stop();
 80041b4:	f000 f986 	bl	80044c4 <Alarming_Mode_2_Stop>
		break;
 80041b8:	e003      	b.n	80041c2 <Alarming_Manage+0xbe>

	case alarming_off:
		break;

	default:
		break;
 80041ba:	bf00      	nop
 80041bc:	e002      	b.n	80041c4 <Alarming_Manage+0xc0>
		break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <Alarming_Manage+0xc0>
		break;
 80041c2:	bf00      	nop
	}

}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd90      	pop	{r4, r7, pc}
 80041cc:	20006e58 	.word	0x20006e58
 80041d0:	20006e2c 	.word	0x20006e2c
 80041d4:	0800f4d0 	.word	0x0800f4d0
 80041d8:	0800f4dc 	.word	0x0800f4dc
 80041dc:	20006e44 	.word	0x20006e44
 80041e0:	20006e4c 	.word	0x20006e4c

080041e4 <Alarming_Mode_1_On>:

void Alarming_Mode_1_On()
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_1;
 80041e8:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <Alarming_Mode_1_On+0x20>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
	LEDs_Red_On();
 80041ee:	f002 fb97 	bl	8006920 <LEDs_Red_On>
	LEDs_Green_Off();
 80041f2:	f002 fbb9 	bl	8006968 <LEDs_Green_Off>
	LEDs_Blue_Off();
 80041f6:	f002 fbcf 	bl	8006998 <LEDs_Blue_Off>
	LEDs_Orange_Off();
 80041fa:	f002 fbe5 	bl	80069c8 <LEDs_Orange_Off>

}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20006e2c 	.word	0x20006e2c

08004208 <Alarming_Mode_2_On>:

void Alarming_Mode_2_On()
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_2;
 800420c:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <Alarming_Mode_2_On+0x20>)
 800420e:	2202      	movs	r2, #2
 8004210:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 8004212:	f002 fb91 	bl	8006938 <LEDs_Red_Off>
	LEDs_Green_Off();
 8004216:	f002 fba7 	bl	8006968 <LEDs_Green_Off>
	LEDs_Blue_On();
 800421a:	f002 fbb1 	bl	8006980 <LEDs_Blue_On>
	LEDs_Orange_Off();
 800421e:	f002 fbd3 	bl	80069c8 <LEDs_Orange_Off>

}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20006e2c 	.word	0x20006e2c

0800422c <Alarming_Mode_3_On>:

void Alarming_Mode_3_On()
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_3;
 8004230:	4b06      	ldr	r3, [pc, #24]	@ (800424c <Alarming_Mode_3_On+0x20>)
 8004232:	2203      	movs	r2, #3
 8004234:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 8004236:	f002 fb7f 	bl	8006938 <LEDs_Red_Off>
	LEDs_Green_Off();
 800423a:	f002 fb95 	bl	8006968 <LEDs_Green_Off>
	LEDs_Blue_Off();
 800423e:	f002 fbab 	bl	8006998 <LEDs_Blue_Off>
	LEDs_Orange_On();
 8004242:	f002 fbb5 	bl	80069b0 <LEDs_Orange_On>

}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20006e2c 	.word	0x20006e2c

08004250 <Alarming_Off>:

void Alarming_Off()
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
	alarming_status = alarming_off;
 8004254:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <Alarming_Off+0x20>)
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 800425a:	f002 fb6d 	bl	8006938 <LEDs_Red_Off>
	LEDs_Green_On();
 800425e:	f002 fb77 	bl	8006950 <LEDs_Green_On>
	LEDs_Blue_Off();
 8004262:	f002 fb99 	bl	8006998 <LEDs_Blue_Off>
	LEDs_Orange_Off();
 8004266:	f002 fbaf 	bl	80069c8 <LEDs_Orange_Off>

}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20006e2c 	.word	0x20006e2c

08004274 <Alarming_Mode_1_Start>:

void Alarming_Mode_1_Start() //alarming mode using DLS - what needs to be done after receiving alarm start info
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
	if(!alarm_mode_1_started)
 800427a:	4b2f      	ldr	r3, [pc, #188]	@ (8004338 <Alarming_Mode_1_Start+0xc4>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d156      	bne.n	8004330 <Alarming_Mode_1_Start+0xbc>
	{
		uint8_t alarming_station_index = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	75fb      	strb	r3, [r7, #23]
		char* tmp_name;
		uint8_t alarming_station_found = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	75bb      	strb	r3, [r7, #22]

		//get DAB stations related data to be able to use that
		dab_management_for_alarming = get_dab_management();
 800428a:	4c2c      	ldr	r4, [pc, #176]	@ (800433c <Alarming_Mode_1_Start+0xc8>)
 800428c:	463b      	mov	r3, r7
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff16 	bl	80040c0 <get_dab_management>
 8004294:	463b      	mov	r3, r7
 8004296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		services_list_for_alarming = get_dab_service_list();
 800429c:	f7ff fefc 	bl	8004098 <get_dab_service_list>
 80042a0:	4603      	mov	r3, r0
 80042a2:	4a27      	ldr	r2, [pc, #156]	@ (8004340 <Alarming_Mode_1_Start+0xcc>)
 80042a4:	6013      	str	r3, [r2, #0]

		//Display_main_screen_debug(services_list_for_alarming[3].name);

		//find alarming station with specific name (Alarming)
		if(dab_management_for_alarming.total_services) //check if stations list is not empty
 80042a6:	4b25      	ldr	r3, [pc, #148]	@ (800433c <Alarming_Mode_1_Start+0xc8>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01e      	beq.n	80042ec <Alarming_Mode_1_Start+0x78>
		{
			for(uint8_t i = 0; i < dab_management_for_alarming.total_services; i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	757b      	strb	r3, [r7, #21]
 80042b2:	e016      	b.n	80042e2 <Alarming_Mode_1_Start+0x6e>
			{
				tmp_name = services_list_for_alarming[i].name;
 80042b4:	4b22      	ldr	r3, [pc, #136]	@ (8004340 <Alarming_Mode_1_Start+0xcc>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	7d7b      	ldrb	r3, [r7, #21]
 80042ba:	2134      	movs	r1, #52	@ 0x34
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]

				if(!strcmp(tmp_name, DLS_ALARM_STATION_NAME)) //strcmp returns 0 if both strings are the same
 80042c4:	491f      	ldr	r1, [pc, #124]	@ (8004344 <Alarming_Mode_1_Start+0xd0>)
 80042c6:	6938      	ldr	r0, [r7, #16]
 80042c8:	f7fb ff7e 	bl	80001c8 <strcmp>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <Alarming_Mode_1_Start+0x68>
				{
					alarming_station_found = 1;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75bb      	strb	r3, [r7, #22]
					alarming_station_index = i;
 80042d6:	7d7b      	ldrb	r3, [r7, #21]
 80042d8:	75fb      	strb	r3, [r7, #23]
					break;
 80042da:	e007      	b.n	80042ec <Alarming_Mode_1_Start+0x78>
			for(uint8_t i = 0; i < dab_management_for_alarming.total_services; i++)
 80042dc:	7d7b      	ldrb	r3, [r7, #21]
 80042de:	3301      	adds	r3, #1
 80042e0:	757b      	strb	r3, [r7, #21]
 80042e2:	4b16      	ldr	r3, [pc, #88]	@ (800433c <Alarming_Mode_1_Start+0xc8>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	7d7a      	ldrb	r2, [r7, #21]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3e3      	bcc.n	80042b4 <Alarming_Mode_1_Start+0x40>
				}
			}
		}

		if(alarming_station_found)
 80042ec:	7dbb      	ldrb	r3, [r7, #22]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d013      	beq.n	800431a <Alarming_Mode_1_Start+0xa6>
		{
			station_index_before_alarm = dab_management_for_alarming.actual_station;
 80042f2:	4b12      	ldr	r3, [pc, #72]	@ (800433c <Alarming_Mode_1_Start+0xc8>)
 80042f4:	78da      	ldrb	r2, [r3, #3]
 80042f6:	4b14      	ldr	r3, [pc, #80]	@ (8004348 <Alarming_Mode_1_Start+0xd4>)
 80042f8:	701a      	strb	r2, [r3, #0]
			set_state_change_flag(state_change_started_not_completed); //inform state machine about planned state change
 80042fa:	2000      	movs	r0, #0
 80042fc:	f003 fa5e 	bl	80077bc <set_state_change_flag>
			play_station(alarming_station_index); //switch to special alarming station
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff faa6 	bl	8003854 <play_station>
			set_playing_state(playing); //set state machine to playing state
 8004308:	2001      	movs	r0, #1
 800430a:	f003 fa47 	bl	800779c <set_playing_state>
			set_system_state(main_screen); //set state machine to main screen
 800430e:	2000      	movs	r0, #0
 8004310:	f003 fa34 	bl	800777c <set_system_state>
			Display_main_screen_alarm();
 8004314:	f000 fbb0 	bl	8004a78 <Display_main_screen_alarm>
 8004318:	e007      	b.n	800432a <Alarming_Mode_1_Start+0xb6>

		}
		else //if specific station not found
		{
			LEDs_Blue_On();
 800431a:	f002 fb31 	bl	8006980 <LEDs_Blue_On>
			LEDs_Green_On();
 800431e:	f002 fb17 	bl	8006950 <LEDs_Green_On>
			LEDs_Orange_On();
 8004322:	f002 fb45 	bl	80069b0 <LEDs_Orange_On>
			LEDs_Red_On();
 8004326:	f002 fafb 	bl	8006920 <LEDs_Red_On>
		}
		alarm_mode_1_started = 1;
 800432a:	4b03      	ldr	r3, [pc, #12]	@ (8004338 <Alarming_Mode_1_Start+0xc4>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
	}
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd90      	pop	{r4, r7, pc}
 8004338:	20006e5d 	.word	0x20006e5d
 800433c:	20006e30 	.word	0x20006e30
 8004340:	20006e40 	.word	0x20006e40
 8004344:	0800f4e8 	.word	0x0800f4e8
 8004348:	20006e5c 	.word	0x20006e5c

0800434c <Alarming_Mode_1_Stop>:

void Alarming_Mode_1_Stop() //alarming mode using DLS - what needs to be done after receiving alarm stop info
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
	if(alarm_mode_1_started)
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <Alarming_Mode_1_Stop+0x34>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <Alarming_Mode_1_Stop+0x2e>
	{
		set_state_change_flag(state_change_started_not_completed); //inform state machine about planned state change
 8004358:	2000      	movs	r0, #0
 800435a:	f003 fa2f 	bl	80077bc <set_state_change_flag>
		play_station(station_index_before_alarm); //switch to special alarming station
 800435e:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <Alarming_Mode_1_Stop+0x38>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fa76 	bl	8003854 <play_station>
		set_playing_state(playing); //set state machine to playing state
 8004368:	2001      	movs	r0, #1
 800436a:	f003 fa17 	bl	800779c <set_playing_state>
		set_system_state(main_screen); //set state machine to main screen
 800436e:	2000      	movs	r0, #0
 8004370:	f003 fa04 	bl	800777c <set_system_state>
		alarm_mode_1_started = 0;
 8004374:	4b02      	ldr	r3, [pc, #8]	@ (8004380 <Alarming_Mode_1_Stop+0x34>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
	}
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20006e5d 	.word	0x20006e5d
 8004384:	20006e5c 	.word	0x20006e5c

08004388 <Alarming_Mode_2_Start>:

void Alarming_Mode_2_Start()
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
	if(!alarm_mode_2_started)
 800438e:	4b41      	ldr	r3, [pc, #260]	@ (8004494 <Alarming_Mode_2_Start+0x10c>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d179      	bne.n	800448a <Alarming_Mode_2_Start+0x102>
	{
		uint8_t alarming_station_index = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	75fb      	strb	r3, [r7, #23]
		char* tmp_name;
		uint8_t alarming_station_found = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	75bb      	strb	r3, [r7, #22]

		//get DAB stations related data to be able to use that
		dab_management_for_alarming = get_dab_management();
 800439e:	4c3e      	ldr	r4, [pc, #248]	@ (8004498 <Alarming_Mode_2_Start+0x110>)
 80043a0:	463b      	mov	r3, r7
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fe8c 	bl	80040c0 <get_dab_management>
 80043a8:	463b      	mov	r3, r7
 80043aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		services_list_for_alarming = get_dab_service_list();
 80043b0:	f7ff fe72 	bl	8004098 <get_dab_service_list>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4a39      	ldr	r2, [pc, #228]	@ (800449c <Alarming_Mode_2_Start+0x114>)
 80043b8:	6013      	str	r3, [r2, #0]

		send_debug_msg("ALARMING BY FIG0/18 ANNOUNCEMENT STARTED - NEW EVENT!", CRLF_SEND);
 80043ba:	2101      	movs	r1, #1
 80043bc:	4838      	ldr	r0, [pc, #224]	@ (80044a0 <Alarming_Mode_2_Start+0x118>)
 80043be:	f000 f8b1 	bl	8004524 <send_debug_msg>
		send_debug_msg("ALARM SOURCE SERVICE ID: ", CRLF_NO_SEND);
 80043c2:	2100      	movs	r1, #0
 80043c4:	4837      	ldr	r0, [pc, #220]	@ (80044a4 <Alarming_Mode_2_Start+0x11c>)
 80043c6:	f000 f8ad 	bl	8004524 <send_debug_msg>
		announcement_service_id = dab_announcement_info_for_alarming.id_1;
 80043ca:	4b37      	ldr	r3, [pc, #220]	@ (80044a8 <Alarming_Mode_2_Start+0x120>)
 80043cc:	88db      	ldrh	r3, [r3, #6]
 80043ce:	461a      	mov	r2, r3
 80043d0:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <Alarming_Mode_2_Start+0x124>)
 80043d2:	601a      	str	r2, [r3, #0]
		send_debug_msg(itoa(announcement_service_id, itoa_buffer, 10), CRLF_SEND);
 80043d4:	4b35      	ldr	r3, [pc, #212]	@ (80044ac <Alarming_Mode_2_Start+0x124>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	220a      	movs	r2, #10
 80043da:	4935      	ldr	r1, [pc, #212]	@ (80044b0 <Alarming_Mode_2_Start+0x128>)
 80043dc:	4618      	mov	r0, r3
 80043de:	f009 ff67 	bl	800e2b0 <itoa>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f89c 	bl	8004524 <send_debug_msg>
		if(announcement_service_id) //if announcement service ID is valid
 80043ec:	4b2f      	ldr	r3, [pc, #188]	@ (80044ac <Alarming_Mode_2_Start+0x124>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01c      	beq.n	800442e <Alarming_Mode_2_Start+0xa6>
		{
			//find alarming station with specific service ID
			for (uint8_t i = 0; i < dab_management_for_alarming.total_services; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	757b      	strb	r3, [r7, #21]
 80043f8:	e013      	b.n	8004422 <Alarming_Mode_2_Start+0x9a>
			{
				if(services_list_for_alarming[i].service_id == announcement_service_id)
 80043fa:	4b28      	ldr	r3, [pc, #160]	@ (800449c <Alarming_Mode_2_Start+0x114>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	7d7b      	ldrb	r3, [r7, #21]
 8004400:	2134      	movs	r1, #52	@ 0x34
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	4b28      	ldr	r3, [pc, #160]	@ (80044ac <Alarming_Mode_2_Start+0x124>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d104      	bne.n	800441c <Alarming_Mode_2_Start+0x94>
				{
					alarming_station_found = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	75bb      	strb	r3, [r7, #22]
					alarming_station_index = i;
 8004416:	7d7b      	ldrb	r3, [r7, #21]
 8004418:	75fb      	strb	r3, [r7, #23]
					break;
 800441a:	e00c      	b.n	8004436 <Alarming_Mode_2_Start+0xae>
			for (uint8_t i = 0; i < dab_management_for_alarming.total_services; i++)
 800441c:	7d7b      	ldrb	r3, [r7, #21]
 800441e:	3301      	adds	r3, #1
 8004420:	757b      	strb	r3, [r7, #21]
 8004422:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <Alarming_Mode_2_Start+0x110>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	7d7a      	ldrb	r2, [r7, #21]
 8004428:	429a      	cmp	r2, r3
 800442a:	d3e6      	bcc.n	80043fa <Alarming_Mode_2_Start+0x72>
 800442c:	e003      	b.n	8004436 <Alarming_Mode_2_Start+0xae>
				}
			}
		}
		else
		{
			send_debug_msg("ERROR - SOURCE SERVICE ID INVALID!", CRLF_SEND);
 800442e:	2101      	movs	r1, #1
 8004430:	4820      	ldr	r0, [pc, #128]	@ (80044b4 <Alarming_Mode_2_Start+0x12c>)
 8004432:	f000 f877 	bl	8004524 <send_debug_msg>
		}


		if(alarming_station_found)
 8004436:	7dbb      	ldrb	r3, [r7, #22]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <Alarming_Mode_2_Start+0xea>
		{
			station_index_before_alarm = dab_management_for_alarming.actual_station;
 800443c:	4b16      	ldr	r3, [pc, #88]	@ (8004498 <Alarming_Mode_2_Start+0x110>)
 800443e:	78da      	ldrb	r2, [r3, #3]
 8004440:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <Alarming_Mode_2_Start+0x130>)
 8004442:	701a      	strb	r2, [r3, #0]
			set_state_change_flag(state_change_started_not_completed); //inform state machine about planned state change
 8004444:	2000      	movs	r0, #0
 8004446:	f003 f9b9 	bl	80077bc <set_state_change_flag>
			play_station(alarming_station_index); //switch to special alarming station
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fa01 	bl	8003854 <play_station>
			set_playing_state(playing); //set state machine to playing state
 8004452:	2001      	movs	r0, #1
 8004454:	f003 f9a2 	bl	800779c <set_playing_state>
			set_system_state(main_screen); //set state machine to main screen
 8004458:	2000      	movs	r0, #0
 800445a:	f003 f98f 	bl	800777c <set_system_state>
			Display_main_screen_alarm();
 800445e:	f000 fb0b 	bl	8004a78 <Display_main_screen_alarm>
			alarm_mode_2_started = 1;
 8004462:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <Alarming_Mode_2_Start+0x10c>)
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
			send_debug_msg("ANNOUNCEMENT ALARM STARTED PROPERLY.", CRLF_SEND);
 8004468:	2101      	movs	r1, #1
 800446a:	4814      	ldr	r0, [pc, #80]	@ (80044bc <Alarming_Mode_2_Start+0x134>)
 800446c:	f000 f85a 	bl	8004524 <send_debug_msg>
			send_debug_msg("ERROR! SOURCE SERVICE ID NOT FOUND IN STATIONS LIST!", CRLF_SEND);
		}

	}

}
 8004470:	e00b      	b.n	800448a <Alarming_Mode_2_Start+0x102>
			LEDs_Blue_On();
 8004472:	f002 fa85 	bl	8006980 <LEDs_Blue_On>
			LEDs_Green_On();
 8004476:	f002 fa6b 	bl	8006950 <LEDs_Green_On>
			LEDs_Orange_On();
 800447a:	f002 fa99 	bl	80069b0 <LEDs_Orange_On>
			LEDs_Red_On();
 800447e:	f002 fa4f 	bl	8006920 <LEDs_Red_On>
			send_debug_msg("ERROR! SOURCE SERVICE ID NOT FOUND IN STATIONS LIST!", CRLF_SEND);
 8004482:	2101      	movs	r1, #1
 8004484:	480e      	ldr	r0, [pc, #56]	@ (80044c0 <Alarming_Mode_2_Start+0x138>)
 8004486:	f000 f84d 	bl	8004524 <send_debug_msg>
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	bf00      	nop
 8004494:	20006e5e 	.word	0x20006e5e
 8004498:	20006e30 	.word	0x20006e30
 800449c:	20006e40 	.word	0x20006e40
 80044a0:	0800f4fc 	.word	0x0800f4fc
 80044a4:	0800f534 	.word	0x0800f534
 80044a8:	20006e4c 	.word	0x20006e4c
 80044ac:	20006e60 	.word	0x20006e60
 80044b0:	20006ddc 	.word	0x20006ddc
 80044b4:	0800f550 	.word	0x0800f550
 80044b8:	20006e5c 	.word	0x20006e5c
 80044bc:	0800f574 	.word	0x0800f574
 80044c0:	0800f59c 	.word	0x0800f59c

080044c4 <Alarming_Mode_2_Stop>:

void Alarming_Mode_2_Stop()
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
	if(alarm_mode_2_started)
 80044c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <Alarming_Mode_2_Stop+0x3c>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d014      	beq.n	80044fa <Alarming_Mode_2_Stop+0x36>
	{
		set_state_change_flag(state_change_started_not_completed); //inform state machine about planned state change
 80044d0:	2000      	movs	r0, #0
 80044d2:	f003 f973 	bl	80077bc <set_state_change_flag>
		play_station(station_index_before_alarm); //switch to special alarming station
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <Alarming_Mode_2_Stop+0x40>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff f9ba 	bl	8003854 <play_station>
		set_playing_state(playing); //set state machine to playing state
 80044e0:	2001      	movs	r0, #1
 80044e2:	f003 f95b 	bl	800779c <set_playing_state>
		set_system_state(main_screen); //set state machine to main screen
 80044e6:	2000      	movs	r0, #0
 80044e8:	f003 f948 	bl	800777c <set_system_state>
		alarm_mode_2_started = 0;
 80044ec:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <Alarming_Mode_2_Stop+0x3c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
		send_debug_msg("ALARMING BY FIG0/18 ANNOUNCEMENT STOPPED!", CRLF_SEND);
 80044f2:	2101      	movs	r1, #1
 80044f4:	4804      	ldr	r0, [pc, #16]	@ (8004508 <Alarming_Mode_2_Stop+0x44>)
 80044f6:	f000 f815 	bl	8004524 <send_debug_msg>
	}
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20006e5e 	.word	0x20006e5e
 8004504:	20006e5c 	.word	0x20006e5c
 8004508:	0800f5d4 	.word	0x0800f5d4

0800450c <Alarming_Get_Status>:
{

}

alarming_status_t Alarming_Get_Status()
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
	return alarming_status;
 8004510:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <Alarming_Get_Status+0x14>)
 8004512:	781b      	ldrb	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20006e2c 	.word	0x20006e2c

08004524 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fb fe53 	bl	80001dc <strlen>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	b29a      	uxth	r2, r3
 800453e:	2364      	movs	r3, #100	@ 0x64
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	480a      	ldr	r0, [pc, #40]	@ (800456c <send_debug_msg+0x48>)
 8004544:	f009 fb27 	bl	800db96 <HAL_UART_Transmit>

	if(is_crlf)
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 800454e:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8004552:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8004554:	f107 010c 	add.w	r1, r7, #12
 8004558:	2364      	movs	r3, #100	@ 0x64
 800455a:	2202      	movs	r2, #2
 800455c:	4803      	ldr	r0, [pc, #12]	@ (800456c <send_debug_msg+0x48>)
 800455e:	f009 fb1a 	bl	800db96 <HAL_UART_Transmit>
	}
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20007268 	.word	0x20007268

08004570 <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[129];

void Display_clear_screen()
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8004576:	2000      	movs	r0, #0
 8004578:	f7fc f9b8 	bl	80008ec <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 800457c:	2311      	movs	r3, #17
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8004584:	2211      	movs	r2, #17
 8004586:	2100      	movs	r1, #0
 8004588:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800458c:	f7fc fa39 	bl	8000a02 <ILI9341_Draw_Line>
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <Display_booting_screen>:

void Display_booting_screen()
{
 8004596:	b580      	push	{r7, lr}
 8004598:	af00      	add	r7, sp, #0
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
	*/
	ILI9341_Draw_Start_Screen();
 800459a:	f7fc fd7d 	bl	8001098 <ILI9341_Draw_Start_Screen>
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <Display_main_screen_background>:

void Display_main_screen_background()
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 80045aa:	f7ff ffe1 	bl	8004570 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2);
 80045ae:	2302      	movs	r3, #2
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	4b40      	ldr	r3, [pc, #256]	@ (80046b4 <Display_main_screen_background+0x110>)
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045bc:	2101      	movs	r1, #1
 80045be:	2005      	movs	r0, #5
 80045c0:	f7fc faa0 	bl	8000b04 <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 80045c4:	2328      	movs	r3, #40	@ 0x28
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	238c      	movs	r3, #140	@ 0x8c
 80045ca:	2214      	movs	r2, #20
 80045cc:	2105      	movs	r1, #5
 80045ce:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045d2:	f7fc f9f5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 80045d6:	2341      	movs	r3, #65	@ 0x41
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	238c      	movs	r3, #140	@ 0x8c
 80045dc:	222d      	movs	r2, #45	@ 0x2d
 80045de:	2105      	movs	r1, #5
 80045e0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045e4:	f7fc f9ec 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 80045e8:	235a      	movs	r3, #90	@ 0x5a
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	238c      	movs	r3, #140	@ 0x8c
 80045ee:	2246      	movs	r2, #70	@ 0x46
 80045f0:	2105      	movs	r1, #5
 80045f2:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045f6:	f7fc f9e3 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 80045fa:	2373      	movs	r3, #115	@ 0x73
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	238c      	movs	r3, #140	@ 0x8c
 8004600:	225f      	movs	r2, #95	@ 0x5f
 8004602:	2105      	movs	r1, #5
 8004604:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004608:	f7fc f9da 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 800460c:	238c      	movs	r3, #140	@ 0x8c
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	238c      	movs	r3, #140	@ 0x8c
 8004612:	2278      	movs	r2, #120	@ 0x78
 8004614:	2105      	movs	r1, #5
 8004616:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800461a:	f7fc f9d1 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 800461e:	23a5      	movs	r3, #165	@ 0xa5
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	238c      	movs	r3, #140	@ 0x8c
 8004624:	2291      	movs	r2, #145	@ 0x91
 8004626:	2105      	movs	r1, #5
 8004628:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800462c:	f7fc f9c8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8004630:	23be      	movs	r3, #190	@ 0xbe
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	238c      	movs	r3, #140	@ 0x8c
 8004636:	22aa      	movs	r2, #170	@ 0xaa
 8004638:	2105      	movs	r1, #5
 800463a:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800463e:	f7fc f9bf 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8004642:	23be      	movs	r3, #190	@ 0xbe
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	f240 133b 	movw	r3, #315	@ 0x13b
 800464a:	2214      	movs	r2, #20
 800464c:	2191      	movs	r1, #145	@ 0x91
 800464e:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004652:	f7fc f9b5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004656:	23eb      	movs	r3, #235	@ 0xeb
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	239d      	movs	r3, #157	@ 0x9d
 800465c:	22c3      	movs	r2, #195	@ 0xc3
 800465e:	2105      	movs	r1, #5
 8004660:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004664:	f7fc f9ac 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004668:	23eb      	movs	r3, #235	@ 0xeb
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	f240 133b 	movw	r3, #315	@ 0x13b
 8004670:	22c3      	movs	r2, #195	@ 0xc3
 8004672:	21a3      	movs	r1, #163	@ 0xa3
 8004674:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004678:	f7fc f9a2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(53, 207, WHITE, ORANGE, "ALARMING", 2);
 800467c:	2302      	movs	r3, #2
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <Display_main_screen_background+0x114>)
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800468c:	21cf      	movs	r1, #207	@ 0xcf
 800468e:	2035      	movs	r0, #53	@ 0x35
 8004690:	f7fc fa38 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004694:	2302      	movs	r3, #2
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <Display_main_screen_background+0x118>)
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80046a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046a4:	21cf      	movs	r1, #207	@ 0xcf
 80046a6:	20c0      	movs	r0, #192	@ 0xc0
 80046a8:	f7fc fa2c 	bl	8000b04 <ILI9341_Draw_String>
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	0800f6b0 	.word	0x0800f6b0
 80046b8:	0800f6c0 	.word	0x0800f6c0
 80046bc:	0800f6cc 	.word	0x0800f6cc

080046c0 <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 80046c0:	b082      	sub	sp, #8
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af02      	add	r7, sp, #8
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
 80046cc:	f107 0118 	add.w	r1, r7, #24
 80046d0:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 80046d4:	7efb      	ldrb	r3, [r7, #27]
 80046d6:	461a      	mov	r2, r3
 80046d8:	2334      	movs	r3, #52	@ 0x34
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	461a      	mov	r2, r3
 80046e4:	2302      	movs	r3, #2
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	9200      	str	r2, [sp, #0]
 80046ea:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80046ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046f2:	2117      	movs	r1, #23
 80046f4:	2008      	movs	r0, #8
 80046f6:	f7fc fa05 	bl	8000b04 <ILI9341_Draw_String>
//
//	//BAr3
//	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);

	//Bar 4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 80046fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80046fc:	2b63      	cmp	r3, #99	@ 0x63
 80046fe:	d81e      	bhi.n	800473e <Display_main_screen_data+0x7e>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8004700:	2302      	movs	r3, #2
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	4b82      	ldr	r3, [pc, #520]	@ (8004910 <Display_main_screen_data+0x250>)
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800470c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004710:	217b      	movs	r1, #123	@ 0x7b
 8004712:	2008      	movs	r0, #8
 8004714:	f7fc f9f6 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8004718:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800471a:	220a      	movs	r2, #10
 800471c:	497d      	ldr	r1, [pc, #500]	@ (8004914 <Display_main_screen_data+0x254>)
 800471e:	4618      	mov	r0, r3
 8004720:	f009 fdc6 	bl	800e2b0 <itoa>
 8004724:	4603      	mov	r3, r0
 8004726:	2202      	movs	r2, #2
 8004728:	9201      	str	r2, [sp, #4]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004734:	217b      	movs	r1, #123	@ 0x7b
 8004736:	2011      	movs	r0, #17
 8004738:	f7fc f9e4 	bl	8000b04 <ILI9341_Draw_String>
 800473c:	e011      	b.n	8004762 <Display_main_screen_data+0xa2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 800473e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004740:	220a      	movs	r2, #10
 8004742:	4974      	ldr	r1, [pc, #464]	@ (8004914 <Display_main_screen_data+0x254>)
 8004744:	4618      	mov	r0, r3
 8004746:	f009 fdb3 	bl	800e2b0 <itoa>
 800474a:	4603      	mov	r3, r0
 800474c:	2202      	movs	r2, #2
 800474e:	9201      	str	r2, [sp, #4]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004756:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800475a:	217b      	movs	r1, #123	@ 0x7b
 800475c:	2008      	movs	r0, #8
 800475e:	f7fc f9d1 	bl	8000b04 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8004762:	2302      	movs	r3, #2
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	4b6c      	ldr	r3, [pc, #432]	@ (8004918 <Display_main_screen_data+0x258>)
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800476e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004772:	217b      	movs	r1, #123	@ 0x7b
 8004774:	2024      	movs	r0, #36	@ 0x24
 8004776:	f7fc f9c5 	bl	8000b04 <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 800477a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800477c:	220a      	movs	r2, #10
 800477e:	4965      	ldr	r1, [pc, #404]	@ (8004914 <Display_main_screen_data+0x254>)
 8004780:	4618      	mov	r0, r3
 8004782:	f009 fd95 	bl	800e2b0 <itoa>
 8004786:	4603      	mov	r3, r0
 8004788:	2202      	movs	r2, #2
 800478a:	9201      	str	r2, [sp, #4]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004796:	217b      	movs	r1, #123	@ 0x7b
 8004798:	204e      	movs	r0, #78	@ 0x4e
 800479a:	f7fc f9b3 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 800479e:	2302      	movs	r3, #2
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	4b5e      	ldr	r3, [pc, #376]	@ (800491c <Display_main_screen_data+0x25c>)
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047ae:	217b      	movs	r1, #123	@ 0x7b
 80047b0:	207a      	movs	r0, #122	@ 0x7a
 80047b2:	f7fc f9a7 	bl	8000b04 <ILI9341_Draw_String>

	//Bar 5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	e022      	b.n	8004802 <Display_main_screen_data+0x142>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	015b      	lsls	r3, r3, #5
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	4413      	add	r3, r2
 80047c4:	7f1a      	ldrb	r2, [r3, #28]
 80047c6:	7efb      	ldrb	r3, [r7, #27]
 80047c8:	4619      	mov	r1, r3
 80047ca:	2334      	movs	r3, #52	@ 0x34
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	440b      	add	r3, r1
 80047d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047d8:	429a      	cmp	r2, r3
 80047da:	d10f      	bne.n	80047fc <Display_main_screen_data+0x13c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	015b      	lsls	r3, r3, #5
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	3302      	adds	r3, #2
 80047e6:	2202      	movs	r2, #2
 80047e8:	9201      	str	r2, [sp, #4]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047f4:	2194      	movs	r1, #148	@ 0x94
 80047f6:	2008      	movs	r0, #8
 80047f8:	f7fc f984 	bl	8000b04 <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	3301      	adds	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
 8004802:	7e7b      	ldrb	r3, [r7, #25]
 8004804:	7bfa      	ldrb	r2, [r7, #15]
 8004806:	429a      	cmp	r2, r3
 8004808:	d3d8      	bcc.n	80047bc <Display_main_screen_data+0xfc>
		}
	}

	//Bar 6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 800480a:	7efb      	ldrb	r3, [r7, #27]
 800480c:	461a      	mov	r2, r3
 800480e:	2334      	movs	r3, #52	@ 0x34
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	4a41      	ldr	r2, [pc, #260]	@ (8004920 <Display_main_screen_data+0x260>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	220a      	movs	r2, #10
 8004824:	493b      	ldr	r1, [pc, #236]	@ (8004914 <Display_main_screen_data+0x254>)
 8004826:	4618      	mov	r0, r3
 8004828:	f009 fd42 	bl	800e2b0 <itoa>
 800482c:	4603      	mov	r3, r0
 800482e:	2202      	movs	r2, #2
 8004830:	9201      	str	r2, [sp, #4]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004838:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800483c:	21ad      	movs	r1, #173	@ 0xad
 800483e:	2008      	movs	r0, #8
 8004840:	f7fc f960 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8004844:	2302      	movs	r3, #2
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	4b36      	ldr	r3, [pc, #216]	@ (8004924 <Display_main_screen_data+0x264>)
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004850:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004854:	21ad      	movs	r1, #173	@ 0xad
 8004856:	201f      	movs	r0, #31
 8004858:	f7fc f954 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 800485c:	7efb      	ldrb	r3, [r7, #27]
 800485e:	461a      	mov	r2, r3
 8004860:	2334      	movs	r3, #52	@ 0x34
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800486c:	4b2c      	ldr	r3, [pc, #176]	@ (8004920 <Display_main_screen_data+0x260>)
 800486e:	fba3 1302 	umull	r1, r3, r3, r2
 8004872:	099b      	lsrs	r3, r3, #6
 8004874:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	220a      	movs	r2, #10
 8004880:	4924      	ldr	r1, [pc, #144]	@ (8004914 <Display_main_screen_data+0x254>)
 8004882:	4618      	mov	r0, r3
 8004884:	f009 fd14 	bl	800e2b0 <itoa>
 8004888:	4603      	mov	r3, r0
 800488a:	2202      	movs	r2, #2
 800488c:	9201      	str	r2, [sp, #4]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004894:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004898:	21ad      	movs	r1, #173	@ 0xad
 800489a:	2026      	movs	r0, #38	@ 0x26
 800489c:	f7fc f932 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 80048a0:	2302      	movs	r3, #2
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <Display_main_screen_data+0x268>)
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80048ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048b0:	21ad      	movs	r1, #173	@ 0xad
 80048b2:	2041      	movs	r0, #65	@ 0x41
 80048b4:	f7fc f926 	bl	8000b04 <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 80048b8:	2302      	movs	r3, #2
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <Display_main_screen_data+0x26c>)
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80048c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048c8:	21ad      	movs	r1, #173	@ 0xad
 80048ca:	205f      	movs	r0, #95	@ 0x5f
 80048cc:	f7fc f91a 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 80048d0:	7efb      	ldrb	r3, [r7, #27]
 80048d2:	461a      	mov	r2, r3
 80048d4:	2334      	movs	r3, #52	@ 0x34
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <Display_main_screen_data+0x270>)
 80048e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ea:	2202      	movs	r2, #2
 80048ec:	9201      	str	r2, [sp, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80048f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048f8:	21ad      	movs	r1, #173	@ 0xad
 80048fa:	2073      	movs	r0, #115	@ 0x73
 80048fc:	f7fc f902 	bl	8000b04 <ILI9341_Draw_String>

	//Station picture

}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800490a:	b002      	add	sp, #8
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	0800f6dc 	.word	0x0800f6dc
 8004914:	20006e64 	.word	0x20006e64
 8004918:	0800f6e0 	.word	0x0800f6e0
 800491c:	0800f6e8 	.word	0x0800f6e8
 8004920:	10624dd3 	.word	0x10624dd3
 8004924:	0800f6ec 	.word	0x0800f6ec
 8004928:	0800f6f0 	.word	0x0800f6f0
 800492c:	0800f6f4 	.word	0x0800f6f4
 8004930:	200000ac 	.word	0x200000ac

08004934 <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af02      	add	r7, sp, #8
 800493a:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 800493c:	4919      	ldr	r1, [pc, #100]	@ (80049a4 <Display_main_screen_dls+0x70>)
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fb fc42 	bl	80001c8 <strcmp>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d027      	beq.n	800499a <Display_main_screen_dls+0x66>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 800494a:	2302      	movs	r3, #2
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	4b16      	ldr	r3, [pc, #88]	@ (80049a8 <Display_main_screen_dls+0x74>)
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800495a:	2130      	movs	r1, #48	@ 0x30
 800495c:	2008      	movs	r0, #8
 800495e:	f7fc f8d1 	bl	8000b04 <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8004962:	2302      	movs	r3, #2
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800496e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004972:	2130      	movs	r1, #48	@ 0x30
 8004974:	2008      	movs	r0, #8
 8004976:	f7fc f8c5 	bl	8000b04 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 129; i++)
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	e009      	b.n	8004994 <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	441a      	add	r2, r3
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	7811      	ldrb	r1, [r2, #0]
 800498a:	4a06      	ldr	r2, [pc, #24]	@ (80049a4 <Display_main_screen_dls+0x70>)
 800498c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 129; i++)
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	3301      	adds	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b80      	cmp	r3, #128	@ 0x80
 8004998:	d9f2      	bls.n	8004980 <Display_main_screen_dls+0x4c>
		}
	}
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20006ea4 	.word	0x20006ea4
 80049a8:	0800f6f8 	.word	0x0800f6f8

080049ac <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 80049b2:	2302      	movs	r3, #2
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a60 <Display_main_screen_empty+0xb4>)
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80049be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049c2:	2117      	movs	r1, #23
 80049c4:	2008      	movs	r0, #8
 80049c6:	f7fc f89d 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 80049ca:	2302      	movs	r3, #2
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <Display_main_screen_empty+0xb8>)
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80049d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049da:	2130      	movs	r1, #48	@ 0x30
 80049dc:	2008      	movs	r0, #8
 80049de:	f7fc f891 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 80049e2:	2302      	movs	r3, #2
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	4b20      	ldr	r3, [pc, #128]	@ (8004a68 <Display_main_screen_empty+0xbc>)
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80049ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049f2:	2149      	movs	r1, #73	@ 0x49
 80049f4:	2008      	movs	r0, #8
 80049f6:	f7fc f885 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 80049fa:	2302      	movs	r3, #2
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <Display_main_screen_empty+0xc0>)
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a0a:	2162      	movs	r1, #98	@ 0x62
 8004a0c:	2008      	movs	r0, #8
 8004a0e:	f7fc f879 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 8004a12:	2302      	movs	r3, #2
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	4b16      	ldr	r3, [pc, #88]	@ (8004a70 <Display_main_screen_empty+0xc4>)
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a22:	217b      	movs	r1, #123	@ 0x7b
 8004a24:	2008      	movs	r0, #8
 8004a26:	f7fc f86d 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	4b11      	ldr	r3, [pc, #68]	@ (8004a74 <Display_main_screen_empty+0xc8>)
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a3a:	2194      	movs	r1, #148	@ 0x94
 8004a3c:	2008      	movs	r0, #8
 8004a3e:	f7fc f861 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 8004a42:	2302      	movs	r3, #2
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <Display_main_screen_empty+0xc8>)
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a52:	21ad      	movs	r1, #173	@ 0xad
 8004a54:	2008      	movs	r0, #8
 8004a56:	f7fc f855 	bl	8000b04 <ILI9341_Draw_String>
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	0800f778 	.word	0x0800f778
 8004a64:	0800f78c 	.word	0x0800f78c
 8004a68:	0800f7a0 	.word	0x0800f7a0
 8004a6c:	0800f7b4 	.word	0x0800f7b4
 8004a70:	0800f7c8 	.word	0x0800f7c8
 8004a74:	0800f7dc 	.word	0x0800f7dc

08004a78 <Display_main_screen_alarm>:

void Display_main_screen_alarm()
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(150, 48, WHITE, ORANGE, "ALARM!!!", 2);
 8004a7e:	2302      	movs	r3, #2
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <Display_main_screen_alarm+0x24>)
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a8e:	2130      	movs	r1, #48	@ 0x30
 8004a90:	2096      	movs	r0, #150	@ 0x96
 8004a92:	f7fc f837 	bl	8000b04 <ILI9341_Draw_String>
}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	0800f7f0 	.word	0x0800f7f0

08004aa0 <Display_stations_list_background>:
{
	ILI9341_Draw_String(150, 70, WHITE, ORANGE, debug_msg, 2);
}

void Display_stations_list_background()
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af02      	add	r7, sp, #8
	//clear screen
	Display_clear_screen();
 8004aa6:	f7ff fd63 	bl	8004570 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2);
 8004aaa:	2302      	movs	r3, #2
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	4b59      	ldr	r3, [pc, #356]	@ (8004c14 <Display_stations_list_background+0x174>)
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ab8:	2101      	movs	r1, #1
 8004aba:	2005      	movs	r0, #5
 8004abc:	f7fc f822 	bl	8000b04 <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 8004ac0:	2332      	movs	r3, #50	@ 0x32
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	f240 131d 	movw	r3, #285	@ 0x11d
 8004ac8:	2214      	movs	r2, #20
 8004aca:	2105      	movs	r1, #5
 8004acc:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004ad0:	f7fb ff76 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8004ad4:	2355      	movs	r3, #85	@ 0x55
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	f240 131d 	movw	r3, #285	@ 0x11d
 8004adc:	2237      	movs	r2, #55	@ 0x37
 8004ade:	2105      	movs	r1, #5
 8004ae0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004ae4:	f7fb ff6c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8004ae8:	2378      	movs	r3, #120	@ 0x78
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	f240 131d 	movw	r3, #285	@ 0x11d
 8004af0:	225a      	movs	r2, #90	@ 0x5a
 8004af2:	2105      	movs	r1, #5
 8004af4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004af8:	f7fb ff62 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8004afc:	239b      	movs	r3, #155	@ 0x9b
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	f240 131d 	movw	r3, #285	@ 0x11d
 8004b04:	227d      	movs	r2, #125	@ 0x7d
 8004b06:	2105      	movs	r1, #5
 8004b08:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004b0c:	f7fb ff58 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 8004b10:	23be      	movs	r3, #190	@ 0xbe
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	f240 131d 	movw	r3, #285	@ 0x11d
 8004b18:	22a0      	movs	r2, #160	@ 0xa0
 8004b1a:	2105      	movs	r1, #5
 8004b1c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004b20:	f7fb ff4e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8004b24:	2366      	movs	r3, #102	@ 0x66
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	f240 133b 	movw	r3, #315	@ 0x13b
 8004b2c:	2214      	movs	r2, #20
 8004b2e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004b32:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004b36:	f7fb ff43 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	4b36      	ldr	r3, [pc, #216]	@ (8004c18 <Display_stations_list_background+0x178>)
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004b46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b4a:	2138      	movs	r1, #56	@ 0x38
 8004b4c:	f240 1027 	movw	r0, #295	@ 0x127
 8004b50:	f7fb ffd8 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 8004b54:	2302      	movs	r3, #2
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	4b30      	ldr	r3, [pc, #192]	@ (8004c1c <Display_stations_list_background+0x17c>)
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b64:	2138      	movs	r1, #56	@ 0x38
 8004b66:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 8004b6a:	f7fb ffcb 	bl	8000b04 <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 8004b6e:	23be      	movs	r3, #190	@ 0xbe
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	f240 133b 	movw	r3, #315	@ 0x13b
 8004b76:	226c      	movs	r2, #108	@ 0x6c
 8004b78:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004b7c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004b80:	f7fb ff1e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 8004b84:	2302      	movs	r3, #2
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	4b24      	ldr	r3, [pc, #144]	@ (8004c1c <Display_stations_list_background+0x17c>)
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b94:	2192      	movs	r1, #146	@ 0x92
 8004b96:	f240 1027 	movw	r0, #295	@ 0x127
 8004b9a:	f7fb ffb3 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c18 <Display_stations_list_background+0x178>)
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bae:	2192      	movs	r1, #146	@ 0x92
 8004bb0:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 8004bb4:	f7fb ffa6 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004bb8:	23eb      	movs	r3, #235	@ 0xeb
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	239d      	movs	r3, #157	@ 0x9d
 8004bbe:	22c3      	movs	r2, #195	@ 0xc3
 8004bc0:	2105      	movs	r1, #5
 8004bc2:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004bc6:	f7fb fefb 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004bca:	23eb      	movs	r3, #235	@ 0xeb
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	f240 133b 	movw	r3, #315	@ 0x13b
 8004bd2:	22c3      	movs	r2, #195	@ 0xc3
 8004bd4:	21a3      	movs	r1, #163	@ 0xa3
 8004bd6:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004bda:	f7fb fef1 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8004bde:	2302      	movs	r3, #2
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c20 <Display_stations_list_background+0x180>)
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bee:	21cf      	movs	r1, #207	@ 0xcf
 8004bf0:	2025      	movs	r0, #37	@ 0x25
 8004bf2:	f7fb ff87 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <Display_stations_list_background+0x184>)
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004c02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c06:	21cf      	movs	r1, #207	@ 0xcf
 8004c08:	20c3      	movs	r0, #195	@ 0xc3
 8004c0a:	f7fb ff7b 	bl	8000b04 <ILI9341_Draw_String>

}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	0800f7fc 	.word	0x0800f7fc
 8004c18:	0800f810 	.word	0x0800f810
 8004c1c:	0800f814 	.word	0x0800f814
 8004c20:	0800f818 	.word	0x0800f818
 8004c24:	0800f824 	.word	0x0800f824

08004c28 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 8004c28:	b084      	sub	sp, #16
 8004c2a:	b590      	push	{r4, r7, lr}
 8004c2c:	b087      	sub	sp, #28
 8004c2e:	af02      	add	r7, sp, #8
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//check if stations list is not empty
	if(_dab_management.total_services)
 8004c3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8133 	beq.w	8004eaa <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	73fb      	strb	r3, [r7, #15]
 8004c48:	e12a      	b.n	8004ea0 <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 8004c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c4e:	4619      	mov	r1, r3
 8004c50:	7bfa      	ldrb	r2, [r7, #15]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	4299      	cmp	r1, r3
 8004c58:	dc02      	bgt.n	8004c60 <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	425b      	negs	r3, r3
 8004c5e:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	dc30      	bgt.n	8004ccc <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 8004c6a:	7bfa      	ldrb	r2, [r7, #15]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00da      	lsls	r2, r3, #3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	331c      	adds	r3, #28
 8004c78:	4619      	mov	r1, r3
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	4bac      	ldr	r3, [pc, #688]	@ (8004f30 <Display_stations_list_data+0x308>)
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c8a:	2008      	movs	r0, #8
 8004c8c:	f7fb ff3a 	bl	8000b04 <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8004c90:	7bfa      	ldrb	r2, [r7, #15]
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00da      	lsls	r2, r3, #3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	331c      	adds	r3, #28
 8004c9e:	461c      	mov	r4, r3
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	220a      	movs	r2, #10
 8004caa:	49a2      	ldr	r1, [pc, #648]	@ (8004f34 <Display_stations_list_data+0x30c>)
 8004cac:	4618      	mov	r0, r3
 8004cae:	f009 faff 	bl	800e2b0 <itoa>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	9201      	str	r2, [sp, #4]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	2011      	movs	r0, #17
 8004cc6:	f7fb ff1d 	bl	8000b04 <ILI9341_Draw_String>
 8004cca:	e01c      	b.n	8004d06 <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00da      	lsls	r2, r3, #3
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	331c      	adds	r3, #28
 8004cda:	461c      	mov	r4, r3
 8004cdc:	7bfa      	ldrb	r2, [r7, #15]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	220a      	movs	r2, #10
 8004ce6:	4993      	ldr	r1, [pc, #588]	@ (8004f34 <Display_stations_list_data+0x30c>)
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f009 fae1 	bl	800e2b0 <itoa>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	9201      	str	r2, [sp, #4]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004cfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cfe:	4621      	mov	r1, r4
 8004d00:	2008      	movs	r0, #8
 8004d02:	f7fb feff 	bl	8000b04 <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	00da      	lsls	r2, r3, #3
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	331c      	adds	r3, #28
 8004d14:	4619      	mov	r1, r3
 8004d16:	2302      	movs	r3, #2
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	4b87      	ldr	r3, [pc, #540]	@ (8004f38 <Display_stations_list_data+0x310>)
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d26:	2018      	movs	r0, #24
 8004d28:	f7fb feec 	bl	8000b04 <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	00da      	lsls	r2, r3, #3
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	331c      	adds	r3, #28
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	7bfa      	ldrb	r2, [r7, #15]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	461a      	mov	r2, r3
 8004d44:	2334      	movs	r3, #52	@ 0x34
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d4c:	4413      	add	r3, r2
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2302      	movs	r3, #2
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	9200      	str	r2, [sp, #0]
 8004d56:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d5e:	2022      	movs	r0, #34	@ 0x22
 8004d60:	f7fb fed0 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 8004d64:	7bfa      	ldrb	r2, [r7, #15]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	00da      	lsls	r2, r3, #3
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	331c      	adds	r3, #28
 8004d72:	4619      	mov	r1, r3
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2334      	movs	r3, #52	@ 0x34
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d84:	4413      	add	r3, r2
 8004d86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8004f3c <Display_stations_list_data+0x314>)
 8004d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d92:	2202      	movs	r2, #2
 8004d94:	9201      	str	r2, [sp, #4]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004da0:	20ab      	movs	r0, #171	@ 0xab
 8004da2:	f7fb feaf 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 8004da6:	7bfa      	ldrb	r2, [r7, #15]
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	00da      	lsls	r2, r3, #3
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	331c      	adds	r3, #28
 8004db4:	461c      	mov	r4, r3
 8004db6:	7bfa      	ldrb	r2, [r7, #15]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2334      	movs	r3, #52	@ 0x34
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dc6:	4413      	add	r3, r2
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	4a5d      	ldr	r2, [pc, #372]	@ (8004f40 <Display_stations_list_data+0x318>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	220a      	movs	r2, #10
 8004dd4:	4957      	ldr	r1, [pc, #348]	@ (8004f34 <Display_stations_list_data+0x30c>)
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f009 fa6a 	bl	800e2b0 <itoa>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2202      	movs	r2, #2
 8004de0:	9201      	str	r2, [sp, #4]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dec:	4621      	mov	r1, r4
 8004dee:	20ca      	movs	r0, #202	@ 0xca
 8004df0:	f7fb fe88 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004df4:	7bfa      	ldrb	r2, [r7, #15]
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	00da      	lsls	r2, r3, #3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	331c      	adds	r3, #28
 8004e02:	4619      	mov	r1, r3
 8004e04:	2302      	movs	r3, #2
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	4b4b      	ldr	r3, [pc, #300]	@ (8004f38 <Display_stations_list_data+0x310>)
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004e10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e14:	20e1      	movs	r0, #225	@ 0xe1
 8004e16:	f7fb fe75 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00da      	lsls	r2, r3, #3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	331c      	adds	r3, #28
 8004e28:	461c      	mov	r4, r3
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	461a      	mov	r2, r3
 8004e32:	2334      	movs	r3, #52	@ 0x34
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e3a:	4413      	add	r3, r2
 8004e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e3e:	4b40      	ldr	r3, [pc, #256]	@ (8004f40 <Display_stations_list_data+0x318>)
 8004e40:	fba3 1302 	umull	r1, r3, r3, r2
 8004e44:	099b      	lsrs	r3, r3, #6
 8004e46:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	220a      	movs	r2, #10
 8004e52:	4938      	ldr	r1, [pc, #224]	@ (8004f34 <Display_stations_list_data+0x30c>)
 8004e54:	4618      	mov	r0, r3
 8004e56:	f009 fa2b 	bl	800e2b0 <itoa>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	9201      	str	r2, [sp, #4]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004e66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	20e8      	movs	r0, #232	@ 0xe8
 8004e6e:	f7fb fe49 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00da      	lsls	r2, r3, #3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	331c      	adds	r3, #28
 8004e80:	4619      	mov	r1, r3
 8004e82:	2302      	movs	r3, #2
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	4b2f      	ldr	r3, [pc, #188]	@ (8004f44 <Display_stations_list_data+0x31c>)
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004e8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e92:	f240 1003 	movw	r0, #259	@ 0x103
 8004e96:	f7fb fe35 	bl	8000b04 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	f67f aed1 	bls.w	8004c4a <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 8004ea8:	e03b      	b.n	8004f22 <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 8004eaa:	2302      	movs	r3, #2
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	4b26      	ldr	r3, [pc, #152]	@ (8004f48 <Display_stations_list_data+0x320>)
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004eb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004eba:	211c      	movs	r1, #28
 8004ebc:	2008      	movs	r0, #8
 8004ebe:	f7fb fe21 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	4b21      	ldr	r3, [pc, #132]	@ (8004f4c <Display_stations_list_data+0x324>)
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ed2:	213f      	movs	r1, #63	@ 0x3f
 8004ed4:	2008      	movs	r0, #8
 8004ed6:	f7fb fe15 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 8004eda:	2302      	movs	r3, #2
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	4b1c      	ldr	r3, [pc, #112]	@ (8004f50 <Display_stations_list_data+0x328>)
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ee6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004eea:	2162      	movs	r1, #98	@ 0x62
 8004eec:	2008      	movs	r0, #8
 8004eee:	f7fb fe09 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	4b17      	ldr	r3, [pc, #92]	@ (8004f54 <Display_stations_list_data+0x32c>)
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f02:	2185      	movs	r1, #133	@ 0x85
 8004f04:	2008      	movs	r0, #8
 8004f06:	f7fb fdfd 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	4b12      	ldr	r3, [pc, #72]	@ (8004f58 <Display_stations_list_data+0x330>)
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004f16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f1a:	21a8      	movs	r1, #168	@ 0xa8
 8004f1c:	2008      	movs	r0, #8
 8004f1e:	f7fb fdf1 	bl	8000b04 <ILI9341_Draw_String>
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004f2c:	b004      	add	sp, #16
 8004f2e:	4770      	bx	lr
 8004f30:	0800f6dc 	.word	0x0800f6dc
 8004f34:	20006e64 	.word	0x20006e64
 8004f38:	0800f6ec 	.word	0x0800f6ec
 8004f3c:	200000ac 	.word	0x200000ac
 8004f40:	10624dd3 	.word	0x10624dd3
 8004f44:	0800f6f0 	.word	0x0800f6f0
 8004f48:	0800f830 	.word	0x0800f830
 8004f4c:	0800f848 	.word	0x0800f848
 8004f50:	0800f860 	.word	0x0800f860
 8004f54:	0800f878 	.word	0x0800f878
 8004f58:	0800f894 	.word	0x0800f894

08004f5c <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 8004f62:	f7ff fb05 	bl	8004570 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2);
 8004f66:	2302      	movs	r3, #2
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	4b64      	ldr	r3, [pc, #400]	@ (80050fc <Display_scanning_screen_background+0x1a0>)
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f74:	2101      	movs	r1, #1
 8004f76:	2005      	movs	r0, #5
 8004f78:	f7fb fdc4 	bl	8000b04 <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004f7c:	2328      	movs	r3, #40	@ 0x28
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	f240 133b 	movw	r3, #315	@ 0x13b
 8004f84:	2214      	movs	r2, #20
 8004f86:	2105      	movs	r1, #5
 8004f88:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004f8c:	f7fb fd18 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 8004f90:	2302      	movs	r3, #2
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	4b5a      	ldr	r3, [pc, #360]	@ (8005100 <Display_scanning_screen_background+0x1a4>)
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004f9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fa0:	2117      	movs	r1, #23
 8004fa2:	2050      	movs	r0, #80	@ 0x50
 8004fa4:	f7fb fdae 	bl	8000b04 <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 8004fa8:	2341      	movs	r3, #65	@ 0x41
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	f240 133b 	movw	r3, #315	@ 0x13b
 8004fb0:	222d      	movs	r2, #45	@ 0x2d
 8004fb2:	2105      	movs	r1, #5
 8004fb4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004fb8:	f7fb fd02 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004fbc:	235a      	movs	r3, #90	@ 0x5a
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	f240 133b 	movw	r3, #315	@ 0x13b
 8004fc4:	2246      	movs	r2, #70	@ 0x46
 8004fc6:	2105      	movs	r1, #5
 8004fc8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004fcc:	f7fb fcf8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005104 <Display_scanning_screen_background+0x1a8>)
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fe0:	2149      	movs	r1, #73	@ 0x49
 8004fe2:	200a      	movs	r0, #10
 8004fe4:	f7fb fd8e 	bl	8000b04 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004fe8:	2373      	movs	r3, #115	@ 0x73
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	f240 133b 	movw	r3, #315	@ 0x13b
 8004ff0:	225f      	movs	r2, #95	@ 0x5f
 8004ff2:	2105      	movs	r1, #5
 8004ff4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004ff8:	f7fb fce2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	4b41      	ldr	r3, [pc, #260]	@ (8005108 <Display_scanning_screen_background+0x1ac>)
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800500c:	2162      	movs	r1, #98	@ 0x62
 800500e:	200a      	movs	r0, #10
 8005010:	f7fb fd78 	bl	8000b04 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8005014:	238c      	movs	r3, #140	@ 0x8c
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	f240 133b 	movw	r3, #315	@ 0x13b
 800501c:	2278      	movs	r2, #120	@ 0x78
 800501e:	2105      	movs	r1, #5
 8005020:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8005024:	f7fb fccc 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 8005028:	2302      	movs	r3, #2
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	4b37      	ldr	r3, [pc, #220]	@ (800510c <Display_scanning_screen_background+0x1b0>)
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005038:	217b      	movs	r1, #123	@ 0x7b
 800503a:	200a      	movs	r0, #10
 800503c:	f7fb fd62 	bl	8000b04 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8005040:	23a5      	movs	r3, #165	@ 0xa5
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	f240 133b 	movw	r3, #315	@ 0x13b
 8005048:	2291      	movs	r2, #145	@ 0x91
 800504a:	2105      	movs	r1, #5
 800504c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8005050:	f7fb fcb6 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 8005054:	2302      	movs	r3, #2
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	4b2d      	ldr	r3, [pc, #180]	@ (8005110 <Display_scanning_screen_background+0x1b4>)
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005064:	2194      	movs	r1, #148	@ 0x94
 8005066:	200a      	movs	r0, #10
 8005068:	f7fb fd4c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 800506c:	2302      	movs	r3, #2
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	4b28      	ldr	r3, [pc, #160]	@ (8005114 <Display_scanning_screen_background+0x1b8>)
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800507c:	2194      	movs	r1, #148	@ 0x94
 800507e:	2078      	movs	r0, #120	@ 0x78
 8005080:	f7fb fd40 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 8005084:	2302      	movs	r3, #2
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	4b23      	ldr	r3, [pc, #140]	@ (8005118 <Display_scanning_screen_background+0x1bc>)
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005094:	2194      	movs	r1, #148	@ 0x94
 8005096:	209e      	movs	r0, #158	@ 0x9e
 8005098:	f7fb fd34 	bl	8000b04 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 800509c:	23be      	movs	r3, #190	@ 0xbe
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	f240 133b 	movw	r3, #315	@ 0x13b
 80050a4:	22aa      	movs	r2, #170	@ 0xaa
 80050a6:	2105      	movs	r1, #5
 80050a8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80050ac:	f7fb fc88 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 80050b0:	2302      	movs	r3, #2
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	4b19      	ldr	r3, [pc, #100]	@ (800511c <Display_scanning_screen_background+0x1c0>)
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80050bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050c0:	21ad      	movs	r1, #173	@ 0xad
 80050c2:	200a      	movs	r0, #10
 80050c4:	f7fb fd1e 	bl	8000b04 <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80050c8:	23eb      	movs	r3, #235	@ 0xeb
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	f240 133b 	movw	r3, #315	@ 0x13b
 80050d0:	22c3      	movs	r2, #195	@ 0xc3
 80050d2:	2105      	movs	r1, #5
 80050d4:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80050d8:	f7fb fc72 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 80050dc:	2302      	movs	r3, #2
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005120 <Display_scanning_screen_background+0x1c4>)
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80050e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050ec:	21cf      	movs	r1, #207	@ 0xcf
 80050ee:	2082      	movs	r0, #130	@ 0x82
 80050f0:	f7fb fd08 	bl	8000b04 <ILI9341_Draw_String>
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	0800f8ac 	.word	0x0800f8ac
 8005100:	0800f8bc 	.word	0x0800f8bc
 8005104:	0800f8d4 	.word	0x0800f8d4
 8005108:	0800f8e8 	.word	0x0800f8e8
 800510c:	0800f8f8 	.word	0x0800f8f8
 8005110:	0800f908 	.word	0x0800f908
 8005114:	0800f6ec 	.word	0x0800f6ec
 8005118:	0800f6f0 	.word	0x0800f6f0
 800511c:	0800f914 	.word	0x0800f914
 8005120:	0800f920 	.word	0x0800f920

08005124 <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 8005124:	b084      	sub	sp, #16
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af02      	add	r7, sp, #8
 800512c:	f107 0c08 	add.w	ip, r7, #8
 8005130:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 8005134:	7d3b      	ldrb	r3, [r7, #20]
 8005136:	3301      	adds	r3, #1
 8005138:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800513c:	fb02 f303 	mul.w	r3, r2, r3
 8005140:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005144:	fb93 f3f2 	sdiv	r3, r3, r2
 8005148:	330a      	adds	r3, #10
 800514a:	461a      	mov	r2, r3
 800514c:	233c      	movs	r3, #60	@ 0x3c
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	2232      	movs	r2, #50	@ 0x32
 8005154:	210a      	movs	r1, #10
 8005156:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800515a:	f7fb fc31 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 800515e:	7d3b      	ldrb	r3, [r7, #20]
 8005160:	3301      	adds	r3, #1
 8005162:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800516e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005172:	330a      	adds	r3, #10
 8005174:	4619      	mov	r1, r3
 8005176:	233c      	movs	r3, #60	@ 0x3c
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800517e:	2232      	movs	r2, #50	@ 0x32
 8005180:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005184:	f7fb fc1c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 8005188:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800518c:	220a      	movs	r2, #10
 800518e:	4954      	ldr	r1, [pc, #336]	@ (80052e0 <Display_scanning_screen_data+0x1bc>)
 8005190:	4618      	mov	r0, r3
 8005192:	f009 f88d 	bl	800e2b0 <itoa>
 8005196:	4603      	mov	r3, r0
 8005198:	2202      	movs	r2, #2
 800519a:	9201      	str	r2, [sp, #4]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051a6:	2149      	movs	r1, #73	@ 0x49
 80051a8:	2091      	movs	r0, #145	@ 0x91
 80051aa:	f7fb fcab 	bl	8000b04 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 80051ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80051b2:	220a      	movs	r2, #10
 80051b4:	494a      	ldr	r1, [pc, #296]	@ (80052e0 <Display_scanning_screen_data+0x1bc>)
 80051b6:	4618      	mov	r0, r3
 80051b8:	f009 f87a 	bl	800e2b0 <itoa>
 80051bc:	4603      	mov	r3, r0
 80051be:	2202      	movs	r2, #2
 80051c0:	9201      	str	r2, [sp, #4]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051cc:	2162      	movs	r1, #98	@ 0x62
 80051ce:	2087      	movs	r0, #135	@ 0x87
 80051d0:	f7fb fc98 	bl	8000b04 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 80051d4:	7d3b      	ldrb	r3, [r7, #20]
 80051d6:	3301      	adds	r3, #1
 80051d8:	220a      	movs	r2, #10
 80051da:	4941      	ldr	r1, [pc, #260]	@ (80052e0 <Display_scanning_screen_data+0x1bc>)
 80051dc:	4618      	mov	r0, r3
 80051de:	f009 f867 	bl	800e2b0 <itoa>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2202      	movs	r2, #2
 80051e6:	9201      	str	r2, [sp, #4]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051f2:	217b      	movs	r1, #123	@ 0x7b
 80051f4:	2076      	movs	r0, #118	@ 0x76
 80051f6:	f7fb fc85 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 80051fa:	2302      	movs	r3, #2
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	4b39      	ldr	r3, [pc, #228]	@ (80052e4 <Display_scanning_screen_data+0x1c0>)
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005206:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800520a:	217b      	movs	r1, #123	@ 0x7b
 800520c:	2089      	movs	r0, #137	@ 0x89
 800520e:	f7fb fc79 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 8005212:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005216:	220a      	movs	r2, #10
 8005218:	4931      	ldr	r1, [pc, #196]	@ (80052e0 <Display_scanning_screen_data+0x1bc>)
 800521a:	4618      	mov	r0, r3
 800521c:	f009 f848 	bl	800e2b0 <itoa>
 8005220:	4603      	mov	r3, r0
 8005222:	2202      	movs	r2, #2
 8005224:	9201      	str	r2, [sp, #4]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800522c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005230:	217b      	movs	r1, #123	@ 0x7b
 8005232:	2093      	movs	r0, #147	@ 0x93
 8005234:	f7fb fc66 	bl	8000b04 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4a2b      	ldr	r2, [pc, #172]	@ (80052e8 <Display_scanning_screen_data+0x1c4>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	099b      	lsrs	r3, r3, #6
 8005242:	220a      	movs	r2, #10
 8005244:	4926      	ldr	r1, [pc, #152]	@ (80052e0 <Display_scanning_screen_data+0x1bc>)
 8005246:	4618      	mov	r0, r3
 8005248:	f009 f832 	bl	800e2b0 <itoa>
 800524c:	4603      	mov	r3, r0
 800524e:	2202      	movs	r2, #2
 8005250:	9201      	str	r2, [sp, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005258:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800525c:	2194      	movs	r1, #148	@ 0x94
 800525e:	205f      	movs	r0, #95	@ 0x5f
 8005260:	f7fb fc50 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4b20      	ldr	r3, [pc, #128]	@ (80052e8 <Display_scanning_screen_data+0x1c4>)
 8005268:	fba3 1302 	umull	r1, r3, r3, r2
 800526c:	099b      	lsrs	r3, r3, #6
 800526e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	220a      	movs	r2, #10
 800527a:	4919      	ldr	r1, [pc, #100]	@ (80052e0 <Display_scanning_screen_data+0x1bc>)
 800527c:	4618      	mov	r0, r3
 800527e:	f009 f817 	bl	800e2b0 <itoa>
 8005282:	4603      	mov	r3, r0
 8005284:	2202      	movs	r2, #2
 8005286:	9201      	str	r2, [sp, #4]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800528e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005292:	2194      	movs	r1, #148	@ 0x94
 8005294:	2081      	movs	r0, #129	@ 0x81
 8005296:	f7fb fc35 	bl	8000b04 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 800529a:	2302      	movs	r3, #2
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	4b13      	ldr	r3, [pc, #76]	@ (80052ec <Display_scanning_screen_data+0x1c8>)
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052aa:	21ad      	movs	r1, #173	@ 0xad
 80052ac:	2050      	movs	r0, #80	@ 0x50
 80052ae:	f7fb fc29 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 80052b2:	7d3b      	ldrb	r3, [r7, #20]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <Display_scanning_screen_data+0x1cc>)
 80052b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052bc:	2202      	movs	r2, #2
 80052be:	9201      	str	r2, [sp, #4]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052ca:	21ad      	movs	r1, #173	@ 0xad
 80052cc:	2050      	movs	r0, #80	@ 0x50
 80052ce:	f7fb fc19 	bl	8000b04 <ILI9341_Draw_String>
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052da:	b004      	add	sp, #16
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20006e64 	.word	0x20006e64
 80052e4:	0800f810 	.word	0x0800f810
 80052e8:	10624dd3 	.word	0x10624dd3
 80052ec:	0800f928 	.word	0x0800f928
 80052f0:	200000ac 	.word	0x200000ac

080052f4 <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 80052fa:	2328      	movs	r3, #40	@ 0x28
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	f240 133b 	movw	r3, #315	@ 0x13b
 8005302:	2214      	movs	r2, #20
 8005304:	2105      	movs	r1, #5
 8005306:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800530a:	f7fb fb59 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 800530e:	2302      	movs	r3, #2
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	4b11      	ldr	r3, [pc, #68]	@ (8005358 <Display_scanning_screen_complete+0x64>)
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800531a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800531e:	2117      	movs	r1, #23
 8005320:	2050      	movs	r0, #80	@ 0x50
 8005322:	f7fb fbef 	bl	8000b04 <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 8005326:	23eb      	movs	r3, #235	@ 0xeb
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	f240 133b 	movw	r3, #315	@ 0x13b
 800532e:	22c3      	movs	r2, #195	@ 0xc3
 8005330:	2105      	movs	r1, #5
 8005332:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005336:	f7fb fb43 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 800533a:	2302      	movs	r3, #2
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	4b07      	ldr	r3, [pc, #28]	@ (800535c <Display_scanning_screen_complete+0x68>)
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800534a:	21cf      	movs	r1, #207	@ 0xcf
 800534c:	2082      	movs	r0, #130	@ 0x82
 800534e:	f7fb fbd9 	bl	8000b04 <ILI9341_Draw_String>
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	0800f930 	.word	0x0800f930
 800535c:	0800f948 	.word	0x0800f948

08005360 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af02      	add	r7, sp, #8
	//Clear Screen
	Display_clear_screen();
 8005366:	f7ff f903 	bl	8004570 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2);
 800536a:	2302      	movs	r3, #2
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	4bb4      	ldr	r3, [pc, #720]	@ (8005640 <Display_dab_digrad_status_background+0x2e0>)
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005378:	2101      	movs	r1, #1
 800537a:	2005      	movs	r0, #5
 800537c:	f7fb fbc2 	bl	8000b04 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 8005380:	2328      	movs	r3, #40	@ 0x28
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	2369      	movs	r3, #105	@ 0x69
 8005386:	2214      	movs	r2, #20
 8005388:	2105      	movs	r1, #5
 800538a:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800538e:	f7fb fb17 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 8005392:	2328      	movs	r3, #40	@ 0x28
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	23d2      	movs	r3, #210	@ 0xd2
 8005398:	2214      	movs	r2, #20
 800539a:	216e      	movs	r1, #110	@ 0x6e
 800539c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80053a0:	f7fb fb0e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 80053a4:	2328      	movs	r3, #40	@ 0x28
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	f240 133b 	movw	r3, #315	@ 0x13b
 80053ac:	2214      	movs	r2, #20
 80053ae:	21d7      	movs	r1, #215	@ 0xd7
 80053b0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80053b4:	f7fb fb04 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80053b8:	2341      	movs	r3, #65	@ 0x41
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	f240 133b 	movw	r3, #315	@ 0x13b
 80053c0:	222d      	movs	r2, #45	@ 0x2d
 80053c2:	2105      	movs	r1, #5
 80053c4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80053c8:	f7fb fafa 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 80053cc:	2302      	movs	r3, #2
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	4b9c      	ldr	r3, [pc, #624]	@ (8005644 <Display_dab_digrad_status_background+0x2e4>)
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80053d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053dc:	2130      	movs	r1, #48	@ 0x30
 80053de:	200a      	movs	r0, #10
 80053e0:	f7fb fb90 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 80053e4:	2302      	movs	r3, #2
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	4b97      	ldr	r3, [pc, #604]	@ (8005648 <Display_dab_digrad_status_background+0x2e8>)
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80053f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053f4:	2130      	movs	r1, #48	@ 0x30
 80053f6:	205a      	movs	r0, #90	@ 0x5a
 80053f8:	f7fb fb84 	bl	8000b04 <ILI9341_Draw_String>

	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80053fc:	235a      	movs	r3, #90	@ 0x5a
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	f240 133b 	movw	r3, #315	@ 0x13b
 8005404:	2246      	movs	r2, #70	@ 0x46
 8005406:	2105      	movs	r1, #5
 8005408:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800540c:	f7fb fad8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8005410:	2302      	movs	r3, #2
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	4b8d      	ldr	r3, [pc, #564]	@ (800564c <Display_dab_digrad_status_background+0x2ec>)
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800541c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005420:	2149      	movs	r1, #73	@ 0x49
 8005422:	200a      	movs	r0, #10
 8005424:	f7fb fb6e 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8005428:	2302      	movs	r3, #2
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	4b88      	ldr	r3, [pc, #544]	@ (8005650 <Display_dab_digrad_status_background+0x2f0>)
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005438:	2149      	movs	r1, #73	@ 0x49
 800543a:	2069      	movs	r0, #105	@ 0x69
 800543c:	f7fb fb62 	bl	8000b04 <ILI9341_Draw_String>

	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8005440:	2373      	movs	r3, #115	@ 0x73
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	f240 133b 	movw	r3, #315	@ 0x13b
 8005448:	225f      	movs	r2, #95	@ 0x5f
 800544a:	2105      	movs	r1, #5
 800544c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8005450:	f7fb fab6 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 8005454:	2302      	movs	r3, #2
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	4b7e      	ldr	r3, [pc, #504]	@ (8005654 <Display_dab_digrad_status_background+0x2f4>)
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005460:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005464:	2162      	movs	r1, #98	@ 0x62
 8005466:	200a      	movs	r0, #10
 8005468:	f7fb fb4c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 800546c:	2302      	movs	r3, #2
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	4b77      	ldr	r3, [pc, #476]	@ (8005650 <Display_dab_digrad_status_background+0x2f0>)
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800547c:	2162      	movs	r1, #98	@ 0x62
 800547e:	2069      	movs	r0, #105	@ 0x69
 8005480:	f7fb fb40 	bl	8000b04 <ILI9341_Draw_String>

	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8005484:	238c      	movs	r3, #140	@ 0x8c
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	f240 133b 	movw	r3, #315	@ 0x13b
 800548c:	2278      	movs	r2, #120	@ 0x78
 800548e:	2105      	movs	r1, #5
 8005490:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8005494:	f7fb fa94 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 8005498:	2302      	movs	r3, #2
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	4b6e      	ldr	r3, [pc, #440]	@ (8005658 <Display_dab_digrad_status_background+0x2f8>)
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80054a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054a8:	217b      	movs	r1, #123	@ 0x7b
 80054aa:	200a      	movs	r0, #10
 80054ac:	f7fb fb2a 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 80054b0:	2302      	movs	r3, #2
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	4b69      	ldr	r3, [pc, #420]	@ (800565c <Display_dab_digrad_status_background+0x2fc>)
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80054bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054c0:	217b      	movs	r1, #123	@ 0x7b
 80054c2:	206e      	movs	r0, #110	@ 0x6e
 80054c4:	f7fb fb1e 	bl	8000b04 <ILI9341_Draw_String>

	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 80054c8:	23a5      	movs	r3, #165	@ 0xa5
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	f240 133b 	movw	r3, #315	@ 0x13b
 80054d0:	2291      	movs	r2, #145	@ 0x91
 80054d2:	2105      	movs	r1, #5
 80054d4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80054d8:	f7fb fa72 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 80054dc:	2302      	movs	r3, #2
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005660 <Display_dab_digrad_status_background+0x300>)
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80054e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054ec:	2194      	movs	r1, #148	@ 0x94
 80054ee:	200a      	movs	r0, #10
 80054f0:	f7fb fb08 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 80054f4:	2302      	movs	r3, #2
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005664 <Display_dab_digrad_status_background+0x304>)
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005504:	2194      	movs	r1, #148	@ 0x94
 8005506:	2071      	movs	r0, #113	@ 0x71
 8005508:	f7fb fafc 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 800550c:	2302      	movs	r3, #2
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	4b55      	ldr	r3, [pc, #340]	@ (8005668 <Display_dab_digrad_status_background+0x308>)
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005518:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800551c:	2194      	movs	r1, #148	@ 0x94
 800551e:	2094      	movs	r0, #148	@ 0x94
 8005520:	f7fb faf0 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8005524:	2302      	movs	r3, #2
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	4b50      	ldr	r3, [pc, #320]	@ (800566c <Display_dab_digrad_status_background+0x30c>)
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005530:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005534:	2194      	movs	r1, #148	@ 0x94
 8005536:	20b7      	movs	r0, #183	@ 0xb7
 8005538:	f7fb fae4 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 800553c:	2302      	movs	r3, #2
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	4b4b      	ldr	r3, [pc, #300]	@ (8005670 <Display_dab_digrad_status_background+0x310>)
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005548:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800554c:	2194      	movs	r1, #148	@ 0x94
 800554e:	20db      	movs	r0, #219	@ 0xdb
 8005550:	f7fb fad8 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8005554:	2302      	movs	r3, #2
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	4b46      	ldr	r3, [pc, #280]	@ (8005674 <Display_dab_digrad_status_background+0x314>)
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005560:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005564:	2194      	movs	r1, #148	@ 0x94
 8005566:	f240 101b 	movw	r0, #283	@ 0x11b
 800556a:	f7fb facb 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 800556e:	2302      	movs	r3, #2
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	4b41      	ldr	r3, [pc, #260]	@ (8005678 <Display_dab_digrad_status_background+0x318>)
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800557a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800557e:	2194      	movs	r1, #148	@ 0x94
 8005580:	f240 1025 	movw	r0, #293	@ 0x125
 8005584:	f7fb fabe 	bl	8000b04 <ILI9341_Draw_String>

	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8005588:	23be      	movs	r3, #190	@ 0xbe
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	f240 133b 	movw	r3, #315	@ 0x13b
 8005590:	22aa      	movs	r2, #170	@ 0xaa
 8005592:	2105      	movs	r1, #5
 8005594:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8005598:	f7fb fa12 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 800559c:	2302      	movs	r3, #2
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	4b36      	ldr	r3, [pc, #216]	@ (800567c <Display_dab_digrad_status_background+0x31c>)
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80055a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055ac:	21ad      	movs	r1, #173	@ 0xad
 80055ae:	200a      	movs	r0, #10
 80055b0:	f7fb faa8 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 80055b4:	2302      	movs	r3, #2
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	4b31      	ldr	r3, [pc, #196]	@ (8005680 <Display_dab_digrad_status_background+0x320>)
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80055c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055c4:	21ad      	movs	r1, #173	@ 0xad
 80055c6:	207d      	movs	r0, #125	@ 0x7d
 80055c8:	f7fb fa9c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 80055cc:	2302      	movs	r3, #2
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005684 <Display_dab_digrad_status_background+0x324>)
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80055d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055dc:	21ad      	movs	r1, #173	@ 0xad
 80055de:	20b4      	movs	r0, #180	@ 0xb4
 80055e0:	f7fb fa90 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80055e4:	23eb      	movs	r3, #235	@ 0xeb
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	239d      	movs	r3, #157	@ 0x9d
 80055ea:	22c3      	movs	r2, #195	@ 0xc3
 80055ec:	2105      	movs	r1, #5
 80055ee:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80055f2:	f7fb f9e5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80055f6:	23eb      	movs	r3, #235	@ 0xeb
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	f240 133b 	movw	r3, #315	@ 0x13b
 80055fe:	22c3      	movs	r2, #195	@ 0xc3
 8005600:	21a3      	movs	r1, #163	@ 0xa3
 8005602:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005606:	f7fb f9db 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 800560a:	2302      	movs	r3, #2
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	4b1e      	ldr	r3, [pc, #120]	@ (8005688 <Display_dab_digrad_status_background+0x328>)
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800561a:	21cf      	movs	r1, #207	@ 0xcf
 800561c:	2023      	movs	r0, #35	@ 0x23
 800561e:	f7fb fa71 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8005622:	2302      	movs	r3, #2
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	4b19      	ldr	r3, [pc, #100]	@ (800568c <Display_dab_digrad_status_background+0x32c>)
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800562e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005632:	21cf      	movs	r1, #207	@ 0xcf
 8005634:	20cd      	movs	r0, #205	@ 0xcd
 8005636:	f7fb fa65 	bl	8000b04 <ILI9341_Draw_String>
}
 800563a:	bf00      	nop
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	0800f950 	.word	0x0800f950
 8005644:	0800f964 	.word	0x0800f964
 8005648:	0800f96c 	.word	0x0800f96c
 800564c:	0800f974 	.word	0x0800f974
 8005650:	0800f978 	.word	0x0800f978
 8005654:	0800f97c 	.word	0x0800f97c
 8005658:	0800f980 	.word	0x0800f980
 800565c:	0800f988 	.word	0x0800f988
 8005660:	0800f98c 	.word	0x0800f98c
 8005664:	0800f6ec 	.word	0x0800f6ec
 8005668:	0800f6f0 	.word	0x0800f6f0
 800566c:	0800f998 	.word	0x0800f998
 8005670:	0800f9a0 	.word	0x0800f9a0
 8005674:	0800f810 	.word	0x0800f810
 8005678:	0800f9a8 	.word	0x0800f9a8
 800567c:	0800f9ac 	.word	0x0800f9ac
 8005680:	0800f9b8 	.word	0x0800f9b8
 8005684:	0800f9bc 	.word	0x0800f9bc
 8005688:	0800f6cc 	.word	0x0800f6cc
 800568c:	0800f9c0 	.word	0x0800f9c0

08005690 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8005690:	b084      	sub	sp, #16
 8005692:	b580      	push	{r7, lr}
 8005694:	b086      	sub	sp, #24
 8005696:	af02      	add	r7, sp, #8
 8005698:	f107 0c18 	add.w	ip, r7, #24
 800569c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 80056a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056a2:	461a      	mov	r2, r3
 80056a4:	23fa      	movs	r3, #250	@ 0xfa
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4a30      	ldr	r2, [pc, #192]	@ (8005770 <Display_dab_digrad_status_data+0xe0>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	099b      	lsrs	r3, r3, #6
 80056b6:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005770 <Display_dab_digrad_status_data+0xe0>)
 80056bc:	fba3 1302 	umull	r1, r3, r3, r2
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80056c6:	fb01 f303 	mul.w	r3, r1, r3
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	80bb      	strh	r3, [r7, #4]

	//Valid
	if(digrad_status.valid)
 80056ce:	7e7b      	ldrb	r3, [r7, #25]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <Display_dab_digrad_status_data+0x64>
	{
		ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 80056da:	2302      	movs	r3, #2
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	4b25      	ldr	r3, [pc, #148]	@ (8005774 <Display_dab_digrad_status_data+0xe4>)
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80056e6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80056ea:	2117      	movs	r1, #23
 80056ec:	2023      	movs	r0, #35	@ 0x23
 80056ee:	f7fb fa09 	bl	8000b04 <ILI9341_Draw_String>
 80056f2:	e00b      	b.n	800570c <Display_dab_digrad_status_data+0x7c>
	}
	else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 80056f4:	2302      	movs	r3, #2
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005774 <Display_dab_digrad_status_data+0xe4>)
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005700:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005704:	2117      	movs	r1, #23
 8005706:	2023      	movs	r0, #35	@ 0x23
 8005708:	f7fb f9fc 	bl	8000b04 <ILI9341_Draw_String>

	//ACQ
	if(digrad_status.acq)
 800570c:	7e7b      	ldrb	r3, [r7, #25]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <Display_dab_digrad_status_data+0xa2>
	{
		ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8005718:	2302      	movs	r3, #2
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	4b16      	ldr	r3, [pc, #88]	@ (8005778 <Display_dab_digrad_status_data+0xe8>)
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005724:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8005728:	2117      	movs	r1, #23
 800572a:	2085      	movs	r0, #133	@ 0x85
 800572c:	f7fb f9ea 	bl	8000b04 <ILI9341_Draw_String>
 8005730:	e00b      	b.n	800574a <Display_dab_digrad_status_data+0xba>
	}
	else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8005732:	2302      	movs	r3, #2
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	4b10      	ldr	r3, [pc, #64]	@ (8005778 <Display_dab_digrad_status_data+0xe8>)
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800573e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005742:	2117      	movs	r1, #23
 8005744:	2085      	movs	r0, #133	@ 0x85
 8005746:	f7fb f9dd 	bl	8000b04 <ILI9341_Draw_String>

	//FIC_ERROR
	if(digrad_status.fic_err)
 800574a:	7e7b      	ldrb	r3, [r7, #25]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d014      	beq.n	8005780 <Display_dab_digrad_status_data+0xf0>
	{
		ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8005756:	2302      	movs	r3, #2
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	4b08      	ldr	r3, [pc, #32]	@ (800577c <Display_dab_digrad_status_data+0xec>)
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005762:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005766:	2117      	movs	r1, #23
 8005768:	20e4      	movs	r0, #228	@ 0xe4
 800576a:	f7fb f9cb 	bl	8000b04 <ILI9341_Draw_String>
 800576e:	e013      	b.n	8005798 <Display_dab_digrad_status_data+0x108>
 8005770:	10624dd3 	.word	0x10624dd3
 8005774:	0800f9cc 	.word	0x0800f9cc
 8005778:	0800f9d4 	.word	0x0800f9d4
 800577c:	0800f9dc 	.word	0x0800f9dc
	}
	else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8005780:	2302      	movs	r3, #2
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	4bb6      	ldr	r3, [pc, #728]	@ (8005a60 <Display_dab_digrad_status_data+0x3d0>)
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800578c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8005790:	2117      	movs	r1, #23
 8005792:	20e4      	movs	r0, #228	@ 0xe4
 8005794:	f7fb f9b6 	bl	8000b04 <ILI9341_Draw_String>

	//RSSI
	if(digrad_status.rssi <= 13) 								color = RED;
 8005798:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800579c:	2b0d      	cmp	r3, #13
 800579e:	dc02      	bgt.n	80057a6 <Display_dab_digrad_status_data+0x116>
 80057a0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80057a4:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 80057a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80057aa:	2b1a      	cmp	r3, #26
 80057ac:	dc06      	bgt.n	80057bc <Display_dab_digrad_status_data+0x12c>
 80057ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80057b2:	2b0d      	cmp	r3, #13
 80057b4:	dd02      	ble.n	80057bc <Display_dab_digrad_status_data+0x12c>
 80057b6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80057ba:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 80057bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80057c0:	2b27      	cmp	r3, #39	@ 0x27
 80057c2:	dc06      	bgt.n	80057d2 <Display_dab_digrad_status_data+0x142>
 80057c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80057c8:	2b1a      	cmp	r3, #26
 80057ca:	dd02      	ble.n	80057d2 <Display_dab_digrad_status_data+0x142>
 80057cc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80057d0:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 80057d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80057d6:	2b34      	cmp	r3, #52	@ 0x34
 80057d8:	dc06      	bgt.n	80057e8 <Display_dab_digrad_status_data+0x158>
 80057da:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80057de:	2b27      	cmp	r3, #39	@ 0x27
 80057e0:	dd02      	ble.n	80057e8 <Display_dab_digrad_status_data+0x158>
 80057e2:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 80057e6:	60fb      	str	r3, [r7, #12]
	if(digrad_status.rssi > 52) 								color = GREEN;
 80057e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80057ec:	2b34      	cmp	r3, #52	@ 0x34
 80057ee:	dd02      	ble.n	80057f6 <Display_dab_digrad_status_data+0x166>
 80057f0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80057f4:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 80057f6:	2302      	movs	r3, #2
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	4b9a      	ldr	r3, [pc, #616]	@ (8005a64 <Display_dab_digrad_status_data+0x3d4>)
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005806:	2130      	movs	r1, #48	@ 0x30
 8005808:	2032      	movs	r0, #50	@ 0x32
 800580a:	f7fb f97b 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 800580e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005812:	220a      	movs	r2, #10
 8005814:	4994      	ldr	r1, [pc, #592]	@ (8005a68 <Display_dab_digrad_status_data+0x3d8>)
 8005816:	4618      	mov	r0, r3
 8005818:	f008 fd4a 	bl	800e2b0 <itoa>
 800581c:	4603      	mov	r3, r0
 800581e:	2202      	movs	r2, #2
 8005820:	9201      	str	r2, [sp, #4]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005828:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800582c:	2130      	movs	r1, #48	@ 0x30
 800582e:	2032      	movs	r0, #50	@ 0x32
 8005830:	f7fb f968 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8005834:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005838:	461a      	mov	r2, r3
 800583a:	23b4      	movs	r3, #180	@ 0xb4
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	da00      	bge.n	8005846 <Display_dab_digrad_status_data+0x1b6>
 8005844:	333f      	adds	r3, #63	@ 0x3f
 8005846:	119b      	asrs	r3, r3, #6
 8005848:	3382      	adds	r3, #130	@ 0x82
 800584a:	461a      	mov	r2, r3
 800584c:	233c      	movs	r3, #60	@ 0x3c
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	2232      	movs	r2, #50	@ 0x32
 8005854:	2182      	movs	r1, #130	@ 0x82
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7fb f8b2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 800585c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005860:	461a      	mov	r2, r3
 8005862:	23b4      	movs	r3, #180	@ 0xb4
 8005864:	fb02 f303 	mul.w	r3, r2, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	da00      	bge.n	800586e <Display_dab_digrad_status_data+0x1de>
 800586c:	333f      	adds	r3, #63	@ 0x3f
 800586e:	119b      	asrs	r3, r3, #6
 8005870:	3382      	adds	r3, #130	@ 0x82
 8005872:	4619      	mov	r1, r3
 8005874:	233c      	movs	r3, #60	@ 0x3c
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800587c:	2232      	movs	r2, #50	@ 0x32
 800587e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005882:	f7fb f89d 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//SNR
	if(digrad_status.snr <= 4) 									color = RED;
 8005886:	7efb      	ldrb	r3, [r7, #27]
 8005888:	2b04      	cmp	r3, #4
 800588a:	d802      	bhi.n	8005892 <Display_dab_digrad_status_data+0x202>
 800588c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005890:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8005892:	7efb      	ldrb	r3, [r7, #27]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d805      	bhi.n	80058a4 <Display_dab_digrad_status_data+0x214>
 8005898:	7efb      	ldrb	r3, [r7, #27]
 800589a:	2b04      	cmp	r3, #4
 800589c:	d902      	bls.n	80058a4 <Display_dab_digrad_status_data+0x214>
 800589e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80058a2:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 80058a4:	7efb      	ldrb	r3, [r7, #27]
 80058a6:	2b0c      	cmp	r3, #12
 80058a8:	d805      	bhi.n	80058b6 <Display_dab_digrad_status_data+0x226>
 80058aa:	7efb      	ldrb	r3, [r7, #27]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d902      	bls.n	80058b6 <Display_dab_digrad_status_data+0x226>
 80058b0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80058b4:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 80058b6:	7efb      	ldrb	r3, [r7, #27]
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d805      	bhi.n	80058c8 <Display_dab_digrad_status_data+0x238>
 80058bc:	7efb      	ldrb	r3, [r7, #27]
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d902      	bls.n	80058c8 <Display_dab_digrad_status_data+0x238>
 80058c2:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 80058c6:	60fb      	str	r3, [r7, #12]
	if(digrad_status.snr > 16) 									color = GREEN;
 80058c8:	7efb      	ldrb	r3, [r7, #27]
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d902      	bls.n	80058d4 <Display_dab_digrad_status_data+0x244>
 80058ce:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80058d2:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 80058d4:	2302      	movs	r3, #2
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	4b62      	ldr	r3, [pc, #392]	@ (8005a64 <Display_dab_digrad_status_data+0x3d4>)
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80058e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058e4:	2149      	movs	r1, #73	@ 0x49
 80058e6:	2032      	movs	r0, #50	@ 0x32
 80058e8:	f7fb f90c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 80058ec:	7efb      	ldrb	r3, [r7, #27]
 80058ee:	220a      	movs	r2, #10
 80058f0:	495d      	ldr	r1, [pc, #372]	@ (8005a68 <Display_dab_digrad_status_data+0x3d8>)
 80058f2:	4618      	mov	r0, r3
 80058f4:	f008 fcdc 	bl	800e2b0 <itoa>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2202      	movs	r2, #2
 80058fc:	9201      	str	r2, [sp, #4]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005908:	2149      	movs	r1, #73	@ 0x49
 800590a:	2032      	movs	r0, #50	@ 0x32
 800590c:	f7fb f8fa 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8005910:	7efb      	ldrb	r3, [r7, #27]
 8005912:	461a      	mov	r2, r3
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4413      	add	r3, r2
 800591a:	3382      	adds	r3, #130	@ 0x82
 800591c:	461a      	mov	r2, r3
 800591e:	2355      	movs	r3, #85	@ 0x55
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	224b      	movs	r2, #75	@ 0x4b
 8005926:	2182      	movs	r1, #130	@ 0x82
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7fb f849 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 800592e:	7efb      	ldrb	r3, [r7, #27]
 8005930:	461a      	mov	r2, r3
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	3382      	adds	r3, #130	@ 0x82
 800593a:	4619      	mov	r1, r3
 800593c:	2355      	movs	r3, #85	@ 0x55
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8005944:	224b      	movs	r2, #75	@ 0x4b
 8005946:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800594a:	f7fb f839 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//CNR
	if(digrad_status.cnr <= 11) 								color = RED;
 800594e:	7f7b      	ldrb	r3, [r7, #29]
 8005950:	2b0b      	cmp	r3, #11
 8005952:	d802      	bhi.n	800595a <Display_dab_digrad_status_data+0x2ca>
 8005954:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005958:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 800595a:	7f7b      	ldrb	r3, [r7, #29]
 800595c:	2b16      	cmp	r3, #22
 800595e:	d805      	bhi.n	800596c <Display_dab_digrad_status_data+0x2dc>
 8005960:	7f7b      	ldrb	r3, [r7, #29]
 8005962:	2b0b      	cmp	r3, #11
 8005964:	d902      	bls.n	800596c <Display_dab_digrad_status_data+0x2dc>
 8005966:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800596a:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 800596c:	7f7b      	ldrb	r3, [r7, #29]
 800596e:	2b21      	cmp	r3, #33	@ 0x21
 8005970:	d805      	bhi.n	800597e <Display_dab_digrad_status_data+0x2ee>
 8005972:	7f7b      	ldrb	r3, [r7, #29]
 8005974:	2b16      	cmp	r3, #22
 8005976:	d902      	bls.n	800597e <Display_dab_digrad_status_data+0x2ee>
 8005978:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800597c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 800597e:	7f7b      	ldrb	r3, [r7, #29]
 8005980:	2b2c      	cmp	r3, #44	@ 0x2c
 8005982:	d805      	bhi.n	8005990 <Display_dab_digrad_status_data+0x300>
 8005984:	7f7b      	ldrb	r3, [r7, #29]
 8005986:	2b21      	cmp	r3, #33	@ 0x21
 8005988:	d902      	bls.n	8005990 <Display_dab_digrad_status_data+0x300>
 800598a:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 800598e:	60fb      	str	r3, [r7, #12]
	if(digrad_status.cnr > 44) 									color = GREEN;
 8005990:	7f7b      	ldrb	r3, [r7, #29]
 8005992:	2b2c      	cmp	r3, #44	@ 0x2c
 8005994:	d902      	bls.n	800599c <Display_dab_digrad_status_data+0x30c>
 8005996:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800599a:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 800599c:	2302      	movs	r3, #2
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	4b30      	ldr	r3, [pc, #192]	@ (8005a64 <Display_dab_digrad_status_data+0x3d4>)
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80059a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059ac:	2162      	movs	r1, #98	@ 0x62
 80059ae:	2032      	movs	r0, #50	@ 0x32
 80059b0:	f7fb f8a8 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 80059b4:	7f7b      	ldrb	r3, [r7, #29]
 80059b6:	220a      	movs	r2, #10
 80059b8:	492b      	ldr	r1, [pc, #172]	@ (8005a68 <Display_dab_digrad_status_data+0x3d8>)
 80059ba:	4618      	mov	r0, r3
 80059bc:	f008 fc78 	bl	800e2b0 <itoa>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2202      	movs	r2, #2
 80059c4:	9201      	str	r2, [sp, #4]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80059cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059d0:	2162      	movs	r1, #98	@ 0x62
 80059d2:	2032      	movs	r0, #50	@ 0x32
 80059d4:	f7fb f896 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 80059d8:	7f7b      	ldrb	r3, [r7, #29]
 80059da:	461a      	mov	r2, r3
 80059dc:	23b4      	movs	r3, #180	@ 0xb4
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	4a22      	ldr	r2, [pc, #136]	@ (8005a6c <Display_dab_digrad_status_data+0x3dc>)
 80059e4:	fb82 1203 	smull	r1, r2, r2, r3
 80059e8:	1112      	asrs	r2, r2, #4
 80059ea:	17db      	asrs	r3, r3, #31
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	3382      	adds	r3, #130	@ 0x82
 80059f0:	461a      	mov	r2, r3
 80059f2:	236e      	movs	r3, #110	@ 0x6e
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	2264      	movs	r2, #100	@ 0x64
 80059fa:	2182      	movs	r1, #130	@ 0x82
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7fa ffdf 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8005a02:	7f7b      	ldrb	r3, [r7, #29]
 8005a04:	461a      	mov	r2, r3
 8005a06:	23b4      	movs	r3, #180	@ 0xb4
 8005a08:	fb02 f303 	mul.w	r3, r2, r3
 8005a0c:	4a17      	ldr	r2, [pc, #92]	@ (8005a6c <Display_dab_digrad_status_data+0x3dc>)
 8005a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8005a12:	1112      	asrs	r2, r2, #4
 8005a14:	17db      	asrs	r3, r3, #31
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	3382      	adds	r3, #130	@ 0x82
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	236e      	movs	r3, #110	@ 0x6e
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8005a24:	2264      	movs	r2, #100	@ 0x64
 8005a26:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005a2a:	f7fa ffc9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//FIC QUALITY
	if(digrad_status.fic_quality <= 20) 										color = RED;
 8005a2e:	7f3b      	ldrb	r3, [r7, #28]
 8005a30:	2b14      	cmp	r3, #20
 8005a32:	d802      	bhi.n	8005a3a <Display_dab_digrad_status_data+0x3aa>
 8005a34:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005a38:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8005a3a:	7f3b      	ldrb	r3, [r7, #28]
 8005a3c:	2b28      	cmp	r3, #40	@ 0x28
 8005a3e:	d805      	bhi.n	8005a4c <Display_dab_digrad_status_data+0x3bc>
 8005a40:	7f3b      	ldrb	r3, [r7, #28]
 8005a42:	2b14      	cmp	r3, #20
 8005a44:	d902      	bls.n	8005a4c <Display_dab_digrad_status_data+0x3bc>
 8005a46:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005a4a:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8005a4c:	7f3b      	ldrb	r3, [r7, #28]
 8005a4e:	2b3c      	cmp	r3, #60	@ 0x3c
 8005a50:	d80e      	bhi.n	8005a70 <Display_dab_digrad_status_data+0x3e0>
 8005a52:	7f3b      	ldrb	r3, [r7, #28]
 8005a54:	2b28      	cmp	r3, #40	@ 0x28
 8005a56:	d90b      	bls.n	8005a70 <Display_dab_digrad_status_data+0x3e0>
 8005a58:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e007      	b.n	8005a70 <Display_dab_digrad_status_data+0x3e0>
 8005a60:	0800f9dc 	.word	0x0800f9dc
 8005a64:	0800f9e8 	.word	0x0800f9e8
 8005a68:	20006e64 	.word	0x20006e64
 8005a6c:	4bda12f7 	.word	0x4bda12f7
	if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8005a70:	7f3b      	ldrb	r3, [r7, #28]
 8005a72:	2b50      	cmp	r3, #80	@ 0x50
 8005a74:	d805      	bhi.n	8005a82 <Display_dab_digrad_status_data+0x3f2>
 8005a76:	7f3b      	ldrb	r3, [r7, #28]
 8005a78:	2b3c      	cmp	r3, #60	@ 0x3c
 8005a7a:	d902      	bls.n	8005a82 <Display_dab_digrad_status_data+0x3f2>
 8005a7c:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8005a80:	60fb      	str	r3, [r7, #12]
	if(digrad_status.fic_quality > 80) 											color = GREEN;
 8005a82:	7f3b      	ldrb	r3, [r7, #28]
 8005a84:	2b50      	cmp	r3, #80	@ 0x50
 8005a86:	d902      	bls.n	8005a8e <Display_dab_digrad_status_data+0x3fe>
 8005a88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8005a8c:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 8005a8e:	2302      	movs	r3, #2
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	4ba9      	ldr	r3, [pc, #676]	@ (8005d38 <Display_dab_digrad_status_data+0x6a8>)
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005a9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a9e:	217b      	movs	r1, #123	@ 0x7b
 8005aa0:	204b      	movs	r0, #75	@ 0x4b
 8005aa2:	f7fb f82f 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8005aa6:	7f3b      	ldrb	r3, [r7, #28]
 8005aa8:	220a      	movs	r2, #10
 8005aaa:	49a4      	ldr	r1, [pc, #656]	@ (8005d3c <Display_dab_digrad_status_data+0x6ac>)
 8005aac:	4618      	mov	r0, r3
 8005aae:	f008 fbff 	bl	800e2b0 <itoa>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	9201      	str	r2, [sp, #4]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ac2:	217b      	movs	r1, #123	@ 0x7b
 8005ac4:	204b      	movs	r0, #75	@ 0x4b
 8005ac6:	f7fb f81d 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8005aca:	7f3b      	ldrb	r3, [r7, #28]
 8005acc:	461a      	mov	r2, r3
 8005ace:	23b4      	movs	r3, #180	@ 0xb4
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
 8005ad4:	4a9a      	ldr	r2, [pc, #616]	@ (8005d40 <Display_dab_digrad_status_data+0x6b0>)
 8005ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8005ada:	1152      	asrs	r2, r2, #5
 8005adc:	17db      	asrs	r3, r3, #31
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	3382      	adds	r3, #130	@ 0x82
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2387      	movs	r3, #135	@ 0x87
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	227d      	movs	r2, #125	@ 0x7d
 8005aec:	2182      	movs	r1, #130	@ 0x82
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7fa ff66 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8005af4:	7f3b      	ldrb	r3, [r7, #28]
 8005af6:	461a      	mov	r2, r3
 8005af8:	23b4      	movs	r3, #180	@ 0xb4
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	4a90      	ldr	r2, [pc, #576]	@ (8005d40 <Display_dab_digrad_status_data+0x6b0>)
 8005b00:	fb82 1203 	smull	r1, r2, r2, r3
 8005b04:	1152      	asrs	r2, r2, #5
 8005b06:	17db      	asrs	r3, r3, #31
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	3382      	adds	r3, #130	@ 0x82
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	2387      	movs	r3, #135	@ 0x87
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8005b16:	227d      	movs	r2, #125	@ 0x7d
 8005b18:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005b1c:	f7fa ff50 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//TUNE FREQ
	ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	4a88      	ldr	r2, [pc, #544]	@ (8005d44 <Display_dab_digrad_status_data+0x6b4>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	099b      	lsrs	r3, r3, #6
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	4983      	ldr	r1, [pc, #524]	@ (8005d3c <Display_dab_digrad_status_data+0x6ac>)
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f008 fbbe 	bl	800e2b0 <itoa>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2202      	movs	r2, #2
 8005b38:	9201      	str	r2, [sp, #4]
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b44:	2194      	movs	r1, #148	@ 0x94
 8005b46:	205b      	movs	r0, #91	@ 0x5b
 8005b48:	f7fa ffdc 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8005b4c:	6a3a      	ldr	r2, [r7, #32]
 8005b4e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d44 <Display_dab_digrad_status_data+0x6b4>)
 8005b50:	fba3 1302 	umull	r1, r3, r3, r2
 8005b54:	099b      	lsrs	r3, r3, #6
 8005b56:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	220a      	movs	r2, #10
 8005b62:	4976      	ldr	r1, [pc, #472]	@ (8005d3c <Display_dab_digrad_status_data+0x6ac>)
 8005b64:	4618      	mov	r0, r3
 8005b66:	f008 fba3 	bl	800e2b0 <itoa>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	9201      	str	r2, [sp, #4]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005b76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b7a:	2194      	movs	r1, #148	@ 0x94
 8005b7c:	2078      	movs	r0, #120	@ 0x78
 8005b7e:	f7fa ffc1 	bl	8000b04 <ILI9341_Draw_String>

	//TUNE INDEX
	if(digrad_status.tune_index < 10)
 8005b82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	d821      	bhi.n	8005bce <Display_dab_digrad_status_data+0x53e>
	{
		ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d48 <Display_dab_digrad_status_data+0x6b8>)
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b9a:	2194      	movs	r1, #148	@ 0x94
 8005b9c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8005ba0:	f7fa ffb0 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8005ba4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ba8:	220a      	movs	r2, #10
 8005baa:	4964      	ldr	r1, [pc, #400]	@ (8005d3c <Display_dab_digrad_status_data+0x6ac>)
 8005bac:	4618      	mov	r0, r3
 8005bae:	f008 fb7f 	bl	800e2b0 <itoa>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	9201      	str	r2, [sp, #4]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005bc2:	2194      	movs	r1, #148	@ 0x94
 8005bc4:	f240 1011 	movw	r0, #273	@ 0x111
 8005bc8:	f7fa ff9c 	bl	8000b04 <ILI9341_Draw_String>
 8005bcc:	e013      	b.n	8005bf6 <Display_dab_digrad_status_data+0x566>
	}
	else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8005bce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bd2:	220a      	movs	r2, #10
 8005bd4:	4959      	ldr	r1, [pc, #356]	@ (8005d3c <Display_dab_digrad_status_data+0x6ac>)
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f008 fb6a 	bl	800e2b0 <itoa>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2202      	movs	r2, #2
 8005be0:	9201      	str	r2, [sp, #4]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005be8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005bec:	2194      	movs	r1, #148	@ 0x94
 8005bee:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8005bf2:	f7fa ff87 	bl	8000b04 <ILI9341_Draw_String>

	//ANT CAP TRIM
	if(cap_val_pf_int < 10)
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	2b09      	cmp	r3, #9
 8005bfa:	d81d      	bhi.n	8005c38 <Display_dab_digrad_status_data+0x5a8>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	4b52      	ldr	r3, [pc, #328]	@ (8005d4c <Display_dab_digrad_status_data+0x6bc>)
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c0c:	21ad      	movs	r1, #173	@ 0xad
 8005c0e:	204f      	movs	r0, #79	@ 0x4f
 8005c10:	f7fa ff78 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	220a      	movs	r2, #10
 8005c18:	4948      	ldr	r1, [pc, #288]	@ (8005d3c <Display_dab_digrad_status_data+0x6ac>)
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f008 fb48 	bl	800e2b0 <itoa>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2202      	movs	r2, #2
 8005c24:	9201      	str	r2, [sp, #4]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005c2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c30:	21ad      	movs	r1, #173	@ 0xad
 8005c32:	2057      	movs	r0, #87	@ 0x57
 8005c34:	f7fa ff66 	bl	8000b04 <ILI9341_Draw_String>
	}
	if(cap_val_pf_int >= 10)
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	2b09      	cmp	r3, #9
 8005c3c:	d911      	bls.n	8005c62 <Display_dab_digrad_status_data+0x5d2>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	220a      	movs	r2, #10
 8005c42:	493e      	ldr	r1, [pc, #248]	@ (8005d3c <Display_dab_digrad_status_data+0x6ac>)
 8005c44:	4618      	mov	r0, r3
 8005c46:	f008 fb33 	bl	800e2b0 <itoa>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	9201      	str	r2, [sp, #4]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c5a:	21ad      	movs	r1, #173	@ 0xad
 8005c5c:	204f      	movs	r0, #79	@ 0x4f
 8005c5e:	f7fa ff51 	bl	8000b04 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 8005c62:	2302      	movs	r3, #2
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	4b3a      	ldr	r3, [pc, #232]	@ (8005d50 <Display_dab_digrad_status_data+0x6c0>)
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c72:	21ad      	movs	r1, #173	@ 0xad
 8005c74:	205f      	movs	r0, #95	@ 0x5f
 8005c76:	f7fa ff45 	bl	8000b04 <ILI9341_Draw_String>
	switch(cap_val_pf_frac)
 8005c7a:	88bb      	ldrh	r3, [r7, #4]
 8005c7c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d023      	beq.n	8005ccc <Display_dab_digrad_status_data+0x63c>
 8005c84:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	dc2c      	bgt.n	8005ce6 <Display_dab_digrad_status_data+0x656>
 8005c8c:	2bfa      	cmp	r3, #250	@ 0xfa
 8005c8e:	d003      	beq.n	8005c98 <Display_dab_digrad_status_data+0x608>
 8005c90:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005c94:	d00d      	beq.n	8005cb2 <Display_dab_digrad_status_data+0x622>
 8005c96:	e026      	b.n	8005ce6 <Display_dab_digrad_status_data+0x656>
	{
	case 250:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 8005c98:	2302      	movs	r3, #2
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005d54 <Display_dab_digrad_status_data+0x6c4>)
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005ca4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ca8:	21ad      	movs	r1, #173	@ 0xad
 8005caa:	2067      	movs	r0, #103	@ 0x67
 8005cac:	f7fa ff2a 	bl	8000b04 <ILI9341_Draw_String>
		break;
 8005cb0:	e026      	b.n	8005d00 <Display_dab_digrad_status_data+0x670>
	case 500:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	4b28      	ldr	r3, [pc, #160]	@ (8005d58 <Display_dab_digrad_status_data+0x6c8>)
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005cc2:	21ad      	movs	r1, #173	@ 0xad
 8005cc4:	2067      	movs	r0, #103	@ 0x67
 8005cc6:	f7fa ff1d 	bl	8000b04 <ILI9341_Draw_String>
		break;
 8005cca:	e019      	b.n	8005d00 <Display_dab_digrad_status_data+0x670>
	case 750:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8005ccc:	2302      	movs	r3, #2
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	4b22      	ldr	r3, [pc, #136]	@ (8005d5c <Display_dab_digrad_status_data+0x6cc>)
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005cd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005cdc:	21ad      	movs	r1, #173	@ 0xad
 8005cde:	2067      	movs	r0, #103	@ 0x67
 8005ce0:	f7fa ff10 	bl	8000b04 <ILI9341_Draw_String>
		break;
 8005ce4:	e00c      	b.n	8005d00 <Display_dab_digrad_status_data+0x670>
	default:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	4b1d      	ldr	r3, [pc, #116]	@ (8005d60 <Display_dab_digrad_status_data+0x6d0>)
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005cf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005cf6:	21ad      	movs	r1, #173	@ 0xad
 8005cf8:	2067      	movs	r0, #103	@ 0x67
 8005cfa:	f7fa ff03 	bl	8000b04 <ILI9341_Draw_String>
		break;
 8005cfe:	bf00      	nop
	}

	//BER
	ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 8005d00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	220a      	movs	r2, #10
 8005d0a:	490c      	ldr	r1, [pc, #48]	@ (8005d3c <Display_dab_digrad_status_data+0x6ac>)
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f008 facf 	bl	800e2b0 <itoa>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2202      	movs	r2, #2
 8005d16:	9201      	str	r2, [sp, #4]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d22:	21ad      	movs	r1, #173	@ 0xad
 8005d24:	20d7      	movs	r0, #215	@ 0xd7
 8005d26:	f7fa feed 	bl	8000b04 <ILI9341_Draw_String>
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d34:	b004      	add	sp, #16
 8005d36:	4770      	bx	lr
 8005d38:	0800f9e8 	.word	0x0800f9e8
 8005d3c:	20006e64 	.word	0x20006e64
 8005d40:	51eb851f 	.word	0x51eb851f
 8005d44:	10624dd3 	.word	0x10624dd3
 8005d48:	0800f9ec 	.word	0x0800f9ec
 8005d4c:	0800f6dc 	.word	0x0800f6dc
 8005d50:	0800f6ec 	.word	0x0800f6ec
 8005d54:	0800f9f0 	.word	0x0800f9f0
 8005d58:	0800f9f4 	.word	0x0800f9f4
 8005d5c:	0800f9f8 	.word	0x0800f9f8
 8005d60:	0800f9fc 	.word	0x0800f9fc

08005d64 <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 8005d6a:	f7fe fc01 	bl	8004570 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2);
 8005d6e:	2302      	movs	r3, #2
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	4b6d      	ldr	r3, [pc, #436]	@ (8005f28 <Display_settings_screen_background+0x1c4>)
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	2300      	movs	r3, #0
 8005d78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	2005      	movs	r0, #5
 8005d80:	f7fa fec0 	bl	8000b04 <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 8005d84:	2337      	movs	r3, #55	@ 0x37
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	f240 133b 	movw	r3, #315	@ 0x13b
 8005d8c:	2214      	movs	r2, #20
 8005d8e:	2105      	movs	r1, #5
 8005d90:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8005d94:	f7fa fe14 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 8005d98:	2302      	movs	r3, #2
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	4b63      	ldr	r3, [pc, #396]	@ (8005f2c <Display_settings_screen_background+0x1c8>)
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005da4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005da8:	2116      	movs	r1, #22
 8005daa:	2037      	movs	r0, #55	@ 0x37
 8005dac:	f7fa feaa 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 8005db0:	2302      	movs	r3, #2
 8005db2:	9301      	str	r3, [sp, #4]
 8005db4:	4b5e      	ldr	r3, [pc, #376]	@ (8005f30 <Display_settings_screen_background+0x1cc>)
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dc0:	2116      	movs	r1, #22
 8005dc2:	20ce      	movs	r0, #206	@ 0xce
 8005dc4:	f7fa fe9e 	bl	8000b04 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8005dc8:	2364      	movs	r3, #100	@ 0x64
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	239d      	movs	r3, #157	@ 0x9d
 8005dce:	223c      	movs	r2, #60	@ 0x3c
 8005dd0:	2105      	movs	r1, #5
 8005dd2:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005dd6:	f7fa fdf3 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 8005dda:	2364      	movs	r3, #100	@ 0x64
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	f240 133b 	movw	r3, #315	@ 0x13b
 8005de2:	223c      	movs	r2, #60	@ 0x3c
 8005de4:	21a3      	movs	r1, #163	@ 0xa3
 8005de6:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005dea:	f7fa fde9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 8005dee:	2302      	movs	r3, #2
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	4b50      	ldr	r3, [pc, #320]	@ (8005f34 <Display_settings_screen_background+0x1d0>)
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005dfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dfe:	2148      	movs	r1, #72	@ 0x48
 8005e00:	2036      	movs	r0, #54	@ 0x36
 8005e02:	f7fa fe7f 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 8005e06:	2302      	movs	r3, #2
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f38 <Display_settings_screen_background+0x1d4>)
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005e12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e16:	2148      	movs	r1, #72	@ 0x48
 8005e18:	20d3      	movs	r0, #211	@ 0xd3
 8005e1a:	f7fa fe73 	bl	8000b04 <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 8005e1e:	2391      	movs	r3, #145	@ 0x91
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	239d      	movs	r3, #157	@ 0x9d
 8005e24:	2269      	movs	r2, #105	@ 0x69
 8005e26:	2105      	movs	r1, #5
 8005e28:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005e2c:	f7fa fdc8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 8005e30:	2391      	movs	r3, #145	@ 0x91
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	f240 133b 	movw	r3, #315	@ 0x13b
 8005e38:	2269      	movs	r2, #105	@ 0x69
 8005e3a:	21a3      	movs	r1, #163	@ 0xa3
 8005e3c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005e40:	f7fa fdbe 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
	//ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "Get anno info", 2);
 8005e44:	2302      	movs	r3, #2
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	4b3c      	ldr	r3, [pc, #240]	@ (8005f3c <Display_settings_screen_background+0x1d8>)
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005e50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e54:	2175      	movs	r1, #117	@ 0x75
 8005e56:	2023      	movs	r0, #35	@ 0x23
 8005e58:	f7fa fe54 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "Get event info", 2);
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	4b37      	ldr	r3, [pc, #220]	@ (8005f40 <Display_settings_screen_background+0x1dc>)
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e6c:	2175      	movs	r1, #117	@ 0x75
 8005e6e:	20c1      	movs	r0, #193	@ 0xc1
 8005e70:	f7fa fe48 	bl	8000b04 <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 8005e74:	23be      	movs	r3, #190	@ 0xbe
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	239d      	movs	r3, #157	@ 0x9d
 8005e7a:	2296      	movs	r2, #150	@ 0x96
 8005e7c:	2105      	movs	r1, #5
 8005e7e:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005e82:	f7fa fd9d 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 8005e86:	23be      	movs	r3, #190	@ 0xbe
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	f240 133b 	movw	r3, #315	@ 0x13b
 8005e8e:	2296      	movs	r2, #150	@ 0x96
 8005e90:	21a3      	movs	r1, #163	@ 0xa3
 8005e92:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005e96:	f7fa fd93 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	4b29      	ldr	r3, [pc, #164]	@ (8005f44 <Display_settings_screen_background+0x1e0>)
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005eaa:	21a2      	movs	r1, #162	@ 0xa2
 8005eac:	2020      	movs	r0, #32
 8005eae:	f7fa fe29 	bl	8000b04 <ILI9341_Draw_String>
	//ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "Get Anno Supp info", 2);
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	4b24      	ldr	r3, [pc, #144]	@ (8005f48 <Display_settings_screen_background+0x1e4>)
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ec2:	21a2      	movs	r1, #162	@ 0xa2
 8005ec4:	20a8      	movs	r0, #168	@ 0xa8
 8005ec6:	f7fa fe1d 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8005eca:	23eb      	movs	r3, #235	@ 0xeb
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	239d      	movs	r3, #157	@ 0x9d
 8005ed0:	22c3      	movs	r2, #195	@ 0xc3
 8005ed2:	2105      	movs	r1, #5
 8005ed4:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005ed8:	f7fa fd72 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8005edc:	23eb      	movs	r3, #235	@ 0xeb
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	f240 133b 	movw	r3, #315	@ 0x13b
 8005ee4:	22c3      	movs	r2, #195	@ 0xc3
 8005ee6:	21a3      	movs	r1, #163	@ 0xa3
 8005ee8:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005eec:	f7fa fd68 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	4b15      	ldr	r3, [pc, #84]	@ (8005f4c <Display_settings_screen_background+0x1e8>)
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005efc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f00:	21cf      	movs	r1, #207	@ 0xcf
 8005f02:	2025      	movs	r0, #37	@ 0x25
 8005f04:	f7fa fdfe 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(203, 207, WHITE, ORANGE, "ALARMING", 2);
 8005f08:	2302      	movs	r3, #2
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	4b10      	ldr	r3, [pc, #64]	@ (8005f50 <Display_settings_screen_background+0x1ec>)
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005f14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f18:	21cf      	movs	r1, #207	@ 0xcf
 8005f1a:	20cb      	movs	r0, #203	@ 0xcb
 8005f1c:	f7fa fdf2 	bl	8000b04 <ILI9341_Draw_String>
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	0800fa00 	.word	0x0800fa00
 8005f2c:	0800fa10 	.word	0x0800fa10
 8005f30:	0800fa18 	.word	0x0800fa18
 8005f34:	0800fa24 	.word	0x0800fa24
 8005f38:	0800fa30 	.word	0x0800fa30
 8005f3c:	0800fa3c 	.word	0x0800fa3c
 8005f40:	0800fa4c 	.word	0x0800fa4c
 8005f44:	0800fa5c 	.word	0x0800fa5c
 8005f48:	0800fa6c 	.word	0x0800fa6c
 8005f4c:	0800f824 	.word	0x0800f824
 8005f50:	0800f6c0 	.word	0x0800f6c0

08005f54 <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 8005f54:	b590      	push	{r4, r7, lr}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	463c      	mov	r4, r7
 8005f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	461a      	mov	r2, r3
 8005f64:	238c      	movs	r3, #140	@ 0x8c
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd8 <Display_settings_screen_data+0x84>)
 8005f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8005f70:	441a      	add	r2, r3
 8005f72:	1152      	asrs	r2, r2, #5
 8005f74:	17db      	asrs	r3, r3, #31
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	330c      	adds	r3, #12
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	2332      	movs	r3, #50	@ 0x32
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	2398      	movs	r3, #152	@ 0x98
 8005f82:	2228      	movs	r2, #40	@ 0x28
 8005f84:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005f88:	f7fa fd1a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	238c      	movs	r3, #140	@ 0x8c
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	4a10      	ldr	r2, [pc, #64]	@ (8005fd8 <Display_settings_screen_data+0x84>)
 8005f98:	fb82 1203 	smull	r1, r2, r2, r3
 8005f9c:	441a      	add	r2, r3
 8005f9e:	1152      	asrs	r2, r2, #5
 8005fa0:	17db      	asrs	r3, r3, #31
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	2332      	movs	r3, #50	@ 0x32
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	2228      	movs	r2, #40	@ 0x28
 8005fb0:	210c      	movs	r1, #12
 8005fb2:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8005fb6:	f7fa fd03 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 8005fba:	2332      	movs	r3, #50	@ 0x32
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	f44f 739a 	mov.w	r3, #308	@ 0x134
 8005fc2:	2228      	movs	r2, #40	@ 0x28
 8005fc4:	21a8      	movs	r1, #168	@ 0xa8
 8005fc6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8005fca:	f7fa fcf9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd90      	pop	{r4, r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	82082083 	.word	0x82082083

08005fdc <Display_alarming_screen_background>:

void Display_alarming_screen_background()
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 8005fe2:	f7fe fac5 	bl	8004570 <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "ALARMING SETTINGS", 2);
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	4b56      	ldr	r3, [pc, #344]	@ (8006144 <Display_alarming_screen_background+0x168>)
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	2005      	movs	r0, #5
 8005ff8:	f7fa fd84 	bl	8000b04 <ILI9341_Draw_String>

	//alarming mode description bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 38);
 8005ffc:	2326      	movs	r3, #38	@ 0x26
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	f240 133b 	movw	r3, #315	@ 0x13b
 8006004:	2214      	movs	r2, #20
 8006006:	2105      	movs	r1, #5
 8006008:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800600c:	f7fa fcd8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(48, 22, WHITE, DARKGREY, "TAP TO CHOOSE ALARMING OPTION", 2);
 8006010:	2302      	movs	r3, #2
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	4b4c      	ldr	r3, [pc, #304]	@ (8006148 <Display_alarming_screen_background+0x16c>)
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800601c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006020:	2116      	movs	r1, #22
 8006022:	2030      	movs	r0, #48	@ 0x30
 8006024:	f7fa fd6e 	bl	8000b04 <ILI9341_Draw_String>

	//Alarming by DLS Label button
	ILI9341_Draw_Filled_Rectangle(RED, 5, 43, 157, 114);
 8006028:	2372      	movs	r3, #114	@ 0x72
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	239d      	movs	r3, #157	@ 0x9d
 800602e:	222b      	movs	r2, #43	@ 0x2b
 8006030:	2105      	movs	r1, #5
 8006032:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8006036:	f7fa fcc3 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(33, 72, WHITE, RED, "ALARM BY DLS", 2);
 800603a:	2302      	movs	r3, #2
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	4b43      	ldr	r3, [pc, #268]	@ (800614c <Display_alarming_screen_background+0x170>)
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8006046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800604a:	2148      	movs	r1, #72	@ 0x48
 800604c:	2021      	movs	r0, #33	@ 0x21
 800604e:	f7fa fd59 	bl	8000b04 <ILI9341_Draw_String>
	//Alarming by ...1 button
	ILI9341_Draw_Filled_Rectangle(BLUE, 163, 43, 315, 114);
 8006052:	2372      	movs	r3, #114	@ 0x72
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	f240 133b 	movw	r3, #315	@ 0x13b
 800605a:	222b      	movs	r2, #43	@ 0x2b
 800605c:	21a3      	movs	r1, #163	@ 0xa3
 800605e:	201f      	movs	r0, #31
 8006060:	f7fa fcae 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(175, 62, WHITE, BLUE, "ALARM BY FIG0/18", 2);
 8006064:	2302      	movs	r3, #2
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	4b39      	ldr	r3, [pc, #228]	@ (8006150 <Display_alarming_screen_background+0x174>)
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	231f      	movs	r3, #31
 800606e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006072:	213e      	movs	r1, #62	@ 0x3e
 8006074:	20af      	movs	r0, #175	@ 0xaf
 8006076:	f7fa fd45 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 82, WHITE, BLUE, "ANNOUNCEMENT", 2);
 800607a:	2302      	movs	r3, #2
 800607c:	9301      	str	r3, [sp, #4]
 800607e:	4b35      	ldr	r3, [pc, #212]	@ (8006154 <Display_alarming_screen_background+0x178>)
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	231f      	movs	r3, #31
 8006084:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006088:	2152      	movs	r1, #82	@ 0x52
 800608a:	20c1      	movs	r0, #193	@ 0xc1
 800608c:	f7fa fd3a 	bl	8000b04 <ILI9341_Draw_String>

	//Alarming by ...2 button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 119, 157, 190);
 8006090:	23be      	movs	r3, #190	@ 0xbe
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	239d      	movs	r3, #157	@ 0x9d
 8006096:	2277      	movs	r2, #119	@ 0x77
 8006098:	2105      	movs	r1, #5
 800609a:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800609e:	f7fa fc8f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(30, 148, WHITE, ORANGE, "ALARM RESERVED", 2);
 80060a2:	2302      	movs	r3, #2
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006158 <Display_alarming_screen_background+0x17c>)
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80060ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060b2:	2194      	movs	r1, #148	@ 0x94
 80060b4:	201e      	movs	r0, #30
 80060b6:	f7fa fd25 	bl	8000b04 <ILI9341_Draw_String>

	//No alarming - normal mode button
	ILI9341_Draw_Filled_Rectangle(GREEN, 163, 119, 315, 190);
 80060ba:	23be      	movs	r3, #190	@ 0xbe
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	f240 133b 	movw	r3, #315	@ 0x13b
 80060c2:	2277      	movs	r2, #119	@ 0x77
 80060c4:	21a3      	movs	r1, #163	@ 0xa3
 80060c6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80060ca:	f7fa fc79 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(207, 148, WHITE, GREEN, "NO ALARM", 2);
 80060ce:	2302      	movs	r3, #2
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	4b22      	ldr	r3, [pc, #136]	@ (800615c <Display_alarming_screen_background+0x180>)
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80060da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060de:	2194      	movs	r1, #148	@ 0x94
 80060e0:	20cf      	movs	r0, #207	@ 0xcf
 80060e2:	f7fa fd0f 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80060e6:	23eb      	movs	r3, #235	@ 0xeb
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	239d      	movs	r3, #157	@ 0x9d
 80060ec:	22c3      	movs	r2, #195	@ 0xc3
 80060ee:	2105      	movs	r1, #5
 80060f0:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80060f4:	f7fa fc64 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80060f8:	23eb      	movs	r3, #235	@ 0xeb
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	f240 133b 	movw	r3, #315	@ 0x13b
 8006100:	22c3      	movs	r2, #195	@ 0xc3
 8006102:	21a3      	movs	r1, #163	@ 0xa3
 8006104:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8006108:	f7fa fc5a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(47, 207, WHITE, ORANGE, "SETTINGS", 2);
 800610c:	2302      	movs	r3, #2
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	4b13      	ldr	r3, [pc, #76]	@ (8006160 <Display_alarming_screen_background+0x184>)
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8006118:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800611c:	21cf      	movs	r1, #207	@ 0xcf
 800611e:	202f      	movs	r0, #47	@ 0x2f
 8006120:	f7fa fcf0 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8006124:	2302      	movs	r3, #2
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	4b0e      	ldr	r3, [pc, #56]	@ (8006164 <Display_alarming_screen_background+0x188>)
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8006130:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006134:	21cf      	movs	r1, #207	@ 0xcf
 8006136:	20c3      	movs	r0, #195	@ 0xc3
 8006138:	f7fa fce4 	bl	8000b04 <ILI9341_Draw_String>
}
 800613c:	bf00      	nop
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	0800fa80 	.word	0x0800fa80
 8006148:	0800fa94 	.word	0x0800fa94
 800614c:	0800fab4 	.word	0x0800fab4
 8006150:	0800fac4 	.word	0x0800fac4
 8006154:	0800fad8 	.word	0x0800fad8
 8006158:	0800fae8 	.word	0x0800fae8
 800615c:	0800faf8 	.word	0x0800faf8
 8006160:	0800f9c0 	.word	0x0800f9c0
 8006164:	0800f818 	.word	0x0800f818

08006168 <Display_time>:



void Display_time(time_t time_val)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af02      	add	r7, sp, #8
 800616e:	463b      	mov	r3, r7
 8006170:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 8006174:	883b      	ldrh	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d076      	beq.n	8006268 <Display_time+0x100>
 800617a:	78bb      	ldrb	r3, [r7, #2]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d073      	beq.n	8006268 <Display_time+0x100>
	{
		if(time_val.hour < 10)
 8006180:	793b      	ldrb	r3, [r7, #4]
 8006182:	2b09      	cmp	r3, #9
 8006184:	d81e      	bhi.n	80061c4 <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 8006186:	2302      	movs	r3, #2
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	4b39      	ldr	r3, [pc, #228]	@ (8006270 <Display_time+0x108>)
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	2300      	movs	r3, #0
 8006190:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006194:	2101      	movs	r1, #1
 8006196:	f240 100f 	movw	r0, #271	@ 0x10f
 800619a:	f7fa fcb3 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 800619e:	793b      	ldrb	r3, [r7, #4]
 80061a0:	220a      	movs	r2, #10
 80061a2:	4934      	ldr	r1, [pc, #208]	@ (8006274 <Display_time+0x10c>)
 80061a4:	4618      	mov	r0, r3
 80061a6:	f008 f883 	bl	800e2b0 <itoa>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2202      	movs	r2, #2
 80061ae:	9201      	str	r2, [sp, #4]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	2300      	movs	r3, #0
 80061b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061b8:	2101      	movs	r1, #1
 80061ba:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80061be:	f7fa fca1 	bl	8000b04 <ILI9341_Draw_String>
 80061c2:	e011      	b.n	80061e8 <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80061c4:	793b      	ldrb	r3, [r7, #4]
 80061c6:	220a      	movs	r2, #10
 80061c8:	492a      	ldr	r1, [pc, #168]	@ (8006274 <Display_time+0x10c>)
 80061ca:	4618      	mov	r0, r3
 80061cc:	f008 f870 	bl	800e2b0 <itoa>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2202      	movs	r2, #2
 80061d4:	9201      	str	r2, [sp, #4]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061de:	2101      	movs	r1, #1
 80061e0:	f240 100f 	movw	r0, #271	@ 0x10f
 80061e4:	f7fa fc8e 	bl	8000b04 <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 80061e8:	2302      	movs	r3, #2
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	4b22      	ldr	r3, [pc, #136]	@ (8006278 <Display_time+0x110>)
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2300      	movs	r3, #0
 80061f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061f6:	2101      	movs	r1, #1
 80061f8:	f240 101f 	movw	r0, #287	@ 0x11f
 80061fc:	f7fa fc82 	bl	8000b04 <ILI9341_Draw_String>

		if(time_val.minute < 10)
 8006200:	797b      	ldrb	r3, [r7, #5]
 8006202:	2b09      	cmp	r3, #9
 8006204:	d81e      	bhi.n	8006244 <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 8006206:	2302      	movs	r3, #2
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	4b19      	ldr	r3, [pc, #100]	@ (8006270 <Display_time+0x108>)
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2300      	movs	r3, #0
 8006210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006214:	2101      	movs	r1, #1
 8006216:	f240 1027 	movw	r0, #295	@ 0x127
 800621a:	f7fa fc73 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 800621e:	797b      	ldrb	r3, [r7, #5]
 8006220:	220a      	movs	r2, #10
 8006222:	4914      	ldr	r1, [pc, #80]	@ (8006274 <Display_time+0x10c>)
 8006224:	4618      	mov	r0, r3
 8006226:	f008 f843 	bl	800e2b0 <itoa>
 800622a:	4603      	mov	r3, r0
 800622c:	2202      	movs	r2, #2
 800622e:	9201      	str	r2, [sp, #4]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	2300      	movs	r3, #0
 8006234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006238:	2101      	movs	r1, #1
 800623a:	f44f 7098 	mov.w	r0, #304	@ 0x130
 800623e:	f7fa fc61 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 8006242:	e011      	b.n	8006268 <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8006244:	797b      	ldrb	r3, [r7, #5]
 8006246:	220a      	movs	r2, #10
 8006248:	490a      	ldr	r1, [pc, #40]	@ (8006274 <Display_time+0x10c>)
 800624a:	4618      	mov	r0, r3
 800624c:	f008 f830 	bl	800e2b0 <itoa>
 8006250:	4603      	mov	r3, r0
 8006252:	2202      	movs	r2, #2
 8006254:	9201      	str	r2, [sp, #4]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800625e:	2101      	movs	r1, #1
 8006260:	f240 1027 	movw	r0, #295	@ 0x127
 8006264:	f7fa fc4e 	bl	8000b04 <ILI9341_Draw_String>
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	0800f9ec 	.word	0x0800f9ec
 8006274:	20006e64 	.word	0x20006e64
 8006278:	0800fb04 	.word	0x0800fb04

0800627c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <MX_DMA_Init+0x3c>)
 8006288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628a:	4a0b      	ldr	r2, [pc, #44]	@ (80062b8 <MX_DMA_Init+0x3c>)
 800628c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006290:	6313      	str	r3, [r2, #48]	@ 0x30
 8006292:	4b09      	ldr	r3, [pc, #36]	@ (80062b8 <MX_DMA_Init+0x3c>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800629e:	2200      	movs	r2, #0
 80062a0:	2100      	movs	r1, #0
 80062a2:	200f      	movs	r0, #15
 80062a4:	f002 f931 	bl	800850a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80062a8:	200f      	movs	r0, #15
 80062aa:	f002 f94a 	bl	8008542 <HAL_NVIC_EnableIRQ>

}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40023800 	.word	0x40023800

080062bc <eeprom_wait>:
//#define ADDR_SIZE 1	//for 24c08 1, for 24c256 2, because of bigger memory size - we must habe 2 bytes for memory Address

static uint32_t last_write;	//variable used to save time of last writing operation in eeprom_wait function

void eeprom_wait(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 80062c0:	bf00      	nop
 80062c2:	f002 f817 	bl	80082f4 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	4b03      	ldr	r3, [pc, #12]	@ (80062d8 <eeprom_wait+0x1c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b14      	cmp	r3, #20
 80062d0:	d9f7      	bls.n	80062c2 <eeprom_wait+0x6>
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20006f28 	.word	0x20006f28

080062dc <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80062e8:	f7ff ffe8 	bl	80062bc <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80062f8:	9102      	str	r1, [sp, #8]
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	2302      	movs	r3, #2
 8006302:	21a0      	movs	r1, #160	@ 0xa0
 8006304:	4803      	ldr	r0, [pc, #12]	@ (8006314 <eeprom_read+0x38>)
 8006306:	f003 f85d 	bl	80093c4 <HAL_I2C_Mem_Read>
 800630a:	4603      	mov	r3, r0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20006f2c 	.word	0x20006f2c

08006318 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08a      	sub	sp, #40	@ 0x28
 800631c:	af04      	add	r7, sp, #16
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8006324:	f7ff ffca 	bl	80062bc <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	b29a      	uxth	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8006334:	9102      	str	r1, [sp, #8]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2302      	movs	r3, #2
 800633e:	21a0      	movs	r1, #160	@ 0xa0
 8006340:	4807      	ldr	r0, [pc, #28]	@ (8006360 <eeprom_write+0x48>)
 8006342:	f002 ff45 	bl	80091d0 <HAL_I2C_Mem_Write>
 8006346:	4603      	mov	r3, r0
 8006348:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800634a:	f001 ffd3 	bl	80082f4 <HAL_GetTick>
 800634e:	4603      	mov	r3, r0
 8006350:	4a04      	ldr	r2, [pc, #16]	@ (8006364 <eeprom_write+0x4c>)
 8006352:	6013      	str	r3, [r2, #0]

    return rc;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20006f2c 	.word	0x20006f2c
 8006364:	20006f28 	.word	0x20006f28

08006368 <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	@ 0x28
 800636c:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 800636e:	2101      	movs	r1, #1
 8006370:	482d      	ldr	r0, [pc, #180]	@ (8006428 <eeprom_clear_scanning_data+0xc0>)
 8006372:	f7fe f8d7 	bl	8004524 <send_debug_msg>

	 uint8_t clear_page_sequence[PAGE_SIZE];

	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 8006376:	2300      	movs	r3, #0
 8006378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800637c:	e00b      	b.n	8006396 <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 800637e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006382:	3328      	adds	r3, #40	@ 0x28
 8006384:	443b      	add	r3, r7
 8006386:	22ff      	movs	r2, #255	@ 0xff
 8006388:	f803 2c24 	strb.w	r2, [r3, #-36]
	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 800638c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006390:	3301      	adds	r3, #1
 8006392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800639a:	2b1f      	cmp	r3, #31
 800639c:	d9ef      	bls.n	800637e <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 800639e:	1d3b      	adds	r3, r7, #4
 80063a0:	2220      	movs	r2, #32
 80063a2:	4619      	mov	r1, r3
 80063a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80063a8:	f7ff ffb6 	bl	8006318 <eeprom_write>
	if(PAGE_SIZE == 32)
	{
		eeprom_write(PAGE_SIZE * (SCAN_RELATED_DATA_PAGE + 1), &clear_page_sequence, sizeof(clear_page_sequence));
 80063ac:	1d3b      	adds	r3, r7, #4
 80063ae:	2220      	movs	r2, #32
 80063b0:	4619      	mov	r1, r3
 80063b2:	f44f 7090 	mov.w	r0, #288	@ 0x120
 80063b6:	f7ff ffaf 	bl	8006318 <eeprom_write>
	}

	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80063ba:	2300      	movs	r3, #0
 80063bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063c0:	e00e      	b.n	80063e0 <eeprom_clear_scanning_data+0x78>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80063c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063c6:	330a      	adds	r3, #10
 80063c8:	015b      	lsls	r3, r3, #5
 80063ca:	4618      	mov	r0, r3
 80063cc:	1d3b      	adds	r3, r7, #4
 80063ce:	2220      	movs	r2, #32
 80063d0:	4619      	mov	r1, r3
 80063d2:	f7ff ffa1 	bl	8006318 <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80063d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063da:	3301      	adds	r3, #1
 80063dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063e4:	2b09      	cmp	r3, #9
 80063e6:	d9ec      	bls.n	80063c2 <eeprom_clear_scanning_data+0x5a>
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
		}
	}
	if(PAGE_SIZE == 32)
	{
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 80063e8:	2300      	movs	r3, #0
 80063ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80063ee:	e00e      	b.n	800640e <eeprom_clear_scanning_data+0xa6>
		{
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80063f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063f4:	331e      	adds	r3, #30
 80063f6:	015b      	lsls	r3, r3, #5
 80063f8:	4618      	mov	r0, r3
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	2220      	movs	r2, #32
 80063fe:	4619      	mov	r1, r3
 8006400:	f7ff ff8a 	bl	8006318 <eeprom_write>
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 8006404:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006408:	3301      	adds	r3, #1
 800640a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800640e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006412:	2bc7      	cmp	r3, #199	@ 0xc7
 8006414:	d9ec      	bls.n	80063f0 <eeprom_clear_scanning_data+0x88>
		}
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 8006416:	2101      	movs	r1, #1
 8006418:	4804      	ldr	r0, [pc, #16]	@ (800642c <eeprom_clear_scanning_data+0xc4>)
 800641a:	f7fe f883 	bl	8004524 <send_debug_msg>
}
 800641e:	bf00      	nop
 8006420:	3728      	adds	r7, #40	@ 0x28
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	0800fbb8 	.word	0x0800fbb8
 800642c:	0800fbd8 	.word	0x0800fbd8

08006430 <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b096      	sub	sp, #88	@ 0x58
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	461a      	mov	r2, r3
 800643c:	460b      	mov	r3, r1
 800643e:	72fb      	strb	r3, [r7, #11]
 8006440:	4613      	mov	r3, r2
 8006442:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 8006444:	2101      	movs	r1, #1
 8006446:	4835      	ldr	r0, [pc, #212]	@ (800651c <eeprom_save_scanning_data+0xec>)
 8006448:	f7fe f86c 	bl	8004524 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 800644c:	f107 030a 	add.w	r3, r7, #10
 8006450:	2201      	movs	r2, #1
 8006452:	4619      	mov	r1, r3
 8006454:	f240 1005 	movw	r0, #261	@ 0x105
 8006458:	f7ff ff5e 	bl	8006318 <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 800645c:	f107 030b 	add.w	r3, r7, #11
 8006460:	2201      	movs	r2, #1
 8006462:	4619      	mov	r1, r3
 8006464:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8006468:	f7ff ff56 	bl	8006318 <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 800646c:	2300      	movs	r3, #0
 800646e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8006472:	e012      	b.n	800649a <eeprom_save_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 8006474:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8006478:	330a      	adds	r3, #10
 800647a:	015b      	lsls	r3, r3, #5
 800647c:	4618      	mov	r0, r3
 800647e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8006482:	015b      	lsls	r3, r3, #5
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4413      	add	r3, r2
 8006488:	2220      	movs	r2, #32
 800648a:	4619      	mov	r1, r3
 800648c:	f7ff ff44 	bl	8006318 <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8006490:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8006494:	3301      	adds	r3, #1
 8006496:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800649a:	7abb      	ldrb	r3, [r7, #10]
 800649c:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3e7      	bcc.n	8006474 <eeprom_save_scanning_data+0x44>
	}
	if(PAGE_SIZE == 32)
	{
		uint8_t temp [64];

		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80064aa:	e029      	b.n	8006500 <eeprom_save_scanning_data+0xd0>
		{
			memcpy(&temp, &_services_list[services_index], sizeof(dab_service_t));
 80064ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064b0:	2234      	movs	r2, #52	@ 0x34
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	18d1      	adds	r1, r2, r3
 80064ba:	f107 0314 	add.w	r3, r7, #20
 80064be:	2234      	movs	r2, #52	@ 0x34
 80064c0:	4618      	mov	r0, r3
 80064c2:	f007 ff65 	bl	800e390 <memcpy>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2, &temp[0], 32);
 80064c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064ca:	330f      	adds	r3, #15
 80064cc:	019b      	lsls	r3, r3, #6
 80064ce:	4618      	mov	r0, r3
 80064d0:	f107 0314 	add.w	r3, r7, #20
 80064d4:	2220      	movs	r2, #32
 80064d6:	4619      	mov	r1, r3
 80064d8:	f7ff ff1e 	bl	8006318 <eeprom_write>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 80064dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064e0:	330f      	adds	r3, #15
 80064e2:	019b      	lsls	r3, r3, #6
 80064e4:	3320      	adds	r3, #32
 80064e6:	4618      	mov	r0, r3
 80064e8:	f107 0314 	add.w	r3, r7, #20
 80064ec:	3320      	adds	r3, #32
 80064ee:	2214      	movs	r2, #20
 80064f0:	4619      	mov	r1, r3
 80064f2:	f7ff ff11 	bl	8006318 <eeprom_write>
		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 80064f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064fa:	3301      	adds	r3, #1
 80064fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8006500:	7afb      	ldrb	r3, [r7, #11]
 8006502:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006506:	429a      	cmp	r2, r3
 8006508:	d3d0      	bcc.n	80064ac <eeprom_save_scanning_data+0x7c>
		}
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 800650a:	2101      	movs	r1, #1
 800650c:	4804      	ldr	r0, [pc, #16]	@ (8006520 <eeprom_save_scanning_data+0xf0>)
 800650e:	f7fe f809 	bl	8004524 <send_debug_msg>
}
 8006512:	bf00      	nop
 8006514:	3758      	adds	r7, #88	@ 0x58
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	0800fbe4 	.word	0x0800fbe4
 8006520:	0800fc00 	.word	0x0800fc00

08006524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08c      	sub	sp, #48	@ 0x30
 8006528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800652a:	f107 031c 	add.w	r3, r7, #28
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	605a      	str	r2, [r3, #4]
 8006534:	609a      	str	r2, [r3, #8]
 8006536:	60da      	str	r2, [r3, #12]
 8006538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	4b6c      	ldr	r3, [pc, #432]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 8006540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006542:	4a6b      	ldr	r2, [pc, #428]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 8006544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006548:	6313      	str	r3, [r2, #48]	@ 0x30
 800654a:	4b69      	ldr	r3, [pc, #420]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	4b65      	ldr	r3, [pc, #404]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	4a64      	ldr	r2, [pc, #400]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 8006560:	f043 0301 	orr.w	r3, r3, #1
 8006564:	6313      	str	r3, [r2, #48]	@ 0x30
 8006566:	4b62      	ldr	r3, [pc, #392]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 8006568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	4b5e      	ldr	r3, [pc, #376]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 8006578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657a:	4a5d      	ldr	r2, [pc, #372]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 800657c:	f043 0304 	orr.w	r3, r3, #4
 8006580:	6313      	str	r3, [r2, #48]	@ 0x30
 8006582:	4b5b      	ldr	r3, [pc, #364]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 8006584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	4b57      	ldr	r3, [pc, #348]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006596:	4a56      	ldr	r2, [pc, #344]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	6313      	str	r3, [r2, #48]	@ 0x30
 800659e:	4b54      	ldr	r3, [pc, #336]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 80065a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	4b50      	ldr	r3, [pc, #320]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	4a4f      	ldr	r2, [pc, #316]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 80065b4:	f043 0310 	orr.w	r3, r3, #16
 80065b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80065ba:	4b4d      	ldr	r3, [pc, #308]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 80065bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	4b49      	ldr	r3, [pc, #292]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ce:	4a48      	ldr	r2, [pc, #288]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 80065d0:	f043 0308 	orr.w	r3, r3, #8
 80065d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80065d6:	4b46      	ldr	r3, [pc, #280]	@ (80066f0 <MX_GPIO_Init+0x1cc>)
 80065d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80065e2:	2200      	movs	r2, #0
 80065e4:	2130      	movs	r1, #48	@ 0x30
 80065e6:	4843      	ldr	r0, [pc, #268]	@ (80066f4 <MX_GPIO_Init+0x1d0>)
 80065e8:	f002 fc94 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80065ec:	2200      	movs	r2, #0
 80065ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80065f2:	4841      	ldr	r0, [pc, #260]	@ (80066f8 <MX_GPIO_Init+0x1d4>)
 80065f4:	f002 fc8e 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80065f8:	2200      	movs	r2, #0
 80065fa:	f24f 7180 	movw	r1, #63360	@ 0xf780
 80065fe:	483f      	ldr	r0, [pc, #252]	@ (80066fc <MX_GPIO_Init+0x1d8>)
 8006600:	f002 fc88 	bl	8008f14 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8006604:	2200      	movs	r2, #0
 8006606:	2128      	movs	r1, #40	@ 0x28
 8006608:	483d      	ldr	r0, [pc, #244]	@ (8006700 <MX_GPIO_Init+0x1dc>)
 800660a:	f002 fc83 	bl	8008f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 800660e:	2310      	movs	r3, #16
 8006610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006612:	2300      	movs	r3, #0
 8006614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 800661a:	f107 031c 	add.w	r3, r7, #28
 800661e:	4619      	mov	r1, r3
 8006620:	4838      	ldr	r0, [pc, #224]	@ (8006704 <MX_GPIO_Init+0x1e0>)
 8006622:	f002 fac3 	bl	8008bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8006626:	2330      	movs	r3, #48	@ 0x30
 8006628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800662a:	2301      	movs	r3, #1
 800662c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662e:	2300      	movs	r3, #0
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006632:	2302      	movs	r3, #2
 8006634:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006636:	f107 031c 	add.w	r3, r7, #28
 800663a:	4619      	mov	r1, r3
 800663c:	482d      	ldr	r0, [pc, #180]	@ (80066f4 <MX_GPIO_Init+0x1d0>)
 800663e:	f002 fab5 	bl	8008bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8006642:	2311      	movs	r3, #17
 8006644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006646:	2300      	movs	r3, #0
 8006648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664a:	2300      	movs	r3, #0
 800664c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664e:	f107 031c 	add.w	r3, r7, #28
 8006652:	4619      	mov	r1, r3
 8006654:	482a      	ldr	r0, [pc, #168]	@ (8006700 <MX_GPIO_Init+0x1dc>)
 8006656:	f002 faa9 	bl	8008bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 800665a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800665e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006660:	2301      	movs	r3, #1
 8006662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006664:	2300      	movs	r3, #0
 8006666:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006668:	2300      	movs	r3, #0
 800666a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 800666c:	f107 031c 	add.w	r3, r7, #28
 8006670:	4619      	mov	r1, r3
 8006672:	4821      	ldr	r0, [pc, #132]	@ (80066f8 <MX_GPIO_Init+0x1d4>)
 8006674:	f002 fa9a 	bl	8008bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8006678:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800667c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800667e:	2301      	movs	r3, #1
 8006680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006682:	2300      	movs	r3, #0
 8006684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006686:	2302      	movs	r3, #2
 8006688:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800668a:	f107 031c 	add.w	r3, r7, #28
 800668e:	4619      	mov	r1, r3
 8006690:	481a      	ldr	r0, [pc, #104]	@ (80066fc <MX_GPIO_Init+0x1d8>)
 8006692:	f002 fa8b 	bl	8008bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8006696:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800669a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800669c:	2301      	movs	r3, #1
 800669e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066a4:	2300      	movs	r3, #0
 80066a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066a8:	f107 031c 	add.w	r3, r7, #28
 80066ac:	4619      	mov	r1, r3
 80066ae:	4813      	ldr	r0, [pc, #76]	@ (80066fc <MX_GPIO_Init+0x1d8>)
 80066b0:	f002 fa7c 	bl	8008bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80066b4:	2340      	movs	r3, #64	@ 0x40
 80066b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066b8:	2300      	movs	r3, #0
 80066ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80066c0:	f107 031c 	add.w	r3, r7, #28
 80066c4:	4619      	mov	r1, r3
 80066c6:	480d      	ldr	r0, [pc, #52]	@ (80066fc <MX_GPIO_Init+0x1d8>)
 80066c8:	f002 fa70 	bl	8008bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 80066cc:	2328      	movs	r3, #40	@ 0x28
 80066ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066d0:	2301      	movs	r3, #1
 80066d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066d8:	2302      	movs	r3, #2
 80066da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066dc:	f107 031c 	add.w	r3, r7, #28
 80066e0:	4619      	mov	r1, r3
 80066e2:	4807      	ldr	r0, [pc, #28]	@ (8006700 <MX_GPIO_Init+0x1dc>)
 80066e4:	f002 fa62 	bl	8008bac <HAL_GPIO_Init>

}
 80066e8:	bf00      	nop
 80066ea:	3730      	adds	r7, #48	@ 0x30
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40023800 	.word	0x40023800
 80066f4:	40020800 	.word	0x40020800
 80066f8:	40021000 	.word	0x40021000
 80066fc:	40020c00 	.word	0x40020c00
 8006700:	40020400 	.word	0x40020400
 8006704:	40020000 	.word	0x40020000

08006708 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800670c:	4b12      	ldr	r3, [pc, #72]	@ (8006758 <MX_I2C1_Init+0x50>)
 800670e:	4a13      	ldr	r2, [pc, #76]	@ (800675c <MX_I2C1_Init+0x54>)
 8006710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006712:	4b11      	ldr	r3, [pc, #68]	@ (8006758 <MX_I2C1_Init+0x50>)
 8006714:	4a12      	ldr	r2, [pc, #72]	@ (8006760 <MX_I2C1_Init+0x58>)
 8006716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006718:	4b0f      	ldr	r3, [pc, #60]	@ (8006758 <MX_I2C1_Init+0x50>)
 800671a:	2200      	movs	r2, #0
 800671c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800671e:	4b0e      	ldr	r3, [pc, #56]	@ (8006758 <MX_I2C1_Init+0x50>)
 8006720:	2200      	movs	r2, #0
 8006722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006724:	4b0c      	ldr	r3, [pc, #48]	@ (8006758 <MX_I2C1_Init+0x50>)
 8006726:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800672a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800672c:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <MX_I2C1_Init+0x50>)
 800672e:	2200      	movs	r2, #0
 8006730:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006732:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <MX_I2C1_Init+0x50>)
 8006734:	2200      	movs	r2, #0
 8006736:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006738:	4b07      	ldr	r3, [pc, #28]	@ (8006758 <MX_I2C1_Init+0x50>)
 800673a:	2200      	movs	r2, #0
 800673c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800673e:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <MX_I2C1_Init+0x50>)
 8006740:	2200      	movs	r2, #0
 8006742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006744:	4804      	ldr	r0, [pc, #16]	@ (8006758 <MX_I2C1_Init+0x50>)
 8006746:	f002 fbff 	bl	8008f48 <HAL_I2C_Init>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006750:	f000 f9e4 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006754:	bf00      	nop
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20006f2c 	.word	0x20006f2c
 800675c:	40005400 	.word	0x40005400
 8006760:	000186a0 	.word	0x000186a0

08006764 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006768:	4b12      	ldr	r3, [pc, #72]	@ (80067b4 <MX_I2C3_Init+0x50>)
 800676a:	4a13      	ldr	r2, [pc, #76]	@ (80067b8 <MX_I2C3_Init+0x54>)
 800676c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800676e:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <MX_I2C3_Init+0x50>)
 8006770:	4a12      	ldr	r2, [pc, #72]	@ (80067bc <MX_I2C3_Init+0x58>)
 8006772:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006774:	4b0f      	ldr	r3, [pc, #60]	@ (80067b4 <MX_I2C3_Init+0x50>)
 8006776:	2200      	movs	r2, #0
 8006778:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800677a:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <MX_I2C3_Init+0x50>)
 800677c:	2200      	movs	r2, #0
 800677e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006780:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <MX_I2C3_Init+0x50>)
 8006782:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006786:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006788:	4b0a      	ldr	r3, [pc, #40]	@ (80067b4 <MX_I2C3_Init+0x50>)
 800678a:	2200      	movs	r2, #0
 800678c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800678e:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <MX_I2C3_Init+0x50>)
 8006790:	2200      	movs	r2, #0
 8006792:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006794:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <MX_I2C3_Init+0x50>)
 8006796:	2200      	movs	r2, #0
 8006798:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800679a:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <MX_I2C3_Init+0x50>)
 800679c:	2200      	movs	r2, #0
 800679e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80067a0:	4804      	ldr	r0, [pc, #16]	@ (80067b4 <MX_I2C3_Init+0x50>)
 80067a2:	f002 fbd1 	bl	8008f48 <HAL_I2C_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80067ac:	f000 f9b6 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80067b0:	bf00      	nop
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20006f80 	.word	0x20006f80
 80067b8:	40005c00 	.word	0x40005c00
 80067bc:	000186a0 	.word	0x000186a0

080067c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08c      	sub	sp, #48	@ 0x30
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067c8:	f107 031c 	add.w	r3, r7, #28
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	605a      	str	r2, [r3, #4]
 80067d2:	609a      	str	r2, [r3, #8]
 80067d4:	60da      	str	r2, [r3, #12]
 80067d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006908 <HAL_I2C_MspInit+0x148>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d12c      	bne.n	800683c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	4b49      	ldr	r3, [pc, #292]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	4a48      	ldr	r2, [pc, #288]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 80067ec:	f043 0302 	orr.w	r3, r3, #2
 80067f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80067f2:	4b46      	ldr	r3, [pc, #280]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80067fe:	23c0      	movs	r3, #192	@ 0xc0
 8006800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006802:	2312      	movs	r3, #18
 8006804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800680a:	2303      	movs	r3, #3
 800680c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800680e:	2304      	movs	r3, #4
 8006810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006812:	f107 031c 	add.w	r3, r7, #28
 8006816:	4619      	mov	r1, r3
 8006818:	483d      	ldr	r0, [pc, #244]	@ (8006910 <HAL_I2C_MspInit+0x150>)
 800681a:	f002 f9c7 	bl	8008bac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	4b3a      	ldr	r3, [pc, #232]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	4a39      	ldr	r2, [pc, #228]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 8006828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800682c:	6413      	str	r3, [r2, #64]	@ 0x40
 800682e:	4b37      	ldr	r3, [pc, #220]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800683a:	e060      	b.n	80068fe <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a34      	ldr	r2, [pc, #208]	@ (8006914 <HAL_I2C_MspInit+0x154>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d15b      	bne.n	80068fe <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	4b30      	ldr	r3, [pc, #192]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 800684c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684e:	4a2f      	ldr	r2, [pc, #188]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 8006850:	f043 0304 	orr.w	r3, r3, #4
 8006854:	6313      	str	r3, [r2, #48]	@ 0x30
 8006856:	4b2d      	ldr	r3, [pc, #180]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	4b29      	ldr	r3, [pc, #164]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 8006868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686a:	4a28      	ldr	r2, [pc, #160]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6313      	str	r3, [r2, #48]	@ 0x30
 8006872:	4b26      	ldr	r3, [pc, #152]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 800687e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006884:	2312      	movs	r3, #18
 8006886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006888:	2300      	movs	r3, #0
 800688a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800688c:	2303      	movs	r3, #3
 800688e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006890:	2304      	movs	r3, #4
 8006892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8006894:	f107 031c 	add.w	r3, r7, #28
 8006898:	4619      	mov	r1, r3
 800689a:	481f      	ldr	r0, [pc, #124]	@ (8006918 <HAL_I2C_MspInit+0x158>)
 800689c:	f002 f986 	bl	8008bac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 80068a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80068a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068a6:	2312      	movs	r3, #18
 80068a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068ae:	2303      	movs	r3, #3
 80068b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80068b2:	2304      	movs	r3, #4
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80068b6:	f107 031c 	add.w	r3, r7, #28
 80068ba:	4619      	mov	r1, r3
 80068bc:	4817      	ldr	r0, [pc, #92]	@ (800691c <HAL_I2C_MspInit+0x15c>)
 80068be:	f002 f975 	bl	8008bac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	4b11      	ldr	r3, [pc, #68]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ca:	4a10      	ldr	r2, [pc, #64]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 80068cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80068d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068d2:	4b0e      	ldr	r3, [pc, #56]	@ (800690c <HAL_I2C_MspInit+0x14c>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80068de:	2200      	movs	r2, #0
 80068e0:	2100      	movs	r1, #0
 80068e2:	2048      	movs	r0, #72	@ 0x48
 80068e4:	f001 fe11 	bl	800850a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80068e8:	2048      	movs	r0, #72	@ 0x48
 80068ea:	f001 fe2a 	bl	8008542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80068ee:	2200      	movs	r2, #0
 80068f0:	2100      	movs	r1, #0
 80068f2:	2049      	movs	r0, #73	@ 0x49
 80068f4:	f001 fe09 	bl	800850a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80068f8:	2049      	movs	r0, #73	@ 0x49
 80068fa:	f001 fe22 	bl	8008542 <HAL_NVIC_EnableIRQ>
}
 80068fe:	bf00      	nop
 8006900:	3730      	adds	r7, #48	@ 0x30
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40005400 	.word	0x40005400
 800690c:	40023800 	.word	0x40023800
 8006910:	40020400 	.word	0x40020400
 8006914:	40005c00 	.word	0x40005c00
 8006918:	40020800 	.word	0x40020800
 800691c:	40020000 	.word	0x40020000

08006920 <LEDs_Red_On>:

uint8_t led_number = 1;


void LEDs_Red_On()
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8006924:	2201      	movs	r2, #1
 8006926:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800692a:	4802      	ldr	r0, [pc, #8]	@ (8006934 <LEDs_Red_On+0x14>)
 800692c:	f002 faf2 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8006930:	bf00      	nop
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40020c00 	.word	0x40020c00

08006938 <LEDs_Red_Off>:

void LEDs_Red_Off()
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800693c:	2200      	movs	r2, #0
 800693e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006942:	4802      	ldr	r0, [pc, #8]	@ (800694c <LEDs_Red_Off+0x14>)
 8006944:	f002 fae6 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8006948:	bf00      	nop
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40020c00 	.word	0x40020c00

08006950 <LEDs_Green_On>:
{
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
}

void LEDs_Green_On()
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8006954:	2201      	movs	r2, #1
 8006956:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800695a:	4802      	ldr	r0, [pc, #8]	@ (8006964 <LEDs_Green_On+0x14>)
 800695c:	f002 fada 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8006960:	bf00      	nop
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40020c00 	.word	0x40020c00

08006968 <LEDs_Green_Off>:

void LEDs_Green_Off()
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800696c:	2200      	movs	r2, #0
 800696e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006972:	4802      	ldr	r0, [pc, #8]	@ (800697c <LEDs_Green_Off+0x14>)
 8006974:	f002 face 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8006978:	bf00      	nop
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40020c00 	.word	0x40020c00

08006980 <LEDs_Blue_On>:
{
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}

void LEDs_Blue_On()
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8006984:	2201      	movs	r2, #1
 8006986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800698a:	4802      	ldr	r0, [pc, #8]	@ (8006994 <LEDs_Blue_On+0x14>)
 800698c:	f002 fac2 	bl	8008f14 <HAL_GPIO_WritePin>
}
 8006990:	bf00      	nop
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40020c00 	.word	0x40020c00

08006998 <LEDs_Blue_Off>:

void LEDs_Blue_Off()
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800699c:	2200      	movs	r2, #0
 800699e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069a2:	4802      	ldr	r0, [pc, #8]	@ (80069ac <LEDs_Blue_Off+0x14>)
 80069a4:	f002 fab6 	bl	8008f14 <HAL_GPIO_WritePin>
}
 80069a8:	bf00      	nop
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40020c00 	.word	0x40020c00

080069b0 <LEDs_Orange_On>:
void LEDs_Blue_Toggle()
{
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
}
void LEDs_Orange_On()
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1);
 80069b4:	2201      	movs	r2, #1
 80069b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80069ba:	4802      	ldr	r0, [pc, #8]	@ (80069c4 <LEDs_Orange_On+0x14>)
 80069bc:	f002 faaa 	bl	8008f14 <HAL_GPIO_WritePin>
}
 80069c0:	bf00      	nop
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40020c00 	.word	0x40020c00

080069c8 <LEDs_Orange_Off>:

void LEDs_Orange_Off()
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0);
 80069cc:	2200      	movs	r2, #0
 80069ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80069d2:	4802      	ldr	r0, [pc, #8]	@ (80069dc <LEDs_Orange_Off+0x14>)
 80069d4:	f002 fa9e 	bl	8008f14 <HAL_GPIO_WritePin>
}
 80069d8:	bf00      	nop
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40020c00 	.word	0x40020c00

080069e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069e4:	f001 fc20 	bl	8008228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069e8:	f000 f82e 	bl	8006a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069ec:	f7ff fd9a 	bl	8006524 <MX_GPIO_Init>
  MX_DMA_Init();
 80069f0:	f7ff fc44 	bl	800627c <MX_DMA_Init>
  MX_I2C1_Init();
 80069f4:	f7ff fe88 	bl	8006708 <MX_I2C1_Init>
  MX_I2C3_Init();
 80069f8:	f7ff feb4 	bl	8006764 <MX_I2C3_Init>
  MX_SPI1_Init();
 80069fc:	f000 f894 	bl	8006b28 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006a00:	f000 f8c8 	bl	8006b94 <MX_SPI2_Init>
  MX_TIM3_Init();
 8006a04:	f000 ff9a 	bl	800793c <MX_TIM3_Init>
  MX_UART5_Init();
 8006a08:	f001 faf0 	bl	8007fec <MX_UART5_Init>
  MX_USART3_UART_Init();
 8006a0c:	f001 fb18 	bl	8008040 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8006a10:	f000 ffee 	bl	80079f0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8006a14:	f001 f810 	bl	8007a38 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8006a18:	2101      	movs	r1, #1
 8006a1a:	4809      	ldr	r0, [pc, #36]	@ (8006a40 <main+0x60>)
 8006a1c:	f7fd fd82 	bl	8004524 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8006a20:	4808      	ldr	r0, [pc, #32]	@ (8006a44 <main+0x64>)
 8006a22:	f006 fad9 	bl	800cfd8 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8006a26:	f7f9 fd77 	bl	8000518 <ILI9341_Init>
  Display_booting_screen();
 8006a2a:	f7fd fdb4 	bl	8004596 <Display_booting_screen>

  //eeprom_show();

  //HAL_Delay(50000);

  Si468x_dab_init();
 8006a2e:	f7fa fb7b 	bl	8001128 <Si468x_dab_init>
  restore_from_eeprom();
 8006a32:	f7fc ffbf 	bl	80039b4 <restore_from_eeprom>
  Alarming_Init();
 8006a36:	f7fd fb5f 	bl	80040f8 <Alarming_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8006a3a:	f000 f999 	bl	8006d70 <state_machine>
 8006a3e:	e7fc      	b.n	8006a3a <main+0x5a>
 8006a40:	0800ff60 	.word	0x0800ff60
 8006a44:	200071d8 	.word	0x200071d8

08006a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b094      	sub	sp, #80	@ 0x50
 8006a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a4e:	f107 0320 	add.w	r3, r7, #32
 8006a52:	2230      	movs	r2, #48	@ 0x30
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f007 fc6e 	bl	800e338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a5c:	f107 030c 	add.w	r3, r7, #12
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	609a      	str	r2, [r3, #8]
 8006a68:	60da      	str	r2, [r3, #12]
 8006a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	4b28      	ldr	r3, [pc, #160]	@ (8006b14 <SystemClock_Config+0xcc>)
 8006a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a74:	4a27      	ldr	r2, [pc, #156]	@ (8006b14 <SystemClock_Config+0xcc>)
 8006a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a7c:	4b25      	ldr	r3, [pc, #148]	@ (8006b14 <SystemClock_Config+0xcc>)
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a88:	2300      	movs	r3, #0
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	4b22      	ldr	r3, [pc, #136]	@ (8006b18 <SystemClock_Config+0xd0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a21      	ldr	r2, [pc, #132]	@ (8006b18 <SystemClock_Config+0xd0>)
 8006a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	4b1f      	ldr	r3, [pc, #124]	@ (8006b18 <SystemClock_Config+0xd0>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006aa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ab2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006ab8:	2304      	movs	r3, #4
 8006aba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8006abc:	23f0      	movs	r3, #240	@ 0xf0
 8006abe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ac8:	f107 0320 	add.w	r3, r7, #32
 8006acc:	4618      	mov	r0, r3
 8006ace:	f004 fed5 	bl	800b87c <HAL_RCC_OscConfig>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006ad8:	f000 f820 	bl	8006b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006adc:	230f      	movs	r3, #15
 8006ade:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006ae8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	2105      	movs	r1, #5
 8006afa:	4618      	mov	r0, r3
 8006afc:	f005 f936 	bl	800bd6c <HAL_RCC_ClockConfig>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006b06:	f000 f809 	bl	8006b1c <Error_Handler>
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3750      	adds	r7, #80	@ 0x50
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40023800 	.word	0x40023800
 8006b18:	40007000 	.word	0x40007000

08006b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006b20:	b672      	cpsid	i
}
 8006b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006b24:	bf00      	nop
 8006b26:	e7fd      	b.n	8006b24 <Error_Handler+0x8>

08006b28 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006b2c:	4b17      	ldr	r3, [pc, #92]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b2e:	4a18      	ldr	r2, [pc, #96]	@ (8006b90 <MX_SPI1_Init+0x68>)
 8006b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006b32:	4b16      	ldr	r3, [pc, #88]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006b3a:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b40:	4b12      	ldr	r3, [pc, #72]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b46:	4b11      	ldr	r3, [pc, #68]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006b52:	4b0e      	ldr	r3, [pc, #56]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b60:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b66:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b6c:	4b07      	ldr	r3, [pc, #28]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006b72:	4b06      	ldr	r3, [pc, #24]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b74:	220a      	movs	r2, #10
 8006b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006b78:	4804      	ldr	r0, [pc, #16]	@ (8006b8c <MX_SPI1_Init+0x64>)
 8006b7a:	f005 fb17 	bl	800c1ac <HAL_SPI_Init>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006b84:	f7ff ffca 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006b88:	bf00      	nop
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20006fd4 	.word	0x20006fd4
 8006b90:	40013000 	.word	0x40013000

08006b94 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006b98:	4b17      	ldr	r3, [pc, #92]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006b9a:	4a18      	ldr	r2, [pc, #96]	@ (8006bfc <MX_SPI2_Init+0x68>)
 8006b9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006b9e:	4b16      	ldr	r3, [pc, #88]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006ba0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006ba4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006ba6:	4b14      	ldr	r3, [pc, #80]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006bac:	4b12      	ldr	r3, [pc, #72]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bb2:	4b11      	ldr	r3, [pc, #68]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006bd2:	4b09      	ldr	r3, [pc, #36]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd8:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006bde:	4b06      	ldr	r3, [pc, #24]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006be0:	220a      	movs	r2, #10
 8006be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006be4:	4804      	ldr	r0, [pc, #16]	@ (8006bf8 <MX_SPI2_Init+0x64>)
 8006be6:	f005 fae1 	bl	800c1ac <HAL_SPI_Init>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006bf0:	f7ff ff94 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006bf4:	bf00      	nop
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	2000702c 	.word	0x2000702c
 8006bfc:	40003800 	.word	0x40003800

08006c00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	@ 0x30
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c08:	f107 031c 	add.w	r3, r7, #28
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a4d      	ldr	r2, [pc, #308]	@ (8006d54 <HAL_SPI_MspInit+0x154>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d12c      	bne.n	8006c7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	4b4c      	ldr	r3, [pc, #304]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c32:	4b49      	ldr	r3, [pc, #292]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c3a:	61bb      	str	r3, [r7, #24]
 8006c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	4b45      	ldr	r3, [pc, #276]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c46:	4a44      	ldr	r2, [pc, #272]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c4e:	4b42      	ldr	r3, [pc, #264]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8006c5a:	23e0      	movs	r3, #224	@ 0xe0
 8006c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c66:	2303      	movs	r3, #3
 8006c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006c6a:	2305      	movs	r3, #5
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c6e:	f107 031c 	add.w	r3, r7, #28
 8006c72:	4619      	mov	r1, r3
 8006c74:	4839      	ldr	r0, [pc, #228]	@ (8006d5c <HAL_SPI_MspInit+0x15c>)
 8006c76:	f001 ff99 	bl	8008bac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006c7a:	e066      	b.n	8006d4a <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a37      	ldr	r2, [pc, #220]	@ (8006d60 <HAL_SPI_MspInit+0x160>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d161      	bne.n	8006d4a <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c86:	2300      	movs	r3, #0
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	4b33      	ldr	r3, [pc, #204]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8e:	4a32      	ldr	r2, [pc, #200]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c96:	4b30      	ldr	r3, [pc, #192]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006caa:	4a2b      	ldr	r2, [pc, #172]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006cac:	f043 0302 	orr.w	r3, r3, #2
 8006cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cb2:	4b29      	ldr	r3, [pc, #164]	@ (8006d58 <HAL_SPI_MspInit+0x158>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8006cbe:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8006cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006cd0:	2305      	movs	r3, #5
 8006cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cd4:	f107 031c 	add.w	r3, r7, #28
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4822      	ldr	r0, [pc, #136]	@ (8006d64 <HAL_SPI_MspInit+0x164>)
 8006cdc:	f001 ff66 	bl	8008bac <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006ce0:	4b21      	ldr	r3, [pc, #132]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006ce2:	4a22      	ldr	r2, [pc, #136]	@ (8006d6c <HAL_SPI_MspInit+0x16c>)
 8006ce4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006ce6:	4b20      	ldr	r3, [pc, #128]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cec:	4b1e      	ldr	r3, [pc, #120]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006cee:	2240      	movs	r2, #64	@ 0x40
 8006cf0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cfe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d00:	4b19      	ldr	r3, [pc, #100]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d06:	4b18      	ldr	r3, [pc, #96]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006d0c:	4b16      	ldr	r3, [pc, #88]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d12:	4b15      	ldr	r3, [pc, #84]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d18:	4b13      	ldr	r3, [pc, #76]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006d1e:	4812      	ldr	r0, [pc, #72]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006d20:	f001 fc2a 	bl	8008578 <HAL_DMA_Init>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8006d2a:	f7ff fef7 	bl	8006b1c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a0d      	ldr	r2, [pc, #52]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006d32:	649a      	str	r2, [r3, #72]	@ 0x48
 8006d34:	4a0c      	ldr	r2, [pc, #48]	@ (8006d68 <HAL_SPI_MspInit+0x168>)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	2024      	movs	r0, #36	@ 0x24
 8006d40:	f001 fbe3 	bl	800850a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006d44:	2024      	movs	r0, #36	@ 0x24
 8006d46:	f001 fbfc 	bl	8008542 <HAL_NVIC_EnableIRQ>
}
 8006d4a:	bf00      	nop
 8006d4c:	3730      	adds	r7, #48	@ 0x30
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40013000 	.word	0x40013000
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40020000 	.word	0x40020000
 8006d60:	40003800 	.word	0x40003800
 8006d64:	40020400 	.word	0x40020400
 8006d68:	20007084 	.word	0x20007084
 8006d6c:	40026070 	.word	0x40026070

08006d70 <state_machine>:
uint16_t audio_info_timeout;

//alarming_status_t alarming_status_sm; //alarming status to be used by state machine

void state_machine()
{
 8006d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d72:	b097      	sub	sp, #92	@ 0x5c
 8006d74:	af06      	add	r7, sp, #24
	if(state_change_flag == state_change_completed)
 8006d76:	4b76      	ldr	r3, [pc, #472]	@ (8006f50 <state_machine+0x1e0>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d105      	bne.n	8006d8a <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 8006d7e:	f000 ff21 	bl	8007bc4 <Touch_read>
 8006d82:	4603      	mov	r3, r0
 8006d84:	4a73      	ldr	r2, [pc, #460]	@ (8006f54 <state_machine+0x1e4>)
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e005      	b.n	8006d96 <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 8006d8a:	4b72      	ldr	r3, [pc, #456]	@ (8006f54 <state_machine+0x1e4>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 8006d90:	4b70      	ldr	r3, [pc, #448]	@ (8006f54 <state_machine+0x1e4>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 8006d96:	4c70      	ldr	r4, [pc, #448]	@ (8006f58 <state_machine+0x1e8>)
 8006d98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fd f98f 	bl	80040c0 <get_dab_management>
 8006da2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 8006dac:	f7fd f99a 	bl	80040e4 <get_dls_label>
 8006db0:	4603      	mov	r3, r0
 8006db2:	4a6a      	ldr	r2, [pc, #424]	@ (8006f5c <state_machine+0x1ec>)
 8006db4:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 8006db6:	f7fc fcd3 	bl	8003760 <Si468x_dab_get_time>

	//manage alarming functionality
	Alarming_Manage();
 8006dba:	f7fd f9a3 	bl	8004104 <Alarming_Manage>

	switch(system_state)
 8006dbe:	4b68      	ldr	r3, [pc, #416]	@ (8006f60 <state_machine+0x1f0>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b05      	cmp	r3, #5
 8006dc4:	f200 84c3 	bhi.w	800774e <state_machine+0x9de>
 8006dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd0 <state_machine+0x60>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006de9 	.word	0x08006de9
 8006dd4:	08006f7d 	.word	0x08006f7d
 8006dd8:	080073e5 	.word	0x080073e5
 8006ddc:	08007315 	.word	0x08007315
 8006de0:	08007459 	.word	0x08007459
 8006de4:	0800764d 	.word	0x0800764d
	{
	case main_screen:

		if(state_change_flag == state_change_started_not_completed)
 8006de8:	4b59      	ldr	r3, [pc, #356]	@ (8006f50 <state_machine+0x1e0>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d159      	bne.n	8006ea4 <state_machine+0x134>
		{
			dab_management_to_display = get_dab_management();
 8006df0:	4c59      	ldr	r4, [pc, #356]	@ (8006f58 <state_machine+0x1e8>)
 8006df2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fd f962 	bl	80040c0 <get_dab_management>
 8006dfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(!dab_management_to_display.total_services)
 8006e06:	4b54      	ldr	r3, [pc, #336]	@ (8006f58 <state_machine+0x1e8>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <state_machine+0xa6>
			{
				playing_state = not_playing;
 8006e0e:	4b55      	ldr	r3, [pc, #340]	@ (8006f64 <state_machine+0x1f4>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	e028      	b.n	8006e68 <state_machine+0xf8>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 8006e16:	f7fd f93f 	bl	8004098 <get_dab_service_list>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4a52      	ldr	r2, [pc, #328]	@ (8006f68 <state_machine+0x1f8>)
 8006e1e:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 8006e20:	f7fd f944 	bl	80040ac <get_dab_ensemble_list>
 8006e24:	4603      	mov	r3, r0
 8006e26:	4a51      	ldr	r2, [pc, #324]	@ (8006f6c <state_machine+0x1fc>)
 8006e28:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 8006e2a:	4b51      	ldr	r3, [pc, #324]	@ (8006f70 <state_machine+0x200>)
 8006e2c:	2232      	movs	r2, #50	@ 0x32
 8006e2e:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 8006e30:	e014      	b.n	8006e5c <state_machine+0xec>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 8006e32:	4c50      	ldr	r4, [pc, #320]	@ (8006f74 <state_machine+0x204>)
 8006e34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fb fe7b 	bl	8002b34 <Si468x_dab_get_audio_info>
 8006e3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 8006e48:	4b49      	ldr	r3, [pc, #292]	@ (8006f70 <state_machine+0x200>)
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	4b47      	ldr	r3, [pc, #284]	@ (8006f70 <state_machine+0x200>)
 8006e52:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 8006e54:	4b46      	ldr	r3, [pc, #280]	@ (8006f70 <state_machine+0x200>)
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <state_machine+0xf6>
				while(!dab_audio_info_to_display.audio_sample_rate)
 8006e5c:	4b45      	ldr	r3, [pc, #276]	@ (8006f74 <state_machine+0x204>)
 8006e5e:	885b      	ldrh	r3, [r3, #2]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0e6      	beq.n	8006e32 <state_machine+0xc2>
 8006e64:	e000      	b.n	8006e68 <state_machine+0xf8>
					{
						break;
 8006e66:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 8006e68:	f7fd fb9c 	bl	80045a4 <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 8006e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f68 <state_machine+0x1f8>)
 8006e6e:	681e      	ldr	r6, [r3, #0]
 8006e70:	4b3e      	ldr	r3, [pc, #248]	@ (8006f6c <state_machine+0x1fc>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	4c38      	ldr	r4, [pc, #224]	@ (8006f58 <state_machine+0x1e8>)
 8006e78:	4b3e      	ldr	r3, [pc, #248]	@ (8006f74 <state_machine+0x204>)
 8006e7a:	ad02      	add	r5, sp, #8
 8006e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e7e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006e82:	466a      	mov	r2, sp
 8006e84:	f104 0308 	add.w	r3, r4, #8
 8006e88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006e8c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006e90:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	4630      	mov	r0, r6
 8006e98:	f7fd fc12 	bl	80046c0 <Display_main_screen_data>
			state_change_flag = state_change_completed;
 8006e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8006f50 <state_machine+0x1e0>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	e021      	b.n	8006ee8 <state_machine+0x178>
		}

		else
		{
			if(playing_state == playing)
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f64 <state_machine+0x1f4>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d11b      	bne.n	8006ee4 <state_machine+0x174>
			{
				Si468x_dab_get_digital_service_data();
 8006eac:	f7fc fae0 	bl	8003470 <Si468x_dab_get_digital_service_data>
				if (Alarming_Get_Status() == alarming_mode_1)
 8006eb0:	f7fd fb2c 	bl	800450c <Alarming_Get_Status>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d10e      	bne.n	8006ed8 <state_machine+0x168>
				{
					if(strcmp(dls_label_to_display, DLS_ALARM_START_STRING))
 8006eba:	4b28      	ldr	r3, [pc, #160]	@ (8006f5c <state_machine+0x1ec>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	492e      	ldr	r1, [pc, #184]	@ (8006f78 <state_machine+0x208>)
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7f9 f981 	bl	80001c8 <strcmp>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00d      	beq.n	8006ee8 <state_machine+0x178>
					{
						Display_main_screen_dls(dls_label_to_display);
 8006ecc:	4b23      	ldr	r3, [pc, #140]	@ (8006f5c <state_machine+0x1ec>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fd fd2f 	bl	8004934 <Display_main_screen_dls>
 8006ed6:	e007      	b.n	8006ee8 <state_machine+0x178>
					}
				}
				else
				{
					Display_main_screen_dls(dls_label_to_display);
 8006ed8:	4b20      	ldr	r3, [pc, #128]	@ (8006f5c <state_machine+0x1ec>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fd fd29 	bl	8004934 <Display_main_screen_dls>
 8006ee2:	e001      	b.n	8006ee8 <state_machine+0x178>
				}
			}
			else
			{
				Display_main_screen_empty();
 8006ee4:	f7fd fd62 	bl	80049ac <Display_main_screen_empty>
			}
		}

		//left button handling (alarming)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f54 <state_machine+0x1e4>)
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d911      	bls.n	8006f14 <state_machine+0x1a4>
 8006ef0:	4b18      	ldr	r3, [pc, #96]	@ (8006f54 <state_machine+0x1e4>)
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	2b9c      	cmp	r3, #156	@ 0x9c
 8006ef6:	d80d      	bhi.n	8006f14 <state_machine+0x1a4>
 8006ef8:	4b16      	ldr	r3, [pc, #88]	@ (8006f54 <state_machine+0x1e4>)
 8006efa:	885b      	ldrh	r3, [r3, #2]
 8006efc:	2bc3      	cmp	r3, #195	@ 0xc3
 8006efe:	d909      	bls.n	8006f14 <state_machine+0x1a4>
 8006f00:	4b14      	ldr	r3, [pc, #80]	@ (8006f54 <state_machine+0x1e4>)
 8006f02:	885b      	ldrh	r3, [r3, #2]
 8006f04:	2bea      	cmp	r3, #234	@ 0xea
 8006f06:	d805      	bhi.n	8006f14 <state_machine+0x1a4>
		{
			state_change_flag = state_change_started_not_completed;
 8006f08:	4b11      	ldr	r3, [pc, #68]	@ (8006f50 <state_machine+0x1e0>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
			system_state = alarming;
 8006f0e:	4b14      	ldr	r3, [pc, #80]	@ (8006f60 <state_machine+0x1f0>)
 8006f10:	2205      	movs	r2, #5
 8006f12:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006f14:	4b0f      	ldr	r3, [pc, #60]	@ (8006f54 <state_machine+0x1e4>)
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	2ba3      	cmp	r3, #163	@ 0xa3
 8006f1a:	f240 841a 	bls.w	8007752 <state_machine+0x9e2>
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <state_machine+0x1e4>)
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006f26:	f200 8414 	bhi.w	8007752 <state_machine+0x9e2>
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f54 <state_machine+0x1e4>)
 8006f2c:	885b      	ldrh	r3, [r3, #2]
 8006f2e:	2bc3      	cmp	r3, #195	@ 0xc3
 8006f30:	f240 840f 	bls.w	8007752 <state_machine+0x9e2>
 8006f34:	4b07      	ldr	r3, [pc, #28]	@ (8006f54 <state_machine+0x1e4>)
 8006f36:	885b      	ldrh	r3, [r3, #2]
 8006f38:	2bea      	cmp	r3, #234	@ 0xea
 8006f3a:	f200 840a 	bhi.w	8007752 <state_machine+0x9e2>
		{
			state_change_flag = state_change_started_not_completed;
 8006f3e:	4b04      	ldr	r3, [pc, #16]	@ (8006f50 <state_machine+0x1e0>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 8006f44:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <state_machine+0x1f0>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006f4a:	f000 bc02 	b.w	8007752 <state_machine+0x9e2>
 8006f4e:	bf00      	nop
 8006f50:	200070e5 	.word	0x200070e5
 8006f54:	200070ec 	.word	0x200070ec
 8006f58:	20007118 	.word	0x20007118
 8006f5c:	20007140 	.word	0x20007140
 8006f60:	200070e4 	.word	0x200070e4
 8006f64:	20000150 	.word	0x20000150
 8006f68:	20007128 	.word	0x20007128
 8006f6c:	2000712c 	.word	0x2000712c
 8006f70:	20007146 	.word	0x20007146
 8006f74:	20007130 	.word	0x20007130
 8006f78:	0800ff70 	.word	0x0800ff70

	case services_list_screen:
		if(state_change_flag == state_change_started_not_completed)
 8006f7c:	4b7d      	ldr	r3, [pc, #500]	@ (8007174 <state_machine+0x404>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d114      	bne.n	8006fae <state_machine+0x23e>
		{
			services_list_to_display = get_dab_service_list();
 8006f84:	f7fd f888 	bl	8004098 <get_dab_service_list>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	4a7b      	ldr	r2, [pc, #492]	@ (8007178 <state_machine+0x408>)
 8006f8c:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 8006f8e:	f7fd fd87 	bl	8004aa0 <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 8006f92:	4b7a      	ldr	r3, [pc, #488]	@ (800717c <state_machine+0x40c>)
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	4b78      	ldr	r3, [pc, #480]	@ (8007178 <state_machine+0x408>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b79      	ldr	r3, [pc, #484]	@ (8007180 <state_machine+0x410>)
 8006f9c:	9201      	str	r2, [sp, #4]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	9200      	str	r2, [sp, #0]
 8006fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fa4:	f7fd fe40 	bl	8004c28 <Display_stations_list_data>
			state_change_flag = state_change_completed;
 8006fa8:	4b72      	ldr	r3, [pc, #456]	@ (8007174 <state_machine+0x404>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006fae:	4b75      	ldr	r3, [pc, #468]	@ (8007184 <state_machine+0x414>)
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d911      	bls.n	8006fda <state_machine+0x26a>
 8006fb6:	4b73      	ldr	r3, [pc, #460]	@ (8007184 <state_machine+0x414>)
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	2b9c      	cmp	r3, #156	@ 0x9c
 8006fbc:	d80d      	bhi.n	8006fda <state_machine+0x26a>
 8006fbe:	4b71      	ldr	r3, [pc, #452]	@ (8007184 <state_machine+0x414>)
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	2bc3      	cmp	r3, #195	@ 0xc3
 8006fc4:	d909      	bls.n	8006fda <state_machine+0x26a>
 8006fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8007184 <state_machine+0x414>)
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	2bea      	cmp	r3, #234	@ 0xea
 8006fcc:	d805      	bhi.n	8006fda <state_machine+0x26a>
		{
			state_change_flag = state_change_started_not_completed;
 8006fce:	4b69      	ldr	r3, [pc, #420]	@ (8007174 <state_machine+0x404>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8007188 <state_machine+0x418>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006fda:	4b6a      	ldr	r3, [pc, #424]	@ (8007184 <state_machine+0x414>)
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	2ba3      	cmp	r3, #163	@ 0xa3
 8006fe0:	d912      	bls.n	8007008 <state_machine+0x298>
 8006fe2:	4b68      	ldr	r3, [pc, #416]	@ (8007184 <state_machine+0x414>)
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006fea:	d80d      	bhi.n	8007008 <state_machine+0x298>
 8006fec:	4b65      	ldr	r3, [pc, #404]	@ (8007184 <state_machine+0x414>)
 8006fee:	885b      	ldrh	r3, [r3, #2]
 8006ff0:	2bc3      	cmp	r3, #195	@ 0xc3
 8006ff2:	d909      	bls.n	8007008 <state_machine+0x298>
 8006ff4:	4b63      	ldr	r3, [pc, #396]	@ (8007184 <state_machine+0x414>)
 8006ff6:	885b      	ldrh	r3, [r3, #2]
 8006ff8:	2bea      	cmp	r3, #234	@ 0xea
 8006ffa:	d805      	bhi.n	8007008 <state_machine+0x298>
		{
			state_change_flag = state_change_started_not_completed;
 8006ffc:	4b5d      	ldr	r3, [pc, #372]	@ (8007174 <state_machine+0x404>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 8007002:	4b61      	ldr	r3, [pc, #388]	@ (8007188 <state_machine+0x418>)
 8007004:	2203      	movs	r2, #3
 8007006:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8007008:	4b5e      	ldr	r3, [pc, #376]	@ (8007184 <state_machine+0x414>)
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8007010:	d930      	bls.n	8007074 <state_machine+0x304>
 8007012:	4b5c      	ldr	r3, [pc, #368]	@ (8007184 <state_machine+0x414>)
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800701a:	d82b      	bhi.n	8007074 <state_machine+0x304>
 800701c:	4b59      	ldr	r3, [pc, #356]	@ (8007184 <state_machine+0x414>)
 800701e:	885b      	ldrh	r3, [r3, #2]
 8007020:	2b14      	cmp	r3, #20
 8007022:	d927      	bls.n	8007074 <state_machine+0x304>
 8007024:	4b57      	ldr	r3, [pc, #348]	@ (8007184 <state_machine+0x414>)
 8007026:	885b      	ldrh	r3, [r3, #2]
 8007028:	2b65      	cmp	r3, #101	@ 0x65
 800702a:	d823      	bhi.n	8007074 <state_machine+0x304>
		{
			if(dab_management_to_display.total_services)
 800702c:	4b54      	ldr	r3, [pc, #336]	@ (8007180 <state_machine+0x410>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01f      	beq.n	8007074 <state_machine+0x304>
			{
				srv_list_start_index--;
 8007034:	4b51      	ldr	r3, [pc, #324]	@ (800717c <state_machine+0x40c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3b01      	subs	r3, #1
 800703a:	4a50      	ldr	r2, [pc, #320]	@ (800717c <state_machine+0x40c>)
 800703c:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 800703e:	4b50      	ldr	r3, [pc, #320]	@ (8007180 <state_machine+0x410>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	4b4d      	ldr	r3, [pc, #308]	@ (800717c <state_machine+0x40c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	db03      	blt.n	8007054 <state_machine+0x2e4>
 800704c:	4b4b      	ldr	r3, [pc, #300]	@ (800717c <state_machine+0x40c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	da04      	bge.n	800705e <state_machine+0x2ee>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 8007054:	4b4a      	ldr	r3, [pc, #296]	@ (8007180 <state_machine+0x410>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	3b01      	subs	r3, #1
 800705a:	4a48      	ldr	r2, [pc, #288]	@ (800717c <state_machine+0x40c>)
 800705c:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800705e:	4b47      	ldr	r3, [pc, #284]	@ (800717c <state_machine+0x40c>)
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	4b45      	ldr	r3, [pc, #276]	@ (8007178 <state_machine+0x408>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	4b46      	ldr	r3, [pc, #280]	@ (8007180 <state_machine+0x410>)
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	9200      	str	r2, [sp, #0]
 800706e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007070:	f7fd fdda 	bl	8004c28 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 8007074:	4b43      	ldr	r3, [pc, #268]	@ (8007184 <state_machine+0x414>)
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 800707c:	d92a      	bls.n	80070d4 <state_machine+0x364>
 800707e:	4b41      	ldr	r3, [pc, #260]	@ (8007184 <state_machine+0x414>)
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8007086:	d825      	bhi.n	80070d4 <state_machine+0x364>
 8007088:	4b3e      	ldr	r3, [pc, #248]	@ (8007184 <state_machine+0x414>)
 800708a:	885b      	ldrh	r3, [r3, #2]
 800708c:	2b6c      	cmp	r3, #108	@ 0x6c
 800708e:	d921      	bls.n	80070d4 <state_machine+0x364>
 8007090:	4b3c      	ldr	r3, [pc, #240]	@ (8007184 <state_machine+0x414>)
 8007092:	885b      	ldrh	r3, [r3, #2]
 8007094:	2bbd      	cmp	r3, #189	@ 0xbd
 8007096:	d81d      	bhi.n	80070d4 <state_machine+0x364>
		{
			if(dab_management_to_display.total_services)
 8007098:	4b39      	ldr	r3, [pc, #228]	@ (8007180 <state_machine+0x410>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d019      	beq.n	80070d4 <state_machine+0x364>
			{
				srv_list_start_index++;
 80070a0:	4b36      	ldr	r3, [pc, #216]	@ (800717c <state_machine+0x40c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	4a35      	ldr	r2, [pc, #212]	@ (800717c <state_machine+0x40c>)
 80070a8:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 80070aa:	4b35      	ldr	r3, [pc, #212]	@ (8007180 <state_machine+0x410>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	4b32      	ldr	r3, [pc, #200]	@ (800717c <state_machine+0x40c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	dc02      	bgt.n	80070be <state_machine+0x34e>
				{
					srv_list_start_index = 0;
 80070b8:	4b30      	ldr	r3, [pc, #192]	@ (800717c <state_machine+0x40c>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80070be:	4b2f      	ldr	r3, [pc, #188]	@ (800717c <state_machine+0x40c>)
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007178 <state_machine+0x408>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b2e      	ldr	r3, [pc, #184]	@ (8007180 <state_machine+0x410>)
 80070c8:	9201      	str	r2, [sp, #4]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	9200      	str	r2, [sp, #0]
 80070ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070d0:	f7fd fdaa 	bl	8004c28 <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 80070d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007184 <state_machine+0x414>)
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	2b05      	cmp	r3, #5
 80070da:	d91f      	bls.n	800711c <state_machine+0x3ac>
 80070dc:	4b29      	ldr	r3, [pc, #164]	@ (8007184 <state_machine+0x414>)
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80070e4:	d81a      	bhi.n	800711c <state_machine+0x3ac>
 80070e6:	4b27      	ldr	r3, [pc, #156]	@ (8007184 <state_machine+0x414>)
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	2b14      	cmp	r3, #20
 80070ec:	d916      	bls.n	800711c <state_machine+0x3ac>
 80070ee:	4b25      	ldr	r3, [pc, #148]	@ (8007184 <state_machine+0x414>)
 80070f0:	885b      	ldrh	r3, [r3, #2]
 80070f2:	2b31      	cmp	r3, #49	@ 0x31
 80070f4:	d812      	bhi.n	800711c <state_machine+0x3ac>
		{
			if(dab_management_to_display.total_services)
 80070f6:	4b22      	ldr	r3, [pc, #136]	@ (8007180 <state_machine+0x410>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00e      	beq.n	800711c <state_machine+0x3ac>
			{
				state_change_flag = state_change_started_not_completed;
 80070fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007174 <state_machine+0x404>)
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 8007104:	4b1d      	ldr	r3, [pc, #116]	@ (800717c <state_machine+0x40c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	4618      	mov	r0, r3
 800710c:	f7fc fba2 	bl	8003854 <play_station>
				playing_state = playing;
 8007110:	4b1e      	ldr	r3, [pc, #120]	@ (800718c <state_machine+0x41c>)
 8007112:	2201      	movs	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8007116:	4b1c      	ldr	r3, [pc, #112]	@ (8007188 <state_machine+0x418>)
 8007118:	2200      	movs	r2, #0
 800711a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 800711c:	4b19      	ldr	r3, [pc, #100]	@ (8007184 <state_machine+0x414>)
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	2b05      	cmp	r3, #5
 8007122:	d943      	bls.n	80071ac <state_machine+0x43c>
 8007124:	4b17      	ldr	r3, [pc, #92]	@ (8007184 <state_machine+0x414>)
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800712c:	d83e      	bhi.n	80071ac <state_machine+0x43c>
 800712e:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <state_machine+0x414>)
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	2b37      	cmp	r3, #55	@ 0x37
 8007134:	d93a      	bls.n	80071ac <state_machine+0x43c>
 8007136:	4b13      	ldr	r3, [pc, #76]	@ (8007184 <state_machine+0x414>)
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	2b54      	cmp	r3, #84	@ 0x54
 800713c:	d836      	bhi.n	80071ac <state_machine+0x43c>
		{
			if(dab_management_to_display.total_services)
 800713e:	4b10      	ldr	r3, [pc, #64]	@ (8007180 <state_machine+0x410>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d032      	beq.n	80071ac <state_machine+0x43c>
			{
				state_change_flag = state_change_started_not_completed;
 8007146:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <state_machine+0x404>)
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 800714c:	4b0b      	ldr	r3, [pc, #44]	@ (800717c <state_machine+0x40c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	4a0b      	ldr	r2, [pc, #44]	@ (8007180 <state_machine+0x410>)
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	4293      	cmp	r3, r2
 8007158:	db1a      	blt.n	8007190 <state_machine+0x420>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 800715a:	4b08      	ldr	r3, [pc, #32]	@ (800717c <state_machine+0x40c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	b2da      	uxtb	r2, r3
 8007160:	4b07      	ldr	r3, [pc, #28]	@ (8007180 <state_machine+0x410>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	b2db      	uxtb	r3, r3
 8007168:	3301      	adds	r3, #1
 800716a:	b2db      	uxtb	r3, r3
 800716c:	4618      	mov	r0, r3
 800716e:	f7fc fb71 	bl	8003854 <play_station>
 8007172:	e015      	b.n	80071a0 <state_machine+0x430>
 8007174:	200070e5 	.word	0x200070e5
 8007178:	20007128 	.word	0x20007128
 800717c:	200070e8 	.word	0x200070e8
 8007180:	20007118 	.word	0x20007118
 8007184:	200070ec 	.word	0x200070ec
 8007188:	200070e4 	.word	0x200070e4
 800718c:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 8007190:	4b8d      	ldr	r3, [pc, #564]	@ (80073c8 <state_machine+0x658>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	3301      	adds	r3, #1
 8007198:	b2db      	uxtb	r3, r3
 800719a:	4618      	mov	r0, r3
 800719c:	f7fc fb5a 	bl	8003854 <play_station>
				}

				playing_state = playing;
 80071a0:	4b8a      	ldr	r3, [pc, #552]	@ (80073cc <state_machine+0x65c>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80071a6:	4b8a      	ldr	r3, [pc, #552]	@ (80073d0 <state_machine+0x660>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 80071ac:	4b89      	ldr	r3, [pc, #548]	@ (80073d4 <state_machine+0x664>)
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	2b05      	cmp	r3, #5
 80071b2:	d935      	bls.n	8007220 <state_machine+0x4b0>
 80071b4:	4b87      	ldr	r3, [pc, #540]	@ (80073d4 <state_machine+0x664>)
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80071bc:	d830      	bhi.n	8007220 <state_machine+0x4b0>
 80071be:	4b85      	ldr	r3, [pc, #532]	@ (80073d4 <state_machine+0x664>)
 80071c0:	885b      	ldrh	r3, [r3, #2]
 80071c2:	2b5a      	cmp	r3, #90	@ 0x5a
 80071c4:	d92c      	bls.n	8007220 <state_machine+0x4b0>
 80071c6:	4b83      	ldr	r3, [pc, #524]	@ (80073d4 <state_machine+0x664>)
 80071c8:	885b      	ldrh	r3, [r3, #2]
 80071ca:	2b77      	cmp	r3, #119	@ 0x77
 80071cc:	d828      	bhi.n	8007220 <state_machine+0x4b0>
		{
			if(dab_management_to_display.total_services)
 80071ce:	4b82      	ldr	r3, [pc, #520]	@ (80073d8 <state_machine+0x668>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d024      	beq.n	8007220 <state_machine+0x4b0>
			{
				state_change_flag = state_change_started_not_completed;
 80071d6:	4b81      	ldr	r3, [pc, #516]	@ (80073dc <state_machine+0x66c>)
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 80071dc:	4b7a      	ldr	r3, [pc, #488]	@ (80073c8 <state_machine+0x658>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3302      	adds	r3, #2
 80071e2:	4a7d      	ldr	r2, [pc, #500]	@ (80073d8 <state_machine+0x668>)
 80071e4:	7812      	ldrb	r2, [r2, #0]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	db0c      	blt.n	8007204 <state_machine+0x494>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 80071ea:	4b77      	ldr	r3, [pc, #476]	@ (80073c8 <state_machine+0x658>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	4b79      	ldr	r3, [pc, #484]	@ (80073d8 <state_machine+0x668>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	3302      	adds	r3, #2
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fc fb29 	bl	8003854 <play_station>
 8007202:	e007      	b.n	8007214 <state_machine+0x4a4>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 8007204:	4b70      	ldr	r3, [pc, #448]	@ (80073c8 <state_machine+0x658>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	3302      	adds	r3, #2
 800720c:	b2db      	uxtb	r3, r3
 800720e:	4618      	mov	r0, r3
 8007210:	f7fc fb20 	bl	8003854 <play_station>
				}

				playing_state = playing;
 8007214:	4b6d      	ldr	r3, [pc, #436]	@ (80073cc <state_machine+0x65c>)
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800721a:	4b6d      	ldr	r3, [pc, #436]	@ (80073d0 <state_machine+0x660>)
 800721c:	2200      	movs	r2, #0
 800721e:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 8007220:	4b6c      	ldr	r3, [pc, #432]	@ (80073d4 <state_machine+0x664>)
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	2b05      	cmp	r3, #5
 8007226:	d935      	bls.n	8007294 <state_machine+0x524>
 8007228:	4b6a      	ldr	r3, [pc, #424]	@ (80073d4 <state_machine+0x664>)
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8007230:	d830      	bhi.n	8007294 <state_machine+0x524>
 8007232:	4b68      	ldr	r3, [pc, #416]	@ (80073d4 <state_machine+0x664>)
 8007234:	885b      	ldrh	r3, [r3, #2]
 8007236:	2b7d      	cmp	r3, #125	@ 0x7d
 8007238:	d92c      	bls.n	8007294 <state_machine+0x524>
 800723a:	4b66      	ldr	r3, [pc, #408]	@ (80073d4 <state_machine+0x664>)
 800723c:	885b      	ldrh	r3, [r3, #2]
 800723e:	2b9a      	cmp	r3, #154	@ 0x9a
 8007240:	d828      	bhi.n	8007294 <state_machine+0x524>
		{
			if(dab_management_to_display.total_services)
 8007242:	4b65      	ldr	r3, [pc, #404]	@ (80073d8 <state_machine+0x668>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d024      	beq.n	8007294 <state_machine+0x524>
			{
				state_change_flag = state_change_started_not_completed;
 800724a:	4b64      	ldr	r3, [pc, #400]	@ (80073dc <state_machine+0x66c>)
 800724c:	2200      	movs	r2, #0
 800724e:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 8007250:	4b5d      	ldr	r3, [pc, #372]	@ (80073c8 <state_machine+0x658>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3303      	adds	r3, #3
 8007256:	4a60      	ldr	r2, [pc, #384]	@ (80073d8 <state_machine+0x668>)
 8007258:	7812      	ldrb	r2, [r2, #0]
 800725a:	4293      	cmp	r3, r2
 800725c:	db0c      	blt.n	8007278 <state_machine+0x508>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 800725e:	4b5a      	ldr	r3, [pc, #360]	@ (80073c8 <state_machine+0x658>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	4b5c      	ldr	r3, [pc, #368]	@ (80073d8 <state_machine+0x668>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	b2db      	uxtb	r3, r3
 800726c:	3303      	adds	r3, #3
 800726e:	b2db      	uxtb	r3, r3
 8007270:	4618      	mov	r0, r3
 8007272:	f7fc faef 	bl	8003854 <play_station>
 8007276:	e007      	b.n	8007288 <state_machine+0x518>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 8007278:	4b53      	ldr	r3, [pc, #332]	@ (80073c8 <state_machine+0x658>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	3303      	adds	r3, #3
 8007280:	b2db      	uxtb	r3, r3
 8007282:	4618      	mov	r0, r3
 8007284:	f7fc fae6 	bl	8003854 <play_station>
				}

				playing_state = playing;
 8007288:	4b50      	ldr	r3, [pc, #320]	@ (80073cc <state_machine+0x65c>)
 800728a:	2201      	movs	r2, #1
 800728c:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800728e:	4b50      	ldr	r3, [pc, #320]	@ (80073d0 <state_machine+0x660>)
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 8007294:	4b4f      	ldr	r3, [pc, #316]	@ (80073d4 <state_machine+0x664>)
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	2b05      	cmp	r3, #5
 800729a:	f240 825c 	bls.w	8007756 <state_machine+0x9e6>
 800729e:	4b4d      	ldr	r3, [pc, #308]	@ (80073d4 <state_machine+0x664>)
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80072a6:	f200 8256 	bhi.w	8007756 <state_machine+0x9e6>
 80072aa:	4b4a      	ldr	r3, [pc, #296]	@ (80073d4 <state_machine+0x664>)
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80072b0:	f240 8251 	bls.w	8007756 <state_machine+0x9e6>
 80072b4:	4b47      	ldr	r3, [pc, #284]	@ (80073d4 <state_machine+0x664>)
 80072b6:	885b      	ldrh	r3, [r3, #2]
 80072b8:	2bbd      	cmp	r3, #189	@ 0xbd
 80072ba:	f200 824c 	bhi.w	8007756 <state_machine+0x9e6>
		{
			if(dab_management_to_display.total_services)
 80072be:	4b46      	ldr	r3, [pc, #280]	@ (80073d8 <state_machine+0x668>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 8247 	beq.w	8007756 <state_machine+0x9e6>
			{
				state_change_flag = state_change_started_not_completed;
 80072c8:	4b44      	ldr	r3, [pc, #272]	@ (80073dc <state_machine+0x66c>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 80072ce:	4b3e      	ldr	r3, [pc, #248]	@ (80073c8 <state_machine+0x658>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4a40      	ldr	r2, [pc, #256]	@ (80073d8 <state_machine+0x668>)
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	4293      	cmp	r3, r2
 80072da:	db0c      	blt.n	80072f6 <state_machine+0x586>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 80072dc:	4b3a      	ldr	r3, [pc, #232]	@ (80073c8 <state_machine+0x658>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	4b3d      	ldr	r3, [pc, #244]	@ (80073d8 <state_machine+0x668>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	3304      	adds	r3, #4
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fc fab0 	bl	8003854 <play_station>
 80072f4:	e007      	b.n	8007306 <state_machine+0x596>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 80072f6:	4b34      	ldr	r3, [pc, #208]	@ (80073c8 <state_machine+0x658>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	3304      	adds	r3, #4
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4618      	mov	r0, r3
 8007302:	f7fc faa7 	bl	8003854 <play_station>
				}

				playing_state = playing;
 8007306:	4b31      	ldr	r3, [pc, #196]	@ (80073cc <state_machine+0x65c>)
 8007308:	2201      	movs	r2, #1
 800730a:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800730c:	4b30      	ldr	r3, [pc, #192]	@ (80073d0 <state_machine+0x660>)
 800730e:	2200      	movs	r2, #0
 8007310:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 8007312:	e220      	b.n	8007756 <state_machine+0x9e6>

	case signal_info:
		if(state_change_flag == state_change_started_not_completed)
 8007314:	4b31      	ldr	r3, [pc, #196]	@ (80073dc <state_machine+0x66c>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d104      	bne.n	8007326 <state_machine+0x5b6>
		{
			Display_dab_digrad_status_background();
 800731c:	f7fe f820 	bl	8005360 <Display_dab_digrad_status_background>
			state_change_flag = state_change_completed;
 8007320:	4b2e      	ldr	r3, [pc, #184]	@ (80073dc <state_machine+0x66c>)
 8007322:	2201      	movs	r2, #1
 8007324:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 8007326:	4c2e      	ldr	r4, [pc, #184]	@ (80073e0 <state_machine+0x670>)
 8007328:	f107 0308 	add.w	r3, r7, #8
 800732c:	4618      	mov	r0, r3
 800732e:	f7fa fcef 	bl	8001d10 <Si468x_dab_digrad_status>
 8007332:	4625      	mov	r5, r4
 8007334:	f107 0408 	add.w	r4, r7, #8
 8007338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800733a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800733c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800733e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007340:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007344:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 8007348:	4e25      	ldr	r6, [pc, #148]	@ (80073e0 <state_machine+0x670>)
 800734a:	466d      	mov	r5, sp
 800734c:	f106 0410 	add.w	r4, r6, #16
 8007350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007354:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007358:	e885 0003 	stmia.w	r5, {r0, r1}
 800735c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007360:	f7fe f996 	bl	8005690 <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8007364:	4b1b      	ldr	r3, [pc, #108]	@ (80073d4 <state_machine+0x664>)
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	2b05      	cmp	r3, #5
 800736a:	d911      	bls.n	8007390 <state_machine+0x620>
 800736c:	4b19      	ldr	r3, [pc, #100]	@ (80073d4 <state_machine+0x664>)
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	2b9c      	cmp	r3, #156	@ 0x9c
 8007372:	d80d      	bhi.n	8007390 <state_machine+0x620>
 8007374:	4b17      	ldr	r3, [pc, #92]	@ (80073d4 <state_machine+0x664>)
 8007376:	885b      	ldrh	r3, [r3, #2]
 8007378:	2bc3      	cmp	r3, #195	@ 0xc3
 800737a:	d909      	bls.n	8007390 <state_machine+0x620>
 800737c:	4b15      	ldr	r3, [pc, #84]	@ (80073d4 <state_machine+0x664>)
 800737e:	885b      	ldrh	r3, [r3, #2]
 8007380:	2bea      	cmp	r3, #234	@ 0xea
 8007382:	d805      	bhi.n	8007390 <state_machine+0x620>
		{
			state_change_flag = state_change_started_not_completed;
 8007384:	4b15      	ldr	r3, [pc, #84]	@ (80073dc <state_machine+0x66c>)
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 800738a:	4b11      	ldr	r3, [pc, #68]	@ (80073d0 <state_machine+0x660>)
 800738c:	2201      	movs	r2, #1
 800738e:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8007390:	4b10      	ldr	r3, [pc, #64]	@ (80073d4 <state_machine+0x664>)
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	2ba3      	cmp	r3, #163	@ 0xa3
 8007396:	f240 81e0 	bls.w	800775a <state_machine+0x9ea>
 800739a:	4b0e      	ldr	r3, [pc, #56]	@ (80073d4 <state_machine+0x664>)
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80073a2:	f200 81da 	bhi.w	800775a <state_machine+0x9ea>
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <state_machine+0x664>)
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	2bc3      	cmp	r3, #195	@ 0xc3
 80073ac:	f240 81d5 	bls.w	800775a <state_machine+0x9ea>
 80073b0:	4b08      	ldr	r3, [pc, #32]	@ (80073d4 <state_machine+0x664>)
 80073b2:	885b      	ldrh	r3, [r3, #2]
 80073b4:	2bea      	cmp	r3, #234	@ 0xea
 80073b6:	f200 81d0 	bhi.w	800775a <state_machine+0x9ea>
		{
			state_change_flag = state_change_started_not_completed;
 80073ba:	4b08      	ldr	r3, [pc, #32]	@ (80073dc <state_machine+0x66c>)
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 80073c0:	4b03      	ldr	r3, [pc, #12]	@ (80073d0 <state_machine+0x660>)
 80073c2:	2204      	movs	r2, #4
 80073c4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80073c6:	e1c8      	b.n	800775a <state_machine+0x9ea>
 80073c8:	200070e8 	.word	0x200070e8
 80073cc:	20000150 	.word	0x20000150
 80073d0:	200070e4 	.word	0x200070e4
 80073d4:	200070ec 	.word	0x200070ec
 80073d8:	20007118 	.word	0x20007118
 80073dc:	200070e5 	.word	0x200070e5
 80073e0:	200070f0 	.word	0x200070f0

	case scanning:
		if(state_change_flag == state_change_started_not_completed)
 80073e4:	4b91      	ldr	r3, [pc, #580]	@ (800762c <state_machine+0x8bc>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d116      	bne.n	800741a <state_machine+0x6aa>
		{
			playing_state = not_playing;
 80073ec:	4b90      	ldr	r3, [pc, #576]	@ (8007630 <state_machine+0x8c0>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 80073f2:	f7fd fdb3 	bl	8004f5c <Display_scanning_screen_background>
			state_change_flag = state_change_completed;
 80073f6:	4b8d      	ldr	r3, [pc, #564]	@ (800762c <state_machine+0x8bc>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 80073fc:	f7fb f8b2 	bl	8002564 <Si468x_dab_full_scan>
 8007400:	4603      	mov	r3, r0
 8007402:	461a      	mov	r2, r3
 8007404:	4b8b      	ldr	r3, [pc, #556]	@ (8007634 <state_machine+0x8c4>)
 8007406:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8007408:	4b8a      	ldr	r3, [pc, #552]	@ (8007634 <state_machine+0x8c4>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <state_machine+0x6aa>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 8007410:	f7fd ff70 	bl	80052f4 <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 8007414:	4b87      	ldr	r3, [pc, #540]	@ (8007634 <state_machine+0x8c4>)
 8007416:	2200      	movs	r2, #0
 8007418:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800741a:	4b87      	ldr	r3, [pc, #540]	@ (8007638 <state_machine+0x8c8>)
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	2b05      	cmp	r3, #5
 8007420:	f240 819d 	bls.w	800775e <state_machine+0x9ee>
 8007424:	4b84      	ldr	r3, [pc, #528]	@ (8007638 <state_machine+0x8c8>)
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800742c:	f200 8197 	bhi.w	800775e <state_machine+0x9ee>
 8007430:	4b81      	ldr	r3, [pc, #516]	@ (8007638 <state_machine+0x8c8>)
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	2bc3      	cmp	r3, #195	@ 0xc3
 8007436:	f240 8192 	bls.w	800775e <state_machine+0x9ee>
 800743a:	4b7f      	ldr	r3, [pc, #508]	@ (8007638 <state_machine+0x8c8>)
 800743c:	885b      	ldrh	r3, [r3, #2]
 800743e:	2bea      	cmp	r3, #234	@ 0xea
 8007440:	f200 818d 	bhi.w	800775e <state_machine+0x9ee>
		{
			scan_cancel_flag = 1;
 8007444:	4b7d      	ldr	r3, [pc, #500]	@ (800763c <state_machine+0x8cc>)
 8007446:	2201      	movs	r2, #1
 8007448:	701a      	strb	r2, [r3, #0]
			state_change_flag = state_change_started_not_completed;
 800744a:	4b78      	ldr	r3, [pc, #480]	@ (800762c <state_machine+0x8bc>)
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8007450:	4b7b      	ldr	r3, [pc, #492]	@ (8007640 <state_machine+0x8d0>)
 8007452:	2204      	movs	r2, #4
 8007454:	701a      	strb	r2, [r3, #0]
		}

		break;
 8007456:	e182      	b.n	800775e <state_machine+0x9ee>

	case settings:
		if(state_change_flag == state_change_started_not_completed)
 8007458:	4b74      	ldr	r3, [pc, #464]	@ (800762c <state_machine+0x8bc>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d107      	bne.n	8007470 <state_machine+0x700>
		{
			Display_settings_screen_background();
 8007460:	f7fe fc80 	bl	8005d64 <Display_settings_screen_background>
			scan_cancel_flag = 0;
 8007464:	4b75      	ldr	r3, [pc, #468]	@ (800763c <state_machine+0x8cc>)
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
			state_change_flag = state_change_completed;
 800746a:	4b70      	ldr	r3, [pc, #448]	@ (800762c <state_machine+0x8bc>)
 800746c:	2201      	movs	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 8007470:	4b74      	ldr	r3, [pc, #464]	@ (8007644 <state_machine+0x8d4>)
 8007472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007474:	f7fe fd6e 	bl	8005f54 <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8007478:	4b6f      	ldr	r3, [pc, #444]	@ (8007638 <state_machine+0x8c8>)
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	2ba3      	cmp	r3, #163	@ 0xa3
 800747e:	d91e      	bls.n	80074be <state_machine+0x74e>
 8007480:	4b6d      	ldr	r3, [pc, #436]	@ (8007638 <state_machine+0x8c8>)
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8007488:	d819      	bhi.n	80074be <state_machine+0x74e>
 800748a:	4b6b      	ldr	r3, [pc, #428]	@ (8007638 <state_machine+0x8c8>)
 800748c:	885b      	ldrh	r3, [r3, #2]
 800748e:	2b3c      	cmp	r3, #60	@ 0x3c
 8007490:	d915      	bls.n	80074be <state_machine+0x74e>
 8007492:	4b69      	ldr	r3, [pc, #420]	@ (8007638 <state_machine+0x8c8>)
 8007494:	885b      	ldrh	r3, [r3, #2]
 8007496:	2b63      	cmp	r3, #99	@ 0x63
 8007498:	d811      	bhi.n	80074be <state_machine+0x74e>
		{
			dab_management_to_display.audio_volume += 2;
 800749a:	4b6a      	ldr	r3, [pc, #424]	@ (8007644 <state_machine+0x8d4>)
 800749c:	7b9b      	ldrb	r3, [r3, #14]
 800749e:	3302      	adds	r3, #2
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	4b68      	ldr	r3, [pc, #416]	@ (8007644 <state_machine+0x8d4>)
 80074a4:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 80074a6:	4b67      	ldr	r3, [pc, #412]	@ (8007644 <state_machine+0x8d4>)
 80074a8:	7b9b      	ldrb	r3, [r3, #14]
 80074aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80074ac:	d902      	bls.n	80074b4 <state_machine+0x744>
			{
				dab_management_to_display.audio_volume = 63;
 80074ae:	4b65      	ldr	r3, [pc, #404]	@ (8007644 <state_machine+0x8d4>)
 80074b0:	223f      	movs	r2, #63	@ 0x3f
 80074b2:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 80074b4:	4b63      	ldr	r3, [pc, #396]	@ (8007644 <state_machine+0x8d4>)
 80074b6:	7b9b      	ldrb	r3, [r3, #14]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fc f997 	bl	80037ec <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80074be:	4b5e      	ldr	r3, [pc, #376]	@ (8007638 <state_machine+0x8c8>)
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d91d      	bls.n	8007502 <state_machine+0x792>
 80074c6:	4b5c      	ldr	r3, [pc, #368]	@ (8007638 <state_machine+0x8c8>)
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	2b9c      	cmp	r3, #156	@ 0x9c
 80074cc:	d819      	bhi.n	8007502 <state_machine+0x792>
 80074ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007638 <state_machine+0x8c8>)
 80074d0:	885b      	ldrh	r3, [r3, #2]
 80074d2:	2b3c      	cmp	r3, #60	@ 0x3c
 80074d4:	d915      	bls.n	8007502 <state_machine+0x792>
 80074d6:	4b58      	ldr	r3, [pc, #352]	@ (8007638 <state_machine+0x8c8>)
 80074d8:	885b      	ldrh	r3, [r3, #2]
 80074da:	2b63      	cmp	r3, #99	@ 0x63
 80074dc:	d811      	bhi.n	8007502 <state_machine+0x792>
		{
			dab_management_to_display.audio_volume -= 2;
 80074de:	4b59      	ldr	r3, [pc, #356]	@ (8007644 <state_machine+0x8d4>)
 80074e0:	7b9b      	ldrb	r3, [r3, #14]
 80074e2:	3b02      	subs	r3, #2
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	4b57      	ldr	r3, [pc, #348]	@ (8007644 <state_machine+0x8d4>)
 80074e8:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 80074ea:	4b56      	ldr	r3, [pc, #344]	@ (8007644 <state_machine+0x8d4>)
 80074ec:	7b9b      	ldrb	r3, [r3, #14]
 80074ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80074f0:	d902      	bls.n	80074f8 <state_machine+0x788>
			{
				dab_management_to_display.audio_volume = 0;
 80074f2:	4b54      	ldr	r3, [pc, #336]	@ (8007644 <state_machine+0x8d4>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 80074f8:	4b52      	ldr	r3, [pc, #328]	@ (8007644 <state_machine+0x8d4>)
 80074fa:	7b9b      	ldrb	r3, [r3, #14]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fc f975 	bl	80037ec <Si468x_set_audio_volume>
		}

		//backlight+ button handling -- temporary as DAB Get event status
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8007502:	4b4d      	ldr	r3, [pc, #308]	@ (8007638 <state_machine+0x8c8>)
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	2ba3      	cmp	r3, #163	@ 0xa3
 8007508:	d911      	bls.n	800752e <state_machine+0x7be>
 800750a:	4b4b      	ldr	r3, [pc, #300]	@ (8007638 <state_machine+0x8c8>)
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8007512:	d80c      	bhi.n	800752e <state_machine+0x7be>
 8007514:	4b48      	ldr	r3, [pc, #288]	@ (8007638 <state_machine+0x8c8>)
 8007516:	885b      	ldrh	r3, [r3, #2]
 8007518:	2b69      	cmp	r3, #105	@ 0x69
 800751a:	d908      	bls.n	800752e <state_machine+0x7be>
 800751c:	4b46      	ldr	r3, [pc, #280]	@ (8007638 <state_machine+0x8c8>)
 800751e:	885b      	ldrh	r3, [r3, #2]
 8007520:	2b90      	cmp	r3, #144	@ 0x90
 8007522:	d804      	bhi.n	800752e <state_machine+0x7be>
		{
			Si468x_dab_get_event_status();
 8007524:	f107 0308 	add.w	r3, r7, #8
 8007528:	4618      	mov	r0, r3
 800752a:	f7fb fbbb 	bl	8002ca4 <Si468x_dab_get_event_status>
		}

		//backlight- button handling -- temporary as DAB get announcement info
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 800752e:	4b42      	ldr	r3, [pc, #264]	@ (8007638 <state_machine+0x8c8>)
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	2b05      	cmp	r3, #5
 8007534:	d910      	bls.n	8007558 <state_machine+0x7e8>
 8007536:	4b40      	ldr	r3, [pc, #256]	@ (8007638 <state_machine+0x8c8>)
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	2b9c      	cmp	r3, #156	@ 0x9c
 800753c:	d80c      	bhi.n	8007558 <state_machine+0x7e8>
 800753e:	4b3e      	ldr	r3, [pc, #248]	@ (8007638 <state_machine+0x8c8>)
 8007540:	885b      	ldrh	r3, [r3, #2]
 8007542:	2b69      	cmp	r3, #105	@ 0x69
 8007544:	d908      	bls.n	8007558 <state_machine+0x7e8>
 8007546:	4b3c      	ldr	r3, [pc, #240]	@ (8007638 <state_machine+0x8c8>)
 8007548:	885b      	ldrh	r3, [r3, #2]
 800754a:	2b90      	cmp	r3, #144	@ 0x90
 800754c:	d804      	bhi.n	8007558 <state_machine+0x7e8>
		{
			Si468x_dab_get_announcement_info();
 800754e:	f107 0308 	add.w	r3, r7, #8
 8007552:	4618      	mov	r0, r3
 8007554:	f7fb fbde 	bl	8002d14 <Si468x_dab_get_announcement_info>
		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8007558:	4b37      	ldr	r3, [pc, #220]	@ (8007638 <state_machine+0x8c8>)
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	2b05      	cmp	r3, #5
 800755e:	d911      	bls.n	8007584 <state_machine+0x814>
 8007560:	4b35      	ldr	r3, [pc, #212]	@ (8007638 <state_machine+0x8c8>)
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	2b9c      	cmp	r3, #156	@ 0x9c
 8007566:	d80d      	bhi.n	8007584 <state_machine+0x814>
 8007568:	4b33      	ldr	r3, [pc, #204]	@ (8007638 <state_machine+0x8c8>)
 800756a:	885b      	ldrh	r3, [r3, #2]
 800756c:	2b96      	cmp	r3, #150	@ 0x96
 800756e:	d909      	bls.n	8007584 <state_machine+0x814>
 8007570:	4b31      	ldr	r3, [pc, #196]	@ (8007638 <state_machine+0x8c8>)
 8007572:	885b      	ldrh	r3, [r3, #2]
 8007574:	2bbd      	cmp	r3, #189	@ 0xbd
 8007576:	d805      	bhi.n	8007584 <state_machine+0x814>
		{
			state_change_flag = state_change_started_not_completed;
 8007578:	4b2c      	ldr	r3, [pc, #176]	@ (800762c <state_machine+0x8bc>)
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 800757e:	4b30      	ldr	r3, [pc, #192]	@ (8007640 <state_machine+0x8d0>)
 8007580:	2202      	movs	r2, #2
 8007582:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling -- temporary as DAB get announcement support info
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8007584:	4b2c      	ldr	r3, [pc, #176]	@ (8007638 <state_machine+0x8c8>)
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	2ba3      	cmp	r3, #163	@ 0xa3
 800758a:	d91c      	bls.n	80075c6 <state_machine+0x856>
 800758c:	4b2a      	ldr	r3, [pc, #168]	@ (8007638 <state_machine+0x8c8>)
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8007594:	d817      	bhi.n	80075c6 <state_machine+0x856>
 8007596:	4b28      	ldr	r3, [pc, #160]	@ (8007638 <state_machine+0x8c8>)
 8007598:	885b      	ldrh	r3, [r3, #2]
 800759a:	2b96      	cmp	r3, #150	@ 0x96
 800759c:	d913      	bls.n	80075c6 <state_machine+0x856>
 800759e:	4b26      	ldr	r3, [pc, #152]	@ (8007638 <state_machine+0x8c8>)
 80075a0:	885b      	ldrh	r3, [r3, #2]
 80075a2:	2bbd      	cmp	r3, #189	@ 0xbd
 80075a4:	d80f      	bhi.n	80075c6 <state_machine+0x856>
		{

			Si468x_dab_get_announcement_support_info(services_list_to_display[dab_management_to_display.actual_station].service_id);
 80075a6:	4b28      	ldr	r3, [pc, #160]	@ (8007648 <state_machine+0x8d8>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4b26      	ldr	r3, [pc, #152]	@ (8007644 <state_machine+0x8d4>)
 80075ac:	78db      	ldrb	r3, [r3, #3]
 80075ae:	4619      	mov	r1, r3
 80075b0:	2334      	movs	r3, #52	@ 0x34
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	6a1a      	ldr	r2, [r3, #32]
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4611      	mov	r1, r2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fb fced 	bl	8002fa0 <Si468x_dab_get_announcement_support_info>
		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80075c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007638 <state_machine+0x8c8>)
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d911      	bls.n	80075f2 <state_machine+0x882>
 80075ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007638 <state_machine+0x8c8>)
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	2b9c      	cmp	r3, #156	@ 0x9c
 80075d4:	d80d      	bhi.n	80075f2 <state_machine+0x882>
 80075d6:	4b18      	ldr	r3, [pc, #96]	@ (8007638 <state_machine+0x8c8>)
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	2bc3      	cmp	r3, #195	@ 0xc3
 80075dc:	d909      	bls.n	80075f2 <state_machine+0x882>
 80075de:	4b16      	ldr	r3, [pc, #88]	@ (8007638 <state_machine+0x8c8>)
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	2bea      	cmp	r3, #234	@ 0xea
 80075e4:	d805      	bhi.n	80075f2 <state_machine+0x882>
		{
			state_change_flag = state_change_started_not_completed;
 80075e6:	4b11      	ldr	r3, [pc, #68]	@ (800762c <state_machine+0x8bc>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 80075ec:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <state_machine+0x8d0>)
 80075ee:	2203      	movs	r2, #3
 80075f0:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (alarming)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80075f2:	4b11      	ldr	r3, [pc, #68]	@ (8007638 <state_machine+0x8c8>)
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	2ba3      	cmp	r3, #163	@ 0xa3
 80075f8:	f240 80b3 	bls.w	8007762 <state_machine+0x9f2>
 80075fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007638 <state_machine+0x8c8>)
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8007604:	f200 80ad 	bhi.w	8007762 <state_machine+0x9f2>
 8007608:	4b0b      	ldr	r3, [pc, #44]	@ (8007638 <state_machine+0x8c8>)
 800760a:	885b      	ldrh	r3, [r3, #2]
 800760c:	2bc3      	cmp	r3, #195	@ 0xc3
 800760e:	f240 80a8 	bls.w	8007762 <state_machine+0x9f2>
 8007612:	4b09      	ldr	r3, [pc, #36]	@ (8007638 <state_machine+0x8c8>)
 8007614:	885b      	ldrh	r3, [r3, #2]
 8007616:	2bea      	cmp	r3, #234	@ 0xea
 8007618:	f200 80a3 	bhi.w	8007762 <state_machine+0x9f2>
		{
			state_change_flag = state_change_started_not_completed;
 800761c:	4b03      	ldr	r3, [pc, #12]	@ (800762c <state_machine+0x8bc>)
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
			system_state = alarming;
 8007622:	4b07      	ldr	r3, [pc, #28]	@ (8007640 <state_machine+0x8d0>)
 8007624:	2205      	movs	r2, #5
 8007626:	701a      	strb	r2, [r3, #0]
		}


		break;
 8007628:	e09b      	b.n	8007762 <state_machine+0x9f2>
 800762a:	bf00      	nop
 800762c:	200070e5 	.word	0x200070e5
 8007630:	20000150 	.word	0x20000150
 8007634:	20007145 	.word	0x20007145
 8007638:	200070ec 	.word	0x200070ec
 800763c:	20007144 	.word	0x20007144
 8007640:	200070e4 	.word	0x200070e4
 8007644:	20007118 	.word	0x20007118
 8007648:	20007128 	.word	0x20007128

	case alarming:
		if(state_change_flag == state_change_started_not_completed)
 800764c:	4b48      	ldr	r3, [pc, #288]	@ (8007770 <state_machine+0xa00>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <state_machine+0x8ee>
		{
			Display_alarming_screen_background();
 8007654:	f7fe fcc2 	bl	8005fdc <Display_alarming_screen_background>
			//scan_cancel_flag = 0;
			state_change_flag = state_change_completed;
 8007658:	4b45      	ldr	r3, [pc, #276]	@ (8007770 <state_machine+0xa00>)
 800765a:	2201      	movs	r2, #1
 800765c:	701a      	strb	r2, [r3, #0]
		}

		//Display_settings_screen_data(dab_management_to_display);

		//Alarming by DLS button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 43 && touch_coordinates.y < 114)
 800765e:	4b45      	ldr	r3, [pc, #276]	@ (8007774 <state_machine+0xa04>)
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	2b05      	cmp	r3, #5
 8007664:	d90d      	bls.n	8007682 <state_machine+0x912>
 8007666:	4b43      	ldr	r3, [pc, #268]	@ (8007774 <state_machine+0xa04>)
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	2b9c      	cmp	r3, #156	@ 0x9c
 800766c:	d809      	bhi.n	8007682 <state_machine+0x912>
 800766e:	4b41      	ldr	r3, [pc, #260]	@ (8007774 <state_machine+0xa04>)
 8007670:	885b      	ldrh	r3, [r3, #2]
 8007672:	2b2b      	cmp	r3, #43	@ 0x2b
 8007674:	d905      	bls.n	8007682 <state_machine+0x912>
 8007676:	4b3f      	ldr	r3, [pc, #252]	@ (8007774 <state_machine+0xa04>)
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	2b71      	cmp	r3, #113	@ 0x71
 800767c:	d801      	bhi.n	8007682 <state_machine+0x912>
		{
			Alarming_Mode_1_On();
 800767e:	f7fc fdb1 	bl	80041e4 <Alarming_Mode_1_On>
		}

		//Alarming by ...1 button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 43 && touch_coordinates.y < 114)
 8007682:	4b3c      	ldr	r3, [pc, #240]	@ (8007774 <state_machine+0xa04>)
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	2ba3      	cmp	r3, #163	@ 0xa3
 8007688:	d90e      	bls.n	80076a8 <state_machine+0x938>
 800768a:	4b3a      	ldr	r3, [pc, #232]	@ (8007774 <state_machine+0xa04>)
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8007692:	d809      	bhi.n	80076a8 <state_machine+0x938>
 8007694:	4b37      	ldr	r3, [pc, #220]	@ (8007774 <state_machine+0xa04>)
 8007696:	885b      	ldrh	r3, [r3, #2]
 8007698:	2b2b      	cmp	r3, #43	@ 0x2b
 800769a:	d905      	bls.n	80076a8 <state_machine+0x938>
 800769c:	4b35      	ldr	r3, [pc, #212]	@ (8007774 <state_machine+0xa04>)
 800769e:	885b      	ldrh	r3, [r3, #2]
 80076a0:	2b71      	cmp	r3, #113	@ 0x71
 80076a2:	d801      	bhi.n	80076a8 <state_machine+0x938>
		{
			Alarming_Mode_2_On();
 80076a4:	f7fc fdb0 	bl	8004208 <Alarming_Mode_2_On>
		}

		//Alarming by ...2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 119 && touch_coordinates.y < 190)
 80076a8:	4b32      	ldr	r3, [pc, #200]	@ (8007774 <state_machine+0xa04>)
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	2b05      	cmp	r3, #5
 80076ae:	d90d      	bls.n	80076cc <state_machine+0x95c>
 80076b0:	4b30      	ldr	r3, [pc, #192]	@ (8007774 <state_machine+0xa04>)
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	2b9c      	cmp	r3, #156	@ 0x9c
 80076b6:	d809      	bhi.n	80076cc <state_machine+0x95c>
 80076b8:	4b2e      	ldr	r3, [pc, #184]	@ (8007774 <state_machine+0xa04>)
 80076ba:	885b      	ldrh	r3, [r3, #2]
 80076bc:	2b77      	cmp	r3, #119	@ 0x77
 80076be:	d905      	bls.n	80076cc <state_machine+0x95c>
 80076c0:	4b2c      	ldr	r3, [pc, #176]	@ (8007774 <state_machine+0xa04>)
 80076c2:	885b      	ldrh	r3, [r3, #2]
 80076c4:	2bbd      	cmp	r3, #189	@ 0xbd
 80076c6:	d801      	bhi.n	80076cc <state_machine+0x95c>
		{
			Alarming_Mode_3_On();
 80076c8:	f7fc fdb0 	bl	800422c <Alarming_Mode_3_On>
		}

		//No alarming - normal mode button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 119 && touch_coordinates.y < 190)
 80076cc:	4b29      	ldr	r3, [pc, #164]	@ (8007774 <state_machine+0xa04>)
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	2ba3      	cmp	r3, #163	@ 0xa3
 80076d2:	d90e      	bls.n	80076f2 <state_machine+0x982>
 80076d4:	4b27      	ldr	r3, [pc, #156]	@ (8007774 <state_machine+0xa04>)
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80076dc:	d809      	bhi.n	80076f2 <state_machine+0x982>
 80076de:	4b25      	ldr	r3, [pc, #148]	@ (8007774 <state_machine+0xa04>)
 80076e0:	885b      	ldrh	r3, [r3, #2]
 80076e2:	2b77      	cmp	r3, #119	@ 0x77
 80076e4:	d905      	bls.n	80076f2 <state_machine+0x982>
 80076e6:	4b23      	ldr	r3, [pc, #140]	@ (8007774 <state_machine+0xa04>)
 80076e8:	885b      	ldrh	r3, [r3, #2]
 80076ea:	2bbd      	cmp	r3, #189	@ 0xbd
 80076ec:	d801      	bhi.n	80076f2 <state_machine+0x982>
		{
			Alarming_Off();
 80076ee:	f7fc fdaf 	bl	8004250 <Alarming_Off>
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80076f2:	4b20      	ldr	r3, [pc, #128]	@ (8007774 <state_machine+0xa04>)
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d911      	bls.n	800771e <state_machine+0x9ae>
 80076fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007774 <state_machine+0xa04>)
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	2b9c      	cmp	r3, #156	@ 0x9c
 8007700:	d80d      	bhi.n	800771e <state_machine+0x9ae>
 8007702:	4b1c      	ldr	r3, [pc, #112]	@ (8007774 <state_machine+0xa04>)
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	2bc3      	cmp	r3, #195	@ 0xc3
 8007708:	d909      	bls.n	800771e <state_machine+0x9ae>
 800770a:	4b1a      	ldr	r3, [pc, #104]	@ (8007774 <state_machine+0xa04>)
 800770c:	885b      	ldrh	r3, [r3, #2]
 800770e:	2bea      	cmp	r3, #234	@ 0xea
 8007710:	d805      	bhi.n	800771e <state_machine+0x9ae>
		{
			state_change_flag = state_change_started_not_completed;
 8007712:	4b17      	ldr	r3, [pc, #92]	@ (8007770 <state_machine+0xa00>)
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8007718:	4b17      	ldr	r3, [pc, #92]	@ (8007778 <state_machine+0xa08>)
 800771a:	2204      	movs	r2, #4
 800771c:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800771e:	4b15      	ldr	r3, [pc, #84]	@ (8007774 <state_machine+0xa04>)
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	2ba3      	cmp	r3, #163	@ 0xa3
 8007724:	d91f      	bls.n	8007766 <state_machine+0x9f6>
 8007726:	4b13      	ldr	r3, [pc, #76]	@ (8007774 <state_machine+0xa04>)
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800772e:	d81a      	bhi.n	8007766 <state_machine+0x9f6>
 8007730:	4b10      	ldr	r3, [pc, #64]	@ (8007774 <state_machine+0xa04>)
 8007732:	885b      	ldrh	r3, [r3, #2]
 8007734:	2bc3      	cmp	r3, #195	@ 0xc3
 8007736:	d916      	bls.n	8007766 <state_machine+0x9f6>
 8007738:	4b0e      	ldr	r3, [pc, #56]	@ (8007774 <state_machine+0xa04>)
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	2bea      	cmp	r3, #234	@ 0xea
 800773e:	d812      	bhi.n	8007766 <state_machine+0x9f6>
		{
			state_change_flag = state_change_started_not_completed;
 8007740:	4b0b      	ldr	r3, [pc, #44]	@ (8007770 <state_machine+0xa00>)
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8007746:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <state_machine+0xa08>)
 8007748:	2200      	movs	r2, #0
 800774a:	701a      	strb	r2, [r3, #0]
		}


		break;
 800774c:	e00b      	b.n	8007766 <state_machine+0x9f6>

	default:
		break;
 800774e:	bf00      	nop
 8007750:	e00a      	b.n	8007768 <state_machine+0x9f8>
		break;
 8007752:	bf00      	nop
 8007754:	e008      	b.n	8007768 <state_machine+0x9f8>
		break;
 8007756:	bf00      	nop
 8007758:	e006      	b.n	8007768 <state_machine+0x9f8>
		break;
 800775a:	bf00      	nop
 800775c:	e004      	b.n	8007768 <state_machine+0x9f8>
		break;
 800775e:	bf00      	nop
 8007760:	e002      	b.n	8007768 <state_machine+0x9f8>
		break;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <state_machine+0x9f8>
		break;
 8007766:	bf00      	nop
	}
}
 8007768:	bf00      	nop
 800776a:	3744      	adds	r7, #68	@ 0x44
 800776c:	46bd      	mov	sp, r7
 800776e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007770:	200070e5 	.word	0x200070e5
 8007774:	200070ec 	.word	0x200070ec
 8007778:	200070e4 	.word	0x200070e4

0800777c <set_system_state>:
{
	return system_state;
}

void set_system_state(system_state_t system_state_to_set)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	71fb      	strb	r3, [r7, #7]
	system_state = system_state_to_set;
 8007786:	4a04      	ldr	r2, [pc, #16]	@ (8007798 <set_system_state+0x1c>)
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	7013      	strb	r3, [r2, #0]
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	200070e4 	.word	0x200070e4

0800779c <set_playing_state>:
{
	return playing_state;
}

void set_playing_state(playing_state_t playing_state_to_set)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]
	playing_state = playing_state_to_set;
 80077a6:	4a04      	ldr	r2, [pc, #16]	@ (80077b8 <set_playing_state+0x1c>)
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	7013      	strb	r3, [r2, #0]
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	20000150 	.word	0x20000150

080077bc <set_state_change_flag>:
{
	return state_change_flag;
}

void set_state_change_flag(state_change_flag_t state_change_flag_to_set)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	71fb      	strb	r3, [r7, #7]
	state_change_flag = state_change_flag_to_set;
 80077c6:	4a04      	ldr	r2, [pc, #16]	@ (80077d8 <set_state_change_flag+0x1c>)
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	7013      	strb	r3, [r2, #0]
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	200070e5 	.word	0x200070e5

080077dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
 80077e6:	4b10      	ldr	r3, [pc, #64]	@ (8007828 <HAL_MspInit+0x4c>)
 80077e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ea:	4a0f      	ldr	r2, [pc, #60]	@ (8007828 <HAL_MspInit+0x4c>)
 80077ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80077f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007828 <HAL_MspInit+0x4c>)
 80077f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077fe:	2300      	movs	r3, #0
 8007800:	603b      	str	r3, [r7, #0]
 8007802:	4b09      	ldr	r3, [pc, #36]	@ (8007828 <HAL_MspInit+0x4c>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	4a08      	ldr	r2, [pc, #32]	@ (8007828 <HAL_MspInit+0x4c>)
 8007808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800780c:	6413      	str	r3, [r2, #64]	@ 0x40
 800780e:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <HAL_MspInit+0x4c>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40023800 	.word	0x40023800

0800782c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <NMI_Handler+0x4>

08007834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007838:	bf00      	nop
 800783a:	e7fd      	b.n	8007838 <HardFault_Handler+0x4>

0800783c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007840:	bf00      	nop
 8007842:	e7fd      	b.n	8007840 <MemManage_Handler+0x4>

08007844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007844:	b480      	push	{r7}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007848:	bf00      	nop
 800784a:	e7fd      	b.n	8007848 <BusFault_Handler+0x4>

0800784c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <UsageFault_Handler+0x4>

08007854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007858:	bf00      	nop
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007862:	b480      	push	{r7}
 8007864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007866:	bf00      	nop
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007874:	bf00      	nop
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007882:	f000 fd23 	bl	80082cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007890:	4802      	ldr	r0, [pc, #8]	@ (800789c <DMA1_Stream4_IRQHandler+0x10>)
 8007892:	f000 ff41 	bl	8008718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007896:	bf00      	nop
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20007084 	.word	0x20007084

080078a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80078a4:	4802      	ldr	r0, [pc, #8]	@ (80078b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80078a6:	f005 fc56 	bl	800d156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80078aa:	bf00      	nop
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20007190 	.word	0x20007190

080078b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80078b8:	4802      	ldr	r0, [pc, #8]	@ (80078c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80078ba:	f005 fc4c 	bl	800d156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80078be:	bf00      	nop
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	200071d8 	.word	0x200071d8

080078c8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80078cc:	4802      	ldr	r0, [pc, #8]	@ (80078d8 <SPI2_IRQHandler+0x10>)
 80078ce:	f005 f8e5 	bl	800ca9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80078d2:	bf00      	nop
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	2000702c 	.word	0x2000702c

080078dc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80078e0:	4802      	ldr	r0, [pc, #8]	@ (80078ec <I2C3_EV_IRQHandler+0x10>)
 80078e2:	f001 ff95 	bl	8009810 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80078e6:	bf00      	nop
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20006f80 	.word	0x20006f80

080078f0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80078f4:	4802      	ldr	r0, [pc, #8]	@ (8007900 <I2C3_ER_IRQHandler+0x10>)
 80078f6:	f002 f8fc 	bl	8009af2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80078fa:	bf00      	nop
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20006f80 	.word	0x20006f80

08007904 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800791c:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <SystemInit+0x20>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007922:	4a05      	ldr	r2, [pc, #20]	@ (8007938 <SystemInit+0x20>)
 8007924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800792c:	bf00      	nop
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	e000ed00 	.word	0xe000ed00

0800793c <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	@ 0x28
 8007940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007942:	f107 0320 	add.w	r3, r7, #32
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	605a      	str	r2, [r3, #4]
 8007954:	609a      	str	r2, [r3, #8]
 8007956:	60da      	str	r2, [r3, #12]
 8007958:	611a      	str	r2, [r3, #16]
 800795a:	615a      	str	r2, [r3, #20]
 800795c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800795e:	4b22      	ldr	r3, [pc, #136]	@ (80079e8 <MX_TIM3_Init+0xac>)
 8007960:	4a22      	ldr	r2, [pc, #136]	@ (80079ec <MX_TIM3_Init+0xb0>)
 8007962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007964:	4b20      	ldr	r3, [pc, #128]	@ (80079e8 <MX_TIM3_Init+0xac>)
 8007966:	2200      	movs	r2, #0
 8007968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800796a:	4b1f      	ldr	r3, [pc, #124]	@ (80079e8 <MX_TIM3_Init+0xac>)
 800796c:	2200      	movs	r2, #0
 800796e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007970:	4b1d      	ldr	r3, [pc, #116]	@ (80079e8 <MX_TIM3_Init+0xac>)
 8007972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007976:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007978:	4b1b      	ldr	r3, [pc, #108]	@ (80079e8 <MX_TIM3_Init+0xac>)
 800797a:	2200      	movs	r2, #0
 800797c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800797e:	4b1a      	ldr	r3, [pc, #104]	@ (80079e8 <MX_TIM3_Init+0xac>)
 8007980:	2200      	movs	r2, #0
 8007982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007984:	4818      	ldr	r0, [pc, #96]	@ (80079e8 <MX_TIM3_Init+0xac>)
 8007986:	f005 fb97 	bl	800d0b8 <HAL_TIM_PWM_Init>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007990:	f7ff f8c4 	bl	8006b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007994:	2300      	movs	r3, #0
 8007996:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007998:	2300      	movs	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800799c:	f107 0320 	add.w	r3, r7, #32
 80079a0:	4619      	mov	r1, r3
 80079a2:	4811      	ldr	r0, [pc, #68]	@ (80079e8 <MX_TIM3_Init+0xac>)
 80079a4:	f006 f81a 	bl	800d9dc <HAL_TIMEx_MasterConfigSynchronization>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80079ae:	f7ff f8b5 	bl	8006b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80079b2:	2360      	movs	r3, #96	@ 0x60
 80079b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80079c2:	1d3b      	adds	r3, r7, #4
 80079c4:	2208      	movs	r2, #8
 80079c6:	4619      	mov	r1, r3
 80079c8:	4807      	ldr	r0, [pc, #28]	@ (80079e8 <MX_TIM3_Init+0xac>)
 80079ca:	f005 fccd 	bl	800d368 <HAL_TIM_PWM_ConfigChannel>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80079d4:	f7ff f8a2 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80079d8:	4803      	ldr	r0, [pc, #12]	@ (80079e8 <MX_TIM3_Init+0xac>)
 80079da:	f000 f8b9 	bl	8007b50 <HAL_TIM_MspPostInit>

}
 80079de:	bf00      	nop
 80079e0:	3728      	adds	r7, #40	@ 0x28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20007148 	.word	0x20007148
 80079ec:	40000400 	.word	0x40000400

080079f0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80079f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a30 <MX_TIM10_Init+0x40>)
 80079f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007a34 <MX_TIM10_Init+0x44>)
 80079f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <MX_TIM10_Init+0x40>)
 80079fc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8007a00:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a02:	4b0b      	ldr	r3, [pc, #44]	@ (8007a30 <MX_TIM10_Init+0x40>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8007a08:	4b09      	ldr	r3, [pc, #36]	@ (8007a30 <MX_TIM10_Init+0x40>)
 8007a0a:	f240 2257 	movw	r2, #599	@ 0x257
 8007a0e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <MX_TIM10_Init+0x40>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a16:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <MX_TIM10_Init+0x40>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8007a1c:	4804      	ldr	r0, [pc, #16]	@ (8007a30 <MX_TIM10_Init+0x40>)
 8007a1e:	f005 fa8b 	bl	800cf38 <HAL_TIM_Base_Init>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8007a28:	f7ff f878 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8007a2c:	bf00      	nop
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20007190 	.word	0x20007190
 8007a34:	40014400 	.word	0x40014400

08007a38 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a78 <MX_TIM11_Init+0x40>)
 8007a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8007a7c <MX_TIM11_Init+0x44>)
 8007a40:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8007a42:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <MX_TIM11_Init+0x40>)
 8007a44:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8007a48:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a78 <MX_TIM11_Init+0x40>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8007a50:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <MX_TIM11_Init+0x40>)
 8007a52:	f240 5213 	movw	r2, #1299	@ 0x513
 8007a56:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a58:	4b07      	ldr	r3, [pc, #28]	@ (8007a78 <MX_TIM11_Init+0x40>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a5e:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <MX_TIM11_Init+0x40>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007a64:	4804      	ldr	r0, [pc, #16]	@ (8007a78 <MX_TIM11_Init+0x40>)
 8007a66:	f005 fa67 	bl	800cf38 <HAL_TIM_Base_Init>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8007a70:	f7ff f854 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8007a74:	bf00      	nop
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	200071d8 	.word	0x200071d8
 8007a7c:	40014800 	.word	0x40014800

08007a80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8007abc <HAL_TIM_PWM_MspInit+0x3c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d10d      	bne.n	8007aae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac0 <HAL_TIM_PWM_MspInit+0x40>)
 8007a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9a:	4a09      	ldr	r2, [pc, #36]	@ (8007ac0 <HAL_TIM_PWM_MspInit+0x40>)
 8007a9c:	f043 0302 	orr.w	r3, r3, #2
 8007aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007aa2:	4b07      	ldr	r3, [pc, #28]	@ (8007ac0 <HAL_TIM_PWM_MspInit+0x40>)
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40023800 	.word	0x40023800

08007ac4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b44 <HAL_TIM_Base_MspInit+0x80>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d116      	bne.n	8007b04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	4b1b      	ldr	r3, [pc, #108]	@ (8007b48 <HAL_TIM_Base_MspInit+0x84>)
 8007adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ade:	4a1a      	ldr	r2, [pc, #104]	@ (8007b48 <HAL_TIM_Base_MspInit+0x84>)
 8007ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ae6:	4b18      	ldr	r3, [pc, #96]	@ (8007b48 <HAL_TIM_Base_MspInit+0x84>)
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007af2:	2200      	movs	r2, #0
 8007af4:	2100      	movs	r1, #0
 8007af6:	2019      	movs	r0, #25
 8007af8:	f000 fd07 	bl	800850a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007afc:	2019      	movs	r0, #25
 8007afe:	f000 fd20 	bl	8008542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8007b02:	e01a      	b.n	8007b3a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a10      	ldr	r2, [pc, #64]	@ (8007b4c <HAL_TIM_Base_MspInit+0x88>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d115      	bne.n	8007b3a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60bb      	str	r3, [r7, #8]
 8007b12:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <HAL_TIM_Base_MspInit+0x84>)
 8007b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b16:	4a0c      	ldr	r2, [pc, #48]	@ (8007b48 <HAL_TIM_Base_MspInit+0x84>)
 8007b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b48 <HAL_TIM_Base_MspInit+0x84>)
 8007b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b26:	60bb      	str	r3, [r7, #8]
 8007b28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	201a      	movs	r0, #26
 8007b30:	f000 fceb 	bl	800850a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007b34:	201a      	movs	r0, #26
 8007b36:	f000 fd04 	bl	8008542 <HAL_NVIC_EnableIRQ>
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40014400 	.word	0x40014400
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	40014800 	.word	0x40014800

08007b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b58:	f107 030c 	add.w	r3, r7, #12
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	605a      	str	r2, [r3, #4]
 8007b62:	609a      	str	r2, [r3, #8]
 8007b64:	60da      	str	r2, [r3, #12]
 8007b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a12      	ldr	r2, [pc, #72]	@ (8007bb8 <HAL_TIM_MspPostInit+0x68>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d11e      	bne.n	8007bb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b72:	2300      	movs	r3, #0
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	4b11      	ldr	r3, [pc, #68]	@ (8007bbc <HAL_TIM_MspPostInit+0x6c>)
 8007b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7a:	4a10      	ldr	r2, [pc, #64]	@ (8007bbc <HAL_TIM_MspPostInit+0x6c>)
 8007b7c:	f043 0304 	orr.w	r3, r3, #4
 8007b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b82:	4b0e      	ldr	r3, [pc, #56]	@ (8007bbc <HAL_TIM_MspPostInit+0x6c>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8007b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b94:	2302      	movs	r3, #2
 8007b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007ba4:	f107 030c 	add.w	r3, r7, #12
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4805      	ldr	r0, [pc, #20]	@ (8007bc0 <HAL_TIM_MspPostInit+0x70>)
 8007bac:	f000 fffe 	bl	8008bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007bb0:	bf00      	nop
 8007bb2:	3720      	adds	r7, #32
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40023800 	.word	0x40023800
 8007bc0:	40020800 	.word	0x40020800

08007bc4 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 8007bca:	4b24      	ldr	r3, [pc, #144]	@ (8007c5c <Touch_read+0x98>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2000      	movs	r0, #0
 8007bd0:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8007bd2:	4b22      	ldr	r3, [pc, #136]	@ (8007c5c <Touch_read+0x98>)
 8007bd4:	7c1b      	ldrb	r3, [r3, #16]
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da2d      	bge.n	8007c38 <Touch_read+0x74>
	{
		xtemp = TP_Read_XOY(0xD0);
 8007bdc:	20d0      	movs	r0, #208	@ 0xd0
 8007bde:	f000 f8e5 	bl	8007dac <TP_Read_XOY>
 8007be2:	4603      	mov	r3, r0
 8007be4:	461a      	mov	r2, r3
 8007be6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c60 <Touch_read+0x9c>)
 8007be8:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8007bea:	2090      	movs	r0, #144	@ 0x90
 8007bec:	f000 f8de 	bl	8007dac <TP_Read_XOY>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8007c64 <Touch_read+0xa0>)
 8007bf6:	801a      	strh	r2, [r3, #0]
			touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
			touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
		}
		else
		{
			touch_coordinates.x = 320 * (ytemp - 350) / (3900-350);
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c64 <Touch_read+0xa0>)
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	f5a3 72af 	sub.w	r2, r3, #350	@ 0x15e
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	019b      	lsls	r3, r3, #6
 8007c08:	4a17      	ldr	r2, [pc, #92]	@ (8007c68 <Touch_read+0xa4>)
 8007c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8007c0e:	441a      	add	r2, r3
 8007c10:	12d2      	asrs	r2, r2, #11
 8007c12:	17db      	asrs	r3, r3, #31
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	803b      	strh	r3, [r7, #0]
			touch_coordinates.y = 230 * (xtemp - 240) / (3800-230);
 8007c1a:	4b11      	ldr	r3, [pc, #68]	@ (8007c60 <Touch_read+0x9c>)
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	3bf0      	subs	r3, #240	@ 0xf0
 8007c20:	22e6      	movs	r2, #230	@ 0xe6
 8007c22:	fb02 f303 	mul.w	r3, r2, r3
 8007c26:	4a11      	ldr	r2, [pc, #68]	@ (8007c6c <Touch_read+0xa8>)
 8007c28:	fb82 1203 	smull	r1, r2, r2, r3
 8007c2c:	1252      	asrs	r2, r2, #9
 8007c2e:	17db      	asrs	r3, r3, #31
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	807b      	strh	r3, [r7, #2]
 8007c36:	e003      	b.n	8007c40 <Touch_read+0x7c>

	}

	else
	{
		touch_coordinates.x = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	607b      	str	r3, [r7, #4]
 8007c44:	2300      	movs	r3, #0
 8007c46:	88ba      	ldrh	r2, [r7, #4]
 8007c48:	f362 030f 	bfi	r3, r2, #0, #16
 8007c4c:	88fa      	ldrh	r2, [r7, #6]
 8007c4e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000158 	.word	0x20000158
 8007c60:	20007220 	.word	0x20007220
 8007c64:	20007222 	.word	0x20007222
 8007c68:	93afcf8b 	.word	0x93afcf8b
 8007c6c:	24b70025 	.word	0x24b70025

08007c70 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
 8007c82:	e021      	b.n	8007cc8 <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8007c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	da05      	bge.n	8007c98 <TP_Write_Byte+0x28>
			T_DIN_ON;
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	2120      	movs	r1, #32
 8007c90:	4811      	ldr	r0, [pc, #68]	@ (8007cd8 <TP_Write_Byte+0x68>)
 8007c92:	f001 f93f 	bl	8008f14 <HAL_GPIO_WritePin>
 8007c96:	e004      	b.n	8007ca2 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2120      	movs	r1, #32
 8007c9c:	480e      	ldr	r0, [pc, #56]	@ (8007cd8 <TP_Write_Byte+0x68>)
 8007c9e:	f001 f939 	bl	8008f14 <HAL_GPIO_WritePin>

		num <<= 1;
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2108      	movs	r1, #8
 8007cac:	480a      	ldr	r0, [pc, #40]	@ (8007cd8 <TP_Write_Byte+0x68>)
 8007cae:	f001 f931 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	f000 fb2a 	bl	800830c <HAL_Delay>
		T_CLK_ON;
 8007cb8:	2201      	movs	r2, #1
 8007cba:	2108      	movs	r1, #8
 8007cbc:	4806      	ldr	r0, [pc, #24]	@ (8007cd8 <TP_Write_Byte+0x68>)
 8007cbe:	f001 f929 	bl	8008f14 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b07      	cmp	r3, #7
 8007ccc:	d9da      	bls.n	8007c84 <TP_Write_Byte+0x14>
	}
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40020400 	.word	0x40020400

08007cdc <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2108      	movs	r1, #8
 8007cf2:	482c      	ldr	r0, [pc, #176]	@ (8007da4 <TP_Read_AD+0xc8>)
 8007cf4:	f001 f90e 	bl	8008f14 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2120      	movs	r1, #32
 8007cfc:	4829      	ldr	r0, [pc, #164]	@ (8007da4 <TP_Read_AD+0xc8>)
 8007cfe:	f001 f909 	bl	8008f14 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8007d02:	2200      	movs	r2, #0
 8007d04:	2180      	movs	r1, #128	@ 0x80
 8007d06:	4828      	ldr	r0, [pc, #160]	@ (8007da8 <TP_Read_AD+0xcc>)
 8007d08:	f001 f904 	bl	8008f14 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff ffae 	bl	8007c70 <TP_Write_Byte>
	HAL_Delay(1);
 8007d14:	2001      	movs	r0, #1
 8007d16:	f000 faf9 	bl	800830c <HAL_Delay>
	T_CLK_OFF;
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2108      	movs	r1, #8
 8007d1e:	4821      	ldr	r0, [pc, #132]	@ (8007da4 <TP_Read_AD+0xc8>)
 8007d20:	f001 f8f8 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007d24:	2001      	movs	r0, #1
 8007d26:	f000 faf1 	bl	800830c <HAL_Delay>
	T_CLK_ON;
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	2108      	movs	r1, #8
 8007d2e:	481d      	ldr	r0, [pc, #116]	@ (8007da4 <TP_Read_AD+0xc8>)
 8007d30:	f001 f8f0 	bl	8008f14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007d34:	2001      	movs	r0, #1
 8007d36:	f000 fae9 	bl	800830c <HAL_Delay>
	T_CLK_OFF;
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2108      	movs	r1, #8
 8007d3e:	4819      	ldr	r0, [pc, #100]	@ (8007da4 <TP_Read_AD+0xc8>)
 8007d40:	f001 f8e8 	bl	8008f14 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
 8007d48:	e01c      	b.n	8007d84 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 8007d4a:	89bb      	ldrh	r3, [r7, #12]
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8007d50:	2200      	movs	r2, #0
 8007d52:	2108      	movs	r1, #8
 8007d54:	4813      	ldr	r0, [pc, #76]	@ (8007da4 <TP_Read_AD+0xc8>)
 8007d56:	f001 f8dd 	bl	8008f14 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	f000 fad6 	bl	800830c <HAL_Delay>
		T_CLK_ON;
 8007d60:	2201      	movs	r2, #1
 8007d62:	2108      	movs	r1, #8
 8007d64:	480f      	ldr	r0, [pc, #60]	@ (8007da4 <TP_Read_AD+0xc8>)
 8007d66:	f001 f8d5 	bl	8008f14 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8007d6a:	2110      	movs	r1, #16
 8007d6c:	480d      	ldr	r0, [pc, #52]	@ (8007da4 <TP_Read_AD+0xc8>)
 8007d6e:	f001 f8b9 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <TP_Read_AD+0xa2>
 8007d78:	89bb      	ldrh	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	3301      	adds	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d9df      	bls.n	8007d4a <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 8007d8a:	89bb      	ldrh	r3, [r7, #12]
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8007d90:	2201      	movs	r2, #1
 8007d92:	2180      	movs	r1, #128	@ 0x80
 8007d94:	4804      	ldr	r0, [pc, #16]	@ (8007da8 <TP_Read_AD+0xcc>)
 8007d96:	f001 f8bd 	bl	8008f14 <HAL_GPIO_WritePin>
	return(Num);
 8007d9a:	89bb      	ldrh	r3, [r7, #12]

}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	40020400 	.word	0x40020400
 8007da8:	40020c00 	.word	0x40020c00

08007dac <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ff8f 	bl	8007cdc <TP_Read_AD>
}
 8007dbe:	bf00      	nop
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8007dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e04 <TP_Read_XY+0x3c>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff ffe8 	bl	8007dac <TP_Read_XOY>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8007de0:	4b09      	ldr	r3, [pc, #36]	@ (8007e08 <TP_Read_XY+0x40>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff ffe1 	bl	8007dac <TP_Read_XOY>
 8007dea:	4603      	mov	r3, r0
 8007dec:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	89fa      	ldrh	r2, [r7, #14]
 8007df2:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	89ba      	ldrh	r2, [r7, #12]
 8007df8:	801a      	strh	r2, [r3, #0]
	return 1;
 8007dfa:	2301      	movs	r3, #1
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	2000017c 	.word	0x2000017c
 8007e08:	2000017d 	.word	0x2000017d

08007e0c <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8007e16:	f107 0212 	add.w	r2, r7, #18
 8007e1a:	f107 0314 	add.w	r3, r7, #20
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff ffd1 	bl	8007dc8 <TP_Read_XY>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <TP_Read_XY2+0x28>
    	return(0);
 8007e30:	2300      	movs	r3, #0
 8007e32:	e049      	b.n	8007ec8 <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8007e34:	f107 020e 	add.w	r2, r7, #14
 8007e38:	f107 0310 	add.w	r3, r7, #16
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff ffc2 	bl	8007dc8 <TP_Read_XY>
 8007e44:	4603      	mov	r3, r0
 8007e46:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <TP_Read_XY2+0x46>
    	return(0);
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e03a      	b.n	8007ec8 <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8007e52:	8a3a      	ldrh	r2, [r7, #16]
 8007e54:	8abb      	ldrh	r3, [r7, #20]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d804      	bhi.n	8007e64 <TP_Read_XY2+0x58>
 8007e5a:	8a3b      	ldrh	r3, [r7, #16]
 8007e5c:	3331      	adds	r3, #49	@ 0x31
 8007e5e:	8aba      	ldrh	r2, [r7, #20]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	da08      	bge.n	8007e76 <TP_Read_XY2+0x6a>
 8007e64:	8aba      	ldrh	r2, [r7, #20]
 8007e66:	8a3b      	ldrh	r3, [r7, #16]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d82c      	bhi.n	8007ec6 <TP_Read_XY2+0xba>
 8007e6c:	8abb      	ldrh	r3, [r7, #20]
 8007e6e:	3331      	adds	r3, #49	@ 0x31
 8007e70:	8a3a      	ldrh	r2, [r7, #16]
 8007e72:	4293      	cmp	r3, r2
 8007e74:	db27      	blt.n	8007ec6 <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8007e76:	89fa      	ldrh	r2, [r7, #14]
 8007e78:	8a7b      	ldrh	r3, [r7, #18]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d804      	bhi.n	8007e88 <TP_Read_XY2+0x7c>
 8007e7e:	89fb      	ldrh	r3, [r7, #14]
 8007e80:	3331      	adds	r3, #49	@ 0x31
 8007e82:	8a7a      	ldrh	r2, [r7, #18]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	da08      	bge.n	8007e9a <TP_Read_XY2+0x8e>
 8007e88:	8a7a      	ldrh	r2, [r7, #18]
 8007e8a:	89fb      	ldrh	r3, [r7, #14]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d81a      	bhi.n	8007ec6 <TP_Read_XY2+0xba>
 8007e90:	8a7b      	ldrh	r3, [r7, #18]
 8007e92:	3331      	adds	r3, #49	@ 0x31
 8007e94:	89fa      	ldrh	r2, [r7, #14]
 8007e96:	4293      	cmp	r3, r2
 8007e98:	db15      	blt.n	8007ec6 <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8007e9a:	8abb      	ldrh	r3, [r7, #20]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	8a3b      	ldrh	r3, [r7, #16]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	0fda      	lsrs	r2, r3, #31
 8007ea4:	4413      	add	r3, r2
 8007ea6:	105b      	asrs	r3, r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8007eae:	8a7b      	ldrh	r3, [r7, #18]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	0fda      	lsrs	r2, r3, #31
 8007eb8:	4413      	add	r3, r2
 8007eba:	105b      	asrs	r3, r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	801a      	strh	r2, [r3, #0]
        return 1;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8007eda:	2140      	movs	r1, #64	@ 0x40
 8007edc:	483f      	ldr	r0, [pc, #252]	@ (8007fdc <TP_Scan+0x10c>)
 8007ede:	f001 f801 	bl	8008ee4 <HAL_GPIO_ReadPin>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d155      	bne.n	8007f94 <TP_Scan+0xc4>
	{
		if(tp)
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8007eee:	493c      	ldr	r1, [pc, #240]	@ (8007fe0 <TP_Scan+0x110>)
 8007ef0:	483c      	ldr	r0, [pc, #240]	@ (8007fe4 <TP_Scan+0x114>)
 8007ef2:	f7ff ff8b 	bl	8007e0c <TP_Read_XY2>
 8007ef6:	e03c      	b.n	8007f72 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8007ef8:	4939      	ldr	r1, [pc, #228]	@ (8007fe0 <TP_Scan+0x110>)
 8007efa:	483a      	ldr	r0, [pc, #232]	@ (8007fe4 <TP_Scan+0x114>)
 8007efc:	f7ff ff86 	bl	8007e0c <TP_Read_XY2>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d035      	beq.n	8007f72 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8007f06:	4b38      	ldr	r3, [pc, #224]	@ (8007fe8 <TP_Scan+0x118>)
 8007f08:	ed93 7a05 	vldr	s14, [r3, #20]
 8007f0c:	4b36      	ldr	r3, [pc, #216]	@ (8007fe8 <TP_Scan+0x118>)
 8007f0e:	899b      	ldrh	r3, [r3, #12]
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f1c:	4b32      	ldr	r3, [pc, #200]	@ (8007fe8 <TP_Scan+0x118>)
 8007f1e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f32:	ee17 3a90 	vmov	r3, s15
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe8 <TP_Scan+0x118>)
 8007f3a:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8007f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8007fe8 <TP_Scan+0x118>)
 8007f3e:	ed93 7a06 	vldr	s14, [r3, #24]
 8007f42:	4b29      	ldr	r3, [pc, #164]	@ (8007fe8 <TP_Scan+0x118>)
 8007f44:	89db      	ldrh	r3, [r3, #14]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f52:	4b25      	ldr	r3, [pc, #148]	@ (8007fe8 <TP_Scan+0x118>)
 8007f54:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f68:	ee17 3a90 	vmov	r3, s15
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe8 <TP_Scan+0x118>)
 8007f70:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8007f72:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe8 <TP_Scan+0x118>)
 8007f74:	7c1b      	ldrb	r3, [r3, #16]
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	db26      	blt.n	8007fca <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8007f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe8 <TP_Scan+0x118>)
 8007f7e:	22c0      	movs	r2, #192	@ 0xc0
 8007f80:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8007f82:	4b19      	ldr	r3, [pc, #100]	@ (8007fe8 <TP_Scan+0x118>)
 8007f84:	899a      	ldrh	r2, [r3, #12]
 8007f86:	4b18      	ldr	r3, [pc, #96]	@ (8007fe8 <TP_Scan+0x118>)
 8007f88:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 8007f8a:	4b17      	ldr	r3, [pc, #92]	@ (8007fe8 <TP_Scan+0x118>)
 8007f8c:	89da      	ldrh	r2, [r3, #14]
 8007f8e:	4b16      	ldr	r3, [pc, #88]	@ (8007fe8 <TP_Scan+0x118>)
 8007f90:	815a      	strh	r2, [r3, #10]
 8007f92:	e01a      	b.n	8007fca <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8007f94:	4b14      	ldr	r3, [pc, #80]	@ (8007fe8 <TP_Scan+0x118>)
 8007f96:	7c1b      	ldrb	r3, [r3, #16]
 8007f98:	b25b      	sxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da07      	bge.n	8007fae <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 8007f9e:	4b12      	ldr	r3, [pc, #72]	@ (8007fe8 <TP_Scan+0x118>)
 8007fa0:	7c1b      	ldrb	r3, [r3, #16]
 8007fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe8 <TP_Scan+0x118>)
 8007faa:	741a      	strb	r2, [r3, #16]
 8007fac:	e00d      	b.n	8007fca <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 8007fae:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe8 <TP_Scan+0x118>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8007fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe8 <TP_Scan+0x118>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 8007fba:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe8 <TP_Scan+0x118>)
 8007fbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fc0:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 8007fc2:	4b09      	ldr	r3, [pc, #36]	@ (8007fe8 <TP_Scan+0x118>)
 8007fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fc8:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 8007fca:	4b07      	ldr	r3, [pc, #28]	@ (8007fe8 <TP_Scan+0x118>)
 8007fcc:	7c1b      	ldrb	r3, [r3, #16]
 8007fce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007fd2:	b2db      	uxtb	r3, r3
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40020c00 	.word	0x40020c00
 8007fe0:	20000166 	.word	0x20000166
 8007fe4:	20000164 	.word	0x20000164
 8007fe8:	20000158 	.word	0x20000158

08007fec <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007ff0:	4b11      	ldr	r3, [pc, #68]	@ (8008038 <MX_UART5_Init+0x4c>)
 8007ff2:	4a12      	ldr	r2, [pc, #72]	@ (800803c <MX_UART5_Init+0x50>)
 8007ff4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8007ff6:	4b10      	ldr	r3, [pc, #64]	@ (8008038 <MX_UART5_Init+0x4c>)
 8007ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007ffc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8008038 <MX_UART5_Init+0x4c>)
 8008000:	2200      	movs	r2, #0
 8008002:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8008004:	4b0c      	ldr	r3, [pc, #48]	@ (8008038 <MX_UART5_Init+0x4c>)
 8008006:	2200      	movs	r2, #0
 8008008:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800800a:	4b0b      	ldr	r3, [pc, #44]	@ (8008038 <MX_UART5_Init+0x4c>)
 800800c:	2200      	movs	r2, #0
 800800e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008010:	4b09      	ldr	r3, [pc, #36]	@ (8008038 <MX_UART5_Init+0x4c>)
 8008012:	220c      	movs	r2, #12
 8008014:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008016:	4b08      	ldr	r3, [pc, #32]	@ (8008038 <MX_UART5_Init+0x4c>)
 8008018:	2200      	movs	r2, #0
 800801a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800801c:	4b06      	ldr	r3, [pc, #24]	@ (8008038 <MX_UART5_Init+0x4c>)
 800801e:	2200      	movs	r2, #0
 8008020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8008022:	4805      	ldr	r0, [pc, #20]	@ (8008038 <MX_UART5_Init+0x4c>)
 8008024:	f005 fd6a 	bl	800dafc <HAL_UART_Init>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800802e:	f7fe fd75 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8008032:	bf00      	nop
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20007224 	.word	0x20007224
 800803c:	40005000 	.word	0x40005000

08008040 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008044:	4b11      	ldr	r3, [pc, #68]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 8008046:	4a12      	ldr	r2, [pc, #72]	@ (8008090 <MX_USART3_UART_Init+0x50>)
 8008048:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800804a:	4b10      	ldr	r3, [pc, #64]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 800804c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008050:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008052:	4b0e      	ldr	r3, [pc, #56]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 8008054:	2200      	movs	r2, #0
 8008056:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008058:	4b0c      	ldr	r3, [pc, #48]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 800805a:	2200      	movs	r2, #0
 800805c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800805e:	4b0b      	ldr	r3, [pc, #44]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 8008060:	2200      	movs	r2, #0
 8008062:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008064:	4b09      	ldr	r3, [pc, #36]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 8008066:	220c      	movs	r2, #12
 8008068:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800806a:	4b08      	ldr	r3, [pc, #32]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 800806c:	2200      	movs	r2, #0
 800806e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008070:	4b06      	ldr	r3, [pc, #24]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 8008072:	2200      	movs	r2, #0
 8008074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008076:	4805      	ldr	r0, [pc, #20]	@ (800808c <MX_USART3_UART_Init+0x4c>)
 8008078:	f005 fd40 	bl	800dafc <HAL_UART_Init>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008082:	f7fe fd4b 	bl	8006b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008086:	bf00      	nop
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20007268 	.word	0x20007268
 8008090:	40004800 	.word	0x40004800

08008094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08c      	sub	sp, #48	@ 0x30
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800809c:	f107 031c 	add.w	r3, r7, #28
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	60da      	str	r2, [r3, #12]
 80080aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a42      	ldr	r2, [pc, #264]	@ (80081bc <HAL_UART_MspInit+0x128>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d14b      	bne.n	800814e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80080b6:	2300      	movs	r3, #0
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	4b41      	ldr	r3, [pc, #260]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080be:	4a40      	ldr	r2, [pc, #256]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 80080c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80080c6:	4b3e      	ldr	r3, [pc, #248]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 80080c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	4b3a      	ldr	r3, [pc, #232]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080da:	4a39      	ldr	r2, [pc, #228]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 80080dc:	f043 0304 	orr.w	r3, r3, #4
 80080e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80080e2:	4b37      	ldr	r3, [pc, #220]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80080ee:	2300      	movs	r3, #0
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	4b33      	ldr	r3, [pc, #204]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 80080f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f6:	4a32      	ldr	r2, [pc, #200]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 80080f8:	f043 0308 	orr.w	r3, r3, #8
 80080fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80080fe:	4b30      	ldr	r3, [pc, #192]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008102:	f003 0308 	and.w	r3, r3, #8
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800810a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800810e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008110:	2302      	movs	r3, #2
 8008112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008114:	2300      	movs	r3, #0
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008118:	2303      	movs	r3, #3
 800811a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800811c:	2308      	movs	r3, #8
 800811e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008120:	f107 031c 	add.w	r3, r7, #28
 8008124:	4619      	mov	r1, r3
 8008126:	4827      	ldr	r0, [pc, #156]	@ (80081c4 <HAL_UART_MspInit+0x130>)
 8008128:	f000 fd40 	bl	8008bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800812c:	2304      	movs	r3, #4
 800812e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008130:	2302      	movs	r3, #2
 8008132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008134:	2300      	movs	r3, #0
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008138:	2303      	movs	r3, #3
 800813a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800813c:	2308      	movs	r3, #8
 800813e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008140:	f107 031c 	add.w	r3, r7, #28
 8008144:	4619      	mov	r1, r3
 8008146:	4820      	ldr	r0, [pc, #128]	@ (80081c8 <HAL_UART_MspInit+0x134>)
 8008148:	f000 fd30 	bl	8008bac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800814c:	e031      	b.n	80081b2 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1e      	ldr	r2, [pc, #120]	@ (80081cc <HAL_UART_MspInit+0x138>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d12c      	bne.n	80081b2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	4b18      	ldr	r3, [pc, #96]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 800815e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008160:	4a17      	ldr	r2, [pc, #92]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 8008162:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008166:	6413      	str	r3, [r2, #64]	@ 0x40
 8008168:	4b15      	ldr	r3, [pc, #84]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 800816a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008174:	2300      	movs	r3, #0
 8008176:	60bb      	str	r3, [r7, #8]
 8008178:	4b11      	ldr	r3, [pc, #68]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 800817a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817c:	4a10      	ldr	r2, [pc, #64]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 800817e:	f043 0302 	orr.w	r3, r3, #2
 8008182:	6313      	str	r3, [r2, #48]	@ 0x30
 8008184:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <HAL_UART_MspInit+0x12c>)
 8008186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	60bb      	str	r3, [r7, #8]
 800818e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8008190:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008196:	2302      	movs	r3, #2
 8008198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819a:	2300      	movs	r3, #0
 800819c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800819e:	2303      	movs	r3, #3
 80081a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80081a2:	2307      	movs	r3, #7
 80081a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081a6:	f107 031c 	add.w	r3, r7, #28
 80081aa:	4619      	mov	r1, r3
 80081ac:	4808      	ldr	r0, [pc, #32]	@ (80081d0 <HAL_UART_MspInit+0x13c>)
 80081ae:	f000 fcfd 	bl	8008bac <HAL_GPIO_Init>
}
 80081b2:	bf00      	nop
 80081b4:	3730      	adds	r7, #48	@ 0x30
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40005000 	.word	0x40005000
 80081c0:	40023800 	.word	0x40023800
 80081c4:	40020800 	.word	0x40020800
 80081c8:	40020c00 	.word	0x40020c00
 80081cc:	40004800 	.word	0x40004800
 80081d0:	40020400 	.word	0x40020400

080081d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80081d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800820c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80081d8:	480d      	ldr	r0, [pc, #52]	@ (8008210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80081da:	490e      	ldr	r1, [pc, #56]	@ (8008214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80081dc:	4a0e      	ldr	r2, [pc, #56]	@ (8008218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80081de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80081e0:	e002      	b.n	80081e8 <LoopCopyDataInit>

080081e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80081e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80081e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80081e6:	3304      	adds	r3, #4

080081e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80081e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80081ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80081ec:	d3f9      	bcc.n	80081e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80081ee:	4a0b      	ldr	r2, [pc, #44]	@ (800821c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80081f0:	4c0b      	ldr	r4, [pc, #44]	@ (8008220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80081f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80081f4:	e001      	b.n	80081fa <LoopFillZerobss>

080081f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80081f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80081f8:	3204      	adds	r2, #4

080081fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80081fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80081fc:	d3fb      	bcc.n	80081f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80081fe:	f7ff fb8b 	bl	8007918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008202:	f006 f8a1 	bl	800e348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008206:	f7fe fbeb 	bl	80069e0 <main>
  bx  lr    
 800820a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800820c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008214:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8008218:	08037794 	.word	0x08037794
  ldr r2, =_sbss
 800821c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8008220:	200072b0 	.word	0x200072b0

08008224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008224:	e7fe      	b.n	8008224 <ADC_IRQHandler>
	...

08008228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800822c:	4b0e      	ldr	r3, [pc, #56]	@ (8008268 <HAL_Init+0x40>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a0d      	ldr	r2, [pc, #52]	@ (8008268 <HAL_Init+0x40>)
 8008232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008238:	4b0b      	ldr	r3, [pc, #44]	@ (8008268 <HAL_Init+0x40>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a0a      	ldr	r2, [pc, #40]	@ (8008268 <HAL_Init+0x40>)
 800823e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008244:	4b08      	ldr	r3, [pc, #32]	@ (8008268 <HAL_Init+0x40>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a07      	ldr	r2, [pc, #28]	@ (8008268 <HAL_Init+0x40>)
 800824a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800824e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008250:	2003      	movs	r0, #3
 8008252:	f000 f94f 	bl	80084f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008256:	200f      	movs	r0, #15
 8008258:	f000 f808 	bl	800826c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800825c:	f7ff fabe 	bl	80077dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	40023c00 	.word	0x40023c00

0800826c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008274:	4b12      	ldr	r3, [pc, #72]	@ (80082c0 <HAL_InitTick+0x54>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b12      	ldr	r3, [pc, #72]	@ (80082c4 <HAL_InitTick+0x58>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	4619      	mov	r1, r3
 800827e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008282:	fbb3 f3f1 	udiv	r3, r3, r1
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f967 	bl	800855e <HAL_SYSTICK_Config>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e00e      	b.n	80082b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b0f      	cmp	r3, #15
 800829e:	d80a      	bhi.n	80082b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80082a0:	2200      	movs	r2, #0
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	f000 f92f 	bl	800850a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80082ac:	4a06      	ldr	r2, [pc, #24]	@ (80082c8 <HAL_InitTick+0x5c>)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e000      	b.n	80082b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000154 	.word	0x20000154
 80082c4:	20000184 	.word	0x20000184
 80082c8:	20000180 	.word	0x20000180

080082cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80082d0:	4b06      	ldr	r3, [pc, #24]	@ (80082ec <HAL_IncTick+0x20>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	4b06      	ldr	r3, [pc, #24]	@ (80082f0 <HAL_IncTick+0x24>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4413      	add	r3, r2
 80082dc:	4a04      	ldr	r2, [pc, #16]	@ (80082f0 <HAL_IncTick+0x24>)
 80082de:	6013      	str	r3, [r2, #0]
}
 80082e0:	bf00      	nop
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20000184 	.word	0x20000184
 80082f0:	200072ac 	.word	0x200072ac

080082f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return uwTick;
 80082f8:	4b03      	ldr	r3, [pc, #12]	@ (8008308 <HAL_GetTick+0x14>)
 80082fa:	681b      	ldr	r3, [r3, #0]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	200072ac 	.word	0x200072ac

0800830c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008314:	f7ff ffee 	bl	80082f4 <HAL_GetTick>
 8008318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008324:	d005      	beq.n	8008332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008326:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <HAL_Delay+0x44>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008332:	bf00      	nop
 8008334:	f7ff ffde 	bl	80082f4 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	429a      	cmp	r2, r3
 8008342:	d8f7      	bhi.n	8008334 <HAL_Delay+0x28>
  {
  }
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000184 	.word	0x20000184

08008354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008364:	4b0c      	ldr	r3, [pc, #48]	@ (8008398 <__NVIC_SetPriorityGrouping+0x44>)
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008370:	4013      	ands	r3, r2
 8008372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800837c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008386:	4a04      	ldr	r2, [pc, #16]	@ (8008398 <__NVIC_SetPriorityGrouping+0x44>)
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	60d3      	str	r3, [r2, #12]
}
 800838c:	bf00      	nop
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	e000ed00 	.word	0xe000ed00

0800839c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083a0:	4b04      	ldr	r3, [pc, #16]	@ (80083b4 <__NVIC_GetPriorityGrouping+0x18>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	0a1b      	lsrs	r3, r3, #8
 80083a6:	f003 0307 	and.w	r3, r3, #7
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	e000ed00 	.word	0xe000ed00

080083b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	db0b      	blt.n	80083e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	f003 021f 	and.w	r2, r3, #31
 80083d0:	4907      	ldr	r1, [pc, #28]	@ (80083f0 <__NVIC_EnableIRQ+0x38>)
 80083d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	2001      	movs	r0, #1
 80083da:	fa00 f202 	lsl.w	r2, r0, r2
 80083de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	e000e100 	.word	0xe000e100

080083f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008404:	2b00      	cmp	r3, #0
 8008406:	db0a      	blt.n	800841e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	b2da      	uxtb	r2, r3
 800840c:	490c      	ldr	r1, [pc, #48]	@ (8008440 <__NVIC_SetPriority+0x4c>)
 800840e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008412:	0112      	lsls	r2, r2, #4
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	440b      	add	r3, r1
 8008418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800841c:	e00a      	b.n	8008434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	b2da      	uxtb	r2, r3
 8008422:	4908      	ldr	r1, [pc, #32]	@ (8008444 <__NVIC_SetPriority+0x50>)
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	3b04      	subs	r3, #4
 800842c:	0112      	lsls	r2, r2, #4
 800842e:	b2d2      	uxtb	r2, r2
 8008430:	440b      	add	r3, r1
 8008432:	761a      	strb	r2, [r3, #24]
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	e000e100 	.word	0xe000e100
 8008444:	e000ed00 	.word	0xe000ed00

08008448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008448:	b480      	push	{r7}
 800844a:	b089      	sub	sp, #36	@ 0x24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f1c3 0307 	rsb	r3, r3, #7
 8008462:	2b04      	cmp	r3, #4
 8008464:	bf28      	it	cs
 8008466:	2304      	movcs	r3, #4
 8008468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	3304      	adds	r3, #4
 800846e:	2b06      	cmp	r3, #6
 8008470:	d902      	bls.n	8008478 <NVIC_EncodePriority+0x30>
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	3b03      	subs	r3, #3
 8008476:	e000      	b.n	800847a <NVIC_EncodePriority+0x32>
 8008478:	2300      	movs	r3, #0
 800847a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	43da      	mvns	r2, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	401a      	ands	r2, r3
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008490:	f04f 31ff 	mov.w	r1, #4294967295
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	fa01 f303 	lsl.w	r3, r1, r3
 800849a:	43d9      	mvns	r1, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084a0:	4313      	orrs	r3, r2
         );
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3724      	adds	r7, #36	@ 0x24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084c0:	d301      	bcc.n	80084c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084c2:	2301      	movs	r3, #1
 80084c4:	e00f      	b.n	80084e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084c6:	4a0a      	ldr	r2, [pc, #40]	@ (80084f0 <SysTick_Config+0x40>)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084ce:	210f      	movs	r1, #15
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	f7ff ff8e 	bl	80083f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084d8:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <SysTick_Config+0x40>)
 80084da:	2200      	movs	r2, #0
 80084dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084de:	4b04      	ldr	r3, [pc, #16]	@ (80084f0 <SysTick_Config+0x40>)
 80084e0:	2207      	movs	r2, #7
 80084e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	e000e010 	.word	0xe000e010

080084f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff ff29 	bl	8008354 <__NVIC_SetPriorityGrouping>
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	4603      	mov	r3, r0
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800851c:	f7ff ff3e 	bl	800839c <__NVIC_GetPriorityGrouping>
 8008520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	68b9      	ldr	r1, [r7, #8]
 8008526:	6978      	ldr	r0, [r7, #20]
 8008528:	f7ff ff8e 	bl	8008448 <NVIC_EncodePriority>
 800852c:	4602      	mov	r2, r0
 800852e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ff5d 	bl	80083f4 <__NVIC_SetPriority>
}
 800853a:	bf00      	nop
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	4603      	mov	r3, r0
 800854a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800854c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff ff31 	bl	80083b8 <__NVIC_EnableIRQ>
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ffa2 	bl	80084b0 <SysTick_Config>
 800856c:	4603      	mov	r3, r0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008584:	f7ff feb6 	bl	80082f4 <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e099      	b.n	80086c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0201 	bic.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085b4:	e00f      	b.n	80085d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085b6:	f7ff fe9d 	bl	80082f4 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d908      	bls.n	80085d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2203      	movs	r2, #3
 80085ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e078      	b.n	80086c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e8      	bne.n	80085b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	4b38      	ldr	r3, [pc, #224]	@ (80086d0 <HAL_DMA_Init+0x158>)
 80085f0:	4013      	ands	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800860e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800861a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	2b04      	cmp	r3, #4
 800862e:	d107      	bne.n	8008640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008638:	4313      	orrs	r3, r2
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f023 0307 	bic.w	r3, r3, #7
 8008656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	4313      	orrs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008666:	2b04      	cmp	r3, #4
 8008668:	d117      	bne.n	800869a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00e      	beq.n	800869a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fa19 	bl	8008ab4 <DMA_CheckFifoParam>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2240      	movs	r2, #64	@ 0x40
 800868c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008696:	2301      	movs	r3, #1
 8008698:	e016      	b.n	80086c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f9d0 	bl	8008a48 <DMA_CalcBaseAndBitshift>
 80086a8:	4603      	mov	r3, r0
 80086aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b0:	223f      	movs	r2, #63	@ 0x3f
 80086b2:	409a      	lsls	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	f010803f 	.word	0xf010803f

080086d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d004      	beq.n	80086f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2280      	movs	r2, #128	@ 0x80
 80086ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e00c      	b.n	800870c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2205      	movs	r2, #5
 80086f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0201 	bic.w	r2, r2, #1
 8008708:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008724:	4b8e      	ldr	r3, [pc, #568]	@ (8008960 <HAL_DMA_IRQHandler+0x248>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a8e      	ldr	r2, [pc, #568]	@ (8008964 <HAL_DMA_IRQHandler+0x24c>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	0a9b      	lsrs	r3, r3, #10
 8008730:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008736:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008742:	2208      	movs	r2, #8
 8008744:	409a      	lsls	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4013      	ands	r3, r2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d01a      	beq.n	8008784 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d013      	beq.n	8008784 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0204 	bic.w	r2, r2, #4
 800876a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008770:	2208      	movs	r2, #8
 8008772:	409a      	lsls	r2, r3
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877c:	f043 0201 	orr.w	r2, r3, #1
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008788:	2201      	movs	r2, #1
 800878a:	409a      	lsls	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4013      	ands	r3, r2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d012      	beq.n	80087ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00b      	beq.n	80087ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087a6:	2201      	movs	r2, #1
 80087a8:	409a      	lsls	r2, r3
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b2:	f043 0202 	orr.w	r2, r3, #2
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087be:	2204      	movs	r2, #4
 80087c0:	409a      	lsls	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d012      	beq.n	80087f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00b      	beq.n	80087f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087dc:	2204      	movs	r2, #4
 80087de:	409a      	lsls	r2, r3
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e8:	f043 0204 	orr.w	r2, r3, #4
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087f4:	2210      	movs	r2, #16
 80087f6:	409a      	lsls	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d043      	beq.n	8008888 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d03c      	beq.n	8008888 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008812:	2210      	movs	r2, #16
 8008814:	409a      	lsls	r2, r3
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d018      	beq.n	800885a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d108      	bne.n	8008848 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d024      	beq.n	8008888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
 8008846:	e01f      	b.n	8008888 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01b      	beq.n	8008888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	4798      	blx	r3
 8008858:	e016      	b.n	8008888 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008864:	2b00      	cmp	r3, #0
 8008866:	d107      	bne.n	8008878 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0208 	bic.w	r2, r2, #8
 8008876:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800888c:	2220      	movs	r2, #32
 800888e:	409a      	lsls	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4013      	ands	r3, r2
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 808f 	beq.w	80089b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8087 	beq.w	80089b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ae:	2220      	movs	r2, #32
 80088b0:	409a      	lsls	r2, r3
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b05      	cmp	r3, #5
 80088c0:	d136      	bne.n	8008930 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0216 	bic.w	r2, r2, #22
 80088d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	695a      	ldr	r2, [r3, #20]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d103      	bne.n	80088f2 <HAL_DMA_IRQHandler+0x1da>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 0208 	bic.w	r2, r2, #8
 8008900:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008906:	223f      	movs	r2, #63	@ 0x3f
 8008908:	409a      	lsls	r2, r3
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008922:	2b00      	cmp	r3, #0
 8008924:	d07e      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	4798      	blx	r3
        }
        return;
 800892e:	e079      	b.n	8008a24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01d      	beq.n	800897a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10d      	bne.n	8008968 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008950:	2b00      	cmp	r3, #0
 8008952:	d031      	beq.n	80089b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	4798      	blx	r3
 800895c:	e02c      	b.n	80089b8 <HAL_DMA_IRQHandler+0x2a0>
 800895e:	bf00      	nop
 8008960:	20000154 	.word	0x20000154
 8008964:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d023      	beq.n	80089b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
 8008978:	e01e      	b.n	80089b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10f      	bne.n	80089a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0210 	bic.w	r2, r2, #16
 8008996:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d032      	beq.n	8008a26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d022      	beq.n	8008a12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2205      	movs	r2, #5
 80089d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0201 	bic.w	r2, r2, #1
 80089e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	3301      	adds	r3, #1
 80089e8:	60bb      	str	r3, [r7, #8]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d307      	bcc.n	8008a00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f2      	bne.n	80089e4 <HAL_DMA_IRQHandler+0x2cc>
 80089fe:	e000      	b.n	8008a02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008a00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
 8008a22:	e000      	b.n	8008a26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008a24:	bf00      	nop
    }
  }
}
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a3a:	b2db      	uxtb	r3, r3
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	3b10      	subs	r3, #16
 8008a58:	4a14      	ldr	r2, [pc, #80]	@ (8008aac <DMA_CalcBaseAndBitshift+0x64>)
 8008a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5e:	091b      	lsrs	r3, r3, #4
 8008a60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008a62:	4a13      	ldr	r2, [pc, #76]	@ (8008ab0 <DMA_CalcBaseAndBitshift+0x68>)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4413      	add	r3, r2
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d909      	bls.n	8008a8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008a7e:	f023 0303 	bic.w	r3, r3, #3
 8008a82:	1d1a      	adds	r2, r3, #4
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a88:	e007      	b.n	8008a9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008a92:	f023 0303 	bic.w	r3, r3, #3
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	aaaaaaab 	.word	0xaaaaaaab
 8008ab0:	08037754 	.word	0x08037754

08008ab4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d11f      	bne.n	8008b0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d856      	bhi.n	8008b82 <DMA_CheckFifoParam+0xce>
 8008ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8008adc <DMA_CheckFifoParam+0x28>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008aed 	.word	0x08008aed
 8008ae0:	08008aff 	.word	0x08008aff
 8008ae4:	08008aed 	.word	0x08008aed
 8008ae8:	08008b83 	.word	0x08008b83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d046      	beq.n	8008b86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008afc:	e043      	b.n	8008b86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008b06:	d140      	bne.n	8008b8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b0c:	e03d      	b.n	8008b8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b16:	d121      	bne.n	8008b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d837      	bhi.n	8008b8e <DMA_CheckFifoParam+0xda>
 8008b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b24 <DMA_CheckFifoParam+0x70>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b3b 	.word	0x08008b3b
 8008b2c:	08008b35 	.word	0x08008b35
 8008b30:	08008b4d 	.word	0x08008b4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	73fb      	strb	r3, [r7, #15]
      break;
 8008b38:	e030      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d025      	beq.n	8008b92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b4a:	e022      	b.n	8008b92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008b54:	d11f      	bne.n	8008b96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008b5a:	e01c      	b.n	8008b96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d903      	bls.n	8008b6a <DMA_CheckFifoParam+0xb6>
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d003      	beq.n	8008b70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008b68:	e018      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6e:	e015      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00e      	beq.n	8008b9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b80:	e00b      	b.n	8008b9a <DMA_CheckFifoParam+0xe6>
      break;
 8008b82:	bf00      	nop
 8008b84:	e00a      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
      break;
 8008b86:	bf00      	nop
 8008b88:	e008      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
      break;
 8008b8a:	bf00      	nop
 8008b8c:	e006      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
      break;
 8008b8e:	bf00      	nop
 8008b90:	e004      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
      break;
 8008b92:	bf00      	nop
 8008b94:	e002      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
      break;   
 8008b96:	bf00      	nop
 8008b98:	e000      	b.n	8008b9c <DMA_CheckFifoParam+0xe8>
      break;
 8008b9a:	bf00      	nop
    }
  } 
  
  return status; 
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop

08008bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b089      	sub	sp, #36	@ 0x24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	e16b      	b.n	8008ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008bc8:	2201      	movs	r2, #1
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	f040 815a 	bne.w	8008e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d005      	beq.n	8008bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d130      	bne.n	8008c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	2203      	movs	r2, #3
 8008c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0e:	43db      	mvns	r3, r3
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	4013      	ands	r3, r2
 8008c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c34:	2201      	movs	r2, #1
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	4013      	ands	r3, r2
 8008c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	091b      	lsrs	r3, r3, #4
 8008c4a:	f003 0201 	and.w	r2, r3, #1
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d017      	beq.n	8008c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	2203      	movs	r2, #3
 8008c78:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7c:	43db      	mvns	r3, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4013      	ands	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d123      	bne.n	8008cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	08da      	lsrs	r2, r3, #3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3208      	adds	r2, #8
 8008cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	220f      	movs	r2, #15
 8008cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	691a      	ldr	r2, [r3, #16]
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	08da      	lsrs	r2, r3, #3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3208      	adds	r2, #8
 8008cea:	69b9      	ldr	r1, [r7, #24]
 8008cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	2203      	movs	r2, #3
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	43db      	mvns	r3, r3
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	4013      	ands	r3, r2
 8008d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f003 0203 	and.w	r2, r3, #3
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	fa02 f303 	lsl.w	r3, r2, r3
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80b4 	beq.w	8008e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	4b60      	ldr	r3, [pc, #384]	@ (8008eb8 <HAL_GPIO_Init+0x30c>)
 8008d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d3a:	4a5f      	ldr	r2, [pc, #380]	@ (8008eb8 <HAL_GPIO_Init+0x30c>)
 8008d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d42:	4b5d      	ldr	r3, [pc, #372]	@ (8008eb8 <HAL_GPIO_Init+0x30c>)
 8008d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8008ebc <HAL_GPIO_Init+0x310>)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	089b      	lsrs	r3, r3, #2
 8008d54:	3302      	adds	r3, #2
 8008d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	220f      	movs	r2, #15
 8008d66:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a52      	ldr	r2, [pc, #328]	@ (8008ec0 <HAL_GPIO_Init+0x314>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d02b      	beq.n	8008dd2 <HAL_GPIO_Init+0x226>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a51      	ldr	r2, [pc, #324]	@ (8008ec4 <HAL_GPIO_Init+0x318>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d025      	beq.n	8008dce <HAL_GPIO_Init+0x222>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a50      	ldr	r2, [pc, #320]	@ (8008ec8 <HAL_GPIO_Init+0x31c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01f      	beq.n	8008dca <HAL_GPIO_Init+0x21e>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8008ecc <HAL_GPIO_Init+0x320>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d019      	beq.n	8008dc6 <HAL_GPIO_Init+0x21a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a4e      	ldr	r2, [pc, #312]	@ (8008ed0 <HAL_GPIO_Init+0x324>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <HAL_GPIO_Init+0x216>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a4d      	ldr	r2, [pc, #308]	@ (8008ed4 <HAL_GPIO_Init+0x328>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00d      	beq.n	8008dbe <HAL_GPIO_Init+0x212>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a4c      	ldr	r2, [pc, #304]	@ (8008ed8 <HAL_GPIO_Init+0x32c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d007      	beq.n	8008dba <HAL_GPIO_Init+0x20e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a4b      	ldr	r2, [pc, #300]	@ (8008edc <HAL_GPIO_Init+0x330>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d101      	bne.n	8008db6 <HAL_GPIO_Init+0x20a>
 8008db2:	2307      	movs	r3, #7
 8008db4:	e00e      	b.n	8008dd4 <HAL_GPIO_Init+0x228>
 8008db6:	2308      	movs	r3, #8
 8008db8:	e00c      	b.n	8008dd4 <HAL_GPIO_Init+0x228>
 8008dba:	2306      	movs	r3, #6
 8008dbc:	e00a      	b.n	8008dd4 <HAL_GPIO_Init+0x228>
 8008dbe:	2305      	movs	r3, #5
 8008dc0:	e008      	b.n	8008dd4 <HAL_GPIO_Init+0x228>
 8008dc2:	2304      	movs	r3, #4
 8008dc4:	e006      	b.n	8008dd4 <HAL_GPIO_Init+0x228>
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e004      	b.n	8008dd4 <HAL_GPIO_Init+0x228>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e002      	b.n	8008dd4 <HAL_GPIO_Init+0x228>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <HAL_GPIO_Init+0x228>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	f002 0203 	and.w	r2, r2, #3
 8008dda:	0092      	lsls	r2, r2, #2
 8008ddc:	4093      	lsls	r3, r2
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008de4:	4935      	ldr	r1, [pc, #212]	@ (8008ebc <HAL_GPIO_Init+0x310>)
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	089b      	lsrs	r3, r3, #2
 8008dea:	3302      	adds	r3, #2
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008df2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ee0 <HAL_GPIO_Init+0x334>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e16:	4a32      	ldr	r2, [pc, #200]	@ (8008ee0 <HAL_GPIO_Init+0x334>)
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e1c:	4b30      	ldr	r3, [pc, #192]	@ (8008ee0 <HAL_GPIO_Init+0x334>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	43db      	mvns	r3, r3
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e40:	4a27      	ldr	r2, [pc, #156]	@ (8008ee0 <HAL_GPIO_Init+0x334>)
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008e46:	4b26      	ldr	r3, [pc, #152]	@ (8008ee0 <HAL_GPIO_Init+0x334>)
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	43db      	mvns	r3, r3
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	4013      	ands	r3, r2
 8008e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee0 <HAL_GPIO_Init+0x334>)
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e70:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee0 <HAL_GPIO_Init+0x334>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	43db      	mvns	r3, r3
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e94:	4a12      	ldr	r2, [pc, #72]	@ (8008ee0 <HAL_GPIO_Init+0x334>)
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	2b0f      	cmp	r3, #15
 8008ea4:	f67f ae90 	bls.w	8008bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	3724      	adds	r7, #36	@ 0x24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	40023800 	.word	0x40023800
 8008ebc:	40013800 	.word	0x40013800
 8008ec0:	40020000 	.word	0x40020000
 8008ec4:	40020400 	.word	0x40020400
 8008ec8:	40020800 	.word	0x40020800
 8008ecc:	40020c00 	.word	0x40020c00
 8008ed0:	40021000 	.word	0x40021000
 8008ed4:	40021400 	.word	0x40021400
 8008ed8:	40021800 	.word	0x40021800
 8008edc:	40021c00 	.word	0x40021c00
 8008ee0:	40013c00 	.word	0x40013c00

08008ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691a      	ldr	r2, [r3, #16]
 8008ef4:	887b      	ldrh	r3, [r7, #2]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	e001      	b.n	8008f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	807b      	strh	r3, [r7, #2]
 8008f20:	4613      	mov	r3, r2
 8008f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f24:	787b      	ldrb	r3, [r7, #1]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f2a:	887a      	ldrh	r2, [r7, #2]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f30:	e003      	b.n	8008f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f32:	887b      	ldrh	r3, [r7, #2]
 8008f34:	041a      	lsls	r2, r3, #16
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	619a      	str	r2, [r3, #24]
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e12b      	b.n	80091b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fd fc26 	bl	80067c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2224      	movs	r2, #36	@ 0x24
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0201 	bic.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008fac:	f003 f8d6 	bl	800c15c <HAL_RCC_GetPCLK1Freq>
 8008fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	4a81      	ldr	r2, [pc, #516]	@ (80091bc <HAL_I2C_Init+0x274>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d807      	bhi.n	8008fcc <HAL_I2C_Init+0x84>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a80      	ldr	r2, [pc, #512]	@ (80091c0 <HAL_I2C_Init+0x278>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	bf94      	ite	ls
 8008fc4:	2301      	movls	r3, #1
 8008fc6:	2300      	movhi	r3, #0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	e006      	b.n	8008fda <HAL_I2C_Init+0x92>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4a7d      	ldr	r2, [pc, #500]	@ (80091c4 <HAL_I2C_Init+0x27c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	bf94      	ite	ls
 8008fd4:	2301      	movls	r3, #1
 8008fd6:	2300      	movhi	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e0e7      	b.n	80091b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	4a78      	ldr	r2, [pc, #480]	@ (80091c8 <HAL_I2C_Init+0x280>)
 8008fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fea:	0c9b      	lsrs	r3, r3, #18
 8008fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	4a6a      	ldr	r2, [pc, #424]	@ (80091bc <HAL_I2C_Init+0x274>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d802      	bhi.n	800901c <HAL_I2C_Init+0xd4>
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	3301      	adds	r3, #1
 800901a:	e009      	b.n	8009030 <HAL_I2C_Init+0xe8>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009022:	fb02 f303 	mul.w	r3, r2, r3
 8009026:	4a69      	ldr	r2, [pc, #420]	@ (80091cc <HAL_I2C_Init+0x284>)
 8009028:	fba2 2303 	umull	r2, r3, r2, r3
 800902c:	099b      	lsrs	r3, r3, #6
 800902e:	3301      	adds	r3, #1
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	6812      	ldr	r2, [r2, #0]
 8009034:	430b      	orrs	r3, r1
 8009036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009042:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	495c      	ldr	r1, [pc, #368]	@ (80091bc <HAL_I2C_Init+0x274>)
 800904c:	428b      	cmp	r3, r1
 800904e:	d819      	bhi.n	8009084 <HAL_I2C_Init+0x13c>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	1e59      	subs	r1, r3, #1
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	005b      	lsls	r3, r3, #1
 800905a:	fbb1 f3f3 	udiv	r3, r1, r3
 800905e:	1c59      	adds	r1, r3, #1
 8009060:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009064:	400b      	ands	r3, r1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00a      	beq.n	8009080 <HAL_I2C_Init+0x138>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	1e59      	subs	r1, r3, #1
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	fbb1 f3f3 	udiv	r3, r1, r3
 8009078:	3301      	adds	r3, #1
 800907a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800907e:	e051      	b.n	8009124 <HAL_I2C_Init+0x1dc>
 8009080:	2304      	movs	r3, #4
 8009082:	e04f      	b.n	8009124 <HAL_I2C_Init+0x1dc>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d111      	bne.n	80090b0 <HAL_I2C_Init+0x168>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	1e58      	subs	r0, r3, #1
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6859      	ldr	r1, [r3, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	440b      	add	r3, r1
 800909a:	fbb0 f3f3 	udiv	r3, r0, r3
 800909e:	3301      	adds	r3, #1
 80090a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bf0c      	ite	eq
 80090a8:	2301      	moveq	r3, #1
 80090aa:	2300      	movne	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	e012      	b.n	80090d6 <HAL_I2C_Init+0x18e>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	1e58      	subs	r0, r3, #1
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6859      	ldr	r1, [r3, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	440b      	add	r3, r1
 80090be:	0099      	lsls	r1, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80090c6:	3301      	adds	r3, #1
 80090c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	bf0c      	ite	eq
 80090d0:	2301      	moveq	r3, #1
 80090d2:	2300      	movne	r3, #0
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <HAL_I2C_Init+0x196>
 80090da:	2301      	movs	r3, #1
 80090dc:	e022      	b.n	8009124 <HAL_I2C_Init+0x1dc>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10e      	bne.n	8009104 <HAL_I2C_Init+0x1bc>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	1e58      	subs	r0, r3, #1
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6859      	ldr	r1, [r3, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	440b      	add	r3, r1
 80090f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80090f8:	3301      	adds	r3, #1
 80090fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009102:	e00f      	b.n	8009124 <HAL_I2C_Init+0x1dc>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	1e58      	subs	r0, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	0099      	lsls	r1, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	fbb0 f3f3 	udiv	r3, r0, r3
 800911a:	3301      	adds	r3, #1
 800911c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009120:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	6809      	ldr	r1, [r1, #0]
 8009128:	4313      	orrs	r3, r2
 800912a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69da      	ldr	r2, [r3, #28]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009152:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6911      	ldr	r1, [r2, #16]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	68d2      	ldr	r2, [r2, #12]
 800915e:	4311      	orrs	r1, r2
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6812      	ldr	r2, [r2, #0]
 8009164:	430b      	orrs	r3, r1
 8009166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695a      	ldr	r2, [r3, #20]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	000186a0 	.word	0x000186a0
 80091c0:	001e847f 	.word	0x001e847f
 80091c4:	003d08ff 	.word	0x003d08ff
 80091c8:	431bde83 	.word	0x431bde83
 80091cc:	10624dd3 	.word	0x10624dd3

080091d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af02      	add	r7, sp, #8
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	4608      	mov	r0, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	461a      	mov	r2, r3
 80091de:	4603      	mov	r3, r0
 80091e0:	817b      	strh	r3, [r7, #10]
 80091e2:	460b      	mov	r3, r1
 80091e4:	813b      	strh	r3, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091ea:	f7ff f883 	bl	80082f4 <HAL_GetTick>
 80091ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	f040 80d9 	bne.w	80093b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	2319      	movs	r3, #25
 8009204:	2201      	movs	r2, #1
 8009206:	496d      	ldr	r1, [pc, #436]	@ (80093bc <HAL_I2C_Mem_Write+0x1ec>)
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f002 f90d 	bl	800b428 <I2C_WaitOnFlagUntilTimeout>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009214:	2302      	movs	r3, #2
 8009216:	e0cc      	b.n	80093b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <HAL_I2C_Mem_Write+0x56>
 8009222:	2302      	movs	r3, #2
 8009224:	e0c5      	b.n	80093b2 <HAL_I2C_Mem_Write+0x1e2>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b01      	cmp	r3, #1
 800923a:	d007      	beq.n	800924c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800925a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2221      	movs	r2, #33	@ 0x21
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2240      	movs	r2, #64	@ 0x40
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a3a      	ldr	r2, [r7, #32]
 8009276:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800927c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4a4d      	ldr	r2, [pc, #308]	@ (80093c0 <HAL_I2C_Mem_Write+0x1f0>)
 800928c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800928e:	88f8      	ldrh	r0, [r7, #6]
 8009290:	893a      	ldrh	r2, [r7, #8]
 8009292:	8979      	ldrh	r1, [r7, #10]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	4603      	mov	r3, r0
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f001 fe9c 	bl	800afdc <I2C_RequestMemoryWrite>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d052      	beq.n	8009350 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e081      	b.n	80093b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f002 f98e 	bl	800b5d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00d      	beq.n	80092da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	d107      	bne.n	80092d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e06b      	b.n	80093b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ea:	1c5a      	adds	r2, r3, #1
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092f4:	3b01      	subs	r3, #1
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009300:	b29b      	uxth	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b04      	cmp	r3, #4
 8009316:	d11b      	bne.n	8009350 <HAL_I2C_Mem_Write+0x180>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931c:	2b00      	cmp	r3, #0
 800931e:	d017      	beq.n	8009350 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	781a      	ldrb	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800933a:	3b01      	subs	r3, #1
 800933c:	b29a      	uxth	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1aa      	bne.n	80092ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f002 f97a 	bl	800b656 <I2C_WaitOnBTFFlagUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00d      	beq.n	8009384 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936c:	2b04      	cmp	r3, #4
 800936e:	d107      	bne.n	8009380 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800937e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e016      	b.n	80093b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	e000      	b.n	80093b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80093b0:	2302      	movs	r3, #2
  }
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	00100002 	.word	0x00100002
 80093c0:	ffff0000 	.word	0xffff0000

080093c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08c      	sub	sp, #48	@ 0x30
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	461a      	mov	r2, r3
 80093d2:	4603      	mov	r3, r0
 80093d4:	817b      	strh	r3, [r7, #10]
 80093d6:	460b      	mov	r3, r1
 80093d8:	813b      	strh	r3, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093de:	f7fe ff89 	bl	80082f4 <HAL_GetTick>
 80093e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	f040 8208 	bne.w	8009802 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	2319      	movs	r3, #25
 80093f8:	2201      	movs	r2, #1
 80093fa:	497b      	ldr	r1, [pc, #492]	@ (80095e8 <HAL_I2C_Mem_Read+0x224>)
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f002 f813 	bl	800b428 <I2C_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009408:	2302      	movs	r3, #2
 800940a:	e1fb      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009412:	2b01      	cmp	r3, #1
 8009414:	d101      	bne.n	800941a <HAL_I2C_Mem_Read+0x56>
 8009416:	2302      	movs	r3, #2
 8009418:	e1f4      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b01      	cmp	r3, #1
 800942e:	d007      	beq.n	8009440 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f042 0201 	orr.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800944e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2222      	movs	r2, #34	@ 0x22
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2240      	movs	r2, #64	@ 0x40
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800946a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009470:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009476:	b29a      	uxth	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4a5b      	ldr	r2, [pc, #364]	@ (80095ec <HAL_I2C_Mem_Read+0x228>)
 8009480:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009482:	88f8      	ldrh	r0, [r7, #6]
 8009484:	893a      	ldrh	r2, [r7, #8]
 8009486:	8979      	ldrh	r1, [r7, #10]
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4603      	mov	r3, r0
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f001 fe38 	bl	800b108 <I2C_RequestMemoryRead>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e1b0      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d113      	bne.n	80094d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094aa:	2300      	movs	r3, #0
 80094ac:	623b      	str	r3, [r7, #32]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	623b      	str	r3, [r7, #32]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	623b      	str	r3, [r7, #32]
 80094be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	e184      	b.n	80097dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d11b      	bne.n	8009512 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ea:	2300      	movs	r3, #0
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	61fb      	str	r3, [r7, #28]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	e164      	b.n	80097dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009516:	2b02      	cmp	r3, #2
 8009518:	d11b      	bne.n	8009552 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009528:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009538:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800953a:	2300      	movs	r3, #0
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	61bb      	str	r3, [r7, #24]
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	e144      	b.n	80097dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009568:	e138      	b.n	80097dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800956e:	2b03      	cmp	r3, #3
 8009570:	f200 80f1 	bhi.w	8009756 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009578:	2b01      	cmp	r3, #1
 800957a:	d123      	bne.n	80095c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800957c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800957e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f002 f8db 	bl	800b73c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e139      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691a      	ldr	r2, [r3, #16]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ac:	3b01      	subs	r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80095c2:	e10b      	b.n	80097dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d14e      	bne.n	800966a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d2:	2200      	movs	r2, #0
 80095d4:	4906      	ldr	r1, [pc, #24]	@ (80095f0 <HAL_I2C_Mem_Read+0x22c>)
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f001 ff26 	bl	800b428 <I2C_WaitOnFlagUntilTimeout>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d008      	beq.n	80095f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e10e      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
 80095e6:	bf00      	nop
 80095e8:	00100002 	.word	0x00100002
 80095ec:	ffff0000 	.word	0xffff0000
 80095f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691a      	ldr	r2, [r3, #16]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009620:	3b01      	subs	r3, #1
 8009622:	b29a      	uxth	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800962c:	b29b      	uxth	r3, r3
 800962e:	3b01      	subs	r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009652:	3b01      	subs	r3, #1
 8009654:	b29a      	uxth	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800965e:	b29b      	uxth	r3, r3
 8009660:	3b01      	subs	r3, #1
 8009662:	b29a      	uxth	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009668:	e0b8      	b.n	80097dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	2200      	movs	r2, #0
 8009672:	4966      	ldr	r1, [pc, #408]	@ (800980c <HAL_I2C_Mem_Read+0x448>)
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f001 fed7 	bl	800b428 <I2C_WaitOnFlagUntilTimeout>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e0bf      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009692:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969e:	b2d2      	uxtb	r2, r2
 80096a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096bc:	b29b      	uxth	r3, r3
 80096be:	3b01      	subs	r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096cc:	2200      	movs	r2, #0
 80096ce:	494f      	ldr	r1, [pc, #316]	@ (800980c <HAL_I2C_Mem_Read+0x448>)
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f001 fea9 	bl	800b428 <I2C_WaitOnFlagUntilTimeout>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e091      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	691a      	ldr	r2, [r3, #16]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009718:	b29b      	uxth	r3, r3
 800971a:	3b01      	subs	r3, #1
 800971c:	b29a      	uxth	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972c:	b2d2      	uxtb	r2, r2
 800972e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800974a:	b29b      	uxth	r3, r3
 800974c:	3b01      	subs	r3, #1
 800974e:	b29a      	uxth	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009754:	e042      	b.n	80097dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009758:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f001 ffee 	bl	800b73c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e04c      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	691a      	ldr	r2, [r3, #16]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009774:	b2d2      	uxtb	r2, r2
 8009776:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009792:	b29b      	uxth	r3, r3
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d118      	bne.n	80097dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	691a      	ldr	r2, [r3, #16]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b4:	b2d2      	uxtb	r2, r2
 80097b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	3b01      	subs	r3, #1
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f47f aec2 	bne.w	800956a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2220      	movs	r2, #32
 80097ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	e000      	b.n	8009804 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009802:	2302      	movs	r3, #2
  }
}
 8009804:	4618      	mov	r0, r3
 8009806:	3728      	adds	r7, #40	@ 0x28
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	00010004 	.word	0x00010004

08009810 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009828:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009830:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009838:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	2b10      	cmp	r3, #16
 800983e:	d003      	beq.n	8009848 <HAL_I2C_EV_IRQHandler+0x38>
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	2b40      	cmp	r3, #64	@ 0x40
 8009844:	f040 80c1 	bne.w	80099ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <HAL_I2C_EV_IRQHandler+0x6e>
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009868:	d003      	beq.n	8009872 <HAL_I2C_EV_IRQHandler+0x62>
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009870:	d101      	bne.n	8009876 <HAL_I2C_EV_IRQHandler+0x66>
 8009872:	2301      	movs	r3, #1
 8009874:	e000      	b.n	8009878 <HAL_I2C_EV_IRQHandler+0x68>
 8009876:	2300      	movs	r3, #0
 8009878:	2b01      	cmp	r3, #1
 800987a:	f000 8132 	beq.w	8009ae2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00c      	beq.n	80098a2 <HAL_I2C_EV_IRQHandler+0x92>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	0a5b      	lsrs	r3, r3, #9
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d006      	beq.n	80098a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f001 ffd6 	bl	800b846 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fd83 	bl	800a3a6 <I2C_Master_SB>
 80098a0:	e092      	b.n	80099c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	08db      	lsrs	r3, r3, #3
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d009      	beq.n	80098c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	0a5b      	lsrs	r3, r3, #9
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fdf9 	bl	800a4b2 <I2C_Master_ADD10>
 80098c0:	e082      	b.n	80099c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	085b      	lsrs	r3, r3, #1
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d009      	beq.n	80098e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	0a5b      	lsrs	r3, r3, #9
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fe13 	bl	800a506 <I2C_Master_ADDR>
 80098e0:	e072      	b.n	80099c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	089b      	lsrs	r3, r3, #2
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d03b      	beq.n	8009966 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098fc:	f000 80f3 	beq.w	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	09db      	lsrs	r3, r3, #7
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00f      	beq.n	800992c <HAL_I2C_EV_IRQHandler+0x11c>
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	0a9b      	lsrs	r3, r3, #10
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <HAL_I2C_EV_IRQHandler+0x11c>
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	089b      	lsrs	r3, r3, #2
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d103      	bne.n	800992c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f9f3 	bl	8009d10 <I2C_MasterTransmit_TXE>
 800992a:	e04d      	b.n	80099c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	089b      	lsrs	r3, r3, #2
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 80d6 	beq.w	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	0a5b      	lsrs	r3, r3, #9
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80cf 	beq.w	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b21      	cmp	r3, #33	@ 0x21
 800994c:	d103      	bne.n	8009956 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fa7a 	bl	8009e48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009954:	e0c7      	b.n	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	2b40      	cmp	r3, #64	@ 0x40
 800995a:	f040 80c4 	bne.w	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fae8 	bl	8009f34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009964:	e0bf      	b.n	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009974:	f000 80b7 	beq.w	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	099b      	lsrs	r3, r3, #6
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00f      	beq.n	80099a4 <HAL_I2C_EV_IRQHandler+0x194>
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	0a9b      	lsrs	r3, r3, #10
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <HAL_I2C_EV_IRQHandler+0x194>
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	089b      	lsrs	r3, r3, #2
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	d103      	bne.n	80099a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fb5d 	bl	800a05c <I2C_MasterReceive_RXNE>
 80099a2:	e011      	b.n	80099c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	089b      	lsrs	r3, r3, #2
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 809a 	beq.w	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	0a5b      	lsrs	r3, r3, #9
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 8093 	beq.w	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fc06 	bl	800a1d2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80099c6:	e08e      	b.n	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80099c8:	e08d      	b.n	8009ae6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d004      	beq.n	80099dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	e007      	b.n	80099ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d012      	beq.n	8009a1e <HAL_I2C_EV_IRQHandler+0x20e>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	0a5b      	lsrs	r3, r3, #9
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00c      	beq.n	8009a1e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009a14:	69b9      	ldr	r1, [r7, #24]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 ffc4 	bl	800a9a4 <I2C_Slave_ADDR>
 8009a1c:	e066      	b.n	8009aec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	091b      	lsrs	r3, r3, #4
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d009      	beq.n	8009a3e <HAL_I2C_EV_IRQHandler+0x22e>
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	0a5b      	lsrs	r3, r3, #9
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fffe 	bl	800aa38 <I2C_Slave_STOPF>
 8009a3c:	e056      	b.n	8009aec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	2b21      	cmp	r3, #33	@ 0x21
 8009a42:	d002      	beq.n	8009a4a <HAL_I2C_EV_IRQHandler+0x23a>
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b29      	cmp	r3, #41	@ 0x29
 8009a48:	d125      	bne.n	8009a96 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	09db      	lsrs	r3, r3, #7
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00f      	beq.n	8009a76 <HAL_I2C_EV_IRQHandler+0x266>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	0a9b      	lsrs	r3, r3, #10
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d009      	beq.n	8009a76 <HAL_I2C_EV_IRQHandler+0x266>
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	089b      	lsrs	r3, r3, #2
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d103      	bne.n	8009a76 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 feda 	bl	800a828 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009a74:	e039      	b.n	8009aea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	089b      	lsrs	r3, r3, #2
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d033      	beq.n	8009aea <HAL_I2C_EV_IRQHandler+0x2da>
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	0a5b      	lsrs	r3, r3, #9
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d02d      	beq.n	8009aea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 ff07 	bl	800a8a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009a94:	e029      	b.n	8009aea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	099b      	lsrs	r3, r3, #6
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00f      	beq.n	8009ac2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	0a9b      	lsrs	r3, r3, #10
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	089b      	lsrs	r3, r3, #2
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d103      	bne.n	8009ac2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 ff12 	bl	800a8e4 <I2C_SlaveReceive_RXNE>
 8009ac0:	e014      	b.n	8009aec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	089b      	lsrs	r3, r3, #2
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00e      	beq.n	8009aec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	0a5b      	lsrs	r3, r3, #9
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d008      	beq.n	8009aec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 ff40 	bl	800a960 <I2C_SlaveReceive_BTF>
 8009ae0:	e004      	b.n	8009aec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8009ae2:	bf00      	nop
 8009ae4:	e002      	b.n	8009aec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ae6:	bf00      	nop
 8009ae8:	e000      	b.n	8009aec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009aea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009aec:	3720      	adds	r7, #32
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b08a      	sub	sp, #40	@ 0x28
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	0a1b      	lsrs	r3, r3, #8
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00e      	beq.n	8009b40 <HAL_I2C_ER_IRQHandler+0x4e>
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	0a1b      	lsrs	r3, r3, #8
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d008      	beq.n	8009b40 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	f043 0301 	orr.w	r3, r3, #1
 8009b34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009b3e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	0a5b      	lsrs	r3, r3, #9
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00e      	beq.n	8009b6a <HAL_I2C_ER_IRQHandler+0x78>
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d008      	beq.n	8009b6a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5a:	f043 0302 	orr.w	r3, r3, #2
 8009b5e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8009b68:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	0a9b      	lsrs	r3, r3, #10
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d03f      	beq.n	8009bf6 <HAL_I2C_ER_IRQHandler+0x104>
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	0a1b      	lsrs	r3, r3, #8
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d039      	beq.n	8009bf6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8009b82:	7efb      	ldrb	r3, [r7, #27]
 8009b84:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b94:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009b9c:	7ebb      	ldrb	r3, [r7, #26]
 8009b9e:	2b20      	cmp	r3, #32
 8009ba0:	d112      	bne.n	8009bc8 <HAL_I2C_ER_IRQHandler+0xd6>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10f      	bne.n	8009bc8 <HAL_I2C_ER_IRQHandler+0xd6>
 8009ba8:	7cfb      	ldrb	r3, [r7, #19]
 8009baa:	2b21      	cmp	r3, #33	@ 0x21
 8009bac:	d008      	beq.n	8009bc0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009bae:	7cfb      	ldrb	r3, [r7, #19]
 8009bb0:	2b29      	cmp	r3, #41	@ 0x29
 8009bb2:	d005      	beq.n	8009bc0 <HAL_I2C_ER_IRQHandler+0xce>
 8009bb4:	7cfb      	ldrb	r3, [r7, #19]
 8009bb6:	2b28      	cmp	r3, #40	@ 0x28
 8009bb8:	d106      	bne.n	8009bc8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b21      	cmp	r3, #33	@ 0x21
 8009bbe:	d103      	bne.n	8009bc8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 f869 	bl	800ac98 <I2C_Slave_AF>
 8009bc6:	e016      	b.n	8009bf6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009bd0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd4:	f043 0304 	orr.w	r3, r3, #4
 8009bd8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009bda:	7efb      	ldrb	r3, [r7, #27]
 8009bdc:	2b10      	cmp	r3, #16
 8009bde:	d002      	beq.n	8009be6 <HAL_I2C_ER_IRQHandler+0xf4>
 8009be0:	7efb      	ldrb	r3, [r7, #27]
 8009be2:	2b40      	cmp	r3, #64	@ 0x40
 8009be4:	d107      	bne.n	8009bf6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bf4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	0adb      	lsrs	r3, r3, #11
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00e      	beq.n	8009c20 <HAL_I2C_ER_IRQHandler+0x12e>
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	0a1b      	lsrs	r3, r3, #8
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d008      	beq.n	8009c20 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	f043 0308 	orr.w	r3, r3, #8
 8009c14:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8009c1e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d008      	beq.n	8009c38 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	431a      	orrs	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 f8a0 	bl	800ad78 <I2C_ITError>
  }
}
 8009c38:	bf00      	nop
 8009c3a:	3728      	adds	r7, #40	@ 0x28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d150      	bne.n	8009dd8 <I2C_MasterTransmit_TXE+0xc8>
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	2b21      	cmp	r3, #33	@ 0x21
 8009d3a:	d14d      	bne.n	8009dd8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b08      	cmp	r3, #8
 8009d40:	d01d      	beq.n	8009d7e <I2C_MasterTransmit_TXE+0x6e>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b20      	cmp	r3, #32
 8009d46:	d01a      	beq.n	8009d7e <I2C_MasterTransmit_TXE+0x6e>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009d4e:	d016      	beq.n	8009d7e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009d5e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2211      	movs	r2, #17
 8009d64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff ff62 	bl	8009c40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009d7c:	e060      	b.n	8009e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009d8c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d9c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b40      	cmp	r3, #64	@ 0x40
 8009db6:	d107      	bne.n	8009dc8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff ff7d 	bl	8009cc0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009dc6:	e03b      	b.n	8009e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff ff35 	bl	8009c40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009dd6:	e033      	b.n	8009e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	2b21      	cmp	r3, #33	@ 0x21
 8009ddc:	d005      	beq.n	8009dea <I2C_MasterTransmit_TXE+0xda>
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b40      	cmp	r3, #64	@ 0x40
 8009de2:	d12d      	bne.n	8009e40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	2b22      	cmp	r3, #34	@ 0x22
 8009de8:	d12a      	bne.n	8009e40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d108      	bne.n	8009e06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009e04:	e01c      	b.n	8009e40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b40      	cmp	r3, #64	@ 0x40
 8009e10:	d103      	bne.n	8009e1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f88e 	bl	8009f34 <I2C_MemoryTransmit_TXE_BTF>
}
 8009e18:	e012      	b.n	8009e40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1e:	781a      	ldrb	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	3b01      	subs	r3, #1
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009e3e:	e7ff      	b.n	8009e40 <I2C_MasterTransmit_TXE+0x130>
 8009e40:	bf00      	nop
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b21      	cmp	r3, #33	@ 0x21
 8009e60:	d164      	bne.n	8009f2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d012      	beq.n	8009e92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e70:	781a      	ldrb	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009e90:	e04c      	b.n	8009f2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d01d      	beq.n	8009ed4 <I2C_MasterTransmit_BTF+0x8c>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	d01a      	beq.n	8009ed4 <I2C_MasterTransmit_BTF+0x8c>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009ea4:	d016      	beq.n	8009ed4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009eb4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2211      	movs	r2, #17
 8009eba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff feb7 	bl	8009c40 <HAL_I2C_MasterTxCpltCallback>
}
 8009ed2:	e02b      	b.n	8009f2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009ee2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ef2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b40      	cmp	r3, #64	@ 0x40
 8009f0c:	d107      	bne.n	8009f1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff fed2 	bl	8009cc0 <HAL_I2C_MemTxCpltCallback>
}
 8009f1c:	e006      	b.n	8009f2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff fe8a 	bl	8009c40 <HAL_I2C_MasterTxCpltCallback>
}
 8009f2c:	bf00      	nop
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d11d      	bne.n	8009f88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d10b      	bne.n	8009f6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f64:	1c9a      	adds	r2, r3, #2
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8009f6a:	e073      	b.n	800a054 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	121b      	asrs	r3, r3, #8
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009f86:	e065      	b.n	800a054 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d10b      	bne.n	8009fa8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009fa6:	e055      	b.n	800a054 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d151      	bne.n	800a054 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	2b22      	cmp	r3, #34	@ 0x22
 8009fb4:	d10d      	bne.n	8009fd2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fc4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009fd0:	e040      	b.n	800a054 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d015      	beq.n	800a008 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	2b21      	cmp	r3, #33	@ 0x21
 8009fe0:	d112      	bne.n	800a008 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	b29a      	uxth	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a006:	e025      	b.n	800a054 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d120      	bne.n	800a054 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800a012:	7bfb      	ldrb	r3, [r7, #15]
 800a014:	2b21      	cmp	r3, #33	@ 0x21
 800a016:	d11d      	bne.n	800a054 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a026:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a036:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2220      	movs	r2, #32
 800a042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff fe36 	bl	8009cc0 <HAL_I2C_MemTxCpltCallback>
}
 800a054:	bf00      	nop
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b22      	cmp	r3, #34	@ 0x22
 800a06e:	f040 80ac 	bne.w	800a1ca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a076:	b29b      	uxth	r3, r3
 800a078:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d921      	bls.n	800a0c4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691a      	ldr	r2, [r3, #16]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08a:	b2d2      	uxtb	r2, r2
 800a08c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	f040 808c 	bne.w	800a1ca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0c0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800a0c2:	e082      	b.n	800a1ca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d075      	beq.n	800a1b8 <I2C_MasterReceive_RXNE+0x15c>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d002      	beq.n	800a0d8 <I2C_MasterReceive_RXNE+0x7c>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d16f      	bne.n	800a1b8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 fafd 	bl	800b6d8 <I2C_WaitOnSTOPRequestThroughIT>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d142      	bne.n	800a16a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0f2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a102:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	691a      	ldr	r2, [r3, #16]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10e:	b2d2      	uxtb	r2, r2
 800a110:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a120:	b29b      	uxth	r3, r3
 800a122:	3b01      	subs	r3, #1
 800a124:	b29a      	uxth	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b40      	cmp	r3, #64	@ 0x40
 800a13c:	d10a      	bne.n	800a154 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff fdc1 	bl	8009cd4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a152:	e03a      	b.n	800a1ca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2212      	movs	r2, #18
 800a160:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7ff fd76 	bl	8009c54 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a168:	e02f      	b.n	800a1ca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a178:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	691a      	ldr	r2, [r3, #16]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a196:	b29b      	uxth	r3, r3
 800a198:	3b01      	subs	r3, #1
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fd99 	bl	8009ce8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a1b6:	e008      	b.n	800a1ca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1c6:	605a      	str	r2, [r3, #4]
}
 800a1c8:	e7ff      	b.n	800a1ca <I2C_MasterReceive_RXNE+0x16e>
 800a1ca:	bf00      	nop
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b084      	sub	sp, #16
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1de:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	d11b      	bne.n	800a222 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1f8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	691a      	ldr	r2, [r3, #16]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a220:	e0bd      	b.n	800a39e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a226:	b29b      	uxth	r3, r3
 800a228:	2b03      	cmp	r3, #3
 800a22a:	d129      	bne.n	800a280 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a23a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d00a      	beq.n	800a258 <I2C_MasterReceive_BTF+0x86>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b02      	cmp	r3, #2
 800a246:	d007      	beq.n	800a258 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a256:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	691a      	ldr	r2, [r3, #16]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a262:	b2d2      	uxtb	r2, r2
 800a264:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a274:	b29b      	uxth	r3, r3
 800a276:	3b01      	subs	r3, #1
 800a278:	b29a      	uxth	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a27e:	e08e      	b.n	800a39e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a284:	b29b      	uxth	r3, r3
 800a286:	2b02      	cmp	r3, #2
 800a288:	d176      	bne.n	800a378 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d002      	beq.n	800a296 <I2C_MasterReceive_BTF+0xc4>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b10      	cmp	r3, #16
 800a294:	d108      	bne.n	800a2a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	e019      	b.n	800a2dc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d002      	beq.n	800a2b4 <I2C_MasterReceive_BTF+0xe2>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d108      	bne.n	800a2c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e00a      	b.n	800a2dc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b10      	cmp	r3, #16
 800a2ca:	d007      	beq.n	800a2dc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	691a      	ldr	r2, [r3, #16]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30c:	b2d2      	uxtb	r2, r2
 800a30e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a31e:	b29b      	uxth	r3, r3
 800a320:	3b01      	subs	r3, #1
 800a322:	b29a      	uxth	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a336:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b40      	cmp	r3, #64	@ 0x40
 800a34a:	d10a      	bne.n	800a362 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff fcba 	bl	8009cd4 <HAL_I2C_MemRxCpltCallback>
}
 800a360:	e01d      	b.n	800a39e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2212      	movs	r2, #18
 800a36e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff fc6f 	bl	8009c54 <HAL_I2C_MasterRxCpltCallback>
}
 800a376:	e012      	b.n	800a39e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	691a      	ldr	r2, [r3, #16]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a382:	b2d2      	uxtb	r2, r2
 800a384:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a394:	b29b      	uxth	r3, r3
 800a396:	3b01      	subs	r3, #1
 800a398:	b29a      	uxth	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a39e:	bf00      	nop
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b40      	cmp	r3, #64	@ 0x40
 800a3b8:	d117      	bne.n	800a3ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a3d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a3d4:	e067      	b.n	800a4a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	f043 0301 	orr.w	r3, r3, #1
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	611a      	str	r2, [r3, #16]
}
 800a3e8:	e05d      	b.n	800a4a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3f2:	d133      	bne.n	800a45c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b21      	cmp	r3, #33	@ 0x21
 800a3fe:	d109      	bne.n	800a414 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a404:	b2db      	uxtb	r3, r3
 800a406:	461a      	mov	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a410:	611a      	str	r2, [r3, #16]
 800a412:	e008      	b.n	800a426 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	f043 0301 	orr.w	r3, r3, #1
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d004      	beq.n	800a438 <I2C_Master_SB+0x92>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d108      	bne.n	800a44a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d032      	beq.n	800a4a6 <I2C_Master_SB+0x100>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d02d      	beq.n	800a4a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a458:	605a      	str	r2, [r3, #4]
}
 800a45a:	e024      	b.n	800a4a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10e      	bne.n	800a482 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a468:	b29b      	uxth	r3, r3
 800a46a:	11db      	asrs	r3, r3, #7
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	f003 0306 	and.w	r3, r3, #6
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f063 030f 	orn	r3, r3, #15
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	611a      	str	r2, [r3, #16]
}
 800a480:	e011      	b.n	800a4a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a486:	2b01      	cmp	r3, #1
 800a488:	d10d      	bne.n	800a4a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a48e:	b29b      	uxth	r3, r3
 800a490:	11db      	asrs	r3, r3, #7
 800a492:	b2db      	uxtb	r3, r3
 800a494:	f003 0306 	and.w	r3, r3, #6
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f063 030e 	orn	r3, r3, #14
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	611a      	str	r2, [r3, #16]
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d004      	beq.n	800a4d8 <I2C_Master_ADD10+0x26>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d108      	bne.n	800a4ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00c      	beq.n	800a4fa <I2C_Master_ADD10+0x48>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d007      	beq.n	800a4fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4f8:	605a      	str	r2, [r3, #4]
  }
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800a506:	b480      	push	{r7}
 800a508:	b091      	sub	sp, #68	@ 0x44
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a514:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a522:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b22      	cmp	r3, #34	@ 0x22
 800a52e:	f040 8169 	bne.w	800a804 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10f      	bne.n	800a55a <I2C_Master_ADDR+0x54>
 800a53a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a53e:	2b40      	cmp	r3, #64	@ 0x40
 800a540:	d10b      	bne.n	800a55a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a542:	2300      	movs	r3, #0
 800a544:	633b      	str	r3, [r7, #48]	@ 0x30
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	633b      	str	r3, [r7, #48]	@ 0x30
 800a556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a558:	e160      	b.n	800a81c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d11d      	bne.n	800a59e <I2C_Master_ADDR+0x98>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a56a:	d118      	bne.n	800a59e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a56c:	2300      	movs	r3, #0
 800a56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a590:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	651a      	str	r2, [r3, #80]	@ 0x50
 800a59c:	e13e      	b.n	800a81c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d113      	bne.n	800a5d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	e115      	b.n	800a7fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	f040 808a 	bne.w	800a6f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a5e2:	d137      	bne.n	800a654 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a602:	d113      	bne.n	800a62c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a612:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a614:	2300      	movs	r3, #0
 800a616:	627b      	str	r3, [r7, #36]	@ 0x24
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	627b      	str	r3, [r7, #36]	@ 0x24
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	e0e7      	b.n	800a7fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a62c:	2300      	movs	r3, #0
 800a62e:	623b      	str	r3, [r7, #32]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	623b      	str	r3, [r7, #32]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	623b      	str	r3, [r7, #32]
 800a640:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a650:	601a      	str	r2, [r3, #0]
 800a652:	e0d3      	b.n	800a7fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800a654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a656:	2b08      	cmp	r3, #8
 800a658:	d02e      	beq.n	800a6b8 <I2C_Master_ADDR+0x1b2>
 800a65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d02b      	beq.n	800a6b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800a660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a662:	2b12      	cmp	r3, #18
 800a664:	d102      	bne.n	800a66c <I2C_Master_ADDR+0x166>
 800a666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d125      	bne.n	800a6b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d00e      	beq.n	800a690 <I2C_Master_ADDR+0x18a>
 800a672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a674:	2b02      	cmp	r3, #2
 800a676:	d00b      	beq.n	800a690 <I2C_Master_ADDR+0x18a>
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	2b10      	cmp	r3, #16
 800a67c:	d008      	beq.n	800a690 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	e007      	b.n	800a6a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a69e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	61fb      	str	r3, [r7, #28]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	61fb      	str	r3, [r7, #28]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	61fb      	str	r3, [r7, #28]
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	e0a1      	b.n	800a7fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61bb      	str	r3, [r7, #24]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	61bb      	str	r3, [r7, #24]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	61bb      	str	r3, [r7, #24]
 800a6dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	e085      	b.n	800a7fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d14d      	bne.n	800a796 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	d016      	beq.n	800a72e <I2C_Master_ADDR+0x228>
 800a700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a702:	2b02      	cmp	r3, #2
 800a704:	d013      	beq.n	800a72e <I2C_Master_ADDR+0x228>
 800a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a708:	2b10      	cmp	r3, #16
 800a70a:	d010      	beq.n	800a72e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a71a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	e007      	b.n	800a73e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a73c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a74c:	d117      	bne.n	800a77e <I2C_Master_ADDR+0x278>
 800a74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a750:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a754:	d00b      	beq.n	800a76e <I2C_Master_ADDR+0x268>
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d008      	beq.n	800a76e <I2C_Master_ADDR+0x268>
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	2b08      	cmp	r3, #8
 800a760:	d005      	beq.n	800a76e <I2C_Master_ADDR+0x268>
 800a762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a764:	2b10      	cmp	r3, #16
 800a766:	d002      	beq.n	800a76e <I2C_Master_ADDR+0x268>
 800a768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	d107      	bne.n	800a77e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a77c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a77e:	2300      	movs	r3, #0
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	617b      	str	r3, [r7, #20]
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	e032      	b.n	800a7fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a7a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7b4:	d117      	bne.n	800a7e6 <I2C_Master_ADDR+0x2e0>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a7bc:	d00b      	beq.n	800a7d6 <I2C_Master_ADDR+0x2d0>
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d008      	beq.n	800a7d6 <I2C_Master_ADDR+0x2d0>
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c6:	2b08      	cmp	r3, #8
 800a7c8:	d005      	beq.n	800a7d6 <I2C_Master_ADDR+0x2d0>
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7cc:	2b10      	cmp	r3, #16
 800a7ce:	d002      	beq.n	800a7d6 <I2C_Master_ADDR+0x2d0>
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d2:	2b20      	cmp	r3, #32
 800a7d4:	d107      	bne.n	800a7e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a7e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	613b      	str	r3, [r7, #16]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	613b      	str	r3, [r7, #16]
 800a7fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a802:	e00b      	b.n	800a81c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	60fb      	str	r3, [r7, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]
}
 800a81a:	e7ff      	b.n	800a81c <I2C_Master_ADDR+0x316>
 800a81c:	bf00      	nop
 800a81e:	3744      	adds	r7, #68	@ 0x44
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a836:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d02b      	beq.n	800a89a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a846:	781a      	ldrb	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	b29a      	uxth	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d114      	bne.n	800a89a <I2C_SlaveTransmit_TXE+0x72>
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	2b29      	cmp	r3, #41	@ 0x29
 800a874:	d111      	bne.n	800a89a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a884:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2221      	movs	r2, #33	@ 0x21
 800a88a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2228      	movs	r2, #40	@ 0x28
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff f9e7 	bl	8009c68 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d011      	beq.n	800a8d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b8:	781a      	ldrb	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d02c      	beq.n	800a958 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	691a      	ldr	r2, [r3, #16]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	3b01      	subs	r3, #1
 800a91e:	b29a      	uxth	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a928:	b29b      	uxth	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d114      	bne.n	800a958 <I2C_SlaveReceive_RXNE+0x74>
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
 800a930:	2b2a      	cmp	r3, #42	@ 0x2a
 800a932:	d111      	bne.n	800a958 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a942:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2222      	movs	r2, #34	@ 0x22
 800a948:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2228      	movs	r2, #40	@ 0x28
 800a94e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff f992 	bl	8009c7c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a958:	bf00      	nop
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d012      	beq.n	800a998 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	691a      	ldr	r2, [r3, #16]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a98e:	b29b      	uxth	r3, r3
 800a990:	3b01      	subs	r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a9be:	2b28      	cmp	r3, #40	@ 0x28
 800a9c0:	d127      	bne.n	800aa12 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	089b      	lsrs	r3, r3, #2
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d101      	bne.n	800a9e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	09db      	lsrs	r3, r3, #7
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d103      	bne.n	800a9f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	81bb      	strh	r3, [r7, #12]
 800a9f4:	e002      	b.n	800a9fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800aa04:	89ba      	ldrh	r2, [r7, #12]
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7ff f940 	bl	8009c90 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800aa10:	e00e      	b.n	800aa30 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa12:	2300      	movs	r3, #0
 800aa14:	60bb      	str	r3, [r7, #8]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	60bb      	str	r3, [r7, #8]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	60bb      	str	r3, [r7, #8]
 800aa26:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800aa30:	bf00      	nop
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa46:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aa56:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60bb      	str	r3, [r7, #8]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	60bb      	str	r3, [r7, #8]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa84:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa94:	d172      	bne.n	800ab7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	2b22      	cmp	r3, #34	@ 0x22
 800aa9a:	d002      	beq.n	800aaa2 <I2C_Slave_STOPF+0x6a>
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaa0:	d135      	bne.n	800ab0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d005      	beq.n	800aac6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aabe:	f043 0204 	orr.w	r2, r3, #4
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aad4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fd ffa6 	bl	8008a2c <HAL_DMA_GetState>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d049      	beq.n	800ab7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaea:	4a69      	ldr	r2, [pc, #420]	@ (800ac90 <I2C_Slave_STOPF+0x258>)
 800aaec:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fd fdee 	bl	80086d4 <HAL_DMA_Abort_IT>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d03d      	beq.n	800ab7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ab0c:	e035      	b.n	800ab7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d005      	beq.n	800ab32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab2a:	f043 0204 	orr.w	r2, r3, #4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fd ff70 	bl	8008a2c <HAL_DMA_GetState>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d014      	beq.n	800ab7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab56:	4a4e      	ldr	r2, [pc, #312]	@ (800ac90 <I2C_Slave_STOPF+0x258>)
 800ab58:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fd fdb8 	bl	80086d4 <HAL_DMA_Abort_IT>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d008      	beq.n	800ab7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ab74:	4610      	mov	r0, r2
 800ab76:	4798      	blx	r3
 800ab78:	e000      	b.n	800ab7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ab7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d03e      	beq.n	800ac04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b04      	cmp	r3, #4
 800ab92:	d112      	bne.n	800abba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	691a      	ldr	r2, [r3, #16]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9e:	b2d2      	uxtb	r2, r2
 800aba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc4:	2b40      	cmp	r3, #64	@ 0x40
 800abc6:	d112      	bne.n	800abee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	691a      	ldr	r2, [r3, #16]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd2:	b2d2      	uxtb	r2, r2
 800abd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	3b01      	subs	r3, #1
 800abe8:	b29a      	uxth	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abfc:	f043 0204 	orr.w	r2, r3, #4
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f8b3 	bl	800ad78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800ac12:	e039      	b.n	800ac88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac18:	d109      	bne.n	800ac2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2228      	movs	r2, #40	@ 0x28
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff f827 	bl	8009c7c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b28      	cmp	r3, #40	@ 0x28
 800ac38:	d111      	bne.n	800ac5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a15      	ldr	r2, [pc, #84]	@ (800ac94 <I2C_Slave_STOPF+0x25c>)
 800ac3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff f828 	bl	8009cac <HAL_I2C_ListenCpltCallback>
}
 800ac5c:	e014      	b.n	800ac88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac62:	2b22      	cmp	r3, #34	@ 0x22
 800ac64:	d002      	beq.n	800ac6c <I2C_Slave_STOPF+0x234>
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	2b22      	cmp	r3, #34	@ 0x22
 800ac6a:	d10d      	bne.n	800ac88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2220      	movs	r2, #32
 800ac76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7fe fffa 	bl	8009c7c <HAL_I2C_SlaveRxCpltCallback>
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	0800b2d9 	.word	0x0800b2d9
 800ac94:	ffff0000 	.word	0xffff0000

0800ac98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aca6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d002      	beq.n	800acba <I2C_Slave_AF+0x22>
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	d129      	bne.n	800ad0e <I2C_Slave_AF+0x76>
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	2b28      	cmp	r3, #40	@ 0x28
 800acbe:	d126      	bne.n	800ad0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a2c      	ldr	r2, [pc, #176]	@ (800ad74 <I2C_Slave_AF+0xdc>)
 800acc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800acd4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800acde:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7fe ffd0 	bl	8009cac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ad0c:	e02e      	b.n	800ad6c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	2b21      	cmp	r3, #33	@ 0x21
 800ad12:	d126      	bne.n	800ad62 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a17      	ldr	r2, [pc, #92]	@ (800ad74 <I2C_Slave_AF+0xdc>)
 800ad18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2221      	movs	r2, #33	@ 0x21
 800ad1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ad3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad58:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7fe ff84 	bl	8009c68 <HAL_I2C_SlaveTxCpltCallback>
}
 800ad60:	e004      	b.n	800ad6c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad6a:	615a      	str	r2, [r3, #20]
}
 800ad6c:	bf00      	nop
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	ffff0000 	.word	0xffff0000

0800ad78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ad90:	7bbb      	ldrb	r3, [r7, #14]
 800ad92:	2b10      	cmp	r3, #16
 800ad94:	d002      	beq.n	800ad9c <I2C_ITError+0x24>
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b40      	cmp	r3, #64	@ 0x40
 800ad9a:	d10a      	bne.n	800adb2 <I2C_ITError+0x3a>
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	2b22      	cmp	r3, #34	@ 0x22
 800ada0:	d107      	bne.n	800adb2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800adb0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800adb8:	2b28      	cmp	r3, #40	@ 0x28
 800adba:	d107      	bne.n	800adcc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2228      	movs	r2, #40	@ 0x28
 800adc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800adca:	e015      	b.n	800adf8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800add6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adda:	d00a      	beq.n	800adf2 <I2C_ITError+0x7a>
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	2b60      	cmp	r3, #96	@ 0x60
 800ade0:	d007      	beq.n	800adf2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2220      	movs	r2, #32
 800ade6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae06:	d162      	bne.n	800aece <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d020      	beq.n	800ae68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae2a:	4a6a      	ldr	r2, [pc, #424]	@ (800afd4 <I2C_ITError+0x25c>)
 800ae2c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fd fc4e 	bl	80086d4 <HAL_DMA_Abort_IT>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 8089 	beq.w	800af52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f022 0201 	bic.w	r2, r2, #1
 800ae4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2220      	movs	r2, #32
 800ae54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ae62:	4610      	mov	r0, r2
 800ae64:	4798      	blx	r3
 800ae66:	e074      	b.n	800af52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6c:	4a59      	ldr	r2, [pc, #356]	@ (800afd4 <I2C_ITError+0x25c>)
 800ae6e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fd fc2d 	bl	80086d4 <HAL_DMA_Abort_IT>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d068      	beq.n	800af52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae8a:	2b40      	cmp	r3, #64	@ 0x40
 800ae8c:	d10b      	bne.n	800aea6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	691a      	ldr	r2, [r3, #16]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae98:	b2d2      	uxtb	r2, r2
 800ae9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f022 0201 	bic.w	r2, r2, #1
 800aeb4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2220      	movs	r2, #32
 800aeba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
 800aecc:	e041      	b.n	800af52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b60      	cmp	r3, #96	@ 0x60
 800aed8:	d125      	bne.n	800af26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2220      	movs	r2, #32
 800aede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef2:	2b40      	cmp	r3, #64	@ 0x40
 800aef4:	d10b      	bne.n	800af0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	691a      	ldr	r2, [r3, #16]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	b2d2      	uxtb	r2, r2
 800af02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0201 	bic.w	r2, r2, #1
 800af1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7fe feec 	bl	8009cfc <HAL_I2C_AbortCpltCallback>
 800af24:	e015      	b.n	800af52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af30:	2b40      	cmp	r3, #64	@ 0x40
 800af32:	d10b      	bne.n	800af4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691a      	ldr	r2, [r3, #16]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3e:	b2d2      	uxtb	r2, r2
 800af40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7fe fecb 	bl	8009ce8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10e      	bne.n	800af80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d109      	bne.n	800af80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800af72:	2b00      	cmp	r3, #0
 800af74:	d104      	bne.n	800af80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	685a      	ldr	r2, [r3, #4]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800af8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b04      	cmp	r3, #4
 800afa2:	d113      	bne.n	800afcc <I2C_ITError+0x254>
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	2b28      	cmp	r3, #40	@ 0x28
 800afa8:	d110      	bne.n	800afcc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a0a      	ldr	r2, [pc, #40]	@ (800afd8 <I2C_ITError+0x260>)
 800afae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2220      	movs	r2, #32
 800afba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7fe fe70 	bl	8009cac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800afcc:	bf00      	nop
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	0800b2d9 	.word	0x0800b2d9
 800afd8:	ffff0000 	.word	0xffff0000

0800afdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	4608      	mov	r0, r1
 800afe6:	4611      	mov	r1, r2
 800afe8:	461a      	mov	r2, r3
 800afea:	4603      	mov	r3, r0
 800afec:	817b      	strh	r3, [r7, #10]
 800afee:	460b      	mov	r3, r1
 800aff0:	813b      	strh	r3, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b004:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 fa08 	bl	800b428 <I2C_WaitOnFlagUntilTimeout>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00d      	beq.n	800b03a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b02c:	d103      	bne.n	800b036 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b034:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	e05f      	b.n	800b0fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b03a:	897b      	ldrh	r3, [r7, #10]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	461a      	mov	r2, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b048:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04c:	6a3a      	ldr	r2, [r7, #32]
 800b04e:	492d      	ldr	r1, [pc, #180]	@ (800b104 <I2C_RequestMemoryWrite+0x128>)
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 fa40 	bl	800b4d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e04c      	b.n	800b0fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b060:	2300      	movs	r3, #0
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	617b      	str	r3, [r7, #20]
 800b074:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b078:	6a39      	ldr	r1, [r7, #32]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 faaa 	bl	800b5d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00d      	beq.n	800b0a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	d107      	bne.n	800b09e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b09c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e02b      	b.n	800b0fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0a2:	88fb      	ldrh	r3, [r7, #6]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d105      	bne.n	800b0b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b0a8:	893b      	ldrh	r3, [r7, #8]
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	611a      	str	r2, [r3, #16]
 800b0b2:	e021      	b.n	800b0f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b0b4:	893b      	ldrh	r3, [r7, #8]
 800b0b6:	0a1b      	lsrs	r3, r3, #8
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0c4:	6a39      	ldr	r1, [r7, #32]
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 fa84 	bl	800b5d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00d      	beq.n	800b0ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d6:	2b04      	cmp	r3, #4
 800b0d8:	d107      	bne.n	800b0ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e005      	b.n	800b0fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b0ee:	893b      	ldrh	r3, [r7, #8]
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	00010002 	.word	0x00010002

0800b108 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af02      	add	r7, sp, #8
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	4608      	mov	r0, r1
 800b112:	4611      	mov	r1, r2
 800b114:	461a      	mov	r2, r3
 800b116:	4603      	mov	r3, r0
 800b118:	817b      	strh	r3, [r7, #10]
 800b11a:	460b      	mov	r3, r1
 800b11c:	813b      	strh	r3, [r7, #8]
 800b11e:	4613      	mov	r3, r2
 800b120:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b130:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	2200      	movs	r2, #0
 800b14a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 f96a 	bl	800b428 <I2C_WaitOnFlagUntilTimeout>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00d      	beq.n	800b176 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b168:	d103      	bne.n	800b172 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b170:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e0aa      	b.n	800b2cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b176:	897b      	ldrh	r3, [r7, #10]
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b188:	6a3a      	ldr	r2, [r7, #32]
 800b18a:	4952      	ldr	r1, [pc, #328]	@ (800b2d4 <I2C_RequestMemoryRead+0x1cc>)
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f000 f9a2 	bl	800b4d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e097      	b.n	800b2cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b19c:	2300      	movs	r3, #0
 800b19e:	617b      	str	r3, [r7, #20]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	617b      	str	r3, [r7, #20]
 800b1b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1b4:	6a39      	ldr	r1, [r7, #32]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fa0c 	bl	800b5d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00d      	beq.n	800b1de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1c6:	2b04      	cmp	r3, #4
 800b1c8:	d107      	bne.n	800b1da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e076      	b.n	800b2cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b1de:	88fb      	ldrh	r3, [r7, #6]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d105      	bne.n	800b1f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b1e4:	893b      	ldrh	r3, [r7, #8]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	611a      	str	r2, [r3, #16]
 800b1ee:	e021      	b.n	800b234 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b1f0:	893b      	ldrh	r3, [r7, #8]
 800b1f2:	0a1b      	lsrs	r3, r3, #8
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b200:	6a39      	ldr	r1, [r7, #32]
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 f9e6 	bl	800b5d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00d      	beq.n	800b22a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b212:	2b04      	cmp	r3, #4
 800b214:	d107      	bne.n	800b226 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e050      	b.n	800b2cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b22a:	893b      	ldrh	r3, [r7, #8]
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b236:	6a39      	ldr	r1, [r7, #32]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 f9cb 	bl	800b5d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00d      	beq.n	800b260 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d107      	bne.n	800b25c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b25a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e035      	b.n	800b2cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b26e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	2200      	movs	r2, #0
 800b278:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 f8d3 	bl	800b428 <I2C_WaitOnFlagUntilTimeout>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00d      	beq.n	800b2a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b296:	d103      	bne.n	800b2a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b29e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e013      	b.n	800b2cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b2a4:	897b      	ldrh	r3, [r7, #10]
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	f043 0301 	orr.w	r3, r3, #1
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b6:	6a3a      	ldr	r2, [r7, #32]
 800b2b8:	4906      	ldr	r1, [pc, #24]	@ (800b2d4 <I2C_RequestMemoryRead+0x1cc>)
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 f90b 	bl	800b4d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e000      	b.n	800b2cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	00010002 	.word	0x00010002

0800b2d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b2f2:	4b4b      	ldr	r3, [pc, #300]	@ (800b420 <I2C_DMAAbort+0x148>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	08db      	lsrs	r3, r3, #3
 800b2f8:	4a4a      	ldr	r2, [pc, #296]	@ (800b424 <I2C_DMAAbort+0x14c>)
 800b2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b2fe:	0a1a      	lsrs	r2, r3, #8
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	00da      	lsls	r2, r3, #3
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d106      	bne.n	800b320 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b316:	f043 0220 	orr.w	r2, r3, #32
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800b31e:	e00a      	b.n	800b336 <I2C_DMAAbort+0x5e>
    }
    count--;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3b01      	subs	r3, #1
 800b324:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b334:	d0ea      	beq.n	800b30c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b342:	2200      	movs	r2, #0
 800b344:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b352:	2200      	movs	r2, #0
 800b354:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b364:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2200      	movs	r2, #0
 800b36a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b378:	2200      	movs	r2, #0
 800b37a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b388:	2200      	movs	r2, #0
 800b38a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0201 	bic.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b60      	cmp	r3, #96	@ 0x60
 800b3a6:	d10e      	bne.n	800b3c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2220      	movs	r2, #32
 800b3ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b3be:	6978      	ldr	r0, [r7, #20]
 800b3c0:	f7fe fc9c 	bl	8009cfc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b3c4:	e027      	b.n	800b416 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b3c6:	7cfb      	ldrb	r3, [r7, #19]
 800b3c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b3cc:	2b28      	cmp	r3, #40	@ 0x28
 800b3ce:	d117      	bne.n	800b400 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f042 0201 	orr.w	r2, r2, #1
 800b3de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b3ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2228      	movs	r2, #40	@ 0x28
 800b3fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b3fe:	e007      	b.n	800b410 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2220      	movs	r2, #32
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b410:	6978      	ldr	r0, [r7, #20]
 800b412:	f7fe fc69 	bl	8009ce8 <HAL_I2C_ErrorCallback>
}
 800b416:	bf00      	nop
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20000154 	.word	0x20000154
 800b424:	14f8b589 	.word	0x14f8b589

0800b428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	603b      	str	r3, [r7, #0]
 800b434:	4613      	mov	r3, r2
 800b436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b438:	e025      	b.n	800b486 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b440:	d021      	beq.n	800b486 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b442:	f7fc ff57 	bl	80082f4 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d302      	bcc.n	800b458 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d116      	bne.n	800b486 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2220      	movs	r2, #32
 800b462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b472:	f043 0220 	orr.w	r2, r3, #32
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e023      	b.n	800b4ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	0c1b      	lsrs	r3, r3, #16
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d10d      	bne.n	800b4ac <I2C_WaitOnFlagUntilTimeout+0x84>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	43da      	mvns	r2, r3
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	4013      	ands	r3, r2
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	bf0c      	ite	eq
 800b4a2:	2301      	moveq	r3, #1
 800b4a4:	2300      	movne	r3, #0
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	e00c      	b.n	800b4c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	43da      	mvns	r2, r3
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	bf0c      	ite	eq
 800b4be:	2301      	moveq	r3, #1
 800b4c0:	2300      	movne	r3, #0
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	79fb      	ldrb	r3, [r7, #7]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d0b6      	beq.n	800b43a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	60f8      	str	r0, [r7, #12]
 800b4de:	60b9      	str	r1, [r7, #8]
 800b4e0:	607a      	str	r2, [r7, #4]
 800b4e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b4e4:	e051      	b.n	800b58a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	695b      	ldr	r3, [r3, #20]
 800b4ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4f4:	d123      	bne.n	800b53e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b504:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b50e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2220      	movs	r2, #32
 800b51a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b52a:	f043 0204 	orr.w	r2, r3, #4
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e046      	b.n	800b5cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b544:	d021      	beq.n	800b58a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b546:	f7fc fed5 	bl	80082f4 <HAL_GetTick>
 800b54a:	4602      	mov	r2, r0
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	429a      	cmp	r2, r3
 800b554:	d302      	bcc.n	800b55c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d116      	bne.n	800b58a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2220      	movs	r2, #32
 800b566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b576:	f043 0220 	orr.w	r2, r3, #32
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e020      	b.n	800b5cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	0c1b      	lsrs	r3, r3, #16
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b01      	cmp	r3, #1
 800b592:	d10c      	bne.n	800b5ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	43da      	mvns	r2, r3
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	4013      	ands	r3, r2
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bf14      	ite	ne
 800b5a6:	2301      	movne	r3, #1
 800b5a8:	2300      	moveq	r3, #0
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	e00b      	b.n	800b5c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	43da      	mvns	r2, r3
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	bf14      	ite	ne
 800b5c0:	2301      	movne	r3, #1
 800b5c2:	2300      	moveq	r3, #0
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d18d      	bne.n	800b4e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5e0:	e02d      	b.n	800b63e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f900 	bl	800b7e8 <I2C_IsAcknowledgeFailed>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e02d      	b.n	800b64e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f8:	d021      	beq.n	800b63e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5fa:	f7fc fe7b 	bl	80082f4 <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	429a      	cmp	r2, r3
 800b608:	d302      	bcc.n	800b610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d116      	bne.n	800b63e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2220      	movs	r2, #32
 800b61a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b62a:	f043 0220 	orr.w	r2, r3, #32
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e007      	b.n	800b64e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b648:	2b80      	cmp	r3, #128	@ 0x80
 800b64a:	d1ca      	bne.n	800b5e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b662:	e02d      	b.n	800b6c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 f8bf 	bl	800b7e8 <I2C_IsAcknowledgeFailed>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e02d      	b.n	800b6d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d021      	beq.n	800b6c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b67c:	f7fc fe3a 	bl	80082f4 <HAL_GetTick>
 800b680:	4602      	mov	r2, r0
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d302      	bcc.n	800b692 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d116      	bne.n	800b6c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ac:	f043 0220 	orr.w	r2, r3, #32
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e007      	b.n	800b6d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	f003 0304 	and.w	r3, r3, #4
 800b6ca:	2b04      	cmp	r3, #4
 800b6cc:	d1ca      	bne.n	800b664 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800b6e4:	4b13      	ldr	r3, [pc, #76]	@ (800b734 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	08db      	lsrs	r3, r3, #3
 800b6ea:	4a13      	ldr	r2, [pc, #76]	@ (800b738 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f0:	0a1a      	lsrs	r2, r3, #8
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d107      	bne.n	800b716 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b70a:	f043 0220 	orr.w	r2, r3, #32
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e008      	b.n	800b728 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b724:	d0e9      	beq.n	800b6fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	20000154 	.word	0x20000154
 800b738:	14f8b589 	.word	0x14f8b589

0800b73c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b748:	e042      	b.n	800b7d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	f003 0310 	and.w	r3, r3, #16
 800b754:	2b10      	cmp	r3, #16
 800b756:	d119      	bne.n	800b78c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f06f 0210 	mvn.w	r2, #16
 800b760:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2220      	movs	r2, #32
 800b76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	e029      	b.n	800b7e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b78c:	f7fc fdb2 	bl	80082f4 <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d302      	bcc.n	800b7a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d116      	bne.n	800b7d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7bc:	f043 0220 	orr.w	r2, r3, #32
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e007      	b.n	800b7e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7da:	2b40      	cmp	r3, #64	@ 0x40
 800b7dc:	d1b5      	bne.n	800b74a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7fe:	d11b      	bne.n	800b838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2220      	movs	r2, #32
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b824:	f043 0204 	orr.w	r2, r3, #4
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	e000      	b.n	800b83a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b852:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800b856:	d103      	bne.n	800b860 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b85e:	e007      	b.n	800b870 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b864:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800b868:	d102      	bne.n	800b870 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2208      	movs	r2, #8
 800b86e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e267      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	2b00      	cmp	r3, #0
 800b898:	d075      	beq.n	800b986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b89a:	4b88      	ldr	r3, [pc, #544]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	f003 030c 	and.w	r3, r3, #12
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	d00c      	beq.n	800b8c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b8a6:	4b85      	ldr	r3, [pc, #532]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b8ae:	2b08      	cmp	r3, #8
 800b8b0:	d112      	bne.n	800b8d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b8b2:	4b82      	ldr	r3, [pc, #520]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b8be:	d10b      	bne.n	800b8d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8c0:	4b7e      	ldr	r3, [pc, #504]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d05b      	beq.n	800b984 <HAL_RCC_OscConfig+0x108>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d157      	bne.n	800b984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e242      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8e0:	d106      	bne.n	800b8f0 <HAL_RCC_OscConfig+0x74>
 800b8e2:	4b76      	ldr	r3, [pc, #472]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a75      	ldr	r2, [pc, #468]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b8e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	e01d      	b.n	800b92c <HAL_RCC_OscConfig+0xb0>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b8f8:	d10c      	bne.n	800b914 <HAL_RCC_OscConfig+0x98>
 800b8fa:	4b70      	ldr	r3, [pc, #448]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a6f      	ldr	r2, [pc, #444]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b904:	6013      	str	r3, [r2, #0]
 800b906:	4b6d      	ldr	r3, [pc, #436]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a6c      	ldr	r2, [pc, #432]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b90c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	e00b      	b.n	800b92c <HAL_RCC_OscConfig+0xb0>
 800b914:	4b69      	ldr	r3, [pc, #420]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a68      	ldr	r2, [pc, #416]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b91a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	4b66      	ldr	r3, [pc, #408]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a65      	ldr	r2, [pc, #404]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b92a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d013      	beq.n	800b95c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b934:	f7fc fcde 	bl	80082f4 <HAL_GetTick>
 800b938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b93a:	e008      	b.n	800b94e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b93c:	f7fc fcda 	bl	80082f4 <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	2b64      	cmp	r3, #100	@ 0x64
 800b948:	d901      	bls.n	800b94e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e207      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b94e:	4b5b      	ldr	r3, [pc, #364]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0f0      	beq.n	800b93c <HAL_RCC_OscConfig+0xc0>
 800b95a:	e014      	b.n	800b986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b95c:	f7fc fcca 	bl	80082f4 <HAL_GetTick>
 800b960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b962:	e008      	b.n	800b976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b964:	f7fc fcc6 	bl	80082f4 <HAL_GetTick>
 800b968:	4602      	mov	r2, r0
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	1ad3      	subs	r3, r2, r3
 800b96e:	2b64      	cmp	r3, #100	@ 0x64
 800b970:	d901      	bls.n	800b976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b972:	2303      	movs	r3, #3
 800b974:	e1f3      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b976:	4b51      	ldr	r3, [pc, #324]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1f0      	bne.n	800b964 <HAL_RCC_OscConfig+0xe8>
 800b982:	e000      	b.n	800b986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d063      	beq.n	800ba5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b992:	4b4a      	ldr	r3, [pc, #296]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f003 030c 	and.w	r3, r3, #12
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00b      	beq.n	800b9b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b99e:	4b47      	ldr	r3, [pc, #284]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b9a6:	2b08      	cmp	r3, #8
 800b9a8:	d11c      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b9aa:	4b44      	ldr	r3, [pc, #272]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d116      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b9b6:	4b41      	ldr	r3, [pc, #260]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0302 	and.w	r3, r3, #2
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d005      	beq.n	800b9ce <HAL_RCC_OscConfig+0x152>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d001      	beq.n	800b9ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e1c7      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9ce:	4b3b      	ldr	r3, [pc, #236]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	4937      	ldr	r1, [pc, #220]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b9e2:	e03a      	b.n	800ba5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d020      	beq.n	800ba2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b9ec:	4b34      	ldr	r3, [pc, #208]	@ (800bac0 <HAL_RCC_OscConfig+0x244>)
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9f2:	f7fc fc7f 	bl	80082f4 <HAL_GetTick>
 800b9f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9f8:	e008      	b.n	800ba0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b9fa:	f7fc fc7b 	bl	80082f4 <HAL_GetTick>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d901      	bls.n	800ba0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e1a8      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba0c:	4b2b      	ldr	r3, [pc, #172]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 0302 	and.w	r3, r3, #2
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d0f0      	beq.n	800b9fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba18:	4b28      	ldr	r3, [pc, #160]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	00db      	lsls	r3, r3, #3
 800ba26:	4925      	ldr	r1, [pc, #148]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	600b      	str	r3, [r1, #0]
 800ba2c:	e015      	b.n	800ba5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ba2e:	4b24      	ldr	r3, [pc, #144]	@ (800bac0 <HAL_RCC_OscConfig+0x244>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba34:	f7fc fc5e 	bl	80082f4 <HAL_GetTick>
 800ba38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba3a:	e008      	b.n	800ba4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ba3c:	f7fc fc5a 	bl	80082f4 <HAL_GetTick>
 800ba40:	4602      	mov	r2, r0
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d901      	bls.n	800ba4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e187      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba4e:	4b1b      	ldr	r3, [pc, #108]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f003 0302 	and.w	r3, r3, #2
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1f0      	bne.n	800ba3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 0308 	and.w	r3, r3, #8
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d036      	beq.n	800bad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d016      	beq.n	800ba9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba6e:	4b15      	ldr	r3, [pc, #84]	@ (800bac4 <HAL_RCC_OscConfig+0x248>)
 800ba70:	2201      	movs	r2, #1
 800ba72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba74:	f7fc fc3e 	bl	80082f4 <HAL_GetTick>
 800ba78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba7a:	e008      	b.n	800ba8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba7c:	f7fc fc3a 	bl	80082f4 <HAL_GetTick>
 800ba80:	4602      	mov	r2, r0
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d901      	bls.n	800ba8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e167      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba8e:	4b0b      	ldr	r3, [pc, #44]	@ (800babc <HAL_RCC_OscConfig+0x240>)
 800ba90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d0f0      	beq.n	800ba7c <HAL_RCC_OscConfig+0x200>
 800ba9a:	e01b      	b.n	800bad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba9c:	4b09      	ldr	r3, [pc, #36]	@ (800bac4 <HAL_RCC_OscConfig+0x248>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800baa2:	f7fc fc27 	bl	80082f4 <HAL_GetTick>
 800baa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800baa8:	e00e      	b.n	800bac8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800baaa:	f7fc fc23 	bl	80082f4 <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d907      	bls.n	800bac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bab8:	2303      	movs	r3, #3
 800baba:	e150      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
 800babc:	40023800 	.word	0x40023800
 800bac0:	42470000 	.word	0x42470000
 800bac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bac8:	4b88      	ldr	r3, [pc, #544]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800baca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bacc:	f003 0302 	and.w	r3, r3, #2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1ea      	bne.n	800baaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 8097 	beq.w	800bc10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bae2:	2300      	movs	r3, #0
 800bae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bae6:	4b81      	ldr	r3, [pc, #516]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10f      	bne.n	800bb12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800baf2:	2300      	movs	r3, #0
 800baf4:	60bb      	str	r3, [r7, #8]
 800baf6:	4b7d      	ldr	r3, [pc, #500]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800baf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bafa:	4a7c      	ldr	r2, [pc, #496]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bafc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb00:	6413      	str	r3, [r2, #64]	@ 0x40
 800bb02:	4b7a      	ldr	r3, [pc, #488]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb0a:	60bb      	str	r3, [r7, #8]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb12:	4b77      	ldr	r3, [pc, #476]	@ (800bcf0 <HAL_RCC_OscConfig+0x474>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d118      	bne.n	800bb50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bb1e:	4b74      	ldr	r3, [pc, #464]	@ (800bcf0 <HAL_RCC_OscConfig+0x474>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a73      	ldr	r2, [pc, #460]	@ (800bcf0 <HAL_RCC_OscConfig+0x474>)
 800bb24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bb2a:	f7fc fbe3 	bl	80082f4 <HAL_GetTick>
 800bb2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb30:	e008      	b.n	800bb44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb32:	f7fc fbdf 	bl	80082f4 <HAL_GetTick>
 800bb36:	4602      	mov	r2, r0
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d901      	bls.n	800bb44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800bb40:	2303      	movs	r3, #3
 800bb42:	e10c      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb44:	4b6a      	ldr	r3, [pc, #424]	@ (800bcf0 <HAL_RCC_OscConfig+0x474>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d0f0      	beq.n	800bb32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d106      	bne.n	800bb66 <HAL_RCC_OscConfig+0x2ea>
 800bb58:	4b64      	ldr	r3, [pc, #400]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb5c:	4a63      	ldr	r2, [pc, #396]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb5e:	f043 0301 	orr.w	r3, r3, #1
 800bb62:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb64:	e01c      	b.n	800bba0 <HAL_RCC_OscConfig+0x324>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	2b05      	cmp	r3, #5
 800bb6c:	d10c      	bne.n	800bb88 <HAL_RCC_OscConfig+0x30c>
 800bb6e:	4b5f      	ldr	r3, [pc, #380]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb72:	4a5e      	ldr	r2, [pc, #376]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb74:	f043 0304 	orr.w	r3, r3, #4
 800bb78:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb7a:	4b5c      	ldr	r3, [pc, #368]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb7e:	4a5b      	ldr	r2, [pc, #364]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb80:	f043 0301 	orr.w	r3, r3, #1
 800bb84:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb86:	e00b      	b.n	800bba0 <HAL_RCC_OscConfig+0x324>
 800bb88:	4b58      	ldr	r3, [pc, #352]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb8c:	4a57      	ldr	r2, [pc, #348]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb8e:	f023 0301 	bic.w	r3, r3, #1
 800bb92:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb94:	4b55      	ldr	r3, [pc, #340]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb98:	4a54      	ldr	r2, [pc, #336]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bb9a:	f023 0304 	bic.w	r3, r3, #4
 800bb9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d015      	beq.n	800bbd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bba8:	f7fc fba4 	bl	80082f4 <HAL_GetTick>
 800bbac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbae:	e00a      	b.n	800bbc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bbb0:	f7fc fba0 	bl	80082f4 <HAL_GetTick>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d901      	bls.n	800bbc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e0cb      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbc6:	4b49      	ldr	r3, [pc, #292]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bbc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbca:	f003 0302 	and.w	r3, r3, #2
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d0ee      	beq.n	800bbb0 <HAL_RCC_OscConfig+0x334>
 800bbd2:	e014      	b.n	800bbfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbd4:	f7fc fb8e 	bl	80082f4 <HAL_GetTick>
 800bbd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbda:	e00a      	b.n	800bbf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bbdc:	f7fc fb8a 	bl	80082f4 <HAL_GetTick>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d901      	bls.n	800bbf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	e0b5      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbf2:	4b3e      	ldr	r3, [pc, #248]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bbf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbf6:	f003 0302 	and.w	r3, r3, #2
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1ee      	bne.n	800bbdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d105      	bne.n	800bc10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc04:	4b39      	ldr	r3, [pc, #228]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bc06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc08:	4a38      	ldr	r2, [pc, #224]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bc0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 80a1 	beq.w	800bd5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bc1a:	4b34      	ldr	r3, [pc, #208]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	f003 030c 	and.w	r3, r3, #12
 800bc22:	2b08      	cmp	r3, #8
 800bc24:	d05c      	beq.n	800bce0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d141      	bne.n	800bcb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc2e:	4b31      	ldr	r3, [pc, #196]	@ (800bcf4 <HAL_RCC_OscConfig+0x478>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc34:	f7fc fb5e 	bl	80082f4 <HAL_GetTick>
 800bc38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc3a:	e008      	b.n	800bc4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc3c:	f7fc fb5a 	bl	80082f4 <HAL_GetTick>
 800bc40:	4602      	mov	r2, r0
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	d901      	bls.n	800bc4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	e087      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc4e:	4b27      	ldr	r3, [pc, #156]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1f0      	bne.n	800bc3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	69da      	ldr	r2, [r3, #28]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	431a      	orrs	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc68:	019b      	lsls	r3, r3, #6
 800bc6a:	431a      	orrs	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc70:	085b      	lsrs	r3, r3, #1
 800bc72:	3b01      	subs	r3, #1
 800bc74:	041b      	lsls	r3, r3, #16
 800bc76:	431a      	orrs	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7c:	061b      	lsls	r3, r3, #24
 800bc7e:	491b      	ldr	r1, [pc, #108]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bc80:	4313      	orrs	r3, r2
 800bc82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc84:	4b1b      	ldr	r3, [pc, #108]	@ (800bcf4 <HAL_RCC_OscConfig+0x478>)
 800bc86:	2201      	movs	r2, #1
 800bc88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc8a:	f7fc fb33 	bl	80082f4 <HAL_GetTick>
 800bc8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc90:	e008      	b.n	800bca4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc92:	f7fc fb2f 	bl	80082f4 <HAL_GetTick>
 800bc96:	4602      	mov	r2, r0
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d901      	bls.n	800bca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e05c      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bca4:	4b11      	ldr	r3, [pc, #68]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d0f0      	beq.n	800bc92 <HAL_RCC_OscConfig+0x416>
 800bcb0:	e054      	b.n	800bd5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcb2:	4b10      	ldr	r3, [pc, #64]	@ (800bcf4 <HAL_RCC_OscConfig+0x478>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcb8:	f7fc fb1c 	bl	80082f4 <HAL_GetTick>
 800bcbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcbe:	e008      	b.n	800bcd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bcc0:	f7fc fb18 	bl	80082f4 <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d901      	bls.n	800bcd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e045      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcd2:	4b06      	ldr	r3, [pc, #24]	@ (800bcec <HAL_RCC_OscConfig+0x470>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1f0      	bne.n	800bcc0 <HAL_RCC_OscConfig+0x444>
 800bcde:	e03d      	b.n	800bd5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d107      	bne.n	800bcf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e038      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
 800bcec:	40023800 	.word	0x40023800
 800bcf0:	40007000 	.word	0x40007000
 800bcf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bcf8:	4b1b      	ldr	r3, [pc, #108]	@ (800bd68 <HAL_RCC_OscConfig+0x4ec>)
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d028      	beq.n	800bd58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d121      	bne.n	800bd58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d11a      	bne.n	800bd58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800bd28:	4013      	ands	r3, r2
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bd2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d111      	bne.n	800bd58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3e:	085b      	lsrs	r3, r3, #1
 800bd40:	3b01      	subs	r3, #1
 800bd42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d107      	bne.n	800bd58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d001      	beq.n	800bd5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e000      	b.n	800bd5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	40023800 	.word	0x40023800

0800bd6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e0cc      	b.n	800bf1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bd80:	4b68      	ldr	r3, [pc, #416]	@ (800bf24 <HAL_RCC_ClockConfig+0x1b8>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0307 	and.w	r3, r3, #7
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d90c      	bls.n	800bda8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd8e:	4b65      	ldr	r3, [pc, #404]	@ (800bf24 <HAL_RCC_ClockConfig+0x1b8>)
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	b2d2      	uxtb	r2, r2
 800bd94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd96:	4b63      	ldr	r3, [pc, #396]	@ (800bf24 <HAL_RCC_ClockConfig+0x1b8>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 0307 	and.w	r3, r3, #7
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d001      	beq.n	800bda8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e0b8      	b.n	800bf1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 0302 	and.w	r3, r3, #2
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d020      	beq.n	800bdf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 0304 	and.w	r3, r3, #4
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d005      	beq.n	800bdcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bdc0:	4b59      	ldr	r3, [pc, #356]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	4a58      	ldr	r2, [pc, #352]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bdc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800bdca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0308 	and.w	r3, r3, #8
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bdd8:	4b53      	ldr	r3, [pc, #332]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	4a52      	ldr	r2, [pc, #328]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bdde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800bde2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bde4:	4b50      	ldr	r3, [pc, #320]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	494d      	ldr	r1, [pc, #308]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f003 0301 	and.w	r3, r3, #1
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d044      	beq.n	800be8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d107      	bne.n	800be1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be0a:	4b47      	ldr	r3, [pc, #284]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be12:	2b00      	cmp	r3, #0
 800be14:	d119      	bne.n	800be4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e07f      	b.n	800bf1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d003      	beq.n	800be2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800be26:	2b03      	cmp	r3, #3
 800be28:	d107      	bne.n	800be3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be2a:	4b3f      	ldr	r3, [pc, #252]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d109      	bne.n	800be4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e06f      	b.n	800bf1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be3a:	4b3b      	ldr	r3, [pc, #236]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 0302 	and.w	r3, r3, #2
 800be42:	2b00      	cmp	r3, #0
 800be44:	d101      	bne.n	800be4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e067      	b.n	800bf1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be4a:	4b37      	ldr	r3, [pc, #220]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	f023 0203 	bic.w	r2, r3, #3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	4934      	ldr	r1, [pc, #208]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800be58:	4313      	orrs	r3, r2
 800be5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800be5c:	f7fc fa4a 	bl	80082f4 <HAL_GetTick>
 800be60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be62:	e00a      	b.n	800be7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be64:	f7fc fa46 	bl	80082f4 <HAL_GetTick>
 800be68:	4602      	mov	r2, r0
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be72:	4293      	cmp	r3, r2
 800be74:	d901      	bls.n	800be7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	e04f      	b.n	800bf1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be7a:	4b2b      	ldr	r3, [pc, #172]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	f003 020c 	and.w	r2, r3, #12
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	429a      	cmp	r2, r3
 800be8a:	d1eb      	bne.n	800be64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800be8c:	4b25      	ldr	r3, [pc, #148]	@ (800bf24 <HAL_RCC_ClockConfig+0x1b8>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f003 0307 	and.w	r3, r3, #7
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	429a      	cmp	r2, r3
 800be98:	d20c      	bcs.n	800beb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be9a:	4b22      	ldr	r3, [pc, #136]	@ (800bf24 <HAL_RCC_ClockConfig+0x1b8>)
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	b2d2      	uxtb	r2, r2
 800bea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bea2:	4b20      	ldr	r3, [pc, #128]	@ (800bf24 <HAL_RCC_ClockConfig+0x1b8>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0307 	and.w	r3, r3, #7
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d001      	beq.n	800beb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e032      	b.n	800bf1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0304 	and.w	r3, r3, #4
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d008      	beq.n	800bed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bec0:	4b19      	ldr	r3, [pc, #100]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	4916      	ldr	r1, [pc, #88]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bece:	4313      	orrs	r3, r2
 800bed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 0308 	and.w	r3, r3, #8
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d009      	beq.n	800bef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bede:	4b12      	ldr	r3, [pc, #72]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	00db      	lsls	r3, r3, #3
 800beec:	490e      	ldr	r1, [pc, #56]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800beee:	4313      	orrs	r3, r2
 800bef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bef2:	f000 f821 	bl	800bf38 <HAL_RCC_GetSysClockFreq>
 800bef6:	4602      	mov	r2, r0
 800bef8:	4b0b      	ldr	r3, [pc, #44]	@ (800bf28 <HAL_RCC_ClockConfig+0x1bc>)
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	091b      	lsrs	r3, r3, #4
 800befe:	f003 030f 	and.w	r3, r3, #15
 800bf02:	490a      	ldr	r1, [pc, #40]	@ (800bf2c <HAL_RCC_ClockConfig+0x1c0>)
 800bf04:	5ccb      	ldrb	r3, [r1, r3]
 800bf06:	fa22 f303 	lsr.w	r3, r2, r3
 800bf0a:	4a09      	ldr	r2, [pc, #36]	@ (800bf30 <HAL_RCC_ClockConfig+0x1c4>)
 800bf0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bf0e:	4b09      	ldr	r3, [pc, #36]	@ (800bf34 <HAL_RCC_ClockConfig+0x1c8>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fc f9aa 	bl	800826c <HAL_InitTick>

  return HAL_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	40023c00 	.word	0x40023c00
 800bf28:	40023800 	.word	0x40023800
 800bf2c:	0803773c 	.word	0x0803773c
 800bf30:	20000154 	.word	0x20000154
 800bf34:	20000180 	.word	0x20000180

0800bf38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf3c:	b094      	sub	sp, #80	@ 0x50
 800bf3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bf40:	2300      	movs	r3, #0
 800bf42:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf44:	2300      	movs	r3, #0
 800bf46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf48:	2300      	movs	r3, #0
 800bf4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bf50:	4b79      	ldr	r3, [pc, #484]	@ (800c138 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f003 030c 	and.w	r3, r3, #12
 800bf58:	2b08      	cmp	r3, #8
 800bf5a:	d00d      	beq.n	800bf78 <HAL_RCC_GetSysClockFreq+0x40>
 800bf5c:	2b08      	cmp	r3, #8
 800bf5e:	f200 80e1 	bhi.w	800c124 <HAL_RCC_GetSysClockFreq+0x1ec>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <HAL_RCC_GetSysClockFreq+0x34>
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	d003      	beq.n	800bf72 <HAL_RCC_GetSysClockFreq+0x3a>
 800bf6a:	e0db      	b.n	800c124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bf6c:	4b73      	ldr	r3, [pc, #460]	@ (800c13c <HAL_RCC_GetSysClockFreq+0x204>)
 800bf6e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800bf70:	e0db      	b.n	800c12a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bf72:	4b73      	ldr	r3, [pc, #460]	@ (800c140 <HAL_RCC_GetSysClockFreq+0x208>)
 800bf74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800bf76:	e0d8      	b.n	800c12a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf78:	4b6f      	ldr	r3, [pc, #444]	@ (800c138 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf80:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bf82:	4b6d      	ldr	r3, [pc, #436]	@ (800c138 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d063      	beq.n	800c056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf8e:	4b6a      	ldr	r3, [pc, #424]	@ (800c138 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	099b      	lsrs	r3, r3, #6
 800bf94:	2200      	movs	r2, #0
 800bf96:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa0:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800bfaa:	4622      	mov	r2, r4
 800bfac:	462b      	mov	r3, r5
 800bfae:	f04f 0000 	mov.w	r0, #0
 800bfb2:	f04f 0100 	mov.w	r1, #0
 800bfb6:	0159      	lsls	r1, r3, #5
 800bfb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bfbc:	0150      	lsls	r0, r2, #5
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	1a51      	subs	r1, r2, r1
 800bfc6:	6139      	str	r1, [r7, #16]
 800bfc8:	4629      	mov	r1, r5
 800bfca:	eb63 0301 	sbc.w	r3, r3, r1
 800bfce:	617b      	str	r3, [r7, #20]
 800bfd0:	f04f 0200 	mov.w	r2, #0
 800bfd4:	f04f 0300 	mov.w	r3, #0
 800bfd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bfdc:	4659      	mov	r1, fp
 800bfde:	018b      	lsls	r3, r1, #6
 800bfe0:	4651      	mov	r1, sl
 800bfe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bfe6:	4651      	mov	r1, sl
 800bfe8:	018a      	lsls	r2, r1, #6
 800bfea:	4651      	mov	r1, sl
 800bfec:	ebb2 0801 	subs.w	r8, r2, r1
 800bff0:	4659      	mov	r1, fp
 800bff2:	eb63 0901 	sbc.w	r9, r3, r1
 800bff6:	f04f 0200 	mov.w	r2, #0
 800bffa:	f04f 0300 	mov.w	r3, #0
 800bffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c00a:	4690      	mov	r8, r2
 800c00c:	4699      	mov	r9, r3
 800c00e:	4623      	mov	r3, r4
 800c010:	eb18 0303 	adds.w	r3, r8, r3
 800c014:	60bb      	str	r3, [r7, #8]
 800c016:	462b      	mov	r3, r5
 800c018:	eb49 0303 	adc.w	r3, r9, r3
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	f04f 0300 	mov.w	r3, #0
 800c026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c02a:	4629      	mov	r1, r5
 800c02c:	024b      	lsls	r3, r1, #9
 800c02e:	4621      	mov	r1, r4
 800c030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c034:	4621      	mov	r1, r4
 800c036:	024a      	lsls	r2, r1, #9
 800c038:	4610      	mov	r0, r2
 800c03a:	4619      	mov	r1, r3
 800c03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c03e:	2200      	movs	r2, #0
 800c040:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c048:	f7f4 f8d0 	bl	80001ec <__aeabi_uldivmod>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	4613      	mov	r3, r2
 800c052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c054:	e058      	b.n	800c108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c056:	4b38      	ldr	r3, [pc, #224]	@ (800c138 <HAL_RCC_GetSysClockFreq+0x200>)
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	099b      	lsrs	r3, r3, #6
 800c05c:	2200      	movs	r2, #0
 800c05e:	4618      	mov	r0, r3
 800c060:	4611      	mov	r1, r2
 800c062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c066:	623b      	str	r3, [r7, #32]
 800c068:	2300      	movs	r3, #0
 800c06a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c06c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c070:	4642      	mov	r2, r8
 800c072:	464b      	mov	r3, r9
 800c074:	f04f 0000 	mov.w	r0, #0
 800c078:	f04f 0100 	mov.w	r1, #0
 800c07c:	0159      	lsls	r1, r3, #5
 800c07e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c082:	0150      	lsls	r0, r2, #5
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	4641      	mov	r1, r8
 800c08a:	ebb2 0a01 	subs.w	sl, r2, r1
 800c08e:	4649      	mov	r1, r9
 800c090:	eb63 0b01 	sbc.w	fp, r3, r1
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	f04f 0300 	mov.w	r3, #0
 800c09c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c0a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c0a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c0a8:	ebb2 040a 	subs.w	r4, r2, sl
 800c0ac:	eb63 050b 	sbc.w	r5, r3, fp
 800c0b0:	f04f 0200 	mov.w	r2, #0
 800c0b4:	f04f 0300 	mov.w	r3, #0
 800c0b8:	00eb      	lsls	r3, r5, #3
 800c0ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c0be:	00e2      	lsls	r2, r4, #3
 800c0c0:	4614      	mov	r4, r2
 800c0c2:	461d      	mov	r5, r3
 800c0c4:	4643      	mov	r3, r8
 800c0c6:	18e3      	adds	r3, r4, r3
 800c0c8:	603b      	str	r3, [r7, #0]
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	eb45 0303 	adc.w	r3, r5, r3
 800c0d0:	607b      	str	r3, [r7, #4]
 800c0d2:	f04f 0200 	mov.w	r2, #0
 800c0d6:	f04f 0300 	mov.w	r3, #0
 800c0da:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c0de:	4629      	mov	r1, r5
 800c0e0:	028b      	lsls	r3, r1, #10
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c0e8:	4621      	mov	r1, r4
 800c0ea:	028a      	lsls	r2, r1, #10
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	61bb      	str	r3, [r7, #24]
 800c0f6:	61fa      	str	r2, [r7, #28]
 800c0f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c0fc:	f7f4 f876 	bl	80001ec <__aeabi_uldivmod>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4613      	mov	r3, r2
 800c106:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c108:	4b0b      	ldr	r3, [pc, #44]	@ (800c138 <HAL_RCC_GetSysClockFreq+0x200>)
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	0c1b      	lsrs	r3, r3, #16
 800c10e:	f003 0303 	and.w	r3, r3, #3
 800c112:	3301      	adds	r3, #1
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800c118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c11a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c11c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c122:	e002      	b.n	800c12a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c124:	4b05      	ldr	r3, [pc, #20]	@ (800c13c <HAL_RCC_GetSysClockFreq+0x204>)
 800c126:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c12a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3750      	adds	r7, #80	@ 0x50
 800c130:	46bd      	mov	sp, r7
 800c132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c136:	bf00      	nop
 800c138:	40023800 	.word	0x40023800
 800c13c:	00f42400 	.word	0x00f42400
 800c140:	007a1200 	.word	0x007a1200

0800c144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c144:	b480      	push	{r7}
 800c146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c148:	4b03      	ldr	r3, [pc, #12]	@ (800c158 <HAL_RCC_GetHCLKFreq+0x14>)
 800c14a:	681b      	ldr	r3, [r3, #0]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	20000154 	.word	0x20000154

0800c15c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c160:	f7ff fff0 	bl	800c144 <HAL_RCC_GetHCLKFreq>
 800c164:	4602      	mov	r2, r0
 800c166:	4b05      	ldr	r3, [pc, #20]	@ (800c17c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	0a9b      	lsrs	r3, r3, #10
 800c16c:	f003 0307 	and.w	r3, r3, #7
 800c170:	4903      	ldr	r1, [pc, #12]	@ (800c180 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c172:	5ccb      	ldrb	r3, [r1, r3]
 800c174:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c178:	4618      	mov	r0, r3
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	40023800 	.word	0x40023800
 800c180:	0803774c 	.word	0x0803774c

0800c184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c188:	f7ff ffdc 	bl	800c144 <HAL_RCC_GetHCLKFreq>
 800c18c:	4602      	mov	r2, r0
 800c18e:	4b05      	ldr	r3, [pc, #20]	@ (800c1a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	0b5b      	lsrs	r3, r3, #13
 800c194:	f003 0307 	and.w	r3, r3, #7
 800c198:	4903      	ldr	r1, [pc, #12]	@ (800c1a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c19a:	5ccb      	ldrb	r3, [r1, r3]
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	40023800 	.word	0x40023800
 800c1a8:	0803774c 	.word	0x0803774c

0800c1ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d101      	bne.n	800c1be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e07b      	b.n	800c2b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d108      	bne.n	800c1d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c1ce:	d009      	beq.n	800c1e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	61da      	str	r2, [r3, #28]
 800c1d6:	e005      	b.n	800c1e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7fa fcfe 	bl	8006c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2202      	movs	r2, #2
 800c208:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c21a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c22c:	431a      	orrs	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c236:	431a      	orrs	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	f003 0302 	and.w	r3, r3, #2
 800c240:	431a      	orrs	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	695b      	ldr	r3, [r3, #20]
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	431a      	orrs	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	699b      	ldr	r3, [r3, #24]
 800c250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c254:	431a      	orrs	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a1b      	ldr	r3, [r3, #32]
 800c264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c268:	ea42 0103 	orr.w	r1, r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c270:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	430a      	orrs	r2, r1
 800c27a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	0c1b      	lsrs	r3, r3, #16
 800c282:	f003 0104 	and.w	r1, r3, #4
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c28a:	f003 0210 	and.w	r2, r3, #16
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	430a      	orrs	r2, r1
 800c294:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	69da      	ldr	r2, [r3, #28]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c2a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b088      	sub	sp, #32
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	60f8      	str	r0, [r7, #12]
 800c2c6:	60b9      	str	r1, [r7, #8]
 800c2c8:	603b      	str	r3, [r7, #0]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d101      	bne.n	800c2e0 <HAL_SPI_Transmit+0x22>
 800c2dc:	2302      	movs	r3, #2
 800c2de:	e126      	b.n	800c52e <HAL_SPI_Transmit+0x270>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2e8:	f7fc f804 	bl	80082f4 <HAL_GetTick>
 800c2ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c2ee:	88fb      	ldrh	r3, [r7, #6]
 800c2f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d002      	beq.n	800c304 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c2fe:	2302      	movs	r3, #2
 800c300:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c302:	e10b      	b.n	800c51c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <HAL_SPI_Transmit+0x52>
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d102      	bne.n	800c316 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c314:	e102      	b.n	800c51c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2203      	movs	r2, #3
 800c31a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	88fa      	ldrh	r2, [r7, #6]
 800c32e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	88fa      	ldrh	r2, [r7, #6]
 800c334:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c35c:	d10f      	bne.n	800c37e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c36c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c37c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c388:	2b40      	cmp	r3, #64	@ 0x40
 800c38a:	d007      	beq.n	800c39c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c39a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3a4:	d14b      	bne.n	800c43e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <HAL_SPI_Transmit+0xf6>
 800c3ae:	8afb      	ldrh	r3, [r7, #22]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d13e      	bne.n	800c432 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b8:	881a      	ldrh	r2, [r3, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3c4:	1c9a      	adds	r2, r3, #2
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c3d8:	e02b      	b.n	800c432 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	f003 0302 	and.w	r3, r3, #2
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d112      	bne.n	800c40e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ec:	881a      	ldrh	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f8:	1c9a      	adds	r2, r3, #2
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c402:	b29b      	uxth	r3, r3
 800c404:	3b01      	subs	r3, #1
 800c406:	b29a      	uxth	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800c40c:	e011      	b.n	800c432 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c40e:	f7fb ff71 	bl	80082f4 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d803      	bhi.n	800c426 <HAL_SPI_Transmit+0x168>
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c424:	d102      	bne.n	800c42c <HAL_SPI_Transmit+0x16e>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d102      	bne.n	800c432 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c42c:	2303      	movs	r3, #3
 800c42e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c430:	e074      	b.n	800c51c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c436:	b29b      	uxth	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1ce      	bne.n	800c3da <HAL_SPI_Transmit+0x11c>
 800c43c:	e04c      	b.n	800c4d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <HAL_SPI_Transmit+0x18e>
 800c446:	8afb      	ldrh	r3, [r7, #22]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d140      	bne.n	800c4ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	330c      	adds	r3, #12
 800c456:	7812      	ldrb	r2, [r2, #0]
 800c458:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c468:	b29b      	uxth	r3, r3
 800c46a:	3b01      	subs	r3, #1
 800c46c:	b29a      	uxth	r2, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c472:	e02c      	b.n	800c4ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	f003 0302 	and.w	r3, r3, #2
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d113      	bne.n	800c4aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	330c      	adds	r3, #12
 800c48c:	7812      	ldrb	r2, [r2, #0]
 800c48e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800c4a8:	e011      	b.n	800c4ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4aa:	f7fb ff23 	bl	80082f4 <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d803      	bhi.n	800c4c2 <HAL_SPI_Transmit+0x204>
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c0:	d102      	bne.n	800c4c8 <HAL_SPI_Transmit+0x20a>
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c4cc:	e026      	b.n	800c51c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1cd      	bne.n	800c474 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c4d8:	69ba      	ldr	r2, [r7, #24]
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 fce9 	bl	800ceb4 <SPI_EndRxTxTransaction>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2220      	movs	r2, #32
 800c4ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10a      	bne.n	800c50c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	613b      	str	r3, [r7, #16]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	613b      	str	r3, [r7, #16]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	613b      	str	r3, [r7, #16]
 800c50a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	77fb      	strb	r3, [r7, #31]
 800c518:	e000      	b.n	800c51c <HAL_SPI_Transmit+0x25e>
  }

error:
 800c51a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800c52c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3720      	adds	r7, #32
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b088      	sub	sp, #32
 800c53a:	af02      	add	r7, sp, #8
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	603b      	str	r3, [r7, #0]
 800c542:	4613      	mov	r3, r2
 800c544:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c552:	d112      	bne.n	800c57a <HAL_SPI_Receive+0x44>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10e      	bne.n	800c57a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2204      	movs	r2, #4
 800c560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c564:	88fa      	ldrh	r2, [r7, #6]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	4613      	mov	r3, r2
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	68b9      	ldr	r1, [r7, #8]
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 f8f1 	bl	800c758 <HAL_SPI_TransmitReceive>
 800c576:	4603      	mov	r3, r0
 800c578:	e0ea      	b.n	800c750 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c580:	2b01      	cmp	r3, #1
 800c582:	d101      	bne.n	800c588 <HAL_SPI_Receive+0x52>
 800c584:	2302      	movs	r3, #2
 800c586:	e0e3      	b.n	800c750 <HAL_SPI_Receive+0x21a>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c590:	f7fb feb0 	bl	80082f4 <HAL_GetTick>
 800c594:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d002      	beq.n	800c5a8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c5a6:	e0ca      	b.n	800c73e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d002      	beq.n	800c5b4 <HAL_SPI_Receive+0x7e>
 800c5ae:	88fb      	ldrh	r3, [r7, #6]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d102      	bne.n	800c5ba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c5b8:	e0c1      	b.n	800c73e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2204      	movs	r2, #4
 800c5be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	88fa      	ldrh	r2, [r7, #6]
 800c5d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	88fa      	ldrh	r2, [r7, #6]
 800c5d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c600:	d10f      	bne.n	800c622 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c620:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c62c:	2b40      	cmp	r3, #64	@ 0x40
 800c62e:	d007      	beq.n	800c640 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c63e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d162      	bne.n	800c70e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c648:	e02e      	b.n	800c6a8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	f003 0301 	and.w	r3, r3, #1
 800c654:	2b01      	cmp	r3, #1
 800c656:	d115      	bne.n	800c684 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f103 020c 	add.w	r2, r3, #12
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c664:	7812      	ldrb	r2, [r2, #0]
 800c666:	b2d2      	uxtb	r2, r2
 800c668:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c66e:	1c5a      	adds	r2, r3, #1
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c678:	b29b      	uxth	r3, r3
 800c67a:	3b01      	subs	r3, #1
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c682:	e011      	b.n	800c6a8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c684:	f7fb fe36 	bl	80082f4 <HAL_GetTick>
 800c688:	4602      	mov	r2, r0
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d803      	bhi.n	800c69c <HAL_SPI_Receive+0x166>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69a:	d102      	bne.n	800c6a2 <HAL_SPI_Receive+0x16c>
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d102      	bne.n	800c6a8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c6a6:	e04a      	b.n	800c73e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1cb      	bne.n	800c64a <HAL_SPI_Receive+0x114>
 800c6b2:	e031      	b.n	800c718 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d113      	bne.n	800c6ea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68da      	ldr	r2, [r3, #12]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6cc:	b292      	uxth	r2, r2
 800c6ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d4:	1c9a      	adds	r2, r3, #2
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c6e8:	e011      	b.n	800c70e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6ea:	f7fb fe03 	bl	80082f4 <HAL_GetTick>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d803      	bhi.n	800c702 <HAL_SPI_Receive+0x1cc>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c700:	d102      	bne.n	800c708 <HAL_SPI_Receive+0x1d2>
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d102      	bne.n	800c70e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c70c:	e017      	b.n	800c73e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c712:	b29b      	uxth	r3, r3
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1cd      	bne.n	800c6b4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f000 fb63 	bl	800cde8 <SPI_EndRxTransaction>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2220      	movs	r2, #32
 800c72c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c732:	2b00      	cmp	r3, #0
 800c734:	d002      	beq.n	800c73c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	75fb      	strb	r3, [r7, #23]
 800c73a:	e000      	b.n	800c73e <HAL_SPI_Receive+0x208>
  }

error :
 800c73c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2201      	movs	r2, #1
 800c742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800c74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3718      	adds	r7, #24
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08c      	sub	sp, #48	@ 0x30
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c766:	2301      	movs	r3, #1
 800c768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c776:	2b01      	cmp	r3, #1
 800c778:	d101      	bne.n	800c77e <HAL_SPI_TransmitReceive+0x26>
 800c77a:	2302      	movs	r3, #2
 800c77c:	e18a      	b.n	800ca94 <HAL_SPI_TransmitReceive+0x33c>
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c786:	f7fb fdb5 	bl	80082f4 <HAL_GetTick>
 800c78a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c79c:	887b      	ldrh	r3, [r7, #2]
 800c79e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c7a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d00f      	beq.n	800c7c8 <HAL_SPI_TransmitReceive+0x70>
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c7ae:	d107      	bne.n	800c7c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d103      	bne.n	800c7c0 <HAL_SPI_TransmitReceive+0x68>
 800c7b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c7bc:	2b04      	cmp	r3, #4
 800c7be:	d003      	beq.n	800c7c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c7c0:	2302      	movs	r3, #2
 800c7c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800c7c6:	e15b      	b.n	800ca80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d005      	beq.n	800c7da <HAL_SPI_TransmitReceive+0x82>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <HAL_SPI_TransmitReceive+0x82>
 800c7d4:	887b      	ldrh	r3, [r7, #2]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d103      	bne.n	800c7e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800c7e0:	e14e      	b.n	800ca80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	d003      	beq.n	800c7f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2205      	movs	r2, #5
 800c7f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	887a      	ldrh	r2, [r7, #2]
 800c806:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	887a      	ldrh	r2, [r7, #2]
 800c80c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	887a      	ldrh	r2, [r7, #2]
 800c818:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	887a      	ldrh	r2, [r7, #2]
 800c81e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c836:	2b40      	cmp	r3, #64	@ 0x40
 800c838:	d007      	beq.n	800c84a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c848:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c852:	d178      	bne.n	800c946 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <HAL_SPI_TransmitReceive+0x10a>
 800c85c:	8b7b      	ldrh	r3, [r7, #26]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d166      	bne.n	800c930 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c866:	881a      	ldrh	r2, [r3, #0]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c872:	1c9a      	adds	r2, r3, #2
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	3b01      	subs	r3, #1
 800c880:	b29a      	uxth	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c886:	e053      	b.n	800c930 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f003 0302 	and.w	r3, r3, #2
 800c892:	2b02      	cmp	r3, #2
 800c894:	d11b      	bne.n	800c8ce <HAL_SPI_TransmitReceive+0x176>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d016      	beq.n	800c8ce <HAL_SPI_TransmitReceive+0x176>
 800c8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d113      	bne.n	800c8ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8aa:	881a      	ldrh	r2, [r3, #0]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8b6:	1c9a      	adds	r2, r3, #2
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f003 0301 	and.w	r3, r3, #1
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d119      	bne.n	800c910 <HAL_SPI_TransmitReceive+0x1b8>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d014      	beq.n	800c910 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68da      	ldr	r2, [r3, #12]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f0:	b292      	uxth	r2, r2
 800c8f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f8:	1c9a      	adds	r2, r3, #2
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c902:	b29b      	uxth	r3, r3
 800c904:	3b01      	subs	r3, #1
 800c906:	b29a      	uxth	r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c90c:	2301      	movs	r3, #1
 800c90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c910:	f7fb fcf0 	bl	80082f4 <HAL_GetTick>
 800c914:	4602      	mov	r2, r0
 800c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d807      	bhi.n	800c930 <HAL_SPI_TransmitReceive+0x1d8>
 800c920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c926:	d003      	beq.n	800c930 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c928:	2303      	movs	r3, #3
 800c92a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800c92e:	e0a7      	b.n	800ca80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c934:	b29b      	uxth	r3, r3
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1a6      	bne.n	800c888 <HAL_SPI_TransmitReceive+0x130>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c93e:	b29b      	uxth	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1a1      	bne.n	800c888 <HAL_SPI_TransmitReceive+0x130>
 800c944:	e07c      	b.n	800ca40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <HAL_SPI_TransmitReceive+0x1fc>
 800c94e:	8b7b      	ldrh	r3, [r7, #26]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d16b      	bne.n	800ca2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	330c      	adds	r3, #12
 800c95e:	7812      	ldrb	r2, [r2, #0]
 800c960:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c970:	b29b      	uxth	r3, r3
 800c972:	3b01      	subs	r3, #1
 800c974:	b29a      	uxth	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c97a:	e057      	b.n	800ca2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	f003 0302 	and.w	r3, r3, #2
 800c986:	2b02      	cmp	r3, #2
 800c988:	d11c      	bne.n	800c9c4 <HAL_SPI_TransmitReceive+0x26c>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c98e:	b29b      	uxth	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	d017      	beq.n	800c9c4 <HAL_SPI_TransmitReceive+0x26c>
 800c994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c996:	2b01      	cmp	r3, #1
 800c998:	d114      	bne.n	800c9c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	330c      	adds	r3, #12
 800c9a4:	7812      	ldrb	r2, [r2, #0]
 800c9a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f003 0301 	and.w	r3, r3, #1
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d119      	bne.n	800ca06 <HAL_SPI_TransmitReceive+0x2ae>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d014      	beq.n	800ca06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68da      	ldr	r2, [r3, #12]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e6:	b2d2      	uxtb	r2, r2
 800c9e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ca02:	2301      	movs	r3, #1
 800ca04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ca06:	f7fb fc75 	bl	80082f4 <HAL_GetTick>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d803      	bhi.n	800ca1e <HAL_SPI_TransmitReceive+0x2c6>
 800ca16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1c:	d102      	bne.n	800ca24 <HAL_SPI_TransmitReceive+0x2cc>
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d103      	bne.n	800ca2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ca24:	2303      	movs	r3, #3
 800ca26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800ca2a:	e029      	b.n	800ca80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1a2      	bne.n	800c97c <HAL_SPI_TransmitReceive+0x224>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d19d      	bne.n	800c97c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f000 fa35 	bl	800ceb4 <SPI_EndRxTxTransaction>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d006      	beq.n	800ca5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2220      	movs	r2, #32
 800ca5a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800ca5c:	e010      	b.n	800ca80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10b      	bne.n	800ca7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca66:	2300      	movs	r3, #0
 800ca68:	617b      	str	r3, [r7, #20]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	617b      	str	r3, [r7, #20]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	617b      	str	r3, [r7, #20]
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	e000      	b.n	800ca80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ca7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ca90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3730      	adds	r7, #48	@ 0x30
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b088      	sub	sp, #32
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	099b      	lsrs	r3, r3, #6
 800cab8:	f003 0301 	and.w	r3, r3, #1
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10f      	bne.n	800cae0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00a      	beq.n	800cae0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	099b      	lsrs	r3, r3, #6
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d004      	beq.n	800cae0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	4798      	blx	r3
    return;
 800cade:	e0d7      	b.n	800cc90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	085b      	lsrs	r3, r3, #1
 800cae4:	f003 0301 	and.w	r3, r3, #1
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d00a      	beq.n	800cb02 <HAL_SPI_IRQHandler+0x66>
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	09db      	lsrs	r3, r3, #7
 800caf0:	f003 0301 	and.w	r3, r3, #1
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	4798      	blx	r3
    return;
 800cb00:	e0c6      	b.n	800cc90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	095b      	lsrs	r3, r3, #5
 800cb06:	f003 0301 	and.w	r3, r3, #1
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10c      	bne.n	800cb28 <HAL_SPI_IRQHandler+0x8c>
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	099b      	lsrs	r3, r3, #6
 800cb12:	f003 0301 	and.w	r3, r3, #1
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d106      	bne.n	800cb28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	0a1b      	lsrs	r3, r3, #8
 800cb1e:	f003 0301 	and.w	r3, r3, #1
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 80b4 	beq.w	800cc90 <HAL_SPI_IRQHandler+0x1f4>
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	095b      	lsrs	r3, r3, #5
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 80ad 	beq.w	800cc90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	099b      	lsrs	r3, r3, #6
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d023      	beq.n	800cb8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d011      	beq.n	800cb72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb52:	f043 0204 	orr.w	r2, r3, #4
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	617b      	str	r3, [r7, #20]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	617b      	str	r3, [r7, #20]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	617b      	str	r3, [r7, #20]
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	e00b      	b.n	800cb8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb72:	2300      	movs	r3, #0
 800cb74:	613b      	str	r3, [r7, #16]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	613b      	str	r3, [r7, #16]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	613b      	str	r3, [r7, #16]
 800cb86:	693b      	ldr	r3, [r7, #16]
        return;
 800cb88:	e082      	b.n	800cc90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	095b      	lsrs	r3, r3, #5
 800cb8e:	f003 0301 	and.w	r3, r3, #1
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d014      	beq.n	800cbc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb9a:	f043 0201 	orr.w	r2, r3, #1
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cba2:	2300      	movs	r3, #0
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	60fb      	str	r3, [r7, #12]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	0a1b      	lsrs	r3, r3, #8
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00c      	beq.n	800cbe6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd0:	f043 0208 	orr.w	r2, r3, #8
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60bb      	str	r3, [r7, #8]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	60bb      	str	r3, [r7, #8]
 800cbe4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d04f      	beq.n	800cc8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cbfc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2201      	movs	r2, #1
 800cc02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	f003 0302 	and.w	r3, r3, #2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d104      	bne.n	800cc1a <HAL_SPI_IRQHandler+0x17e>
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d034      	beq.n	800cc84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	685a      	ldr	r2, [r3, #4]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f022 0203 	bic.w	r2, r2, #3
 800cc28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d011      	beq.n	800cc56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc36:	4a18      	ldr	r2, [pc, #96]	@ (800cc98 <HAL_SPI_IRQHandler+0x1fc>)
 800cc38:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fb fd48 	bl	80086d4 <HAL_DMA_Abort_IT>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d005      	beq.n	800cc56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d016      	beq.n	800cc8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc62:	4a0d      	ldr	r2, [pc, #52]	@ (800cc98 <HAL_SPI_IRQHandler+0x1fc>)
 800cc64:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fb fd32 	bl	80086d4 <HAL_DMA_Abort_IT>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00a      	beq.n	800cc8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800cc82:	e003      	b.n	800cc8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 f809 	bl	800cc9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cc8a:	e000      	b.n	800cc8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800cc8c:	bf00      	nop
    return;
 800cc8e:	bf00      	nop
  }
}
 800cc90:	3720      	adds	r7, #32
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	0800ccb1 	.word	0x0800ccb1

0800cc9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7ff ffe6 	bl	800cc9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ccd0:	bf00      	nop
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b088      	sub	sp, #32
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	603b      	str	r3, [r7, #0]
 800cce4:	4613      	mov	r3, r2
 800cce6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cce8:	f7fb fb04 	bl	80082f4 <HAL_GetTick>
 800ccec:	4602      	mov	r2, r0
 800ccee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf0:	1a9b      	subs	r3, r3, r2
 800ccf2:	683a      	ldr	r2, [r7, #0]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ccf8:	f7fb fafc 	bl	80082f4 <HAL_GetTick>
 800ccfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ccfe:	4b39      	ldr	r3, [pc, #228]	@ (800cde4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	015b      	lsls	r3, r3, #5
 800cd04:	0d1b      	lsrs	r3, r3, #20
 800cd06:	69fa      	ldr	r2, [r7, #28]
 800cd08:	fb02 f303 	mul.w	r3, r2, r3
 800cd0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd0e:	e054      	b.n	800cdba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd16:	d050      	beq.n	800cdba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cd18:	f7fb faec 	bl	80082f4 <HAL_GetTick>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	69fa      	ldr	r2, [r7, #28]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d902      	bls.n	800cd2e <SPI_WaitFlagStateUntilTimeout+0x56>
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d13d      	bne.n	800cdaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cd3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cd46:	d111      	bne.n	800cd6c <SPI_WaitFlagStateUntilTimeout+0x94>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd50:	d004      	beq.n	800cd5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd5a:	d107      	bne.n	800cd6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd74:	d10f      	bne.n	800cd96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cd94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800cda6:	2303      	movs	r3, #3
 800cda8:	e017      	b.n	800cdda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	689a      	ldr	r2, [r3, #8]
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	bf0c      	ite	eq
 800cdca:	2301      	moveq	r3, #1
 800cdcc:	2300      	movne	r3, #0
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d19b      	bne.n	800cd10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3720      	adds	r7, #32
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20000154 	.word	0x20000154

0800cde8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af02      	add	r7, sp, #8
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cdfc:	d111      	bne.n	800ce22 <SPI_EndRxTransaction+0x3a>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce06:	d004      	beq.n	800ce12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce10:	d107      	bne.n	800ce22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ce2a:	d12a      	bne.n	800ce82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce34:	d012      	beq.n	800ce5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2180      	movs	r1, #128	@ 0x80
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f7ff ff49 	bl	800ccd8 <SPI_WaitFlagStateUntilTimeout>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d02d      	beq.n	800cea8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce50:	f043 0220 	orr.w	r2, r3, #32
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e026      	b.n	800ceaa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2200      	movs	r2, #0
 800ce64:	2101      	movs	r1, #1
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f7ff ff36 	bl	800ccd8 <SPI_WaitFlagStateUntilTimeout>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d01a      	beq.n	800cea8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce76:	f043 0220 	orr.w	r2, r3, #32
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e013      	b.n	800ceaa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7ff ff23 	bl	800ccd8 <SPI_WaitFlagStateUntilTimeout>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d007      	beq.n	800cea8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce9c:	f043 0220 	orr.w	r2, r3, #32
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800cea4:	2303      	movs	r3, #3
 800cea6:	e000      	b.n	800ceaa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
	...

0800ceb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af02      	add	r7, sp, #8
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cec0:	4b1b      	ldr	r3, [pc, #108]	@ (800cf30 <SPI_EndRxTxTransaction+0x7c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a1b      	ldr	r2, [pc, #108]	@ (800cf34 <SPI_EndRxTxTransaction+0x80>)
 800cec6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceca:	0d5b      	lsrs	r3, r3, #21
 800cecc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ced0:	fb02 f303 	mul.w	r3, r2, r3
 800ced4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cede:	d112      	bne.n	800cf06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	2200      	movs	r2, #0
 800cee8:	2180      	movs	r1, #128	@ 0x80
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f7ff fef4 	bl	800ccd8 <SPI_WaitFlagStateUntilTimeout>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d016      	beq.n	800cf24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cefa:	f043 0220 	orr.w	r2, r3, #32
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800cf02:	2303      	movs	r3, #3
 800cf04:	e00f      	b.n	800cf26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00a      	beq.n	800cf22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf1c:	2b80      	cmp	r3, #128	@ 0x80
 800cf1e:	d0f2      	beq.n	800cf06 <SPI_EndRxTxTransaction+0x52>
 800cf20:	e000      	b.n	800cf24 <SPI_EndRxTxTransaction+0x70>
        break;
 800cf22:	bf00      	nop
  }

  return HAL_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	20000154 	.word	0x20000154
 800cf34:	165e9f81 	.word	0x165e9f81

0800cf38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d101      	bne.n	800cf4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e041      	b.n	800cfce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d106      	bne.n	800cf64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7fa fdb0 	bl	8007ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2202      	movs	r2, #2
 800cf68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	3304      	adds	r3, #4
 800cf74:	4619      	mov	r1, r3
 800cf76:	4610      	mov	r0, r2
 800cf78:	f000 fae0 	bl	800d53c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
	...

0800cfd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d001      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e04e      	b.n	800d08e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2202      	movs	r2, #2
 800cff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68da      	ldr	r2, [r3, #12]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f042 0201 	orr.w	r2, r2, #1
 800d006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a23      	ldr	r2, [pc, #140]	@ (800d09c <HAL_TIM_Base_Start_IT+0xc4>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d022      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d01a:	d01d      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a1f      	ldr	r2, [pc, #124]	@ (800d0a0 <HAL_TIM_Base_Start_IT+0xc8>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d018      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a1e      	ldr	r2, [pc, #120]	@ (800d0a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d013      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a1c      	ldr	r2, [pc, #112]	@ (800d0a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d00e      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a1b      	ldr	r2, [pc, #108]	@ (800d0ac <HAL_TIM_Base_Start_IT+0xd4>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d009      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a19      	ldr	r2, [pc, #100]	@ (800d0b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d004      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a18      	ldr	r2, [pc, #96]	@ (800d0b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d111      	bne.n	800d07c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	f003 0307 	and.w	r3, r3, #7
 800d062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b06      	cmp	r3, #6
 800d068:	d010      	beq.n	800d08c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f042 0201 	orr.w	r2, r2, #1
 800d078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d07a:	e007      	b.n	800d08c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f042 0201 	orr.w	r2, r2, #1
 800d08a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	40010000 	.word	0x40010000
 800d0a0:	40000400 	.word	0x40000400
 800d0a4:	40000800 	.word	0x40000800
 800d0a8:	40000c00 	.word	0x40000c00
 800d0ac:	40010400 	.word	0x40010400
 800d0b0:	40014000 	.word	0x40014000
 800d0b4:	40001800 	.word	0x40001800

0800d0b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d101      	bne.n	800d0ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e041      	b.n	800d14e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d106      	bne.n	800d0e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7fa fcce 	bl	8007a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f000 fa20 	bl	800d53c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	f003 0302 	and.w	r3, r3, #2
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d122      	bne.n	800d1b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f003 0302 	and.w	r3, r3, #2
 800d176:	2b02      	cmp	r3, #2
 800d178:	d11b      	bne.n	800d1b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f06f 0202 	mvn.w	r2, #2
 800d182:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	f003 0303 	and.w	r3, r3, #3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d003      	beq.n	800d1a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f9b1 	bl	800d500 <HAL_TIM_IC_CaptureCallback>
 800d19e:	e005      	b.n	800d1ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f9a3 	bl	800d4ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f9b4 	bl	800d514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	f003 0304 	and.w	r3, r3, #4
 800d1bc:	2b04      	cmp	r3, #4
 800d1be:	d122      	bne.n	800d206 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	f003 0304 	and.w	r3, r3, #4
 800d1ca:	2b04      	cmp	r3, #4
 800d1cc:	d11b      	bne.n	800d206 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f06f 0204 	mvn.w	r2, #4
 800d1d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d003      	beq.n	800d1f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 f987 	bl	800d500 <HAL_TIM_IC_CaptureCallback>
 800d1f2:	e005      	b.n	800d200 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f979 	bl	800d4ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f98a 	bl	800d514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	f003 0308 	and.w	r3, r3, #8
 800d210:	2b08      	cmp	r3, #8
 800d212:	d122      	bne.n	800d25a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f003 0308 	and.w	r3, r3, #8
 800d21e:	2b08      	cmp	r3, #8
 800d220:	d11b      	bne.n	800d25a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f06f 0208 	mvn.w	r2, #8
 800d22a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2204      	movs	r2, #4
 800d230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	69db      	ldr	r3, [r3, #28]
 800d238:	f003 0303 	and.w	r3, r3, #3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f95d 	bl	800d500 <HAL_TIM_IC_CaptureCallback>
 800d246:	e005      	b.n	800d254 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f94f 	bl	800d4ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f960 	bl	800d514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	f003 0310 	and.w	r3, r3, #16
 800d264:	2b10      	cmp	r3, #16
 800d266:	d122      	bne.n	800d2ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	f003 0310 	and.w	r3, r3, #16
 800d272:	2b10      	cmp	r3, #16
 800d274:	d11b      	bne.n	800d2ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f06f 0210 	mvn.w	r2, #16
 800d27e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2208      	movs	r2, #8
 800d284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69db      	ldr	r3, [r3, #28]
 800d28c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d290:	2b00      	cmp	r3, #0
 800d292:	d003      	beq.n	800d29c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f933 	bl	800d500 <HAL_TIM_IC_CaptureCallback>
 800d29a:	e005      	b.n	800d2a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f925 	bl	800d4ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f936 	bl	800d514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d10e      	bne.n	800d2da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d107      	bne.n	800d2da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f06f 0201 	mvn.w	r2, #1
 800d2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7fa fb15 	bl	8007904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2e4:	2b80      	cmp	r3, #128	@ 0x80
 800d2e6:	d10e      	bne.n	800d306 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2f2:	2b80      	cmp	r3, #128	@ 0x80
 800d2f4:	d107      	bne.n	800d306 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 fbf1 	bl	800dae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d310:	2b40      	cmp	r3, #64	@ 0x40
 800d312:	d10e      	bne.n	800d332 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d31e:	2b40      	cmp	r3, #64	@ 0x40
 800d320:	d107      	bne.n	800d332 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f8fb 	bl	800d528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	f003 0320 	and.w	r3, r3, #32
 800d33c:	2b20      	cmp	r3, #32
 800d33e:	d10e      	bne.n	800d35e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	f003 0320 	and.w	r3, r3, #32
 800d34a:	2b20      	cmp	r3, #32
 800d34c:	d107      	bne.n	800d35e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f06f 0220 	mvn.w	r2, #32
 800d356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fbbb 	bl	800dad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d35e:	bf00      	nop
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d374:	2300      	movs	r3, #0
 800d376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d101      	bne.n	800d386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d382:	2302      	movs	r3, #2
 800d384:	e0ae      	b.n	800d4e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2201      	movs	r2, #1
 800d38a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b0c      	cmp	r3, #12
 800d392:	f200 809f 	bhi.w	800d4d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d396:	a201      	add	r2, pc, #4	@ (adr r2, 800d39c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39c:	0800d3d1 	.word	0x0800d3d1
 800d3a0:	0800d4d5 	.word	0x0800d4d5
 800d3a4:	0800d4d5 	.word	0x0800d4d5
 800d3a8:	0800d4d5 	.word	0x0800d4d5
 800d3ac:	0800d411 	.word	0x0800d411
 800d3b0:	0800d4d5 	.word	0x0800d4d5
 800d3b4:	0800d4d5 	.word	0x0800d4d5
 800d3b8:	0800d4d5 	.word	0x0800d4d5
 800d3bc:	0800d453 	.word	0x0800d453
 800d3c0:	0800d4d5 	.word	0x0800d4d5
 800d3c4:	0800d4d5 	.word	0x0800d4d5
 800d3c8:	0800d4d5 	.word	0x0800d4d5
 800d3cc:	0800d493 	.word	0x0800d493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68b9      	ldr	r1, [r7, #8]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 f950 	bl	800d67c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	699a      	ldr	r2, [r3, #24]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f042 0208 	orr.w	r2, r2, #8
 800d3ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	699a      	ldr	r2, [r3, #24]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f022 0204 	bic.w	r2, r2, #4
 800d3fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	6999      	ldr	r1, [r3, #24]
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	691a      	ldr	r2, [r3, #16]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	430a      	orrs	r2, r1
 800d40c:	619a      	str	r2, [r3, #24]
      break;
 800d40e:	e064      	b.n	800d4da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68b9      	ldr	r1, [r7, #8]
 800d416:	4618      	mov	r0, r3
 800d418:	f000 f9a0 	bl	800d75c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	699a      	ldr	r2, [r3, #24]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d42a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	699a      	ldr	r2, [r3, #24]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d43a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	6999      	ldr	r1, [r3, #24]
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	021a      	lsls	r2, r3, #8
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	430a      	orrs	r2, r1
 800d44e:	619a      	str	r2, [r3, #24]
      break;
 800d450:	e043      	b.n	800d4da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	68b9      	ldr	r1, [r7, #8]
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 f9f5 	bl	800d848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	69da      	ldr	r2, [r3, #28]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f042 0208 	orr.w	r2, r2, #8
 800d46c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	69da      	ldr	r2, [r3, #28]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f022 0204 	bic.w	r2, r2, #4
 800d47c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	69d9      	ldr	r1, [r3, #28]
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	691a      	ldr	r2, [r3, #16]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	430a      	orrs	r2, r1
 800d48e:	61da      	str	r2, [r3, #28]
      break;
 800d490:	e023      	b.n	800d4da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68b9      	ldr	r1, [r7, #8]
 800d498:	4618      	mov	r0, r3
 800d49a:	f000 fa49 	bl	800d930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	69da      	ldr	r2, [r3, #28]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d4ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	69da      	ldr	r2, [r3, #28]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d4bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69d9      	ldr	r1, [r3, #28]
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	021a      	lsls	r2, r3, #8
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	430a      	orrs	r2, r1
 800d4d0:	61da      	str	r2, [r3, #28]
      break;
 800d4d2:	e002      	b.n	800d4da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800d4d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	4a40      	ldr	r2, [pc, #256]	@ (800d650 <TIM_Base_SetConfig+0x114>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d013      	beq.n	800d57c <TIM_Base_SetConfig+0x40>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d55a:	d00f      	beq.n	800d57c <TIM_Base_SetConfig+0x40>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a3d      	ldr	r2, [pc, #244]	@ (800d654 <TIM_Base_SetConfig+0x118>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d00b      	beq.n	800d57c <TIM_Base_SetConfig+0x40>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4a3c      	ldr	r2, [pc, #240]	@ (800d658 <TIM_Base_SetConfig+0x11c>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d007      	beq.n	800d57c <TIM_Base_SetConfig+0x40>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4a3b      	ldr	r2, [pc, #236]	@ (800d65c <TIM_Base_SetConfig+0x120>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d003      	beq.n	800d57c <TIM_Base_SetConfig+0x40>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a3a      	ldr	r2, [pc, #232]	@ (800d660 <TIM_Base_SetConfig+0x124>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d108      	bne.n	800d58e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	4313      	orrs	r3, r2
 800d58c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4a2f      	ldr	r2, [pc, #188]	@ (800d650 <TIM_Base_SetConfig+0x114>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d02b      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d59c:	d027      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a2c      	ldr	r2, [pc, #176]	@ (800d654 <TIM_Base_SetConfig+0x118>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d023      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a2b      	ldr	r2, [pc, #172]	@ (800d658 <TIM_Base_SetConfig+0x11c>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d01f      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a2a      	ldr	r2, [pc, #168]	@ (800d65c <TIM_Base_SetConfig+0x120>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d01b      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a29      	ldr	r2, [pc, #164]	@ (800d660 <TIM_Base_SetConfig+0x124>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d017      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a28      	ldr	r2, [pc, #160]	@ (800d664 <TIM_Base_SetConfig+0x128>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d013      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a27      	ldr	r2, [pc, #156]	@ (800d668 <TIM_Base_SetConfig+0x12c>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d00f      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a26      	ldr	r2, [pc, #152]	@ (800d66c <TIM_Base_SetConfig+0x130>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d00b      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a25      	ldr	r2, [pc, #148]	@ (800d670 <TIM_Base_SetConfig+0x134>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d007      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a24      	ldr	r2, [pc, #144]	@ (800d674 <TIM_Base_SetConfig+0x138>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d003      	beq.n	800d5ee <TIM_Base_SetConfig+0xb2>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a23      	ldr	r2, [pc, #140]	@ (800d678 <TIM_Base_SetConfig+0x13c>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d108      	bne.n	800d600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d5f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	695b      	ldr	r3, [r3, #20]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	689a      	ldr	r2, [r3, #8]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a0a      	ldr	r2, [pc, #40]	@ (800d650 <TIM_Base_SetConfig+0x114>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d003      	beq.n	800d634 <TIM_Base_SetConfig+0xf8>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a0c      	ldr	r2, [pc, #48]	@ (800d660 <TIM_Base_SetConfig+0x124>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d103      	bne.n	800d63c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	691a      	ldr	r2, [r3, #16]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	615a      	str	r2, [r3, #20]
}
 800d642:	bf00      	nop
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	40010000 	.word	0x40010000
 800d654:	40000400 	.word	0x40000400
 800d658:	40000800 	.word	0x40000800
 800d65c:	40000c00 	.word	0x40000c00
 800d660:	40010400 	.word	0x40010400
 800d664:	40014000 	.word	0x40014000
 800d668:	40014400 	.word	0x40014400
 800d66c:	40014800 	.word	0x40014800
 800d670:	40001800 	.word	0x40001800
 800d674:	40001c00 	.word	0x40001c00
 800d678:	40002000 	.word	0x40002000

0800d67c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b087      	sub	sp, #28
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	f023 0201 	bic.w	r2, r3, #1
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f023 0303 	bic.w	r3, r3, #3
 800d6b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f023 0302 	bic.w	r3, r3, #2
 800d6c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	697a      	ldr	r2, [r7, #20]
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a20      	ldr	r2, [pc, #128]	@ (800d754 <TIM_OC1_SetConfig+0xd8>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d003      	beq.n	800d6e0 <TIM_OC1_SetConfig+0x64>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a1f      	ldr	r2, [pc, #124]	@ (800d758 <TIM_OC1_SetConfig+0xdc>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d10c      	bne.n	800d6fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	f023 0308 	bic.w	r3, r3, #8
 800d6e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	f023 0304 	bic.w	r3, r3, #4
 800d6f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a15      	ldr	r2, [pc, #84]	@ (800d754 <TIM_OC1_SetConfig+0xd8>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d003      	beq.n	800d70a <TIM_OC1_SetConfig+0x8e>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a14      	ldr	r2, [pc, #80]	@ (800d758 <TIM_OC1_SetConfig+0xdc>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d111      	bne.n	800d72e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	4313      	orrs	r3, r2
 800d722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	693a      	ldr	r2, [r7, #16]
 800d72a:	4313      	orrs	r3, r2
 800d72c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	697a      	ldr	r2, [r7, #20]
 800d746:	621a      	str	r2, [r3, #32]
}
 800d748:	bf00      	nop
 800d74a:	371c      	adds	r7, #28
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr
 800d754:	40010000 	.word	0x40010000
 800d758:	40010400 	.word	0x40010400

0800d75c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b087      	sub	sp, #28
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6a1b      	ldr	r3, [r3, #32]
 800d76a:	f023 0210 	bic.w	r2, r3, #16
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	699b      	ldr	r3, [r3, #24]
 800d782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	021b      	lsls	r3, r3, #8
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	f023 0320 	bic.w	r3, r3, #32
 800d7a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	011b      	lsls	r3, r3, #4
 800d7ae:	697a      	ldr	r2, [r7, #20]
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a22      	ldr	r2, [pc, #136]	@ (800d840 <TIM_OC2_SetConfig+0xe4>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d003      	beq.n	800d7c4 <TIM_OC2_SetConfig+0x68>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a21      	ldr	r2, [pc, #132]	@ (800d844 <TIM_OC2_SetConfig+0xe8>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d10d      	bne.n	800d7e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a17      	ldr	r2, [pc, #92]	@ (800d840 <TIM_OC2_SetConfig+0xe4>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d003      	beq.n	800d7f0 <TIM_OC2_SetConfig+0x94>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a16      	ldr	r2, [pc, #88]	@ (800d844 <TIM_OC2_SetConfig+0xe8>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d113      	bne.n	800d818 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d7f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	4313      	orrs	r3, r2
 800d80a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	4313      	orrs	r3, r2
 800d816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	685a      	ldr	r2, [r3, #4]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	621a      	str	r2, [r3, #32]
}
 800d832:	bf00      	nop
 800d834:	371c      	adds	r7, #28
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	40010000 	.word	0x40010000
 800d844:	40010400 	.word	0x40010400

0800d848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d848:	b480      	push	{r7}
 800d84a:	b087      	sub	sp, #28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a1b      	ldr	r3, [r3, #32]
 800d856:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f023 0303 	bic.w	r3, r3, #3
 800d87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	4313      	orrs	r3, r2
 800d888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	021b      	lsls	r3, r3, #8
 800d898:	697a      	ldr	r2, [r7, #20]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a21      	ldr	r2, [pc, #132]	@ (800d928 <TIM_OC3_SetConfig+0xe0>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d003      	beq.n	800d8ae <TIM_OC3_SetConfig+0x66>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a20      	ldr	r2, [pc, #128]	@ (800d92c <TIM_OC3_SetConfig+0xe4>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d10d      	bne.n	800d8ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d8b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	021b      	lsls	r3, r3, #8
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d8c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a16      	ldr	r2, [pc, #88]	@ (800d928 <TIM_OC3_SetConfig+0xe0>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d003      	beq.n	800d8da <TIM_OC3_SetConfig+0x92>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a15      	ldr	r2, [pc, #84]	@ (800d92c <TIM_OC3_SetConfig+0xe4>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d113      	bne.n	800d902 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	011b      	lsls	r3, r3, #4
 800d8f0:	693a      	ldr	r2, [r7, #16]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	011b      	lsls	r3, r3, #4
 800d8fc:	693a      	ldr	r2, [r7, #16]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	685a      	ldr	r2, [r3, #4]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	697a      	ldr	r2, [r7, #20]
 800d91a:	621a      	str	r2, [r3, #32]
}
 800d91c:	bf00      	nop
 800d91e:	371c      	adds	r7, #28
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	40010000 	.word	0x40010000
 800d92c:	40010400 	.word	0x40010400

0800d930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d930:	b480      	push	{r7}
 800d932:	b087      	sub	sp, #28
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	4313      	orrs	r3, r2
 800d972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d97a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	031b      	lsls	r3, r3, #12
 800d982:	693a      	ldr	r2, [r7, #16]
 800d984:	4313      	orrs	r3, r2
 800d986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a12      	ldr	r2, [pc, #72]	@ (800d9d4 <TIM_OC4_SetConfig+0xa4>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d003      	beq.n	800d998 <TIM_OC4_SetConfig+0x68>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a11      	ldr	r2, [pc, #68]	@ (800d9d8 <TIM_OC4_SetConfig+0xa8>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d109      	bne.n	800d9ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d99e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	019b      	lsls	r3, r3, #6
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	621a      	str	r2, [r3, #32]
}
 800d9c6:	bf00      	nop
 800d9c8:	371c      	adds	r7, #28
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	40010000 	.word	0x40010000
 800d9d8:	40010400 	.word	0x40010400

0800d9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d101      	bne.n	800d9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	e05a      	b.n	800daaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2202      	movs	r2, #2
 800da00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	4313      	orrs	r3, r2
 800da24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a21      	ldr	r2, [pc, #132]	@ (800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d022      	beq.n	800da7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da40:	d01d      	beq.n	800da7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a1d      	ldr	r2, [pc, #116]	@ (800dabc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d018      	beq.n	800da7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a1b      	ldr	r2, [pc, #108]	@ (800dac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d013      	beq.n	800da7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a1a      	ldr	r2, [pc, #104]	@ (800dac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d00e      	beq.n	800da7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a18      	ldr	r2, [pc, #96]	@ (800dac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d009      	beq.n	800da7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a17      	ldr	r2, [pc, #92]	@ (800dacc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d004      	beq.n	800da7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a15      	ldr	r2, [pc, #84]	@ (800dad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d10c      	bne.n	800da98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	4313      	orrs	r3, r2
 800da8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3714      	adds	r7, #20
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	40010000 	.word	0x40010000
 800dabc:	40000400 	.word	0x40000400
 800dac0:	40000800 	.word	0x40000800
 800dac4:	40000c00 	.word	0x40000c00
 800dac8:	40010400 	.word	0x40010400
 800dacc:	40014000 	.word	0x40014000
 800dad0:	40001800 	.word	0x40001800

0800dad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dadc:	bf00      	nop
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d101      	bne.n	800db0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e03f      	b.n	800db8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db14:	b2db      	uxtb	r3, r3
 800db16:	2b00      	cmp	r3, #0
 800db18:	d106      	bne.n	800db28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7fa fab6 	bl	8008094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2224      	movs	r2, #36	@ 0x24
 800db2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68da      	ldr	r2, [r3, #12]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800db3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 f929 	bl	800dd98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	691a      	ldr	r2, [r3, #16]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800db54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	695a      	ldr	r2, [r3, #20]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800db64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	68da      	ldr	r2, [r3, #12]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800db74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2220      	movs	r2, #32
 800db80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2220      	movs	r2, #32
 800db88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b08a      	sub	sp, #40	@ 0x28
 800db9a:	af02      	add	r7, sp, #8
 800db9c:	60f8      	str	r0, [r7, #12]
 800db9e:	60b9      	str	r1, [r7, #8]
 800dba0:	603b      	str	r3, [r7, #0]
 800dba2:	4613      	mov	r3, r2
 800dba4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800dba6:	2300      	movs	r3, #0
 800dba8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	2b20      	cmp	r3, #32
 800dbb4:	d17c      	bne.n	800dcb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <HAL_UART_Transmit+0x2c>
 800dbbc:	88fb      	ldrh	r3, [r7, #6]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d101      	bne.n	800dbc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e075      	b.n	800dcb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d101      	bne.n	800dbd4 <HAL_UART_Transmit+0x3e>
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e06e      	b.n	800dcb2 <HAL_UART_Transmit+0x11c>
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2221      	movs	r2, #33	@ 0x21
 800dbe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dbea:	f7fa fb83 	bl	80082f4 <HAL_GetTick>
 800dbee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	88fa      	ldrh	r2, [r7, #6]
 800dbf4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	88fa      	ldrh	r2, [r7, #6]
 800dbfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc04:	d108      	bne.n	800dc18 <HAL_UART_Transmit+0x82>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d104      	bne.n	800dc18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	61bb      	str	r3, [r7, #24]
 800dc16:	e003      	b.n	800dc20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800dc28:	e02a      	b.n	800dc80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	9300      	str	r3, [sp, #0]
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2200      	movs	r2, #0
 800dc32:	2180      	movs	r1, #128	@ 0x80
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f000 f840 	bl	800dcba <UART_WaitOnFlagUntilTimeout>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800dc40:	2303      	movs	r3, #3
 800dc42:	e036      	b.n	800dcb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10b      	bne.n	800dc62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800dc5a:	69bb      	ldr	r3, [r7, #24]
 800dc5c:	3302      	adds	r3, #2
 800dc5e:	61bb      	str	r3, [r7, #24]
 800dc60:	e007      	b.n	800dc72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	781a      	ldrb	r2, [r3, #0]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1cf      	bne.n	800dc2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	2200      	movs	r2, #0
 800dc92:	2140      	movs	r1, #64	@ 0x40
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f000 f810 	bl	800dcba <UART_WaitOnFlagUntilTimeout>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d001      	beq.n	800dca4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800dca0:	2303      	movs	r3, #3
 800dca2:	e006      	b.n	800dcb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2220      	movs	r2, #32
 800dca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800dcac:	2300      	movs	r3, #0
 800dcae:	e000      	b.n	800dcb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800dcb0:	2302      	movs	r3, #2
  }
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3720      	adds	r7, #32
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b090      	sub	sp, #64	@ 0x40
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	60f8      	str	r0, [r7, #12]
 800dcc2:	60b9      	str	r1, [r7, #8]
 800dcc4:	603b      	str	r3, [r7, #0]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcca:	e050      	b.n	800dd6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd2:	d04c      	beq.n	800dd6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800dcd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d007      	beq.n	800dcea <UART_WaitOnFlagUntilTimeout+0x30>
 800dcda:	f7fa fb0b 	bl	80082f4 <HAL_GetTick>
 800dcde:	4602      	mov	r2, r0
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d241      	bcs.n	800dd6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	330c      	adds	r3, #12
 800dcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf4:	e853 3f00 	ldrex	r3, [r3]
 800dcf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800dd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	330c      	adds	r3, #12
 800dd08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd0a:	637a      	str	r2, [r7, #52]	@ 0x34
 800dd0c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd12:	e841 2300 	strex	r3, r2, [r1]
 800dd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1e5      	bne.n	800dcea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	3314      	adds	r3, #20
 800dd24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	e853 3f00 	ldrex	r3, [r3]
 800dd2c:	613b      	str	r3, [r7, #16]
   return(result);
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	f023 0301 	bic.w	r3, r3, #1
 800dd34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	3314      	adds	r3, #20
 800dd3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd3e:	623a      	str	r2, [r7, #32]
 800dd40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd42:	69f9      	ldr	r1, [r7, #28]
 800dd44:	6a3a      	ldr	r2, [r7, #32]
 800dd46:	e841 2300 	strex	r3, r2, [r1]
 800dd4a:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d1e5      	bne.n	800dd1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2220      	movs	r2, #32
 800dd56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2220      	movs	r2, #32
 800dd5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800dd6a:	2303      	movs	r3, #3
 800dd6c:	e00f      	b.n	800dd8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	4013      	ands	r3, r2
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	bf0c      	ite	eq
 800dd7e:	2301      	moveq	r3, #1
 800dd80:	2300      	movne	r3, #0
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	461a      	mov	r2, r3
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d09f      	beq.n	800dccc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3740      	adds	r7, #64	@ 0x40
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
	...

0800dd98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd9c:	b0c0      	sub	sp, #256	@ 0x100
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dda4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	691b      	ldr	r3, [r3, #16]
 800ddac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ddb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddb4:	68d9      	ldr	r1, [r3, #12]
 800ddb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	ea40 0301 	orr.w	r3, r0, r1
 800ddc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ddc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddc6:	689a      	ldr	r2, [r3, #8]
 800ddc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	431a      	orrs	r2, r3
 800ddd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddd4:	695b      	ldr	r3, [r3, #20]
 800ddd6:	431a      	orrs	r2, r3
 800ddd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dddc:	69db      	ldr	r3, [r3, #28]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dde4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ddf0:	f021 010c 	bic.w	r1, r1, #12
 800ddf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ddfe:	430b      	orrs	r3, r1
 800de00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800de02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800de0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de12:	6999      	ldr	r1, [r3, #24]
 800de14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	ea40 0301 	orr.w	r3, r0, r1
 800de1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800de20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	4b8f      	ldr	r3, [pc, #572]	@ (800e064 <UART_SetConfig+0x2cc>)
 800de28:	429a      	cmp	r2, r3
 800de2a:	d005      	beq.n	800de38 <UART_SetConfig+0xa0>
 800de2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	4b8d      	ldr	r3, [pc, #564]	@ (800e068 <UART_SetConfig+0x2d0>)
 800de34:	429a      	cmp	r2, r3
 800de36:	d104      	bne.n	800de42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800de38:	f7fe f9a4 	bl	800c184 <HAL_RCC_GetPCLK2Freq>
 800de3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800de40:	e003      	b.n	800de4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800de42:	f7fe f98b 	bl	800c15c <HAL_RCC_GetPCLK1Freq>
 800de46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de4e:	69db      	ldr	r3, [r3, #28]
 800de50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de54:	f040 810c 	bne.w	800e070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800de58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de5c:	2200      	movs	r2, #0
 800de5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800de62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800de66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800de6a:	4622      	mov	r2, r4
 800de6c:	462b      	mov	r3, r5
 800de6e:	1891      	adds	r1, r2, r2
 800de70:	65b9      	str	r1, [r7, #88]	@ 0x58
 800de72:	415b      	adcs	r3, r3
 800de74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800de7a:	4621      	mov	r1, r4
 800de7c:	eb12 0801 	adds.w	r8, r2, r1
 800de80:	4629      	mov	r1, r5
 800de82:	eb43 0901 	adc.w	r9, r3, r1
 800de86:	f04f 0200 	mov.w	r2, #0
 800de8a:	f04f 0300 	mov.w	r3, #0
 800de8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800de92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800de96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800de9a:	4690      	mov	r8, r2
 800de9c:	4699      	mov	r9, r3
 800de9e:	4623      	mov	r3, r4
 800dea0:	eb18 0303 	adds.w	r3, r8, r3
 800dea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dea8:	462b      	mov	r3, r5
 800deaa:	eb49 0303 	adc.w	r3, r9, r3
 800deae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800deb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800debe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800dec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800dec6:	460b      	mov	r3, r1
 800dec8:	18db      	adds	r3, r3, r3
 800deca:	653b      	str	r3, [r7, #80]	@ 0x50
 800decc:	4613      	mov	r3, r2
 800dece:	eb42 0303 	adc.w	r3, r2, r3
 800ded2:	657b      	str	r3, [r7, #84]	@ 0x54
 800ded4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ded8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800dedc:	f7f2 f986 	bl	80001ec <__aeabi_uldivmod>
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	4b61      	ldr	r3, [pc, #388]	@ (800e06c <UART_SetConfig+0x2d4>)
 800dee6:	fba3 2302 	umull	r2, r3, r3, r2
 800deea:	095b      	lsrs	r3, r3, #5
 800deec:	011c      	lsls	r4, r3, #4
 800deee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800def2:	2200      	movs	r2, #0
 800def4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800def8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800defc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800df00:	4642      	mov	r2, r8
 800df02:	464b      	mov	r3, r9
 800df04:	1891      	adds	r1, r2, r2
 800df06:	64b9      	str	r1, [r7, #72]	@ 0x48
 800df08:	415b      	adcs	r3, r3
 800df0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800df10:	4641      	mov	r1, r8
 800df12:	eb12 0a01 	adds.w	sl, r2, r1
 800df16:	4649      	mov	r1, r9
 800df18:	eb43 0b01 	adc.w	fp, r3, r1
 800df1c:	f04f 0200 	mov.w	r2, #0
 800df20:	f04f 0300 	mov.w	r3, #0
 800df24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800df28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800df2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800df30:	4692      	mov	sl, r2
 800df32:	469b      	mov	fp, r3
 800df34:	4643      	mov	r3, r8
 800df36:	eb1a 0303 	adds.w	r3, sl, r3
 800df3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800df3e:	464b      	mov	r3, r9
 800df40:	eb4b 0303 	adc.w	r3, fp, r3
 800df44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800df48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800df54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800df58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800df5c:	460b      	mov	r3, r1
 800df5e:	18db      	adds	r3, r3, r3
 800df60:	643b      	str	r3, [r7, #64]	@ 0x40
 800df62:	4613      	mov	r3, r2
 800df64:	eb42 0303 	adc.w	r3, r2, r3
 800df68:	647b      	str	r3, [r7, #68]	@ 0x44
 800df6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800df6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800df72:	f7f2 f93b 	bl	80001ec <__aeabi_uldivmod>
 800df76:	4602      	mov	r2, r0
 800df78:	460b      	mov	r3, r1
 800df7a:	4611      	mov	r1, r2
 800df7c:	4b3b      	ldr	r3, [pc, #236]	@ (800e06c <UART_SetConfig+0x2d4>)
 800df7e:	fba3 2301 	umull	r2, r3, r3, r1
 800df82:	095b      	lsrs	r3, r3, #5
 800df84:	2264      	movs	r2, #100	@ 0x64
 800df86:	fb02 f303 	mul.w	r3, r2, r3
 800df8a:	1acb      	subs	r3, r1, r3
 800df8c:	00db      	lsls	r3, r3, #3
 800df8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800df92:	4b36      	ldr	r3, [pc, #216]	@ (800e06c <UART_SetConfig+0x2d4>)
 800df94:	fba3 2302 	umull	r2, r3, r3, r2
 800df98:	095b      	lsrs	r3, r3, #5
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800dfa0:	441c      	add	r4, r3
 800dfa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dfac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800dfb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800dfb4:	4642      	mov	r2, r8
 800dfb6:	464b      	mov	r3, r9
 800dfb8:	1891      	adds	r1, r2, r2
 800dfba:	63b9      	str	r1, [r7, #56]	@ 0x38
 800dfbc:	415b      	adcs	r3, r3
 800dfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dfc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800dfc4:	4641      	mov	r1, r8
 800dfc6:	1851      	adds	r1, r2, r1
 800dfc8:	6339      	str	r1, [r7, #48]	@ 0x30
 800dfca:	4649      	mov	r1, r9
 800dfcc:	414b      	adcs	r3, r1
 800dfce:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfd0:	f04f 0200 	mov.w	r2, #0
 800dfd4:	f04f 0300 	mov.w	r3, #0
 800dfd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800dfdc:	4659      	mov	r1, fp
 800dfde:	00cb      	lsls	r3, r1, #3
 800dfe0:	4651      	mov	r1, sl
 800dfe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dfe6:	4651      	mov	r1, sl
 800dfe8:	00ca      	lsls	r2, r1, #3
 800dfea:	4610      	mov	r0, r2
 800dfec:	4619      	mov	r1, r3
 800dfee:	4603      	mov	r3, r0
 800dff0:	4642      	mov	r2, r8
 800dff2:	189b      	adds	r3, r3, r2
 800dff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dff8:	464b      	mov	r3, r9
 800dffa:	460a      	mov	r2, r1
 800dffc:	eb42 0303 	adc.w	r3, r2, r3
 800e000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e010:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e018:	460b      	mov	r3, r1
 800e01a:	18db      	adds	r3, r3, r3
 800e01c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e01e:	4613      	mov	r3, r2
 800e020:	eb42 0303 	adc.w	r3, r2, r3
 800e024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e02a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e02e:	f7f2 f8dd 	bl	80001ec <__aeabi_uldivmod>
 800e032:	4602      	mov	r2, r0
 800e034:	460b      	mov	r3, r1
 800e036:	4b0d      	ldr	r3, [pc, #52]	@ (800e06c <UART_SetConfig+0x2d4>)
 800e038:	fba3 1302 	umull	r1, r3, r3, r2
 800e03c:	095b      	lsrs	r3, r3, #5
 800e03e:	2164      	movs	r1, #100	@ 0x64
 800e040:	fb01 f303 	mul.w	r3, r1, r3
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	00db      	lsls	r3, r3, #3
 800e048:	3332      	adds	r3, #50	@ 0x32
 800e04a:	4a08      	ldr	r2, [pc, #32]	@ (800e06c <UART_SetConfig+0x2d4>)
 800e04c:	fba2 2303 	umull	r2, r3, r2, r3
 800e050:	095b      	lsrs	r3, r3, #5
 800e052:	f003 0207 	and.w	r2, r3, #7
 800e056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4422      	add	r2, r4
 800e05e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e060:	e106      	b.n	800e270 <UART_SetConfig+0x4d8>
 800e062:	bf00      	nop
 800e064:	40011000 	.word	0x40011000
 800e068:	40011400 	.word	0x40011400
 800e06c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e074:	2200      	movs	r2, #0
 800e076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e07a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e07e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e082:	4642      	mov	r2, r8
 800e084:	464b      	mov	r3, r9
 800e086:	1891      	adds	r1, r2, r2
 800e088:	6239      	str	r1, [r7, #32]
 800e08a:	415b      	adcs	r3, r3
 800e08c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e08e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e092:	4641      	mov	r1, r8
 800e094:	1854      	adds	r4, r2, r1
 800e096:	4649      	mov	r1, r9
 800e098:	eb43 0501 	adc.w	r5, r3, r1
 800e09c:	f04f 0200 	mov.w	r2, #0
 800e0a0:	f04f 0300 	mov.w	r3, #0
 800e0a4:	00eb      	lsls	r3, r5, #3
 800e0a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e0aa:	00e2      	lsls	r2, r4, #3
 800e0ac:	4614      	mov	r4, r2
 800e0ae:	461d      	mov	r5, r3
 800e0b0:	4643      	mov	r3, r8
 800e0b2:	18e3      	adds	r3, r4, r3
 800e0b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0b8:	464b      	mov	r3, r9
 800e0ba:	eb45 0303 	adc.w	r3, r5, r3
 800e0be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e0ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e0d2:	f04f 0200 	mov.w	r2, #0
 800e0d6:	f04f 0300 	mov.w	r3, #0
 800e0da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e0de:	4629      	mov	r1, r5
 800e0e0:	008b      	lsls	r3, r1, #2
 800e0e2:	4621      	mov	r1, r4
 800e0e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	008a      	lsls	r2, r1, #2
 800e0ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e0f0:	f7f2 f87c 	bl	80001ec <__aeabi_uldivmod>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	4b60      	ldr	r3, [pc, #384]	@ (800e27c <UART_SetConfig+0x4e4>)
 800e0fa:	fba3 2302 	umull	r2, r3, r3, r2
 800e0fe:	095b      	lsrs	r3, r3, #5
 800e100:	011c      	lsls	r4, r3, #4
 800e102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e106:	2200      	movs	r2, #0
 800e108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e10c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e114:	4642      	mov	r2, r8
 800e116:	464b      	mov	r3, r9
 800e118:	1891      	adds	r1, r2, r2
 800e11a:	61b9      	str	r1, [r7, #24]
 800e11c:	415b      	adcs	r3, r3
 800e11e:	61fb      	str	r3, [r7, #28]
 800e120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e124:	4641      	mov	r1, r8
 800e126:	1851      	adds	r1, r2, r1
 800e128:	6139      	str	r1, [r7, #16]
 800e12a:	4649      	mov	r1, r9
 800e12c:	414b      	adcs	r3, r1
 800e12e:	617b      	str	r3, [r7, #20]
 800e130:	f04f 0200 	mov.w	r2, #0
 800e134:	f04f 0300 	mov.w	r3, #0
 800e138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e13c:	4659      	mov	r1, fp
 800e13e:	00cb      	lsls	r3, r1, #3
 800e140:	4651      	mov	r1, sl
 800e142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e146:	4651      	mov	r1, sl
 800e148:	00ca      	lsls	r2, r1, #3
 800e14a:	4610      	mov	r0, r2
 800e14c:	4619      	mov	r1, r3
 800e14e:	4603      	mov	r3, r0
 800e150:	4642      	mov	r2, r8
 800e152:	189b      	adds	r3, r3, r2
 800e154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e158:	464b      	mov	r3, r9
 800e15a:	460a      	mov	r2, r1
 800e15c:	eb42 0303 	adc.w	r3, r2, r3
 800e160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e16e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e170:	f04f 0200 	mov.w	r2, #0
 800e174:	f04f 0300 	mov.w	r3, #0
 800e178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e17c:	4649      	mov	r1, r9
 800e17e:	008b      	lsls	r3, r1, #2
 800e180:	4641      	mov	r1, r8
 800e182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e186:	4641      	mov	r1, r8
 800e188:	008a      	lsls	r2, r1, #2
 800e18a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e18e:	f7f2 f82d 	bl	80001ec <__aeabi_uldivmod>
 800e192:	4602      	mov	r2, r0
 800e194:	460b      	mov	r3, r1
 800e196:	4611      	mov	r1, r2
 800e198:	4b38      	ldr	r3, [pc, #224]	@ (800e27c <UART_SetConfig+0x4e4>)
 800e19a:	fba3 2301 	umull	r2, r3, r3, r1
 800e19e:	095b      	lsrs	r3, r3, #5
 800e1a0:	2264      	movs	r2, #100	@ 0x64
 800e1a2:	fb02 f303 	mul.w	r3, r2, r3
 800e1a6:	1acb      	subs	r3, r1, r3
 800e1a8:	011b      	lsls	r3, r3, #4
 800e1aa:	3332      	adds	r3, #50	@ 0x32
 800e1ac:	4a33      	ldr	r2, [pc, #204]	@ (800e27c <UART_SetConfig+0x4e4>)
 800e1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e1b2:	095b      	lsrs	r3, r3, #5
 800e1b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e1b8:	441c      	add	r4, r3
 800e1ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e1be:	2200      	movs	r2, #0
 800e1c0:	673b      	str	r3, [r7, #112]	@ 0x70
 800e1c2:	677a      	str	r2, [r7, #116]	@ 0x74
 800e1c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e1c8:	4642      	mov	r2, r8
 800e1ca:	464b      	mov	r3, r9
 800e1cc:	1891      	adds	r1, r2, r2
 800e1ce:	60b9      	str	r1, [r7, #8]
 800e1d0:	415b      	adcs	r3, r3
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e1d8:	4641      	mov	r1, r8
 800e1da:	1851      	adds	r1, r2, r1
 800e1dc:	6039      	str	r1, [r7, #0]
 800e1de:	4649      	mov	r1, r9
 800e1e0:	414b      	adcs	r3, r1
 800e1e2:	607b      	str	r3, [r7, #4]
 800e1e4:	f04f 0200 	mov.w	r2, #0
 800e1e8:	f04f 0300 	mov.w	r3, #0
 800e1ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e1f0:	4659      	mov	r1, fp
 800e1f2:	00cb      	lsls	r3, r1, #3
 800e1f4:	4651      	mov	r1, sl
 800e1f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e1fa:	4651      	mov	r1, sl
 800e1fc:	00ca      	lsls	r2, r1, #3
 800e1fe:	4610      	mov	r0, r2
 800e200:	4619      	mov	r1, r3
 800e202:	4603      	mov	r3, r0
 800e204:	4642      	mov	r2, r8
 800e206:	189b      	adds	r3, r3, r2
 800e208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e20a:	464b      	mov	r3, r9
 800e20c:	460a      	mov	r2, r1
 800e20e:	eb42 0303 	adc.w	r3, r2, r3
 800e212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e21e:	667a      	str	r2, [r7, #100]	@ 0x64
 800e220:	f04f 0200 	mov.w	r2, #0
 800e224:	f04f 0300 	mov.w	r3, #0
 800e228:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e22c:	4649      	mov	r1, r9
 800e22e:	008b      	lsls	r3, r1, #2
 800e230:	4641      	mov	r1, r8
 800e232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e236:	4641      	mov	r1, r8
 800e238:	008a      	lsls	r2, r1, #2
 800e23a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e23e:	f7f1 ffd5 	bl	80001ec <__aeabi_uldivmod>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4b0d      	ldr	r3, [pc, #52]	@ (800e27c <UART_SetConfig+0x4e4>)
 800e248:	fba3 1302 	umull	r1, r3, r3, r2
 800e24c:	095b      	lsrs	r3, r3, #5
 800e24e:	2164      	movs	r1, #100	@ 0x64
 800e250:	fb01 f303 	mul.w	r3, r1, r3
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	011b      	lsls	r3, r3, #4
 800e258:	3332      	adds	r3, #50	@ 0x32
 800e25a:	4a08      	ldr	r2, [pc, #32]	@ (800e27c <UART_SetConfig+0x4e4>)
 800e25c:	fba2 2303 	umull	r2, r3, r2, r3
 800e260:	095b      	lsrs	r3, r3, #5
 800e262:	f003 020f 	and.w	r2, r3, #15
 800e266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4422      	add	r2, r4
 800e26e:	609a      	str	r2, [r3, #8]
}
 800e270:	bf00      	nop
 800e272:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e276:	46bd      	mov	sp, r7
 800e278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e27c:	51eb851f 	.word	0x51eb851f

0800e280 <__itoa>:
 800e280:	1e93      	subs	r3, r2, #2
 800e282:	2b22      	cmp	r3, #34	@ 0x22
 800e284:	b510      	push	{r4, lr}
 800e286:	460c      	mov	r4, r1
 800e288:	d904      	bls.n	800e294 <__itoa+0x14>
 800e28a:	2300      	movs	r3, #0
 800e28c:	700b      	strb	r3, [r1, #0]
 800e28e:	461c      	mov	r4, r3
 800e290:	4620      	mov	r0, r4
 800e292:	bd10      	pop	{r4, pc}
 800e294:	2a0a      	cmp	r2, #10
 800e296:	d109      	bne.n	800e2ac <__itoa+0x2c>
 800e298:	2800      	cmp	r0, #0
 800e29a:	da07      	bge.n	800e2ac <__itoa+0x2c>
 800e29c:	232d      	movs	r3, #45	@ 0x2d
 800e29e:	700b      	strb	r3, [r1, #0]
 800e2a0:	4240      	negs	r0, r0
 800e2a2:	2101      	movs	r1, #1
 800e2a4:	4421      	add	r1, r4
 800e2a6:	f000 f805 	bl	800e2b4 <__utoa>
 800e2aa:	e7f1      	b.n	800e290 <__itoa+0x10>
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	e7f9      	b.n	800e2a4 <__itoa+0x24>

0800e2b0 <itoa>:
 800e2b0:	f7ff bfe6 	b.w	800e280 <__itoa>

0800e2b4 <__utoa>:
 800e2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2b6:	4c1f      	ldr	r4, [pc, #124]	@ (800e334 <__utoa+0x80>)
 800e2b8:	b08b      	sub	sp, #44	@ 0x2c
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	466e      	mov	r6, sp
 800e2c0:	f104 0c20 	add.w	ip, r4, #32
 800e2c4:	6820      	ldr	r0, [r4, #0]
 800e2c6:	6861      	ldr	r1, [r4, #4]
 800e2c8:	4637      	mov	r7, r6
 800e2ca:	c703      	stmia	r7!, {r0, r1}
 800e2cc:	3408      	adds	r4, #8
 800e2ce:	4564      	cmp	r4, ip
 800e2d0:	463e      	mov	r6, r7
 800e2d2:	d1f7      	bne.n	800e2c4 <__utoa+0x10>
 800e2d4:	7921      	ldrb	r1, [r4, #4]
 800e2d6:	7139      	strb	r1, [r7, #4]
 800e2d8:	1e91      	subs	r1, r2, #2
 800e2da:	6820      	ldr	r0, [r4, #0]
 800e2dc:	6038      	str	r0, [r7, #0]
 800e2de:	2922      	cmp	r1, #34	@ 0x22
 800e2e0:	f04f 0100 	mov.w	r1, #0
 800e2e4:	d904      	bls.n	800e2f0 <__utoa+0x3c>
 800e2e6:	7019      	strb	r1, [r3, #0]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	b00b      	add	sp, #44	@ 0x2c
 800e2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2f0:	1e58      	subs	r0, r3, #1
 800e2f2:	4684      	mov	ip, r0
 800e2f4:	fbb5 f7f2 	udiv	r7, r5, r2
 800e2f8:	fb02 5617 	mls	r6, r2, r7, r5
 800e2fc:	3628      	adds	r6, #40	@ 0x28
 800e2fe:	446e      	add	r6, sp
 800e300:	460c      	mov	r4, r1
 800e302:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e306:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e30a:	462e      	mov	r6, r5
 800e30c:	42b2      	cmp	r2, r6
 800e30e:	f101 0101 	add.w	r1, r1, #1
 800e312:	463d      	mov	r5, r7
 800e314:	d9ee      	bls.n	800e2f4 <__utoa+0x40>
 800e316:	2200      	movs	r2, #0
 800e318:	545a      	strb	r2, [r3, r1]
 800e31a:	1919      	adds	r1, r3, r4
 800e31c:	1aa5      	subs	r5, r4, r2
 800e31e:	42aa      	cmp	r2, r5
 800e320:	dae3      	bge.n	800e2ea <__utoa+0x36>
 800e322:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e326:	780e      	ldrb	r6, [r1, #0]
 800e328:	7006      	strb	r6, [r0, #0]
 800e32a:	3201      	adds	r2, #1
 800e32c:	f801 5901 	strb.w	r5, [r1], #-1
 800e330:	e7f4      	b.n	800e31c <__utoa+0x68>
 800e332:	bf00      	nop
 800e334:	0803775c 	.word	0x0803775c

0800e338 <memset>:
 800e338:	4402      	add	r2, r0
 800e33a:	4603      	mov	r3, r0
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d100      	bne.n	800e342 <memset+0xa>
 800e340:	4770      	bx	lr
 800e342:	f803 1b01 	strb.w	r1, [r3], #1
 800e346:	e7f9      	b.n	800e33c <memset+0x4>

0800e348 <__libc_init_array>:
 800e348:	b570      	push	{r4, r5, r6, lr}
 800e34a:	4d0d      	ldr	r5, [pc, #52]	@ (800e380 <__libc_init_array+0x38>)
 800e34c:	4c0d      	ldr	r4, [pc, #52]	@ (800e384 <__libc_init_array+0x3c>)
 800e34e:	1b64      	subs	r4, r4, r5
 800e350:	10a4      	asrs	r4, r4, #2
 800e352:	2600      	movs	r6, #0
 800e354:	42a6      	cmp	r6, r4
 800e356:	d109      	bne.n	800e36c <__libc_init_array+0x24>
 800e358:	4d0b      	ldr	r5, [pc, #44]	@ (800e388 <__libc_init_array+0x40>)
 800e35a:	4c0c      	ldr	r4, [pc, #48]	@ (800e38c <__libc_init_array+0x44>)
 800e35c:	f000 f826 	bl	800e3ac <_init>
 800e360:	1b64      	subs	r4, r4, r5
 800e362:	10a4      	asrs	r4, r4, #2
 800e364:	2600      	movs	r6, #0
 800e366:	42a6      	cmp	r6, r4
 800e368:	d105      	bne.n	800e376 <__libc_init_array+0x2e>
 800e36a:	bd70      	pop	{r4, r5, r6, pc}
 800e36c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e370:	4798      	blx	r3
 800e372:	3601      	adds	r6, #1
 800e374:	e7ee      	b.n	800e354 <__libc_init_array+0xc>
 800e376:	f855 3b04 	ldr.w	r3, [r5], #4
 800e37a:	4798      	blx	r3
 800e37c:	3601      	adds	r6, #1
 800e37e:	e7f2      	b.n	800e366 <__libc_init_array+0x1e>
 800e380:	0803778c 	.word	0x0803778c
 800e384:	0803778c 	.word	0x0803778c
 800e388:	0803778c 	.word	0x0803778c
 800e38c:	08037790 	.word	0x08037790

0800e390 <memcpy>:
 800e390:	440a      	add	r2, r1
 800e392:	4291      	cmp	r1, r2
 800e394:	f100 33ff 	add.w	r3, r0, #4294967295
 800e398:	d100      	bne.n	800e39c <memcpy+0xc>
 800e39a:	4770      	bx	lr
 800e39c:	b510      	push	{r4, lr}
 800e39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3a6:	4291      	cmp	r1, r2
 800e3a8:	d1f9      	bne.n	800e39e <memcpy+0xe>
 800e3aa:	bd10      	pop	{r4, pc}

0800e3ac <_init>:
 800e3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ae:	bf00      	nop
 800e3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3b2:	bc08      	pop	{r3}
 800e3b4:	469e      	mov	lr, r3
 800e3b6:	4770      	bx	lr

0800e3b8 <_fini>:
 800e3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ba:	bf00      	nop
 800e3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3be:	bc08      	pop	{r3}
 800e3c0:	469e      	mov	lr, r3
 800e3c2:	4770      	bx	lr
