
DAB_STM32_Si468x_Alarming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00028ea4  0800d958  0800d958  0000e958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080367fc  080367fc  00038188  2**0
                  CONTENTS
  4 .ARM          00000008  080367fc  080367fc  000377fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08036804  08036804  00038188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036804  08036804  00037804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08036808  08036808  00037808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0803680c  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00038188  2**0
                  CONTENTS
 10 .bss          00007058  20000188  20000188  00038188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200071e0  200071e0  00038188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00038188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018925  00000000  00000000  000381b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ea9  00000000  00000000  00050add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  00054988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116b  00000000  00000000  00055fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c1b  00000000  00000000  0005712b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef32  00000000  00000000  0007bd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d343e  00000000  00000000  0009ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016e0b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bc8  00000000  00000000  0016e0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00173cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d940 	.word	0x0800d940

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d940 	.word	0x0800d940

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 800051c:	f000 f914 	bl	8000748 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fb97 	bl	8000c54 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8000526:	20cb      	movs	r0, #203	@ 0xcb
 8000528:	f000 fb94 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800052c:	2039      	movs	r0, #57	@ 0x39
 800052e:	f000 fba0 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8000532:	202c      	movs	r0, #44	@ 0x2c
 8000534:	f000 fb9d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fb9a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800053e:	2034      	movs	r0, #52	@ 0x34
 8000540:	f000 fb97 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fb94 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800054a:	20cf      	movs	r0, #207	@ 0xcf
 800054c:	f000 fb82 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fb8e 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000556:	20c1      	movs	r0, #193	@ 0xc1
 8000558:	f000 fb8b 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 800055c:	2030      	movs	r0, #48	@ 0x30
 800055e:	f000 fb88 	bl	8000c72 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000562:	20e8      	movs	r0, #232	@ 0xe8
 8000564:	f000 fb76 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000568:	2085      	movs	r0, #133	@ 0x85
 800056a:	f000 fb82 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fb7f 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000574:	2078      	movs	r0, #120	@ 0x78
 8000576:	f000 fb7c 	bl	8000c72 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800057a:	20ea      	movs	r0, #234	@ 0xea
 800057c:	f000 fb6a 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fb76 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fb73 	bl	8000c72 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 800058c:	20ed      	movs	r0, #237	@ 0xed
 800058e:	f000 fb61 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000592:	2064      	movs	r0, #100	@ 0x64
 8000594:	f000 fb6d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fb6a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800059e:	2012      	movs	r0, #18
 80005a0:	f000 fb67 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80005a4:	2081      	movs	r0, #129	@ 0x81
 80005a6:	f000 fb64 	bl	8000c72 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80005aa:	20f7      	movs	r0, #247	@ 0xf7
 80005ac:	f000 fb52 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80005b0:	2020      	movs	r0, #32
 80005b2:	f000 fb5e 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80005b6:	20c0      	movs	r0, #192	@ 0xc0
 80005b8:	f000 fb4c 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 fb58 	bl	8000c72 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80005c2:	20c1      	movs	r0, #193	@ 0xc1
 80005c4:	f000 fb46 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f000 fb52 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80005ce:	20c5      	movs	r0, #197	@ 0xc5
 80005d0:	f000 fb40 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80005d4:	203e      	movs	r0, #62	@ 0x3e
 80005d6:	f000 fb4c 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80005da:	2028      	movs	r0, #40	@ 0x28
 80005dc:	f000 fb49 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005e0:	20c7      	movs	r0, #199	@ 0xc7
 80005e2:	f000 fb37 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005e6:	2086      	movs	r0, #134	@ 0x86
 80005e8:	f000 fb43 	bl	8000c72 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005ec:	2036      	movs	r0, #54	@ 0x36
 80005ee:	f000 fb31 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005f2:	2048      	movs	r0, #72	@ 0x48
 80005f4:	f000 fb3d 	bl	8000c72 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f000 fb2b 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005fe:	2055      	movs	r0, #85	@ 0x55
 8000600:	f000 fb37 	bl	8000c72 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8000604:	20b1      	movs	r0, #177	@ 0xb1
 8000606:	f000 fb25 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fb31 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8000610:	2018      	movs	r0, #24
 8000612:	f000 fb2e 	bl	8000c72 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8000616:	20b6      	movs	r0, #182	@ 0xb6
 8000618:	f000 fb1c 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800061c:	2008      	movs	r0, #8
 800061e:	f000 fb28 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8000622:	2082      	movs	r0, #130	@ 0x82
 8000624:	f000 fb25 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000628:	2027      	movs	r0, #39	@ 0x27
 800062a:	f000 fb22 	bl	8000c72 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800062e:	20f2      	movs	r0, #242	@ 0xf2
 8000630:	f000 fb10 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fb1c 	bl	8000c72 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800063a:	2026      	movs	r0, #38	@ 0x26
 800063c:	f000 fb0a 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fb16 	bl	8000c72 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8000646:	20e0      	movs	r0, #224	@ 0xe0
 8000648:	f000 fb04 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800064c:	200f      	movs	r0, #15
 800064e:	f000 fb10 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000652:	2031      	movs	r0, #49	@ 0x31
 8000654:	f000 fb0d 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000658:	202b      	movs	r0, #43	@ 0x2b
 800065a:	f000 fb0a 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800065e:	200c      	movs	r0, #12
 8000660:	f000 fb07 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000664:	200e      	movs	r0, #14
 8000666:	f000 fb04 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800066a:	2008      	movs	r0, #8
 800066c:	f000 fb01 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000670:	204e      	movs	r0, #78	@ 0x4e
 8000672:	f000 fafe 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8000676:	20f1      	movs	r0, #241	@ 0xf1
 8000678:	f000 fafb 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 800067c:	2037      	movs	r0, #55	@ 0x37
 800067e:	f000 faf8 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000682:	2007      	movs	r0, #7
 8000684:	f000 faf5 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000688:	2010      	movs	r0, #16
 800068a:	f000 faf2 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800068e:	2003      	movs	r0, #3
 8000690:	f000 faef 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000694:	200e      	movs	r0, #14
 8000696:	f000 faec 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800069a:	2009      	movs	r0, #9
 800069c:	f000 fae9 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fae6 	bl	8000c72 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80006a6:	20e1      	movs	r0, #225	@ 0xe1
 80006a8:	f000 fad4 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fae0 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80006b2:	200e      	movs	r0, #14
 80006b4:	f000 fadd 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80006b8:	2014      	movs	r0, #20
 80006ba:	f000 fada 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80006be:	2003      	movs	r0, #3
 80006c0:	f000 fad7 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80006c4:	2011      	movs	r0, #17
 80006c6:	f000 fad4 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80006ca:	2007      	movs	r0, #7
 80006cc:	f000 fad1 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006d0:	2031      	movs	r0, #49	@ 0x31
 80006d2:	f000 face 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80006d6:	20c1      	movs	r0, #193	@ 0xc1
 80006d8:	f000 facb 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006dc:	2048      	movs	r0, #72	@ 0x48
 80006de:	f000 fac8 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006e2:	2008      	movs	r0, #8
 80006e4:	f000 fac5 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006e8:	200f      	movs	r0, #15
 80006ea:	f000 fac2 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006ee:	200c      	movs	r0, #12
 80006f0:	f000 fabf 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006f4:	2031      	movs	r0, #49	@ 0x31
 80006f6:	f000 fabc 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006fa:	2036      	movs	r0, #54	@ 0x36
 80006fc:	f000 fab9 	bl	8000c72 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000700:	200f      	movs	r0, #15
 8000702:	f000 fab6 	bl	8000c72 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8000706:	2011      	movs	r0, #17
 8000708:	f000 faa4 	bl	8000c54 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800070c:	2029      	movs	r0, #41	@ 0x29
 800070e:	f000 faa1 	bl	8000c54 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8000712:	202c      	movs	r0, #44	@ 0x2c
 8000714:	f000 faad 	bl	8000c72 <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f83d 	bl	8000798 <ILI9341_Set_Rotation>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	2301      	movs	r3, #1
 8000732:	2201      	movs	r2, #1
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <ILI9341_SPI_Send+0x20>)
 8000736:	f00b f88c 	bl	800b852 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20006f58 	.word	0x20006f58

08000748 <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	RESET_ON;
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000752:	4810      	ldr	r0, [pc, #64]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000754:	f007 fea8 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000758:	2032      	movs	r0, #50	@ 0x32
 800075a:	f007 f8a1 	bl	80078a0 <HAL_Delay>
	RESET_OFF;
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000766:	f007 fe9f 	bl	80084a8 <HAL_GPIO_WritePin>
	CS_ON;
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <ILI9341_Reset+0x4c>)
 8000772:	f007 fe99 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f007 f892 	bl	80078a0 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fa69 	bl	8000c54 <ILI9341_Send_Command>
	CS_OFF;
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <ILI9341_Reset+0x4c>)
 800078a:	f007 fe8d 	bl	80084a8 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020c00 	.word	0x40020c00

08000798 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 80007a2:	2036      	movs	r0, #54	@ 0x36
 80007a4:	f000 fa56 	bl	8000c54 <ILI9341_Send_Command>
	switch (rotation) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d836      	bhi.n	800081c <ILI9341_Set_Rotation+0x84>
 80007ae:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <ILI9341_Set_Rotation+0x1c>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007c5 	.word	0x080007c5
 80007b8:	080007db 	.word	0x080007db
 80007bc:	080007f1 	.word	0x080007f1
 80007c0:	08000807 	.word	0x08000807
	case 0:
		ILI9341_Send_Data(0x48);
 80007c4:	2048      	movs	r0, #72	@ 0x48
 80007c6:	f000 fa54 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007cc:	22f0      	movs	r2, #240	@ 0xf0
 80007ce:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		break;
 80007d8:	e020      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80007da:	2028      	movs	r0, #40	@ 0x28
 80007dc:	f000 fa49 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007e6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007ea:	22f0      	movs	r2, #240	@ 0xf0
 80007ec:	601a      	str	r2, [r3, #0]
		break;
 80007ee:	e015      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007f0:	2088      	movs	r0, #136	@ 0x88
 80007f2:	f000 fa3e 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 240;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 80007f8:	22f0      	movs	r2, #240	@ 0xf0
 80007fa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 80007fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000802:	601a      	str	r2, [r3, #0]
		break;
 8000804:	e00a      	b.n	800081c <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 8000806:	20e8      	movs	r0, #232	@ 0xe8
 8000808:	f000 fa33 	bl	8000c72 <ILI9341_Send_Data>
		X_SIZE = 320;
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <ILI9341_Set_Rotation+0x8c>)
 800080e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000812:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <ILI9341_Set_Rotation+0x90>)
 8000816:	22f0      	movs	r2, #240	@ 0xf0
 8000818:	601a      	str	r2, [r3, #0]
		break;
 800081a:	bf00      	nop
	}
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000004 	.word	0x20000004

0800082c <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083e:	4817      	ldr	r0, [pc, #92]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 8000840:	f007 fe32 	bl	80084a8 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084a:	4814      	ldr	r0, [pc, #80]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 800084c:	f007 fe2c 	bl	80084a8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff66 	bl	8000724 <ILI9341_SPI_Send>

	DC_DATA;
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085e:	480f      	ldr	r0, [pc, #60]	@ (800089c <ILI9341_SPI_Send_32+0x70>)
 8000860:	f007 fe22 	bl	80084a8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0e1b      	lsrs	r3, r3, #24
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff5a 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff54 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff4e 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff49 	bl	8000724 <ILI9341_SPI_Send>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00

080008a0 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	617b      	str	r3, [r7, #20]
	t |= x2;
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4313      	orrs	r3, r2
 80008be:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 80008c0:	6979      	ldr	r1, [r7, #20]
 80008c2:	202a      	movs	r0, #42	@ 0x2a
 80008c4:	f7ff ffb2 	bl	800082c <ILI9341_SPI_Send_32>
	t = y1;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	617b      	str	r3, [r7, #20]
	t |= y2;
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80008da:	6979      	ldr	r1, [r7, #20]
 80008dc:	202b      	movs	r0, #43	@ 0x2b
 80008de:	f7ff ffa5 	bl	800082c <ILI9341_SPI_Send_32>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <ILI9341_Fill_Screen+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <ILI9341_Fill_Screen+0x44>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ffcc 	bl	80008a0 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	b29b      	uxth	r3, r3
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <ILI9341_Fill_Screen+0x40>)
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	4611      	mov	r1, r2
 8000912:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <ILI9341_Fill_Screen+0x44>)
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	fb01 f202 	mul.w	r2, r1, r2
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f9b7 	bl	8000c90 <ILI9341_Send_Burst>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004

08000934 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db31      	blt.n	80009aa <ILI9341_Draw_Pixel+0x76>
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db2e      	blt.n	80009aa <ILI9341_Draw_Pixel+0x76>
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <ILI9341_Draw_Pixel+0x80>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	d229      	bcs.n	80009aa <ILI9341_Draw_Pixel+0x76>
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <ILI9341_Draw_Pixel+0x84>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d224      	bcs.n	80009aa <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <ILI9341_Draw_Pixel+0x80>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <ILI9341_Draw_Pixel+0x84>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3b01      	subs	r3, #1
 8000970:	f7ff ff96 	bl	80008a0 <ILI9341_Set_Address>
	DC_COMMAND;
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097a:	4810      	ldr	r0, [pc, #64]	@ (80009bc <ILI9341_Draw_Pixel+0x88>)
 800097c:	f007 fd94 	bl	80084a8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000980:	202c      	movs	r0, #44	@ 0x2c
 8000982:	f7ff fecf 	bl	8000724 <ILI9341_SPI_Send>
	DC_DATA;
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098c:	480b      	ldr	r0, [pc, #44]	@ (80009bc <ILI9341_Draw_Pixel+0x88>)
 800098e:	f007 fd8b 	bl	80084a8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fec3 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff febe 	bl	8000724 <ILI9341_SPI_Send>
 80009a8:	e000      	b.n	80009ac <ILI9341_Draw_Pixel+0x78>
		return;
 80009aa:	bf00      	nop
}
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f7ff ff63 	bl	80008a0 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	b298      	uxth	r0, r3
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	4619      	mov	r1, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	fb01 f303 	mul.w	r3, r1, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	f000 f94b 	bl	8000c90 <ILI9341_Send_Burst>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b08c      	sub	sp, #48	@ 0x30
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1acb      	subs	r3, r1, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bfb8      	it	lt
 8000a28:	425b      	neglt	r3, r3
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	bfcc      	ite	gt
 8000a2e:	2301      	movgt	r3, #1
 8000a30:	2300      	movle	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24

	if (steep)
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00d      	beq.n	8000a58 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000a48:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	843b      	strh	r3, [r7, #32]
 8000a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a56:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	if(x1>x2)
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d90d      	bls.n	8000a7c <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	83fb      	strh	r3, [r7, #30]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a6c:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	83bb      	strh	r3, [r7, #28]
 8000a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bfb8      	it	lt
 8000a8e:	425b      	neglt	r3, r3
 8000a90:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	0fda      	lsrs	r2, r3, #31
 8000a96:	4413      	add	r3, r2
 8000a98:	105b      	asrs	r3, r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ystep;
	if(y1 < y2)
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d202      	bcs.n	8000aaa <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	e023      	b.n	8000af2 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	for (; x1 <= x2; x1++)
 8000ab0:	e01f      	b.n	8000af2 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff38 	bl	8000934 <ILI9341_Draw_Pixel>
 8000ac4:	e005      	b.n	8000ad2 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff31 	bl	8000934 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (err < 0)
 8000ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	da05      	bge.n	8000aec <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
			err = dx;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (; x1 <= x2; x1++)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d9db      	bls.n	8000ab2 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	@ 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b12:	7f3b      	ldrb	r3, [r7, #28]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d061      	beq.n	8000bdc <ILI9341_Draw_String+0xd8>
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	f300 8092 	bgt.w	8000c42 <ILI9341_Draw_String+0x13e>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d028      	beq.n	8000b74 <ILI9341_Draw_String+0x70>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d02b      	beq.n	8000b7e <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b26:	e08c      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b28:	7f3b      	ldrb	r3, [r7, #28]
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	441a      	add	r2, r3
 8000b32:	4b46      	ldr	r3, [pc, #280]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d907      	bls.n	8000b4a <ILI9341_Draw_String+0x46>
				x = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b3e:	7f3b      	ldrb	r3, [r7, #28]
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	461a      	mov	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4413      	add	r3, r2
 8000b48:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	7f3a      	ldrb	r2, [r7, #28]
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	f000 f95a 	bl	8000e14 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b60:	7f3b      	ldrb	r3, [r7, #28]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	3b02      	subs	r3, #2
 8000b6c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	3301      	adds	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1d5      	bne.n	8000b28 <ILI9341_Draw_String+0x24>
	break;
 8000b7c:	e061      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b7e:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b84:	e025      	b.n	8000bd2 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b86:	7f3b      	ldrb	r3, [r7, #28]
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	441a      	add	r2, r3
 8000b90:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d907      	bls.n	8000ba8 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b9c:	7f3b      	ldrb	r3, [r7, #28]
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	7f3a      	ldrb	r2, [r7, #28]
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	f000 f92b 	bl	8000e14 <ILI9341_Draw_Char>
			x += hh*8;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
			*str++;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1d5      	bne.n	8000b86 <ILI9341_Draw_String+0x82>
	break;
 8000bda:	e032      	b.n	8000c42 <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000be2:	e029      	b.n	8000c38 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000be4:	7f3b      	ldrb	r3, [r7, #28]
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	461a      	mov	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	441a      	add	r2, r3
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <ILI9341_Draw_String+0x148>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d907      	bls.n	8000c06 <ILI9341_Draw_String+0x102>
				x = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4413      	add	r3, r2
 8000c04:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	7f3a      	ldrb	r2, [r7, #28]
 8000c10:	9201      	str	r2, [sp, #4]
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f000 f8fc 	bl	8000e14 <ILI9341_Draw_Char>
			x += hh*10;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <ILI9341_Draw_String+0x14c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1d1      	bne.n	8000be4 <ILI9341_Draw_String+0xe0>
	break;
 8000c40:	bf00      	nop
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	200001a4 	.word	0x200001a4

08000c54 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c5e:	f000 fa09 	bl	8001074 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd5d 	bl	8000724 <ILI9341_SPI_Send>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c7c:	f000 f9e8 	bl	8001050 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd4e 	bl	8000724 <ILI9341_SPI_Send>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	733b      	strb	r3, [r7, #12]
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cae:	4858      	ldr	r0, [pc, #352]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cb0:	f007 fbfa 	bl	80084a8 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cba:	4855      	ldr	r0, [pc, #340]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cbc:	f007 fbf4 	bl	80084a8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cc0:	202c      	movs	r0, #44	@ 0x2c
 8000cc2:	f7ff fd2f 	bl	8000724 <ILI9341_SPI_Send>
	DC_DATA;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ccc:	4850      	ldr	r0, [pc, #320]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000cce:	f007 fbeb 	bl	80084a8 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cd2:	7b3b      	ldrb	r3, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd25 	bl	8000724 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd21 	bl	8000724 <ILI9341_SPI_Send>
	len--;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cee:	7b3a      	ldrb	r2, [r7, #12]
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d169      	bne.n	8000dca <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cf6:	e027      	b.n	8000d48 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd10 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fd0c 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fd08 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd04 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd00 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d24:	7afb      	ldrb	r3, [r7, #11]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcfc 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fcf8 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcf4 	bl	8000724 <ILI9341_SPI_Send>
			} while (--i);
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	737b      	strb	r3, [r7, #13]
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1d9      	bne.n	8000cfc <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	81fa      	strh	r2, [r7, #14]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1d2      	bne.n	8000cf8 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d5a:	737b      	strb	r3, [r7, #13]
 8000d5c:	e007      	b.n	8000d6e <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fcdf 	bl	8000724 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcdb 	bl	8000724 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	7b7b      	ldrb	r3, [r7, #13]
 8000d70:	1e5a      	subs	r2, r3, #1
 8000d72:	737a      	strb	r2, [r7, #13]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f2      	bne.n	8000d5e <ILI9341_Send_Burst+0xce>
 8000d78:	e03f      	b.n	8000dfa <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d7e:	7b3b      	ldrb	r3, [r7, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fccf 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fccb 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcc7 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcc3 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fcbf 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fcbb 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dae:	7b3b      	ldrb	r3, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fcb7 	bl	8000724 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fcb3 	bl	8000724 <ILI9341_SPI_Send>
			} while (--i);
 8000dbe:	7b7b      	ldrb	r3, [r7, #13]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	737b      	strb	r3, [r7, #13]
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1d9      	bne.n	8000d7e <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	1e5a      	subs	r2, r3, #1
 8000dce:	81fa      	strh	r2, [r7, #14]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1d2      	bne.n	8000d7a <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ddc:	737b      	strb	r3, [r7, #13]
 8000dde:	e007      	b.n	8000df0 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc9e 	bl	8000724 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fc9a 	bl	8000724 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	7b7b      	ldrb	r3, [r7, #13]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	737a      	strb	r2, [r7, #13]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f2      	bne.n	8000de0 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <ILI9341_Send_Burst+0x180>)
 8000e02:	f007 fb51 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40020c00 	.word	0x40020c00

08000e14 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	f000 80b2 	beq.w	8000f90 <ILI9341_Draw_Char+0x17c>
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	f300 8104 	bgt.w	800103a <ILI9341_Draw_Char+0x226>
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d002      	beq.n	8000e3c <ILI9341_Draw_Char+0x28>
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d055      	beq.n	8000ee6 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e3a:	e0fe      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3305      	adds	r3, #5
 8000e44:	461a      	mov	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3308      	adds	r3, #8
 8000e4a:	f7ff fd29 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e54:	487b      	ldr	r0, [pc, #492]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000e56:	f007 fb27 	bl	80084a8 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e5a:	202c      	movs	r0, #44	@ 0x2c
 8000e5c:	f7ff fc62 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e66:	4877      	ldr	r0, [pc, #476]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000e68:	f007 fb1e 	bl	80084a8 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	e035      	b.n	8000ede <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e72:	2302      	movs	r3, #2
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e02c      	b.n	8000ed2 <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e7c:	3b20      	subs	r3, #32
 8000e7e:	4a72      	ldr	r2, [pc, #456]	@ (8001048 <ILI9341_Draw_Char+0x234>)
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	441a      	add	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	fa42 f303 	asr.w	r3, r2, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc3d 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fc38 	bl	8000724 <ILI9341_SPI_Send>
 8000eb4:	e00a      	b.n	8000ecc <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc31 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fc2c 	bl	8000724 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	ddcf      	ble.n	8000e78 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	3301      	adds	r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	ddc6      	ble.n	8000e72 <ILI9341_Draw_Char+0x5e>
			break;
 8000ee4:	e0a9      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3307      	adds	r3, #7
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	f7ff fcd4 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efe:	4851      	ldr	r0, [pc, #324]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000f00:	f007 fad2 	bl	80084a8 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f04:	202c      	movs	r0, #44	@ 0x2c
 8000f06:	f7ff fc0d 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f10:	484c      	ldr	r0, [pc, #304]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000f12:	f007 fac9 	bl	80084a8 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	e035      	b.n	8000f88 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e02c      	b.n	8000f7c <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f26:	3b20      	subs	r3, #32
 8000f28:	4a48      	ldr	r2, [pc, #288]	@ (800104c <ILI9341_Draw_Char+0x238>)
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	441a      	add	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f1c3 0307 	rsb	r3, r3, #7
 8000f3c:	fa42 f303 	asr.w	r3, r2, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00b      	beq.n	8000f60 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fbe8 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbe3 	bl	8000724 <ILI9341_SPI_Send>
 8000f5e:	e00a      	b.n	8000f76 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fbdc 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fbd7 	bl	8000724 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	ddcf      	ble.n	8000f22 <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	3301      	adds	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	ddc6      	ble.n	8000f1c <ILI9341_Draw_Char+0x108>
		break;
 8000f8e:	e054      	b.n	800103a <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3309      	adds	r3, #9
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3310      	adds	r3, #16
 8000f9e:	f7ff fc7f 	bl	80008a0 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa8:	4826      	ldr	r0, [pc, #152]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000faa:	f007 fa7d 	bl	80084a8 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fae:	202c      	movs	r0, #44	@ 0x2c
 8000fb0:	f7ff fbb8 	bl	8000724 <ILI9341_SPI_Send>
			DC_DATA;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fba:	4822      	ldr	r0, [pc, #136]	@ (8001044 <ILI9341_Draw_Char+0x230>)
 8000fbc:	f007 fa74 	bl	80084a8 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e035      	b.n	8001032 <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e02c      	b.n	8001026 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <ILI9341_Draw_Char+0x238>)
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	441a      	add	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	fa42 f303 	asr.w	r3, r2, r3
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fb93 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fb8e 	bl	8000724 <ILI9341_SPI_Send>
 8001008:	e00a      	b.n	8001020 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fb87 	bl	8000724 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fb82 	bl	8000724 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b07      	cmp	r3, #7
 800102a:	ddcf      	ble.n	8000fcc <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3301      	adds	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b1d      	cmp	r3, #29
 8001036:	ddc6      	ble.n	8000fc6 <ILI9341_Draw_Char+0x1b2>
		break;
 8001038:	bf00      	nop
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020c00 	.word	0x40020c00
 8001048:	0800eff4 	.word	0x0800eff4
 800104c:	0800f2cc 	.word	0x0800f2cc

08001050 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <Before_Sending_Data+0x20>)
 800105c:	f007 fa24 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001066:	4802      	ldr	r0, [pc, #8]	@ (8001070 <Before_Sending_Data+0x20>)
 8001068:	f007 fa1e 	bl	80084a8 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020c00 	.word	0x40020c00

08001074 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <Before_Sending_Command+0x20>)
 8001080:	f007 fa12 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800108a:	4802      	ldr	r0, [pc, #8]	@ (8001094 <Before_Sending_Command+0x20>)
 800108c:	f007 fa0c 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020c00 	.word	0x40020c00

08001098 <ILI9341_Draw_Start_Screen>:



void ILI9341_Draw_Start_Screen(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    ILI9341_Set_Address(0, 0, 319, 239);
 800109e:	23ef      	movs	r3, #239	@ 0xef
 80010a0:	f240 123f 	movw	r2, #319	@ 0x13f
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbfa 	bl	80008a0 <ILI9341_Set_Address>

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // Komenda
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b2:	481b      	ldr	r0, [pc, #108]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010b4:	f007 f9f8 	bl	80084a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010be:	4818      	ldr	r0, [pc, #96]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010c0:	f007 f9f2 	bl	80084a8 <HAL_GPIO_WritePin>
    ILI9341_SPI_Send(0x2C);
 80010c4:	202c      	movs	r0, #44	@ 0x2c
 80010c6:	f7ff fb2d 	bl	8000724 <ILI9341_SPI_Send>

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // Dane
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d0:	4813      	ldr	r0, [pc, #76]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 80010d2:	f007 f9e9 	bl	80084a8 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < 320 * 240; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	e013      	b.n	8001104 <ILI9341_Draw_Start_Screen+0x6c>
    {
        uint16_t color = start_screen[i];
 80010dc:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <ILI9341_Draw_Start_Screen+0x8c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e4:	807b      	strh	r3, [r7, #2]
        ILI9341_SPI_Send(color >> 8);
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fb18 	bl	8000724 <ILI9341_SPI_Send>
        ILI9341_SPI_Send(color & 0xFF);
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fb13 	bl	8000724 <ILI9341_SPI_Send>
    for (uint32_t i = 0; i < 320 * 240; i++)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800110a:	d3e7      	bcc.n	80010dc <ILI9341_Draw_Start_Screen+0x44>
    }

    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <ILI9341_Draw_Start_Screen+0x88>)
 8001114:	f007 f9c8 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020c00 	.word	0x40020c00
 8001124:	0800f8bc 	.word	0x0800f8bc

08001128 <Si468x_dab_init>:

static uint16_t rssi_hi_res;


void Si468x_dab_init()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 800112c:	2101      	movs	r1, #1
 800112e:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <Si468x_dab_init+0xa8>)
 8001130:	f002 fd16 	bl	8003b60 <send_debug_msg>
	Si468x_reset();
 8001134:	f000 f84e 	bl	80011d4 <Si468x_reset>
	Si468x_power_up();
 8001138:	f000 f868 	bl	800120c <Si468x_power_up>
	Si468x_bootloader_load_host();
 800113c:	f000 f8ea 	bl	8001314 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_6_0_9_START_ADDR);
 8001140:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8001144:	f000 f95a 	bl	80013fc <Si468x_firmware_load_flash>
	Si468x_boot();
 8001148:	f000 f9f8 	bl	800153c <Si468x_boot>
	Si468x_get_part_info();
 800114c:	f000 fbb0 	bl	80018b0 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001150:	f000 fb28 	bl	80017a4 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, dla FM dać 0x00 (otwarty), dla DAB 0x01 (zamkniety)
 8001154:	2101      	movs	r1, #1
 8001156:	f241 7012 	movw	r0, #5906	@ 0x1712
 800115a:	f000 fc17 	bl	800198c <Si468x_set_property>
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF468); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5. Wartość z kalibracji DAB: 0xF468 (-2968)
//	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x250); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3. Wartość z kalibracji DAB: 0x0250 (592)
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x5); 				//prog RSSI od kiedy łapie kanał, default 12
 800115e:	2105      	movs	r1, #5
 8001160:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8001164:	f000 fc12 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 8001168:	2130      	movs	r1, #48	@ 0x30
 800116a:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 800116e:	f000 fc0d 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 8001172:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001176:	f24b 2002 	movw	r0, #45570	@ 0xb202
 800117a:	f000 fc07 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta. bylo 0x4005
 800117e:	f244 0105 	movw	r1, #16389	@ 0x4005
 8001182:	f44f 4034 	mov.w	r0, #46080	@ 0xb400
 8001186:	f000 fc01 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 800118a:	2101      	movs	r1, #1
 800118c:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8001190:	f000 fbfc 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001194:	2101      	movs	r1, #1
 8001196:	f24b 3002 	movw	r0, #45826	@ 0xb302
 800119a:	f000 fbf7 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 800119e:	2101      	movs	r1, #1
 80011a0:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 80011a4:	f000 fbf2 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 80011a8:	2105      	movs	r1, #5
 80011aa:	f24b 5001 	movw	r0, #46337	@ 0xb501
 80011ae:	f000 fbed 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 80011b2:	f24e 21c4 	movw	r1, #58052	@ 0xe2c4
 80011b6:	f24b 5003 	movw	r0, #46339	@ 0xb503
 80011ba:	f000 fbe7 	bl	800198c <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 80011be:	2101      	movs	r1, #1
 80011c0:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 80011c4:	f000 fbe2 	bl	800198c <Si468x_set_property>
	//Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 80011c8:	f000 faec 	bl	80017a4 <Si468x_get_sys_state>

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	0800da08 	.word	0x0800da08

080011d4 <Si468x_reset>:

void Si468x_reset()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 80011d8:	2101      	movs	r1, #1
 80011da:	480a      	ldr	r0, [pc, #40]	@ (8001204 <Si468x_reset+0x30>)
 80011dc:	f002 fcc0 	bl	8003b60 <send_debug_msg>
	RESET_PIN_LOW;
 80011e0:	2200      	movs	r2, #0
 80011e2:	2120      	movs	r1, #32
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <Si468x_reset+0x34>)
 80011e6:	f007 f95f 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	@ 0x64
 80011ec:	f006 fb58 	bl	80078a0 <HAL_Delay>
	RESET_PIN_HIGH;
 80011f0:	2201      	movs	r2, #1
 80011f2:	2120      	movs	r1, #32
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <Si468x_reset+0x34>)
 80011f6:	f007 f957 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80011fa:	20c8      	movs	r0, #200	@ 0xc8
 80011fc:	f006 fb50 	bl	80078a0 <HAL_Delay>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800da58 	.word	0x0800da58
 8001208:	40020800 	.word	0x40020800

0800120c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001210:	2101      	movs	r1, #1
 8001212:	4826      	ldr	r0, [pc, #152]	@ (80012ac <Si468x_power_up+0xa0>)
 8001214:	f002 fca4 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <Si468x_power_up+0xa4>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001220:	2280      	movs	r2, #128	@ 0x80
 8001222:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001226:	2217      	movs	r2, #23
 8001228:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <Si468x_power_up+0xa4>)
 800122c:	2250      	movs	r2, #80	@ 0x50
 800122e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001238:	22f8      	movs	r2, #248	@ 0xf8
 800123a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <Si468x_power_up+0xa4>)
 800123e:	2224      	movs	r2, #36	@ 0x24
 8001240:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001244:	2201      	movs	r2, #1
 8001246:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <Si468x_power_up+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001250:	2210      	movs	r2, #16
 8001252:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <Si468x_power_up+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001268:	2228      	movs	r2, #40	@ 0x28
 800126a:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <Si468x_power_up+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <Si468x_power_up+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001278:	490d      	ldr	r1, [pc, #52]	@ (80012b0 <Si468x_power_up+0xa4>)
 800127a:	2010      	movs	r0, #16
 800127c:	f000 fa58 	bl	8001730 <Si468x_write_command>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <Si468x_power_up+0xa8>)
 8001286:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f006 fb09 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800128e:	490a      	ldr	r1, [pc, #40]	@ (80012b8 <Si468x_power_up+0xac>)
 8001290:	2005      	movs	r0, #5
 8001292:	f000 fa6f 	bl	8001774 <Si468x_read_reply>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <Si468x_power_up+0xa8>)
 800129c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800129e:	2101      	movs	r1, #1
 80012a0:	4806      	ldr	r0, [pc, #24]	@ (80012bc <Si468x_power_up+0xb0>)
 80012a2:	f002 fc5d 	bl	8003b60 <send_debug_msg>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	0800da6c 	.word	0x0800da6c
 80012b0:	200001a8 	.word	0x200001a8
 80012b4:	20003510 	.word	0x20003510
 80012b8:	200011a8 	.word	0x200011a8
 80012bc:	0800daa8 	.word	0x0800daa8

080012c0 <Si468x_load_init>:

void Si468x_load_init()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 80012c4:	2101      	movs	r1, #1
 80012c6:	480f      	ldr	r0, [pc, #60]	@ (8001304 <Si468x_load_init+0x44>)
 80012c8:	f002 fc4a 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <Si468x_load_init+0x48>)
 80012ce:	2206      	movs	r2, #6
 80012d0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <Si468x_load_init+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80012d8:	490b      	ldr	r1, [pc, #44]	@ (8001308 <Si468x_load_init+0x48>)
 80012da:	2002      	movs	r0, #2
 80012dc:	f000 fa28 	bl	8001730 <Si468x_write_command>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <Si468x_load_init+0x4c>)
 80012e6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f006 fad9 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012ee:	4908      	ldr	r1, [pc, #32]	@ (8001310 <Si468x_load_init+0x50>)
 80012f0:	2005      	movs	r0, #5
 80012f2:	f000 fa3f 	bl	8001774 <Si468x_read_reply>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <Si468x_load_init+0x4c>)
 80012fc:	701a      	strb	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0800dac8 	.word	0x0800dac8
 8001308:	200001a8 	.word	0x200001a8
 800130c:	20003510 	.word	0x20003510
 8001310:	200011a8 	.word	0x200011a8

08001314 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800131a:	2101      	movs	r1, #1
 800131c:	4830      	ldr	r0, [pc, #192]	@ (80013e0 <Si468x_bootloader_load_host+0xcc>)
 800131e:	f002 fc1f 	bl	8003b60 <send_debug_msg>
	Si468x_load_init();
 8001322:	f7ff ffcd 	bl	80012c0 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001326:	f241 63a4 	movw	r3, #5796	@ 0x16a4
 800132a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800132e:	2204      	movs	r2, #4
 8001330:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001334:	2200      	movs	r2, #0
 8001336:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800133a:	2200      	movs	r2, #0
 800133c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001340:	2200      	movs	r2, #0
 8001342:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	e03e      	b.n	80013c8 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 800134a:	2300      	movs	r3, #0
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	e014      	b.n	800137a <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001350:	88ba      	ldrh	r2, [r7, #4]
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	4924      	ldr	r1, [pc, #144]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 8001356:	fba1 1303 	umull	r1, r3, r1, r3
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	441a      	add	r2, r3
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	3304      	adds	r3, #4
 800136c:	491f      	ldr	r1, [pc, #124]	@ (80013ec <Si468x_bootloader_load_host+0xd8>)
 800136e:	5c89      	ldrb	r1, [r1, r2]
 8001370:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001372:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	3301      	adds	r3, #1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	4a1a      	ldr	r2, [pc, #104]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	88ba      	ldrh	r2, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3e1      	bcc.n	8001350 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4a16      	ldr	r2, [pc, #88]	@ (80013e8 <Si468x_bootloader_load_host+0xd4>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	3304      	adds	r3, #4
 800139a:	b29b      	uxth	r3, r3
 800139c:	4911      	ldr	r1, [pc, #68]	@ (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f9c6 	bl	8001730 <Si468x_write_command>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <Si468x_bootloader_load_host+0xdc>)
 80013aa:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f006 fa77 	bl	80078a0 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80013b2:	4910      	ldr	r1, [pc, #64]	@ (80013f4 <Si468x_bootloader_load_host+0xe0>)
 80013b4:	2005      	movs	r0, #5
 80013b6:	f000 f9dd 	bl	8001774 <Si468x_read_reply>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <Si468x_bootloader_load_host+0xdc>)
 80013c0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	3301      	adds	r3, #1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d9bd      	bls.n	800134a <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 80013ce:	2101      	movs	r1, #1
 80013d0:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <Si468x_bootloader_load_host+0xe4>)
 80013d2:	f002 fbc5 	bl	8003b60 <send_debug_msg>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800dae0 	.word	0x0800dae0
 80013e4:	200001a8 	.word	0x200001a8
 80013e8:	aaaaaaab 	.word	0xaaaaaaab
 80013ec:	080350bc 	.word	0x080350bc
 80013f0:	20003510 	.word	0x20003510
 80013f4:	200011a8 	.word	0x200011a8
 80013f8:	0800db1c 	.word	0x0800db1c

080013fc <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001404:	2101      	movs	r1, #1
 8001406:	4845      	ldr	r0, [pc, #276]	@ (800151c <Si468x_firmware_load_flash+0x120>)
 8001408:	f002 fbaa 	bl	8003b60 <send_debug_msg>
	Si468x_load_init();
 800140c:	f7ff ff58 	bl	80012c0 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001410:	4b43      	ldr	r3, [pc, #268]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001412:	2205      	movs	r2, #5
 8001414:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001416:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800141c:	4b40      	ldr	r3, [pc, #256]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800141e:	2200      	movs	r2, #0
 8001420:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001424:	2200      	movs	r2, #0
 8001426:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800142e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001438:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001442:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0e1b      	lsrs	r3, r3, #24
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 800144c:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800144e:	2100      	movs	r1, #0
 8001450:	4834      	ldr	r0, [pc, #208]	@ (8001524 <Si468x_firmware_load_flash+0x128>)
 8001452:	f002 fb85 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 8001456:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	2210      	movs	r2, #16
 800145c:	4932      	ldr	r1, [pc, #200]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f00c f9f0 	bl	800d844 <itoa>
 8001464:	4603      	mov	r3, r0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fb79 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001470:	795b      	ldrb	r3, [r3, #5]
 8001472:	2210      	movs	r2, #16
 8001474:	492c      	ldr	r1, [pc, #176]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 8001476:	4618      	mov	r0, r3
 8001478:	f00c f9e4 	bl	800d844 <itoa>
 800147c:	4603      	mov	r3, r0
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fb6d 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 8001488:	799b      	ldrb	r3, [r3, #6]
 800148a:	2210      	movs	r2, #16
 800148c:	4926      	ldr	r1, [pc, #152]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 800148e:	4618      	mov	r0, r3
 8001490:	f00c f9d8 	bl	800d844 <itoa>
 8001494:	4603      	mov	r3, r0
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f002 fb61 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014a0:	79db      	ldrb	r3, [r3, #7]
 80014a2:	2210      	movs	r2, #16
 80014a4:	4920      	ldr	r1, [pc, #128]	@ (8001528 <Si468x_firmware_load_flash+0x12c>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00c f9cc 	bl	800d844 <itoa>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2101      	movs	r1, #1
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fb55 	bl	8003b60 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014be:	2200      	movs	r2, #0
 80014c0:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80014ce:	4914      	ldr	r1, [pc, #80]	@ (8001520 <Si468x_firmware_load_flash+0x124>)
 80014d0:	200c      	movs	r0, #12
 80014d2:	f000 f92d 	bl	8001730 <Si468x_write_command>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <Si468x_firmware_load_flash+0x130>)
 80014dc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f006 f9de 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014e4:	4912      	ldr	r1, [pc, #72]	@ (8001530 <Si468x_firmware_load_flash+0x134>)
 80014e6:	2005      	movs	r0, #5
 80014e8:	f000 f944 	bl	8001774 <Si468x_read_reply>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <Si468x_firmware_load_flash+0x130>)
 80014f2:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <Si468x_firmware_load_flash+0x134>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001500:	2101      	movs	r1, #1
 8001502:	480c      	ldr	r0, [pc, #48]	@ (8001534 <Si468x_firmware_load_flash+0x138>)
 8001504:	f002 fb2c 	bl	8003b60 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001508:	e003      	b.n	8001512 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800150a:	2101      	movs	r1, #1
 800150c:	480a      	ldr	r0, [pc, #40]	@ (8001538 <Si468x_firmware_load_flash+0x13c>)
 800150e:	f002 fb27 	bl	8003b60 <send_debug_msg>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	0800db3c 	.word	0x0800db3c
 8001520:	200001a8 	.word	0x200001a8
 8001524:	0800db78 	.word	0x0800db78
 8001528:	200034d0 	.word	0x200034d0
 800152c:	20003510 	.word	0x20003510
 8001530:	200011a8 	.word	0x200011a8
 8001534:	0800db8c 	.word	0x0800db8c
 8001538:	0800db9c 	.word	0x0800db9c

0800153c <Si468x_boot>:

void Si468x_boot()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 8001540:	2101      	movs	r1, #1
 8001542:	4816      	ldr	r0, [pc, #88]	@ (800159c <Si468x_boot+0x60>)
 8001544:	f002 fb0c 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <Si468x_boot+0x64>)
 800154a:	2207      	movs	r2, #7
 800154c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <Si468x_boot+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <Si468x_boot+0x64>)
 8001556:	2002      	movs	r0, #2
 8001558:	f000 f8ea 	bl	8001730 <Si468x_write_command>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <Si468x_boot+0x68>)
 8001562:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f006 f99b 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800156a:	490f      	ldr	r1, [pc, #60]	@ (80015a8 <Si468x_boot+0x6c>)
 800156c:	2005      	movs	r0, #5
 800156e:	f000 f901 	bl	8001774 <Si468x_read_reply>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <Si468x_boot+0x68>)
 8001578:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <Si468x_boot+0x6c>)
 800157c:	78db      	ldrb	r3, [r3, #3]
 800157e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001582:	2bc0      	cmp	r3, #192	@ 0xc0
 8001584:	d104      	bne.n	8001590 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 8001586:	2101      	movs	r1, #1
 8001588:	4808      	ldr	r0, [pc, #32]	@ (80015ac <Si468x_boot+0x70>)
 800158a:	f002 fae9 	bl	8003b60 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 800158e:	e003      	b.n	8001598 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001590:	2101      	movs	r1, #1
 8001592:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <Si468x_boot+0x74>)
 8001594:	f002 fae4 	bl	8003b60 <send_debug_msg>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0800dbb8 	.word	0x0800dbb8
 80015a0:	200001a8 	.word	0x200001a8
 80015a4:	20003510 	.word	0x20003510
 80015a8:	200011a8 	.word	0x200011a8
 80015ac:	0800dbf4 	.word	0x0800dbf4
 80015b0:	0800dc10 	.word	0x0800dc10

080015b4 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 80015be:	1df9      	adds	r1, r7, #7
 80015c0:	2364      	movs	r3, #100	@ 0x64
 80015c2:	2201      	movs	r2, #1
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <Si468x_write_single_byte+0x20>)
 80015c6:	f00a f944 	bl	800b852 <HAL_SPI_Transmit>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20006f00 	.word	0x20006f00

080015d8 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 80015e2:	1df9      	adds	r1, r7, #7
 80015e4:	2364      	movs	r3, #100	@ 0x64
 80015e6:	2201      	movs	r2, #1
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <Si468x_read_single_byte+0x20>)
 80015ea:	f00a fa6e 	bl	800baca <HAL_SPI_Receive>
	return data_buffer;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20006f00 	.word	0x20006f00

080015fc <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	81fb      	strh	r3, [r7, #14]
 800160a:	e01f      	b.n	800164c <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 800160c:	4916      	ldr	r1, [pc, #88]	@ (8001668 <Si468x_wait_for_CTS+0x6c>)
 800160e:	2001      	movs	r0, #1
 8001610:	f000 f8b0 	bl	8001774 <Si468x_read_reply>
		if(rd_reply.cts)
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <Si468x_wait_for_CTS+0x70>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00e      	beq.n	8001640 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <Si468x_wait_for_CTS+0x70>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001630:	2101      	movs	r1, #1
 8001632:	480f      	ldr	r0, [pc, #60]	@ (8001670 <Si468x_wait_for_CTS+0x74>)
 8001634:	f002 fa94 	bl	8003b60 <send_debug_msg>
				return COMMAND_ERROR;
 8001638:	2320      	movs	r3, #32
 800163a:	e010      	b.n	800165e <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 800163c:	2300      	movs	r3, #0
 800163e:	e00e      	b.n	800165e <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f006 f92d 	bl	80078a0 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	3301      	adds	r3, #1
 800164a:	81fb      	strh	r3, [r7, #14]
 800164c:	89fa      	ldrh	r2, [r7, #14]
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3db      	bcc.n	800160c <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 8001654:	2101      	movs	r1, #1
 8001656:	4807      	ldr	r0, [pc, #28]	@ (8001674 <Si468x_wait_for_CTS+0x78>)
 8001658:	f002 fa82 	bl	8003b60 <send_debug_msg>
	return TIMEOUT;
 800165c:	2308      	movs	r3, #8
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200011a8 	.word	0x200011a8
 800166c:	200035fc 	.word	0x200035fc
 8001670:	0800dc24 	.word	0x0800dc24
 8001674:	0800dc4c 	.word	0x0800dc4c

08001678 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001688:	2200      	movs	r2, #0
 800168a:	2110      	movs	r1, #16
 800168c:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <Si468x_write_multiple+0x4c>)
 800168e:	f006 ff0b 	bl	80084a8 <HAL_GPIO_WritePin>
	while(len--)
 8001692:	e009      	b.n	80016a8 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	81fa      	strh	r2, [r7, #14]
 800169a:	461a      	mov	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff86 	bl	80015b4 <Si468x_write_single_byte>
	while(len--)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	1e5a      	subs	r2, r3, #1
 80016ac:	80fa      	strh	r2, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80016b2:	2201      	movs	r2, #1
 80016b4:	2110      	movs	r1, #16
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <Si468x_write_multiple+0x4c>)
 80016b8:	f006 fef6 	bl	80084a8 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800

080016c8 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 80016d8:	2201      	movs	r2, #1
 80016da:	2110      	movs	r1, #16
 80016dc:	4813      	ldr	r0, [pc, #76]	@ (800172c <Si468x_read_multiple+0x64>)
 80016de:	f006 fee3 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f006 f8dc 	bl	80078a0 <HAL_Delay>
	CS_PIN_LOW;
 80016e8:	2200      	movs	r2, #0
 80016ea:	2110      	movs	r1, #16
 80016ec:	480f      	ldr	r0, [pc, #60]	@ (800172c <Si468x_read_multiple+0x64>)
 80016ee:	f006 fedb 	bl	80084a8 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff ff5e 	bl	80015b4 <Si468x_write_single_byte>
	while(len--)
 80016f8:	e009      	b.n	800170e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	81fa      	strh	r2, [r7, #14]
 8001700:	461a      	mov	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	189c      	adds	r4, r3, r2
 8001706:	f7ff ff67 	bl	80015d8 <Si468x_read_single_byte>
 800170a:	4603      	mov	r3, r0
 800170c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	80fa      	strh	r2, [r7, #6]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001718:	2201      	movs	r2, #1
 800171a:	2110      	movs	r1, #16
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <Si468x_read_multiple+0x64>)
 800171e:	f006 fec3 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	40020800 	.word	0x40020800

08001730 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800173c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001740:	f7ff ff5c 	bl	80015fc <Si468x_wait_for_CTS>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <Si468x_write_command+0x24>
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b20      	cmp	r3, #32
 8001752:	d10a      	bne.n	800176a <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff8d 	bl	8001678 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800175e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001762:	f7ff ff4b 	bl	80015fc <Si468x_wait_for_CTS>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff9f 	bl	80016c8 <Si468x_read_multiple>
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <Si468x_read_reply+0x28>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <Si468x_read_reply+0x2c>)
 8001790:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200011a8 	.word	0x200011a8
 80017a0:	200035fc 	.word	0x200035fc

080017a4 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 80017a8:	2101      	movs	r1, #1
 80017aa:	4833      	ldr	r0, [pc, #204]	@ (8001878 <Si468x_get_sys_state+0xd4>)
 80017ac:	f002 f9d8 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 80017b0:	4b32      	ldr	r3, [pc, #200]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017b2:	2209      	movs	r2, #9
 80017b4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80017bc:	492f      	ldr	r1, [pc, #188]	@ (800187c <Si468x_get_sys_state+0xd8>)
 80017be:	2002      	movs	r0, #2
 80017c0:	f7ff ffb6 	bl	8001730 <Si468x_write_command>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <Si468x_get_sys_state+0xdc>)
 80017ca:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f006 f867 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80017d2:	492c      	ldr	r1, [pc, #176]	@ (8001884 <Si468x_get_sys_state+0xe0>)
 80017d4:	2005      	movs	r0, #5
 80017d6:	f7ff ffcd 	bl	8001774 <Si468x_read_reply>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <Si468x_get_sys_state+0xdc>)
 80017e0:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 80017e2:	2100      	movs	r1, #0
 80017e4:	4828      	ldr	r0, [pc, #160]	@ (8001888 <Si468x_get_sys_state+0xe4>)
 80017e6:	f002 f9bb 	bl	8003b60 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <Si468x_get_sys_state+0xe0>)
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d83a      	bhi.n	8001868 <Si468x_get_sys_state+0xc4>
 80017f2:	a201      	add	r2, pc, #4	@ (adr r2, 80017f8 <Si468x_get_sys_state+0x54>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001819 	.word	0x08001819
 80017fc:	08001823 	.word	0x08001823
 8001800:	0800182d 	.word	0x0800182d
 8001804:	08001837 	.word	0x08001837
 8001808:	08001841 	.word	0x08001841
 800180c:	0800184b 	.word	0x0800184b
 8001810:	08001855 	.word	0x08001855
 8001814:	0800185f 	.word	0x0800185f
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001818:	2101      	movs	r1, #1
 800181a:	481c      	ldr	r0, [pc, #112]	@ (800188c <Si468x_get_sys_state+0xe8>)
 800181c:	f002 f9a0 	bl	8003b60 <send_debug_msg>
			break;
 8001820:	e027      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001822:	2101      	movs	r1, #1
 8001824:	481a      	ldr	r0, [pc, #104]	@ (8001890 <Si468x_get_sys_state+0xec>)
 8001826:	f002 f99b 	bl	8003b60 <send_debug_msg>
			break;
 800182a:	e022      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 800182c:	2101      	movs	r1, #1
 800182e:	4819      	ldr	r0, [pc, #100]	@ (8001894 <Si468x_get_sys_state+0xf0>)
 8001830:	f002 f996 	bl	8003b60 <send_debug_msg>
			break;
 8001834:	e01d      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001836:	2101      	movs	r1, #1
 8001838:	4817      	ldr	r0, [pc, #92]	@ (8001898 <Si468x_get_sys_state+0xf4>)
 800183a:	f002 f991 	bl	8003b60 <send_debug_msg>
			break;
 800183e:	e018      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 8001840:	2101      	movs	r1, #1
 8001842:	4816      	ldr	r0, [pc, #88]	@ (800189c <Si468x_get_sys_state+0xf8>)
 8001844:	f002 f98c 	bl	8003b60 <send_debug_msg>
			break;
 8001848:	e013      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 800184a:	2101      	movs	r1, #1
 800184c:	4814      	ldr	r0, [pc, #80]	@ (80018a0 <Si468x_get_sys_state+0xfc>)
 800184e:	f002 f987 	bl	8003b60 <send_debug_msg>
			break;
 8001852:	e00e      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 8001854:	2101      	movs	r1, #1
 8001856:	4813      	ldr	r0, [pc, #76]	@ (80018a4 <Si468x_get_sys_state+0x100>)
 8001858:	f002 f982 	bl	8003b60 <send_debug_msg>
			break;
 800185c:	e009      	b.n	8001872 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 800185e:	2101      	movs	r1, #1
 8001860:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <Si468x_get_sys_state+0x104>)
 8001862:	f002 f97d 	bl	8003b60 <send_debug_msg>
			break;
 8001866:	e004      	b.n	8001872 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 8001868:	2101      	movs	r1, #1
 800186a:	4810      	ldr	r0, [pc, #64]	@ (80018ac <Si468x_get_sys_state+0x108>)
 800186c:	f002 f978 	bl	8003b60 <send_debug_msg>
			break;
 8001870:	bf00      	nop
	}
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	0800dc5c 	.word	0x0800dc5c
 800187c:	200001a8 	.word	0x200001a8
 8001880:	20003510 	.word	0x20003510
 8001884:	200011a8 	.word	0x200011a8
 8001888:	0800dc98 	.word	0x0800dc98
 800188c:	0800dca4 	.word	0x0800dca4
 8001890:	0800dcbc 	.word	0x0800dcbc
 8001894:	0800dcd4 	.word	0x0800dcd4
 8001898:	0800dcec 	.word	0x0800dcec
 800189c:	0800dd14 	.word	0x0800dd14
 80018a0:	0800dd30 	.word	0x0800dd30
 80018a4:	0800dd48 	.word	0x0800dd48
 80018a8:	0800dd64 	.word	0x0800dd64
 80018ac:	0800dd7c 	.word	0x0800dd7c

080018b0 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 80018b6:	2101      	movs	r1, #1
 80018b8:	482c      	ldr	r0, [pc, #176]	@ (800196c <Si468x_get_part_info+0xbc>)
 80018ba:	f002 f951 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 80018be:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018c0:	2208      	movs	r2, #8
 80018c2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80018c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80018ca:	4929      	ldr	r1, [pc, #164]	@ (8001970 <Si468x_get_part_info+0xc0>)
 80018cc:	2002      	movs	r0, #2
 80018ce:	f7ff ff2f 	bl	8001730 <Si468x_write_command>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <Si468x_get_part_info+0xc4>)
 80018d8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f005 ffe0 	bl	80078a0 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fe67 	bl	80015b4 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 80018e6:	4924      	ldr	r1, [pc, #144]	@ (8001978 <Si468x_get_part_info+0xc8>)
 80018e8:	200a      	movs	r0, #10
 80018ea:	f7ff ff43 	bl	8001774 <Si468x_read_reply>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <Si468x_get_part_info+0xc4>)
 80018f4:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 80018f6:	2100      	movs	r1, #0
 80018f8:	4820      	ldr	r0, [pc, #128]	@ (800197c <Si468x_get_part_info+0xcc>)
 80018fa:	f002 f931 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	220a      	movs	r2, #10
 8001904:	491e      	ldr	r1, [pc, #120]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001906:	4618      	mov	r0, r3
 8001908:	f00b ff9c 	bl	800d844 <itoa>
 800190c:	4603      	mov	r3, r0
 800190e:	2101      	movs	r1, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f002 f925 	bl	8003b60 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001916:	2100      	movs	r1, #0
 8001918:	481a      	ldr	r0, [pc, #104]	@ (8001984 <Si468x_get_part_info+0xd4>)
 800191a:	f002 f921 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001920:	795b      	ldrb	r3, [r3, #5]
 8001922:	220a      	movs	r2, #10
 8001924:	4916      	ldr	r1, [pc, #88]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001926:	4618      	mov	r0, r3
 8001928:	f00b ff8c 	bl	800d844 <itoa>
 800192c:	4603      	mov	r3, r0
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f002 f915 	bl	8003b60 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001936:	2100      	movs	r1, #0
 8001938:	4813      	ldr	r0, [pc, #76]	@ (8001988 <Si468x_get_part_info+0xd8>)
 800193a:	f002 f911 	bl	8003b60 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001940:	7a5b      	ldrb	r3, [r3, #9]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <Si468x_get_part_info+0xc8>)
 8001948:	7a12      	ldrb	r2, [r2, #8]
 800194a:	4413      	add	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	220a      	movs	r2, #10
 8001952:	490b      	ldr	r1, [pc, #44]	@ (8001980 <Si468x_get_part_info+0xd0>)
 8001954:	4618      	mov	r0, r3
 8001956:	f00b ff75 	bl	800d844 <itoa>
 800195a:	4603      	mov	r3, r0
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f002 f8fe 	bl	8003b60 <send_debug_msg>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	0800dd90 	.word	0x0800dd90
 8001970:	200001a8 	.word	0x200001a8
 8001974:	20003510 	.word	0x20003510
 8001978:	200011a8 	.word	0x200011a8
 800197c:	0800ddcc 	.word	0x0800ddcc
 8001980:	200034d0 	.word	0x200034d0
 8001984:	0800dddc 	.word	0x0800dddc
 8001988:	0800dde8 	.word	0x0800dde8

0800198c <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	80fb      	strh	r3, [r7, #6]
 8001998:	4613      	mov	r3, r2
 800199a:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 800199c:	2101      	movs	r1, #1
 800199e:	4832      	ldr	r0, [pc, #200]	@ (8001a68 <Si468x_set_property+0xdc>)
 80019a0:	f002 f8de 	bl	8003b60 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 80019a4:	2100      	movs	r1, #0
 80019a6:	4831      	ldr	r0, [pc, #196]	@ (8001a6c <Si468x_set_property+0xe0>)
 80019a8:	f002 f8da 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2210      	movs	r2, #16
 80019b0:	492f      	ldr	r1, [pc, #188]	@ (8001a70 <Si468x_set_property+0xe4>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00b ff46 	bl	800d844 <itoa>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2101      	movs	r1, #1
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 f8cf 	bl	8003b60 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 80019c2:	2100      	movs	r1, #0
 80019c4:	482b      	ldr	r0, [pc, #172]	@ (8001a74 <Si468x_set_property+0xe8>)
 80019c6:	f002 f8cb 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	2210      	movs	r2, #16
 80019ce:	4928      	ldr	r1, [pc, #160]	@ (8001a70 <Si468x_set_property+0xe4>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00b ff37 	bl	800d844 <itoa>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 f8c0 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <Si468x_set_property+0xec>)
 80019e2:	2213      	movs	r2, #19
 80019e4:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <Si468x_set_property+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <Si468x_set_property+0xec>)
 80019f2:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <Si468x_set_property+0xec>)
 80019fe:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a06:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a12:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001a14:	4918      	ldr	r1, [pc, #96]	@ (8001a78 <Si468x_set_property+0xec>)
 8001a16:	2006      	movs	r0, #6
 8001a18:	f7ff fe8a 	bl	8001730 <Si468x_write_command>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <Si468x_set_property+0xf0>)
 8001a22:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f005 ff3b 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001a2a:	4915      	ldr	r1, [pc, #84]	@ (8001a80 <Si468x_set_property+0xf4>)
 8001a2c:	2005      	movs	r0, #5
 8001a2e:	f7ff fea1 	bl	8001774 <Si468x_read_reply>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <Si468x_set_property+0xf0>)
 8001a38:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f825 	bl	8001a8c <Si468x_get_property>
 8001a42:	4603      	mov	r3, r0
 8001a44:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001a46:	89fa      	ldrh	r2, [r7, #14]
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d104      	bne.n	8001a58 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <Si468x_set_property+0xf8>)
 8001a52:	f002 f885 	bl	8003b60 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 8001a56:	e003      	b.n	8001a60 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <Si468x_set_property+0xfc>)
 8001a5c:	f002 f880 	bl	8003b60 <send_debug_msg>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	0800ddf8 	.word	0x0800ddf8
 8001a6c:	0800de38 	.word	0x0800de38
 8001a70:	200034d0 	.word	0x200034d0
 8001a74:	0800de48 	.word	0x0800de48
 8001a78:	200001a8 	.word	0x200001a8
 8001a7c:	20003510 	.word	0x20003510
 8001a80:	200011a8 	.word	0x200011a8
 8001a84:	0800de64 	.word	0x0800de64
 8001a88:	0800de80 	.word	0x0800de80

08001a8c <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a96:	2101      	movs	r1, #1
 8001a98:	482a      	ldr	r0, [pc, #168]	@ (8001b44 <Si468x_get_property+0xb8>)
 8001a9a:	f002 f861 	bl	8003b60 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4829      	ldr	r0, [pc, #164]	@ (8001b48 <Si468x_get_property+0xbc>)
 8001aa2:	f002 f85d 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	4928      	ldr	r1, [pc, #160]	@ (8001b4c <Si468x_get_property+0xc0>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00b fec9 	bl	800d844 <itoa>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f852 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001abc:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001abe:	2214      	movs	r2, #20
 8001ac0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ace:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ada:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001adc:	491c      	ldr	r1, [pc, #112]	@ (8001b50 <Si468x_get_property+0xc4>)
 8001ade:	2004      	movs	r0, #4
 8001ae0:	f7ff fe26 	bl	8001730 <Si468x_write_command>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <Si468x_get_property+0xc8>)
 8001aea:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f005 fed7 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001af2:	4919      	ldr	r1, [pc, #100]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001af4:	2006      	movs	r0, #6
 8001af6:	f7ff fe3d 	bl	8001774 <Si468x_read_reply>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <Si468x_get_property+0xc8>)
 8001b00:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001b02:	2100      	movs	r1, #0
 8001b04:	4815      	ldr	r0, [pc, #84]	@ (8001b5c <Si468x_get_property+0xd0>)
 8001b06:	f002 f82b 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b0c:	795b      	ldrb	r3, [r3, #5]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b12:	7912      	ldrb	r2, [r2, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	2210      	movs	r2, #16
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <Si468x_get_property+0xc0>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00b fe92 	bl	800d844 <itoa>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2101      	movs	r1, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 f81b 	bl	8003b60 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <Si468x_get_property+0xcc>)
 8001b34:	7912      	ldrb	r2, [r2, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	b29b      	uxth	r3, r3
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	0800de98 	.word	0x0800de98
 8001b48:	0800de38 	.word	0x0800de38
 8001b4c:	200034d0 	.word	0x200034d0
 8001b50:	200001a8 	.word	0x200001a8
 8001b54:	20003510 	.word	0x20003510
 8001b58:	200011a8 	.word	0x200011a8
 8001b5c:	0800ded4 	.word	0x0800ded4

08001b60 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t ant_cap)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	460a      	mov	r2, r1
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001b70:	2101      	movs	r1, #1
 8001b72:	4858      	ldr	r0, [pc, #352]	@ (8001cd4 <Si468x_dab_tune_freq+0x174>)
 8001b74:	f001 fff4 	bl	8003b60 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4857      	ldr	r0, [pc, #348]	@ (8001cd8 <Si468x_dab_tune_freq+0x178>)
 8001b7c:	f001 fff0 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <Si468x_dab_tune_freq+0x17c>)
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	220a      	movs	r2, #10
 8001b8a:	4955      	ldr	r1, [pc, #340]	@ (8001ce0 <Si468x_dab_tune_freq+0x180>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00b fe59 	bl	800d844 <itoa>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 ffe2 	bl	8003b60 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4851      	ldr	r0, [pc, #324]	@ (8001ce4 <Si468x_dab_tune_freq+0x184>)
 8001ba0:	f001 ffde 	bl	8003b60 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001ba4:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001ba6:	22b0      	movs	r2, #176	@ 0xb0
 8001ba8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001baa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	70da      	strb	r2, [r3, #3]

	switch(ant_cap)
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d012      	beq.n	8001be8 <Si468x_dab_tune_freq+0x88>
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d117      	bne.n	8001bf6 <Si468x_dab_tune_freq+0x96>
	{
		case USE_ANT_CAP:
			//use ANT_CAP value from table of best ANTCAP values
			dab_spi_tx_buffer[4] = ant_cap_values[channel] & 0xFF;	//antcap [7:0]
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4a48      	ldr	r2, [pc, #288]	@ (8001cec <Si468x_dab_tune_freq+0x18c>)
 8001bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b45      	ldr	r3, [pc, #276]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bd2:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap_values[channel] >> 8;	//antcap [15:8]
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4a45      	ldr	r2, [pc, #276]	@ (8001cec <Si468x_dab_tune_freq+0x18c>)
 8001bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001be4:	715a      	strb	r2, [r3, #5]
			break;
 8001be6:	e011      	b.n	8001c0c <Si468x_dab_tune_freq+0xac>
		case NOT_USE_ANT_CAP:
			//use algorithm of automatic setting ant_cap value based on tuning values written to Si4684
			dab_spi_tx_buffer[4] = 0x00;	//antcap [7:0]
 8001be8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = 0x00;	//antcap [15:8]
 8001bee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	715a      	strb	r2, [r3, #5]
			break;
 8001bf4:	e00a      	b.n	8001c0c <Si468x_dab_tune_freq+0xac>
		default:
			//use ant_cap value as argument of this function
			dab_spi_tx_buffer[4] = ant_cap & 0xFF;	//antcap [7:0]
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001bfc:	711a      	strb	r2, [r3, #4]
			dab_spi_tx_buffer[5] = ant_cap >> 8;	//antcap [15:8]
 8001bfe:	88bb      	ldrh	r3, [r7, #4]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b38      	ldr	r3, [pc, #224]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001c08:	715a      	strb	r2, [r3, #5]
			break;
 8001c0a:	bf00      	nop
	}

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001c0c:	4936      	ldr	r1, [pc, #216]	@ (8001ce8 <Si468x_dab_tune_freq+0x188>)
 8001c0e:	2006      	movs	r0, #6
 8001c10:	f7ff fd8e 	bl	8001730 <Si468x_write_command>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c1a:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001c1c:	4935      	ldr	r1, [pc, #212]	@ (8001cf4 <Si468x_dab_tune_freq+0x194>)
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fda8 	bl	8001774 <Si468x_read_reply>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c2a:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001c2c:	4b32      	ldr	r3, [pc, #200]	@ (8001cf8 <Si468x_dab_tune_freq+0x198>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <Si468x_dab_tune_freq+0xe2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	482f      	ldr	r0, [pc, #188]	@ (8001cfc <Si468x_dab_tune_freq+0x19c>)
 8001c3e:	f001 ff8f 	bl	8003b60 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	81fb      	strh	r3, [r7, #14]
 8001c46:	e03a      	b.n	8001cbe <Si468x_dab_tune_freq+0x15e>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001c48:	492a      	ldr	r1, [pc, #168]	@ (8001cf4 <Si468x_dab_tune_freq+0x194>)
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff fd92 	bl	8001774 <Si468x_read_reply>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <Si468x_dab_tune_freq+0x190>)
 8001c56:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001c58:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <Si468x_dab_tune_freq+0x198>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01c      	beq.n	8001ca0 <Si468x_dab_tune_freq+0x140>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001c66:	2100      	movs	r1, #0
 8001c68:	4825      	ldr	r0, [pc, #148]	@ (8001d00 <Si468x_dab_tune_freq+0x1a0>)
 8001c6a:	f001 ff79 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	220a      	movs	r2, #10
 8001c72:	491b      	ldr	r1, [pc, #108]	@ (8001ce0 <Si468x_dab_tune_freq+0x180>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00b fde5 	bl	800d844 <itoa>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 ff6e 	bl	8003b60 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001c84:	2101      	movs	r1, #1
 8001c86:	481f      	ldr	r0, [pc, #124]	@ (8001d04 <Si468x_dab_tune_freq+0x1a4>)
 8001c88:	f001 ff6a 	bl	8003b60 <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <Si468x_dab_tune_freq+0x1a8>)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <Si468x_dab_tune_freq+0x17c>)
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <Si468x_dab_tune_freq+0x1a8>)
 8001c9c:	6093      	str	r3, [r2, #8]
			break;
 8001c9e:	e014      	b.n	8001cca <Si468x_dab_tune_freq+0x16a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d103      	bne.n	8001cb2 <Si468x_dab_tune_freq+0x152>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001caa:	2101      	movs	r1, #1
 8001cac:	4817      	ldr	r0, [pc, #92]	@ (8001d0c <Si468x_dab_tune_freq+0x1ac>)
 8001cae:	f001 ff57 	bl	8003b60 <send_debug_msg>
		}
		HAL_Delay(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f005 fdf4 	bl	80078a0 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	81fb      	strh	r3, [r7, #14]
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d9bf      	bls.n	8001c48 <Si468x_dab_tune_freq+0xe8>
	}
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	0800df8c 	.word	0x0800df8c
 8001cd8:	0800dfc8 	.word	0x0800dfc8
 8001cdc:	20003514 	.word	0x20003514
 8001ce0:	200034d0 	.word	0x200034d0
 8001ce4:	0800df48 	.word	0x0800df48
 8001ce8:	200001a8 	.word	0x200001a8
 8001cec:	08036760 	.word	0x08036760
 8001cf0:	20003510 	.word	0x20003510
 8001cf4:	200011a8 	.word	0x200011a8
 8001cf8:	200035fc 	.word	0x200035fc
 8001cfc:	0800db8c 	.word	0x0800db8c
 8001d00:	0800dfd4 	.word	0x0800dfd4
 8001d04:	0800dff0 	.word	0x0800dff0
 8001d08:	20004bc4 	.word	0x20004bc4
 8001d0c:	0800dff8 	.word	0x0800dff8

08001d10 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d1a:	22b2      	movs	r2, #178	@ 0xb2
 8001d1c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001d1e:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d20:	221a      	movs	r2, #26
 8001d22:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001d24:	4921      	ldr	r1, [pc, #132]	@ (8001dac <Si468x_dab_digrad_status+0x9c>)
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff fd02 	bl	8001730 <Si468x_write_command>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <Si468x_dab_digrad_status+0xa0>)
 8001d32:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f005 fdb3 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001d3a:	491e      	ldr	r1, [pc, #120]	@ (8001db4 <Si468x_dab_digrad_status+0xa4>)
 8001d3c:	2028      	movs	r0, #40	@ 0x28
 8001d3e:	f7ff fd19 	bl	8001774 <Si468x_read_reply>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <Si468x_dab_digrad_status+0xa0>)
 8001d48:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <Si468x_dab_digrad_status+0xa8>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d019      	beq.n	8001d8c <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001d58:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <Si468x_dab_digrad_status+0xa4>)
 8001d5c:	4615      	mov	r5, r2
 8001d5e:	1d1c      	adds	r4, r3, #4
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d6c:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d72:	78db      	ldrb	r3, [r3, #3]
 8001d74:	2b14      	cmp	r3, #20
 8001d76:	d902      	bls.n	8001d7e <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001d78:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d80:	795b      	ldrb	r3, [r3, #5]
 8001d82:	2b36      	cmp	r3, #54	@ 0x36
 8001d84:	d902      	bls.n	8001d8c <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001d86:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <Si468x_dab_digrad_status+0xac>)
 8001d90:	461c      	mov	r4, r3
 8001d92:	4615      	mov	r5, r2
 8001d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001da0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	200001a8 	.word	0x200001a8
 8001db0:	20003510 	.word	0x20003510
 8001db4:	200011a8 	.word	0x200011a8
 8001db8:	200035fc 	.word	0x200035fc
 8001dbc:	200035d4 	.word	0x200035d4

08001dc0 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001dca:	2300      	movs	r3, #0
 8001dcc:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001dce:	2300      	movs	r3, #0
 8001dd0:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001dd6:	4ba1      	ldr	r3, [pc, #644]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001ddc:	4b9f      	ldr	r3, [pc, #636]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001de2:	499e      	ldr	r1, [pc, #632]	@ (800205c <Si468x_dab_get_digital_service_list+0x29c>)
 8001de4:	2002      	movs	r0, #2
 8001de6:	f7ff fca3 	bl	8001730 <Si468x_write_command>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b9c      	ldr	r3, [pc, #624]	@ (8002060 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001df0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f005 fd54 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001df8:	499a      	ldr	r1, [pc, #616]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001dfa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dfe:	f7ff fcb9 	bl	8001774 <Si468x_read_reply>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b96      	ldr	r3, [pc, #600]	@ (8002060 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001e08:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4896      	ldr	r0, [pc, #600]	@ (8002068 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e0e:	f001 fea7 	bl	8003b60 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001e12:	4b96      	ldr	r3, [pc, #600]	@ (800206c <Si468x_dab_get_digital_service_list+0x2ac>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001e20:	2101      	movs	r1, #1
 8001e22:	4893      	ldr	r0, [pc, #588]	@ (8002070 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001e24:	f001 fe9c 	bl	8003b60 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001e28:	4b8e      	ldr	r3, [pc, #568]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e30:	795b      	ldrb	r3, [r3, #5]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001e3a:	4b8a      	ldr	r3, [pc, #552]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e3c:	7a1b      	ldrb	r3, [r3, #8]
 8001e3e:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	773b      	strb	r3, [r7, #28]
 8001e44:	e24e      	b.n	80022e4 <Si468x_dab_get_digital_service_list+0x524>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001e46:	7f3b      	ldrb	r3, [r7, #28]
 8001e48:	4a8a      	ldr	r2, [pc, #552]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e4a:	7892      	ldrb	r2, [r2, #2]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a89      	ldr	r2, [pc, #548]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e50:	6892      	ldr	r2, [r2, #8]
 8001e52:	4989      	ldr	r1, [pc, #548]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e54:	2034      	movs	r0, #52	@ 0x34
 8001e56:	fb00 f303 	mul.w	r3, r0, r3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3324      	adds	r3, #36	@ 0x24
 8001e5e:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001e60:	7f3b      	ldrb	r3, [r7, #28]
 8001e62:	4a84      	ldr	r2, [pc, #528]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e64:	7892      	ldrb	r2, [r2, #2]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a82      	ldr	r2, [pc, #520]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e6a:	7b10      	ldrb	r0, [r2, #12]
 8001e6c:	4a82      	ldr	r2, [pc, #520]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e6e:	2134      	movs	r1, #52	@ 0x34
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3328      	adds	r3, #40	@ 0x28
 8001e78:	4602      	mov	r2, r0
 8001e7a:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001e7c:	7fba      	ldrb	r2, [r7, #30]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	f103 0210 	add.w	r2, r3, #16
 8001e8a:	7f7b      	ldrb	r3, [r7, #29]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a74      	ldr	r2, [pc, #464]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001e92:	5cd2      	ldrb	r2, [r2, r3]
 8001e94:	7f3b      	ldrb	r3, [r7, #28]
 8001e96:	4977      	ldr	r1, [pc, #476]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001e98:	7889      	ldrb	r1, [r1, #2]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f002 0201 	and.w	r2, r2, #1
 8001ea0:	b2d0      	uxtb	r0, r2
 8001ea2:	4a75      	ldr	r2, [pc, #468]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ea4:	2134      	movs	r1, #52	@ 0x34
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3314      	adds	r3, #20
 8001eae:	4602      	mov	r2, r0
 8001eb0:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001eb2:	7fba      	ldrb	r2, [r7, #30]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	f103 0211 	add.w	r2, r3, #17
 8001ec0:	7f7b      	ldrb	r3, [r7, #29]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a67      	ldr	r2, [pc, #412]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ec8:	5cd2      	ldrb	r2, [r2, r3]
 8001eca:	7f3b      	ldrb	r3, [r7, #28]
 8001ecc:	4969      	ldr	r1, [pc, #420]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001ece:	7889      	ldrb	r1, [r1, #2]
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f002 020f 	and.w	r2, r2, #15
 8001ed6:	b2d0      	uxtb	r0, r2
 8001ed8:	4a67      	ldr	r2, [pc, #412]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001eda:	2134      	movs	r1, #52	@ 0x34
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3329      	adds	r3, #41	@ 0x29
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001ee8:	7f3b      	ldrb	r3, [r7, #28]
 8001eea:	4a62      	ldr	r2, [pc, #392]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001eec:	7892      	ldrb	r2, [r2, #2]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a61      	ldr	r2, [pc, #388]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ef2:	2134      	movs	r1, #52	@ 0x34
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3314      	adds	r3, #20
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d017      	beq.n	8001f32 <Si468x_dab_get_digital_service_list+0x172>
		{
			services_count++;
 8001f02:	7fbb      	ldrb	r3, [r7, #30]
 8001f04:	3301      	adds	r3, #1
 8001f06:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001f08:	7f3b      	ldrb	r3, [r7, #28]
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f0c:	7892      	ldrb	r2, [r2, #2]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f12:	2134      	movs	r1, #52	@ 0x34
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3329      	adds	r3, #41	@ 0x29
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	7f7b      	ldrb	r3, [r7, #29]
 8001f20:	4413      	add	r3, r2
 8001f22:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001f24:	7f3b      	ldrb	r3, [r7, #28]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	77fb      	strb	r3, [r7, #31]
			continue;
 8001f30:	e1d5      	b.n	80022de <Si468x_dab_get_digital_service_list+0x51e>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001f32:	7fba      	ldrb	r2, [r7, #30]
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	f103 0210 	add.w	r2, r3, #16
 8001f40:	7f7b      	ldrb	r3, [r7, #29]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	4a47      	ldr	r2, [pc, #284]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	105b      	asrs	r3, r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	7f3b      	ldrb	r3, [r7, #28]
 8001f50:	4948      	ldr	r1, [pc, #288]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f52:	7889      	ldrb	r1, [r1, #2]
 8001f54:	440b      	add	r3, r1
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	b2d0      	uxtb	r0, r2
 8001f5c:	4a46      	ldr	r2, [pc, #280]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f5e:	2134      	movs	r1, #52	@ 0x34
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3315      	adds	r3, #21
 8001f68:	4602      	mov	r2, r0
 8001f6a:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001f6c:	7f3b      	ldrb	r3, [r7, #28]
 8001f6e:	4a41      	ldr	r2, [pc, #260]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f70:	7892      	ldrb	r2, [r2, #2]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a40      	ldr	r2, [pc, #256]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f76:	2134      	movs	r1, #52	@ 0x34
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3314      	adds	r3, #20
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <Si468x_dab_get_digital_service_list+0x1cc>
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d078      	beq.n	800207c <Si468x_dab_get_digital_service_list+0x2bc>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001f8a:	e0ec      	b.n	8002166 <Si468x_dab_get_digital_service_list+0x3a6>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001f8c:	7fba      	ldrb	r2, [r7, #30]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	f103 020c 	add.w	r2, r3, #12
 8001f9a:	7f7b      	ldrb	r3, [r7, #29]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a30      	ldr	r2, [pc, #192]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	7fba      	ldrb	r2, [r7, #30]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	f103 020d 	add.w	r2, r3, #13
 8001fb4:	7f7b      	ldrb	r3, [r7, #29]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a2a      	ldr	r2, [pc, #168]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001fc4:	4419      	add	r1, r3
 8001fc6:	7f3b      	ldrb	r3, [r7, #28]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001fca:	7892      	ldrb	r2, [r2, #2]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4608      	mov	r0, r1
 8001fd0:	4a29      	ldr	r2, [pc, #164]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fd2:	2134      	movs	r1, #52	@ 0x34
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3318      	adds	r3, #24
 8001fdc:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001fde:	7fba      	ldrb	r2, [r7, #30]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f103 020d 	add.w	r2, r3, #13
 8001fec:	7f7b      	ldrb	r3, [r7, #29]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001ff4:	5cd2      	ldrb	r2, [r2, r3]
 8001ff6:	7f3b      	ldrb	r3, [r7, #28]
 8001ff8:	491e      	ldr	r1, [pc, #120]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001ffa:	7889      	ldrb	r1, [r1, #2]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	0912      	lsrs	r2, r2, #4
 8002000:	b2d0      	uxtb	r0, r2
 8002002:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002004:	2134      	movs	r1, #52	@ 0x34
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	331c      	adds	r3, #28
 800200e:	4602      	mov	r2, r0
 8002010:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8002012:	7f3b      	ldrb	r3, [r7, #28]
 8002014:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8002016:	7892      	ldrb	r2, [r2, #2]
 8002018:	4413      	add	r3, r2
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 800201c:	2134      	movs	r1, #52	@ 0x34
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	331c      	adds	r3, #28
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	0319      	lsls	r1, r3, #12
 800202a:	7f3b      	ldrb	r3, [r7, #28]
 800202c:	4a11      	ldr	r2, [pc, #68]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 800202e:	7892      	ldrb	r2, [r2, #2]
 8002030:	4413      	add	r3, r2
 8002032:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 8002034:	2034      	movs	r0, #52	@ 0x34
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	4413      	add	r3, r2
 800203c:	3318      	adds	r3, #24
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	7f3b      	ldrb	r3, [r7, #28]
 8002042:	480c      	ldr	r0, [pc, #48]	@ (8002074 <Si468x_dab_get_digital_service_list+0x2b4>)
 8002044:	7880      	ldrb	r0, [r0, #2]
 8002046:	4403      	add	r3, r0
 8002048:	440a      	add	r2, r1
 800204a:	490b      	ldr	r1, [pc, #44]	@ (8002078 <Si468x_dab_get_digital_service_list+0x2b8>)
 800204c:	2034      	movs	r0, #52	@ 0x34
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	440b      	add	r3, r1
 8002054:	3320      	adds	r3, #32
 8002056:	601a      	str	r2, [r3, #0]
				break;
 8002058:	e085      	b.n	8002166 <Si468x_dab_get_digital_service_list+0x3a6>
 800205a:	bf00      	nop
 800205c:	200001a8 	.word	0x200001a8
 8002060:	20003510 	.word	0x20003510
 8002064:	200011a8 	.word	0x200011a8
 8002068:	0800e058 	.word	0x0800e058
 800206c:	200035fc 	.word	0x200035fc
 8002070:	0800db8c 	.word	0x0800db8c
 8002074:	20004bc4 	.word	0x20004bc4
 8002078:	20003774 	.word	0x20003774
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 800207c:	7fba      	ldrb	r2, [r7, #30]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f103 020c 	add.w	r2, r3, #12
 800208a:	7f7b      	ldrb	r3, [r7, #29]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	4aa0      	ldr	r2, [pc, #640]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	4619      	mov	r1, r3
 8002096:	7fba      	ldrb	r2, [r7, #30]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	f103 020d 	add.w	r2, r3, #13
 80020a4:	7f7b      	ldrb	r3, [r7, #29]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	4a9a      	ldr	r2, [pc, #616]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	4419      	add	r1, r3
 80020b2:	7fba      	ldrb	r2, [r7, #30]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	f103 020e 	add.w	r2, r3, #14
 80020c0:	7f7b      	ldrb	r3, [r7, #29]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	4a93      	ldr	r2, [pc, #588]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020d0:	4419      	add	r1, r3
 80020d2:	7f3b      	ldrb	r3, [r7, #28]
 80020d4:	4a90      	ldr	r2, [pc, #576]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80020d6:	7892      	ldrb	r2, [r2, #2]
 80020d8:	4413      	add	r3, r2
 80020da:	4608      	mov	r0, r1
 80020dc:	4a8f      	ldr	r2, [pc, #572]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80020de:	2134      	movs	r1, #52	@ 0x34
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3318      	adds	r3, #24
 80020e8:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80020ea:	7fba      	ldrb	r2, [r7, #30]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	f103 020e 	add.w	r2, r3, #14
 80020f8:	7f7b      	ldrb	r3, [r7, #29]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	4a85      	ldr	r2, [pc, #532]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 8002100:	5cd2      	ldrb	r2, [r2, r3]
 8002102:	7f3b      	ldrb	r3, [r7, #28]
 8002104:	4984      	ldr	r1, [pc, #528]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002106:	7889      	ldrb	r1, [r1, #2]
 8002108:	440b      	add	r3, r1
 800210a:	0912      	lsrs	r2, r2, #4
 800210c:	b2d0      	uxtb	r0, r2
 800210e:	4a83      	ldr	r2, [pc, #524]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002110:	2134      	movs	r1, #52	@ 0x34
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	331c      	adds	r3, #28
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 800211e:	7f3b      	ldrb	r3, [r7, #28]
 8002120:	4a7d      	ldr	r2, [pc, #500]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002122:	7892      	ldrb	r2, [r2, #2]
 8002124:	4413      	add	r3, r2
 8002126:	4a7d      	ldr	r2, [pc, #500]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002128:	2134      	movs	r1, #52	@ 0x34
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	331c      	adds	r3, #28
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	0519      	lsls	r1, r3, #20
 8002136:	7f3b      	ldrb	r3, [r7, #28]
 8002138:	4a77      	ldr	r2, [pc, #476]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 800213a:	7892      	ldrb	r2, [r2, #2]
 800213c:	4413      	add	r3, r2
 800213e:	4a77      	ldr	r2, [pc, #476]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002140:	2034      	movs	r0, #52	@ 0x34
 8002142:	fb00 f303 	mul.w	r3, r0, r3
 8002146:	4413      	add	r3, r2
 8002148:	3318      	adds	r3, #24
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	7f3b      	ldrb	r3, [r7, #28]
 800214e:	4872      	ldr	r0, [pc, #456]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002150:	7880      	ldrb	r0, [r0, #2]
 8002152:	4403      	add	r3, r0
 8002154:	440a      	add	r2, r1
 8002156:	4971      	ldr	r1, [pc, #452]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002158:	2034      	movs	r0, #52	@ 0x34
 800215a:	fb00 f303 	mul.w	r3, r0, r3
 800215e:	440b      	add	r3, r1
 8002160:	3320      	adds	r3, #32
 8002162:	601a      	str	r2, [r3, #0]
				break;
 8002164:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 8002166:	7fba      	ldrb	r2, [r7, #30]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	f103 0214 	add.w	r2, r3, #20
 8002174:	7f7b      	ldrb	r3, [r7, #29]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	4a66      	ldr	r2, [pc, #408]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03f      	beq.n	8002202 <Si468x_dab_get_digital_service_list+0x442>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002182:	2300      	movs	r3, #0
 8002184:	76fb      	strb	r3, [r7, #27]
 8002186:	e038      	b.n	80021fa <Si468x_dab_get_digital_service_list+0x43a>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 8002188:	7efb      	ldrb	r3, [r7, #27]
 800218a:	f103 0114 	add.w	r1, r3, #20
 800218e:	7fba      	ldrb	r2, [r7, #30]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	18ca      	adds	r2, r1, r3
 800219a:	7f7b      	ldrb	r3, [r7, #29]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	18d1      	adds	r1, r2, r3
 80021a0:	7f3b      	ldrb	r3, [r7, #28]
 80021a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021a4:	7892      	ldrb	r2, [r2, #2]
 80021a6:	441a      	add	r2, r3
 80021a8:	7efb      	ldrb	r3, [r7, #27]
 80021aa:	485a      	ldr	r0, [pc, #360]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 80021ac:	5c44      	ldrb	r4, [r0, r1]
 80021ae:	495b      	ldr	r1, [pc, #364]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021b0:	2034      	movs	r0, #52	@ 0x34
 80021b2:	fb00 f202 	mul.w	r2, r0, r2
 80021b6:	440a      	add	r2, r1
 80021b8:	4413      	add	r3, r2
 80021ba:	4622      	mov	r2, r4
 80021bc:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80021be:	7f3b      	ldrb	r3, [r7, #28]
 80021c0:	4a55      	ldr	r2, [pc, #340]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021c2:	7892      	ldrb	r2, [r2, #2]
 80021c4:	441a      	add	r2, r3
 80021c6:	7efb      	ldrb	r3, [r7, #27]
 80021c8:	4954      	ldr	r1, [pc, #336]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021ca:	2034      	movs	r0, #52	@ 0x34
 80021cc:	fb00 f202 	mul.w	r2, r0, r2
 80021d0:	440a      	add	r2, r1
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b86      	cmp	r3, #134	@ 0x86
 80021d8:	d10c      	bne.n	80021f4 <Si468x_dab_get_digital_service_list+0x434>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 80021da:	7f3b      	ldrb	r3, [r7, #28]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80021de:	7892      	ldrb	r2, [r2, #2]
 80021e0:	441a      	add	r2, r3
 80021e2:	7efb      	ldrb	r3, [r7, #27]
 80021e4:	494d      	ldr	r1, [pc, #308]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80021e6:	2034      	movs	r0, #52	@ 0x34
 80021e8:	fb00 f202 	mul.w	r2, r0, r2
 80021ec:	440a      	add	r2, r1
 80021ee:	4413      	add	r3, r2
 80021f0:	226f      	movs	r2, #111	@ 0x6f
 80021f2:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80021f4:	7efb      	ldrb	r3, [r7, #27]
 80021f6:	3301      	adds	r3, #1
 80021f8:	76fb      	strb	r3, [r7, #27]
 80021fa:	7efb      	ldrb	r3, [r7, #27]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d9c3      	bls.n	8002188 <Si468x_dab_get_digital_service_list+0x3c8>
 8002200:	e026      	b.n	8002250 <Si468x_dab_get_digital_service_list+0x490>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 8002202:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <Si468x_dab_get_digital_service_list+0x560>)
 8002204:	463c      	mov	r4, r7
 8002206:	461d      	mov	r5, r3
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	7023      	strb	r3, [r4, #0]
 8002210:	f107 0311 	add.w	r3, r7, #17
 8002214:	2200      	movs	r2, #0
 8002216:	801a      	strh	r2, [r3, #0]
 8002218:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800221a:	2300      	movs	r3, #0
 800221c:	76bb      	strb	r3, [r7, #26]
 800221e:	e014      	b.n	800224a <Si468x_dab_get_digital_service_list+0x48a>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 8002220:	7eb9      	ldrb	r1, [r7, #26]
 8002222:	7f3b      	ldrb	r3, [r7, #28]
 8002224:	4a3c      	ldr	r2, [pc, #240]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002226:	7892      	ldrb	r2, [r2, #2]
 8002228:	441a      	add	r2, r3
 800222a:	7ebb      	ldrb	r3, [r7, #26]
 800222c:	3120      	adds	r1, #32
 800222e:	4439      	add	r1, r7
 8002230:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8002234:	4939      	ldr	r1, [pc, #228]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002236:	2034      	movs	r0, #52	@ 0x34
 8002238:	fb00 f202 	mul.w	r2, r0, r2
 800223c:	440a      	add	r2, r1
 800223e:	4413      	add	r3, r2
 8002240:	4622      	mov	r2, r4
 8002242:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002244:	7ebb      	ldrb	r3, [r7, #26]
 8002246:	3301      	adds	r3, #1
 8002248:	76bb      	strb	r3, [r7, #26]
 800224a:	7ebb      	ldrb	r3, [r7, #26]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d9e7      	bls.n	8002220 <Si468x_dab_get_digital_service_list+0x460>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 8002250:	2300      	movs	r3, #0
 8002252:	767b      	strb	r3, [r7, #25]
 8002254:	e032      	b.n	80022bc <Si468x_dab_get_digital_service_list+0x4fc>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002256:	7f3b      	ldrb	r3, [r7, #28]
 8002258:	4a2f      	ldr	r2, [pc, #188]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 800225a:	7892      	ldrb	r2, [r2, #2]
 800225c:	441a      	add	r2, r3
 800225e:	7e7b      	ldrb	r3, [r7, #25]
 8002260:	492e      	ldr	r1, [pc, #184]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 8002262:	201a      	movs	r0, #26
 8002264:	fb00 f202 	mul.w	r2, r0, r2
 8002268:	4413      	add	r3, r2
 800226a:	3314      	adds	r3, #20
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	440b      	add	r3, r1
 8002270:	2200      	movs	r2, #0
 8002272:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 8002274:	7fba      	ldrb	r2, [r7, #30]
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8002282:	7f7b      	ldrb	r3, [r7, #29]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <Si468x_dab_get_digital_service_list+0x554>)
 800228a:	5cd1      	ldrb	r1, [r2, r3]
 800228c:	7f3b      	ldrb	r3, [r7, #28]
 800228e:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002290:	7892      	ldrb	r2, [r2, #2]
 8002292:	441a      	add	r2, r3
 8002294:	7e7b      	ldrb	r3, [r7, #25]
 8002296:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800229a:	b2cc      	uxtb	r4, r1
 800229c:	491f      	ldr	r1, [pc, #124]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 800229e:	201a      	movs	r0, #26
 80022a0:	fb00 f202 	mul.w	r2, r0, r2
 80022a4:	4413      	add	r3, r2
 80022a6:	3314      	adds	r3, #20
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	4622      	mov	r2, r4
 80022ae:	709a      	strb	r2, [r3, #2]
			components_count++;
 80022b0:	7f7b      	ldrb	r3, [r7, #29]
 80022b2:	3301      	adds	r3, #1
 80022b4:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80022b6:	7e7b      	ldrb	r3, [r7, #25]
 80022b8:	3301      	adds	r3, #1
 80022ba:	767b      	strb	r3, [r7, #25]
 80022bc:	7f3b      	ldrb	r3, [r7, #28]
 80022be:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022c0:	7892      	ldrb	r2, [r2, #2]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a15      	ldr	r2, [pc, #84]	@ (800231c <Si468x_dab_get_digital_service_list+0x55c>)
 80022c6:	2134      	movs	r1, #52	@ 0x34
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3329      	adds	r3, #41	@ 0x29
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	7e7a      	ldrb	r2, [r7, #25]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3be      	bcc.n	8002256 <Si468x_dab_get_digital_service_list+0x496>
		}
		services_count++;
 80022d8:	7fbb      	ldrb	r3, [r7, #30]
 80022da:	3301      	adds	r3, #1
 80022dc:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 80022de:	7f3b      	ldrb	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	773b      	strb	r3, [r7, #28]
 80022e4:	7f3a      	ldrb	r2, [r7, #28]
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f4ff adac 	bcc.w	8001e46 <Si468x_dab_get_digital_service_list+0x86>
	}

	dab_management.total_services += number_of_services;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022fa:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 80022fe:	789a      	ldrb	r2, [r3, #2]
 8002300:	7ffb      	ldrb	r3, [r7, #31]
 8002302:	4413      	add	r3, r2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <Si468x_dab_get_digital_service_list+0x558>)
 8002308:	709a      	strb	r2, [r3, #2]
}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bdb0      	pop	{r4, r5, r7, pc}
 8002312:	bf00      	nop
 8002314:	200011a8 	.word	0x200011a8
 8002318:	20004bc4 	.word	0x20004bc4
 800231c:	20003774 	.word	0x20003774
 8002320:	0800e094 	.word	0x0800e094

08002324 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 800232e:	2101      	movs	r1, #1
 8002330:	482d      	ldr	r0, [pc, #180]	@ (80023e8 <Si468x_dab_start_digital_service+0xc4>)
 8002332:	f001 fc15 	bl	8003b60 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8002336:	4b2d      	ldr	r3, [pc, #180]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002338:	2281      	movs	r2, #129	@ 0x81
 800233a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800233c:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 8002342:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002344:	2200      	movs	r2, #0
 8002346:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002348:	4b28      	ldr	r3, [pc, #160]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800234a:	2200      	movs	r2, #0
 800234c:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002354:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800235e:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002368:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0e1b      	lsrs	r3, r3, #24
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002372:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800237a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002384:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800238e:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	0e1b      	lsrs	r3, r3, #24
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 8002398:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800239a:	4914      	ldr	r1, [pc, #80]	@ (80023ec <Si468x_dab_start_digital_service+0xc8>)
 800239c:	200c      	movs	r0, #12
 800239e:	f7ff f9c7 	bl	8001730 <Si468x_write_command>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <Si468x_dab_start_digital_service+0xcc>)
 80023a8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f005 fa78 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80023b0:	4910      	ldr	r1, [pc, #64]	@ (80023f4 <Si468x_dab_start_digital_service+0xd0>)
 80023b2:	2005      	movs	r0, #5
 80023b4:	f7ff f9de 	bl	8001774 <Si468x_read_reply>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <Si468x_dab_start_digital_service+0xcc>)
 80023be:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <Si468x_dab_start_digital_service+0xd4>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80023ce:	2101      	movs	r1, #1
 80023d0:	480a      	ldr	r0, [pc, #40]	@ (80023fc <Si468x_dab_start_digital_service+0xd8>)
 80023d2:	f001 fbc5 	bl	8003b60 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 80023d6:	e003      	b.n	80023e0 <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 80023d8:	2101      	movs	r1, #1
 80023da:	4809      	ldr	r0, [pc, #36]	@ (8002400 <Si468x_dab_start_digital_service+0xdc>)
 80023dc:	f001 fbc0 	bl	8003b60 <send_debug_msg>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	0800e0a8 	.word	0x0800e0a8
 80023ec:	200001a8 	.word	0x200001a8
 80023f0:	20003510 	.word	0x20003510
 80023f4:	200011a8 	.word	0x200011a8
 80023f8:	200035fc 	.word	0x200035fc
 80023fc:	0800db8c 	.word	0x0800db8c
 8002400:	0800e0e4 	.word	0x0800e0e4

08002404 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800240e:	2101      	movs	r1, #1
 8002410:	484a      	ldr	r0, [pc, #296]	@ (800253c <Si468x_dab_get_ensemble_info+0x138>)
 8002412:	f001 fba5 	bl	8003b60 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002416:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 8002418:	22b4      	movs	r2, #180	@ 0xb4
 800241a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800241c:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 800241e:	2200      	movs	r2, #0
 8002420:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002422:	4947      	ldr	r1, [pc, #284]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 8002424:	2002      	movs	r0, #2
 8002426:	f7ff f983 	bl	8001730 <Si468x_write_command>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	4b45      	ldr	r3, [pc, #276]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002430:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8002432:	2002      	movs	r0, #2
 8002434:	f005 fa34 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002438:	4943      	ldr	r1, [pc, #268]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 800243a:	2015      	movs	r0, #21
 800243c:	f7ff f99a 	bl	8001774 <Si468x_read_reply>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002446:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002448:	e012      	b.n	8002470 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 800244a:	493d      	ldr	r1, [pc, #244]	@ (8002540 <Si468x_dab_get_ensemble_info+0x13c>)
 800244c:	2002      	movs	r0, #2
 800244e:	f7ff f96f 	bl	8001730 <Si468x_write_command>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 8002458:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 800245a:	2002      	movs	r0, #2
 800245c:	f005 fa20 	bl	80078a0 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002460:	4939      	ldr	r1, [pc, #228]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002462:	2015      	movs	r0, #21
 8002464:	f7ff f986 	bl	8001774 <Si468x_read_reply>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <Si468x_dab_get_ensemble_info+0x140>)
 800246e:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002472:	799b      	ldrb	r3, [r3, #6]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0e8      	beq.n	800244a <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 8002478:	4b34      	ldr	r3, [pc, #208]	@ (800254c <Si468x_dab_get_ensemble_info+0x148>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002486:	2101      	movs	r1, #1
 8002488:	4831      	ldr	r0, [pc, #196]	@ (8002550 <Si468x_dab_get_ensemble_info+0x14c>)
 800248a:	f001 fb69 	bl	8003b60 <send_debug_msg>
		return 0;
 800248e:	2300      	movs	r3, #0
 8002490:	e050      	b.n	8002534 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002492:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 8002494:	795b      	ldrb	r3, [r3, #5]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	4a2b      	ldr	r2, [pc, #172]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 800249a:	7912      	ldrb	r2, [r2, #4]
 800249c:	4413      	add	r3, r2
 800249e:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d041      	beq.n	800252a <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80024a6:	2101      	movs	r1, #1
 80024a8:	482a      	ldr	r0, [pc, #168]	@ (8002554 <Si468x_dab_get_ensemble_info+0x150>)
 80024aa:	f001 fb59 	bl	8003b60 <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	b291      	uxth	r1, r2
 80024b6:	4a29      	ldr	r2, [pc, #164]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024b8:	015b      	lsls	r3, r3, #5
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 80024c0:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	4618      	mov	r0, r3
 80024c6:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	4924      	ldr	r1, [pc, #144]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024cc:	0143      	lsls	r3, r0, #5
 80024ce:	440b      	add	r3, r1
 80024d0:	3318      	adds	r3, #24
 80024d2:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024d6:	785b      	ldrb	r3, [r3, #1]
 80024d8:	4618      	mov	r0, r3
 80024da:	4b1f      	ldr	r3, [pc, #124]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024dc:	7b19      	ldrb	r1, [r3, #12]
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 80024e0:	0143      	lsls	r3, r0, #5
 80024e2:	4413      	add	r3, r2
 80024e4:	331c      	adds	r3, #28
 80024e6:	460a      	mov	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	e011      	b.n	8002514 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	1d9a      	adds	r2, r3, #6
 80024f4:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	461c      	mov	r4, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4912      	ldr	r1, [pc, #72]	@ (8002548 <Si468x_dab_get_ensemble_info+0x144>)
 80024fe:	5c88      	ldrb	r0, [r1, r2]
 8002500:	4916      	ldr	r1, [pc, #88]	@ (800255c <Si468x_dab_get_ensemble_info+0x158>)
 8002502:	0162      	lsls	r2, r4, #5
 8002504:	440a      	add	r2, r1
 8002506:	4413      	add	r3, r2
 8002508:	3302      	adds	r3, #2
 800250a:	4602      	mov	r2, r0
 800250c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	3301      	adds	r3, #1
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d9ea      	bls.n	80024f0 <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 800251a:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	3301      	adds	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <Si468x_dab_get_ensemble_info+0x154>)
 8002524:	705a      	strb	r2, [r3, #1]
			return 1;
 8002526:	2301      	movs	r3, #1
 8002528:	e004      	b.n	8002534 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 800252a:	2101      	movs	r1, #1
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <Si468x_dab_get_ensemble_info+0x15c>)
 800252e:	f001 fb17 	bl	8003b60 <send_debug_msg>
			return 0;
 8002532:	2300      	movs	r3, #0
		}
	}
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	0800e104 	.word	0x0800e104
 8002540:	200001a8 	.word	0x200001a8
 8002544:	20003510 	.word	0x20003510
 8002548:	200011a8 	.word	0x200011a8
 800254c:	200035fc 	.word	0x200035fc
 8002550:	0800db8c 	.word	0x0800db8c
 8002554:	0800e140 	.word	0x0800e140
 8002558:	20004bc4 	.word	0x20004bc4
 800255c:	20003634 	.word	0x20003634
 8002560:	0800e150 	.word	0x0800e150

08002564 <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	b099      	sub	sp, #100	@ 0x64
 8002568:	af0a      	add	r7, sp, #40	@ 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 800256a:	2101      	movs	r1, #1
 800256c:	4887      	ldr	r0, [pc, #540]	@ (800278c <Si468x_dab_full_scan+0x228>)
 800256e:	f001 faf7 	bl	8003b60 <send_debug_msg>
	dab_management.total_services = 0;
 8002572:	4b87      	ldr	r3, [pc, #540]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 8002578:	4b85      	ldr	r3, [pc, #532]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800257a:	2200      	movs	r2, #0
 800257c:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 800257e:	4b84      	ldr	r3, [pc, #528]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002580:	2200      	movs	r2, #0
 8002582:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t fic_q_timeout = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t _scan_cancel_flag = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800259c:	e09f      	b.n	80026de <Si468x_dab_full_scan+0x17a>
	{
		_touch_coordinates = Touch_read();
 800259e:	f004 fddb 	bl	8007158 <Touch_read>
 80025a2:	4603      	mov	r3, r0
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80025a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d90c      	bls.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025ae:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80025b2:	d808      	bhi.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025b6:	2bc3      	cmp	r3, #195	@ 0xc3
 80025b8:	d905      	bls.n	80025c6 <Si468x_dab_full_scan+0x62>
 80025ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025bc:	2bea      	cmp	r3, #234	@ 0xea
 80025be:	d802      	bhi.n	80025c6 <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		}

		if(_scan_cancel_flag)
 80025c6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 808f 	bne.w	80026ee <Si468x_dab_full_scan+0x18a>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 80025d0:	2306      	movs	r3, #6
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 80025d6:	2396      	movs	r3, #150	@ 0x96
 80025d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		Si468x_dab_tune_freq(freq_index, USE_ANT_CAP);
 80025dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80025e0:	2101      	movs	r1, #1
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fabc 	bl	8001b60 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 80025e8:	463b      	mov	r3, r7
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fb90 	bl	8001d10 <Si468x_dab_digrad_status>
			valid_timeout--;
 80025f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025f4:	3b01      	subs	r3, #1
 80025f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if(!valid_timeout)
 80025fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002602:	2101      	movs	r1, #1
 8002604:	4863      	ldr	r0, [pc, #396]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 8002606:	f001 faab 	bl	8003b60 <send_debug_msg>
				break;
 800260a:	e010      	b.n	800262e <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800260c:	2032      	movs	r0, #50	@ 0x32
 800260e:	f005 f947 	bl	80078a0 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 8002612:	4b61      	ldr	r3, [pc, #388]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0e3      	beq.n	80025e8 <Si468x_dab_full_scan+0x84>
 8002620:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0dc      	beq.n	80025e8 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 800262e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002632:	2b00      	cmp	r3, #0
 8002634:	d018      	beq.n	8002668 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002636:	463b      	mov	r3, r7
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fb69 	bl	8001d10 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 800263e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002642:	3b01      	subs	r3, #1
 8002644:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				if(!fic_q_timeout)
 8002648:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002650:	2101      	movs	r1, #1
 8002652:	4850      	ldr	r0, [pc, #320]	@ (8002794 <Si468x_dab_full_scan+0x230>)
 8002654:	f001 fa84 	bl	8003b60 <send_debug_msg>
					break;
 8002658:	e006      	b.n	8002668 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 800265a:	2032      	movs	r0, #50	@ 0x32
 800265c:	f005 f920 	bl	80078a0 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 8002660:	4b4d      	ldr	r3, [pc, #308]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	2b31      	cmp	r3, #49	@ 0x31
 8002666:	d9e6      	bls.n	8002636 <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 8002668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01e      	beq.n	80026ae <Si468x_dab_full_scan+0x14a>
 8002670:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <Si468x_dab_full_scan+0x116>
 8002678:	e019      	b.n	80026ae <Si468x_dab_full_scan+0x14a>
		{
			do
			{
				Si468x_dab_get_event_status();
 800267a:	f000 fb11 	bl	8002ca0 <Si468x_dab_get_event_status>
				HAL_Delay(10);
 800267e:	200a      	movs	r0, #10
 8002680:	f005 f90e 	bl	80078a0 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 8002684:	4b45      	ldr	r3, [pc, #276]	@ (800279c <Si468x_dab_full_scan+0x238>)
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f3      	beq.n	800267a <Si468x_dab_full_scan+0x116>
 8002692:	4b42      	ldr	r3, [pc, #264]	@ (800279c <Si468x_dab_full_scan+0x238>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ec      	bne.n	800267a <Si468x_dab_full_scan+0x116>

			if(Si468x_dab_get_ensemble_info())
 80026a0:	f7ff feb0 	bl	8002404 <Si468x_dab_get_ensemble_info>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <Si468x_dab_full_scan+0x14a>
			{
				Si468x_dab_get_digital_service_list();
 80026aa:	f7ff fb89 	bl	8001dc0 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 80026ae:	4e3a      	ldr	r6, [pc, #232]	@ (8002798 <Si468x_dab_full_scan+0x234>)
 80026b0:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 80026b2:	ac06      	add	r4, sp, #24
 80026b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80026ba:	466d      	mov	r5, sp
 80026bc:	f106 0410 	add.w	r4, r6, #16
 80026c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80026d0:	f002 f832 	bl	8004738 <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80026d4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80026d8:	3301      	adds	r3, #1
 80026da:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80026de:	4b2c      	ldr	r3, [pc, #176]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 80026e0:	7b5b      	ldrb	r3, [r3, #13]
 80026e2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80026e6:	429a      	cmp	r2, r3
 80026e8:	f4ff af59 	bcc.w	800259e <Si468x_dab_full_scan+0x3a>
 80026ec:	e000      	b.n	80026f0 <Si468x_dab_full_scan+0x18c>
			break;
 80026ee:	bf00      	nop
	}

	if(_scan_cancel_flag)
 80026f0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <Si468x_dab_full_scan+0x1a4>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 80026f8:	2101      	movs	r1, #1
 80026fa:	4829      	ldr	r0, [pc, #164]	@ (80027a0 <Si468x_dab_full_scan+0x23c>)
 80026fc:	f001 fa30 	bl	8003b60 <send_debug_msg>
		restore_from_eeprom();
 8002700:	f000 fe32 	bl	8003368 <restore_from_eeprom>
		return 0;
 8002704:	2300      	movs	r3, #0
 8002706:	e1e8      	b.n	8002ada <Si468x_dab_full_scan+0x576>
	}

	else
	{
		eeprom_clear_scanning_data();
 8002708:	f003 f92a 	bl	8005960 <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 800270c:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <Si468x_dab_full_scan+0x1d8>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 8002714:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002716:	7819      	ldrb	r1, [r3, #0]
 8002718:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <Si468x_dab_full_scan+0x240>)
 800271e:	4822      	ldr	r0, [pc, #136]	@ (80027a8 <Si468x_dab_full_scan+0x244>)
 8002720:	f003 f982 	bl	8005a28 <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 8002724:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002726:	2200      	movs	r2, #0
 8002728:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 800272c:	2200      	movs	r2, #0
 800272e:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8002730:	2201      	movs	r2, #1
 8002732:	491e      	ldr	r1, [pc, #120]	@ (80027ac <Si468x_dab_full_scan+0x248>)
 8002734:	f240 1007 	movw	r0, #263	@ 0x107
 8002738:	f003 f8ea 	bl	8005910 <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 800273c:	2100      	movs	r1, #0
 800273e:	481c      	ldr	r0, [pc, #112]	@ (80027b0 <Si468x_dab_full_scan+0x24c>)
 8002740:	f001 fa0e 	bl	8003b60 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <Si468x_dab_full_scan+0x22c>)
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	220a      	movs	r2, #10
 800274a:	491a      	ldr	r1, [pc, #104]	@ (80027b4 <Si468x_dab_full_scan+0x250>)
 800274c:	4618      	mov	r0, r3
 800274e:	f00b f879 	bl	800d844 <itoa>
 8002752:	4603      	mov	r3, r0
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f001 fa02 	bl	8003b60 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800275c:	2101      	movs	r1, #1
 800275e:	4816      	ldr	r0, [pc, #88]	@ (80027b8 <Si468x_dab_full_scan+0x254>)
 8002760:	f001 f9fe 	bl	8003b60 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 8002764:	2100      	movs	r1, #0
 8002766:	4815      	ldr	r0, [pc, #84]	@ (80027bc <Si468x_dab_full_scan+0x258>)
 8002768:	f001 f9fa 	bl	8003b60 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 800276c:	2100      	movs	r1, #0
 800276e:	4814      	ldr	r0, [pc, #80]	@ (80027c0 <Si468x_dab_full_scan+0x25c>)
 8002770:	f001 f9f6 	bl	8003b60 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 8002774:	2100      	movs	r1, #0
 8002776:	4813      	ldr	r0, [pc, #76]	@ (80027c4 <Si468x_dab_full_scan+0x260>)
 8002778:	f001 f9f2 	bl	8003b60 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 800277c:	2101      	movs	r1, #1
 800277e:	4812      	ldr	r0, [pc, #72]	@ (80027c8 <Si468x_dab_full_scan+0x264>)
 8002780:	f001 f9ee 	bl	8003b60 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800278a:	e07c      	b.n	8002886 <Si468x_dab_full_scan+0x322>
 800278c:	0800e164 	.word	0x0800e164
 8002790:	20004bc4 	.word	0x20004bc4
 8002794:	0800e150 	.word	0x0800e150
 8002798:	200035d4 	.word	0x200035d4
 800279c:	20003600 	.word	0x20003600
 80027a0:	0800e1a0 	.word	0x0800e1a0
 80027a4:	20003634 	.word	0x20003634
 80027a8:	20003774 	.word	0x20003774
 80027ac:	20004bc8 	.word	0x20004bc8
 80027b0:	0800e1b4 	.word	0x0800e1b4
 80027b4:	200034d0 	.word	0x200034d0
 80027b8:	0800e1c8 	.word	0x0800e1c8
 80027bc:	0800e1fc 	.word	0x0800e1fc
 80027c0:	0800e208 	.word	0x0800e208
 80027c4:	0800e21c 	.word	0x0800e21c
 80027c8:	0800e22c 	.word	0x0800e22c
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80027cc:	2100      	movs	r1, #0
 80027ce:	48c5      	ldr	r0, [pc, #788]	@ (8002ae4 <Si468x_dab_full_scan+0x580>)
 80027d0:	f001 f9c6 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80027d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027d8:	3301      	adds	r3, #1
 80027da:	220a      	movs	r2, #10
 80027dc:	49c2      	ldr	r1, [pc, #776]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80027de:	4618      	mov	r0, r3
 80027e0:	f00b f830 	bl	800d844 <itoa>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 f9b9 	bl	8003b60 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 80027ee:	2100      	movs	r1, #0
 80027f0:	48be      	ldr	r0, [pc, #760]	@ (8002aec <Si468x_dab_full_scan+0x588>)
 80027f2:	f001 f9b5 	bl	8003b60 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80027f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027fa:	015b      	lsls	r3, r3, #5
 80027fc:	4abc      	ldr	r2, [pc, #752]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 80027fe:	4413      	add	r3, r2
 8002800:	3302      	adds	r3, #2
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f001 f9ab 	bl	8003b60 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 800280a:	2100      	movs	r1, #0
 800280c:	48b5      	ldr	r0, [pc, #724]	@ (8002ae4 <Si468x_dab_full_scan+0x580>)
 800280e:	f001 f9a7 	bl	8003b60 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002812:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002816:	4ab6      	ldr	r2, [pc, #728]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 8002818:	015b      	lsls	r3, r3, #5
 800281a:	4413      	add	r3, r2
 800281c:	3318      	adds	r3, #24
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	220a      	movs	r2, #10
 8002822:	49b1      	ldr	r1, [pc, #708]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002824:	4618      	mov	r0, r3
 8002826:	f00b f80d 	bl	800d844 <itoa>
 800282a:	4603      	mov	r3, r0
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f001 f996 	bl	8003b60 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002834:	2100      	movs	r1, #0
 8002836:	48af      	ldr	r0, [pc, #700]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 8002838:	f001 f992 	bl	8003b60 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 800283c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002840:	4aab      	ldr	r2, [pc, #684]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	4413      	add	r3, r2
 8002846:	331c      	adds	r3, #28
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	4baa      	ldr	r3, [pc, #680]	@ (8002af8 <Si468x_dab_full_scan+0x594>)
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f001 f983 	bl	8003b60 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 800285a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800285e:	4aa4      	ldr	r2, [pc, #656]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 8002860:	015b      	lsls	r3, r3, #5
 8002862:	4413      	add	r3, r2
 8002864:	331c      	adds	r3, #28
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b13      	cmp	r3, #19
 800286a:	d803      	bhi.n	8002874 <Si468x_dab_full_scan+0x310>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800286c:	2100      	movs	r1, #0
 800286e:	48a3      	ldr	r0, [pc, #652]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 8002870:	f001 f976 	bl	8003b60 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 8002874:	2101      	movs	r1, #1
 8002876:	48a2      	ldr	r0, [pc, #648]	@ (8002b00 <Si468x_dab_full_scan+0x59c>)
 8002878:	f001 f972 	bl	8003b60 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 800287c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002880:	3301      	adds	r3, #1
 8002882:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002886:	4b9f      	ldr	r3, [pc, #636]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800288e:	429a      	cmp	r2, r3
 8002890:	d39c      	bcc.n	80027cc <Si468x_dab_full_scan+0x268>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002892:	2101      	movs	r1, #1
 8002894:	489c      	ldr	r0, [pc, #624]	@ (8002b08 <Si468x_dab_full_scan+0x5a4>)
 8002896:	f001 f963 	bl	8003b60 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 800289a:	2100      	movs	r1, #0
 800289c:	489b      	ldr	r0, [pc, #620]	@ (8002b0c <Si468x_dab_full_scan+0x5a8>)
 800289e:	f001 f95f 	bl	8003b60 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80028a2:	4b98      	ldr	r3, [pc, #608]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	220a      	movs	r2, #10
 80028a8:	498f      	ldr	r1, [pc, #572]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	f00a ffca 	bl	800d844 <itoa>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f953 	bl	8003b60 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80028ba:	2101      	movs	r1, #1
 80028bc:	4894      	ldr	r0, [pc, #592]	@ (8002b10 <Si468x_dab_full_scan+0x5ac>)
 80028be:	f001 f94f 	bl	8003b60 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80028c2:	2101      	movs	r1, #1
 80028c4:	4893      	ldr	r0, [pc, #588]	@ (8002b14 <Si468x_dab_full_scan+0x5b0>)
 80028c6:	f001 f94b 	bl	8003b60 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80028d0:	e0f7      	b.n	8002ac2 <Si468x_dab_full_scan+0x55e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80028d2:	2100      	movs	r1, #0
 80028d4:	4883      	ldr	r0, [pc, #524]	@ (8002ae4 <Si468x_dab_full_scan+0x580>)
 80028d6:	f001 f943 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 80028da:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028de:	3301      	adds	r3, #1
 80028e0:	220a      	movs	r2, #10
 80028e2:	4981      	ldr	r1, [pc, #516]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80028e4:	4618      	mov	r0, r3
 80028e6:	f00a ffad 	bl	800d844 <itoa>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f936 	bl	8003b60 <send_debug_msg>
			if((services_index + 1) < 10)
 80028f4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d803      	bhi.n	8002904 <Si468x_dab_full_scan+0x3a0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80028fc:	2100      	movs	r1, #0
 80028fe:	487f      	ldr	r0, [pc, #508]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 8002900:	f001 f92e 	bl	8003b60 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002904:	2100      	movs	r1, #0
 8002906:	4884      	ldr	r0, [pc, #528]	@ (8002b18 <Si468x_dab_full_scan+0x5b4>)
 8002908:	f001 f92a 	bl	8003b60 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 800290c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002910:	2234      	movs	r2, #52	@ 0x34
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a81      	ldr	r2, [pc, #516]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002918:	4413      	add	r3, r2
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f91f 	bl	8003b60 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002922:	2100      	movs	r1, #0
 8002924:	487e      	ldr	r0, [pc, #504]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002926:	f001 f91b 	bl	8003b60 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002930:	e021      	b.n	8002976 <Si468x_dab_full_scan+0x412>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002932:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002936:	4a6e      	ldr	r2, [pc, #440]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 8002938:	015b      	lsls	r3, r3, #5
 800293a:	4413      	add	r3, r2
 800293c:	331c      	adds	r3, #28
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002944:	4975      	ldr	r1, [pc, #468]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002946:	2034      	movs	r0, #52	@ 0x34
 8002948:	fb00 f303 	mul.w	r3, r0, r3
 800294c:	440b      	add	r3, r1
 800294e:	3328      	adds	r3, #40	@ 0x28
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d10a      	bne.n	800296c <Si468x_dab_full_scan+0x408>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8002956:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	4a64      	ldr	r2, [pc, #400]	@ (8002af0 <Si468x_dab_full_scan+0x58c>)
 800295e:	4413      	add	r3, r2
 8002960:	3302      	adds	r3, #2
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f001 f8fb 	bl	8003b60 <send_debug_msg>
					break;
 800296a:	e00a      	b.n	8002982 <Si468x_dab_full_scan+0x41e>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 800296c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002970:	3301      	adds	r3, #1
 8002972:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002976:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800297e:	429a      	cmp	r2, r3
 8002980:	d3d7      	bcc.n	8002932 <Si468x_dab_full_scan+0x3ce>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8002982:	2100      	movs	r1, #0
 8002984:	4866      	ldr	r0, [pc, #408]	@ (8002b20 <Si468x_dab_full_scan+0x5bc>)
 8002986:	f001 f8eb 	bl	8003b60 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800298a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800298e:	4a63      	ldr	r2, [pc, #396]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002990:	2134      	movs	r1, #52	@ 0x34
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3324      	adds	r3, #36	@ 0x24
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	220a      	movs	r2, #10
 800299e:	4952      	ldr	r1, [pc, #328]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f00a ff4f 	bl	800d844 <itoa>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 f8d8 	bl	8003b60 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80029b0:	2100      	movs	r1, #0
 80029b2:	4850      	ldr	r0, [pc, #320]	@ (8002af4 <Si468x_dab_full_scan+0x590>)
 80029b4:	f001 f8d4 	bl	8003b60 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80029b8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029bc:	4a57      	ldr	r2, [pc, #348]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 80029be:	2134      	movs	r1, #52	@ 0x34
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3328      	adds	r3, #40	@ 0x28
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <Si468x_dab_full_scan+0x594>)
 80029ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f8c3 	bl	8003b60 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 80029da:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029de:	4a4f      	ldr	r2, [pc, #316]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 80029e0:	2134      	movs	r1, #52	@ 0x34
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3328      	adds	r3, #40	@ 0x28
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b13      	cmp	r3, #19
 80029ee:	d803      	bhi.n	80029f8 <Si468x_dab_full_scan+0x494>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80029f0:	2100      	movs	r1, #0
 80029f2:	4842      	ldr	r0, [pc, #264]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 80029f4:	f001 f8b4 	bl	8003b60 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 80029f8:	2100      	movs	r1, #0
 80029fa:	4847      	ldr	r0, [pc, #284]	@ (8002b18 <Si468x_dab_full_scan+0x5b4>)
 80029fc:	f001 f8b0 	bl	8003b60 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002a00:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a04:	4a45      	ldr	r2, [pc, #276]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a06:	2134      	movs	r1, #52	@ 0x34
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3315      	adds	r3, #21
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	220a      	movs	r2, #10
 8002a14:	4934      	ldr	r1, [pc, #208]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002a16:	4618      	mov	r0, r3
 8002a18:	f00a ff14 	bl	800d844 <itoa>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 f89d 	bl	8003b60 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8002a26:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a2c:	2134      	movs	r1, #52	@ 0x34
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3315      	adds	r3, #21
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	d803      	bhi.n	8002a44 <Si468x_dab_full_scan+0x4e0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	482f      	ldr	r0, [pc, #188]	@ (8002afc <Si468x_dab_full_scan+0x598>)
 8002a40:	f001 f88e 	bl	8003b60 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8002a44:	2100      	movs	r1, #0
 8002a46:	4837      	ldr	r0, [pc, #220]	@ (8002b24 <Si468x_dab_full_scan+0x5c0>)
 8002a48:	f001 f88a 	bl	8003b60 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4836      	ldr	r0, [pc, #216]	@ (8002b28 <Si468x_dab_full_scan+0x5c4>)
 8002a50:	f001 f886 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a54:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a58:	4a30      	ldr	r2, [pc, #192]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a5a:	2134      	movs	r1, #52	@ 0x34
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3320      	adds	r3, #32
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	491f      	ldr	r1, [pc, #124]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f00a feea 	bl	800d844 <itoa>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f873 	bl	8003b60 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4826      	ldr	r0, [pc, #152]	@ (8002b18 <Si468x_dab_full_scan+0x5b4>)
 8002a7e:	f001 f86f 	bl	8003b60 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002a82:	2100      	movs	r1, #0
 8002a84:	4828      	ldr	r0, [pc, #160]	@ (8002b28 <Si468x_dab_full_scan+0x5c4>)
 8002a86:	f001 f86b 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a8a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002a8e:	4a23      	ldr	r2, [pc, #140]	@ (8002b1c <Si468x_dab_full_scan+0x5b8>)
 8002a90:	2134      	movs	r1, #52	@ 0x34
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	332a      	adds	r3, #42	@ 0x2a
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	4912      	ldr	r1, [pc, #72]	@ (8002ae8 <Si468x_dab_full_scan+0x584>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f00a fecf 	bl	800d844 <itoa>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f858 	bl	8003b60 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	481e      	ldr	r0, [pc, #120]	@ (8002b2c <Si468x_dab_full_scan+0x5c8>)
 8002ab4:	f001 f854 	bl	8003b60 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8002ab8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002abc:	3301      	adds	r3, #1
 8002abe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <Si468x_dab_full_scan+0x5a0>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002aca:	429a      	cmp	r2, r3
 8002acc:	f4ff af01 	bcc.w	80028d2 <Si468x_dab_full_scan+0x36e>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	480f      	ldr	r0, [pc, #60]	@ (8002b10 <Si468x_dab_full_scan+0x5ac>)
 8002ad4:	f001 f844 	bl	8003b60 <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 8002ad8:	2301      	movs	r3, #1
	}
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	373c      	adds	r7, #60	@ 0x3c
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	0800e23c 	.word	0x0800e23c
 8002ae8:	200034d0 	.word	0x200034d0
 8002aec:	0800e240 	.word	0x0800e240
 8002af0:	20003634 	.word	0x20003634
 8002af4:	0800e24c 	.word	0x0800e24c
 8002af8:	20000008 	.word	0x20000008
 8002afc:	0800e254 	.word	0x0800e254
 8002b00:	0800e258 	.word	0x0800e258
 8002b04:	20004bc4 	.word	0x20004bc4
 8002b08:	0800e1c8 	.word	0x0800e1c8
 8002b0c:	0800e260 	.word	0x0800e260
 8002b10:	0800e274 	.word	0x0800e274
 8002b14:	0800e2e0 	.word	0x0800e2e0
 8002b18:	0800e34c 	.word	0x0800e34c
 8002b1c:	20003774 	.word	0x20003774
 8002b20:	0800e354 	.word	0x0800e354
 8002b24:	0800e358 	.word	0x0800e358
 8002b28:	0800e360 	.word	0x0800e360
 8002b2c:	0800e364 	.word	0x0800e364

08002b30 <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002b38:	2101      	movs	r1, #1
 8002b3a:	484d      	ldr	r0, [pc, #308]	@ (8002c70 <Si468x_dab_get_audio_info+0x140>)
 8002b3c:	f001 f810 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002b40:	4b4c      	ldr	r3, [pc, #304]	@ (8002c74 <Si468x_dab_get_audio_info+0x144>)
 8002b42:	22bd      	movs	r2, #189	@ 0xbd
 8002b44:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002b46:	4b4b      	ldr	r3, [pc, #300]	@ (8002c74 <Si468x_dab_get_audio_info+0x144>)
 8002b48:	2203      	movs	r2, #3
 8002b4a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002b4c:	4949      	ldr	r1, [pc, #292]	@ (8002c74 <Si468x_dab_get_audio_info+0x144>)
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f7fe fdee 	bl	8001730 <Si468x_write_command>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <Si468x_dab_get_audio_info+0x148>)
 8002b5a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f004 fe9f 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002b62:	4946      	ldr	r1, [pc, #280]	@ (8002c7c <Si468x_dab_get_audio_info+0x14c>)
 8002b64:	2014      	movs	r0, #20
 8002b66:	f7fe fe05 	bl	8001774 <Si468x_read_reply>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b42      	ldr	r3, [pc, #264]	@ (8002c78 <Si468x_dab_get_audio_info+0x148>)
 8002b70:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info));
 8002b72:	4a43      	ldr	r2, [pc, #268]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002b74:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <Si468x_dab_get_audio_info+0x14c>)
 8002b76:	4614      	mov	r4, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002b80:	2100      	movs	r1, #0
 8002b82:	4840      	ldr	r0, [pc, #256]	@ (8002c84 <Si468x_dab_get_audio_info+0x154>)
 8002b84:	f000 ffec 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002b88:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	220a      	movs	r2, #10
 8002b8e:	493e      	ldr	r1, [pc, #248]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002b90:	4618      	mov	r0, r3
 8002b92:	f00a fe57 	bl	800d844 <itoa>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 ffe0 	bl	8003b60 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	483a      	ldr	r0, [pc, #232]	@ (8002c8c <Si468x_dab_get_audio_info+0x15c>)
 8002ba4:	f000 ffdc 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002ba8:	4b35      	ldr	r3, [pc, #212]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002baa:	885b      	ldrh	r3, [r3, #2]
 8002bac:	220a      	movs	r2, #10
 8002bae:	4936      	ldr	r1, [pc, #216]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f00a fe47 	bl	800d844 <itoa>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 ffd0 	bl	8003b60 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4833      	ldr	r0, [pc, #204]	@ (8002c90 <Si468x_dab_get_audio_info+0x160>)
 8002bc4:	f000 ffcc 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002bca:	791b      	ldrb	r3, [r3, #4]
 8002bcc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	220a      	movs	r2, #10
 8002bd4:	492c      	ldr	r1, [pc, #176]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f00a fe34 	bl	800d844 <itoa>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 ffbd 	bl	8003b60 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002be6:	2100      	movs	r1, #0
 8002be8:	482a      	ldr	r0, [pc, #168]	@ (8002c94 <Si468x_dab_get_audio_info+0x164>)
 8002bea:	f000 ffb9 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002bee:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002bf0:	791b      	ldrb	r3, [r3, #4]
 8002bf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	220a      	movs	r2, #10
 8002bfa:	4923      	ldr	r1, [pc, #140]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f00a fe21 	bl	800d844 <itoa>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 ffaa 	bl	8003b60 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4822      	ldr	r0, [pc, #136]	@ (8002c98 <Si468x_dab_get_audio_info+0x168>)
 8002c10:	f000 ffa6 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002c16:	791b      	ldrb	r3, [r3, #4]
 8002c18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	220a      	movs	r2, #10
 8002c20:	4919      	ldr	r1, [pc, #100]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f00a fe0e 	bl	800d844 <itoa>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 ff97 	bl	8003b60 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002c32:	2100      	movs	r1, #0
 8002c34:	4819      	ldr	r0, [pc, #100]	@ (8002c9c <Si468x_dab_get_audio_info+0x16c>)
 8002c36:	f000 ff93 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002c3a:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	220a      	movs	r2, #10
 8002c46:	4910      	ldr	r1, [pc, #64]	@ (8002c88 <Si468x_dab_get_audio_info+0x158>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f00a fdfb 	bl	800d844 <itoa>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 ff84 	bl	8003b60 <send_debug_msg>

	return dab_audio_info;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a09      	ldr	r2, [pc, #36]	@ (8002c80 <Si468x_dab_get_audio_info+0x150>)
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	4613      	mov	r3, r2
 8002c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	0800e370 	.word	0x0800e370
 8002c74:	200001a8 	.word	0x200001a8
 8002c78:	20003510 	.word	0x20003510
 8002c7c:	200011a8 	.word	0x200011a8
 8002c80:	20003610 	.word	0x20003610
 8002c84:	0800e3ac 	.word	0x0800e3ac
 8002c88:	200034d0 	.word	0x200034d0
 8002c8c:	0800e3b8 	.word	0x0800e3b8
 8002c90:	0800e3c8 	.word	0x0800e3c8
 8002c94:	0800e3dc 	.word	0x0800e3dc
 8002c98:	0800e3e8 	.word	0x0800e3e8
 8002c9c:	0800e3f4 	.word	0x0800e3f4

08002ca0 <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4811      	ldr	r0, [pc, #68]	@ (8002cec <Si468x_dab_get_event_status+0x4c>)
 8002ca8:	f000 ff5a 	bl	8003b60 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <Si468x_dab_get_event_status+0x50>)
 8002cae:	22b3      	movs	r2, #179	@ 0xb3
 8002cb0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <Si468x_dab_get_event_status+0x50>)
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002cb8:	490d      	ldr	r1, [pc, #52]	@ (8002cf0 <Si468x_dab_get_event_status+0x50>)
 8002cba:	2002      	movs	r0, #2
 8002cbc:	f7fe fd38 	bl	8001730 <Si468x_write_command>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <Si468x_dab_get_event_status+0x54>)
 8002cc6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f004 fde9 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002cce:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <Si468x_dab_get_event_status+0x58>)
 8002cd0:	2009      	movs	r0, #9
 8002cd2:	f7fe fd4f 	bl	8001774 <Si468x_read_reply>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <Si468x_dab_get_event_status+0x54>)
 8002cdc:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <Si468x_dab_get_event_status+0x58>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4a06      	ldr	r2, [pc, #24]	@ (8002cfc <Si468x_dab_get_event_status+0x5c>)
 8002ce4:	6013      	str	r3, [r2, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	0800e404 	.word	0x0800e404
 8002cf0:	200001a8 	.word	0x200001a8
 8002cf4:	20003510 	.word	0x20003510
 8002cf8:	200011a8 	.word	0x200011a8
 8002cfc:	20003600 	.word	0x20003600

08002d00 <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	484a      	ldr	r0, [pc, #296]	@ (8002e38 <Si468x_dab_get_component_info+0x138>)
 8002d10:	f000 ff26 	bl	8003b60 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002d14:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d16:	22bb      	movs	r2, #187	@ 0xbb
 8002d18:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002d1a:	4b48      	ldr	r3, [pc, #288]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002d20:	4b46      	ldr	r3, [pc, #280]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002d26:	4b45      	ldr	r3, [pc, #276]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b42      	ldr	r3, [pc, #264]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d32:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b40      	ldr	r3, [pc, #256]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d3c:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b3d      	ldr	r3, [pc, #244]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d46:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0e1b      	lsrs	r3, r3, #24
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d50:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002d52:	4a3a      	ldr	r2, [pc, #232]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	121b      	asrs	r3, r3, #8
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d60:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	141b      	asrs	r3, r3, #16
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b34      	ldr	r3, [pc, #208]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d6a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	161b      	asrs	r3, r3, #24
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d74:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002d76:	4931      	ldr	r1, [pc, #196]	@ (8002e3c <Si468x_dab_get_component_info+0x13c>)
 8002d78:	200c      	movs	r0, #12
 8002d7a:	f7fe fcd9 	bl	8001730 <Si468x_write_command>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <Si468x_dab_get_component_info+0x140>)
 8002d84:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002d86:	2005      	movs	r0, #5
 8002d88:	f004 fd8a 	bl	80078a0 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002d8c:	492d      	ldr	r1, [pc, #180]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002d8e:	201a      	movs	r0, #26
 8002d90:	f7fe fcf0 	bl	8001774 <Si468x_read_reply>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <Si468x_dab_get_component_info+0x140>)
 8002d9a:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002d9c:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002d9e:	799b      	ldrb	r3, [r3, #6]
 8002da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002da4:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e00c      	b.n	8002dc6 <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002dac:	7ffb      	ldrb	r3, [r7, #31]
 8002dae:	f103 0208 	add.w	r2, r3, #8
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	4923      	ldr	r1, [pc, #140]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002db6:	5c8a      	ldrb	r2, [r1, r2]
 8002db8:	3320      	adds	r3, #32
 8002dba:	443b      	add	r3, r7
 8002dbc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002dc0:	7ffb      	ldrb	r3, [r7, #31]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d9ef      	bls.n	8002dac <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002dce:	7e1b      	ldrb	r3, [r3, #24]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e44 <Si468x_dab_get_component_info+0x144>)
 8002dd4:	7e5b      	ldrb	r3, [r3, #25]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002dde:	2100      	movs	r1, #0
 8002de0:	4819      	ldr	r0, [pc, #100]	@ (8002e48 <Si468x_dab_get_component_info+0x148>)
 8002de2:	f000 febd 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002de6:	7fbb      	ldrb	r3, [r7, #30]
 8002de8:	220a      	movs	r2, #10
 8002dea:	4918      	ldr	r1, [pc, #96]	@ (8002e4c <Si468x_dab_get_component_info+0x14c>)
 8002dec:	4618      	mov	r0, r3
 8002dee:	f00a fd29 	bl	800d844 <itoa>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 feb2 	bl	8003b60 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4814      	ldr	r0, [pc, #80]	@ (8002e50 <Si468x_dab_get_component_info+0x150>)
 8002e00:	f000 feae 	bl	8003b60 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fea8 	bl	8003b60 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002e10:	2100      	movs	r1, #0
 8002e12:	4810      	ldr	r0, [pc, #64]	@ (8002e54 <Si468x_dab_get_component_info+0x154>)
 8002e14:	f000 fea4 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002e18:	8bbb      	ldrh	r3, [r7, #28]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	490b      	ldr	r1, [pc, #44]	@ (8002e4c <Si468x_dab_get_component_info+0x14c>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f00a fd10 	bl	800d844 <itoa>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fe99 	bl	8003b60 <send_debug_msg>

}
 8002e2e:	bf00      	nop
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	0800e444 	.word	0x0800e444
 8002e3c:	200001a8 	.word	0x200001a8
 8002e40:	20003510 	.word	0x20003510
 8002e44:	200011a8 	.word	0x200011a8
 8002e48:	0800e478 	.word	0x0800e478
 8002e4c:	200034d0 	.word	0x200034d0
 8002e50:	0800e484 	.word	0x0800e484
 8002e54:	0800e498 	.word	0x0800e498

08002e58 <Si468x_dab_get_digital_service_data>:

void Si468x_dab_get_digital_service_data()
{
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002e5e:	49aa      	ldr	r1, [pc, #680]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002e60:	2005      	movs	r0, #5
 8002e62:	f7fe fc87 	bl	8001774 <Si468x_read_reply>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4ba8      	ldr	r3, [pc, #672]	@ (800310c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e6c:	701a      	strb	r2, [r3, #0]

	if(rd_reply.d_srv_int)
 8002e6e:	4ba8      	ldr	r3, [pc, #672]	@ (8003110 <Si468x_dab_get_digital_service_data+0x2b8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8140 	beq.w	80030fe <Si468x_dab_get_digital_service_data+0x2a6>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_DATA;
 8002e7e:	4ba5      	ldr	r3, [pc, #660]	@ (8003114 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002e80:	2284      	movs	r2, #132	@ 0x84
 8002e82:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x01;	//+1 = ACK, +16 = STATUS_ONLY
 8002e84:	4ba3      	ldr	r3, [pc, #652]	@ (8003114 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002e8a:	49a2      	ldr	r1, [pc, #648]	@ (8003114 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7fe fc4f 	bl	8001730 <Si468x_write_command>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b9d      	ldr	r3, [pc, #628]	@ (800310c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e98:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8002e9a:	2005      	movs	r0, #5
 8002e9c:	f004 fd00 	bl	80078a0 <HAL_Delay>

		//first read only header to obtain payload data size
		status = Si468x_read_reply(30, dab_spi_rx_buffer);
 8002ea0:	4999      	ldr	r1, [pc, #612]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002ea2:	201e      	movs	r0, #30
 8002ea4:	f7fe fc66 	bl	8001774 <Si468x_read_reply>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b97      	ldr	r3, [pc, #604]	@ (800310c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002eae:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t*)&dab_service_data_reply_header, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_service_data_reply_header));
 8002eb0:	4a99      	ldr	r2, [pc, #612]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002eb2:	4b95      	ldr	r3, [pc, #596]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002eb4:	4615      	mov	r5, r2
 8002eb6:	1d1c      	adds	r4, r3, #4
 8002eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	602b      	str	r3, [r5, #0]


//		if(dab_service_data_reply_header.buff_count)
		{
			send_debug_msg("-----------Getting DAB Service Data-------------", CRLF_SEND);
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4896      	ldr	r0, [pc, #600]	@ (800311c <Si468x_dab_get_digital_service_data+0x2c4>)
 8002ec4:	f000 fe4c 	bl	8003b60 <send_debug_msg>
//			send_debug_msg(itoa(dab_service_data_reply_header.num_segs, itoa_buffer, 10), CRLF_SEND);


			//second read full data when we know data length

			if(!dab_service_data_reply_header.dsrv_ovfl_int)
 8002ec8:	4b93      	ldr	r3, [pc, #588]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 8113 	bne.w	80030fe <Si468x_dab_get_digital_service_data+0x2a6>
			{
				status = Si468x_read_reply(24 + dab_service_data_reply_header.byte_count, dab_spi_rx_buffer);
 8002ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002eda:	89db      	ldrh	r3, [r3, #14]
 8002edc:	3318      	adds	r3, #24
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4989      	ldr	r1, [pc, #548]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fc46 	bl	8001774 <Si468x_read_reply>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b87      	ldr	r3, [pc, #540]	@ (800310c <Si468x_dab_get_digital_service_data+0x2b4>)
 8002eee:	701a      	strb	r2, [r3, #0]

				if(dab_service_data_reply_header.dsc_ty == 60)
 8002ef0:	4b89      	ldr	r3, [pc, #548]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002ef2:	78db      	ldrb	r3, [r3, #3]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b3c      	cmp	r3, #60	@ 0x3c
 8002efc:	f040 80a5 	bne.w	800304a <Si468x_dab_get_digital_service_data+0x1f2>
				{
					send_debug_msg("Slideshow Data: ", CRLF_SEND);
 8002f00:	2101      	movs	r1, #1
 8002f02:	4887      	ldr	r0, [pc, #540]	@ (8003120 <Si468x_dab_get_digital_service_data+0x2c8>)
 8002f04:	f000 fe2c 	bl	8003b60 <send_debug_msg>
					uint32_t body_size;
					uint16_t header_size;
					uint8_t content_type;
					uint16_t content_sub_type;

					body_size = (dab_spi_rx_buffer[24 + 0] << 20) + (dab_spi_rx_buffer[24 + 1] << 12) + (dab_spi_rx_buffer[24 + 2] << 4) + ((dab_spi_rx_buffer[24 + 3] && 0xF0) >> 4);
 8002f08:	4b7f      	ldr	r3, [pc, #508]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f0a:	7e1b      	ldrb	r3, [r3, #24]
 8002f0c:	051a      	lsls	r2, r3, #20
 8002f0e:	4b7e      	ldr	r3, [pc, #504]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f10:	7e5b      	ldrb	r3, [r3, #25]
 8002f12:	031b      	lsls	r3, r3, #12
 8002f14:	441a      	add	r2, r3
 8002f16:	4b7c      	ldr	r3, [pc, #496]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f18:	7e9b      	ldrb	r3, [r3, #26]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]

					header_size = ((dab_spi_rx_buffer[24 + 3] && 0x0F) << 9) + (dab_spi_rx_buffer[24 + 4] << 1) + ((dab_spi_rx_buffer[24 + 5] && 0x80) >> 7);
 8002f20:	4b79      	ldr	r3, [pc, #484]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f22:	7edb      	ldrb	r3, [r3, #27]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <Si468x_dab_get_digital_service_data+0xd6>
 8002f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2c:	e000      	b.n	8002f30 <Si468x_dab_get_digital_service_data+0xd8>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b75      	ldr	r3, [pc, #468]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f32:	7f1b      	ldrb	r3, [r3, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]

					content_type = (dab_spi_rx_buffer[24 + 5] && 0x7E) >> 1;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	717b      	strb	r3, [r7, #5]

					content_sub_type = ((dab_spi_rx_buffer[24 + 5] && 0x01) << 8) + (dab_spi_rx_buffer[24 + 6]);
 8002f40:	4b71      	ldr	r3, [pc, #452]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f42:	7f5b      	ldrb	r3, [r3, #29]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <Si468x_dab_get_digital_service_data+0xf6>
 8002f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f4c:	e000      	b.n	8002f50 <Si468x_dab_get_digital_service_data+0xf8>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	4a6d      	ldr	r2, [pc, #436]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f52:	7f92      	ldrb	r2, [r2, #30]
 8002f54:	4413      	add	r3, r2
 8002f56:	807b      	strh	r3, [r7, #2]

					for(uint16_t i = 0; i < 4096; i++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	82fb      	strh	r3, [r7, #22]
 8002f5c:	e006      	b.n	8002f6c <Si468x_dab_get_digital_service_data+0x114>
					{
						slideshow_data[i] = 0;
 8002f5e:	8afb      	ldrh	r3, [r7, #22]
 8002f60:	4a70      	ldr	r2, [pc, #448]	@ (8003124 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002f62:	2100      	movs	r1, #0
 8002f64:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < 4096; i++)
 8002f66:	8afb      	ldrh	r3, [r7, #22]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	82fb      	strh	r3, [r7, #22]
 8002f6c:	8afb      	ldrh	r3, [r7, #22]
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f72:	d3f4      	bcc.n	8002f5e <Si468x_dab_get_digital_service_data+0x106>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	82bb      	strh	r3, [r7, #20]
 8002f78:	e00a      	b.n	8002f90 <Si468x_dab_get_digital_service_data+0x138>
					{
						slideshow_data[i] = dab_spi_rx_buffer[24 + i];
 8002f7a:	8abb      	ldrh	r3, [r7, #20]
 8002f7c:	f103 0218 	add.w	r2, r3, #24
 8002f80:	8abb      	ldrh	r3, [r7, #20]
 8002f82:	4961      	ldr	r1, [pc, #388]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8002f84:	5c89      	ldrb	r1, [r1, r2]
 8002f86:	4a67      	ldr	r2, [pc, #412]	@ (8003124 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002f88:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f8a:	8abb      	ldrh	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	82bb      	strh	r3, [r7, #20]
 8002f90:	4b61      	ldr	r3, [pc, #388]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002f92:	89db      	ldrh	r3, [r3, #14]
 8002f94:	8aba      	ldrh	r2, [r7, #20]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3ef      	bcc.n	8002f7a <Si468x_dab_get_digital_service_data+0x122>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	827b      	strh	r3, [r7, #18]
 8002f9e:	e00f      	b.n	8002fc0 <Si468x_dab_get_digital_service_data+0x168>
					{
//						send_debug_msg(slideshow_data[i]);
						send_debug_msg(itoa(slideshow_data[i], itoa_buffer, 10), CRLF_SEND);
 8002fa0:	8a7b      	ldrh	r3, [r7, #18]
 8002fa2:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	220a      	movs	r2, #10
 8002fa8:	495f      	ldr	r1, [pc, #380]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002faa:	4618      	mov	r0, r3
 8002fac:	f00a fc4a 	bl	800d844 <itoa>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fdd3 	bl	8003b60 <send_debug_msg>
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002fba:	8a7b      	ldrh	r3, [r7, #18]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	827b      	strh	r3, [r7, #18]
 8002fc0:	4b55      	ldr	r3, [pc, #340]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002fc2:	89db      	ldrh	r3, [r3, #14]
 8002fc4:	8a7a      	ldrh	r2, [r7, #18]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d3ea      	bcc.n	8002fa0 <Si468x_dab_get_digital_service_data+0x148>
					}
//					send_debug_msg("", CRLF_SEND);
					send_debug_msg("end", CRLF_SEND);
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4857      	ldr	r0, [pc, #348]	@ (800312c <Si468x_dab_get_digital_service_data+0x2d4>)
 8002fce:	f000 fdc7 	bl	8003b60 <send_debug_msg>
					send_debug_msg("Body Size: ", CRLF_NO_SEND);
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4856      	ldr	r0, [pc, #344]	@ (8003130 <Si468x_dab_get_digital_service_data+0x2d8>)
 8002fd6:	f000 fdc3 	bl	8003b60 <send_debug_msg>
					send_debug_msg(itoa(body_size, itoa_buffer, 10), CRLF_SEND);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	220a      	movs	r2, #10
 8002fde:	4952      	ldr	r1, [pc, #328]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f00a fc2f 	bl	800d844 <itoa>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fdb8 	bl	8003b60 <send_debug_msg>
					send_debug_msg("Header Size: ", CRLF_NO_SEND);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4850      	ldr	r0, [pc, #320]	@ (8003134 <Si468x_dab_get_digital_service_data+0x2dc>)
 8002ff4:	f000 fdb4 	bl	8003b60 <send_debug_msg>
					send_debug_msg(itoa(header_size, itoa_buffer, 10), CRLF_SEND);
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	220a      	movs	r2, #10
 8002ffc:	494a      	ldr	r1, [pc, #296]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f00a fc20 	bl	800d844 <itoa>
 8003004:	4603      	mov	r3, r0
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fda9 	bl	8003b60 <send_debug_msg>
					send_debug_msg("Content Type: ", CRLF_NO_SEND);
 800300e:	2100      	movs	r1, #0
 8003010:	4849      	ldr	r0, [pc, #292]	@ (8003138 <Si468x_dab_get_digital_service_data+0x2e0>)
 8003012:	f000 fda5 	bl	8003b60 <send_debug_msg>
					send_debug_msg(itoa(content_type, itoa_buffer, 10), CRLF_SEND);
 8003016:	797b      	ldrb	r3, [r7, #5]
 8003018:	220a      	movs	r2, #10
 800301a:	4943      	ldr	r1, [pc, #268]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 800301c:	4618      	mov	r0, r3
 800301e:	f00a fc11 	bl	800d844 <itoa>
 8003022:	4603      	mov	r3, r0
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fd9a 	bl	8003b60 <send_debug_msg>
					send_debug_msg("Content SubType: ", CRLF_NO_SEND);
 800302c:	2100      	movs	r1, #0
 800302e:	4843      	ldr	r0, [pc, #268]	@ (800313c <Si468x_dab_get_digital_service_data+0x2e4>)
 8003030:	f000 fd96 	bl	8003b60 <send_debug_msg>
					send_debug_msg(itoa(content_sub_type, itoa_buffer, 10), CRLF_SEND);
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	220a      	movs	r2, #10
 8003038:	493b      	ldr	r1, [pc, #236]	@ (8003128 <Si468x_dab_get_digital_service_data+0x2d0>)
 800303a:	4618      	mov	r0, r3
 800303c:	f00a fc02 	bl	800d844 <itoa>
 8003040:	4603      	mov	r3, r0
 8003042:	2101      	movs	r1, #1
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd8b 	bl	8003b60 <send_debug_msg>

				}

				if(dab_service_data_reply_header.data_src == 2)
 800304a:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 800304c:	78db      	ldrb	r3, [r3, #3]
 800304e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b80      	cmp	r3, #128	@ 0x80
 8003056:	d152      	bne.n	80030fe <Si468x_dab_get_digital_service_data+0x2a6>
				{
					send_debug_msg("Dynamic Label Data: ", CRLF_SEND);
 8003058:	2101      	movs	r1, #1
 800305a:	4839      	ldr	r0, [pc, #228]	@ (8003140 <Si468x_dab_get_digital_service_data+0x2e8>)
 800305c:	f000 fd80 	bl	8003b60 <send_debug_msg>

					for(uint8_t i = 0; i < 128; i++)
 8003060:	2300      	movs	r3, #0
 8003062:	747b      	strb	r3, [r7, #17]
 8003064:	e006      	b.n	8003074 <Si468x_dab_get_digital_service_data+0x21c>
					{
						dls_label[i] = 0;
 8003066:	7c7b      	ldrb	r3, [r7, #17]
 8003068:	4a36      	ldr	r2, [pc, #216]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 800306a:	2100      	movs	r1, #0
 800306c:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 128; i++)
 800306e:	7c7b      	ldrb	r3, [r7, #17]
 8003070:	3301      	adds	r3, #1
 8003072:	747b      	strb	r3, [r7, #17]
 8003074:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003078:	2b00      	cmp	r3, #0
 800307a:	daf4      	bge.n	8003066 <Si468x_dab_get_digital_service_data+0x20e>
					}

					uint8_t label_pos = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e031      	b.n	80030ea <Si468x_dab_get_digital_service_data+0x292>
					{
						dls_label[label_pos] = dab_spi_rx_buffer[24 + 2 + i];
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	f103 021a 	add.w	r2, r3, #26
 800308c:	7c3b      	ldrb	r3, [r7, #16]
 800308e:	491e      	ldr	r1, [pc, #120]	@ (8003108 <Si468x_dab_get_digital_service_data+0x2b0>)
 8003090:	5c89      	ldrb	r1, [r1, r2]
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 8003094:	54d1      	strb	r1, [r2, r3]
//						send_debug_msg(itoa(dab_spi_rx_buffer[24 + 2 + i], itoa_buffer, 10), CRLF_SEND);

						//polish symbols convert
						//ó
						if(dls_label[label_pos] == 195)
 8003096:	7c3b      	ldrb	r3, [r7, #16]
 8003098:	4a2a      	ldr	r2, [pc, #168]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	2bc3      	cmp	r3, #195	@ 0xc3
 800309e:	d106      	bne.n	80030ae <Si468x_dab_get_digital_service_data+0x256>
						{
							dls_label[label_pos] = 111;//lub 243
 80030a0:	7c3b      	ldrb	r3, [r7, #16]
 80030a2:	4a28      	ldr	r2, [pc, #160]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030a4:	216f      	movs	r1, #111	@ 0x6f
 80030a6:	54d1      	strb	r1, [r2, r3]
							i++;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	3301      	adds	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 234)
						{

						}
						//ć to c
						if(dls_label[label_pos] == 196)
 80030ae:	7c3b      	ldrb	r3, [r7, #16]
 80030b0:	4a24      	ldr	r2, [pc, #144]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	2bc4      	cmp	r3, #196	@ 0xc4
 80030b6:	d106      	bne.n	80030c6 <Si468x_dab_get_digital_service_data+0x26e>
						{
							dls_label[label_pos] = 99; //lub 230
 80030b8:	7c3b      	ldrb	r3, [r7, #16]
 80030ba:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030bc:	2163      	movs	r1, #99	@ 0x63
 80030be:	54d1      	strb	r1, [r2, r3]
							i++;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	3301      	adds	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 182)
						{

						}
						//ł to l
						if(dls_label[label_pos] == 197)
 80030c6:	7c3b      	ldrb	r3, [r7, #16]
 80030c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	2bc5      	cmp	r3, #197	@ 0xc5
 80030ce:	d106      	bne.n	80030de <Si468x_dab_get_digital_service_data+0x286>
						{
							dls_label[label_pos] = 108; //lub 179
 80030d0:	7c3b      	ldrb	r3, [r7, #16]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030d4:	216c      	movs	r1, #108	@ 0x6c
 80030d6:	54d1      	strb	r1, [r2, r3]
							i++;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	3301      	adds	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 243)
						{

						}

						label_pos++;
 80030de:	7c3b      	ldrb	r3, [r7, #16]
 80030e0:	3301      	adds	r3, #1
 80030e2:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	3301      	adds	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <Si468x_dab_get_digital_service_data+0x2c0>)
 80030f0:	89db      	ldrh	r3, [r3, #14]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3c7      	bcc.n	8003086 <Si468x_dab_get_digital_service_data+0x22e>
					}
					send_debug_msg(dls_label, CRLF_SEND);
 80030f6:	2101      	movs	r1, #1
 80030f8:	4812      	ldr	r0, [pc, #72]	@ (8003144 <Si468x_dab_get_digital_service_data+0x2ec>)
 80030fa:	f000 fd31 	bl	8003b60 <send_debug_msg>
				}
			}
		}
	}
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bdb0      	pop	{r4, r5, r7, pc}
 8003106:	bf00      	nop
 8003108:	200011a8 	.word	0x200011a8
 800310c:	20003510 	.word	0x20003510
 8003110:	200035fc 	.word	0x200035fc
 8003114:	200001a8 	.word	0x200001a8
 8003118:	20003620 	.word	0x20003620
 800311c:	0800e4ac 	.word	0x0800e4ac
 8003120:	0800e4e0 	.word	0x0800e4e0
 8003124:	20004c58 	.word	0x20004c58
 8003128:	200034d0 	.word	0x200034d0
 800312c:	0800e4f4 	.word	0x0800e4f4
 8003130:	0800e4f8 	.word	0x0800e4f8
 8003134:	0800e504 	.word	0x0800e504
 8003138:	0800e514 	.word	0x0800e514
 800313c:	0800e524 	.word	0x0800e524
 8003140:	0800e538 	.word	0x0800e538
 8003144:	20004bd4 	.word	0x20004bd4

08003148 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 800314c:	4b1c      	ldr	r3, [pc, #112]	@ (80031c0 <Si468x_dab_get_time+0x78>)
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02f      	beq.n	80031ba <Si468x_dab_get_time+0x72>
 800315a:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <Si468x_dab_get_time+0x78>)
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d028      	beq.n	80031ba <Si468x_dab_get_time+0x72>
 8003168:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <Si468x_dab_get_time+0x78>)
 800316a:	791b      	ldrb	r3, [r3, #4]
 800316c:	2b5a      	cmp	r3, #90	@ 0x5a
 800316e:	d924      	bls.n	80031ba <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <Si468x_dab_get_time+0x7c>)
 8003172:	22bc      	movs	r2, #188	@ 0xbc
 8003174:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8003176:	4b13      	ldr	r3, [pc, #76]	@ (80031c4 <Si468x_dab_get_time+0x7c>)
 8003178:	2200      	movs	r2, #0
 800317a:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 800317c:	4911      	ldr	r1, [pc, #68]	@ (80031c4 <Si468x_dab_get_time+0x7c>)
 800317e:	2002      	movs	r0, #2
 8003180:	f7fe fad6 	bl	8001730 <Si468x_write_command>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <Si468x_dab_get_time+0x80>)
 800318a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 800318c:	2001      	movs	r0, #1
 800318e:	f004 fb87 	bl	80078a0 <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8003192:	490e      	ldr	r1, [pc, #56]	@ (80031cc <Si468x_dab_get_time+0x84>)
 8003194:	200b      	movs	r0, #11
 8003196:	f7fe faed 	bl	8001774 <Si468x_read_reply>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <Si468x_dab_get_time+0x80>)
 80031a0:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 80031a2:	4a0b      	ldr	r2, [pc, #44]	@ (80031d0 <Si468x_dab_get_time+0x88>)
 80031a4:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <Si468x_dab_get_time+0x84>)
 80031a6:	3304      	adds	r3, #4
 80031a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031ac:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 80031b0:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <Si468x_dab_get_time+0x88>)
 80031b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031b6:	f002 fad3 	bl	8005760 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200035d4 	.word	0x200035d4
 80031c4:	200001a8 	.word	0x200001a8
 80031c8:	20003510 	.word	0x20003510
 80031cc:	200011a8 	.word	0x200011a8
 80031d0:	20003608 	.word	0x20003608

080031d4 <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	4619      	mov	r1, r3
 80031e2:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80031e6:	f7fe fbd1 	bl	800198c <Si468x_set_property>
	dab_management.audio_volume = _volume;
 80031ea:	79fa      	ldrb	r2, [r7, #7]
 80031ec:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <Si468x_set_audio_volume+0x58>)
 80031ee:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 80031f0:	2100      	movs	r1, #0
 80031f2:	480f      	ldr	r0, [pc, #60]	@ (8003230 <Si468x_set_audio_volume+0x5c>)
 80031f4:	f000 fcb4 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 80031f8:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <Si468x_set_audio_volume+0x58>)
 80031fa:	7b9b      	ldrb	r3, [r3, #14]
 80031fc:	220a      	movs	r2, #10
 80031fe:	490d      	ldr	r1, [pc, #52]	@ (8003234 <Si468x_set_audio_volume+0x60>)
 8003200:	4618      	mov	r0, r3
 8003202:	f00a fb1f 	bl	800d844 <itoa>
 8003206:	4603      	mov	r3, r0
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fca8 	bl	8003b60 <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 8003210:	2101      	movs	r1, #1
 8003212:	4809      	ldr	r0, [pc, #36]	@ (8003238 <Si468x_set_audio_volume+0x64>)
 8003214:	f000 fca4 	bl	8003b60 <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	2201      	movs	r2, #1
 800321c:	4619      	mov	r1, r3
 800321e:	200b      	movs	r0, #11
 8003220:	f002 fb76 	bl	8005910 <eeprom_write>
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20004bc4 	.word	0x20004bc4
 8003230:	0800e58c 	.word	0x0800e58c
 8003234:	200034d0 	.word	0x200034d0
 8003238:	0800e598 	.word	0x0800e598

0800323c <play_station>:
}



void play_station(uint8_t station_id)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	@ 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dab_management.actual_station = station_id;
 8003248:	4a40      	ldr	r2, [pc, #256]	@ (800334c <play_station+0x110>)
 800324a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800324e:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 8003250:	4b3e      	ldr	r3, [pc, #248]	@ (800334c <play_station+0x110>)
 8003252:	78da      	ldrb	r2, [r3, #3]
 8003254:	4b3d      	ldr	r3, [pc, #244]	@ (800334c <play_station+0x110>)
 8003256:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8003258:	2201      	movs	r2, #1
 800325a:	493d      	ldr	r1, [pc, #244]	@ (8003350 <play_station+0x114>)
 800325c:	f240 1007 	movw	r0, #263	@ 0x107
 8003260:	f002 fb56 	bl	8005910 <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 8003264:	2101      	movs	r1, #1
 8003266:	483b      	ldr	r0, [pc, #236]	@ (8003354 <play_station+0x118>)
 8003268:	f000 fc7a 	bl	8003b60 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 800326c:	2100      	movs	r1, #0
 800326e:	483a      	ldr	r0, [pc, #232]	@ (8003358 <play_station+0x11c>)
 8003270:	f000 fc76 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 8003274:	4b35      	ldr	r3, [pc, #212]	@ (800334c <play_station+0x110>)
 8003276:	78db      	ldrb	r3, [r3, #3]
 8003278:	3301      	adds	r3, #1
 800327a:	220a      	movs	r2, #10
 800327c:	4937      	ldr	r1, [pc, #220]	@ (800335c <play_station+0x120>)
 800327e:	4618      	mov	r0, r3
 8003280:	f00a fae0 	bl	800d844 <itoa>
 8003284:	4603      	mov	r3, r0
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fc69 	bl	8003b60 <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 800328e:	2100      	movs	r1, #0
 8003290:	4833      	ldr	r0, [pc, #204]	@ (8003360 <play_station+0x124>)
 8003292:	f000 fc65 	bl	8003b60 <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 8003296:	4b2d      	ldr	r3, [pc, #180]	@ (800334c <play_station+0x110>)
 8003298:	78db      	ldrb	r3, [r3, #3]
 800329a:	461a      	mov	r2, r3
 800329c:	2334      	movs	r3, #52	@ 0x34
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <play_station+0x128>)
 80032a4:	4413      	add	r3, r2
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fc59 	bl	8003b60 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, USE_ANT_CAP); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 80032ae:	4b27      	ldr	r3, [pc, #156]	@ (800334c <play_station+0x110>)
 80032b0:	78db      	ldrb	r3, [r3, #3]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003364 <play_station+0x128>)
 80032b6:	2334      	movs	r3, #52	@ 0x34
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	3328      	adds	r3, #40	@ 0x28
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe fc4b 	bl	8001b60 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <play_station+0x110>)
 80032cc:	78db      	ldrb	r3, [r3, #3]
 80032ce:	4619      	mov	r1, r3
 80032d0:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <play_station+0x128>)
 80032d2:	2334      	movs	r3, #52	@ 0x34
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3320      	adds	r3, #32
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <play_station+0x110>)
 80032e0:	78db      	ldrb	r3, [r3, #3]
 80032e2:	4618      	mov	r0, r3
 80032e4:	491f      	ldr	r1, [pc, #124]	@ (8003364 <play_station+0x128>)
 80032e6:	2334      	movs	r3, #52	@ 0x34
 80032e8:	fb00 f303 	mul.w	r3, r0, r3
 80032ec:	440b      	add	r3, r1
 80032ee:	332a      	adds	r3, #42	@ 0x2a
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7ff fd03 	bl	8002d00 <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 80032fa:	4b14      	ldr	r3, [pc, #80]	@ (800334c <play_station+0x110>)
 80032fc:	78db      	ldrb	r3, [r3, #3]
 80032fe:	4619      	mov	r1, r3
 8003300:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <play_station+0x128>)
 8003302:	2334      	movs	r3, #52	@ 0x34
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3320      	adds	r3, #32
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <play_station+0x110>)
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	4618      	mov	r0, r3
 8003314:	4913      	ldr	r1, [pc, #76]	@ (8003364 <play_station+0x128>)
 8003316:	2334      	movs	r3, #52	@ 0x34
 8003318:	fb00 f303 	mul.w	r3, r0, r3
 800331c:	440b      	add	r3, r1
 800331e:	332a      	adds	r3, #42	@ 0x2a
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7fe fffd 	bl	8002324 <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 800332a:	463b      	mov	r3, r7
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fcef 	bl	8001d10 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 8003332:	463b      	mov	r3, r7
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fbfb 	bl	8002b30 <Si468x_dab_get_audio_info>

	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x03);	//enable both service interrupts
 800333a:	2103      	movs	r1, #3
 800333c:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 8003340:	f7fe fb24 	bl	800198c <Si468x_set_property>
}
 8003344:	bf00      	nop
 8003346:	3730      	adds	r7, #48	@ 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20004bc4 	.word	0x20004bc4
 8003350:	20004bc8 	.word	0x20004bc8
 8003354:	0800e5ac 	.word	0x0800e5ac
 8003358:	0800e5d0 	.word	0x0800e5d0
 800335c:	200034d0 	.word	0x200034d0
 8003360:	0800e5e4 	.word	0x0800e5e4
 8003364:	20003774 	.word	0x20003774

08003368 <restore_from_eeprom>:

void restore_from_eeprom()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b094      	sub	sp, #80	@ 0x50
 800336c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 800336e:	2101      	movs	r1, #1
 8003370:	48a7      	ldr	r0, [pc, #668]	@ (8003610 <restore_from_eeprom+0x2a8>)
 8003372:	f000 fbf5 	bl	8003b60 <send_debug_msg>

	//restore frequency table

	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 8003376:	2201      	movs	r2, #1
 8003378:	49a6      	ldr	r1, [pc, #664]	@ (8003614 <restore_from_eeprom+0x2ac>)
 800337a:	203f      	movs	r0, #63	@ 0x3f
 800337c:	f002 faaa 	bl	80058d4 <eeprom_read>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003386:	e016      	b.n	80033b6 <restore_from_eeprom+0x4e>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 8003388:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800338c:	3302      	adds	r3, #2
 800338e:	015b      	lsls	r3, r3, #5
 8003390:	4618      	mov	r0, r3
 8003392:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4a9f      	ldr	r2, [pc, #636]	@ (8003618 <restore_from_eeprom+0x2b0>)
 800339c:	4413      	add	r3, r2
 800339e:	2220      	movs	r2, #32
 80033a0:	4619      	mov	r1, r3
 80033a2:	f002 fa97 	bl	80058d4 <eeprom_read>
		HAL_Delay(5);
 80033a6:	2005      	movs	r0, #5
 80033a8:	f004 fa7a 	bl	80078a0 <HAL_Delay>
	for (uint8_t i = 0; i < (192 / PAGE_SIZE); i++)
 80033ac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80033b0:	3301      	adds	r3, #1
 80033b2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80033b6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d9e4      	bls.n	8003388 <restore_from_eeprom+0x20>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 80033be:	2100      	movs	r1, #0
 80033c0:	4896      	ldr	r0, [pc, #600]	@ (800361c <restore_from_eeprom+0x2b4>)
 80033c2:	f000 fbcd 	bl	8003b60 <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 80033c6:	4b96      	ldr	r3, [pc, #600]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80033c8:	7b5b      	ldrb	r3, [r3, #13]
 80033ca:	220a      	movs	r2, #10
 80033cc:	4995      	ldr	r1, [pc, #596]	@ (8003624 <restore_from_eeprom+0x2bc>)
 80033ce:	4618      	mov	r0, r3
 80033d0:	f00a fa38 	bl	800d844 <itoa>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fbc1 	bl	8003b60 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 80033de:	2101      	movs	r1, #1
 80033e0:	4891      	ldr	r0, [pc, #580]	@ (8003628 <restore_from_eeprom+0x2c0>)
 80033e2:	f000 fbbd 	bl	8003b60 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ea:	e022      	b.n	8003432 <restore_from_eeprom+0xca>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 80033ec:	220a      	movs	r2, #10
 80033ee:	498d      	ldr	r1, [pc, #564]	@ (8003624 <restore_from_eeprom+0x2bc>)
 80033f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80033f2:	f00a fa27 	bl	800d844 <itoa>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fbb0 	bl	8003b60 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003400:	2100      	movs	r1, #0
 8003402:	488a      	ldr	r0, [pc, #552]	@ (800362c <restore_from_eeprom+0x2c4>)
 8003404:	f000 fbac 	bl	8003b60 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003408:	4a83      	ldr	r2, [pc, #524]	@ (8003618 <restore_from_eeprom+0x2b0>)
 800340a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	220a      	movs	r2, #10
 8003412:	4984      	ldr	r1, [pc, #528]	@ (8003624 <restore_from_eeprom+0x2bc>)
 8003414:	4618      	mov	r0, r3
 8003416:	f00a fa15 	bl	800d844 <itoa>
 800341a:	4603      	mov	r3, r0
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fb9e 	bl	8003b60 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 8003424:	2101      	movs	r1, #1
 8003426:	4882      	ldr	r0, [pc, #520]	@ (8003630 <restore_from_eeprom+0x2c8>)
 8003428:	f000 fb9a 	bl	8003b60 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 800342c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800342e:	3301      	adds	r3, #1
 8003430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003432:	4b7b      	ldr	r3, [pc, #492]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003434:	7b5b      	ldrb	r3, [r3, #13]
 8003436:	461a      	mov	r2, r3
 8003438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800343a:	4293      	cmp	r3, r2
 800343c:	dbd6      	blt.n	80033ec <restore_from_eeprom+0x84>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 800343e:	2201      	movs	r2, #1
 8003440:	497c      	ldr	r1, [pc, #496]	@ (8003634 <restore_from_eeprom+0x2cc>)
 8003442:	f240 1005 	movw	r0, #261	@ 0x105
 8003446:	f002 fa45 	bl	80058d4 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 800344a:	2201      	movs	r2, #1
 800344c:	4974      	ldr	r1, [pc, #464]	@ (8003620 <restore_from_eeprom+0x2b8>)
 800344e:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8003452:	f002 fa3f 	bl	80058d4 <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 8003456:	4b72      	ldr	r3, [pc, #456]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2bff      	cmp	r3, #255	@ 0xff
 800345c:	f000 82c2 	beq.w	80039e4 <restore_from_eeprom+0x67c>
 8003460:	4b6f      	ldr	r3, [pc, #444]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	2bff      	cmp	r3, #255	@ 0xff
 8003466:	f000 82bd 	beq.w	80039e4 <restore_from_eeprom+0x67c>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 800346a:	2204      	movs	r2, #4
 800346c:	4972      	ldr	r1, [pc, #456]	@ (8003638 <restore_from_eeprom+0x2d0>)
 800346e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003472:	f002 fa2f 	bl	80058d4 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 8003476:	2201      	movs	r2, #1
 8003478:	4970      	ldr	r1, [pc, #448]	@ (800363c <restore_from_eeprom+0x2d4>)
 800347a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800347e:	f002 fa29 	bl	80058d4 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 8003482:	2201      	movs	r2, #1
 8003484:	496e      	ldr	r1, [pc, #440]	@ (8003640 <restore_from_eeprom+0x2d8>)
 8003486:	f240 1007 	movw	r0, #263	@ 0x107
 800348a:	f002 fa23 	bl	80058d4 <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 800348e:	4b64      	ldr	r3, [pc, #400]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003490:	791b      	ldrb	r3, [r3, #4]
 8003492:	2bff      	cmp	r3, #255	@ 0xff
 8003494:	d102      	bne.n	800349c <restore_from_eeprom+0x134>
		{
			dab_management.last_station_index = 0;
 8003496:	4b62      	ldr	r3, [pc, #392]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003498:	2200      	movs	r2, #0
 800349a:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 800349c:	4b60      	ldr	r3, [pc, #384]	@ (8003620 <restore_from_eeprom+0x2b8>)
 800349e:	791a      	ldrb	r2, [r3, #4]
 80034a0:	4b5f      	ldr	r3, [pc, #380]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80034a2:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80034aa:	e012      	b.n	80034d2 <restore_from_eeprom+0x16a>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 80034ac:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80034b0:	330a      	adds	r3, #10
 80034b2:	015b      	lsls	r3, r3, #5
 80034b4:	4618      	mov	r0, r3
 80034b6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80034ba:	015b      	lsls	r3, r3, #5
 80034bc:	4a61      	ldr	r2, [pc, #388]	@ (8003644 <restore_from_eeprom+0x2dc>)
 80034be:	4413      	add	r3, r2
 80034c0:	2220      	movs	r2, #32
 80034c2:	4619      	mov	r1, r3
 80034c4:	f002 fa06 	bl	80058d4 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80034c8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80034cc:	3301      	adds	r3, #1
 80034ce:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80034d2:	4b53      	ldr	r3, [pc, #332]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3e6      	bcc.n	80034ac <restore_from_eeprom+0x144>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
			}
		}
		if(PAGE_SIZE == 32)
		{
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80034e4:	e026      	b.n	8003534 <restore_from_eeprom+0x1cc>
			{
				uint8_t temp [64];
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2, &temp[0], 32);
 80034e6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80034ea:	330f      	adds	r3, #15
 80034ec:	019b      	lsls	r3, r3, #6
 80034ee:	4618      	mov	r0, r3
 80034f0:	463b      	mov	r3, r7
 80034f2:	2220      	movs	r2, #32
 80034f4:	4619      	mov	r1, r3
 80034f6:	f002 f9ed 	bl	80058d4 <eeprom_read>
				eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 80034fa:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80034fe:	330f      	adds	r3, #15
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	3320      	adds	r3, #32
 8003504:	4618      	mov	r0, r3
 8003506:	463b      	mov	r3, r7
 8003508:	3320      	adds	r3, #32
 800350a:	2214      	movs	r2, #20
 800350c:	4619      	mov	r1, r3
 800350e:	f002 f9e1 	bl	80058d4 <eeprom_read>
				memcpy(&services_list[i], &temp, sizeof(dab_service_t));
 8003512:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003516:	2234      	movs	r2, #52	@ 0x34
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	4a4a      	ldr	r2, [pc, #296]	@ (8003648 <restore_from_eeprom+0x2e0>)
 800351e:	4413      	add	r3, r2
 8003520:	4639      	mov	r1, r7
 8003522:	2234      	movs	r2, #52	@ 0x34
 8003524:	4618      	mov	r0, r3
 8003526:	f00a f9fd 	bl	800d924 <memcpy>
			for(uint8_t i = 0; i < dab_management.total_services; i++)
 800352a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800352e:	3301      	adds	r3, #1
 8003530:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003534:	4b3a      	ldr	r3, [pc, #232]	@ (8003620 <restore_from_eeprom+0x2b8>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 800353c:	429a      	cmp	r2, r3
 800353e:	d3d2      	bcc.n	80034e6 <restore_from_eeprom+0x17e>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 8003540:	2100      	movs	r1, #0
 8003542:	4836      	ldr	r0, [pc, #216]	@ (800361c <restore_from_eeprom+0x2b4>)
 8003544:	f000 fb0c 	bl	8003b60 <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003548:	4b35      	ldr	r3, [pc, #212]	@ (8003620 <restore_from_eeprom+0x2b8>)
 800354a:	7b5b      	ldrb	r3, [r3, #13]
 800354c:	220a      	movs	r2, #10
 800354e:	4935      	ldr	r1, [pc, #212]	@ (8003624 <restore_from_eeprom+0x2bc>)
 8003550:	4618      	mov	r0, r3
 8003552:	f00a f977 	bl	800d844 <itoa>
 8003556:	4603      	mov	r3, r0
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fb00 	bl	8003b60 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 8003560:	2101      	movs	r1, #1
 8003562:	4831      	ldr	r0, [pc, #196]	@ (8003628 <restore_from_eeprom+0x2c0>)
 8003564:	f000 fafc 	bl	8003b60 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 8003568:	2300      	movs	r3, #0
 800356a:	647b      	str	r3, [r7, #68]	@ 0x44
 800356c:	e022      	b.n	80035b4 <restore_from_eeprom+0x24c>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 800356e:	220a      	movs	r2, #10
 8003570:	492c      	ldr	r1, [pc, #176]	@ (8003624 <restore_from_eeprom+0x2bc>)
 8003572:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003574:	f00a f966 	bl	800d844 <itoa>
 8003578:	4603      	mov	r3, r0
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f000 faef 	bl	8003b60 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 8003582:	2100      	movs	r1, #0
 8003584:	4829      	ldr	r0, [pc, #164]	@ (800362c <restore_from_eeprom+0x2c4>)
 8003586:	f000 faeb 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 800358a:	4a23      	ldr	r2, [pc, #140]	@ (8003618 <restore_from_eeprom+0x2b0>)
 800358c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003592:	220a      	movs	r2, #10
 8003594:	4923      	ldr	r1, [pc, #140]	@ (8003624 <restore_from_eeprom+0x2bc>)
 8003596:	4618      	mov	r0, r3
 8003598:	f00a f954 	bl	800d844 <itoa>
 800359c:	4603      	mov	r3, r0
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fadd 	bl	8003b60 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 80035a6:	2101      	movs	r1, #1
 80035a8:	4821      	ldr	r0, [pc, #132]	@ (8003630 <restore_from_eeprom+0x2c8>)
 80035aa:	f000 fad9 	bl	8003b60 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 80035ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b0:	3301      	adds	r3, #1
 80035b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80035b6:	7b5b      	ldrb	r3, [r3, #13]
 80035b8:	461a      	mov	r2, r3
 80035ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035bc:	4293      	cmp	r3, r2
 80035be:	dbd6      	blt.n	800356e <restore_from_eeprom+0x206>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80035c0:	2100      	movs	r1, #0
 80035c2:	4822      	ldr	r0, [pc, #136]	@ (800364c <restore_from_eeprom+0x2e4>)
 80035c4:	f000 facc 	bl	8003b60 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 80035c8:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <restore_from_eeprom+0x2b8>)
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	220a      	movs	r2, #10
 80035ce:	4915      	ldr	r1, [pc, #84]	@ (8003624 <restore_from_eeprom+0x2bc>)
 80035d0:	4618      	mov	r0, r3
 80035d2:	f00a f937 	bl	800d844 <itoa>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fac0 	bl	8003b60 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80035e0:	2101      	movs	r1, #1
 80035e2:	481b      	ldr	r0, [pc, #108]	@ (8003650 <restore_from_eeprom+0x2e8>)
 80035e4:	f000 fabc 	bl	8003b60 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80035e8:	2100      	movs	r1, #0
 80035ea:	481a      	ldr	r0, [pc, #104]	@ (8003654 <restore_from_eeprom+0x2ec>)
 80035ec:	f000 fab8 	bl	8003b60 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80035f0:	2100      	movs	r1, #0
 80035f2:	4819      	ldr	r0, [pc, #100]	@ (8003658 <restore_from_eeprom+0x2f0>)
 80035f4:	f000 fab4 	bl	8003b60 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80035f8:	2100      	movs	r1, #0
 80035fa:	4818      	ldr	r0, [pc, #96]	@ (800365c <restore_from_eeprom+0x2f4>)
 80035fc:	f000 fab0 	bl	8003b60 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 8003600:	2101      	movs	r1, #1
 8003602:	4817      	ldr	r0, [pc, #92]	@ (8003660 <restore_from_eeprom+0x2f8>)
 8003604:	f000 faac 	bl	8003b60 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800360e:	e086      	b.n	800371e <restore_from_eeprom+0x3b6>
 8003610:	0800e5ec 	.word	0x0800e5ec
 8003614:	20004bd1 	.word	0x20004bd1
 8003618:	20003514 	.word	0x20003514
 800361c:	0800df24 	.word	0x0800df24
 8003620:	20004bc4 	.word	0x20004bc4
 8003624:	200034d0 	.word	0x200034d0
 8003628:	0800df2c 	.word	0x0800df2c
 800362c:	0800df44 	.word	0x0800df44
 8003630:	0800df48 	.word	0x0800df48
 8003634:	20004bc5 	.word	0x20004bc5
 8003638:	20004bcc 	.word	0x20004bcc
 800363c:	20004bd0 	.word	0x20004bd0
 8003640:	20004bc8 	.word	0x20004bc8
 8003644:	20003634 	.word	0x20003634
 8003648:	20003774 	.word	0x20003774
 800364c:	0800e1b4 	.word	0x0800e1b4
 8003650:	0800e1c8 	.word	0x0800e1c8
 8003654:	0800e1fc 	.word	0x0800e1fc
 8003658:	0800e208 	.word	0x0800e208
 800365c:	0800e21c 	.word	0x0800e21c
 8003660:	0800e22c 	.word	0x0800e22c
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8003664:	2100      	movs	r1, #0
 8003666:	48cc      	ldr	r0, [pc, #816]	@ (8003998 <restore_from_eeprom+0x630>)
 8003668:	f000 fa7a 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 800366c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003670:	3301      	adds	r3, #1
 8003672:	220a      	movs	r2, #10
 8003674:	49c9      	ldr	r1, [pc, #804]	@ (800399c <restore_from_eeprom+0x634>)
 8003676:	4618      	mov	r0, r3
 8003678:	f00a f8e4 	bl	800d844 <itoa>
 800367c:	4603      	mov	r3, r0
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa6d 	bl	8003b60 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8003686:	2100      	movs	r1, #0
 8003688:	48c5      	ldr	r0, [pc, #788]	@ (80039a0 <restore_from_eeprom+0x638>)
 800368a:	f000 fa69 	bl	8003b60 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 800368e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003692:	015b      	lsls	r3, r3, #5
 8003694:	4ac3      	ldr	r2, [pc, #780]	@ (80039a4 <restore_from_eeprom+0x63c>)
 8003696:	4413      	add	r3, r2
 8003698:	3302      	adds	r3, #2
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fa5f 	bl	8003b60 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 80036a2:	2100      	movs	r1, #0
 80036a4:	48bc      	ldr	r0, [pc, #752]	@ (8003998 <restore_from_eeprom+0x630>)
 80036a6:	f000 fa5b 	bl	8003b60 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80036aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036ae:	4abd      	ldr	r2, [pc, #756]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80036b0:	015b      	lsls	r3, r3, #5
 80036b2:	4413      	add	r3, r2
 80036b4:	3318      	adds	r3, #24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	220a      	movs	r2, #10
 80036ba:	49b8      	ldr	r1, [pc, #736]	@ (800399c <restore_from_eeprom+0x634>)
 80036bc:	4618      	mov	r0, r3
 80036be:	f00a f8c1 	bl	800d844 <itoa>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa4a 	bl	8003b60 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80036cc:	2100      	movs	r1, #0
 80036ce:	48b6      	ldr	r0, [pc, #728]	@ (80039a8 <restore_from_eeprom+0x640>)
 80036d0:	f000 fa46 	bl	8003b60 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80036d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036d8:	4ab2      	ldr	r2, [pc, #712]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	4413      	add	r3, r2
 80036de:	331c      	adds	r3, #28
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4bb1      	ldr	r3, [pc, #708]	@ (80039ac <restore_from_eeprom+0x644>)
 80036e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fa37 	bl	8003b60 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80036f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036f6:	4aab      	ldr	r2, [pc, #684]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80036f8:	015b      	lsls	r3, r3, #5
 80036fa:	4413      	add	r3, r2
 80036fc:	331c      	adds	r3, #28
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b13      	cmp	r3, #19
 8003702:	d803      	bhi.n	800370c <restore_from_eeprom+0x3a4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003704:	2100      	movs	r1, #0
 8003706:	48aa      	ldr	r0, [pc, #680]	@ (80039b0 <restore_from_eeprom+0x648>)
 8003708:	f000 fa2a 	bl	8003b60 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 800370c:	2101      	movs	r1, #1
 800370e:	48a9      	ldr	r0, [pc, #676]	@ (80039b4 <restore_from_eeprom+0x64c>)
 8003710:	f000 fa26 	bl	8003b60 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 8003714:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003718:	3301      	adds	r3, #1
 800371a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800371e:	4ba6      	ldr	r3, [pc, #664]	@ (80039b8 <restore_from_eeprom+0x650>)
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8003726:	429a      	cmp	r2, r3
 8003728:	d39c      	bcc.n	8003664 <restore_from_eeprom+0x2fc>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800372a:	2101      	movs	r1, #1
 800372c:	48a3      	ldr	r0, [pc, #652]	@ (80039bc <restore_from_eeprom+0x654>)
 800372e:	f000 fa17 	bl	8003b60 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 8003732:	2100      	movs	r1, #0
 8003734:	48a2      	ldr	r0, [pc, #648]	@ (80039c0 <restore_from_eeprom+0x658>)
 8003736:	f000 fa13 	bl	8003b60 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 800373a:	4b9f      	ldr	r3, [pc, #636]	@ (80039b8 <restore_from_eeprom+0x650>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	220a      	movs	r2, #10
 8003740:	4996      	ldr	r1, [pc, #600]	@ (800399c <restore_from_eeprom+0x634>)
 8003742:	4618      	mov	r0, r3
 8003744:	f00a f87e 	bl	800d844 <itoa>
 8003748:	4603      	mov	r3, r0
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fa07 	bl	8003b60 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003752:	2101      	movs	r1, #1
 8003754:	489b      	ldr	r0, [pc, #620]	@ (80039c4 <restore_from_eeprom+0x65c>)
 8003756:	f000 fa03 	bl	8003b60 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 800375a:	2101      	movs	r1, #1
 800375c:	489a      	ldr	r0, [pc, #616]	@ (80039c8 <restore_from_eeprom+0x660>)
 800375e:	f000 f9ff 	bl	8003b60 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003762:	2300      	movs	r3, #0
 8003764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003768:	e0f7      	b.n	800395a <restore_from_eeprom+0x5f2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 800376a:	2100      	movs	r1, #0
 800376c:	488a      	ldr	r0, [pc, #552]	@ (8003998 <restore_from_eeprom+0x630>)
 800376e:	f000 f9f7 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003772:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003776:	3301      	adds	r3, #1
 8003778:	220a      	movs	r2, #10
 800377a:	4988      	ldr	r1, [pc, #544]	@ (800399c <restore_from_eeprom+0x634>)
 800377c:	4618      	mov	r0, r3
 800377e:	f00a f861 	bl	800d844 <itoa>
 8003782:	4603      	mov	r3, r0
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f9ea 	bl	8003b60 <send_debug_msg>
			if((services_index +1) < 10)
 800378c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003790:	2b08      	cmp	r3, #8
 8003792:	d803      	bhi.n	800379c <restore_from_eeprom+0x434>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003794:	2100      	movs	r1, #0
 8003796:	4886      	ldr	r0, [pc, #536]	@ (80039b0 <restore_from_eeprom+0x648>)
 8003798:	f000 f9e2 	bl	8003b60 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 800379c:	2100      	movs	r1, #0
 800379e:	488b      	ldr	r0, [pc, #556]	@ (80039cc <restore_from_eeprom+0x664>)
 80037a0:	f000 f9de 	bl	8003b60 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 80037a4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80037a8:	2234      	movs	r2, #52	@ 0x34
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	4a88      	ldr	r2, [pc, #544]	@ (80039d0 <restore_from_eeprom+0x668>)
 80037b0:	4413      	add	r3, r2
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f9d3 	bl	8003b60 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 80037ba:	2100      	movs	r1, #0
 80037bc:	4885      	ldr	r0, [pc, #532]	@ (80039d4 <restore_from_eeprom+0x66c>)
 80037be:	f000 f9cf 	bl	8003b60 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80037c8:	e021      	b.n	800380e <restore_from_eeprom+0x4a6>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 80037ca:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80037ce:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	4413      	add	r3, r2
 80037d4:	331c      	adds	r3, #28
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80037dc:	497c      	ldr	r1, [pc, #496]	@ (80039d0 <restore_from_eeprom+0x668>)
 80037de:	2034      	movs	r0, #52	@ 0x34
 80037e0:	fb00 f303 	mul.w	r3, r0, r3
 80037e4:	440b      	add	r3, r1
 80037e6:	3328      	adds	r3, #40	@ 0x28
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10a      	bne.n	8003804 <restore_from_eeprom+0x49c>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80037ee:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80037f2:	015b      	lsls	r3, r3, #5
 80037f4:	4a6b      	ldr	r2, [pc, #428]	@ (80039a4 <restore_from_eeprom+0x63c>)
 80037f6:	4413      	add	r3, r2
 80037f8:	3302      	adds	r3, #2
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f9af 	bl	8003b60 <send_debug_msg>
					break;
 8003802:	e00a      	b.n	800381a <restore_from_eeprom+0x4b2>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003804:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003808:	3301      	adds	r3, #1
 800380a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800380e:	4b6a      	ldr	r3, [pc, #424]	@ (80039b8 <restore_from_eeprom+0x650>)
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8003816:	429a      	cmp	r2, r3
 8003818:	d3d7      	bcc.n	80037ca <restore_from_eeprom+0x462>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 800381a:	2100      	movs	r1, #0
 800381c:	486d      	ldr	r0, [pc, #436]	@ (80039d4 <restore_from_eeprom+0x66c>)
 800381e:	f000 f99f 	bl	8003b60 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003822:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003826:	4a6a      	ldr	r2, [pc, #424]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003828:	2134      	movs	r1, #52	@ 0x34
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3324      	adds	r3, #36	@ 0x24
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	220a      	movs	r2, #10
 8003836:	4959      	ldr	r1, [pc, #356]	@ (800399c <restore_from_eeprom+0x634>)
 8003838:	4618      	mov	r0, r3
 800383a:	f00a f803 	bl	800d844 <itoa>
 800383e:	4603      	mov	r3, r0
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f98c 	bl	8003b60 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8003848:	2100      	movs	r1, #0
 800384a:	4857      	ldr	r0, [pc, #348]	@ (80039a8 <restore_from_eeprom+0x640>)
 800384c:	f000 f988 	bl	8003b60 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8003850:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003854:	4a5e      	ldr	r2, [pc, #376]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003856:	2134      	movs	r1, #52	@ 0x34
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3328      	adds	r3, #40	@ 0x28
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4b51      	ldr	r3, [pc, #324]	@ (80039ac <restore_from_eeprom+0x644>)
 8003866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f977 	bl	8003b60 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8003872:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003876:	4a56      	ldr	r2, [pc, #344]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003878:	2134      	movs	r1, #52	@ 0x34
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	3328      	adds	r3, #40	@ 0x28
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b13      	cmp	r3, #19
 8003886:	d803      	bhi.n	8003890 <restore_from_eeprom+0x528>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003888:	2100      	movs	r1, #0
 800388a:	4849      	ldr	r0, [pc, #292]	@ (80039b0 <restore_from_eeprom+0x648>)
 800388c:	f000 f968 	bl	8003b60 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003890:	2100      	movs	r1, #0
 8003892:	484e      	ldr	r0, [pc, #312]	@ (80039cc <restore_from_eeprom+0x664>)
 8003894:	f000 f964 	bl	8003b60 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8003898:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800389c:	4a4c      	ldr	r2, [pc, #304]	@ (80039d0 <restore_from_eeprom+0x668>)
 800389e:	2134      	movs	r1, #52	@ 0x34
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3315      	adds	r3, #21
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	220a      	movs	r2, #10
 80038ac:	493b      	ldr	r1, [pc, #236]	@ (800399c <restore_from_eeprom+0x634>)
 80038ae:	4618      	mov	r0, r3
 80038b0:	f009 ffc8 	bl	800d844 <itoa>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f951 	bl	8003b60 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 80038be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80038c2:	4a43      	ldr	r2, [pc, #268]	@ (80039d0 <restore_from_eeprom+0x668>)
 80038c4:	2134      	movs	r1, #52	@ 0x34
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3315      	adds	r3, #21
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d803      	bhi.n	80038dc <restore_from_eeprom+0x574>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80038d4:	2100      	movs	r1, #0
 80038d6:	4836      	ldr	r0, [pc, #216]	@ (80039b0 <restore_from_eeprom+0x648>)
 80038d8:	f000 f942 	bl	8003b60 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80038dc:	2100      	movs	r1, #0
 80038de:	483e      	ldr	r0, [pc, #248]	@ (80039d8 <restore_from_eeprom+0x670>)
 80038e0:	f000 f93e 	bl	8003b60 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80038e4:	2100      	movs	r1, #0
 80038e6:	483d      	ldr	r0, [pc, #244]	@ (80039dc <restore_from_eeprom+0x674>)
 80038e8:	f000 f93a 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 80038ec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80038f0:	4a37      	ldr	r2, [pc, #220]	@ (80039d0 <restore_from_eeprom+0x668>)
 80038f2:	2134      	movs	r1, #52	@ 0x34
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	3320      	adds	r3, #32
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2210      	movs	r2, #16
 8003900:	4926      	ldr	r1, [pc, #152]	@ (800399c <restore_from_eeprom+0x634>)
 8003902:	4618      	mov	r0, r3
 8003904:	f009 ff9e 	bl	800d844 <itoa>
 8003908:	4603      	mov	r3, r0
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f927 	bl	8003b60 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003912:	2100      	movs	r1, #0
 8003914:	482d      	ldr	r0, [pc, #180]	@ (80039cc <restore_from_eeprom+0x664>)
 8003916:	f000 f923 	bl	8003b60 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 800391a:	2100      	movs	r1, #0
 800391c:	482f      	ldr	r0, [pc, #188]	@ (80039dc <restore_from_eeprom+0x674>)
 800391e:	f000 f91f 	bl	8003b60 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8003922:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003926:	4a2a      	ldr	r2, [pc, #168]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003928:	2134      	movs	r1, #52	@ 0x34
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	332a      	adds	r3, #42	@ 0x2a
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2210      	movs	r2, #16
 8003936:	4919      	ldr	r1, [pc, #100]	@ (800399c <restore_from_eeprom+0x634>)
 8003938:	4618      	mov	r0, r3
 800393a:	f009 ff83 	bl	800d844 <itoa>
 800393e:	4603      	mov	r3, r0
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f90c 	bl	8003b60 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8003948:	2101      	movs	r1, #1
 800394a:	4825      	ldr	r0, [pc, #148]	@ (80039e0 <restore_from_eeprom+0x678>)
 800394c:	f000 f908 	bl	8003b60 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003950:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003954:	3301      	adds	r3, #1
 8003956:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800395a:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <restore_from_eeprom+0x650>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8003962:	429a      	cmp	r2, r3
 8003964:	f4ff af01 	bcc.w	800376a <restore_from_eeprom+0x402>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8003968:	2101      	movs	r1, #1
 800396a:	4816      	ldr	r0, [pc, #88]	@ (80039c4 <restore_from_eeprom+0x65c>)
 800396c:	f000 f8f8 	bl	8003b60 <send_debug_msg>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, USE_ANT_CAP);
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <restore_from_eeprom+0x650>)
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	4619      	mov	r1, r3
 8003976:	4a16      	ldr	r2, [pc, #88]	@ (80039d0 <restore_from_eeprom+0x668>)
 8003978:	2334      	movs	r3, #52	@ 0x34
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3328      	adds	r3, #40	@ 0x28
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe f8ea 	bl	8001b60 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <restore_from_eeprom+0x650>)
 800398e:	791b      	ldrb	r3, [r3, #4]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fc53 	bl	800323c <play_station>
 8003996:	e038      	b.n	8003a0a <restore_from_eeprom+0x6a2>
 8003998:	0800e23c 	.word	0x0800e23c
 800399c:	200034d0 	.word	0x200034d0
 80039a0:	0800e240 	.word	0x0800e240
 80039a4:	20003634 	.word	0x20003634
 80039a8:	0800e24c 	.word	0x0800e24c
 80039ac:	20000008 	.word	0x20000008
 80039b0:	0800e254 	.word	0x0800e254
 80039b4:	0800e258 	.word	0x0800e258
 80039b8:	20004bc4 	.word	0x20004bc4
 80039bc:	0800e1c8 	.word	0x0800e1c8
 80039c0:	0800e260 	.word	0x0800e260
 80039c4:	0800e274 	.word	0x0800e274
 80039c8:	0800e2e0 	.word	0x0800e2e0
 80039cc:	0800e34c 	.word	0x0800e34c
 80039d0:	20003774 	.word	0x20003774
 80039d4:	0800e354 	.word	0x0800e354
 80039d8:	0800e358 	.word	0x0800e358
 80039dc:	0800e360 	.word	0x0800e360
 80039e0:	0800e364 	.word	0x0800e364

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 80039e4:	2101      	movs	r1, #1
 80039e6:	4816      	ldr	r0, [pc, #88]	@ (8003a40 <restore_from_eeprom+0x6d8>)
 80039e8:	f000 f8ba 	bl	8003b60 <send_debug_msg>
		dab_management.actual_freq = 0;
 80039ec:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 80039f2:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 80039fe:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 8003a04:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	70da      	strb	r2, [r3, #3]
	}
	//restore volume level
	eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	490e      	ldr	r1, [pc, #56]	@ (8003a48 <restore_from_eeprom+0x6e0>)
 8003a0e:	200b      	movs	r0, #11
 8003a10:	f001 ff60 	bl	80058d4 <eeprom_read>
	if(dab_management.audio_volume > 63)
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a16:	7b9b      	ldrb	r3, [r3, #14]
 8003a18:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a1a:	d907      	bls.n	8003a2c <restore_from_eeprom+0x6c4>
	{
		dab_management.audio_volume = 63;
 8003a1c:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a1e:	223f      	movs	r2, #63	@ 0x3f
 8003a20:	739a      	strb	r2, [r3, #14]
		eeprom_write(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8003a22:	2201      	movs	r2, #1
 8003a24:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <restore_from_eeprom+0x6e0>)
 8003a26:	200b      	movs	r0, #11
 8003a28:	f001 ff72 	bl	8005910 <eeprom_write>
	}
	Si468x_set_audio_volume(dab_management.audio_volume);
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <restore_from_eeprom+0x6dc>)
 8003a2e:	7b9b      	ldrb	r3, [r3, #14]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fbcf 	bl	80031d4 <Si468x_set_audio_volume>
}
 8003a36:	bf00      	nop
 8003a38:	3750      	adds	r7, #80	@ 0x50
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	0800e628 	.word	0x0800e628
 8003a44:	20004bc4 	.word	0x20004bc4
 8003a48:	20004bd2 	.word	0x20004bd2

08003a4c <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
	return services_list;
 8003a50:	4b02      	ldr	r3, [pc, #8]	@ (8003a5c <get_dab_service_list+0x10>)
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	20003774 	.word	0x20003774

08003a60 <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	return ensembles_list;
 8003a64:	4b02      	ldr	r3, [pc, #8]	@ (8003a70 <get_dab_ensemble_list+0x10>)
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20003634 	.word	0x20003634

08003a74 <get_dab_management>:

dab_management_t get_dab_management()
{
 8003a74:	b490      	push	{r4, r7}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	return dab_management;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <get_dab_management+0x20>)
 8003a80:	461c      	mov	r4, r3
 8003a82:	4613      	mov	r3, r2
 8003a84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc90      	pop	{r4, r7}
 8003a92:	4770      	bx	lr
 8003a94:	20004bc4 	.word	0x20004bc4

08003a98 <get_dls_label>:

char* get_dls_label()
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
	return dls_label;
 8003a9c:	4b02      	ldr	r3, [pc, #8]	@ (8003aa8 <get_dls_label+0x10>)
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20004bd4 	.word	0x20004bd4

08003aac <Alarming_Init>:
#include "leds.h"

static alarming_status_t alarming_status;

void Alarming_Init()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
	Alarming_Off();
 8003ab0:	f000 f838 	bl	8003b24 <Alarming_Off>
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <Alarming_Mode_1_On>:

void Alarming_Mode_1_On()
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_1;
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <Alarming_Mode_1_On+0x20>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
	LEDs_Red_On();
 8003ac2:	f002 fa29 	bl	8005f18 <LEDs_Red_On>
	LEDs_Green_Off();
 8003ac6:	f002 fa4b 	bl	8005f60 <LEDs_Green_Off>
	LEDs_Blue_Off();
 8003aca:	f002 fa61 	bl	8005f90 <LEDs_Blue_Off>
	LEDs_Orange_Off();
 8003ace:	f002 fa77 	bl	8005fc0 <LEDs_Orange_Off>

}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20006d8c 	.word	0x20006d8c

08003adc <Alarming_Mode_2_On>:

void Alarming_Mode_2_On()
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_2;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <Alarming_Mode_2_On+0x20>)
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 8003ae6:	f002 fa23 	bl	8005f30 <LEDs_Red_Off>
	LEDs_Green_Off();
 8003aea:	f002 fa39 	bl	8005f60 <LEDs_Green_Off>
	LEDs_Blue_On();
 8003aee:	f002 fa43 	bl	8005f78 <LEDs_Blue_On>
	LEDs_Orange_Off();
 8003af2:	f002 fa65 	bl	8005fc0 <LEDs_Orange_Off>

}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20006d8c 	.word	0x20006d8c

08003b00 <Alarming_Mode_3_On>:

void Alarming_Mode_3_On()
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
	alarming_status = alarming_mode_3;
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <Alarming_Mode_3_On+0x20>)
 8003b06:	2203      	movs	r2, #3
 8003b08:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 8003b0a:	f002 fa11 	bl	8005f30 <LEDs_Red_Off>
	LEDs_Green_Off();
 8003b0e:	f002 fa27 	bl	8005f60 <LEDs_Green_Off>
	LEDs_Blue_Off();
 8003b12:	f002 fa3d 	bl	8005f90 <LEDs_Blue_Off>
	LEDs_Orange_On();
 8003b16:	f002 fa47 	bl	8005fa8 <LEDs_Orange_On>

}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20006d8c 	.word	0x20006d8c

08003b24 <Alarming_Off>:

void Alarming_Off()
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
	alarming_status = alarming_off;
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <Alarming_Off+0x20>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
	LEDs_Red_Off();
 8003b2e:	f002 f9ff 	bl	8005f30 <LEDs_Red_Off>
	LEDs_Green_On();
 8003b32:	f002 fa09 	bl	8005f48 <LEDs_Green_On>
	LEDs_Blue_Off();
 8003b36:	f002 fa2b 	bl	8005f90 <LEDs_Blue_Off>
	LEDs_Orange_Off();
 8003b3a:	f002 fa41 	bl	8005fc0 <LEDs_Orange_Off>

}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20006d8c 	.word	0x20006d8c

08003b48 <Alarming_Get_Status>:

alarming_status_t Alarming_Get_Status()
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	return alarming_status;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	@ (8003b5c <Alarming_Get_Status+0x14>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20006d8c 	.word	0x20006d8c

08003b60 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fc fb35 	bl	80001dc <strlen>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	2364      	movs	r3, #100	@ 0x64
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	480a      	ldr	r0, [pc, #40]	@ (8003ba8 <send_debug_msg+0x48>)
 8003b80:	f009 fad3 	bl	800d12a <HAL_UART_Transmit>

	if(is_crlf)
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8003b8a:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003b8e:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003b90:	f107 010c 	add.w	r1, r7, #12
 8003b94:	2364      	movs	r3, #100	@ 0x64
 8003b96:	2202      	movs	r2, #2
 8003b98:	4803      	ldr	r0, [pc, #12]	@ (8003ba8 <send_debug_msg+0x48>)
 8003b9a:	f009 fac6 	bl	800d12a <HAL_UART_Transmit>
	}
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20007198 	.word	0x20007198

08003bac <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[129];

void Display_clear_screen()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	f7fc fe9a 	bl	80008ec <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 8003bb8:	2311      	movs	r3, #17
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003bc0:	2211      	movs	r2, #17
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8003bc8:	f7fc ff1b 	bl	8000a02 <ILI9341_Draw_Line>
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <Display_booting_screen>:

void Display_booting_screen()
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	af00      	add	r7, sp, #0
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
	*/
	ILI9341_Draw_Start_Screen();
 8003bd6:	f7fd fa5f 	bl	8001098 <ILI9341_Draw_Start_Screen>
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <Display_main_screen_background>:

void Display_main_screen_background()
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 8003be6:	f7ff ffe1 	bl	8003bac <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2);
 8003bea:	2302      	movs	r3, #2
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	4b40      	ldr	r3, [pc, #256]	@ (8003cf0 <Display_main_screen_background+0x110>)
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	2005      	movs	r0, #5
 8003bfc:	f7fc ff82 	bl	8000b04 <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8003c00:	2328      	movs	r3, #40	@ 0x28
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	238c      	movs	r3, #140	@ 0x8c
 8003c06:	2214      	movs	r2, #20
 8003c08:	2105      	movs	r1, #5
 8003c0a:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c0e:	f7fc fed7 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003c12:	2341      	movs	r3, #65	@ 0x41
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	238c      	movs	r3, #140	@ 0x8c
 8003c18:	222d      	movs	r2, #45	@ 0x2d
 8003c1a:	2105      	movs	r1, #5
 8003c1c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c20:	f7fc fece 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003c24:	235a      	movs	r3, #90	@ 0x5a
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	238c      	movs	r3, #140	@ 0x8c
 8003c2a:	2246      	movs	r2, #70	@ 0x46
 8003c2c:	2105      	movs	r1, #5
 8003c2e:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c32:	f7fc fec5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003c36:	2373      	movs	r3, #115	@ 0x73
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	238c      	movs	r3, #140	@ 0x8c
 8003c3c:	225f      	movs	r2, #95	@ 0x5f
 8003c3e:	2105      	movs	r1, #5
 8003c40:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c44:	f7fc febc 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003c48:	238c      	movs	r3, #140	@ 0x8c
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	238c      	movs	r3, #140	@ 0x8c
 8003c4e:	2278      	movs	r2, #120	@ 0x78
 8003c50:	2105      	movs	r1, #5
 8003c52:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c56:	f7fc feb3 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003c5a:	23a5      	movs	r3, #165	@ 0xa5
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	238c      	movs	r3, #140	@ 0x8c
 8003c60:	2291      	movs	r2, #145	@ 0x91
 8003c62:	2105      	movs	r1, #5
 8003c64:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c68:	f7fc feaa 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003c6c:	23be      	movs	r3, #190	@ 0xbe
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	238c      	movs	r3, #140	@ 0x8c
 8003c72:	22aa      	movs	r2, #170	@ 0xaa
 8003c74:	2105      	movs	r1, #5
 8003c76:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c7a:	f7fc fea1 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8003c7e:	23be      	movs	r3, #190	@ 0xbe
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	f240 133b 	movw	r3, #315	@ 0x13b
 8003c86:	2214      	movs	r2, #20
 8003c88:	2191      	movs	r1, #145	@ 0x91
 8003c8a:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8003c8e:	f7fc fe97 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003c92:	23eb      	movs	r3, #235	@ 0xeb
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	239d      	movs	r3, #157	@ 0x9d
 8003c98:	22c3      	movs	r2, #195	@ 0xc3
 8003c9a:	2105      	movs	r1, #5
 8003c9c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8003ca0:	f7fc fe8e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003ca4:	23eb      	movs	r3, #235	@ 0xeb
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	f240 133b 	movw	r3, #315	@ 0x13b
 8003cac:	22c3      	movs	r2, #195	@ 0xc3
 8003cae:	21a3      	movs	r1, #163	@ 0xa3
 8003cb0:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8003cb4:	f7fc fe84 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(53, 207, WHITE, ORANGE, "ALARMING", 2);
 8003cb8:	2302      	movs	r3, #2
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <Display_main_screen_background+0x114>)
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8003cc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cc8:	21cf      	movs	r1, #207	@ 0xcf
 8003cca:	2035      	movs	r0, #53	@ 0x35
 8003ccc:	f7fc ff1a 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <Display_main_screen_background+0x118>)
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8003cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ce0:	21cf      	movs	r1, #207	@ 0xcf
 8003ce2:	20c0      	movs	r0, #192	@ 0xc0
 8003ce4:	f7fc ff0e 	bl	8000b04 <ILI9341_Draw_String>
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	0800e75c 	.word	0x0800e75c
 8003cf4:	0800e76c 	.word	0x0800e76c
 8003cf8:	0800e778 	.word	0x0800e778

08003cfc <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af02      	add	r7, sp, #8
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
 8003d08:	f107 0118 	add.w	r1, r7, #24
 8003d0c:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 8003d10:	7efb      	ldrb	r3, [r7, #27]
 8003d12:	461a      	mov	r2, r3
 8003d14:	2334      	movs	r3, #52	@ 0x34
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2302      	movs	r3, #2
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	9200      	str	r2, [sp, #0]
 8003d26:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d2e:	2117      	movs	r1, #23
 8003d30:	2008      	movs	r0, #8
 8003d32:	f7fc fee7 	bl	8000b04 <ILI9341_Draw_String>
//
//	//BAr3
//	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);

	//Bar 4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 8003d36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d38:	2b63      	cmp	r3, #99	@ 0x63
 8003d3a:	d81e      	bhi.n	8003d7a <Display_main_screen_data+0x7e>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	4b82      	ldr	r3, [pc, #520]	@ (8003f4c <Display_main_screen_data+0x250>)
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d4c:	217b      	movs	r1, #123	@ 0x7b
 8003d4e:	2008      	movs	r0, #8
 8003d50:	f7fc fed8 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003d54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d56:	220a      	movs	r2, #10
 8003d58:	497d      	ldr	r1, [pc, #500]	@ (8003f50 <Display_main_screen_data+0x254>)
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f009 fd72 	bl	800d844 <itoa>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2202      	movs	r2, #2
 8003d64:	9201      	str	r2, [sp, #4]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d70:	217b      	movs	r1, #123	@ 0x7b
 8003d72:	2011      	movs	r0, #17
 8003d74:	f7fc fec6 	bl	8000b04 <ILI9341_Draw_String>
 8003d78:	e011      	b.n	8003d9e <Display_main_screen_data+0xa2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003d7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d7c:	220a      	movs	r2, #10
 8003d7e:	4974      	ldr	r1, [pc, #464]	@ (8003f50 <Display_main_screen_data+0x254>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f009 fd5f 	bl	800d844 <itoa>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2202      	movs	r2, #2
 8003d8a:	9201      	str	r2, [sp, #4]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003d92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d96:	217b      	movs	r1, #123	@ 0x7b
 8003d98:	2008      	movs	r0, #8
 8003d9a:	f7fc feb3 	bl	8000b04 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8003d9e:	2302      	movs	r3, #2
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	4b6c      	ldr	r3, [pc, #432]	@ (8003f54 <Display_main_screen_data+0x258>)
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dae:	217b      	movs	r1, #123	@ 0x7b
 8003db0:	2024      	movs	r0, #36	@ 0x24
 8003db2:	f7fc fea7 	bl	8000b04 <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 8003db6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003db8:	220a      	movs	r2, #10
 8003dba:	4965      	ldr	r1, [pc, #404]	@ (8003f50 <Display_main_screen_data+0x254>)
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f009 fd41 	bl	800d844 <itoa>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	9201      	str	r2, [sp, #4]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003dce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dd2:	217b      	movs	r1, #123	@ 0x7b
 8003dd4:	204e      	movs	r0, #78	@ 0x4e
 8003dd6:	f7fc fe95 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 8003dda:	2302      	movs	r3, #2
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	4b5e      	ldr	r3, [pc, #376]	@ (8003f58 <Display_main_screen_data+0x25c>)
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dea:	217b      	movs	r1, #123	@ 0x7b
 8003dec:	207a      	movs	r0, #122	@ 0x7a
 8003dee:	f7fc fe89 	bl	8000b04 <ILI9341_Draw_String>

	//Bar 5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
 8003df6:	e022      	b.n	8003e3e <Display_main_screen_data+0x142>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	015b      	lsls	r3, r3, #5
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	4413      	add	r3, r2
 8003e00:	7f1a      	ldrb	r2, [r3, #28]
 8003e02:	7efb      	ldrb	r3, [r7, #27]
 8003e04:	4619      	mov	r1, r3
 8003e06:	2334      	movs	r3, #52	@ 0x34
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	440b      	add	r3, r1
 8003e10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d10f      	bne.n	8003e38 <Display_main_screen_data+0x13c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	015b      	lsls	r3, r3, #5
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	4413      	add	r3, r2
 8003e20:	3302      	adds	r3, #2
 8003e22:	2202      	movs	r2, #2
 8003e24:	9201      	str	r2, [sp, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e30:	2194      	movs	r1, #148	@ 0x94
 8003e32:	2008      	movs	r0, #8
 8003e34:	f7fc fe66 	bl	8000b04 <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	7e7b      	ldrb	r3, [r7, #25]
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d3d8      	bcc.n	8003df8 <Display_main_screen_data+0xfc>
		}
	}

	//Bar 6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003e46:	7efb      	ldrb	r3, [r7, #27]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2334      	movs	r3, #52	@ 0x34
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	4a41      	ldr	r2, [pc, #260]	@ (8003f5c <Display_main_screen_data+0x260>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	099b      	lsrs	r3, r3, #6
 8003e5e:	220a      	movs	r2, #10
 8003e60:	493b      	ldr	r1, [pc, #236]	@ (8003f50 <Display_main_screen_data+0x254>)
 8003e62:	4618      	mov	r0, r3
 8003e64:	f009 fcee 	bl	800d844 <itoa>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	9201      	str	r2, [sp, #4]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e78:	21ad      	movs	r1, #173	@ 0xad
 8003e7a:	2008      	movs	r0, #8
 8003e7c:	f7fc fe42 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003e80:	2302      	movs	r3, #2
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <Display_main_screen_data+0x264>)
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003e8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e90:	21ad      	movs	r1, #173	@ 0xad
 8003e92:	201f      	movs	r0, #31
 8003e94:	f7fc fe36 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003e98:	7efb      	ldrb	r3, [r7, #27]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2334      	movs	r3, #52	@ 0x34
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <Display_main_screen_data+0x260>)
 8003eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	220a      	movs	r2, #10
 8003ebc:	4924      	ldr	r1, [pc, #144]	@ (8003f50 <Display_main_screen_data+0x254>)
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f009 fcc0 	bl	800d844 <itoa>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	9201      	str	r2, [sp, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ed4:	21ad      	movs	r1, #173	@ 0xad
 8003ed6:	2026      	movs	r0, #38	@ 0x26
 8003ed8:	f7fc fe14 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003edc:	2302      	movs	r3, #2
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	4b20      	ldr	r3, [pc, #128]	@ (8003f64 <Display_main_screen_data+0x268>)
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003ee8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eec:	21ad      	movs	r1, #173	@ 0xad
 8003eee:	2041      	movs	r0, #65	@ 0x41
 8003ef0:	f7fc fe08 	bl	8000b04 <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <Display_main_screen_data+0x26c>)
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f04:	21ad      	movs	r1, #173	@ 0xad
 8003f06:	205f      	movs	r0, #95	@ 0x5f
 8003f08:	f7fc fdfc 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003f0c:	7efb      	ldrb	r3, [r7, #27]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2334      	movs	r3, #52	@ 0x34
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <Display_main_screen_data+0x270>)
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	2202      	movs	r2, #2
 8003f28:	9201      	str	r2, [sp, #4]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f34:	21ad      	movs	r1, #173	@ 0xad
 8003f36:	2073      	movs	r0, #115	@ 0x73
 8003f38:	f7fc fde4 	bl	8000b04 <ILI9341_Draw_String>

	//Station picture

}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f46:	b002      	add	sp, #8
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	0800e788 	.word	0x0800e788
 8003f50:	20006d90 	.word	0x20006d90
 8003f54:	0800e78c 	.word	0x0800e78c
 8003f58:	0800e794 	.word	0x0800e794
 8003f5c:	10624dd3 	.word	0x10624dd3
 8003f60:	0800e798 	.word	0x0800e798
 8003f64:	0800e79c 	.word	0x0800e79c
 8003f68:	0800e7a0 	.word	0x0800e7a0
 8003f6c:	200000ac 	.word	0x200000ac

08003f70 <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 8003f78:	4919      	ldr	r1, [pc, #100]	@ (8003fe0 <Display_main_screen_dls+0x70>)
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc f924 	bl	80001c8 <strcmp>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d027      	beq.n	8003fd6 <Display_main_screen_dls+0x66>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 8003f86:	2302      	movs	r3, #2
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <Display_main_screen_dls+0x74>)
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003f92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f96:	2130      	movs	r1, #48	@ 0x30
 8003f98:	2008      	movs	r0, #8
 8003f9a:	f7fc fdb3 	bl	8000b04 <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fae:	2130      	movs	r1, #48	@ 0x30
 8003fb0:	2008      	movs	r0, #8
 8003fb2:	f7fc fda7 	bl	8000b04 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 129; i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73fb      	strb	r3, [r7, #15]
 8003fba:	e009      	b.n	8003fd0 <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	441a      	add	r2, r3
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	7811      	ldrb	r1, [r2, #0]
 8003fc6:	4a06      	ldr	r2, [pc, #24]	@ (8003fe0 <Display_main_screen_dls+0x70>)
 8003fc8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 129; i++)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b80      	cmp	r3, #128	@ 0x80
 8003fd4:	d9f2      	bls.n	8003fbc <Display_main_screen_dls+0x4c>
		}
	}
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20006dd0 	.word	0x20006dd0
 8003fe4:	0800e7a4 	.word	0x0800e7a4

08003fe8 <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af02      	add	r7, sp, #8
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003fee:	2302      	movs	r3, #2
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800409c <Display_main_screen_empty+0xb4>)
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8003ffa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ffe:	2117      	movs	r1, #23
 8004000:	2008      	movs	r0, #8
 8004002:	f7fc fd7f 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8004006:	2302      	movs	r3, #2
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <Display_main_screen_empty+0xb8>)
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004012:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004016:	2130      	movs	r1, #48	@ 0x30
 8004018:	2008      	movs	r0, #8
 800401a:	f7fc fd73 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 800401e:	2302      	movs	r3, #2
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <Display_main_screen_empty+0xbc>)
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800402a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800402e:	2149      	movs	r1, #73	@ 0x49
 8004030:	2008      	movs	r0, #8
 8004032:	f7fc fd67 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8004036:	2302      	movs	r3, #2
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <Display_main_screen_empty+0xc0>)
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004046:	2162      	movs	r1, #98	@ 0x62
 8004048:	2008      	movs	r0, #8
 800404a:	f7fc fd5b 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 800404e:	2302      	movs	r3, #2
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <Display_main_screen_empty+0xc4>)
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800405a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800405e:	217b      	movs	r1, #123	@ 0x7b
 8004060:	2008      	movs	r0, #8
 8004062:	f7fc fd4f 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8004066:	2302      	movs	r3, #2
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <Display_main_screen_empty+0xc8>)
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004072:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004076:	2194      	movs	r1, #148	@ 0x94
 8004078:	2008      	movs	r0, #8
 800407a:	f7fc fd43 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 800407e:	2302      	movs	r3, #2
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <Display_main_screen_empty+0xc8>)
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800408a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800408e:	21ad      	movs	r1, #173	@ 0xad
 8004090:	2008      	movs	r0, #8
 8004092:	f7fc fd37 	bl	8000b04 <ILI9341_Draw_String>
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	0800e824 	.word	0x0800e824
 80040a0:	0800e838 	.word	0x0800e838
 80040a4:	0800e84c 	.word	0x0800e84c
 80040a8:	0800e860 	.word	0x0800e860
 80040ac:	0800e874 	.word	0x0800e874
 80040b0:	0800e888 	.word	0x0800e888

080040b4 <Display_stations_list_background>:


void Display_stations_list_background()
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af02      	add	r7, sp, #8
	//clear screen
	Display_clear_screen();
 80040ba:	f7ff fd77 	bl	8003bac <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2);
 80040be:	2302      	movs	r3, #2
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	4b59      	ldr	r3, [pc, #356]	@ (8004228 <Display_stations_list_background+0x174>)
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2300      	movs	r3, #0
 80040c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040cc:	2101      	movs	r1, #1
 80040ce:	2005      	movs	r0, #5
 80040d0:	f7fc fd18 	bl	8000b04 <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 80040d4:	2332      	movs	r3, #50	@ 0x32
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	f240 131d 	movw	r3, #285	@ 0x11d
 80040dc:	2214      	movs	r2, #20
 80040de:	2105      	movs	r1, #5
 80040e0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040e4:	f7fc fc6c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 80040e8:	2355      	movs	r3, #85	@ 0x55
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	f240 131d 	movw	r3, #285	@ 0x11d
 80040f0:	2237      	movs	r2, #55	@ 0x37
 80040f2:	2105      	movs	r1, #5
 80040f4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80040f8:	f7fc fc62 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 80040fc:	2378      	movs	r3, #120	@ 0x78
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f240 131d 	movw	r3, #285	@ 0x11d
 8004104:	225a      	movs	r2, #90	@ 0x5a
 8004106:	2105      	movs	r1, #5
 8004108:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800410c:	f7fc fc58 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8004110:	239b      	movs	r3, #155	@ 0x9b
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	f240 131d 	movw	r3, #285	@ 0x11d
 8004118:	227d      	movs	r2, #125	@ 0x7d
 800411a:	2105      	movs	r1, #5
 800411c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004120:	f7fc fc4e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 8004124:	23be      	movs	r3, #190	@ 0xbe
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	f240 131d 	movw	r3, #285	@ 0x11d
 800412c:	22a0      	movs	r2, #160	@ 0xa0
 800412e:	2105      	movs	r1, #5
 8004130:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004134:	f7fc fc44 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 8004138:	2366      	movs	r3, #102	@ 0x66
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	f240 133b 	movw	r3, #315	@ 0x13b
 8004140:	2214      	movs	r2, #20
 8004142:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004146:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800414a:	f7fc fc39 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 800414e:	2302      	movs	r3, #2
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	4b36      	ldr	r3, [pc, #216]	@ (800422c <Display_stations_list_background+0x178>)
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800415a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800415e:	2138      	movs	r1, #56	@ 0x38
 8004160:	f240 1027 	movw	r0, #295	@ 0x127
 8004164:	f7fc fcce 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 8004168:	2302      	movs	r3, #2
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	4b30      	ldr	r3, [pc, #192]	@ (8004230 <Display_stations_list_background+0x17c>)
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004178:	2138      	movs	r1, #56	@ 0x38
 800417a:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 800417e:	f7fc fcc1 	bl	8000b04 <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 8004182:	23be      	movs	r3, #190	@ 0xbe
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	f240 133b 	movw	r3, #315	@ 0x13b
 800418a:	226c      	movs	r2, #108	@ 0x6c
 800418c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004190:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004194:	f7fc fc14 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 8004198:	2302      	movs	r3, #2
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <Display_stations_list_background+0x17c>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80041a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041a8:	2192      	movs	r1, #146	@ 0x92
 80041aa:	f240 1027 	movw	r0, #295	@ 0x127
 80041ae:	f7fc fca9 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 80041b2:	2302      	movs	r3, #2
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	4b1d      	ldr	r3, [pc, #116]	@ (800422c <Display_stations_list_background+0x178>)
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80041be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041c2:	2192      	movs	r1, #146	@ 0x92
 80041c4:	f44f 7097 	mov.w	r0, #302	@ 0x12e
 80041c8:	f7fc fc9c 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80041cc:	23eb      	movs	r3, #235	@ 0xeb
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	239d      	movs	r3, #157	@ 0x9d
 80041d2:	22c3      	movs	r2, #195	@ 0xc3
 80041d4:	2105      	movs	r1, #5
 80041d6:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80041da:	f7fc fbf1 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80041de:	23eb      	movs	r3, #235	@ 0xeb
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f240 133b 	movw	r3, #315	@ 0x13b
 80041e6:	22c3      	movs	r2, #195	@ 0xc3
 80041e8:	21a3      	movs	r1, #163	@ 0xa3
 80041ea:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80041ee:	f7fc fbe7 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 80041f2:	2302      	movs	r3, #2
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <Display_stations_list_background+0x180>)
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80041fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004202:	21cf      	movs	r1, #207	@ 0xcf
 8004204:	2025      	movs	r0, #37	@ 0x25
 8004206:	f7fc fc7d 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 800420a:	2302      	movs	r3, #2
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <Display_stations_list_background+0x184>)
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800421a:	21cf      	movs	r1, #207	@ 0xcf
 800421c:	20c3      	movs	r0, #195	@ 0xc3
 800421e:	f7fc fc71 	bl	8000b04 <ILI9341_Draw_String>

}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	0800e89c 	.word	0x0800e89c
 800422c:	0800e8b0 	.word	0x0800e8b0
 8004230:	0800e8b4 	.word	0x0800e8b4
 8004234:	0800e8b8 	.word	0x0800e8b8
 8004238:	0800e8c4 	.word	0x0800e8c4

0800423c <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 800423c:	b084      	sub	sp, #16
 800423e:	b590      	push	{r4, r7, lr}
 8004240:	b087      	sub	sp, #28
 8004242:	af02      	add	r7, sp, #8
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800424a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//check if stations list is not empty
	if(_dab_management.total_services)
 800424e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8133 	beq.w	80044be <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	e12a      	b.n	80044b4 <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 800425e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004262:	4619      	mov	r1, r3
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	4299      	cmp	r1, r3
 800426c:	dc02      	bgt.n	8004274 <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	425b      	negs	r3, r3
 8004272:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	2b08      	cmp	r3, #8
 800427c:	dc30      	bgt.n	80042e0 <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	00da      	lsls	r2, r3, #3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	331c      	adds	r3, #28
 800428c:	4619      	mov	r1, r3
 800428e:	2302      	movs	r3, #2
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	4bac      	ldr	r3, [pc, #688]	@ (8004544 <Display_stations_list_data+0x308>)
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800429a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800429e:	2008      	movs	r0, #8
 80042a0:	f7fc fc30 	bl	8000b04 <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80042a4:	7bfa      	ldrb	r2, [r7, #15]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00da      	lsls	r2, r3, #3
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	331c      	adds	r3, #28
 80042b2:	461c      	mov	r4, r3
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	3301      	adds	r3, #1
 80042bc:	220a      	movs	r2, #10
 80042be:	49a2      	ldr	r1, [pc, #648]	@ (8004548 <Display_stations_list_data+0x30c>)
 80042c0:	4618      	mov	r0, r3
 80042c2:	f009 fabf 	bl	800d844 <itoa>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2202      	movs	r2, #2
 80042ca:	9201      	str	r2, [sp, #4]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80042d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042d6:	4621      	mov	r1, r4
 80042d8:	2011      	movs	r0, #17
 80042da:	f7fc fc13 	bl	8000b04 <ILI9341_Draw_String>
 80042de:	e01c      	b.n	800431a <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00da      	lsls	r2, r3, #3
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	331c      	adds	r3, #28
 80042ee:	461c      	mov	r4, r3
 80042f0:	7bfa      	ldrb	r2, [r7, #15]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	3301      	adds	r3, #1
 80042f8:	220a      	movs	r2, #10
 80042fa:	4993      	ldr	r1, [pc, #588]	@ (8004548 <Display_stations_list_data+0x30c>)
 80042fc:	4618      	mov	r0, r3
 80042fe:	f009 faa1 	bl	800d844 <itoa>
 8004302:	4603      	mov	r3, r0
 8004304:	2202      	movs	r2, #2
 8004306:	9201      	str	r2, [sp, #4]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800430e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004312:	4621      	mov	r1, r4
 8004314:	2008      	movs	r0, #8
 8004316:	f7fc fbf5 	bl	8000b04 <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 800431a:	7bfa      	ldrb	r2, [r7, #15]
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	00da      	lsls	r2, r3, #3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	331c      	adds	r3, #28
 8004328:	4619      	mov	r1, r3
 800432a:	2302      	movs	r3, #2
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	4b87      	ldr	r3, [pc, #540]	@ (800454c <Display_stations_list_data+0x310>)
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800433a:	2018      	movs	r0, #24
 800433c:	f7fc fbe2 	bl	8000b04 <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	00da      	lsls	r2, r3, #3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	331c      	adds	r3, #28
 800434e:	4619      	mov	r1, r3
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	461a      	mov	r2, r3
 8004358:	2334      	movs	r3, #52	@ 0x34
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004360:	4413      	add	r3, r2
 8004362:	461a      	mov	r2, r3
 8004364:	2302      	movs	r3, #2
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	9200      	str	r2, [sp, #0]
 800436a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800436e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004372:	2022      	movs	r0, #34	@ 0x22
 8004374:	f7fc fbc6 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	00da      	lsls	r2, r3, #3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	331c      	adds	r3, #28
 8004386:	4619      	mov	r1, r3
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	461a      	mov	r2, r3
 8004390:	2334      	movs	r3, #52	@ 0x34
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004398:	4413      	add	r3, r2
 800439a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800439e:	461a      	mov	r2, r3
 80043a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004550 <Display_stations_list_data+0x314>)
 80043a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a6:	2202      	movs	r2, #2
 80043a8:	9201      	str	r2, [sp, #4]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80043b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043b4:	20ab      	movs	r0, #171	@ 0xab
 80043b6:	f7fc fba5 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	00da      	lsls	r2, r3, #3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	331c      	adds	r3, #28
 80043c8:	461c      	mov	r4, r3
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	2334      	movs	r3, #52	@ 0x34
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043da:	4413      	add	r3, r2
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	4a5d      	ldr	r2, [pc, #372]	@ (8004554 <Display_stations_list_data+0x318>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	220a      	movs	r2, #10
 80043e8:	4957      	ldr	r1, [pc, #348]	@ (8004548 <Display_stations_list_data+0x30c>)
 80043ea:	4618      	mov	r0, r3
 80043ec:	f009 fa2a 	bl	800d844 <itoa>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2202      	movs	r2, #2
 80043f4:	9201      	str	r2, [sp, #4]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80043fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004400:	4621      	mov	r1, r4
 8004402:	20ca      	movs	r0, #202	@ 0xca
 8004404:	f7fc fb7e 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	00da      	lsls	r2, r3, #3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	331c      	adds	r3, #28
 8004416:	4619      	mov	r1, r3
 8004418:	2302      	movs	r3, #2
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	4b4b      	ldr	r3, [pc, #300]	@ (800454c <Display_stations_list_data+0x310>)
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004428:	20e1      	movs	r0, #225	@ 0xe1
 800442a:	f7fc fb6b 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	00da      	lsls	r2, r3, #3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	331c      	adds	r3, #28
 800443c:	461c      	mov	r4, r3
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	461a      	mov	r2, r3
 8004446:	2334      	movs	r3, #52	@ 0x34
 8004448:	fb02 f303 	mul.w	r3, r2, r3
 800444c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800444e:	4413      	add	r3, r2
 8004450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004452:	4b40      	ldr	r3, [pc, #256]	@ (8004554 <Display_stations_list_data+0x318>)
 8004454:	fba3 1302 	umull	r1, r3, r3, r2
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	220a      	movs	r2, #10
 8004466:	4938      	ldr	r1, [pc, #224]	@ (8004548 <Display_stations_list_data+0x30c>)
 8004468:	4618      	mov	r0, r3
 800446a:	f009 f9eb 	bl	800d844 <itoa>
 800446e:	4603      	mov	r3, r0
 8004470:	2202      	movs	r2, #2
 8004472:	9201      	str	r2, [sp, #4]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800447a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800447e:	4621      	mov	r1, r4
 8004480:	20e8      	movs	r0, #232	@ 0xe8
 8004482:	f7fc fb3f 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 8004486:	7bfa      	ldrb	r2, [r7, #15]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	00da      	lsls	r2, r3, #3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	331c      	adds	r3, #28
 8004494:	4619      	mov	r1, r3
 8004496:	2302      	movs	r3, #2
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <Display_stations_list_data+0x31c>)
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044a6:	f240 1003 	movw	r0, #259	@ 0x103
 80044aa:	f7fc fb2b 	bl	8000b04 <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	3301      	adds	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	f67f aed1 	bls.w	800425e <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 80044bc:	e03b      	b.n	8004536 <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 80044be:	2302      	movs	r3, #2
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	4b26      	ldr	r3, [pc, #152]	@ (800455c <Display_stations_list_data+0x320>)
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044ce:	211c      	movs	r1, #28
 80044d0:	2008      	movs	r0, #8
 80044d2:	f7fc fb17 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 80044d6:	2302      	movs	r3, #2
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <Display_stations_list_data+0x324>)
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044e6:	213f      	movs	r1, #63	@ 0x3f
 80044e8:	2008      	movs	r0, #8
 80044ea:	f7fc fb0b 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 80044ee:	2302      	movs	r3, #2
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004564 <Display_stations_list_data+0x328>)
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80044fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044fe:	2162      	movs	r1, #98	@ 0x62
 8004500:	2008      	movs	r0, #8
 8004502:	f7fc faff 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 8004506:	2302      	movs	r3, #2
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	4b17      	ldr	r3, [pc, #92]	@ (8004568 <Display_stations_list_data+0x32c>)
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004516:	2185      	movs	r1, #133	@ 0x85
 8004518:	2008      	movs	r0, #8
 800451a:	f7fc faf3 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 800451e:	2302      	movs	r3, #2
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	4b12      	ldr	r3, [pc, #72]	@ (800456c <Display_stations_list_data+0x330>)
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800452a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800452e:	21a8      	movs	r1, #168	@ 0xa8
 8004530:	2008      	movs	r0, #8
 8004532:	f7fc fae7 	bl	8000b04 <ILI9341_Draw_String>
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004540:	b004      	add	sp, #16
 8004542:	4770      	bx	lr
 8004544:	0800e788 	.word	0x0800e788
 8004548:	20006d90 	.word	0x20006d90
 800454c:	0800e798 	.word	0x0800e798
 8004550:	200000ac 	.word	0x200000ac
 8004554:	10624dd3 	.word	0x10624dd3
 8004558:	0800e79c 	.word	0x0800e79c
 800455c:	0800e8d0 	.word	0x0800e8d0
 8004560:	0800e8e8 	.word	0x0800e8e8
 8004564:	0800e900 	.word	0x0800e900
 8004568:	0800e918 	.word	0x0800e918
 800456c:	0800e934 	.word	0x0800e934

08004570 <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af02      	add	r7, sp, #8
	//Clear display
	Display_clear_screen();
 8004576:	f7ff fb19 	bl	8003bac <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2);
 800457a:	2302      	movs	r3, #2
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	4b64      	ldr	r3, [pc, #400]	@ (8004710 <Display_scanning_screen_background+0x1a0>)
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2300      	movs	r3, #0
 8004584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004588:	2101      	movs	r1, #1
 800458a:	2005      	movs	r0, #5
 800458c:	f7fc faba 	bl	8000b04 <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004590:	2328      	movs	r3, #40	@ 0x28
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	f240 133b 	movw	r3, #315	@ 0x13b
 8004598:	2214      	movs	r2, #20
 800459a:	2105      	movs	r1, #5
 800459c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045a0:	f7fc fa0e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 80045a4:	2302      	movs	r3, #2
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004714 <Display_scanning_screen_background+0x1a4>)
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80045b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045b4:	2117      	movs	r1, #23
 80045b6:	2050      	movs	r0, #80	@ 0x50
 80045b8:	f7fc faa4 	bl	8000b04 <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80045bc:	2341      	movs	r3, #65	@ 0x41
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	f240 133b 	movw	r3, #315	@ 0x13b
 80045c4:	222d      	movs	r2, #45	@ 0x2d
 80045c6:	2105      	movs	r1, #5
 80045c8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045cc:	f7fc f9f8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80045d0:	235a      	movs	r3, #90	@ 0x5a
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	f240 133b 	movw	r3, #315	@ 0x13b
 80045d8:	2246      	movs	r2, #70	@ 0x46
 80045da:	2105      	movs	r1, #5
 80045dc:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80045e0:	f7fc f9ee 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 80045e4:	2302      	movs	r3, #2
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004718 <Display_scanning_screen_background+0x1a8>)
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80045f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045f4:	2149      	movs	r1, #73	@ 0x49
 80045f6:	200a      	movs	r0, #10
 80045f8:	f7fc fa84 	bl	8000b04 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 80045fc:	2373      	movs	r3, #115	@ 0x73
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	f240 133b 	movw	r3, #315	@ 0x13b
 8004604:	225f      	movs	r2, #95	@ 0x5f
 8004606:	2105      	movs	r1, #5
 8004608:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800460c:	f7fc f9d8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 8004610:	2302      	movs	r3, #2
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	4b41      	ldr	r3, [pc, #260]	@ (800471c <Display_scanning_screen_background+0x1ac>)
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800461c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004620:	2162      	movs	r1, #98	@ 0x62
 8004622:	200a      	movs	r0, #10
 8004624:	f7fc fa6e 	bl	8000b04 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004628:	238c      	movs	r3, #140	@ 0x8c
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	f240 133b 	movw	r3, #315	@ 0x13b
 8004630:	2278      	movs	r2, #120	@ 0x78
 8004632:	2105      	movs	r1, #5
 8004634:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004638:	f7fc f9c2 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 800463c:	2302      	movs	r3, #2
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	4b37      	ldr	r3, [pc, #220]	@ (8004720 <Display_scanning_screen_background+0x1b0>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004648:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800464c:	217b      	movs	r1, #123	@ 0x7b
 800464e:	200a      	movs	r0, #10
 8004650:	f7fc fa58 	bl	8000b04 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004654:	23a5      	movs	r3, #165	@ 0xa5
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	f240 133b 	movw	r3, #315	@ 0x13b
 800465c:	2291      	movs	r2, #145	@ 0x91
 800465e:	2105      	movs	r1, #5
 8004660:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004664:	f7fc f9ac 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 8004668:	2302      	movs	r3, #2
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	4b2d      	ldr	r3, [pc, #180]	@ (8004724 <Display_scanning_screen_background+0x1b4>)
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004678:	2194      	movs	r1, #148	@ 0x94
 800467a:	200a      	movs	r0, #10
 800467c:	f7fc fa42 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 8004680:	2302      	movs	r3, #2
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	4b28      	ldr	r3, [pc, #160]	@ (8004728 <Display_scanning_screen_background+0x1b8>)
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800468c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004690:	2194      	movs	r1, #148	@ 0x94
 8004692:	2078      	movs	r0, #120	@ 0x78
 8004694:	f7fc fa36 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 8004698:	2302      	movs	r3, #2
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	4b23      	ldr	r3, [pc, #140]	@ (800472c <Display_scanning_screen_background+0x1bc>)
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80046a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046a8:	2194      	movs	r1, #148	@ 0x94
 80046aa:	209e      	movs	r0, #158	@ 0x9e
 80046ac:	f7fc fa2a 	bl	8000b04 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 80046b0:	23be      	movs	r3, #190	@ 0xbe
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	f240 133b 	movw	r3, #315	@ 0x13b
 80046b8:	22aa      	movs	r2, #170	@ 0xaa
 80046ba:	2105      	movs	r1, #5
 80046bc:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80046c0:	f7fc f97e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 80046c4:	2302      	movs	r3, #2
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	4b19      	ldr	r3, [pc, #100]	@ (8004730 <Display_scanning_screen_background+0x1c0>)
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80046d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046d4:	21ad      	movs	r1, #173	@ 0xad
 80046d6:	200a      	movs	r0, #10
 80046d8:	f7fc fa14 	bl	8000b04 <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80046dc:	23eb      	movs	r3, #235	@ 0xeb
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f240 133b 	movw	r3, #315	@ 0x13b
 80046e4:	22c3      	movs	r2, #195	@ 0xc3
 80046e6:	2105      	movs	r1, #5
 80046e8:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80046ec:	f7fc f968 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 80046f0:	2302      	movs	r3, #2
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004734 <Display_scanning_screen_background+0x1c4>)
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80046fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004700:	21cf      	movs	r1, #207	@ 0xcf
 8004702:	2082      	movs	r0, #130	@ 0x82
 8004704:	f7fc f9fe 	bl	8000b04 <ILI9341_Draw_String>
}
 8004708:	bf00      	nop
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	0800e94c 	.word	0x0800e94c
 8004714:	0800e95c 	.word	0x0800e95c
 8004718:	0800e974 	.word	0x0800e974
 800471c:	0800e988 	.word	0x0800e988
 8004720:	0800e998 	.word	0x0800e998
 8004724:	0800e9a8 	.word	0x0800e9a8
 8004728:	0800e798 	.word	0x0800e798
 800472c:	0800e79c 	.word	0x0800e79c
 8004730:	0800e9b4 	.word	0x0800e9b4
 8004734:	0800e9c0 	.word	0x0800e9c0

08004738 <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 8004738:	b084      	sub	sp, #16
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af02      	add	r7, sp, #8
 8004740:	f107 0c08 	add.w	ip, r7, #8
 8004744:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 8004748:	7d3b      	ldrb	r3, [r7, #20]
 800474a:	3301      	adds	r3, #1
 800474c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004758:	fb93 f3f2 	sdiv	r3, r3, r2
 800475c:	330a      	adds	r3, #10
 800475e:	461a      	mov	r2, r3
 8004760:	233c      	movs	r3, #60	@ 0x3c
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	2232      	movs	r2, #50	@ 0x32
 8004768:	210a      	movs	r1, #10
 800476a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800476e:	f7fc f927 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 8004772:	7d3b      	ldrb	r3, [r7, #20]
 8004774:	3301      	adds	r3, #1
 8004776:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004782:	fb93 f3f2 	sdiv	r3, r3, r2
 8004786:	330a      	adds	r3, #10
 8004788:	4619      	mov	r1, r3
 800478a:	233c      	movs	r3, #60	@ 0x3c
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004792:	2232      	movs	r2, #50	@ 0x32
 8004794:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004798:	f7fc f912 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 800479c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80047a0:	220a      	movs	r2, #10
 80047a2:	4954      	ldr	r1, [pc, #336]	@ (80048f4 <Display_scanning_screen_data+0x1bc>)
 80047a4:	4618      	mov	r0, r3
 80047a6:	f009 f84d 	bl	800d844 <itoa>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2202      	movs	r2, #2
 80047ae:	9201      	str	r2, [sp, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047ba:	2149      	movs	r1, #73	@ 0x49
 80047bc:	2091      	movs	r0, #145	@ 0x91
 80047be:	f7fc f9a1 	bl	8000b04 <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 80047c2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80047c6:	220a      	movs	r2, #10
 80047c8:	494a      	ldr	r1, [pc, #296]	@ (80048f4 <Display_scanning_screen_data+0x1bc>)
 80047ca:	4618      	mov	r0, r3
 80047cc:	f009 f83a 	bl	800d844 <itoa>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2202      	movs	r2, #2
 80047d4:	9201      	str	r2, [sp, #4]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80047dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047e0:	2162      	movs	r1, #98	@ 0x62
 80047e2:	2087      	movs	r0, #135	@ 0x87
 80047e4:	f7fc f98e 	bl	8000b04 <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 80047e8:	7d3b      	ldrb	r3, [r7, #20]
 80047ea:	3301      	adds	r3, #1
 80047ec:	220a      	movs	r2, #10
 80047ee:	4941      	ldr	r1, [pc, #260]	@ (80048f4 <Display_scanning_screen_data+0x1bc>)
 80047f0:	4618      	mov	r0, r3
 80047f2:	f009 f827 	bl	800d844 <itoa>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2202      	movs	r2, #2
 80047fa:	9201      	str	r2, [sp, #4]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004806:	217b      	movs	r1, #123	@ 0x7b
 8004808:	2076      	movs	r0, #118	@ 0x76
 800480a:	f7fc f97b 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 800480e:	2302      	movs	r3, #2
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <Display_scanning_screen_data+0x1c0>)
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800481a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800481e:	217b      	movs	r1, #123	@ 0x7b
 8004820:	2089      	movs	r0, #137	@ 0x89
 8004822:	f7fc f96f 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 8004826:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800482a:	220a      	movs	r2, #10
 800482c:	4931      	ldr	r1, [pc, #196]	@ (80048f4 <Display_scanning_screen_data+0x1bc>)
 800482e:	4618      	mov	r0, r3
 8004830:	f009 f808 	bl	800d844 <itoa>
 8004834:	4603      	mov	r3, r0
 8004836:	2202      	movs	r2, #2
 8004838:	9201      	str	r2, [sp, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004844:	217b      	movs	r1, #123	@ 0x7b
 8004846:	2093      	movs	r0, #147	@ 0x93
 8004848:	f7fc f95c 	bl	8000b04 <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4a2b      	ldr	r2, [pc, #172]	@ (80048fc <Display_scanning_screen_data+0x1c4>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	220a      	movs	r2, #10
 8004858:	4926      	ldr	r1, [pc, #152]	@ (80048f4 <Display_scanning_screen_data+0x1bc>)
 800485a:	4618      	mov	r0, r3
 800485c:	f008 fff2 	bl	800d844 <itoa>
 8004860:	4603      	mov	r3, r0
 8004862:	2202      	movs	r2, #2
 8004864:	9201      	str	r2, [sp, #4]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800486c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004870:	2194      	movs	r1, #148	@ 0x94
 8004872:	205f      	movs	r0, #95	@ 0x5f
 8004874:	f7fc f946 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4b20      	ldr	r3, [pc, #128]	@ (80048fc <Display_scanning_screen_data+0x1c4>)
 800487c:	fba3 1302 	umull	r1, r3, r3, r2
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	220a      	movs	r2, #10
 800488e:	4919      	ldr	r1, [pc, #100]	@ (80048f4 <Display_scanning_screen_data+0x1bc>)
 8004890:	4618      	mov	r0, r3
 8004892:	f008 ffd7 	bl	800d844 <itoa>
 8004896:	4603      	mov	r3, r0
 8004898:	2202      	movs	r2, #2
 800489a:	9201      	str	r2, [sp, #4]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80048a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048a6:	2194      	movs	r1, #148	@ 0x94
 80048a8:	2081      	movs	r0, #129	@ 0x81
 80048aa:	f7fc f92b 	bl	8000b04 <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 80048ae:	2302      	movs	r3, #2
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	4b13      	ldr	r3, [pc, #76]	@ (8004900 <Display_scanning_screen_data+0x1c8>)
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80048ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048be:	21ad      	movs	r1, #173	@ 0xad
 80048c0:	2050      	movs	r0, #80	@ 0x50
 80048c2:	f7fc f91f 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 80048c6:	7d3b      	ldrb	r3, [r7, #20]
 80048c8:	461a      	mov	r2, r3
 80048ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004904 <Display_scanning_screen_data+0x1cc>)
 80048cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d0:	2202      	movs	r2, #2
 80048d2:	9201      	str	r2, [sp, #4]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80048da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048de:	21ad      	movs	r1, #173	@ 0xad
 80048e0:	2050      	movs	r0, #80	@ 0x50
 80048e2:	f7fc f90f 	bl	8000b04 <ILI9341_Draw_String>
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ee:	b004      	add	sp, #16
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20006d90 	.word	0x20006d90
 80048f8:	0800e8b0 	.word	0x0800e8b0
 80048fc:	10624dd3 	.word	0x10624dd3
 8004900:	0800e9c8 	.word	0x0800e9c8
 8004904:	200000ac 	.word	0x200000ac

08004908 <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 800490e:	2328      	movs	r3, #40	@ 0x28
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	f240 133b 	movw	r3, #315	@ 0x13b
 8004916:	2214      	movs	r2, #20
 8004918:	2105      	movs	r1, #5
 800491a:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 800491e:	f7fc f84f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 8004922:	2302      	movs	r3, #2
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	4b11      	ldr	r3, [pc, #68]	@ (800496c <Display_scanning_screen_complete+0x64>)
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800492e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004932:	2117      	movs	r1, #23
 8004934:	2050      	movs	r0, #80	@ 0x50
 8004936:	f7fc f8e5 	bl	8000b04 <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 800493a:	23eb      	movs	r3, #235	@ 0xeb
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	f240 133b 	movw	r3, #315	@ 0x13b
 8004942:	22c3      	movs	r2, #195	@ 0xc3
 8004944:	2105      	movs	r1, #5
 8004946:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800494a:	f7fc f839 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 800494e:	2302      	movs	r3, #2
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <Display_scanning_screen_complete+0x68>)
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800495a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800495e:	21cf      	movs	r1, #207	@ 0xcf
 8004960:	2082      	movs	r0, #130	@ 0x82
 8004962:	f7fc f8cf 	bl	8000b04 <ILI9341_Draw_String>
}
 8004966:	bf00      	nop
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	0800e9d0 	.word	0x0800e9d0
 8004970:	0800e9e8 	.word	0x0800e9e8

08004974 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af02      	add	r7, sp, #8
	//Clear Screen
	Display_clear_screen();
 800497a:	f7ff f917 	bl	8003bac <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2);
 800497e:	2302      	movs	r3, #2
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	4bb4      	ldr	r3, [pc, #720]	@ (8004c54 <Display_dab_digrad_status_background+0x2e0>)
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2300      	movs	r3, #0
 8004988:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800498c:	2101      	movs	r1, #1
 800498e:	2005      	movs	r0, #5
 8004990:	f7fc f8b8 	bl	8000b04 <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 8004994:	2328      	movs	r3, #40	@ 0x28
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2369      	movs	r3, #105	@ 0x69
 800499a:	2214      	movs	r2, #20
 800499c:	2105      	movs	r1, #5
 800499e:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049a2:	f7fc f80d 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 80049a6:	2328      	movs	r3, #40	@ 0x28
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	23d2      	movs	r3, #210	@ 0xd2
 80049ac:	2214      	movs	r2, #20
 80049ae:	216e      	movs	r1, #110	@ 0x6e
 80049b0:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049b4:	f7fc f804 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 80049b8:	2328      	movs	r3, #40	@ 0x28
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	f240 133b 	movw	r3, #315	@ 0x13b
 80049c0:	2214      	movs	r2, #20
 80049c2:	21d7      	movs	r1, #215	@ 0xd7
 80049c4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049c8:	f7fb fffa 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80049cc:	2341      	movs	r3, #65	@ 0x41
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	f240 133b 	movw	r3, #315	@ 0x13b
 80049d4:	222d      	movs	r2, #45	@ 0x2d
 80049d6:	2105      	movs	r1, #5
 80049d8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80049dc:	f7fb fff0 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 80049e0:	2302      	movs	r3, #2
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004c58 <Display_dab_digrad_status_background+0x2e4>)
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80049ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049f0:	2130      	movs	r1, #48	@ 0x30
 80049f2:	200a      	movs	r0, #10
 80049f4:	f7fc f886 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 80049f8:	2302      	movs	r3, #2
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	4b97      	ldr	r3, [pc, #604]	@ (8004c5c <Display_dab_digrad_status_background+0x2e8>)
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a08:	2130      	movs	r1, #48	@ 0x30
 8004a0a:	205a      	movs	r0, #90	@ 0x5a
 8004a0c:	f7fc f87a 	bl	8000b04 <ILI9341_Draw_String>

	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004a10:	235a      	movs	r3, #90	@ 0x5a
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	f240 133b 	movw	r3, #315	@ 0x13b
 8004a18:	2246      	movs	r2, #70	@ 0x46
 8004a1a:	2105      	movs	r1, #5
 8004a1c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004a20:	f7fb ffce 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8004a24:	2302      	movs	r3, #2
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	4b8d      	ldr	r3, [pc, #564]	@ (8004c60 <Display_dab_digrad_status_background+0x2ec>)
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a34:	2149      	movs	r1, #73	@ 0x49
 8004a36:	200a      	movs	r0, #10
 8004a38:	f7fc f864 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	4b88      	ldr	r3, [pc, #544]	@ (8004c64 <Display_dab_digrad_status_background+0x2f0>)
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a4c:	2149      	movs	r1, #73	@ 0x49
 8004a4e:	2069      	movs	r0, #105	@ 0x69
 8004a50:	f7fc f858 	bl	8000b04 <ILI9341_Draw_String>

	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004a54:	2373      	movs	r3, #115	@ 0x73
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	f240 133b 	movw	r3, #315	@ 0x13b
 8004a5c:	225f      	movs	r2, #95	@ 0x5f
 8004a5e:	2105      	movs	r1, #5
 8004a60:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004a64:	f7fb ffac 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 8004a68:	2302      	movs	r3, #2
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c68 <Display_dab_digrad_status_background+0x2f4>)
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a78:	2162      	movs	r1, #98	@ 0x62
 8004a7a:	200a      	movs	r0, #10
 8004a7c:	f7fc f842 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 8004a80:	2302      	movs	r3, #2
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	4b77      	ldr	r3, [pc, #476]	@ (8004c64 <Display_dab_digrad_status_background+0x2f0>)
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004a8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a90:	2162      	movs	r1, #98	@ 0x62
 8004a92:	2069      	movs	r0, #105	@ 0x69
 8004a94:	f7fc f836 	bl	8000b04 <ILI9341_Draw_String>

	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 8004a98:	238c      	movs	r3, #140	@ 0x8c
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	f240 133b 	movw	r3, #315	@ 0x13b
 8004aa0:	2278      	movs	r2, #120	@ 0x78
 8004aa2:	2105      	movs	r1, #5
 8004aa4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004aa8:	f7fb ff8a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 8004aac:	2302      	movs	r3, #2
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	4b6e      	ldr	r3, [pc, #440]	@ (8004c6c <Display_dab_digrad_status_background+0x2f8>)
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004abc:	217b      	movs	r1, #123	@ 0x7b
 8004abe:	200a      	movs	r0, #10
 8004ac0:	f7fc f820 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	4b69      	ldr	r3, [pc, #420]	@ (8004c70 <Display_dab_digrad_status_background+0x2fc>)
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ad4:	217b      	movs	r1, #123	@ 0x7b
 8004ad6:	206e      	movs	r0, #110	@ 0x6e
 8004ad8:	f7fc f814 	bl	8000b04 <ILI9341_Draw_String>

	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004adc:	23a5      	movs	r3, #165	@ 0xa5
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	f240 133b 	movw	r3, #315	@ 0x13b
 8004ae4:	2291      	movs	r2, #145	@ 0x91
 8004ae6:	2105      	movs	r1, #5
 8004ae8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004aec:	f7fb ff68 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8004af0:	2302      	movs	r3, #2
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	4b5f      	ldr	r3, [pc, #380]	@ (8004c74 <Display_dab_digrad_status_background+0x300>)
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b00:	2194      	movs	r1, #148	@ 0x94
 8004b02:	200a      	movs	r0, #10
 8004b04:	f7fb fffe 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004b08:	2302      	movs	r3, #2
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8004c78 <Display_dab_digrad_status_background+0x304>)
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b18:	2194      	movs	r1, #148	@ 0x94
 8004b1a:	2071      	movs	r0, #113	@ 0x71
 8004b1c:	f7fb fff2 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8004b20:	2302      	movs	r3, #2
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	4b55      	ldr	r3, [pc, #340]	@ (8004c7c <Display_dab_digrad_status_background+0x308>)
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b30:	2194      	movs	r1, #148	@ 0x94
 8004b32:	2094      	movs	r0, #148	@ 0x94
 8004b34:	f7fb ffe6 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8004b38:	2302      	movs	r3, #2
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	4b50      	ldr	r3, [pc, #320]	@ (8004c80 <Display_dab_digrad_status_background+0x30c>)
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b48:	2194      	movs	r1, #148	@ 0x94
 8004b4a:	20b7      	movs	r0, #183	@ 0xb7
 8004b4c:	f7fb ffda 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8004b50:	2302      	movs	r3, #2
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	4b4b      	ldr	r3, [pc, #300]	@ (8004c84 <Display_dab_digrad_status_background+0x310>)
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b60:	2194      	movs	r1, #148	@ 0x94
 8004b62:	20db      	movs	r0, #219	@ 0xdb
 8004b64:	f7fb ffce 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8004b68:	2302      	movs	r3, #2
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	4b46      	ldr	r3, [pc, #280]	@ (8004c88 <Display_dab_digrad_status_background+0x314>)
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b78:	2194      	movs	r1, #148	@ 0x94
 8004b7a:	f240 101b 	movw	r0, #283	@ 0x11b
 8004b7e:	f7fb ffc1 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004b82:	2302      	movs	r3, #2
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	4b41      	ldr	r3, [pc, #260]	@ (8004c8c <Display_dab_digrad_status_background+0x318>)
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004b8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b92:	2194      	movs	r1, #148	@ 0x94
 8004b94:	f240 1025 	movw	r0, #293	@ 0x125
 8004b98:	f7fb ffb4 	bl	8000b04 <ILI9341_Draw_String>

	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004b9c:	23be      	movs	r3, #190	@ 0xbe
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	f240 133b 	movw	r3, #315	@ 0x13b
 8004ba4:	22aa      	movs	r2, #170	@ 0xaa
 8004ba6:	2105      	movs	r1, #5
 8004ba8:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8004bac:	f7fb ff08 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	4b36      	ldr	r3, [pc, #216]	@ (8004c90 <Display_dab_digrad_status_background+0x31c>)
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bc0:	21ad      	movs	r1, #173	@ 0xad
 8004bc2:	200a      	movs	r0, #10
 8004bc4:	f7fb ff9e 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8004bc8:	2302      	movs	r3, #2
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	4b31      	ldr	r3, [pc, #196]	@ (8004c94 <Display_dab_digrad_status_background+0x320>)
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004bd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bd8:	21ad      	movs	r1, #173	@ 0xad
 8004bda:	207d      	movs	r0, #125	@ 0x7d
 8004bdc:	f7fb ff92 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004be0:	2302      	movs	r3, #2
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	4b2c      	ldr	r3, [pc, #176]	@ (8004c98 <Display_dab_digrad_status_background+0x324>)
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bf0:	21ad      	movs	r1, #173	@ 0xad
 8004bf2:	20b4      	movs	r0, #180	@ 0xb4
 8004bf4:	f7fb ff86 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004bf8:	23eb      	movs	r3, #235	@ 0xeb
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	239d      	movs	r3, #157	@ 0x9d
 8004bfe:	22c3      	movs	r2, #195	@ 0xc3
 8004c00:	2105      	movs	r1, #5
 8004c02:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004c06:	f7fb fedb 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004c0a:	23eb      	movs	r3, #235	@ 0xeb
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	f240 133b 	movw	r3, #315	@ 0x13b
 8004c12:	22c3      	movs	r2, #195	@ 0xc3
 8004c14:	21a3      	movs	r1, #163	@ 0xa3
 8004c16:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8004c1a:	f7fb fed1 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004c1e:	2302      	movs	r3, #2
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	4b1e      	ldr	r3, [pc, #120]	@ (8004c9c <Display_dab_digrad_status_background+0x328>)
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c2e:	21cf      	movs	r1, #207	@ 0xcf
 8004c30:	2023      	movs	r0, #35	@ 0x23
 8004c32:	f7fb ff67 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8004c36:	2302      	movs	r3, #2
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	4b19      	ldr	r3, [pc, #100]	@ (8004ca0 <Display_dab_digrad_status_background+0x32c>)
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004c42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c46:	21cf      	movs	r1, #207	@ 0xcf
 8004c48:	20cd      	movs	r0, #205	@ 0xcd
 8004c4a:	f7fb ff5b 	bl	8000b04 <ILI9341_Draw_String>
}
 8004c4e:	bf00      	nop
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	0800e9f0 	.word	0x0800e9f0
 8004c58:	0800ea04 	.word	0x0800ea04
 8004c5c:	0800ea0c 	.word	0x0800ea0c
 8004c60:	0800ea14 	.word	0x0800ea14
 8004c64:	0800ea18 	.word	0x0800ea18
 8004c68:	0800ea1c 	.word	0x0800ea1c
 8004c6c:	0800ea20 	.word	0x0800ea20
 8004c70:	0800ea28 	.word	0x0800ea28
 8004c74:	0800ea2c 	.word	0x0800ea2c
 8004c78:	0800e798 	.word	0x0800e798
 8004c7c:	0800e79c 	.word	0x0800e79c
 8004c80:	0800ea38 	.word	0x0800ea38
 8004c84:	0800ea40 	.word	0x0800ea40
 8004c88:	0800e8b0 	.word	0x0800e8b0
 8004c8c:	0800ea48 	.word	0x0800ea48
 8004c90:	0800ea4c 	.word	0x0800ea4c
 8004c94:	0800ea58 	.word	0x0800ea58
 8004c98:	0800ea5c 	.word	0x0800ea5c
 8004c9c:	0800e778 	.word	0x0800e778
 8004ca0:	0800ea60 	.word	0x0800ea60

08004ca4 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	f107 0c18 	add.w	ip, r7, #24
 8004cb0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004cb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	23fa      	movs	r3, #250	@ 0xfa
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4a30      	ldr	r2, [pc, #192]	@ (8004d84 <Display_dab_digrad_status_data+0xe0>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	099b      	lsrs	r3, r3, #6
 8004cca:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4b2d      	ldr	r3, [pc, #180]	@ (8004d84 <Display_dab_digrad_status_data+0xe0>)
 8004cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd4:	099b      	lsrs	r3, r3, #6
 8004cd6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	80bb      	strh	r3, [r7, #4]

	//Valid
	if(digrad_status.valid)
 8004ce2:	7e7b      	ldrb	r3, [r7, #25]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <Display_dab_digrad_status_data+0x64>
	{
		ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004cee:	2302      	movs	r3, #2
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	4b25      	ldr	r3, [pc, #148]	@ (8004d88 <Display_dab_digrad_status_data+0xe4>)
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004cfa:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004cfe:	2117      	movs	r1, #23
 8004d00:	2023      	movs	r0, #35	@ 0x23
 8004d02:	f7fb feff 	bl	8000b04 <ILI9341_Draw_String>
 8004d06:	e00b      	b.n	8004d20 <Display_dab_digrad_status_data+0x7c>
	}
	else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004d08:	2302      	movs	r3, #2
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d88 <Display_dab_digrad_status_data+0xe4>)
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d14:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004d18:	2117      	movs	r1, #23
 8004d1a:	2023      	movs	r0, #35	@ 0x23
 8004d1c:	f7fb fef2 	bl	8000b04 <ILI9341_Draw_String>

	//ACQ
	if(digrad_status.acq)
 8004d20:	7e7b      	ldrb	r3, [r7, #25]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00c      	beq.n	8004d46 <Display_dab_digrad_status_data+0xa2>
	{
		ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	4b16      	ldr	r3, [pc, #88]	@ (8004d8c <Display_dab_digrad_status_data+0xe8>)
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d38:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004d3c:	2117      	movs	r1, #23
 8004d3e:	2085      	movs	r0, #133	@ 0x85
 8004d40:	f7fb fee0 	bl	8000b04 <ILI9341_Draw_String>
 8004d44:	e00b      	b.n	8004d5e <Display_dab_digrad_status_data+0xba>
	}
	else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004d46:	2302      	movs	r3, #2
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <Display_dab_digrad_status_data+0xe8>)
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d52:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004d56:	2117      	movs	r1, #23
 8004d58:	2085      	movs	r0, #133	@ 0x85
 8004d5a:	f7fb fed3 	bl	8000b04 <ILI9341_Draw_String>

	//FIC_ERROR
	if(digrad_status.fic_err)
 8004d5e:	7e7b      	ldrb	r3, [r7, #25]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d014      	beq.n	8004d94 <Display_dab_digrad_status_data+0xf0>
	{
		ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <Display_dab_digrad_status_data+0xec>)
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004d76:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004d7a:	2117      	movs	r1, #23
 8004d7c:	20e4      	movs	r0, #228	@ 0xe4
 8004d7e:	f7fb fec1 	bl	8000b04 <ILI9341_Draw_String>
 8004d82:	e013      	b.n	8004dac <Display_dab_digrad_status_data+0x108>
 8004d84:	10624dd3 	.word	0x10624dd3
 8004d88:	0800ea6c 	.word	0x0800ea6c
 8004d8c:	0800ea74 	.word	0x0800ea74
 8004d90:	0800ea7c 	.word	0x0800ea7c
	}
	else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004d94:	2302      	movs	r3, #2
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	4bb6      	ldr	r3, [pc, #728]	@ (8005074 <Display_dab_digrad_status_data+0x3d0>)
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004da0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004da4:	2117      	movs	r1, #23
 8004da6:	20e4      	movs	r0, #228	@ 0xe4
 8004da8:	f7fb feac 	bl	8000b04 <ILI9341_Draw_String>

	//RSSI
	if(digrad_status.rssi <= 13) 								color = RED;
 8004dac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004db0:	2b0d      	cmp	r3, #13
 8004db2:	dc02      	bgt.n	8004dba <Display_dab_digrad_status_data+0x116>
 8004db4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004db8:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8004dba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dbe:	2b1a      	cmp	r3, #26
 8004dc0:	dc06      	bgt.n	8004dd0 <Display_dab_digrad_status_data+0x12c>
 8004dc2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dc6:	2b0d      	cmp	r3, #13
 8004dc8:	dd02      	ble.n	8004dd0 <Display_dab_digrad_status_data+0x12c>
 8004dca:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004dce:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004dd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dd4:	2b27      	cmp	r3, #39	@ 0x27
 8004dd6:	dc06      	bgt.n	8004de6 <Display_dab_digrad_status_data+0x142>
 8004dd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004ddc:	2b1a      	cmp	r3, #26
 8004dde:	dd02      	ble.n	8004de6 <Display_dab_digrad_status_data+0x142>
 8004de0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004de4:	60fb      	str	r3, [r7, #12]
	if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004de6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004dea:	2b34      	cmp	r3, #52	@ 0x34
 8004dec:	dc06      	bgt.n	8004dfc <Display_dab_digrad_status_data+0x158>
 8004dee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004df2:	2b27      	cmp	r3, #39	@ 0x27
 8004df4:	dd02      	ble.n	8004dfc <Display_dab_digrad_status_data+0x158>
 8004df6:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004dfa:	60fb      	str	r3, [r7, #12]
	if(digrad_status.rssi > 52) 								color = GREEN;
 8004dfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e00:	2b34      	cmp	r3, #52	@ 0x34
 8004e02:	dd02      	ble.n	8004e0a <Display_dab_digrad_status_data+0x166>
 8004e04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004e08:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	4b9a      	ldr	r3, [pc, #616]	@ (8005078 <Display_dab_digrad_status_data+0x3d4>)
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e1a:	2130      	movs	r1, #48	@ 0x30
 8004e1c:	2032      	movs	r0, #50	@ 0x32
 8004e1e:	f7fb fe71 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004e22:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e26:	220a      	movs	r2, #10
 8004e28:	4994      	ldr	r1, [pc, #592]	@ (800507c <Display_dab_digrad_status_data+0x3d8>)
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f008 fd0a 	bl	800d844 <itoa>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2202      	movs	r2, #2
 8004e34:	9201      	str	r2, [sp, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e40:	2130      	movs	r1, #48	@ 0x30
 8004e42:	2032      	movs	r0, #50	@ 0x32
 8004e44:	f7fb fe5e 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8004e48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	23b4      	movs	r3, #180	@ 0xb4
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	da00      	bge.n	8004e5a <Display_dab_digrad_status_data+0x1b6>
 8004e58:	333f      	adds	r3, #63	@ 0x3f
 8004e5a:	119b      	asrs	r3, r3, #6
 8004e5c:	3382      	adds	r3, #130	@ 0x82
 8004e5e:	461a      	mov	r2, r3
 8004e60:	233c      	movs	r3, #60	@ 0x3c
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	2232      	movs	r2, #50	@ 0x32
 8004e68:	2182      	movs	r1, #130	@ 0x82
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7fb fda8 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004e70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e74:	461a      	mov	r2, r3
 8004e76:	23b4      	movs	r3, #180	@ 0xb4
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	da00      	bge.n	8004e82 <Display_dab_digrad_status_data+0x1de>
 8004e80:	333f      	adds	r3, #63	@ 0x3f
 8004e82:	119b      	asrs	r3, r3, #6
 8004e84:	3382      	adds	r3, #130	@ 0x82
 8004e86:	4619      	mov	r1, r3
 8004e88:	233c      	movs	r3, #60	@ 0x3c
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004e90:	2232      	movs	r2, #50	@ 0x32
 8004e92:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004e96:	f7fb fd93 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//SNR
	if(digrad_status.snr <= 4) 									color = RED;
 8004e9a:	7efb      	ldrb	r3, [r7, #27]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d802      	bhi.n	8004ea6 <Display_dab_digrad_status_data+0x202>
 8004ea0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004ea4:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004ea6:	7efb      	ldrb	r3, [r7, #27]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d805      	bhi.n	8004eb8 <Display_dab_digrad_status_data+0x214>
 8004eac:	7efb      	ldrb	r3, [r7, #27]
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d902      	bls.n	8004eb8 <Display_dab_digrad_status_data+0x214>
 8004eb2:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004eb6:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004eb8:	7efb      	ldrb	r3, [r7, #27]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d805      	bhi.n	8004eca <Display_dab_digrad_status_data+0x226>
 8004ebe:	7efb      	ldrb	r3, [r7, #27]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d902      	bls.n	8004eca <Display_dab_digrad_status_data+0x226>
 8004ec4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004ec8:	60fb      	str	r3, [r7, #12]
	if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004eca:	7efb      	ldrb	r3, [r7, #27]
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d805      	bhi.n	8004edc <Display_dab_digrad_status_data+0x238>
 8004ed0:	7efb      	ldrb	r3, [r7, #27]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d902      	bls.n	8004edc <Display_dab_digrad_status_data+0x238>
 8004ed6:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004eda:	60fb      	str	r3, [r7, #12]
	if(digrad_status.snr > 16) 									color = GREEN;
 8004edc:	7efb      	ldrb	r3, [r7, #27]
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d902      	bls.n	8004ee8 <Display_dab_digrad_status_data+0x244>
 8004ee2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004ee6:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004ee8:	2302      	movs	r3, #2
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	4b62      	ldr	r3, [pc, #392]	@ (8005078 <Display_dab_digrad_status_data+0x3d4>)
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004ef4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ef8:	2149      	movs	r1, #73	@ 0x49
 8004efa:	2032      	movs	r0, #50	@ 0x32
 8004efc:	f7fb fe02 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004f00:	7efb      	ldrb	r3, [r7, #27]
 8004f02:	220a      	movs	r2, #10
 8004f04:	495d      	ldr	r1, [pc, #372]	@ (800507c <Display_dab_digrad_status_data+0x3d8>)
 8004f06:	4618      	mov	r0, r3
 8004f08:	f008 fc9c 	bl	800d844 <itoa>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2202      	movs	r2, #2
 8004f10:	9201      	str	r2, [sp, #4]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f1c:	2149      	movs	r1, #73	@ 0x49
 8004f1e:	2032      	movs	r0, #50	@ 0x32
 8004f20:	f7fb fdf0 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004f24:	7efb      	ldrb	r3, [r7, #27]
 8004f26:	461a      	mov	r2, r3
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3382      	adds	r3, #130	@ 0x82
 8004f30:	461a      	mov	r2, r3
 8004f32:	2355      	movs	r3, #85	@ 0x55
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	224b      	movs	r2, #75	@ 0x4b
 8004f3a:	2182      	movs	r1, #130	@ 0x82
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7fb fd3f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004f42:	7efb      	ldrb	r3, [r7, #27]
 8004f44:	461a      	mov	r2, r3
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3382      	adds	r3, #130	@ 0x82
 8004f4e:	4619      	mov	r1, r3
 8004f50:	2355      	movs	r3, #85	@ 0x55
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8004f58:	224b      	movs	r2, #75	@ 0x4b
 8004f5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004f5e:	f7fb fd2f 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//CNR
	if(digrad_status.cnr <= 11) 								color = RED;
 8004f62:	7f7b      	ldrb	r3, [r7, #29]
 8004f64:	2b0b      	cmp	r3, #11
 8004f66:	d802      	bhi.n	8004f6e <Display_dab_digrad_status_data+0x2ca>
 8004f68:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004f6c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004f6e:	7f7b      	ldrb	r3, [r7, #29]
 8004f70:	2b16      	cmp	r3, #22
 8004f72:	d805      	bhi.n	8004f80 <Display_dab_digrad_status_data+0x2dc>
 8004f74:	7f7b      	ldrb	r3, [r7, #29]
 8004f76:	2b0b      	cmp	r3, #11
 8004f78:	d902      	bls.n	8004f80 <Display_dab_digrad_status_data+0x2dc>
 8004f7a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8004f7e:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004f80:	7f7b      	ldrb	r3, [r7, #29]
 8004f82:	2b21      	cmp	r3, #33	@ 0x21
 8004f84:	d805      	bhi.n	8004f92 <Display_dab_digrad_status_data+0x2ee>
 8004f86:	7f7b      	ldrb	r3, [r7, #29]
 8004f88:	2b16      	cmp	r3, #22
 8004f8a:	d902      	bls.n	8004f92 <Display_dab_digrad_status_data+0x2ee>
 8004f8c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004f90:	60fb      	str	r3, [r7, #12]
	if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004f92:	7f7b      	ldrb	r3, [r7, #29]
 8004f94:	2b2c      	cmp	r3, #44	@ 0x2c
 8004f96:	d805      	bhi.n	8004fa4 <Display_dab_digrad_status_data+0x300>
 8004f98:	7f7b      	ldrb	r3, [r7, #29]
 8004f9a:	2b21      	cmp	r3, #33	@ 0x21
 8004f9c:	d902      	bls.n	8004fa4 <Display_dab_digrad_status_data+0x300>
 8004f9e:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8004fa2:	60fb      	str	r3, [r7, #12]
	if(digrad_status.cnr > 44) 									color = GREEN;
 8004fa4:	7f7b      	ldrb	r3, [r7, #29]
 8004fa6:	2b2c      	cmp	r3, #44	@ 0x2c
 8004fa8:	d902      	bls.n	8004fb0 <Display_dab_digrad_status_data+0x30c>
 8004faa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004fae:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	4b30      	ldr	r3, [pc, #192]	@ (8005078 <Display_dab_digrad_status_data+0x3d4>)
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004fbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fc0:	2162      	movs	r1, #98	@ 0x62
 8004fc2:	2032      	movs	r0, #50	@ 0x32
 8004fc4:	f7fb fd9e 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004fc8:	7f7b      	ldrb	r3, [r7, #29]
 8004fca:	220a      	movs	r2, #10
 8004fcc:	492b      	ldr	r1, [pc, #172]	@ (800507c <Display_dab_digrad_status_data+0x3d8>)
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f008 fc38 	bl	800d844 <itoa>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	9201      	str	r2, [sp, #4]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8004fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fe4:	2162      	movs	r1, #98	@ 0x62
 8004fe6:	2032      	movs	r0, #50	@ 0x32
 8004fe8:	f7fb fd8c 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004fec:	7f7b      	ldrb	r3, [r7, #29]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	23b4      	movs	r3, #180	@ 0xb4
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	4a22      	ldr	r2, [pc, #136]	@ (8005080 <Display_dab_digrad_status_data+0x3dc>)
 8004ff8:	fb82 1203 	smull	r1, r2, r2, r3
 8004ffc:	1112      	asrs	r2, r2, #4
 8004ffe:	17db      	asrs	r3, r3, #31
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	3382      	adds	r3, #130	@ 0x82
 8005004:	461a      	mov	r2, r3
 8005006:	236e      	movs	r3, #110	@ 0x6e
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	4613      	mov	r3, r2
 800500c:	2264      	movs	r2, #100	@ 0x64
 800500e:	2182      	movs	r1, #130	@ 0x82
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7fb fcd5 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8005016:	7f7b      	ldrb	r3, [r7, #29]
 8005018:	461a      	mov	r2, r3
 800501a:	23b4      	movs	r3, #180	@ 0xb4
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	4a17      	ldr	r2, [pc, #92]	@ (8005080 <Display_dab_digrad_status_data+0x3dc>)
 8005022:	fb82 1203 	smull	r1, r2, r2, r3
 8005026:	1112      	asrs	r2, r2, #4
 8005028:	17db      	asrs	r3, r3, #31
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	3382      	adds	r3, #130	@ 0x82
 800502e:	4619      	mov	r1, r3
 8005030:	236e      	movs	r3, #110	@ 0x6e
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8005038:	2264      	movs	r2, #100	@ 0x64
 800503a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800503e:	f7fb fcbf 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//FIC QUALITY
	if(digrad_status.fic_quality <= 20) 										color = RED;
 8005042:	7f3b      	ldrb	r3, [r7, #28]
 8005044:	2b14      	cmp	r3, #20
 8005046:	d802      	bhi.n	800504e <Display_dab_digrad_status_data+0x3aa>
 8005048:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800504c:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 800504e:	7f3b      	ldrb	r3, [r7, #28]
 8005050:	2b28      	cmp	r3, #40	@ 0x28
 8005052:	d805      	bhi.n	8005060 <Display_dab_digrad_status_data+0x3bc>
 8005054:	7f3b      	ldrb	r3, [r7, #28]
 8005056:	2b14      	cmp	r3, #20
 8005058:	d902      	bls.n	8005060 <Display_dab_digrad_status_data+0x3bc>
 800505a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800505e:	60fb      	str	r3, [r7, #12]
	if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8005060:	7f3b      	ldrb	r3, [r7, #28]
 8005062:	2b3c      	cmp	r3, #60	@ 0x3c
 8005064:	d80e      	bhi.n	8005084 <Display_dab_digrad_status_data+0x3e0>
 8005066:	7f3b      	ldrb	r3, [r7, #28]
 8005068:	2b28      	cmp	r3, #40	@ 0x28
 800506a:	d90b      	bls.n	8005084 <Display_dab_digrad_status_data+0x3e0>
 800506c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e007      	b.n	8005084 <Display_dab_digrad_status_data+0x3e0>
 8005074:	0800ea7c 	.word	0x0800ea7c
 8005078:	0800ea88 	.word	0x0800ea88
 800507c:	20006d90 	.word	0x20006d90
 8005080:	4bda12f7 	.word	0x4bda12f7
	if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8005084:	7f3b      	ldrb	r3, [r7, #28]
 8005086:	2b50      	cmp	r3, #80	@ 0x50
 8005088:	d805      	bhi.n	8005096 <Display_dab_digrad_status_data+0x3f2>
 800508a:	7f3b      	ldrb	r3, [r7, #28]
 800508c:	2b3c      	cmp	r3, #60	@ 0x3c
 800508e:	d902      	bls.n	8005096 <Display_dab_digrad_status_data+0x3f2>
 8005090:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 8005094:	60fb      	str	r3, [r7, #12]
	if(digrad_status.fic_quality > 80) 											color = GREEN;
 8005096:	7f3b      	ldrb	r3, [r7, #28]
 8005098:	2b50      	cmp	r3, #80	@ 0x50
 800509a:	d902      	bls.n	80050a2 <Display_dab_digrad_status_data+0x3fe>
 800509c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80050a0:	60fb      	str	r3, [r7, #12]
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 80050a2:	2302      	movs	r3, #2
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	4ba9      	ldr	r3, [pc, #676]	@ (800534c <Display_dab_digrad_status_data+0x6a8>)
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80050ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050b2:	217b      	movs	r1, #123	@ 0x7b
 80050b4:	204b      	movs	r0, #75	@ 0x4b
 80050b6:	f7fb fd25 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 80050ba:	7f3b      	ldrb	r3, [r7, #28]
 80050bc:	220a      	movs	r2, #10
 80050be:	49a4      	ldr	r1, [pc, #656]	@ (8005350 <Display_dab_digrad_status_data+0x6ac>)
 80050c0:	4618      	mov	r0, r3
 80050c2:	f008 fbbf 	bl	800d844 <itoa>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2202      	movs	r2, #2
 80050ca:	9201      	str	r2, [sp, #4]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80050d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050d6:	217b      	movs	r1, #123	@ 0x7b
 80050d8:	204b      	movs	r0, #75	@ 0x4b
 80050da:	f7fb fd13 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 80050de:	7f3b      	ldrb	r3, [r7, #28]
 80050e0:	461a      	mov	r2, r3
 80050e2:	23b4      	movs	r3, #180	@ 0xb4
 80050e4:	fb02 f303 	mul.w	r3, r2, r3
 80050e8:	4a9a      	ldr	r2, [pc, #616]	@ (8005354 <Display_dab_digrad_status_data+0x6b0>)
 80050ea:	fb82 1203 	smull	r1, r2, r2, r3
 80050ee:	1152      	asrs	r2, r2, #5
 80050f0:	17db      	asrs	r3, r3, #31
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	3382      	adds	r3, #130	@ 0x82
 80050f6:	461a      	mov	r2, r3
 80050f8:	2387      	movs	r3, #135	@ 0x87
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	227d      	movs	r2, #125	@ 0x7d
 8005100:	2182      	movs	r1, #130	@ 0x82
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7fb fc5c 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 8005108:	7f3b      	ldrb	r3, [r7, #28]
 800510a:	461a      	mov	r2, r3
 800510c:	23b4      	movs	r3, #180	@ 0xb4
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	4a90      	ldr	r2, [pc, #576]	@ (8005354 <Display_dab_digrad_status_data+0x6b0>)
 8005114:	fb82 1203 	smull	r1, r2, r2, r3
 8005118:	1152      	asrs	r2, r2, #5
 800511a:	17db      	asrs	r3, r3, #31
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	3382      	adds	r3, #130	@ 0x82
 8005120:	4619      	mov	r1, r3
 8005122:	2387      	movs	r3, #135	@ 0x87
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800512a:	227d      	movs	r2, #125	@ 0x7d
 800512c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005130:	f7fb fc46 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//TUNE FREQ
	ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	4a88      	ldr	r2, [pc, #544]	@ (8005358 <Display_dab_digrad_status_data+0x6b4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	099b      	lsrs	r3, r3, #6
 800513e:	220a      	movs	r2, #10
 8005140:	4983      	ldr	r1, [pc, #524]	@ (8005350 <Display_dab_digrad_status_data+0x6ac>)
 8005142:	4618      	mov	r0, r3
 8005144:	f008 fb7e 	bl	800d844 <itoa>
 8005148:	4603      	mov	r3, r0
 800514a:	2202      	movs	r2, #2
 800514c:	9201      	str	r2, [sp, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005154:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005158:	2194      	movs	r1, #148	@ 0x94
 800515a:	205b      	movs	r0, #91	@ 0x5b
 800515c:	f7fb fcd2 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8005160:	6a3a      	ldr	r2, [r7, #32]
 8005162:	4b7d      	ldr	r3, [pc, #500]	@ (8005358 <Display_dab_digrad_status_data+0x6b4>)
 8005164:	fba3 1302 	umull	r1, r3, r3, r2
 8005168:	099b      	lsrs	r3, r3, #6
 800516a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	220a      	movs	r2, #10
 8005176:	4976      	ldr	r1, [pc, #472]	@ (8005350 <Display_dab_digrad_status_data+0x6ac>)
 8005178:	4618      	mov	r0, r3
 800517a:	f008 fb63 	bl	800d844 <itoa>
 800517e:	4603      	mov	r3, r0
 8005180:	2202      	movs	r2, #2
 8005182:	9201      	str	r2, [sp, #4]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800518a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800518e:	2194      	movs	r1, #148	@ 0x94
 8005190:	2078      	movs	r0, #120	@ 0x78
 8005192:	f7fb fcb7 	bl	8000b04 <ILI9341_Draw_String>

	//TUNE INDEX
	if(digrad_status.tune_index < 10)
 8005196:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800519a:	2b09      	cmp	r3, #9
 800519c:	d821      	bhi.n	80051e2 <Display_dab_digrad_status_data+0x53e>
	{
		ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 800519e:	2302      	movs	r3, #2
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	4b6e      	ldr	r3, [pc, #440]	@ (800535c <Display_dab_digrad_status_data+0x6b8>)
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051ae:	2194      	movs	r1, #148	@ 0x94
 80051b0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80051b4:	f7fb fca6 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 80051b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051bc:	220a      	movs	r2, #10
 80051be:	4964      	ldr	r1, [pc, #400]	@ (8005350 <Display_dab_digrad_status_data+0x6ac>)
 80051c0:	4618      	mov	r0, r3
 80051c2:	f008 fb3f 	bl	800d844 <itoa>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2202      	movs	r2, #2
 80051ca:	9201      	str	r2, [sp, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051d6:	2194      	movs	r1, #148	@ 0x94
 80051d8:	f240 1011 	movw	r0, #273	@ 0x111
 80051dc:	f7fb fc92 	bl	8000b04 <ILI9341_Draw_String>
 80051e0:	e013      	b.n	800520a <Display_dab_digrad_status_data+0x566>
	}
	else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 80051e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051e6:	220a      	movs	r2, #10
 80051e8:	4959      	ldr	r1, [pc, #356]	@ (8005350 <Display_dab_digrad_status_data+0x6ac>)
 80051ea:	4618      	mov	r0, r3
 80051ec:	f008 fb2a 	bl	800d844 <itoa>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2202      	movs	r2, #2
 80051f4:	9201      	str	r2, [sp, #4]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80051fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005200:	2194      	movs	r1, #148	@ 0x94
 8005202:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8005206:	f7fb fc7d 	bl	8000b04 <ILI9341_Draw_String>

	//ANT CAP TRIM
	if(cap_val_pf_int < 10)
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	2b09      	cmp	r3, #9
 800520e:	d81d      	bhi.n	800524c <Display_dab_digrad_status_data+0x5a8>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8005210:	2302      	movs	r3, #2
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	4b52      	ldr	r3, [pc, #328]	@ (8005360 <Display_dab_digrad_status_data+0x6bc>)
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800521c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005220:	21ad      	movs	r1, #173	@ 0xad
 8005222:	204f      	movs	r0, #79	@ 0x4f
 8005224:	f7fb fc6e 	bl	8000b04 <ILI9341_Draw_String>
		ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	220a      	movs	r2, #10
 800522c:	4948      	ldr	r1, [pc, #288]	@ (8005350 <Display_dab_digrad_status_data+0x6ac>)
 800522e:	4618      	mov	r0, r3
 8005230:	f008 fb08 	bl	800d844 <itoa>
 8005234:	4603      	mov	r3, r0
 8005236:	2202      	movs	r2, #2
 8005238:	9201      	str	r2, [sp, #4]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005244:	21ad      	movs	r1, #173	@ 0xad
 8005246:	2057      	movs	r0, #87	@ 0x57
 8005248:	f7fb fc5c 	bl	8000b04 <ILI9341_Draw_String>
	}
	if(cap_val_pf_int >= 10)
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	2b09      	cmp	r3, #9
 8005250:	d911      	bls.n	8005276 <Display_dab_digrad_status_data+0x5d2>
	{
		ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	220a      	movs	r2, #10
 8005256:	493e      	ldr	r1, [pc, #248]	@ (8005350 <Display_dab_digrad_status_data+0x6ac>)
 8005258:	4618      	mov	r0, r3
 800525a:	f008 faf3 	bl	800d844 <itoa>
 800525e:	4603      	mov	r3, r0
 8005260:	2202      	movs	r2, #2
 8005262:	9201      	str	r2, [sp, #4]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 800526a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800526e:	21ad      	movs	r1, #173	@ 0xad
 8005270:	204f      	movs	r0, #79	@ 0x4f
 8005272:	f7fb fc47 	bl	8000b04 <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 8005276:	2302      	movs	r3, #2
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	4b3a      	ldr	r3, [pc, #232]	@ (8005364 <Display_dab_digrad_status_data+0x6c0>)
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005282:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005286:	21ad      	movs	r1, #173	@ 0xad
 8005288:	205f      	movs	r0, #95	@ 0x5f
 800528a:	f7fb fc3b 	bl	8000b04 <ILI9341_Draw_String>
	switch(cap_val_pf_frac)
 800528e:	88bb      	ldrh	r3, [r7, #4]
 8005290:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005294:	4293      	cmp	r3, r2
 8005296:	d023      	beq.n	80052e0 <Display_dab_digrad_status_data+0x63c>
 8005298:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800529c:	4293      	cmp	r3, r2
 800529e:	dc2c      	bgt.n	80052fa <Display_dab_digrad_status_data+0x656>
 80052a0:	2bfa      	cmp	r3, #250	@ 0xfa
 80052a2:	d003      	beq.n	80052ac <Display_dab_digrad_status_data+0x608>
 80052a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80052a8:	d00d      	beq.n	80052c6 <Display_dab_digrad_status_data+0x622>
 80052aa:	e026      	b.n	80052fa <Display_dab_digrad_status_data+0x656>
	{
	case 250:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 80052ac:	2302      	movs	r3, #2
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005368 <Display_dab_digrad_status_data+0x6c4>)
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052bc:	21ad      	movs	r1, #173	@ 0xad
 80052be:	2067      	movs	r0, #103	@ 0x67
 80052c0:	f7fb fc20 	bl	8000b04 <ILI9341_Draw_String>
		break;
 80052c4:	e026      	b.n	8005314 <Display_dab_digrad_status_data+0x670>
	case 500:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 80052c6:	2302      	movs	r3, #2
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	4b28      	ldr	r3, [pc, #160]	@ (800536c <Display_dab_digrad_status_data+0x6c8>)
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052d6:	21ad      	movs	r1, #173	@ 0xad
 80052d8:	2067      	movs	r0, #103	@ 0x67
 80052da:	f7fb fc13 	bl	8000b04 <ILI9341_Draw_String>
		break;
 80052de:	e019      	b.n	8005314 <Display_dab_digrad_status_data+0x670>
	case 750:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 80052e0:	2302      	movs	r3, #2
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	4b22      	ldr	r3, [pc, #136]	@ (8005370 <Display_dab_digrad_status_data+0x6cc>)
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80052ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052f0:	21ad      	movs	r1, #173	@ 0xad
 80052f2:	2067      	movs	r0, #103	@ 0x67
 80052f4:	f7fb fc06 	bl	8000b04 <ILI9341_Draw_String>
		break;
 80052f8:	e00c      	b.n	8005314 <Display_dab_digrad_status_data+0x670>
	default:
		ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 80052fa:	2302      	movs	r3, #2
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005374 <Display_dab_digrad_status_data+0x6d0>)
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800530a:	21ad      	movs	r1, #173	@ 0xad
 800530c:	2067      	movs	r0, #103	@ 0x67
 800530e:	f7fb fbf9 	bl	8000b04 <ILI9341_Draw_String>
		break;
 8005312:	bf00      	nop
	}

	//BER
	ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 8005314:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	220a      	movs	r2, #10
 800531e:	490c      	ldr	r1, [pc, #48]	@ (8005350 <Display_dab_digrad_status_data+0x6ac>)
 8005320:	4618      	mov	r0, r3
 8005322:	f008 fa8f 	bl	800d844 <itoa>
 8005326:	4603      	mov	r3, r0
 8005328:	2202      	movs	r2, #2
 800532a:	9201      	str	r2, [sp, #4]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005336:	21ad      	movs	r1, #173	@ 0xad
 8005338:	20d7      	movs	r0, #215	@ 0xd7
 800533a:	f7fb fbe3 	bl	8000b04 <ILI9341_Draw_String>
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005348:	b004      	add	sp, #16
 800534a:	4770      	bx	lr
 800534c:	0800ea88 	.word	0x0800ea88
 8005350:	20006d90 	.word	0x20006d90
 8005354:	51eb851f 	.word	0x51eb851f
 8005358:	10624dd3 	.word	0x10624dd3
 800535c:	0800ea8c 	.word	0x0800ea8c
 8005360:	0800e788 	.word	0x0800e788
 8005364:	0800e798 	.word	0x0800e798
 8005368:	0800ea90 	.word	0x0800ea90
 800536c:	0800ea94 	.word	0x0800ea94
 8005370:	0800ea98 	.word	0x0800ea98
 8005374:	0800ea9c 	.word	0x0800ea9c

08005378 <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 800537e:	f7fe fc15 	bl	8003bac <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2);
 8005382:	2302      	movs	r3, #2
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	4b6d      	ldr	r3, [pc, #436]	@ (800553c <Display_settings_screen_background+0x1c4>)
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	2300      	movs	r3, #0
 800538c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005390:	2101      	movs	r1, #1
 8005392:	2005      	movs	r0, #5
 8005394:	f7fb fbb6 	bl	8000b04 <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 8005398:	2337      	movs	r3, #55	@ 0x37
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	f240 133b 	movw	r3, #315	@ 0x13b
 80053a0:	2214      	movs	r2, #20
 80053a2:	2105      	movs	r1, #5
 80053a4:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 80053a8:	f7fb fb0a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 80053ac:	2302      	movs	r3, #2
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	4b63      	ldr	r3, [pc, #396]	@ (8005540 <Display_settings_screen_background+0x1c8>)
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80053b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053bc:	2116      	movs	r1, #22
 80053be:	2037      	movs	r0, #55	@ 0x37
 80053c0:	f7fb fba0 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 80053c4:	2302      	movs	r3, #2
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	4b5e      	ldr	r3, [pc, #376]	@ (8005544 <Display_settings_screen_background+0x1cc>)
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 80053d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053d4:	2116      	movs	r1, #22
 80053d6:	20ce      	movs	r0, #206	@ 0xce
 80053d8:	f7fb fb94 	bl	8000b04 <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 80053dc:	2364      	movs	r3, #100	@ 0x64
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	239d      	movs	r3, #157	@ 0x9d
 80053e2:	223c      	movs	r2, #60	@ 0x3c
 80053e4:	2105      	movs	r1, #5
 80053e6:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80053ea:	f7fb fae9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 80053ee:	2364      	movs	r3, #100	@ 0x64
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	f240 133b 	movw	r3, #315	@ 0x13b
 80053f6:	223c      	movs	r2, #60	@ 0x3c
 80053f8:	21a3      	movs	r1, #163	@ 0xa3
 80053fa:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80053fe:	f7fb fadf 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 8005402:	2302      	movs	r3, #2
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	4b50      	ldr	r3, [pc, #320]	@ (8005548 <Display_settings_screen_background+0x1d0>)
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800540e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005412:	2148      	movs	r1, #72	@ 0x48
 8005414:	2036      	movs	r0, #54	@ 0x36
 8005416:	f7fb fb75 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 800541a:	2302      	movs	r3, #2
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	4b4b      	ldr	r3, [pc, #300]	@ (800554c <Display_settings_screen_background+0x1d4>)
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800542a:	2148      	movs	r1, #72	@ 0x48
 800542c:	20d3      	movs	r0, #211	@ 0xd3
 800542e:	f7fb fb69 	bl	8000b04 <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 8005432:	2391      	movs	r3, #145	@ 0x91
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	239d      	movs	r3, #157	@ 0x9d
 8005438:	2269      	movs	r2, #105	@ 0x69
 800543a:	2105      	movs	r1, #5
 800543c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005440:	f7fb fabe 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 8005444:	2391      	movs	r3, #145	@ 0x91
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	f240 133b 	movw	r3, #315	@ 0x13b
 800544c:	2269      	movs	r2, #105	@ 0x69
 800544e:	21a3      	movs	r1, #163	@ 0xa3
 8005450:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005454:	f7fb fab4 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 8005458:	2302      	movs	r3, #2
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	4b3c      	ldr	r3, [pc, #240]	@ (8005550 <Display_settings_screen_background+0x1d8>)
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005464:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005468:	2175      	movs	r1, #117	@ 0x75
 800546a:	2023      	movs	r0, #35	@ 0x23
 800546c:	f7fb fb4a 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 8005470:	2302      	movs	r3, #2
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	4b37      	ldr	r3, [pc, #220]	@ (8005554 <Display_settings_screen_background+0x1dc>)
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800547c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005480:	2175      	movs	r1, #117	@ 0x75
 8005482:	20c1      	movs	r0, #193	@ 0xc1
 8005484:	f7fb fb3e 	bl	8000b04 <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 8005488:	23be      	movs	r3, #190	@ 0xbe
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	239d      	movs	r3, #157	@ 0x9d
 800548e:	2296      	movs	r2, #150	@ 0x96
 8005490:	2105      	movs	r1, #5
 8005492:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005496:	f7fb fa93 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 800549a:	23be      	movs	r3, #190	@ 0xbe
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	f240 133b 	movw	r3, #315	@ 0x13b
 80054a2:	2296      	movs	r2, #150	@ 0x96
 80054a4:	21a3      	movs	r1, #163	@ 0xa3
 80054a6:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80054aa:	f7fb fa89 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 80054ae:	2302      	movs	r3, #2
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	4b29      	ldr	r3, [pc, #164]	@ (8005558 <Display_settings_screen_background+0x1e0>)
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80054ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054be:	21a2      	movs	r1, #162	@ 0xa2
 80054c0:	2020      	movs	r0, #32
 80054c2:	f7fb fb1f 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 80054c6:	2302      	movs	r3, #2
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	4b24      	ldr	r3, [pc, #144]	@ (800555c <Display_settings_screen_background+0x1e4>)
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80054d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054d6:	21a2      	movs	r1, #162	@ 0xa2
 80054d8:	20a8      	movs	r0, #168	@ 0xa8
 80054da:	f7fb fb13 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80054de:	23eb      	movs	r3, #235	@ 0xeb
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	239d      	movs	r3, #157	@ 0x9d
 80054e4:	22c3      	movs	r2, #195	@ 0xc3
 80054e6:	2105      	movs	r1, #5
 80054e8:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80054ec:	f7fb fa68 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80054f0:	23eb      	movs	r3, #235	@ 0xeb
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	f240 133b 	movw	r3, #315	@ 0x13b
 80054f8:	22c3      	movs	r2, #195	@ 0xc3
 80054fa:	21a3      	movs	r1, #163	@ 0xa3
 80054fc:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005500:	f7fb fa5e 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8005504:	2302      	movs	r3, #2
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	4b15      	ldr	r3, [pc, #84]	@ (8005560 <Display_settings_screen_background+0x1e8>)
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005514:	21cf      	movs	r1, #207	@ 0xcf
 8005516:	2025      	movs	r0, #37	@ 0x25
 8005518:	f7fb faf4 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(203, 207, WHITE, ORANGE, "ALARMING", 2);
 800551c:	2302      	movs	r3, #2
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <Display_settings_screen_background+0x1ec>)
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005528:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800552c:	21cf      	movs	r1, #207	@ 0xcf
 800552e:	20cb      	movs	r0, #203	@ 0xcb
 8005530:	f7fb fae8 	bl	8000b04 <ILI9341_Draw_String>
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	0800eaa0 	.word	0x0800eaa0
 8005540:	0800eab0 	.word	0x0800eab0
 8005544:	0800eab8 	.word	0x0800eab8
 8005548:	0800eac4 	.word	0x0800eac4
 800554c:	0800ead0 	.word	0x0800ead0
 8005550:	0800eadc 	.word	0x0800eadc
 8005554:	0800eae8 	.word	0x0800eae8
 8005558:	0800eaf4 	.word	0x0800eaf4
 800555c:	0800eb04 	.word	0x0800eb04
 8005560:	0800e8c4 	.word	0x0800e8c4
 8005564:	0800e76c 	.word	0x0800e76c

08005568 <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b087      	sub	sp, #28
 800556c:	af02      	add	r7, sp, #8
 800556e:	463c      	mov	r4, r7
 8005570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 8005574:	7bbb      	ldrb	r3, [r7, #14]
 8005576:	461a      	mov	r2, r3
 8005578:	238c      	movs	r3, #140	@ 0x8c
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	4a1b      	ldr	r2, [pc, #108]	@ (80055ec <Display_settings_screen_data+0x84>)
 8005580:	fb82 1203 	smull	r1, r2, r2, r3
 8005584:	441a      	add	r2, r3
 8005586:	1152      	asrs	r2, r2, #5
 8005588:	17db      	asrs	r3, r3, #31
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	330c      	adds	r3, #12
 800558e:	4619      	mov	r1, r3
 8005590:	2332      	movs	r3, #50	@ 0x32
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	2398      	movs	r3, #152	@ 0x98
 8005596:	2228      	movs	r2, #40	@ 0x28
 8005598:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800559c:	f7fb fa10 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	461a      	mov	r2, r3
 80055a4:	238c      	movs	r3, #140	@ 0x8c
 80055a6:	fb02 f303 	mul.w	r3, r2, r3
 80055aa:	4a10      	ldr	r2, [pc, #64]	@ (80055ec <Display_settings_screen_data+0x84>)
 80055ac:	fb82 1203 	smull	r1, r2, r2, r3
 80055b0:	441a      	add	r2, r3
 80055b2:	1152      	asrs	r2, r2, #5
 80055b4:	17db      	asrs	r3, r3, #31
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	330c      	adds	r3, #12
 80055ba:	461a      	mov	r2, r3
 80055bc:	2332      	movs	r3, #50	@ 0x32
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	2228      	movs	r2, #40	@ 0x28
 80055c4:	210c      	movs	r1, #12
 80055c6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80055ca:	f7fb f9f9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 80055ce:	2332      	movs	r3, #50	@ 0x32
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	f44f 739a 	mov.w	r3, #308	@ 0x134
 80055d6:	2228      	movs	r2, #40	@ 0x28
 80055d8:	21a8      	movs	r1, #168	@ 0xa8
 80055da:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80055de:	f7fb f9ef 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd90      	pop	{r4, r7, pc}
 80055ea:	bf00      	nop
 80055ec:	82082083 	.word	0x82082083

080055f0 <Display_alarming_screen_background>:

void Display_alarming_screen_background()
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af02      	add	r7, sp, #8
	//clear display
	Display_clear_screen();
 80055f6:	f7fe fad9 	bl	8003bac <Display_clear_screen>

	//Display Title
	ILI9341_Draw_String(5, 1, WHITE, BLACK, "ALARMING SETTINGS", 2);
 80055fa:	2302      	movs	r3, #2
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	4b50      	ldr	r3, [pc, #320]	@ (8005740 <Display_alarming_screen_background+0x150>)
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	2300      	movs	r3, #0
 8005604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005608:	2101      	movs	r1, #1
 800560a:	2005      	movs	r0, #5
 800560c:	f7fb fa7a 	bl	8000b04 <ILI9341_Draw_String>

	//alarming mode description bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 38);
 8005610:	2326      	movs	r3, #38	@ 0x26
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	f240 133b 	movw	r3, #315	@ 0x13b
 8005618:	2214      	movs	r2, #20
 800561a:	2105      	movs	r1, #5
 800561c:	f647 30ef 	movw	r0, #31727	@ 0x7bef
 8005620:	f7fb f9ce 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(48, 22, WHITE, DARKGREY, "TAP TO CHOOSE ALARMING OPTION", 2);
 8005624:	2302      	movs	r3, #2
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	4b46      	ldr	r3, [pc, #280]	@ (8005744 <Display_alarming_screen_background+0x154>)
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8005630:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005634:	2116      	movs	r1, #22
 8005636:	2030      	movs	r0, #48	@ 0x30
 8005638:	f7fb fa64 	bl	8000b04 <ILI9341_Draw_String>

	//Alarming by DLS Label button
	ILI9341_Draw_Filled_Rectangle(RED, 5, 43, 157, 114);
 800563c:	2372      	movs	r3, #114	@ 0x72
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	239d      	movs	r3, #157	@ 0x9d
 8005642:	222b      	movs	r2, #43	@ 0x2b
 8005644:	2105      	movs	r1, #5
 8005646:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800564a:	f7fb f9b9 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, RED, "ALARM DLS", 2);
 800564e:	2302      	movs	r3, #2
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	4b3d      	ldr	r3, [pc, #244]	@ (8005748 <Display_alarming_screen_background+0x158>)
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800565a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800565e:	2148      	movs	r1, #72	@ 0x48
 8005660:	2036      	movs	r0, #54	@ 0x36
 8005662:	f7fb fa4f 	bl	8000b04 <ILI9341_Draw_String>
	//Alarming by ...1 button
	ILI9341_Draw_Filled_Rectangle(BLUE, 163, 43, 315, 114);
 8005666:	2372      	movs	r3, #114	@ 0x72
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	f240 133b 	movw	r3, #315	@ 0x13b
 800566e:	222b      	movs	r2, #43	@ 0x2b
 8005670:	21a3      	movs	r1, #163	@ 0xa3
 8005672:	201f      	movs	r0, #31
 8005674:	f7fb f9a4 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(211, 72, WHITE, BLUE, "ALARM 1", 2);
 8005678:	2302      	movs	r3, #2
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	4b33      	ldr	r3, [pc, #204]	@ (800574c <Display_alarming_screen_background+0x15c>)
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	231f      	movs	r3, #31
 8005682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005686:	2148      	movs	r1, #72	@ 0x48
 8005688:	20d3      	movs	r0, #211	@ 0xd3
 800568a:	f7fb fa3b 	bl	8000b04 <ILI9341_Draw_String>

	//Alarming by ...2 button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 119, 157, 190);
 800568e:	23be      	movs	r3, #190	@ 0xbe
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	239d      	movs	r3, #157	@ 0x9d
 8005694:	2277      	movs	r2, #119	@ 0x77
 8005696:	2105      	movs	r1, #5
 8005698:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 800569c:	f7fb f990 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 127, WHITE, ORANGE, "ALARM 2", 2);
 80056a0:	2302      	movs	r3, #2
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005750 <Display_alarming_screen_background+0x160>)
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80056ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056b0:	217f      	movs	r1, #127	@ 0x7f
 80056b2:	2023      	movs	r0, #35	@ 0x23
 80056b4:	f7fb fa26 	bl	8000b04 <ILI9341_Draw_String>

	//No alarming - normal mode button
	ILI9341_Draw_Filled_Rectangle(GREEN, 163, 119, 315, 190);
 80056b8:	23be      	movs	r3, #190	@ 0xbe
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	f240 133b 	movw	r3, #315	@ 0x13b
 80056c0:	2277      	movs	r2, #119	@ 0x77
 80056c2:	21a3      	movs	r1, #163	@ 0xa3
 80056c4:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80056c8:	f7fb f97a 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(193, 127, WHITE, GREEN, "NO ALARM", 2);
 80056cc:	2302      	movs	r3, #2
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	4b20      	ldr	r3, [pc, #128]	@ (8005754 <Display_alarming_screen_background+0x164>)
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80056d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056dc:	217f      	movs	r1, #127	@ 0x7f
 80056de:	20c1      	movs	r0, #193	@ 0xc1
 80056e0:	f7fb fa10 	bl	8000b04 <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80056e4:	23eb      	movs	r3, #235	@ 0xeb
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	239d      	movs	r3, #157	@ 0x9d
 80056ea:	22c3      	movs	r2, #195	@ 0xc3
 80056ec:	2105      	movs	r1, #5
 80056ee:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80056f2:	f7fb f965 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80056f6:	23eb      	movs	r3, #235	@ 0xeb
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	f240 133b 	movw	r3, #315	@ 0x13b
 80056fe:	22c3      	movs	r2, #195	@ 0xc3
 8005700:	21a3      	movs	r1, #163	@ 0xa3
 8005702:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8005706:	f7fb f95b 	bl	80009c0 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(47, 207, WHITE, ORANGE, "SETTINGS", 2);
 800570a:	2302      	movs	r3, #2
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	4b12      	ldr	r3, [pc, #72]	@ (8005758 <Display_alarming_screen_background+0x168>)
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8005716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800571a:	21cf      	movs	r1, #207	@ 0xcf
 800571c:	202f      	movs	r0, #47	@ 0x2f
 800571e:	f7fb f9f1 	bl	8000b04 <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8005722:	2302      	movs	r3, #2
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	4b0d      	ldr	r3, [pc, #52]	@ (800575c <Display_alarming_screen_background+0x16c>)
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800572e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005732:	21cf      	movs	r1, #207	@ 0xcf
 8005734:	20c3      	movs	r0, #195	@ 0xc3
 8005736:	f7fb f9e5 	bl	8000b04 <ILI9341_Draw_String>
}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	0800eb18 	.word	0x0800eb18
 8005744:	0800eb2c 	.word	0x0800eb2c
 8005748:	0800eb4c 	.word	0x0800eb4c
 800574c:	0800eb58 	.word	0x0800eb58
 8005750:	0800eb60 	.word	0x0800eb60
 8005754:	0800eb68 	.word	0x0800eb68
 8005758:	0800ea60 	.word	0x0800ea60
 800575c:	0800e8b8 	.word	0x0800e8b8

08005760 <Display_time>:



void Display_time(time_t time_val)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af02      	add	r7, sp, #8
 8005766:	463b      	mov	r3, r7
 8005768:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 800576c:	883b      	ldrh	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d076      	beq.n	8005860 <Display_time+0x100>
 8005772:	78bb      	ldrb	r3, [r7, #2]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d073      	beq.n	8005860 <Display_time+0x100>
	{
		if(time_val.hour < 10)
 8005778:	793b      	ldrb	r3, [r7, #4]
 800577a:	2b09      	cmp	r3, #9
 800577c:	d81e      	bhi.n	80057bc <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 800577e:	2302      	movs	r3, #2
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	4b39      	ldr	r3, [pc, #228]	@ (8005868 <Display_time+0x108>)
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2300      	movs	r3, #0
 8005788:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800578c:	2101      	movs	r1, #1
 800578e:	f240 100f 	movw	r0, #271	@ 0x10f
 8005792:	f7fb f9b7 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005796:	793b      	ldrb	r3, [r7, #4]
 8005798:	220a      	movs	r2, #10
 800579a:	4934      	ldr	r1, [pc, #208]	@ (800586c <Display_time+0x10c>)
 800579c:	4618      	mov	r0, r3
 800579e:	f008 f851 	bl	800d844 <itoa>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2202      	movs	r2, #2
 80057a6:	9201      	str	r2, [sp, #4]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057b0:	2101      	movs	r1, #1
 80057b2:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80057b6:	f7fb f9a5 	bl	8000b04 <ILI9341_Draw_String>
 80057ba:	e011      	b.n	80057e0 <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 80057bc:	793b      	ldrb	r3, [r7, #4]
 80057be:	220a      	movs	r2, #10
 80057c0:	492a      	ldr	r1, [pc, #168]	@ (800586c <Display_time+0x10c>)
 80057c2:	4618      	mov	r0, r3
 80057c4:	f008 f83e 	bl	800d844 <itoa>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2202      	movs	r2, #2
 80057cc:	9201      	str	r2, [sp, #4]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	2300      	movs	r3, #0
 80057d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057d6:	2101      	movs	r1, #1
 80057d8:	f240 100f 	movw	r0, #271	@ 0x10f
 80057dc:	f7fb f992 	bl	8000b04 <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 80057e0:	2302      	movs	r3, #2
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	4b22      	ldr	r3, [pc, #136]	@ (8005870 <Display_time+0x110>)
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	2300      	movs	r3, #0
 80057ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057ee:	2101      	movs	r1, #1
 80057f0:	f240 101f 	movw	r0, #287	@ 0x11f
 80057f4:	f7fb f986 	bl	8000b04 <ILI9341_Draw_String>

		if(time_val.minute < 10)
 80057f8:	797b      	ldrb	r3, [r7, #5]
 80057fa:	2b09      	cmp	r3, #9
 80057fc:	d81e      	bhi.n	800583c <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 80057fe:	2302      	movs	r3, #2
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	4b19      	ldr	r3, [pc, #100]	@ (8005868 <Display_time+0x108>)
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2300      	movs	r3, #0
 8005808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800580c:	2101      	movs	r1, #1
 800580e:	f240 1027 	movw	r0, #295	@ 0x127
 8005812:	f7fb f977 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 8005816:	797b      	ldrb	r3, [r7, #5]
 8005818:	220a      	movs	r2, #10
 800581a:	4914      	ldr	r1, [pc, #80]	@ (800586c <Display_time+0x10c>)
 800581c:	4618      	mov	r0, r3
 800581e:	f008 f811 	bl	800d844 <itoa>
 8005822:	4603      	mov	r3, r0
 8005824:	2202      	movs	r2, #2
 8005826:	9201      	str	r2, [sp, #4]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2300      	movs	r3, #0
 800582c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005830:	2101      	movs	r1, #1
 8005832:	f44f 7098 	mov.w	r0, #304	@ 0x130
 8005836:	f7fb f965 	bl	8000b04 <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 800583a:	e011      	b.n	8005860 <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 800583c:	797b      	ldrb	r3, [r7, #5]
 800583e:	220a      	movs	r2, #10
 8005840:	490a      	ldr	r1, [pc, #40]	@ (800586c <Display_time+0x10c>)
 8005842:	4618      	mov	r0, r3
 8005844:	f007 fffe 	bl	800d844 <itoa>
 8005848:	4603      	mov	r3, r0
 800584a:	2202      	movs	r2, #2
 800584c:	9201      	str	r2, [sp, #4]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	2300      	movs	r3, #0
 8005852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005856:	2101      	movs	r1, #1
 8005858:	f240 1027 	movw	r0, #295	@ 0x127
 800585c:	f7fb f952 	bl	8000b04 <ILI9341_Draw_String>
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	0800ea8c 	.word	0x0800ea8c
 800586c:	20006d90 	.word	0x20006d90
 8005870:	0800eb74 	.word	0x0800eb74

08005874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
 800587e:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <MX_DMA_Init+0x3c>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	4a0b      	ldr	r2, [pc, #44]	@ (80058b0 <MX_DMA_Init+0x3c>)
 8005884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005888:	6313      	str	r3, [r2, #48]	@ 0x30
 800588a:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <MX_DMA_Init+0x3c>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005896:	2200      	movs	r2, #0
 8005898:	2100      	movs	r1, #0
 800589a:	200f      	movs	r0, #15
 800589c:	f002 f8ff 	bl	8007a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80058a0:	200f      	movs	r0, #15
 80058a2:	f002 f918 	bl	8007ad6 <HAL_NVIC_EnableIRQ>

}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40023800 	.word	0x40023800

080058b4 <eeprom_wait>:
//#define ADDR_SIZE 1	//for 24c08 1, for 24c256 2, because of bigger memory size - we must habe 2 bytes for memory Address

static uint32_t last_write;	//variable used to save time of last writing operation in eeprom_wait function

void eeprom_wait(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 80058b8:	bf00      	nop
 80058ba:	f001 ffe5 	bl	8007888 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	4b03      	ldr	r3, [pc, #12]	@ (80058d0 <eeprom_wait+0x1c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b14      	cmp	r3, #20
 80058c8:	d9f7      	bls.n	80058ba <eeprom_wait+0x6>
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20006e54 	.word	0x20006e54

080058d4 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af04      	add	r7, sp, #16
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80058e0:	f7ff ffe8 	bl	80058b4 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80058f0:	9102      	str	r1, [sp, #8]
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	2302      	movs	r3, #2
 80058fa:	21a0      	movs	r1, #160	@ 0xa0
 80058fc:	4803      	ldr	r0, [pc, #12]	@ (800590c <eeprom_read+0x38>)
 80058fe:	f003 f82b 	bl	8008958 <HAL_I2C_Mem_Read>
 8005902:	4603      	mov	r3, r0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20006e58 	.word	0x20006e58

08005910 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B in one operation due to paging mechanism (for AT24C256)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af04      	add	r7, sp, #16
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 800591c:	f7ff ffca 	bl	80058b4 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	b29a      	uxth	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800592c:	9102      	str	r1, [sp, #8]
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	2302      	movs	r3, #2
 8005936:	21a0      	movs	r1, #160	@ 0xa0
 8005938:	4807      	ldr	r0, [pc, #28]	@ (8005958 <eeprom_write+0x48>)
 800593a:	f002 ff13 	bl	8008764 <HAL_I2C_Mem_Write>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8005942:	f001 ffa1 	bl	8007888 <HAL_GetTick>
 8005946:	4603      	mov	r3, r0
 8005948:	4a04      	ldr	r2, [pc, #16]	@ (800595c <eeprom_write+0x4c>)
 800594a:	6013      	str	r3, [r2, #0]

    return rc;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20006e58 	.word	0x20006e58
 800595c:	20006e54 	.word	0x20006e54

08005960 <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08a      	sub	sp, #40	@ 0x28
 8005964:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 8005966:	2101      	movs	r1, #1
 8005968:	482d      	ldr	r0, [pc, #180]	@ (8005a20 <eeprom_clear_scanning_data+0xc0>)
 800596a:	f7fe f8f9 	bl	8003b60 <send_debug_msg>

	 uint8_t clear_page_sequence[PAGE_SIZE];

	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005974:	e00b      	b.n	800598e <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 8005976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800597a:	3328      	adds	r3, #40	@ 0x28
 800597c:	443b      	add	r3, r7
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	f803 2c24 	strb.w	r2, [r3, #-36]
	 for (uint8_t i = 0; i < PAGE_SIZE; i++)
 8005984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005988:	3301      	adds	r3, #1
 800598a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800598e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005992:	2b1f      	cmp	r3, #31
 8005994:	d9ef      	bls.n	8005976 <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	2220      	movs	r2, #32
 800599a:	4619      	mov	r1, r3
 800599c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80059a0:	f7ff ffb6 	bl	8005910 <eeprom_write>
	if(PAGE_SIZE == 32)
	{
		eeprom_write(PAGE_SIZE * (SCAN_RELATED_DATA_PAGE + 1), &clear_page_sequence, sizeof(clear_page_sequence));
 80059a4:	1d3b      	adds	r3, r7, #4
 80059a6:	2220      	movs	r2, #32
 80059a8:	4619      	mov	r1, r3
 80059aa:	f44f 7090 	mov.w	r0, #288	@ 0x120
 80059ae:	f7ff ffaf 	bl	8005910 <eeprom_write>
	}

	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80059b8:	e00e      	b.n	80059d8 <eeprom_clear_scanning_data+0x78>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80059ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059be:	330a      	adds	r3, #10
 80059c0:	015b      	lsls	r3, r3, #5
 80059c2:	4618      	mov	r0, r3
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	2220      	movs	r2, #32
 80059c8:	4619      	mov	r1, r3
 80059ca:	f7ff ffa1 	bl	8005910 <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 80059ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059d2:	3301      	adds	r3, #1
 80059d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80059d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059dc:	2b09      	cmp	r3, #9
 80059de:	d9ec      	bls.n	80059ba <eeprom_clear_scanning_data+0x5a>
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
		}
	}
	if(PAGE_SIZE == 32)
	{
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80059e6:	e00e      	b.n	8005a06 <eeprom_clear_scanning_data+0xa6>
		{
			eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 80059e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059ec:	331e      	adds	r3, #30
 80059ee:	015b      	lsls	r3, r3, #5
 80059f0:	4618      	mov	r0, r3
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	2220      	movs	r2, #32
 80059f6:	4619      	mov	r1, r3
 80059f8:	f7ff ff8a 	bl	8005910 <eeprom_write>
		for(uint8_t i = 0; i < MAX_SERVICES * 2; i++)
 80059fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a00:	3301      	adds	r3, #1
 8005a02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8005a06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a0c:	d9ec      	bls.n	80059e8 <eeprom_clear_scanning_data+0x88>
		}
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 8005a0e:	2101      	movs	r1, #1
 8005a10:	4804      	ldr	r0, [pc, #16]	@ (8005a24 <eeprom_clear_scanning_data+0xc4>)
 8005a12:	f7fe f8a5 	bl	8003b60 <send_debug_msg>
}
 8005a16:	bf00      	nop
 8005a18:	3728      	adds	r7, #40	@ 0x28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	0800ec28 	.word	0x0800ec28
 8005a24:	0800ec48 	.word	0x0800ec48

08005a28 <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b096      	sub	sp, #88	@ 0x58
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	461a      	mov	r2, r3
 8005a34:	460b      	mov	r3, r1
 8005a36:	72fb      	strb	r3, [r7, #11]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4835      	ldr	r0, [pc, #212]	@ (8005b14 <eeprom_save_scanning_data+0xec>)
 8005a40:	f7fe f88e 	bl	8003b60 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 8005a44:	f107 030a 	add.w	r3, r7, #10
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f240 1005 	movw	r0, #261	@ 0x105
 8005a50:	f7ff ff5e 	bl	8005910 <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 8005a54:	f107 030b 	add.w	r3, r7, #11
 8005a58:	2201      	movs	r2, #1
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8005a60:	f7ff ff56 	bl	8005910 <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8005a6a:	e012      	b.n	8005a92 <eeprom_save_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 8005a6c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8005a70:	330a      	adds	r3, #10
 8005a72:	015b      	lsls	r3, r3, #5
 8005a74:	4618      	mov	r0, r3
 8005a76:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8005a7a:	015b      	lsls	r3, r3, #5
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4413      	add	r3, r2
 8005a80:	2220      	movs	r2, #32
 8005a82:	4619      	mov	r1, r3
 8005a84:	f7ff ff44 	bl	8005910 <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005a88:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8005a92:	7abb      	ldrb	r3, [r7, #10]
 8005a94:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d3e7      	bcc.n	8005a6c <eeprom_save_scanning_data+0x44>
	}
	if(PAGE_SIZE == 32)
	{
		uint8_t temp [64];

		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8005aa2:	e029      	b.n	8005af8 <eeprom_save_scanning_data+0xd0>
		{
			memcpy(&temp, &_services_list[services_index], sizeof(dab_service_t));
 8005aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005aa8:	2234      	movs	r2, #52	@ 0x34
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	18d1      	adds	r1, r2, r3
 8005ab2:	f107 0314 	add.w	r3, r7, #20
 8005ab6:	2234      	movs	r2, #52	@ 0x34
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f007 ff33 	bl	800d924 <memcpy>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2, &temp[0], 32);
 8005abe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ac2:	330f      	adds	r3, #15
 8005ac4:	019b      	lsls	r3, r3, #6
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	2220      	movs	r2, #32
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f7ff ff1e 	bl	8005910 <eeprom_write>
			eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE * 2 + 32, &temp[32], sizeof(dab_service_t) - 32);
 8005ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ad8:	330f      	adds	r3, #15
 8005ada:	019b      	lsls	r3, r3, #6
 8005adc:	3320      	adds	r3, #32
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f107 0314 	add.w	r3, r7, #20
 8005ae4:	3320      	adds	r3, #32
 8005ae6:	2214      	movs	r2, #20
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f7ff ff11 	bl	8005910 <eeprom_write>
		for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8005aee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af2:	3301      	adds	r3, #1
 8005af4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8005af8:	7afb      	ldrb	r3, [r7, #11]
 8005afa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d3d0      	bcc.n	8005aa4 <eeprom_save_scanning_data+0x7c>
		}
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 8005b02:	2101      	movs	r1, #1
 8005b04:	4804      	ldr	r0, [pc, #16]	@ (8005b18 <eeprom_save_scanning_data+0xf0>)
 8005b06:	f7fe f82b 	bl	8003b60 <send_debug_msg>
}
 8005b0a:	bf00      	nop
 8005b0c:	3758      	adds	r7, #88	@ 0x58
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	0800ec54 	.word	0x0800ec54
 8005b18:	0800ec70 	.word	0x0800ec70

08005b1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08c      	sub	sp, #48	@ 0x30
 8005b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b22:	f107 031c 	add.w	r3, r7, #28
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	609a      	str	r2, [r3, #8]
 8005b2e:	60da      	str	r2, [r3, #12]
 8005b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	4b6c      	ldr	r3, [pc, #432]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b42:	4b69      	ldr	r3, [pc, #420]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	4b65      	ldr	r3, [pc, #404]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	4a64      	ldr	r2, [pc, #400]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b5e:	4b62      	ldr	r3, [pc, #392]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	4b5e      	ldr	r3, [pc, #376]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b72:	4a5d      	ldr	r2, [pc, #372]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b74:	f043 0304 	orr.w	r3, r3, #4
 8005b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	4b57      	ldr	r3, [pc, #348]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8e:	4a56      	ldr	r2, [pc, #344]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b90:	f043 0302 	orr.w	r3, r3, #2
 8005b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b96:	4b54      	ldr	r3, [pc, #336]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	4b50      	ldr	r3, [pc, #320]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005baa:	4a4f      	ldr	r2, [pc, #316]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005bac:	f043 0310 	orr.w	r3, r3, #16
 8005bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bb2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	4b49      	ldr	r3, [pc, #292]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	4a48      	ldr	r2, [pc, #288]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005bc8:	f043 0308 	orr.w	r3, r3, #8
 8005bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bce:	4b46      	ldr	r3, [pc, #280]	@ (8005ce8 <MX_GPIO_Init+0x1cc>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2130      	movs	r1, #48	@ 0x30
 8005bde:	4843      	ldr	r0, [pc, #268]	@ (8005cec <MX_GPIO_Init+0x1d0>)
 8005be0:	f002 fc62 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8005be4:	2200      	movs	r2, #0
 8005be6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005bea:	4841      	ldr	r0, [pc, #260]	@ (8005cf0 <MX_GPIO_Init+0x1d4>)
 8005bec:	f002 fc5c 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f24f 7180 	movw	r1, #63360	@ 0xf780
 8005bf6:	483f      	ldr	r0, [pc, #252]	@ (8005cf4 <MX_GPIO_Init+0x1d8>)
 8005bf8:	f002 fc56 	bl	80084a8 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2128      	movs	r1, #40	@ 0x28
 8005c00:	483d      	ldr	r0, [pc, #244]	@ (8005cf8 <MX_GPIO_Init+0x1dc>)
 8005c02:	f002 fc51 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8005c06:	2310      	movs	r3, #16
 8005c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8005c12:	f107 031c 	add.w	r3, r7, #28
 8005c16:	4619      	mov	r1, r3
 8005c18:	4838      	ldr	r0, [pc, #224]	@ (8005cfc <MX_GPIO_Init+0x1e0>)
 8005c1a:	f002 fa91 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8005c1e:	2330      	movs	r3, #48	@ 0x30
 8005c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c22:	2301      	movs	r3, #1
 8005c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c2e:	f107 031c 	add.w	r3, r7, #28
 8005c32:	4619      	mov	r1, r3
 8005c34:	482d      	ldr	r0, [pc, #180]	@ (8005cec <MX_GPIO_Init+0x1d0>)
 8005c36:	f002 fa83 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8005c3a:	2311      	movs	r3, #17
 8005c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c46:	f107 031c 	add.w	r3, r7, #28
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	482a      	ldr	r0, [pc, #168]	@ (8005cf8 <MX_GPIO_Init+0x1dc>)
 8005c4e:	f002 fa77 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8005c52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c60:	2300      	movs	r3, #0
 8005c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8005c64:	f107 031c 	add.w	r3, r7, #28
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4821      	ldr	r0, [pc, #132]	@ (8005cf0 <MX_GPIO_Init+0x1d4>)
 8005c6c:	f002 fa68 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 8005c70:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8005c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c76:	2301      	movs	r3, #1
 8005c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c7e:	2302      	movs	r3, #2
 8005c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c82:	f107 031c 	add.w	r3, r7, #28
 8005c86:	4619      	mov	r1, r3
 8005c88:	481a      	ldr	r0, [pc, #104]	@ (8005cf4 <MX_GPIO_Init+0x1d8>)
 8005c8a:	f002 fa59 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8005c8e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8005c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c94:	2301      	movs	r3, #1
 8005c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ca0:	f107 031c 	add.w	r3, r7, #28
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4813      	ldr	r0, [pc, #76]	@ (8005cf4 <MX_GPIO_Init+0x1d8>)
 8005ca8:	f002 fa4a 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005cac:	2340      	movs	r3, #64	@ 0x40
 8005cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005cb8:	f107 031c 	add.w	r3, r7, #28
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	480d      	ldr	r0, [pc, #52]	@ (8005cf4 <MX_GPIO_Init+0x1d8>)
 8005cc0:	f002 fa3e 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8005cc4:	2328      	movs	r3, #40	@ 0x28
 8005cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cd4:	f107 031c 	add.w	r3, r7, #28
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4807      	ldr	r0, [pc, #28]	@ (8005cf8 <MX_GPIO_Init+0x1dc>)
 8005cdc:	f002 fa30 	bl	8008140 <HAL_GPIO_Init>

}
 8005ce0:	bf00      	nop
 8005ce2:	3730      	adds	r7, #48	@ 0x30
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	40020800 	.word	0x40020800
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	40020c00 	.word	0x40020c00
 8005cf8:	40020400 	.word	0x40020400
 8005cfc:	40020000 	.word	0x40020000

08005d00 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005d04:	4b12      	ldr	r3, [pc, #72]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d06:	4a13      	ldr	r2, [pc, #76]	@ (8005d54 <MX_I2C1_Init+0x54>)
 8005d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005d0a:	4b11      	ldr	r3, [pc, #68]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d0c:	4a12      	ldr	r2, [pc, #72]	@ (8005d58 <MX_I2C1_Init+0x58>)
 8005d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d10:	4b0f      	ldr	r3, [pc, #60]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d16:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d24:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d2a:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d30:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d36:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d3c:	4804      	ldr	r0, [pc, #16]	@ (8005d50 <MX_I2C1_Init+0x50>)
 8005d3e:	f002 fbcd 	bl	80084dc <HAL_I2C_Init>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d48:	f000 f9e4 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d4c:	bf00      	nop
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20006e58 	.word	0x20006e58
 8005d54:	40005400 	.word	0x40005400
 8005d58:	000186a0 	.word	0x000186a0

08005d5c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005d60:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d62:	4a13      	ldr	r2, [pc, #76]	@ (8005db0 <MX_I2C3_Init+0x54>)
 8005d64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005d66:	4b11      	ldr	r3, [pc, #68]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d68:	4a12      	ldr	r2, [pc, #72]	@ (8005db4 <MX_I2C3_Init+0x58>)
 8005d6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005d72:	4b0e      	ldr	r3, [pc, #56]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d78:	4b0c      	ldr	r3, [pc, #48]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005d7e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d80:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005d86:	4b09      	ldr	r3, [pc, #36]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d8c:	4b07      	ldr	r3, [pc, #28]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d92:	4b06      	ldr	r3, [pc, #24]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005d98:	4804      	ldr	r0, [pc, #16]	@ (8005dac <MX_I2C3_Init+0x50>)
 8005d9a:	f002 fb9f 	bl	80084dc <HAL_I2C_Init>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005da4:	f000 f9b6 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005da8:	bf00      	nop
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20006eac 	.word	0x20006eac
 8005db0:	40005c00 	.word	0x40005c00
 8005db4:	000186a0 	.word	0x000186a0

08005db8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08c      	sub	sp, #48	@ 0x30
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc0:	f107 031c 	add.w	r3, r7, #28
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8005f00 <HAL_I2C_MspInit+0x148>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d12c      	bne.n	8005e34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	4b49      	ldr	r3, [pc, #292]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de2:	4a48      	ldr	r2, [pc, #288]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dea:	4b46      	ldr	r3, [pc, #280]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005df6:	23c0      	movs	r3, #192	@ 0xc0
 8005df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dfa:	2312      	movs	r3, #18
 8005dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e02:	2303      	movs	r3, #3
 8005e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e06:	2304      	movs	r3, #4
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e0a:	f107 031c 	add.w	r3, r7, #28
 8005e0e:	4619      	mov	r1, r3
 8005e10:	483d      	ldr	r0, [pc, #244]	@ (8005f08 <HAL_I2C_MspInit+0x150>)
 8005e12:	f002 f995 	bl	8008140 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	4a39      	ldr	r2, [pc, #228]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e26:	4b37      	ldr	r3, [pc, #220]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005e32:	e060      	b.n	8005ef6 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a34      	ldr	r2, [pc, #208]	@ (8005f0c <HAL_I2C_MspInit+0x154>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d15b      	bne.n	8005ef6 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	4b30      	ldr	r3, [pc, #192]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	4a2f      	ldr	r2, [pc, #188]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4b29      	ldr	r3, [pc, #164]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	4a28      	ldr	r2, [pc, #160]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e6a:	4b26      	ldr	r3, [pc, #152]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8005e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e7c:	2312      	movs	r3, #18
 8005e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e84:	2303      	movs	r3, #3
 8005e86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e88:	2304      	movs	r3, #4
 8005e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005e8c:	f107 031c 	add.w	r3, r7, #28
 8005e90:	4619      	mov	r1, r3
 8005e92:	481f      	ldr	r0, [pc, #124]	@ (8005f10 <HAL_I2C_MspInit+0x158>)
 8005e94:	f002 f954 	bl	8008140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8005e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e9e:	2312      	movs	r3, #18
 8005ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005eaa:	2304      	movs	r3, #4
 8005eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8005eae:	f107 031c 	add.w	r3, r7, #28
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4817      	ldr	r0, [pc, #92]	@ (8005f14 <HAL_I2C_MspInit+0x15c>)
 8005eb6:	f002 f943 	bl	8008140 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	4b11      	ldr	r3, [pc, #68]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	4a10      	ldr	r2, [pc, #64]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005ec4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eca:	4b0e      	ldr	r3, [pc, #56]	@ (8005f04 <HAL_I2C_MspInit+0x14c>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2100      	movs	r1, #0
 8005eda:	2048      	movs	r0, #72	@ 0x48
 8005edc:	f001 fddf 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005ee0:	2048      	movs	r0, #72	@ 0x48
 8005ee2:	f001 fdf8 	bl	8007ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	2049      	movs	r0, #73	@ 0x49
 8005eec:	f001 fdd7 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005ef0:	2049      	movs	r0, #73	@ 0x49
 8005ef2:	f001 fdf0 	bl	8007ad6 <HAL_NVIC_EnableIRQ>
}
 8005ef6:	bf00      	nop
 8005ef8:	3730      	adds	r7, #48	@ 0x30
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40005400 	.word	0x40005400
 8005f04:	40023800 	.word	0x40023800
 8005f08:	40020400 	.word	0x40020400
 8005f0c:	40005c00 	.word	0x40005c00
 8005f10:	40020800 	.word	0x40020800
 8005f14:	40020000 	.word	0x40020000

08005f18 <LEDs_Red_On>:

uint8_t led_number = 1;


void LEDs_Red_On()
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005f22:	4802      	ldr	r0, [pc, #8]	@ (8005f2c <LEDs_Red_On+0x14>)
 8005f24:	f002 fac0 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8005f28:	bf00      	nop
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40020c00 	.word	0x40020c00

08005f30 <LEDs_Red_Off>:

void LEDs_Red_Off()
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8005f34:	2200      	movs	r2, #0
 8005f36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005f3a:	4802      	ldr	r0, [pc, #8]	@ (8005f44 <LEDs_Red_Off+0x14>)
 8005f3c:	f002 fab4 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40020c00 	.word	0x40020c00

08005f48 <LEDs_Green_On>:
{
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
}

void LEDs_Green_On()
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f52:	4802      	ldr	r0, [pc, #8]	@ (8005f5c <LEDs_Green_On+0x14>)
 8005f54:	f002 faa8 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8005f58:	bf00      	nop
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40020c00 	.word	0x40020c00

08005f60 <LEDs_Green_Off>:

void LEDs_Green_Off()
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8005f64:	2200      	movs	r2, #0
 8005f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f6a:	4802      	ldr	r0, [pc, #8]	@ (8005f74 <LEDs_Green_Off+0x14>)
 8005f6c:	f002 fa9c 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8005f70:	bf00      	nop
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40020c00 	.word	0x40020c00

08005f78 <LEDs_Blue_On>:
{
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}

void LEDs_Blue_On()
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f82:	4802      	ldr	r0, [pc, #8]	@ (8005f8c <LEDs_Blue_On+0x14>)
 8005f84:	f002 fa90 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8005f88:	bf00      	nop
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40020c00 	.word	0x40020c00

08005f90 <LEDs_Blue_Off>:

void LEDs_Blue_Off()
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 8005f94:	2200      	movs	r2, #0
 8005f96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f9a:	4802      	ldr	r0, [pc, #8]	@ (8005fa4 <LEDs_Blue_Off+0x14>)
 8005f9c:	f002 fa84 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8005fa0:	bf00      	nop
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40020c00 	.word	0x40020c00

08005fa8 <LEDs_Orange_On>:
void LEDs_Blue_Toggle()
{
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
}
void LEDs_Orange_On()
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1);
 8005fac:	2201      	movs	r2, #1
 8005fae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005fb2:	4802      	ldr	r0, [pc, #8]	@ (8005fbc <LEDs_Orange_On+0x14>)
 8005fb4:	f002 fa78 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8005fb8:	bf00      	nop
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40020c00 	.word	0x40020c00

08005fc0 <LEDs_Orange_Off>:

void LEDs_Orange_Off()
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0);
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005fca:	4802      	ldr	r0, [pc, #8]	@ (8005fd4 <LEDs_Orange_Off+0x14>)
 8005fcc:	f002 fa6c 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8005fd0:	bf00      	nop
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40020c00 	.word	0x40020c00

08005fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fdc:	f001 fbee 	bl	80077bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fe0:	f000 f82e 	bl	8006040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fe4:	f7ff fd9a 	bl	8005b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8005fe8:	f7ff fc44 	bl	8005874 <MX_DMA_Init>
  MX_I2C1_Init();
 8005fec:	f7ff fe88 	bl	8005d00 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005ff0:	f7ff feb4 	bl	8005d5c <MX_I2C3_Init>
  MX_SPI1_Init();
 8005ff4:	f000 f894 	bl	8006120 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005ff8:	f000 f8c8 	bl	800618c <MX_SPI2_Init>
  MX_TIM3_Init();
 8005ffc:	f000 ff68 	bl	8006ed0 <MX_TIM3_Init>
  MX_UART5_Init();
 8006000:	f001 fabe 	bl	8007580 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8006004:	f001 fae6 	bl	80075d4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8006008:	f000 ffbc 	bl	8006f84 <MX_TIM10_Init>
  MX_TIM11_Init();
 800600c:	f000 ffde 	bl	8006fcc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8006010:	2101      	movs	r1, #1
 8006012:	4809      	ldr	r0, [pc, #36]	@ (8006038 <main+0x60>)
 8006014:	f7fd fda4 	bl	8003b60 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8006018:	4808      	ldr	r0, [pc, #32]	@ (800603c <main+0x64>)
 800601a:	f006 faa7 	bl	800c56c <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 800601e:	f7fa fa7b 	bl	8000518 <ILI9341_Init>
  Display_booting_screen();
 8006022:	f7fd fdd6 	bl	8003bd2 <Display_booting_screen>

  //eeprom_show();

  //HAL_Delay(50000);

  Si468x_dab_init();
 8006026:	f7fb f87f 	bl	8001128 <Si468x_dab_init>
  restore_from_eeprom();
 800602a:	f7fd f99d 	bl	8003368 <restore_from_eeprom>
  Alarming_Init();
 800602e:	f7fd fd3d 	bl	8003aac <Alarming_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8006032:	f000 f999 	bl	8006368 <state_machine>
 8006036:	e7fc      	b.n	8006032 <main+0x5a>
 8006038:	0800efd0 	.word	0x0800efd0
 800603c:	20007108 	.word	0x20007108

08006040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b094      	sub	sp, #80	@ 0x50
 8006044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006046:	f107 0320 	add.w	r3, r7, #32
 800604a:	2230      	movs	r2, #48	@ 0x30
 800604c:	2100      	movs	r1, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f007 fc3c 	bl	800d8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006054:	f107 030c 	add.w	r3, r7, #12
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	60da      	str	r2, [r3, #12]
 8006062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006064:	2300      	movs	r3, #0
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	4b28      	ldr	r3, [pc, #160]	@ (800610c <SystemClock_Config+0xcc>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	4a27      	ldr	r2, [pc, #156]	@ (800610c <SystemClock_Config+0xcc>)
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006072:	6413      	str	r3, [r2, #64]	@ 0x40
 8006074:	4b25      	ldr	r3, [pc, #148]	@ (800610c <SystemClock_Config+0xcc>)
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006080:	2300      	movs	r3, #0
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	4b22      	ldr	r3, [pc, #136]	@ (8006110 <SystemClock_Config+0xd0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a21      	ldr	r2, [pc, #132]	@ (8006110 <SystemClock_Config+0xd0>)
 800608a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	4b1f      	ldr	r3, [pc, #124]	@ (8006110 <SystemClock_Config+0xd0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006098:	607b      	str	r3, [r7, #4]
 800609a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800609c:	2301      	movs	r3, #1
 800609e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80060a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060a6:	2302      	movs	r3, #2
 80060a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80060b0:	2304      	movs	r3, #4
 80060b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 80060b4:	23f0      	movs	r3, #240	@ 0xf0
 80060b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80060b8:	2302      	movs	r3, #2
 80060ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80060bc:	2304      	movs	r3, #4
 80060be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060c0:	f107 0320 	add.w	r3, r7, #32
 80060c4:	4618      	mov	r0, r3
 80060c6:	f004 fea3 	bl	800ae10 <HAL_RCC_OscConfig>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80060d0:	f000 f820 	bl	8006114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060d4:	230f      	movs	r3, #15
 80060d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060d8:	2302      	movs	r3, #2
 80060da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80060e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80060e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80060e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80060ec:	f107 030c 	add.w	r3, r7, #12
 80060f0:	2105      	movs	r1, #5
 80060f2:	4618      	mov	r0, r3
 80060f4:	f005 f904 	bl	800b300 <HAL_RCC_ClockConfig>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80060fe:	f000 f809 	bl	8006114 <Error_Handler>
  }
}
 8006102:	bf00      	nop
 8006104:	3750      	adds	r7, #80	@ 0x50
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800
 8006110:	40007000 	.word	0x40007000

08006114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006118:	b672      	cpsid	i
}
 800611a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800611c:	bf00      	nop
 800611e:	e7fd      	b.n	800611c <Error_Handler+0x8>

08006120 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006124:	4b17      	ldr	r3, [pc, #92]	@ (8006184 <MX_SPI1_Init+0x64>)
 8006126:	4a18      	ldr	r2, [pc, #96]	@ (8006188 <MX_SPI1_Init+0x68>)
 8006128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800612a:	4b16      	ldr	r3, [pc, #88]	@ (8006184 <MX_SPI1_Init+0x64>)
 800612c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006132:	4b14      	ldr	r3, [pc, #80]	@ (8006184 <MX_SPI1_Init+0x64>)
 8006134:	2200      	movs	r2, #0
 8006136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006138:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <MX_SPI1_Init+0x64>)
 800613a:	2200      	movs	r2, #0
 800613c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800613e:	4b11      	ldr	r3, [pc, #68]	@ (8006184 <MX_SPI1_Init+0x64>)
 8006140:	2200      	movs	r2, #0
 8006142:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006144:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <MX_SPI1_Init+0x64>)
 8006146:	2200      	movs	r2, #0
 8006148:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800614a:	4b0e      	ldr	r3, [pc, #56]	@ (8006184 <MX_SPI1_Init+0x64>)
 800614c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006150:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006152:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <MX_SPI1_Init+0x64>)
 8006154:	2220      	movs	r2, #32
 8006156:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006158:	4b0a      	ldr	r3, [pc, #40]	@ (8006184 <MX_SPI1_Init+0x64>)
 800615a:	2200      	movs	r2, #0
 800615c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800615e:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <MX_SPI1_Init+0x64>)
 8006160:	2200      	movs	r2, #0
 8006162:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006164:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <MX_SPI1_Init+0x64>)
 8006166:	2200      	movs	r2, #0
 8006168:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <MX_SPI1_Init+0x64>)
 800616c:	220a      	movs	r2, #10
 800616e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006170:	4804      	ldr	r0, [pc, #16]	@ (8006184 <MX_SPI1_Init+0x64>)
 8006172:	f005 fae5 	bl	800b740 <HAL_SPI_Init>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800617c:	f7ff ffca 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006180:	bf00      	nop
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20006f00 	.word	0x20006f00
 8006188:	40013000 	.word	0x40013000

0800618c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006190:	4b17      	ldr	r3, [pc, #92]	@ (80061f0 <MX_SPI2_Init+0x64>)
 8006192:	4a18      	ldr	r2, [pc, #96]	@ (80061f4 <MX_SPI2_Init+0x68>)
 8006194:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006196:	4b16      	ldr	r3, [pc, #88]	@ (80061f0 <MX_SPI2_Init+0x64>)
 8006198:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800619c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800619e:	4b14      	ldr	r3, [pc, #80]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80061a4:	4b12      	ldr	r3, [pc, #72]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061aa:	4b11      	ldr	r3, [pc, #68]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061b0:	4b0f      	ldr	r3, [pc, #60]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80061b6:	4b0e      	ldr	r3, [pc, #56]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061be:	4b0c      	ldr	r3, [pc, #48]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80061ca:	4b09      	ldr	r3, [pc, #36]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d0:	4b07      	ldr	r3, [pc, #28]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80061d6:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061d8:	220a      	movs	r2, #10
 80061da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80061dc:	4804      	ldr	r0, [pc, #16]	@ (80061f0 <MX_SPI2_Init+0x64>)
 80061de:	f005 faaf 	bl	800b740 <HAL_SPI_Init>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80061e8:	f7ff ff94 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80061ec:	bf00      	nop
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20006f58 	.word	0x20006f58
 80061f4:	40003800 	.word	0x40003800

080061f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08c      	sub	sp, #48	@ 0x30
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006200:	f107 031c 	add.w	r3, r7, #28
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	605a      	str	r2, [r3, #4]
 800620a:	609a      	str	r2, [r3, #8]
 800620c:	60da      	str	r2, [r3, #12]
 800620e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a4d      	ldr	r2, [pc, #308]	@ (800634c <HAL_SPI_MspInit+0x154>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d12c      	bne.n	8006274 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	4b4c      	ldr	r3, [pc, #304]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	4a4b      	ldr	r2, [pc, #300]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 8006224:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006228:	6453      	str	r3, [r2, #68]	@ 0x44
 800622a:	4b49      	ldr	r3, [pc, #292]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	4b45      	ldr	r3, [pc, #276]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	4a44      	ldr	r2, [pc, #272]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	6313      	str	r3, [r2, #48]	@ 0x30
 8006246:	4b42      	ldr	r3, [pc, #264]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 8006248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8006252:	23e0      	movs	r3, #224	@ 0xe0
 8006254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006256:	2302      	movs	r3, #2
 8006258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800625a:	2300      	movs	r3, #0
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800625e:	2303      	movs	r3, #3
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006262:	2305      	movs	r3, #5
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006266:	f107 031c 	add.w	r3, r7, #28
 800626a:	4619      	mov	r1, r3
 800626c:	4839      	ldr	r0, [pc, #228]	@ (8006354 <HAL_SPI_MspInit+0x15c>)
 800626e:	f001 ff67 	bl	8008140 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006272:	e066      	b.n	8006342 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a37      	ldr	r2, [pc, #220]	@ (8006358 <HAL_SPI_MspInit+0x160>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d161      	bne.n	8006342 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	4b33      	ldr	r3, [pc, #204]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	4a32      	ldr	r2, [pc, #200]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 8006288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800628c:	6413      	str	r3, [r2, #64]	@ 0x40
 800628e:	4b30      	ldr	r3, [pc, #192]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	4b2c      	ldr	r3, [pc, #176]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 80062a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 80062a4:	f043 0302 	orr.w	r3, r3, #2
 80062a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80062aa:	4b29      	ldr	r3, [pc, #164]	@ (8006350 <HAL_SPI_MspInit+0x158>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80062b6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80062ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062bc:	2302      	movs	r3, #2
 80062be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062c4:	2303      	movs	r3, #3
 80062c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80062c8:	2305      	movs	r3, #5
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062cc:	f107 031c 	add.w	r3, r7, #28
 80062d0:	4619      	mov	r1, r3
 80062d2:	4822      	ldr	r0, [pc, #136]	@ (800635c <HAL_SPI_MspInit+0x164>)
 80062d4:	f001 ff34 	bl	8008140 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80062d8:	4b21      	ldr	r3, [pc, #132]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 80062da:	4a22      	ldr	r2, [pc, #136]	@ (8006364 <HAL_SPI_MspInit+0x16c>)
 80062dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80062de:	4b20      	ldr	r3, [pc, #128]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 80062e6:	2240      	movs	r2, #64	@ 0x40
 80062e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 80062f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062f6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062f8:	4b19      	ldr	r3, [pc, #100]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062fe:	4b18      	ldr	r3, [pc, #96]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 8006300:	2200      	movs	r2, #0
 8006302:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006304:	4b16      	ldr	r3, [pc, #88]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 8006306:	2200      	movs	r2, #0
 8006308:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800630a:	4b15      	ldr	r3, [pc, #84]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 800630c:	2200      	movs	r2, #0
 800630e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006310:	4b13      	ldr	r3, [pc, #76]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 8006312:	2200      	movs	r2, #0
 8006314:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006316:	4812      	ldr	r0, [pc, #72]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 8006318:	f001 fbf8 	bl	8007b0c <HAL_DMA_Init>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8006322:	f7ff fef7 	bl	8006114 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a0d      	ldr	r2, [pc, #52]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 800632a:	649a      	str	r2, [r3, #72]	@ 0x48
 800632c:	4a0c      	ldr	r2, [pc, #48]	@ (8006360 <HAL_SPI_MspInit+0x168>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006332:	2200      	movs	r2, #0
 8006334:	2100      	movs	r1, #0
 8006336:	2024      	movs	r0, #36	@ 0x24
 8006338:	f001 fbb1 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800633c:	2024      	movs	r0, #36	@ 0x24
 800633e:	f001 fbca 	bl	8007ad6 <HAL_NVIC_EnableIRQ>
}
 8006342:	bf00      	nop
 8006344:	3730      	adds	r7, #48	@ 0x30
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40013000 	.word	0x40013000
 8006350:	40023800 	.word	0x40023800
 8006354:	40020000 	.word	0x40020000
 8006358:	40003800 	.word	0x40003800
 800635c:	40020400 	.word	0x40020400
 8006360:	20006fb0 	.word	0x20006fb0
 8006364:	40026070 	.word	0x40026070

08006368 <state_machine>:
uint16_t audio_info_timeout;

alarming_status_t alarming_status_sm; //alarming status to be used by state machine

void state_machine()
{
 8006368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636a:	b097      	sub	sp, #92	@ 0x5c
 800636c:	af06      	add	r7, sp, #24
	if(state_change_done)
 800636e:	4b89      	ldr	r3, [pc, #548]	@ (8006594 <state_machine+0x22c>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 8006376:	f000 feef 	bl	8007158 <Touch_read>
 800637a:	4603      	mov	r3, r0
 800637c:	4a86      	ldr	r2, [pc, #536]	@ (8006598 <state_machine+0x230>)
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	e005      	b.n	800638e <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 8006382:	4b85      	ldr	r3, [pc, #532]	@ (8006598 <state_machine+0x230>)
 8006384:	2200      	movs	r2, #0
 8006386:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 8006388:	4b83      	ldr	r3, [pc, #524]	@ (8006598 <state_machine+0x230>)
 800638a:	2200      	movs	r2, #0
 800638c:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 800638e:	4c83      	ldr	r4, [pc, #524]	@ (800659c <state_machine+0x234>)
 8006390:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006394:	4618      	mov	r0, r3
 8006396:	f7fd fb6d 	bl	8003a74 <get_dab_management>
 800639a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800639e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 80063a4:	f7fd fb78 	bl	8003a98 <get_dls_label>
 80063a8:	4603      	mov	r3, r0
 80063aa:	4a7d      	ldr	r2, [pc, #500]	@ (80065a0 <state_machine+0x238>)
 80063ac:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 80063ae:	f7fc fecb 	bl	8003148 <Si468x_dab_get_time>
	alarming_status_sm = Alarming_Get_Status();
 80063b2:	f7fd fbc9 	bl	8003b48 <Alarming_Get_Status>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	4b7a      	ldr	r3, [pc, #488]	@ (80065a4 <state_machine+0x23c>)
 80063bc:	701a      	strb	r2, [r3, #0]

	//manage alarming functionality
	switch(alarming_status_sm)
 80063be:	4b79      	ldr	r3, [pc, #484]	@ (80065a4 <state_machine+0x23c>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d828      	bhi.n	8006418 <state_machine+0xb0>
 80063c6:	a201      	add	r2, pc, #4	@ (adr r2, 80063cc <state_machine+0x64>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	08006419 	.word	0x08006419
 80063d0:	080063dd 	.word	0x080063dd
 80063d4:	08006419 	.word	0x08006419
 80063d8:	08006419 	.word	0x08006419
	{
	case alarming_mode_1:
		if(!strcmp(dls_label_to_display, "ALARM!"))
 80063dc:	4b70      	ldr	r3, [pc, #448]	@ (80065a0 <state_machine+0x238>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4971      	ldr	r1, [pc, #452]	@ (80065a8 <state_machine+0x240>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7f9 fef0 	bl	80001c8 <strcmp>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d116      	bne.n	800641c <state_machine+0xb4>
		{
			ILI9341_Draw_String(110, 110, WHITE, ORANGE, "ALARM!!!", 2);
 80063ee:	2302      	movs	r3, #2
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	4b6e      	ldr	r3, [pc, #440]	@ (80065ac <state_machine+0x244>)
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80063fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80063fe:	216e      	movs	r1, #110	@ 0x6e
 8006400:	206e      	movs	r0, #110	@ 0x6e
 8006402:	f7fa fb7f 	bl	8000b04 <ILI9341_Draw_String>
			LEDs_Green_On();
 8006406:	f7ff fd9f 	bl	8005f48 <LEDs_Green_On>
			LEDs_Blue_On();
 800640a:	f7ff fdb5 	bl	8005f78 <LEDs_Blue_On>
			HAL_Delay(5000);
 800640e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8006412:	f001 fa45 	bl	80078a0 <HAL_Delay>
		}
		break;
 8006416:	e001      	b.n	800641c <state_machine+0xb4>

	case alarming_off:
		break;

	default:
		break;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <state_machine+0xb6>
		break;
 800641c:	bf00      	nop
	}

	switch(system_state)
 800641e:	4b64      	ldr	r3, [pc, #400]	@ (80065b0 <state_machine+0x248>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b05      	cmp	r3, #5
 8006424:	f200 848d 	bhi.w	8006d42 <state_machine+0x9da>
 8006428:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <state_machine+0xc8>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	08006449 	.word	0x08006449
 8006434:	080065c9 	.word	0x080065c9
 8006438:	08006a31 	.word	0x08006a31
 800643c:	08006961 	.word	0x08006961
 8006440:	08006aa5 	.word	0x08006aa5
 8006444:	08006c41 	.word	0x08006c41
	{
	case main_screen:

		if(!state_change_done)
 8006448:	4b52      	ldr	r3, [pc, #328]	@ (8006594 <state_machine+0x22c>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d14e      	bne.n	80064ee <state_machine+0x186>
		{
			if(!dab_management_to_display.total_services)
 8006450:	4b52      	ldr	r3, [pc, #328]	@ (800659c <state_machine+0x234>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d103      	bne.n	8006460 <state_machine+0xf8>
			{
				playing_state = not_playing;
 8006458:	4b56      	ldr	r3, [pc, #344]	@ (80065b4 <state_machine+0x24c>)
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	e028      	b.n	80064b2 <state_machine+0x14a>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 8006460:	f7fd faf4 	bl	8003a4c <get_dab_service_list>
 8006464:	4603      	mov	r3, r0
 8006466:	4a54      	ldr	r2, [pc, #336]	@ (80065b8 <state_machine+0x250>)
 8006468:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 800646a:	f7fd faf9 	bl	8003a60 <get_dab_ensemble_list>
 800646e:	4603      	mov	r3, r0
 8006470:	4a52      	ldr	r2, [pc, #328]	@ (80065bc <state_machine+0x254>)
 8006472:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 8006474:	4b52      	ldr	r3, [pc, #328]	@ (80065c0 <state_machine+0x258>)
 8006476:	2232      	movs	r2, #50	@ 0x32
 8006478:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 800647a:	e014      	b.n	80064a6 <state_machine+0x13e>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 800647c:	4c51      	ldr	r4, [pc, #324]	@ (80065c4 <state_machine+0x25c>)
 800647e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006482:	4618      	mov	r0, r3
 8006484:	f7fc fb54 	bl	8002b30 <Si468x_dab_get_audio_info>
 8006488:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800648c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800648e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 8006492:	4b4b      	ldr	r3, [pc, #300]	@ (80065c0 <state_machine+0x258>)
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	4b49      	ldr	r3, [pc, #292]	@ (80065c0 <state_machine+0x258>)
 800649c:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 800649e:	4b48      	ldr	r3, [pc, #288]	@ (80065c0 <state_machine+0x258>)
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d004      	beq.n	80064b0 <state_machine+0x148>
				while(!dab_audio_info_to_display.audio_sample_rate)
 80064a6:	4b47      	ldr	r3, [pc, #284]	@ (80065c4 <state_machine+0x25c>)
 80064a8:	885b      	ldrh	r3, [r3, #2]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0e6      	beq.n	800647c <state_machine+0x114>
 80064ae:	e000      	b.n	80064b2 <state_machine+0x14a>
					{
						break;
 80064b0:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 80064b2:	f7fd fb95 	bl	8003be0 <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 80064b6:	4b40      	ldr	r3, [pc, #256]	@ (80065b8 <state_machine+0x250>)
 80064b8:	681e      	ldr	r6, [r3, #0]
 80064ba:	4b40      	ldr	r3, [pc, #256]	@ (80065bc <state_machine+0x254>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	4c36      	ldr	r4, [pc, #216]	@ (800659c <state_machine+0x234>)
 80064c2:	4b40      	ldr	r3, [pc, #256]	@ (80065c4 <state_machine+0x25c>)
 80064c4:	ad02      	add	r5, sp, #8
 80064c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80064cc:	466a      	mov	r2, sp
 80064ce:	f104 0308 	add.w	r3, r4, #8
 80064d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80064d6:	e882 0003 	stmia.w	r2, {r0, r1}
 80064da:	e894 000c 	ldmia.w	r4, {r2, r3}
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7fd fc0b 	bl	8003cfc <Display_main_screen_data>
			state_change_done = 1;
 80064e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006594 <state_machine+0x22c>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e020      	b.n	8006530 <state_machine+0x1c8>
		}

		else
		{
			if(playing_state == playing)
 80064ee:	4b31      	ldr	r3, [pc, #196]	@ (80065b4 <state_machine+0x24c>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d11a      	bne.n	800652c <state_machine+0x1c4>
			{
				Si468x_dab_get_digital_service_data();
 80064f6:	f7fc fcaf 	bl	8002e58 <Si468x_dab_get_digital_service_data>
				if (alarming_status_sm == alarming_mode_1)
 80064fa:	4b2a      	ldr	r3, [pc, #168]	@ (80065a4 <state_machine+0x23c>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d10e      	bne.n	8006520 <state_machine+0x1b8>
				{
					if(strcmp(dls_label_to_display, "ALARM!"))
 8006502:	4b27      	ldr	r3, [pc, #156]	@ (80065a0 <state_machine+0x238>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4928      	ldr	r1, [pc, #160]	@ (80065a8 <state_machine+0x240>)
 8006508:	4618      	mov	r0, r3
 800650a:	f7f9 fe5d 	bl	80001c8 <strcmp>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <state_machine+0x1c8>
					{
						Display_main_screen_dls(dls_label_to_display);
 8006514:	4b22      	ldr	r3, [pc, #136]	@ (80065a0 <state_machine+0x238>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f7fd fd29 	bl	8003f70 <Display_main_screen_dls>
 800651e:	e007      	b.n	8006530 <state_machine+0x1c8>
					}
				}
				else
				{
					Display_main_screen_dls(dls_label_to_display);
 8006520:	4b1f      	ldr	r3, [pc, #124]	@ (80065a0 <state_machine+0x238>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f7fd fd23 	bl	8003f70 <Display_main_screen_dls>
 800652a:	e001      	b.n	8006530 <state_machine+0x1c8>
				}
			}
			else
			{
				Display_main_screen_empty();
 800652c:	f7fd fd5c 	bl	8003fe8 <Display_main_screen_empty>
			}
		}

		//left button handling (alarming)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006530:	4b19      	ldr	r3, [pc, #100]	@ (8006598 <state_machine+0x230>)
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	2b05      	cmp	r3, #5
 8006536:	d911      	bls.n	800655c <state_machine+0x1f4>
 8006538:	4b17      	ldr	r3, [pc, #92]	@ (8006598 <state_machine+0x230>)
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	2b9c      	cmp	r3, #156	@ 0x9c
 800653e:	d80d      	bhi.n	800655c <state_machine+0x1f4>
 8006540:	4b15      	ldr	r3, [pc, #84]	@ (8006598 <state_machine+0x230>)
 8006542:	885b      	ldrh	r3, [r3, #2]
 8006544:	2bc3      	cmp	r3, #195	@ 0xc3
 8006546:	d909      	bls.n	800655c <state_machine+0x1f4>
 8006548:	4b13      	ldr	r3, [pc, #76]	@ (8006598 <state_machine+0x230>)
 800654a:	885b      	ldrh	r3, [r3, #2]
 800654c:	2bea      	cmp	r3, #234	@ 0xea
 800654e:	d805      	bhi.n	800655c <state_machine+0x1f4>
		{
			state_change_done = 0;
 8006550:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <state_machine+0x22c>)
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]
			system_state = alarming;
 8006556:	4b16      	ldr	r3, [pc, #88]	@ (80065b0 <state_machine+0x248>)
 8006558:	2205      	movs	r2, #5
 800655a:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 800655c:	4b0e      	ldr	r3, [pc, #56]	@ (8006598 <state_machine+0x230>)
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	2ba3      	cmp	r3, #163	@ 0xa3
 8006562:	f240 83f0 	bls.w	8006d46 <state_machine+0x9de>
 8006566:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <state_machine+0x230>)
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800656e:	f200 83ea 	bhi.w	8006d46 <state_machine+0x9de>
 8006572:	4b09      	ldr	r3, [pc, #36]	@ (8006598 <state_machine+0x230>)
 8006574:	885b      	ldrh	r3, [r3, #2]
 8006576:	2bc3      	cmp	r3, #195	@ 0xc3
 8006578:	f240 83e5 	bls.w	8006d46 <state_machine+0x9de>
 800657c:	4b06      	ldr	r3, [pc, #24]	@ (8006598 <state_machine+0x230>)
 800657e:	885b      	ldrh	r3, [r3, #2]
 8006580:	2bea      	cmp	r3, #234	@ 0xea
 8006582:	f200 83e0 	bhi.w	8006d46 <state_machine+0x9de>
		{
			state_change_done = 0;
 8006586:	4b03      	ldr	r3, [pc, #12]	@ (8006594 <state_machine+0x22c>)
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 800658c:	4b08      	ldr	r3, [pc, #32]	@ (80065b0 <state_machine+0x248>)
 800658e:	2201      	movs	r2, #1
 8006590:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006592:	e3d8      	b.n	8006d46 <state_machine+0x9de>
 8006594:	20007011 	.word	0x20007011
 8006598:	20007018 	.word	0x20007018
 800659c:	20007044 	.word	0x20007044
 80065a0:	2000706c 	.word	0x2000706c
 80065a4:	20007074 	.word	0x20007074
 80065a8:	0800efe0 	.word	0x0800efe0
 80065ac:	0800efe8 	.word	0x0800efe8
 80065b0:	20007010 	.word	0x20007010
 80065b4:	20000150 	.word	0x20000150
 80065b8:	20007054 	.word	0x20007054
 80065bc:	20007058 	.word	0x20007058
 80065c0:	20007072 	.word	0x20007072
 80065c4:	2000705c 	.word	0x2000705c

	case services_list_screen:
		if(!state_change_done)
 80065c8:	4b7d      	ldr	r3, [pc, #500]	@ (80067c0 <state_machine+0x458>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d114      	bne.n	80065fa <state_machine+0x292>
		{
			services_list_to_display = get_dab_service_list();
 80065d0:	f7fd fa3c 	bl	8003a4c <get_dab_service_list>
 80065d4:	4603      	mov	r3, r0
 80065d6:	4a7b      	ldr	r2, [pc, #492]	@ (80067c4 <state_machine+0x45c>)
 80065d8:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 80065da:	f7fd fd6b 	bl	80040b4 <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80065de:	4b7a      	ldr	r3, [pc, #488]	@ (80067c8 <state_machine+0x460>)
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	4b78      	ldr	r3, [pc, #480]	@ (80067c4 <state_machine+0x45c>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b79      	ldr	r3, [pc, #484]	@ (80067cc <state_machine+0x464>)
 80065e8:	9201      	str	r2, [sp, #4]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	9200      	str	r2, [sp, #0]
 80065ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065f0:	f7fd fe24 	bl	800423c <Display_stations_list_data>
			state_change_done = 1;
 80065f4:	4b72      	ldr	r3, [pc, #456]	@ (80067c0 <state_machine+0x458>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80065fa:	4b75      	ldr	r3, [pc, #468]	@ (80067d0 <state_machine+0x468>)
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	2b05      	cmp	r3, #5
 8006600:	d911      	bls.n	8006626 <state_machine+0x2be>
 8006602:	4b73      	ldr	r3, [pc, #460]	@ (80067d0 <state_machine+0x468>)
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	2b9c      	cmp	r3, #156	@ 0x9c
 8006608:	d80d      	bhi.n	8006626 <state_machine+0x2be>
 800660a:	4b71      	ldr	r3, [pc, #452]	@ (80067d0 <state_machine+0x468>)
 800660c:	885b      	ldrh	r3, [r3, #2]
 800660e:	2bc3      	cmp	r3, #195	@ 0xc3
 8006610:	d909      	bls.n	8006626 <state_machine+0x2be>
 8006612:	4b6f      	ldr	r3, [pc, #444]	@ (80067d0 <state_machine+0x468>)
 8006614:	885b      	ldrh	r3, [r3, #2]
 8006616:	2bea      	cmp	r3, #234	@ 0xea
 8006618:	d805      	bhi.n	8006626 <state_machine+0x2be>
		{
			state_change_done = 0;
 800661a:	4b69      	ldr	r3, [pc, #420]	@ (80067c0 <state_machine+0x458>)
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006620:	4b6c      	ldr	r3, [pc, #432]	@ (80067d4 <state_machine+0x46c>)
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006626:	4b6a      	ldr	r3, [pc, #424]	@ (80067d0 <state_machine+0x468>)
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	2ba3      	cmp	r3, #163	@ 0xa3
 800662c:	d912      	bls.n	8006654 <state_machine+0x2ec>
 800662e:	4b68      	ldr	r3, [pc, #416]	@ (80067d0 <state_machine+0x468>)
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006636:	d80d      	bhi.n	8006654 <state_machine+0x2ec>
 8006638:	4b65      	ldr	r3, [pc, #404]	@ (80067d0 <state_machine+0x468>)
 800663a:	885b      	ldrh	r3, [r3, #2]
 800663c:	2bc3      	cmp	r3, #195	@ 0xc3
 800663e:	d909      	bls.n	8006654 <state_machine+0x2ec>
 8006640:	4b63      	ldr	r3, [pc, #396]	@ (80067d0 <state_machine+0x468>)
 8006642:	885b      	ldrh	r3, [r3, #2]
 8006644:	2bea      	cmp	r3, #234	@ 0xea
 8006646:	d805      	bhi.n	8006654 <state_machine+0x2ec>
		{
			state_change_done = 0;
 8006648:	4b5d      	ldr	r3, [pc, #372]	@ (80067c0 <state_machine+0x458>)
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 800664e:	4b61      	ldr	r3, [pc, #388]	@ (80067d4 <state_machine+0x46c>)
 8006650:	2203      	movs	r2, #3
 8006652:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8006654:	4b5e      	ldr	r3, [pc, #376]	@ (80067d0 <state_machine+0x468>)
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 800665c:	d930      	bls.n	80066c0 <state_machine+0x358>
 800665e:	4b5c      	ldr	r3, [pc, #368]	@ (80067d0 <state_machine+0x468>)
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006666:	d82b      	bhi.n	80066c0 <state_machine+0x358>
 8006668:	4b59      	ldr	r3, [pc, #356]	@ (80067d0 <state_machine+0x468>)
 800666a:	885b      	ldrh	r3, [r3, #2]
 800666c:	2b14      	cmp	r3, #20
 800666e:	d927      	bls.n	80066c0 <state_machine+0x358>
 8006670:	4b57      	ldr	r3, [pc, #348]	@ (80067d0 <state_machine+0x468>)
 8006672:	885b      	ldrh	r3, [r3, #2]
 8006674:	2b65      	cmp	r3, #101	@ 0x65
 8006676:	d823      	bhi.n	80066c0 <state_machine+0x358>
		{
			if(dab_management_to_display.total_services)
 8006678:	4b54      	ldr	r3, [pc, #336]	@ (80067cc <state_machine+0x464>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01f      	beq.n	80066c0 <state_machine+0x358>
			{
				srv_list_start_index--;
 8006680:	4b51      	ldr	r3, [pc, #324]	@ (80067c8 <state_machine+0x460>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3b01      	subs	r3, #1
 8006686:	4a50      	ldr	r2, [pc, #320]	@ (80067c8 <state_machine+0x460>)
 8006688:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 800668a:	4b50      	ldr	r3, [pc, #320]	@ (80067cc <state_machine+0x464>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	4b4d      	ldr	r3, [pc, #308]	@ (80067c8 <state_machine+0x460>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	db03      	blt.n	80066a0 <state_machine+0x338>
 8006698:	4b4b      	ldr	r3, [pc, #300]	@ (80067c8 <state_machine+0x460>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	da04      	bge.n	80066aa <state_machine+0x342>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 80066a0:	4b4a      	ldr	r3, [pc, #296]	@ (80067cc <state_machine+0x464>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	4a48      	ldr	r2, [pc, #288]	@ (80067c8 <state_machine+0x460>)
 80066a8:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80066aa:	4b47      	ldr	r3, [pc, #284]	@ (80067c8 <state_machine+0x460>)
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	4b45      	ldr	r3, [pc, #276]	@ (80067c4 <state_machine+0x45c>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b46      	ldr	r3, [pc, #280]	@ (80067cc <state_machine+0x464>)
 80066b4:	9201      	str	r2, [sp, #4]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	9200      	str	r2, [sp, #0]
 80066ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066bc:	f7fd fdbe 	bl	800423c <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 80066c0:	4b43      	ldr	r3, [pc, #268]	@ (80067d0 <state_machine+0x468>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80066c8:	d92a      	bls.n	8006720 <state_machine+0x3b8>
 80066ca:	4b41      	ldr	r3, [pc, #260]	@ (80067d0 <state_machine+0x468>)
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80066d2:	d825      	bhi.n	8006720 <state_machine+0x3b8>
 80066d4:	4b3e      	ldr	r3, [pc, #248]	@ (80067d0 <state_machine+0x468>)
 80066d6:	885b      	ldrh	r3, [r3, #2]
 80066d8:	2b6c      	cmp	r3, #108	@ 0x6c
 80066da:	d921      	bls.n	8006720 <state_machine+0x3b8>
 80066dc:	4b3c      	ldr	r3, [pc, #240]	@ (80067d0 <state_machine+0x468>)
 80066de:	885b      	ldrh	r3, [r3, #2]
 80066e0:	2bbd      	cmp	r3, #189	@ 0xbd
 80066e2:	d81d      	bhi.n	8006720 <state_machine+0x3b8>
		{
			if(dab_management_to_display.total_services)
 80066e4:	4b39      	ldr	r3, [pc, #228]	@ (80067cc <state_machine+0x464>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d019      	beq.n	8006720 <state_machine+0x3b8>
			{
				srv_list_start_index++;
 80066ec:	4b36      	ldr	r3, [pc, #216]	@ (80067c8 <state_machine+0x460>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	4a35      	ldr	r2, [pc, #212]	@ (80067c8 <state_machine+0x460>)
 80066f4:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 80066f6:	4b35      	ldr	r3, [pc, #212]	@ (80067cc <state_machine+0x464>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	4b32      	ldr	r3, [pc, #200]	@ (80067c8 <state_machine+0x460>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	dc02      	bgt.n	800670a <state_machine+0x3a2>
				{
					srv_list_start_index = 0;
 8006704:	4b30      	ldr	r3, [pc, #192]	@ (80067c8 <state_machine+0x460>)
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 800670a:	4b2f      	ldr	r3, [pc, #188]	@ (80067c8 <state_machine+0x460>)
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	4b2d      	ldr	r3, [pc, #180]	@ (80067c4 <state_machine+0x45c>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b2e      	ldr	r3, [pc, #184]	@ (80067cc <state_machine+0x464>)
 8006714:	9201      	str	r2, [sp, #4]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	9200      	str	r2, [sp, #0]
 800671a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800671c:	f7fd fd8e 	bl	800423c <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 8006720:	4b2b      	ldr	r3, [pc, #172]	@ (80067d0 <state_machine+0x468>)
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	2b05      	cmp	r3, #5
 8006726:	d91f      	bls.n	8006768 <state_machine+0x400>
 8006728:	4b29      	ldr	r3, [pc, #164]	@ (80067d0 <state_machine+0x468>)
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8006730:	d81a      	bhi.n	8006768 <state_machine+0x400>
 8006732:	4b27      	ldr	r3, [pc, #156]	@ (80067d0 <state_machine+0x468>)
 8006734:	885b      	ldrh	r3, [r3, #2]
 8006736:	2b14      	cmp	r3, #20
 8006738:	d916      	bls.n	8006768 <state_machine+0x400>
 800673a:	4b25      	ldr	r3, [pc, #148]	@ (80067d0 <state_machine+0x468>)
 800673c:	885b      	ldrh	r3, [r3, #2]
 800673e:	2b31      	cmp	r3, #49	@ 0x31
 8006740:	d812      	bhi.n	8006768 <state_machine+0x400>
		{
			if(dab_management_to_display.total_services)
 8006742:	4b22      	ldr	r3, [pc, #136]	@ (80067cc <state_machine+0x464>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00e      	beq.n	8006768 <state_machine+0x400>
			{
				state_change_done = 0;
 800674a:	4b1d      	ldr	r3, [pc, #116]	@ (80067c0 <state_machine+0x458>)
 800674c:	2200      	movs	r2, #0
 800674e:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 8006750:	4b1d      	ldr	r3, [pc, #116]	@ (80067c8 <state_machine+0x460>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	4618      	mov	r0, r3
 8006758:	f7fc fd70 	bl	800323c <play_station>
				playing_state = playing;
 800675c:	4b1e      	ldr	r3, [pc, #120]	@ (80067d8 <state_machine+0x470>)
 800675e:	2201      	movs	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006762:	4b1c      	ldr	r3, [pc, #112]	@ (80067d4 <state_machine+0x46c>)
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 8006768:	4b19      	ldr	r3, [pc, #100]	@ (80067d0 <state_machine+0x468>)
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	2b05      	cmp	r3, #5
 800676e:	d943      	bls.n	80067f8 <state_machine+0x490>
 8006770:	4b17      	ldr	r3, [pc, #92]	@ (80067d0 <state_machine+0x468>)
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8006778:	d83e      	bhi.n	80067f8 <state_machine+0x490>
 800677a:	4b15      	ldr	r3, [pc, #84]	@ (80067d0 <state_machine+0x468>)
 800677c:	885b      	ldrh	r3, [r3, #2]
 800677e:	2b37      	cmp	r3, #55	@ 0x37
 8006780:	d93a      	bls.n	80067f8 <state_machine+0x490>
 8006782:	4b13      	ldr	r3, [pc, #76]	@ (80067d0 <state_machine+0x468>)
 8006784:	885b      	ldrh	r3, [r3, #2]
 8006786:	2b54      	cmp	r3, #84	@ 0x54
 8006788:	d836      	bhi.n	80067f8 <state_machine+0x490>
		{
			if(dab_management_to_display.total_services)
 800678a:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <state_machine+0x464>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d032      	beq.n	80067f8 <state_machine+0x490>
			{
				state_change_done = 0;
 8006792:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <state_machine+0x458>)
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 8006798:	4b0b      	ldr	r3, [pc, #44]	@ (80067c8 <state_machine+0x460>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	4a0b      	ldr	r2, [pc, #44]	@ (80067cc <state_machine+0x464>)
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	db1a      	blt.n	80067dc <state_machine+0x474>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 80067a6:	4b08      	ldr	r3, [pc, #32]	@ (80067c8 <state_machine+0x460>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	4b07      	ldr	r3, [pc, #28]	@ (80067cc <state_machine+0x464>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fc fd3f 	bl	800323c <play_station>
 80067be:	e015      	b.n	80067ec <state_machine+0x484>
 80067c0:	20007011 	.word	0x20007011
 80067c4:	20007054 	.word	0x20007054
 80067c8:	20007014 	.word	0x20007014
 80067cc:	20007044 	.word	0x20007044
 80067d0:	20007018 	.word	0x20007018
 80067d4:	20007010 	.word	0x20007010
 80067d8:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 80067dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006a14 <state_machine+0x6ac>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	3301      	adds	r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fc fd28 	bl	800323c <play_station>
				}

				playing_state = playing;
 80067ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006a18 <state_machine+0x6b0>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80067f2:	4b8a      	ldr	r3, [pc, #552]	@ (8006a1c <state_machine+0x6b4>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 80067f8:	4b89      	ldr	r3, [pc, #548]	@ (8006a20 <state_machine+0x6b8>)
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	d935      	bls.n	800686c <state_machine+0x504>
 8006800:	4b87      	ldr	r3, [pc, #540]	@ (8006a20 <state_machine+0x6b8>)
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8006808:	d830      	bhi.n	800686c <state_machine+0x504>
 800680a:	4b85      	ldr	r3, [pc, #532]	@ (8006a20 <state_machine+0x6b8>)
 800680c:	885b      	ldrh	r3, [r3, #2]
 800680e:	2b5a      	cmp	r3, #90	@ 0x5a
 8006810:	d92c      	bls.n	800686c <state_machine+0x504>
 8006812:	4b83      	ldr	r3, [pc, #524]	@ (8006a20 <state_machine+0x6b8>)
 8006814:	885b      	ldrh	r3, [r3, #2]
 8006816:	2b77      	cmp	r3, #119	@ 0x77
 8006818:	d828      	bhi.n	800686c <state_machine+0x504>
		{
			if(dab_management_to_display.total_services)
 800681a:	4b82      	ldr	r3, [pc, #520]	@ (8006a24 <state_machine+0x6bc>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d024      	beq.n	800686c <state_machine+0x504>
			{
				state_change_done = 0;
 8006822:	4b81      	ldr	r3, [pc, #516]	@ (8006a28 <state_machine+0x6c0>)
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 8006828:	4b7a      	ldr	r3, [pc, #488]	@ (8006a14 <state_machine+0x6ac>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3302      	adds	r3, #2
 800682e:	4a7d      	ldr	r2, [pc, #500]	@ (8006a24 <state_machine+0x6bc>)
 8006830:	7812      	ldrb	r2, [r2, #0]
 8006832:	4293      	cmp	r3, r2
 8006834:	db0c      	blt.n	8006850 <state_machine+0x4e8>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 8006836:	4b77      	ldr	r3, [pc, #476]	@ (8006a14 <state_machine+0x6ac>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	4b79      	ldr	r3, [pc, #484]	@ (8006a24 <state_machine+0x6bc>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	b2db      	uxtb	r3, r3
 8006844:	3302      	adds	r3, #2
 8006846:	b2db      	uxtb	r3, r3
 8006848:	4618      	mov	r0, r3
 800684a:	f7fc fcf7 	bl	800323c <play_station>
 800684e:	e007      	b.n	8006860 <state_machine+0x4f8>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 8006850:	4b70      	ldr	r3, [pc, #448]	@ (8006a14 <state_machine+0x6ac>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	3302      	adds	r3, #2
 8006858:	b2db      	uxtb	r3, r3
 800685a:	4618      	mov	r0, r3
 800685c:	f7fc fcee 	bl	800323c <play_station>
				}

				playing_state = playing;
 8006860:	4b6d      	ldr	r3, [pc, #436]	@ (8006a18 <state_machine+0x6b0>)
 8006862:	2201      	movs	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006866:	4b6d      	ldr	r3, [pc, #436]	@ (8006a1c <state_machine+0x6b4>)
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 800686c:	4b6c      	ldr	r3, [pc, #432]	@ (8006a20 <state_machine+0x6b8>)
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	2b05      	cmp	r3, #5
 8006872:	d935      	bls.n	80068e0 <state_machine+0x578>
 8006874:	4b6a      	ldr	r3, [pc, #424]	@ (8006a20 <state_machine+0x6b8>)
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800687c:	d830      	bhi.n	80068e0 <state_machine+0x578>
 800687e:	4b68      	ldr	r3, [pc, #416]	@ (8006a20 <state_machine+0x6b8>)
 8006880:	885b      	ldrh	r3, [r3, #2]
 8006882:	2b7d      	cmp	r3, #125	@ 0x7d
 8006884:	d92c      	bls.n	80068e0 <state_machine+0x578>
 8006886:	4b66      	ldr	r3, [pc, #408]	@ (8006a20 <state_machine+0x6b8>)
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	2b9a      	cmp	r3, #154	@ 0x9a
 800688c:	d828      	bhi.n	80068e0 <state_machine+0x578>
		{
			if(dab_management_to_display.total_services)
 800688e:	4b65      	ldr	r3, [pc, #404]	@ (8006a24 <state_machine+0x6bc>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d024      	beq.n	80068e0 <state_machine+0x578>
			{
				state_change_done = 0;
 8006896:	4b64      	ldr	r3, [pc, #400]	@ (8006a28 <state_machine+0x6c0>)
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 800689c:	4b5d      	ldr	r3, [pc, #372]	@ (8006a14 <state_machine+0x6ac>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3303      	adds	r3, #3
 80068a2:	4a60      	ldr	r2, [pc, #384]	@ (8006a24 <state_machine+0x6bc>)
 80068a4:	7812      	ldrb	r2, [r2, #0]
 80068a6:	4293      	cmp	r3, r2
 80068a8:	db0c      	blt.n	80068c4 <state_machine+0x55c>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 80068aa:	4b5a      	ldr	r3, [pc, #360]	@ (8006a14 <state_machine+0x6ac>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	4b5c      	ldr	r3, [pc, #368]	@ (8006a24 <state_machine+0x6bc>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	3303      	adds	r3, #3
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fc fcbd 	bl	800323c <play_station>
 80068c2:	e007      	b.n	80068d4 <state_machine+0x56c>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 80068c4:	4b53      	ldr	r3, [pc, #332]	@ (8006a14 <state_machine+0x6ac>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	3303      	adds	r3, #3
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fc fcb4 	bl	800323c <play_station>
				}

				playing_state = playing;
 80068d4:	4b50      	ldr	r3, [pc, #320]	@ (8006a18 <state_machine+0x6b0>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80068da:	4b50      	ldr	r3, [pc, #320]	@ (8006a1c <state_machine+0x6b4>)
 80068dc:	2200      	movs	r2, #0
 80068de:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 80068e0:	4b4f      	ldr	r3, [pc, #316]	@ (8006a20 <state_machine+0x6b8>)
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	2b05      	cmp	r3, #5
 80068e6:	f240 8230 	bls.w	8006d4a <state_machine+0x9e2>
 80068ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006a20 <state_machine+0x6b8>)
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80068f2:	f200 822a 	bhi.w	8006d4a <state_machine+0x9e2>
 80068f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006a20 <state_machine+0x6b8>)
 80068f8:	885b      	ldrh	r3, [r3, #2]
 80068fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80068fc:	f240 8225 	bls.w	8006d4a <state_machine+0x9e2>
 8006900:	4b47      	ldr	r3, [pc, #284]	@ (8006a20 <state_machine+0x6b8>)
 8006902:	885b      	ldrh	r3, [r3, #2]
 8006904:	2bbd      	cmp	r3, #189	@ 0xbd
 8006906:	f200 8220 	bhi.w	8006d4a <state_machine+0x9e2>
		{
			if(dab_management_to_display.total_services)
 800690a:	4b46      	ldr	r3, [pc, #280]	@ (8006a24 <state_machine+0x6bc>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 821b 	beq.w	8006d4a <state_machine+0x9e2>
			{
				state_change_done = 0;
 8006914:	4b44      	ldr	r3, [pc, #272]	@ (8006a28 <state_machine+0x6c0>)
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 800691a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a14 <state_machine+0x6ac>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3304      	adds	r3, #4
 8006920:	4a40      	ldr	r2, [pc, #256]	@ (8006a24 <state_machine+0x6bc>)
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	4293      	cmp	r3, r2
 8006926:	db0c      	blt.n	8006942 <state_machine+0x5da>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 8006928:	4b3a      	ldr	r3, [pc, #232]	@ (8006a14 <state_machine+0x6ac>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	b2da      	uxtb	r2, r3
 800692e:	4b3d      	ldr	r3, [pc, #244]	@ (8006a24 <state_machine+0x6bc>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	b2db      	uxtb	r3, r3
 8006936:	3304      	adds	r3, #4
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4618      	mov	r0, r3
 800693c:	f7fc fc7e 	bl	800323c <play_station>
 8006940:	e007      	b.n	8006952 <state_machine+0x5ea>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 8006942:	4b34      	ldr	r3, [pc, #208]	@ (8006a14 <state_machine+0x6ac>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	3304      	adds	r3, #4
 800694a:	b2db      	uxtb	r3, r3
 800694c:	4618      	mov	r0, r3
 800694e:	f7fc fc75 	bl	800323c <play_station>
				}

				playing_state = playing;
 8006952:	4b31      	ldr	r3, [pc, #196]	@ (8006a18 <state_machine+0x6b0>)
 8006954:	2201      	movs	r2, #1
 8006956:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006958:	4b30      	ldr	r3, [pc, #192]	@ (8006a1c <state_machine+0x6b4>)
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800695e:	e1f4      	b.n	8006d4a <state_machine+0x9e2>

	case signal_info:
		if(!state_change_done)
 8006960:	4b31      	ldr	r3, [pc, #196]	@ (8006a28 <state_machine+0x6c0>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <state_machine+0x60a>
		{
			Display_dab_digrad_status_background();
 8006968:	f7fe f804 	bl	8004974 <Display_dab_digrad_status_background>
			state_change_done = 1;
 800696c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a28 <state_machine+0x6c0>)
 800696e:	2201      	movs	r2, #1
 8006970:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 8006972:	4c2e      	ldr	r4, [pc, #184]	@ (8006a2c <state_machine+0x6c4>)
 8006974:	f107 0308 	add.w	r3, r7, #8
 8006978:	4618      	mov	r0, r3
 800697a:	f7fb f9c9 	bl	8001d10 <Si468x_dab_digrad_status>
 800697e:	4625      	mov	r5, r4
 8006980:	f107 0408 	add.w	r4, r7, #8
 8006984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800698a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800698c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006990:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 8006994:	4e25      	ldr	r6, [pc, #148]	@ (8006a2c <state_machine+0x6c4>)
 8006996:	466d      	mov	r5, sp
 8006998:	f106 0410 	add.w	r4, r6, #16
 800699c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800699e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80069a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80069ac:	f7fe f97a 	bl	8004ca4 <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80069b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006a20 <state_machine+0x6b8>)
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	2b05      	cmp	r3, #5
 80069b6:	d911      	bls.n	80069dc <state_machine+0x674>
 80069b8:	4b19      	ldr	r3, [pc, #100]	@ (8006a20 <state_machine+0x6b8>)
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	2b9c      	cmp	r3, #156	@ 0x9c
 80069be:	d80d      	bhi.n	80069dc <state_machine+0x674>
 80069c0:	4b17      	ldr	r3, [pc, #92]	@ (8006a20 <state_machine+0x6b8>)
 80069c2:	885b      	ldrh	r3, [r3, #2]
 80069c4:	2bc3      	cmp	r3, #195	@ 0xc3
 80069c6:	d909      	bls.n	80069dc <state_machine+0x674>
 80069c8:	4b15      	ldr	r3, [pc, #84]	@ (8006a20 <state_machine+0x6b8>)
 80069ca:	885b      	ldrh	r3, [r3, #2]
 80069cc:	2bea      	cmp	r3, #234	@ 0xea
 80069ce:	d805      	bhi.n	80069dc <state_machine+0x674>
		{
			state_change_done = 0;
 80069d0:	4b15      	ldr	r3, [pc, #84]	@ (8006a28 <state_machine+0x6c0>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 80069d6:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <state_machine+0x6b4>)
 80069d8:	2201      	movs	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80069dc:	4b10      	ldr	r3, [pc, #64]	@ (8006a20 <state_machine+0x6b8>)
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	2ba3      	cmp	r3, #163	@ 0xa3
 80069e2:	f240 81b4 	bls.w	8006d4e <state_machine+0x9e6>
 80069e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a20 <state_machine+0x6b8>)
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80069ee:	f200 81ae 	bhi.w	8006d4e <state_machine+0x9e6>
 80069f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <state_machine+0x6b8>)
 80069f4:	885b      	ldrh	r3, [r3, #2]
 80069f6:	2bc3      	cmp	r3, #195	@ 0xc3
 80069f8:	f240 81a9 	bls.w	8006d4e <state_machine+0x9e6>
 80069fc:	4b08      	ldr	r3, [pc, #32]	@ (8006a20 <state_machine+0x6b8>)
 80069fe:	885b      	ldrh	r3, [r3, #2]
 8006a00:	2bea      	cmp	r3, #234	@ 0xea
 8006a02:	f200 81a4 	bhi.w	8006d4e <state_machine+0x9e6>
		{
			state_change_done = 0;
 8006a06:	4b08      	ldr	r3, [pc, #32]	@ (8006a28 <state_machine+0x6c0>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006a0c:	4b03      	ldr	r3, [pc, #12]	@ (8006a1c <state_machine+0x6b4>)
 8006a0e:	2204      	movs	r2, #4
 8006a10:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006a12:	e19c      	b.n	8006d4e <state_machine+0x9e6>
 8006a14:	20007014 	.word	0x20007014
 8006a18:	20000150 	.word	0x20000150
 8006a1c:	20007010 	.word	0x20007010
 8006a20:	20007018 	.word	0x20007018
 8006a24:	20007044 	.word	0x20007044
 8006a28:	20007011 	.word	0x20007011
 8006a2c:	2000701c 	.word	0x2000701c

	case scanning:
		if(!state_change_done)
 8006a30:	4b7c      	ldr	r3, [pc, #496]	@ (8006c24 <state_machine+0x8bc>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d116      	bne.n	8006a66 <state_machine+0x6fe>
		{
			playing_state = not_playing;
 8006a38:	4b7b      	ldr	r3, [pc, #492]	@ (8006c28 <state_machine+0x8c0>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 8006a3e:	f7fd fd97 	bl	8004570 <Display_scanning_screen_background>
			state_change_done = 1;
 8006a42:	4b78      	ldr	r3, [pc, #480]	@ (8006c24 <state_machine+0x8bc>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 8006a48:	f7fb fd8c 	bl	8002564 <Si468x_dab_full_scan>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4b76      	ldr	r3, [pc, #472]	@ (8006c2c <state_machine+0x8c4>)
 8006a52:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8006a54:	4b75      	ldr	r3, [pc, #468]	@ (8006c2c <state_machine+0x8c4>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <state_machine+0x6fe>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 8006a5c:	f7fd ff54 	bl	8004908 <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 8006a60:	4b72      	ldr	r3, [pc, #456]	@ (8006c2c <state_machine+0x8c4>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006a66:	4b72      	ldr	r3, [pc, #456]	@ (8006c30 <state_machine+0x8c8>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	f240 8171 	bls.w	8006d52 <state_machine+0x9ea>
 8006a70:	4b6f      	ldr	r3, [pc, #444]	@ (8006c30 <state_machine+0x8c8>)
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006a78:	f200 816b 	bhi.w	8006d52 <state_machine+0x9ea>
 8006a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8006c30 <state_machine+0x8c8>)
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	2bc3      	cmp	r3, #195	@ 0xc3
 8006a82:	f240 8166 	bls.w	8006d52 <state_machine+0x9ea>
 8006a86:	4b6a      	ldr	r3, [pc, #424]	@ (8006c30 <state_machine+0x8c8>)
 8006a88:	885b      	ldrh	r3, [r3, #2]
 8006a8a:	2bea      	cmp	r3, #234	@ 0xea
 8006a8c:	f200 8161 	bhi.w	8006d52 <state_machine+0x9ea>
		{
			scan_cancel_flag = 1;
 8006a90:	4b68      	ldr	r3, [pc, #416]	@ (8006c34 <state_machine+0x8cc>)
 8006a92:	2201      	movs	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 8006a96:	4b63      	ldr	r3, [pc, #396]	@ (8006c24 <state_machine+0x8bc>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006a9c:	4b66      	ldr	r3, [pc, #408]	@ (8006c38 <state_machine+0x8d0>)
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006aa2:	e156      	b.n	8006d52 <state_machine+0x9ea>

	case settings:
		if(!state_change_done)
 8006aa4:	4b5f      	ldr	r3, [pc, #380]	@ (8006c24 <state_machine+0x8bc>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d107      	bne.n	8006abc <state_machine+0x754>
		{
			Display_settings_screen_background();
 8006aac:	f7fe fc64 	bl	8005378 <Display_settings_screen_background>
			scan_cancel_flag = 0;
 8006ab0:	4b60      	ldr	r3, [pc, #384]	@ (8006c34 <state_machine+0x8cc>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 8006ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8006c24 <state_machine+0x8bc>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 8006abc:	4b5f      	ldr	r3, [pc, #380]	@ (8006c3c <state_machine+0x8d4>)
 8006abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ac0:	f7fe fd52 	bl	8005568 <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8006ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8006c30 <state_machine+0x8c8>)
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	2ba3      	cmp	r3, #163	@ 0xa3
 8006aca:	d91e      	bls.n	8006b0a <state_machine+0x7a2>
 8006acc:	4b58      	ldr	r3, [pc, #352]	@ (8006c30 <state_machine+0x8c8>)
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006ad4:	d819      	bhi.n	8006b0a <state_machine+0x7a2>
 8006ad6:	4b56      	ldr	r3, [pc, #344]	@ (8006c30 <state_machine+0x8c8>)
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	2b3c      	cmp	r3, #60	@ 0x3c
 8006adc:	d915      	bls.n	8006b0a <state_machine+0x7a2>
 8006ade:	4b54      	ldr	r3, [pc, #336]	@ (8006c30 <state_machine+0x8c8>)
 8006ae0:	885b      	ldrh	r3, [r3, #2]
 8006ae2:	2b63      	cmp	r3, #99	@ 0x63
 8006ae4:	d811      	bhi.n	8006b0a <state_machine+0x7a2>
		{
			dab_management_to_display.audio_volume += 2;
 8006ae6:	4b55      	ldr	r3, [pc, #340]	@ (8006c3c <state_machine+0x8d4>)
 8006ae8:	7b9b      	ldrb	r3, [r3, #14]
 8006aea:	3302      	adds	r3, #2
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	4b53      	ldr	r3, [pc, #332]	@ (8006c3c <state_machine+0x8d4>)
 8006af0:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 8006af2:	4b52      	ldr	r3, [pc, #328]	@ (8006c3c <state_machine+0x8d4>)
 8006af4:	7b9b      	ldrb	r3, [r3, #14]
 8006af6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006af8:	d902      	bls.n	8006b00 <state_machine+0x798>
			{
				dab_management_to_display.audio_volume = 63;
 8006afa:	4b50      	ldr	r3, [pc, #320]	@ (8006c3c <state_machine+0x8d4>)
 8006afc:	223f      	movs	r2, #63	@ 0x3f
 8006afe:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006b00:	4b4e      	ldr	r3, [pc, #312]	@ (8006c3c <state_machine+0x8d4>)
 8006b02:	7b9b      	ldrb	r3, [r3, #14]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fc fb65 	bl	80031d4 <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8006b0a:	4b49      	ldr	r3, [pc, #292]	@ (8006c30 <state_machine+0x8c8>)
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	d91d      	bls.n	8006b4e <state_machine+0x7e6>
 8006b12:	4b47      	ldr	r3, [pc, #284]	@ (8006c30 <state_machine+0x8c8>)
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	2b9c      	cmp	r3, #156	@ 0x9c
 8006b18:	d819      	bhi.n	8006b4e <state_machine+0x7e6>
 8006b1a:	4b45      	ldr	r3, [pc, #276]	@ (8006c30 <state_machine+0x8c8>)
 8006b1c:	885b      	ldrh	r3, [r3, #2]
 8006b1e:	2b3c      	cmp	r3, #60	@ 0x3c
 8006b20:	d915      	bls.n	8006b4e <state_machine+0x7e6>
 8006b22:	4b43      	ldr	r3, [pc, #268]	@ (8006c30 <state_machine+0x8c8>)
 8006b24:	885b      	ldrh	r3, [r3, #2]
 8006b26:	2b63      	cmp	r3, #99	@ 0x63
 8006b28:	d811      	bhi.n	8006b4e <state_machine+0x7e6>
		{
			dab_management_to_display.audio_volume -= 2;
 8006b2a:	4b44      	ldr	r3, [pc, #272]	@ (8006c3c <state_machine+0x8d4>)
 8006b2c:	7b9b      	ldrb	r3, [r3, #14]
 8006b2e:	3b02      	subs	r3, #2
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	4b42      	ldr	r3, [pc, #264]	@ (8006c3c <state_machine+0x8d4>)
 8006b34:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 8006b36:	4b41      	ldr	r3, [pc, #260]	@ (8006c3c <state_machine+0x8d4>)
 8006b38:	7b9b      	ldrb	r3, [r3, #14]
 8006b3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b3c:	d902      	bls.n	8006b44 <state_machine+0x7dc>
			{
				dab_management_to_display.audio_volume = 0;
 8006b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8006c3c <state_machine+0x8d4>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006b44:	4b3d      	ldr	r3, [pc, #244]	@ (8006c3c <state_machine+0x8d4>)
 8006b46:	7b9b      	ldrb	r3, [r3, #14]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fc fb43 	bl	80031d4 <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006b4e:	4b38      	ldr	r3, [pc, #224]	@ (8006c30 <state_machine+0x8c8>)
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	2ba3      	cmp	r3, #163	@ 0xa3
 8006b54:	d907      	bls.n	8006b66 <state_machine+0x7fe>
 8006b56:	4b36      	ldr	r3, [pc, #216]	@ (8006c30 <state_machine+0x8c8>)
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006b5e:	d802      	bhi.n	8006b66 <state_machine+0x7fe>
 8006b60:	4b33      	ldr	r3, [pc, #204]	@ (8006c30 <state_machine+0x8c8>)
 8006b62:	885b      	ldrh	r3, [r3, #2]
 8006b64:	2b69      	cmp	r3, #105	@ 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006b66:	4b32      	ldr	r3, [pc, #200]	@ (8006c30 <state_machine+0x8c8>)
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	d906      	bls.n	8006b7c <state_machine+0x814>
 8006b6e:	4b30      	ldr	r3, [pc, #192]	@ (8006c30 <state_machine+0x8c8>)
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	2b9c      	cmp	r3, #156	@ 0x9c
 8006b74:	d802      	bhi.n	8006b7c <state_machine+0x814>
 8006b76:	4b2e      	ldr	r3, [pc, #184]	@ (8006c30 <state_machine+0x8c8>)
 8006b78:	885b      	ldrh	r3, [r3, #2]
 8006b7a:	2b69      	cmp	r3, #105	@ 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006c30 <state_machine+0x8c8>)
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	d911      	bls.n	8006ba8 <state_machine+0x840>
 8006b84:	4b2a      	ldr	r3, [pc, #168]	@ (8006c30 <state_machine+0x8c8>)
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	2b9c      	cmp	r3, #156	@ 0x9c
 8006b8a:	d80d      	bhi.n	8006ba8 <state_machine+0x840>
 8006b8c:	4b28      	ldr	r3, [pc, #160]	@ (8006c30 <state_machine+0x8c8>)
 8006b8e:	885b      	ldrh	r3, [r3, #2]
 8006b90:	2b96      	cmp	r3, #150	@ 0x96
 8006b92:	d909      	bls.n	8006ba8 <state_machine+0x840>
 8006b94:	4b26      	ldr	r3, [pc, #152]	@ (8006c30 <state_machine+0x8c8>)
 8006b96:	885b      	ldrh	r3, [r3, #2]
 8006b98:	2bbd      	cmp	r3, #189	@ 0xbd
 8006b9a:	d805      	bhi.n	8006ba8 <state_machine+0x840>
		{
			state_change_done = 0;
 8006b9c:	4b21      	ldr	r3, [pc, #132]	@ (8006c24 <state_machine+0x8bc>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 8006ba2:	4b25      	ldr	r3, [pc, #148]	@ (8006c38 <state_machine+0x8d0>)
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006ba8:	4b21      	ldr	r3, [pc, #132]	@ (8006c30 <state_machine+0x8c8>)
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	2ba3      	cmp	r3, #163	@ 0xa3
 8006bae:	d907      	bls.n	8006bc0 <state_machine+0x858>
 8006bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006c30 <state_machine+0x8c8>)
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006bb8:	d802      	bhi.n	8006bc0 <state_machine+0x858>
 8006bba:	4b1d      	ldr	r3, [pc, #116]	@ (8006c30 <state_machine+0x8c8>)
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	2b96      	cmp	r3, #150	@ 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c30 <state_machine+0x8c8>)
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	d911      	bls.n	8006bec <state_machine+0x884>
 8006bc8:	4b19      	ldr	r3, [pc, #100]	@ (8006c30 <state_machine+0x8c8>)
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	2b9c      	cmp	r3, #156	@ 0x9c
 8006bce:	d80d      	bhi.n	8006bec <state_machine+0x884>
 8006bd0:	4b17      	ldr	r3, [pc, #92]	@ (8006c30 <state_machine+0x8c8>)
 8006bd2:	885b      	ldrh	r3, [r3, #2]
 8006bd4:	2bc3      	cmp	r3, #195	@ 0xc3
 8006bd6:	d909      	bls.n	8006bec <state_machine+0x884>
 8006bd8:	4b15      	ldr	r3, [pc, #84]	@ (8006c30 <state_machine+0x8c8>)
 8006bda:	885b      	ldrh	r3, [r3, #2]
 8006bdc:	2bea      	cmp	r3, #234	@ 0xea
 8006bde:	d805      	bhi.n	8006bec <state_machine+0x884>
		{
			state_change_done = 0;
 8006be0:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <state_machine+0x8bc>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 8006be6:	4b14      	ldr	r3, [pc, #80]	@ (8006c38 <state_machine+0x8d0>)
 8006be8:	2203      	movs	r2, #3
 8006bea:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (alarming)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006bec:	4b10      	ldr	r3, [pc, #64]	@ (8006c30 <state_machine+0x8c8>)
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	2ba3      	cmp	r3, #163	@ 0xa3
 8006bf2:	f240 80b0 	bls.w	8006d56 <state_machine+0x9ee>
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8006c30 <state_machine+0x8c8>)
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006bfe:	f200 80aa 	bhi.w	8006d56 <state_machine+0x9ee>
 8006c02:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <state_machine+0x8c8>)
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	2bc3      	cmp	r3, #195	@ 0xc3
 8006c08:	f240 80a5 	bls.w	8006d56 <state_machine+0x9ee>
 8006c0c:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <state_machine+0x8c8>)
 8006c0e:	885b      	ldrh	r3, [r3, #2]
 8006c10:	2bea      	cmp	r3, #234	@ 0xea
 8006c12:	f200 80a0 	bhi.w	8006d56 <state_machine+0x9ee>
		{
			state_change_done = 0;
 8006c16:	4b03      	ldr	r3, [pc, #12]	@ (8006c24 <state_machine+0x8bc>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
			system_state = alarming;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	@ (8006c38 <state_machine+0x8d0>)
 8006c1e:	2205      	movs	r2, #5
 8006c20:	701a      	strb	r2, [r3, #0]
		}


		break;
 8006c22:	e098      	b.n	8006d56 <state_machine+0x9ee>
 8006c24:	20007011 	.word	0x20007011
 8006c28:	20000150 	.word	0x20000150
 8006c2c:	20007071 	.word	0x20007071
 8006c30:	20007018 	.word	0x20007018
 8006c34:	20007070 	.word	0x20007070
 8006c38:	20007010 	.word	0x20007010
 8006c3c:	20007044 	.word	0x20007044

	case alarming:
		if(!state_change_done)
 8006c40:	4b48      	ldr	r3, [pc, #288]	@ (8006d64 <state_machine+0x9fc>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <state_machine+0x8ea>
		{
			Display_alarming_screen_background();
 8006c48:	f7fe fcd2 	bl	80055f0 <Display_alarming_screen_background>
			//scan_cancel_flag = 0;
			state_change_done = 1;
 8006c4c:	4b45      	ldr	r3, [pc, #276]	@ (8006d64 <state_machine+0x9fc>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	701a      	strb	r2, [r3, #0]
		}

		//Display_settings_screen_data(dab_management_to_display);

		//Alarming by DLS button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 43 && touch_coordinates.y < 114)
 8006c52:	4b45      	ldr	r3, [pc, #276]	@ (8006d68 <state_machine+0xa00>)
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	2b05      	cmp	r3, #5
 8006c58:	d90d      	bls.n	8006c76 <state_machine+0x90e>
 8006c5a:	4b43      	ldr	r3, [pc, #268]	@ (8006d68 <state_machine+0xa00>)
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	2b9c      	cmp	r3, #156	@ 0x9c
 8006c60:	d809      	bhi.n	8006c76 <state_machine+0x90e>
 8006c62:	4b41      	ldr	r3, [pc, #260]	@ (8006d68 <state_machine+0xa00>)
 8006c64:	885b      	ldrh	r3, [r3, #2]
 8006c66:	2b2b      	cmp	r3, #43	@ 0x2b
 8006c68:	d905      	bls.n	8006c76 <state_machine+0x90e>
 8006c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d68 <state_machine+0xa00>)
 8006c6c:	885b      	ldrh	r3, [r3, #2]
 8006c6e:	2b71      	cmp	r3, #113	@ 0x71
 8006c70:	d801      	bhi.n	8006c76 <state_machine+0x90e>
		{
			Alarming_Mode_1_On();
 8006c72:	f7fc ff21 	bl	8003ab8 <Alarming_Mode_1_On>
		}

		//Alarming by ...1 button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 43 && touch_coordinates.y < 114)
 8006c76:	4b3c      	ldr	r3, [pc, #240]	@ (8006d68 <state_machine+0xa00>)
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	2ba3      	cmp	r3, #163	@ 0xa3
 8006c7c:	d90e      	bls.n	8006c9c <state_machine+0x934>
 8006c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d68 <state_machine+0xa00>)
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006c86:	d809      	bhi.n	8006c9c <state_machine+0x934>
 8006c88:	4b37      	ldr	r3, [pc, #220]	@ (8006d68 <state_machine+0xa00>)
 8006c8a:	885b      	ldrh	r3, [r3, #2]
 8006c8c:	2b2b      	cmp	r3, #43	@ 0x2b
 8006c8e:	d905      	bls.n	8006c9c <state_machine+0x934>
 8006c90:	4b35      	ldr	r3, [pc, #212]	@ (8006d68 <state_machine+0xa00>)
 8006c92:	885b      	ldrh	r3, [r3, #2]
 8006c94:	2b71      	cmp	r3, #113	@ 0x71
 8006c96:	d801      	bhi.n	8006c9c <state_machine+0x934>
		{
			Alarming_Mode_2_On();
 8006c98:	f7fc ff20 	bl	8003adc <Alarming_Mode_2_On>
		}

		//Alarming by ...2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 119 && touch_coordinates.y < 190)
 8006c9c:	4b32      	ldr	r3, [pc, #200]	@ (8006d68 <state_machine+0xa00>)
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	2b05      	cmp	r3, #5
 8006ca2:	d90d      	bls.n	8006cc0 <state_machine+0x958>
 8006ca4:	4b30      	ldr	r3, [pc, #192]	@ (8006d68 <state_machine+0xa00>)
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	2b9c      	cmp	r3, #156	@ 0x9c
 8006caa:	d809      	bhi.n	8006cc0 <state_machine+0x958>
 8006cac:	4b2e      	ldr	r3, [pc, #184]	@ (8006d68 <state_machine+0xa00>)
 8006cae:	885b      	ldrh	r3, [r3, #2]
 8006cb0:	2b77      	cmp	r3, #119	@ 0x77
 8006cb2:	d905      	bls.n	8006cc0 <state_machine+0x958>
 8006cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8006d68 <state_machine+0xa00>)
 8006cb6:	885b      	ldrh	r3, [r3, #2]
 8006cb8:	2bbd      	cmp	r3, #189	@ 0xbd
 8006cba:	d801      	bhi.n	8006cc0 <state_machine+0x958>
		{
			Alarming_Mode_3_On();
 8006cbc:	f7fc ff20 	bl	8003b00 <Alarming_Mode_3_On>
		}

		//No alarming - normal mode button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 119 && touch_coordinates.y < 190)
 8006cc0:	4b29      	ldr	r3, [pc, #164]	@ (8006d68 <state_machine+0xa00>)
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	2ba3      	cmp	r3, #163	@ 0xa3
 8006cc6:	d90e      	bls.n	8006ce6 <state_machine+0x97e>
 8006cc8:	4b27      	ldr	r3, [pc, #156]	@ (8006d68 <state_machine+0xa00>)
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006cd0:	d809      	bhi.n	8006ce6 <state_machine+0x97e>
 8006cd2:	4b25      	ldr	r3, [pc, #148]	@ (8006d68 <state_machine+0xa00>)
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	2b77      	cmp	r3, #119	@ 0x77
 8006cd8:	d905      	bls.n	8006ce6 <state_machine+0x97e>
 8006cda:	4b23      	ldr	r3, [pc, #140]	@ (8006d68 <state_machine+0xa00>)
 8006cdc:	885b      	ldrh	r3, [r3, #2]
 8006cde:	2bbd      	cmp	r3, #189	@ 0xbd
 8006ce0:	d801      	bhi.n	8006ce6 <state_machine+0x97e>
		{
			Alarming_Off();
 8006ce2:	f7fc ff1f 	bl	8003b24 <Alarming_Off>
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006ce6:	4b20      	ldr	r3, [pc, #128]	@ (8006d68 <state_machine+0xa00>)
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d911      	bls.n	8006d12 <state_machine+0x9aa>
 8006cee:	4b1e      	ldr	r3, [pc, #120]	@ (8006d68 <state_machine+0xa00>)
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	2b9c      	cmp	r3, #156	@ 0x9c
 8006cf4:	d80d      	bhi.n	8006d12 <state_machine+0x9aa>
 8006cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d68 <state_machine+0xa00>)
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	2bc3      	cmp	r3, #195	@ 0xc3
 8006cfc:	d909      	bls.n	8006d12 <state_machine+0x9aa>
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <state_machine+0xa00>)
 8006d00:	885b      	ldrh	r3, [r3, #2]
 8006d02:	2bea      	cmp	r3, #234	@ 0xea
 8006d04:	d805      	bhi.n	8006d12 <state_machine+0x9aa>
		{
			state_change_done = 0;
 8006d06:	4b17      	ldr	r3, [pc, #92]	@ (8006d64 <state_machine+0x9fc>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006d0c:	4b17      	ldr	r3, [pc, #92]	@ (8006d6c <state_machine+0xa04>)
 8006d0e:	2204      	movs	r2, #4
 8006d10:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006d12:	4b15      	ldr	r3, [pc, #84]	@ (8006d68 <state_machine+0xa00>)
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	2ba3      	cmp	r3, #163	@ 0xa3
 8006d18:	d91f      	bls.n	8006d5a <state_machine+0x9f2>
 8006d1a:	4b13      	ldr	r3, [pc, #76]	@ (8006d68 <state_machine+0xa00>)
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8006d22:	d81a      	bhi.n	8006d5a <state_machine+0x9f2>
 8006d24:	4b10      	ldr	r3, [pc, #64]	@ (8006d68 <state_machine+0xa00>)
 8006d26:	885b      	ldrh	r3, [r3, #2]
 8006d28:	2bc3      	cmp	r3, #195	@ 0xc3
 8006d2a:	d916      	bls.n	8006d5a <state_machine+0x9f2>
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d68 <state_machine+0xa00>)
 8006d2e:	885b      	ldrh	r3, [r3, #2]
 8006d30:	2bea      	cmp	r3, #234	@ 0xea
 8006d32:	d812      	bhi.n	8006d5a <state_machine+0x9f2>
		{
			state_change_done = 0;
 8006d34:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <state_machine+0x9fc>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d6c <state_machine+0xa04>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
		}


		break;
 8006d40:	e00b      	b.n	8006d5a <state_machine+0x9f2>

	default:
		break;
 8006d42:	bf00      	nop
 8006d44:	e00a      	b.n	8006d5c <state_machine+0x9f4>
		break;
 8006d46:	bf00      	nop
 8006d48:	e008      	b.n	8006d5c <state_machine+0x9f4>
		break;
 8006d4a:	bf00      	nop
 8006d4c:	e006      	b.n	8006d5c <state_machine+0x9f4>
		break;
 8006d4e:	bf00      	nop
 8006d50:	e004      	b.n	8006d5c <state_machine+0x9f4>
		break;
 8006d52:	bf00      	nop
 8006d54:	e002      	b.n	8006d5c <state_machine+0x9f4>
		break;
 8006d56:	bf00      	nop
 8006d58:	e000      	b.n	8006d5c <state_machine+0x9f4>
		break;
 8006d5a:	bf00      	nop
	}
}
 8006d5c:	bf00      	nop
 8006d5e:	3744      	adds	r7, #68	@ 0x44
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d64:	20007011 	.word	0x20007011
 8006d68:	20007018 	.word	0x20007018
 8006d6c:	20007010 	.word	0x20007010

08006d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d76:	2300      	movs	r3, #0
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	4b10      	ldr	r3, [pc, #64]	@ (8006dbc <HAL_MspInit+0x4c>)
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8006dbc <HAL_MspInit+0x4c>)
 8006d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <HAL_MspInit+0x4c>)
 8006d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d8e:	607b      	str	r3, [r7, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	4b09      	ldr	r3, [pc, #36]	@ (8006dbc <HAL_MspInit+0x4c>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9a:	4a08      	ldr	r2, [pc, #32]	@ (8006dbc <HAL_MspInit+0x4c>)
 8006d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006da2:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <HAL_MspInit+0x4c>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40023800 	.word	0x40023800

08006dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <NMI_Handler+0x4>

08006dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <HardFault_Handler+0x4>

08006dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006dd4:	bf00      	nop
 8006dd6:	e7fd      	b.n	8006dd4 <MemManage_Handler+0x4>

08006dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <BusFault_Handler+0x4>

08006de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <UsageFault_Handler+0x4>

08006de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006dec:	bf00      	nop
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006df6:	b480      	push	{r7}
 8006df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006dfa:	bf00      	nop
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e16:	f000 fd23 	bl	8007860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e1a:	bf00      	nop
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006e24:	4802      	ldr	r0, [pc, #8]	@ (8006e30 <DMA1_Stream4_IRQHandler+0x10>)
 8006e26:	f000 ff41 	bl	8007cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20006fb0 	.word	0x20006fb0

08006e34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006e38:	4802      	ldr	r0, [pc, #8]	@ (8006e44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006e3a:	f005 fc56 	bl	800c6ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200070c0 	.word	0x200070c0

08006e48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006e4c:	4802      	ldr	r0, [pc, #8]	@ (8006e58 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006e4e:	f005 fc4c 	bl	800c6ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006e52:	bf00      	nop
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20007108 	.word	0x20007108

08006e5c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006e60:	4802      	ldr	r0, [pc, #8]	@ (8006e6c <SPI2_IRQHandler+0x10>)
 8006e62:	f005 f8e5 	bl	800c030 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006e66:	bf00      	nop
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20006f58 	.word	0x20006f58

08006e70 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8006e74:	4802      	ldr	r0, [pc, #8]	@ (8006e80 <I2C3_EV_IRQHandler+0x10>)
 8006e76:	f001 ff95 	bl	8008da4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20006eac 	.word	0x20006eac

08006e84 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006e88:	4802      	ldr	r0, [pc, #8]	@ (8006e94 <I2C3_ER_IRQHandler+0x10>)
 8006e8a:	f002 f8fc 	bl	8009086 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20006eac 	.word	0x20006eac

08006e98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006eb0:	4b06      	ldr	r3, [pc, #24]	@ (8006ecc <SystemInit+0x20>)
 8006eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb6:	4a05      	ldr	r2, [pc, #20]	@ (8006ecc <SystemInit+0x20>)
 8006eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ec0:	bf00      	nop
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	e000ed00 	.word	0xe000ed00

08006ed0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08a      	sub	sp, #40	@ 0x28
 8006ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ed6:	f107 0320 	add.w	r3, r7, #32
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ee0:	1d3b      	adds	r3, r7, #4
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	605a      	str	r2, [r3, #4]
 8006ee8:	609a      	str	r2, [r3, #8]
 8006eea:	60da      	str	r2, [r3, #12]
 8006eec:	611a      	str	r2, [r3, #16]
 8006eee:	615a      	str	r2, [r3, #20]
 8006ef0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006ef2:	4b22      	ldr	r3, [pc, #136]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006ef4:	4a22      	ldr	r2, [pc, #136]	@ (8006f80 <MX_TIM3_Init+0xb0>)
 8006ef6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006ef8:	4b20      	ldr	r3, [pc, #128]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006efe:	4b1f      	ldr	r3, [pc, #124]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006f04:	4b1d      	ldr	r3, [pc, #116]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006f06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f12:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006f18:	4818      	ldr	r0, [pc, #96]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006f1a:	f005 fb97 	bl	800c64c <HAL_TIM_PWM_Init>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006f24:	f7ff f8f6 	bl	8006114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006f30:	f107 0320 	add.w	r3, r7, #32
 8006f34:	4619      	mov	r1, r3
 8006f36:	4811      	ldr	r0, [pc, #68]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006f38:	f006 f81a 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006f42:	f7ff f8e7 	bl	8006114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f46:	2360      	movs	r3, #96	@ 0x60
 8006f48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006f56:	1d3b      	adds	r3, r7, #4
 8006f58:	2208      	movs	r2, #8
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4807      	ldr	r0, [pc, #28]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006f5e:	f005 fccd 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006f68:	f7ff f8d4 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006f6c:	4803      	ldr	r0, [pc, #12]	@ (8006f7c <MX_TIM3_Init+0xac>)
 8006f6e:	f000 f8b9 	bl	80070e4 <HAL_TIM_MspPostInit>

}
 8006f72:	bf00      	nop
 8006f74:	3728      	adds	r7, #40	@ 0x28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20007078 	.word	0x20007078
 8006f80:	40000400 	.word	0x40000400

08006f84 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006f88:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc4 <MX_TIM10_Init+0x40>)
 8006f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8006fc8 <MX_TIM10_Init+0x44>)
 8006f8c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc4 <MX_TIM10_Init+0x40>)
 8006f90:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006f94:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc4 <MX_TIM10_Init+0x40>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <MX_TIM10_Init+0x40>)
 8006f9e:	f240 2257 	movw	r2, #599	@ 0x257
 8006fa2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fa4:	4b07      	ldr	r3, [pc, #28]	@ (8006fc4 <MX_TIM10_Init+0x40>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006faa:	4b06      	ldr	r3, [pc, #24]	@ (8006fc4 <MX_TIM10_Init+0x40>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006fb0:	4804      	ldr	r0, [pc, #16]	@ (8006fc4 <MX_TIM10_Init+0x40>)
 8006fb2:	f005 fa8b 	bl	800c4cc <HAL_TIM_Base_Init>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006fbc:	f7ff f8aa 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006fc0:	bf00      	nop
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	200070c0 	.word	0x200070c0
 8006fc8:	40014400 	.word	0x40014400

08006fcc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800700c <MX_TIM11_Init+0x40>)
 8006fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8007010 <MX_TIM11_Init+0x44>)
 8006fd4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800700c <MX_TIM11_Init+0x40>)
 8006fd8:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006fdc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fde:	4b0b      	ldr	r3, [pc, #44]	@ (800700c <MX_TIM11_Init+0x40>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8006fe4:	4b09      	ldr	r3, [pc, #36]	@ (800700c <MX_TIM11_Init+0x40>)
 8006fe6:	f240 5213 	movw	r2, #1299	@ 0x513
 8006fea:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fec:	4b07      	ldr	r3, [pc, #28]	@ (800700c <MX_TIM11_Init+0x40>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ff2:	4b06      	ldr	r3, [pc, #24]	@ (800700c <MX_TIM11_Init+0x40>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006ff8:	4804      	ldr	r0, [pc, #16]	@ (800700c <MX_TIM11_Init+0x40>)
 8006ffa:	f005 fa67 	bl	800c4cc <HAL_TIM_Base_Init>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8007004:	f7ff f886 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8007008:	bf00      	nop
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20007108 	.word	0x20007108
 8007010:	40014800 	.word	0x40014800

08007014 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a0b      	ldr	r2, [pc, #44]	@ (8007050 <HAL_TIM_PWM_MspInit+0x3c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d10d      	bne.n	8007042 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	4b0a      	ldr	r3, [pc, #40]	@ (8007054 <HAL_TIM_PWM_MspInit+0x40>)
 800702c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702e:	4a09      	ldr	r2, [pc, #36]	@ (8007054 <HAL_TIM_PWM_MspInit+0x40>)
 8007030:	f043 0302 	orr.w	r3, r3, #2
 8007034:	6413      	str	r3, [r2, #64]	@ 0x40
 8007036:	4b07      	ldr	r3, [pc, #28]	@ (8007054 <HAL_TIM_PWM_MspInit+0x40>)
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40000400 	.word	0x40000400
 8007054:	40023800 	.word	0x40023800

08007058 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1c      	ldr	r2, [pc, #112]	@ (80070d8 <HAL_TIM_Base_MspInit+0x80>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d116      	bne.n	8007098 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	4b1b      	ldr	r3, [pc, #108]	@ (80070dc <HAL_TIM_Base_MspInit+0x84>)
 8007070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007072:	4a1a      	ldr	r2, [pc, #104]	@ (80070dc <HAL_TIM_Base_MspInit+0x84>)
 8007074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007078:	6453      	str	r3, [r2, #68]	@ 0x44
 800707a:	4b18      	ldr	r3, [pc, #96]	@ (80070dc <HAL_TIM_Base_MspInit+0x84>)
 800707c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	2019      	movs	r0, #25
 800708c:	f000 fd07 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007090:	2019      	movs	r0, #25
 8007092:	f000 fd20 	bl	8007ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8007096:	e01a      	b.n	80070ce <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a10      	ldr	r2, [pc, #64]	@ (80070e0 <HAL_TIM_Base_MspInit+0x88>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d115      	bne.n	80070ce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	4b0d      	ldr	r3, [pc, #52]	@ (80070dc <HAL_TIM_Base_MspInit+0x84>)
 80070a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070aa:	4a0c      	ldr	r2, [pc, #48]	@ (80070dc <HAL_TIM_Base_MspInit+0x84>)
 80070ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80070b2:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <HAL_TIM_Base_MspInit+0x84>)
 80070b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070ba:	60bb      	str	r3, [r7, #8]
 80070bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80070be:	2200      	movs	r2, #0
 80070c0:	2100      	movs	r1, #0
 80070c2:	201a      	movs	r0, #26
 80070c4:	f000 fceb 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80070c8:	201a      	movs	r0, #26
 80070ca:	f000 fd04 	bl	8007ad6 <HAL_NVIC_EnableIRQ>
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	40014400 	.word	0x40014400
 80070dc:	40023800 	.word	0x40023800
 80070e0:	40014800 	.word	0x40014800

080070e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ec:	f107 030c 	add.w	r3, r7, #12
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	609a      	str	r2, [r3, #8]
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a12      	ldr	r2, [pc, #72]	@ (800714c <HAL_TIM_MspPostInit+0x68>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d11e      	bne.n	8007144 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007106:	2300      	movs	r3, #0
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	4b11      	ldr	r3, [pc, #68]	@ (8007150 <HAL_TIM_MspPostInit+0x6c>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	4a10      	ldr	r2, [pc, #64]	@ (8007150 <HAL_TIM_MspPostInit+0x6c>)
 8007110:	f043 0304 	orr.w	r3, r3, #4
 8007114:	6313      	str	r3, [r2, #48]	@ 0x30
 8007116:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <HAL_TIM_MspPostInit+0x6c>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8007122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007128:	2302      	movs	r3, #2
 800712a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007130:	2300      	movs	r3, #0
 8007132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007134:	2302      	movs	r3, #2
 8007136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	4619      	mov	r1, r3
 800713e:	4805      	ldr	r0, [pc, #20]	@ (8007154 <HAL_TIM_MspPostInit+0x70>)
 8007140:	f000 fffe 	bl	8008140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007144:	bf00      	nop
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40000400 	.word	0x40000400
 8007150:	40023800 	.word	0x40023800
 8007154:	40020800 	.word	0x40020800

08007158 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 800715e:	4b24      	ldr	r3, [pc, #144]	@ (80071f0 <Touch_read+0x98>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2000      	movs	r0, #0
 8007164:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8007166:	4b22      	ldr	r3, [pc, #136]	@ (80071f0 <Touch_read+0x98>)
 8007168:	7c1b      	ldrb	r3, [r3, #16]
 800716a:	b25b      	sxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	da2d      	bge.n	80071cc <Touch_read+0x74>
	{
		xtemp = TP_Read_XOY(0xD0);
 8007170:	20d0      	movs	r0, #208	@ 0xd0
 8007172:	f000 f8e5 	bl	8007340 <TP_Read_XOY>
 8007176:	4603      	mov	r3, r0
 8007178:	461a      	mov	r2, r3
 800717a:	4b1e      	ldr	r3, [pc, #120]	@ (80071f4 <Touch_read+0x9c>)
 800717c:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 800717e:	2090      	movs	r0, #144	@ 0x90
 8007180:	f000 f8de 	bl	8007340 <TP_Read_XOY>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	4b1b      	ldr	r3, [pc, #108]	@ (80071f8 <Touch_read+0xa0>)
 800718a:	801a      	strh	r2, [r3, #0]
			touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
			touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
		}
		else
		{
			touch_coordinates.x = 320 * (ytemp - 350) / (3900-350);
 800718c:	4b1a      	ldr	r3, [pc, #104]	@ (80071f8 <Touch_read+0xa0>)
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	f5a3 72af 	sub.w	r2, r3, #350	@ 0x15e
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	019b      	lsls	r3, r3, #6
 800719c:	4a17      	ldr	r2, [pc, #92]	@ (80071fc <Touch_read+0xa4>)
 800719e:	fb82 1203 	smull	r1, r2, r2, r3
 80071a2:	441a      	add	r2, r3
 80071a4:	12d2      	asrs	r2, r2, #11
 80071a6:	17db      	asrs	r3, r3, #31
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	803b      	strh	r3, [r7, #0]
			touch_coordinates.y = 230 * (xtemp - 240) / (3800-230);
 80071ae:	4b11      	ldr	r3, [pc, #68]	@ (80071f4 <Touch_read+0x9c>)
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	3bf0      	subs	r3, #240	@ 0xf0
 80071b4:	22e6      	movs	r2, #230	@ 0xe6
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	4a11      	ldr	r2, [pc, #68]	@ (8007200 <Touch_read+0xa8>)
 80071bc:	fb82 1203 	smull	r1, r2, r2, r3
 80071c0:	1252      	asrs	r2, r2, #9
 80071c2:	17db      	asrs	r3, r3, #31
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	807b      	strh	r3, [r7, #2]
 80071ca:	e003      	b.n	80071d4 <Touch_read+0x7c>

	}

	else
	{
		touch_coordinates.x = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	607b      	str	r3, [r7, #4]
 80071d8:	2300      	movs	r3, #0
 80071da:	88ba      	ldrh	r2, [r7, #4]
 80071dc:	f362 030f 	bfi	r3, r2, #0, #16
 80071e0:	88fa      	ldrh	r2, [r7, #6]
 80071e2:	f362 431f 	bfi	r3, r2, #16, #16
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000158 	.word	0x20000158
 80071f4:	20007150 	.word	0x20007150
 80071f8:	20007152 	.word	0x20007152
 80071fc:	93afcf8b 	.word	0x93afcf8b
 8007200:	24b70025 	.word	0x24b70025

08007204 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8007212:	2300      	movs	r3, #0
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	e021      	b.n	800725c <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8007218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da05      	bge.n	800722c <TP_Write_Byte+0x28>
			T_DIN_ON;
 8007220:	2201      	movs	r2, #1
 8007222:	2120      	movs	r1, #32
 8007224:	4811      	ldr	r0, [pc, #68]	@ (800726c <TP_Write_Byte+0x68>)
 8007226:	f001 f93f 	bl	80084a8 <HAL_GPIO_WritePin>
 800722a:	e004      	b.n	8007236 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 800722c:	2200      	movs	r2, #0
 800722e:	2120      	movs	r1, #32
 8007230:	480e      	ldr	r0, [pc, #56]	@ (800726c <TP_Write_Byte+0x68>)
 8007232:	f001 f939 	bl	80084a8 <HAL_GPIO_WritePin>

		num <<= 1;
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 800723c:	2200      	movs	r2, #0
 800723e:	2108      	movs	r1, #8
 8007240:	480a      	ldr	r0, [pc, #40]	@ (800726c <TP_Write_Byte+0x68>)
 8007242:	f001 f931 	bl	80084a8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8007246:	2001      	movs	r0, #1
 8007248:	f000 fb2a 	bl	80078a0 <HAL_Delay>
		T_CLK_ON;
 800724c:	2201      	movs	r2, #1
 800724e:	2108      	movs	r1, #8
 8007250:	4806      	ldr	r0, [pc, #24]	@ (800726c <TP_Write_Byte+0x68>)
 8007252:	f001 f929 	bl	80084a8 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	3301      	adds	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	2b07      	cmp	r3, #7
 8007260:	d9da      	bls.n	8007218 <TP_Write_Byte+0x14>
	}
}
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40020400 	.word	0x40020400

08007270 <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8007282:	2200      	movs	r2, #0
 8007284:	2108      	movs	r1, #8
 8007286:	482c      	ldr	r0, [pc, #176]	@ (8007338 <TP_Read_AD+0xc8>)
 8007288:	f001 f90e 	bl	80084a8 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 800728c:	2200      	movs	r2, #0
 800728e:	2120      	movs	r1, #32
 8007290:	4829      	ldr	r0, [pc, #164]	@ (8007338 <TP_Read_AD+0xc8>)
 8007292:	f001 f909 	bl	80084a8 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8007296:	2200      	movs	r2, #0
 8007298:	2180      	movs	r1, #128	@ 0x80
 800729a:	4828      	ldr	r0, [pc, #160]	@ (800733c <TP_Read_AD+0xcc>)
 800729c:	f001 f904 	bl	80084a8 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff ffae 	bl	8007204 <TP_Write_Byte>
	HAL_Delay(1);
 80072a8:	2001      	movs	r0, #1
 80072aa:	f000 faf9 	bl	80078a0 <HAL_Delay>
	T_CLK_OFF;
 80072ae:	2200      	movs	r2, #0
 80072b0:	2108      	movs	r1, #8
 80072b2:	4821      	ldr	r0, [pc, #132]	@ (8007338 <TP_Read_AD+0xc8>)
 80072b4:	f001 f8f8 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80072b8:	2001      	movs	r0, #1
 80072ba:	f000 faf1 	bl	80078a0 <HAL_Delay>
	T_CLK_ON;
 80072be:	2201      	movs	r2, #1
 80072c0:	2108      	movs	r1, #8
 80072c2:	481d      	ldr	r0, [pc, #116]	@ (8007338 <TP_Read_AD+0xc8>)
 80072c4:	f001 f8f0 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80072c8:	2001      	movs	r0, #1
 80072ca:	f000 fae9 	bl	80078a0 <HAL_Delay>
	T_CLK_OFF;
 80072ce:	2200      	movs	r2, #0
 80072d0:	2108      	movs	r1, #8
 80072d2:	4819      	ldr	r0, [pc, #100]	@ (8007338 <TP_Read_AD+0xc8>)
 80072d4:	f001 f8e8 	bl	80084a8 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
 80072dc:	e01c      	b.n	8007318 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 80072de:	89bb      	ldrh	r3, [r7, #12]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 80072e4:	2200      	movs	r2, #0
 80072e6:	2108      	movs	r1, #8
 80072e8:	4813      	ldr	r0, [pc, #76]	@ (8007338 <TP_Read_AD+0xc8>)
 80072ea:	f001 f8dd 	bl	80084a8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80072ee:	2001      	movs	r0, #1
 80072f0:	f000 fad6 	bl	80078a0 <HAL_Delay>
		T_CLK_ON;
 80072f4:	2201      	movs	r2, #1
 80072f6:	2108      	movs	r1, #8
 80072f8:	480f      	ldr	r0, [pc, #60]	@ (8007338 <TP_Read_AD+0xc8>)
 80072fa:	f001 f8d5 	bl	80084a8 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 80072fe:	2110      	movs	r1, #16
 8007300:	480d      	ldr	r0, [pc, #52]	@ (8007338 <TP_Read_AD+0xc8>)
 8007302:	f001 f8b9 	bl	8008478 <HAL_GPIO_ReadPin>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <TP_Read_AD+0xa2>
 800730c:	89bb      	ldrh	r3, [r7, #12]
 800730e:	3301      	adds	r3, #1
 8007310:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	3301      	adds	r3, #1
 8007316:	73fb      	strb	r3, [r7, #15]
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b0f      	cmp	r3, #15
 800731c:	d9df      	bls.n	80072de <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 800731e:	89bb      	ldrh	r3, [r7, #12]
 8007320:	091b      	lsrs	r3, r3, #4
 8007322:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8007324:	2201      	movs	r2, #1
 8007326:	2180      	movs	r1, #128	@ 0x80
 8007328:	4804      	ldr	r0, [pc, #16]	@ (800733c <TP_Read_AD+0xcc>)
 800732a:	f001 f8bd 	bl	80084a8 <HAL_GPIO_WritePin>
	return(Num);
 800732e:	89bb      	ldrh	r3, [r7, #12]

}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40020400 	.word	0x40020400
 800733c:	40020c00 	.word	0x40020c00

08007340 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ff8f 	bl	8007270 <TP_Read_AD>
}
 8007352:	bf00      	nop
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8007366:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <TP_Read_XY+0x3c>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ffe8 	bl	8007340 <TP_Read_XOY>
 8007370:	4603      	mov	r3, r0
 8007372:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8007374:	4b09      	ldr	r3, [pc, #36]	@ (800739c <TP_Read_XY+0x40>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff ffe1 	bl	8007340 <TP_Read_XOY>
 800737e:	4603      	mov	r3, r0
 8007380:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	89fa      	ldrh	r2, [r7, #14]
 8007386:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	89ba      	ldrh	r2, [r7, #12]
 800738c:	801a      	strh	r2, [r3, #0]
	return 1;
 800738e:	2301      	movs	r3, #1
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	2000017c 	.word	0x2000017c
 800739c:	2000017d 	.word	0x2000017d

080073a0 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 80073aa:	f107 0212 	add.w	r2, r7, #18
 80073ae:	f107 0314 	add.w	r3, r7, #20
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff ffd1 	bl	800735c <TP_Read_XY>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <TP_Read_XY2+0x28>
    	return(0);
 80073c4:	2300      	movs	r3, #0
 80073c6:	e049      	b.n	800745c <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 80073c8:	f107 020e 	add.w	r2, r7, #14
 80073cc:	f107 0310 	add.w	r3, r7, #16
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff ffc2 	bl	800735c <TP_Read_XY>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <TP_Read_XY2+0x46>
    	return(0);
 80073e2:	2300      	movs	r3, #0
 80073e4:	e03a      	b.n	800745c <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 80073e6:	8a3a      	ldrh	r2, [r7, #16]
 80073e8:	8abb      	ldrh	r3, [r7, #20]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d804      	bhi.n	80073f8 <TP_Read_XY2+0x58>
 80073ee:	8a3b      	ldrh	r3, [r7, #16]
 80073f0:	3331      	adds	r3, #49	@ 0x31
 80073f2:	8aba      	ldrh	r2, [r7, #20]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	da08      	bge.n	800740a <TP_Read_XY2+0x6a>
 80073f8:	8aba      	ldrh	r2, [r7, #20]
 80073fa:	8a3b      	ldrh	r3, [r7, #16]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d82c      	bhi.n	800745a <TP_Read_XY2+0xba>
 8007400:	8abb      	ldrh	r3, [r7, #20]
 8007402:	3331      	adds	r3, #49	@ 0x31
 8007404:	8a3a      	ldrh	r2, [r7, #16]
 8007406:	4293      	cmp	r3, r2
 8007408:	db27      	blt.n	800745a <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 800740a:	89fa      	ldrh	r2, [r7, #14]
 800740c:	8a7b      	ldrh	r3, [r7, #18]
 800740e:	429a      	cmp	r2, r3
 8007410:	d804      	bhi.n	800741c <TP_Read_XY2+0x7c>
 8007412:	89fb      	ldrh	r3, [r7, #14]
 8007414:	3331      	adds	r3, #49	@ 0x31
 8007416:	8a7a      	ldrh	r2, [r7, #18]
 8007418:	4293      	cmp	r3, r2
 800741a:	da08      	bge.n	800742e <TP_Read_XY2+0x8e>
 800741c:	8a7a      	ldrh	r2, [r7, #18]
 800741e:	89fb      	ldrh	r3, [r7, #14]
 8007420:	429a      	cmp	r2, r3
 8007422:	d81a      	bhi.n	800745a <TP_Read_XY2+0xba>
 8007424:	8a7b      	ldrh	r3, [r7, #18]
 8007426:	3331      	adds	r3, #49	@ 0x31
 8007428:	89fa      	ldrh	r2, [r7, #14]
 800742a:	4293      	cmp	r3, r2
 800742c:	db15      	blt.n	800745a <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 800742e:	8abb      	ldrh	r3, [r7, #20]
 8007430:	461a      	mov	r2, r3
 8007432:	8a3b      	ldrh	r3, [r7, #16]
 8007434:	4413      	add	r3, r2
 8007436:	0fda      	lsrs	r2, r3, #31
 8007438:	4413      	add	r3, r2
 800743a:	105b      	asrs	r3, r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8007442:	8a7b      	ldrh	r3, [r7, #18]
 8007444:	461a      	mov	r2, r3
 8007446:	89fb      	ldrh	r3, [r7, #14]
 8007448:	4413      	add	r3, r2
 800744a:	0fda      	lsrs	r2, r3, #31
 800744c:	4413      	add	r3, r2
 800744e:	105b      	asrs	r3, r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	801a      	strh	r2, [r3, #0]
        return 1;
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 800746e:	2140      	movs	r1, #64	@ 0x40
 8007470:	483f      	ldr	r0, [pc, #252]	@ (8007570 <TP_Scan+0x10c>)
 8007472:	f001 f801 	bl	8008478 <HAL_GPIO_ReadPin>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d155      	bne.n	8007528 <TP_Scan+0xc4>
	{
		if(tp)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8007482:	493c      	ldr	r1, [pc, #240]	@ (8007574 <TP_Scan+0x110>)
 8007484:	483c      	ldr	r0, [pc, #240]	@ (8007578 <TP_Scan+0x114>)
 8007486:	f7ff ff8b 	bl	80073a0 <TP_Read_XY2>
 800748a:	e03c      	b.n	8007506 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 800748c:	4939      	ldr	r1, [pc, #228]	@ (8007574 <TP_Scan+0x110>)
 800748e:	483a      	ldr	r0, [pc, #232]	@ (8007578 <TP_Scan+0x114>)
 8007490:	f7ff ff86 	bl	80073a0 <TP_Read_XY2>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d035      	beq.n	8007506 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 800749a:	4b38      	ldr	r3, [pc, #224]	@ (800757c <TP_Scan+0x118>)
 800749c:	ed93 7a05 	vldr	s14, [r3, #20]
 80074a0:	4b36      	ldr	r3, [pc, #216]	@ (800757c <TP_Scan+0x118>)
 80074a2:	899b      	ldrh	r3, [r3, #12]
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074b0:	4b32      	ldr	r3, [pc, #200]	@ (800757c <TP_Scan+0x118>)
 80074b2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c6:	ee17 3a90 	vmov	r3, s15
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	4b2b      	ldr	r3, [pc, #172]	@ (800757c <TP_Scan+0x118>)
 80074ce:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 80074d0:	4b2a      	ldr	r3, [pc, #168]	@ (800757c <TP_Scan+0x118>)
 80074d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80074d6:	4b29      	ldr	r3, [pc, #164]	@ (800757c <TP_Scan+0x118>)
 80074d8:	89db      	ldrh	r3, [r3, #14]
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074e6:	4b25      	ldr	r3, [pc, #148]	@ (800757c <TP_Scan+0x118>)
 80074e8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fc:	ee17 3a90 	vmov	r3, s15
 8007500:	b29a      	uxth	r2, r3
 8007502:	4b1e      	ldr	r3, [pc, #120]	@ (800757c <TP_Scan+0x118>)
 8007504:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8007506:	4b1d      	ldr	r3, [pc, #116]	@ (800757c <TP_Scan+0x118>)
 8007508:	7c1b      	ldrb	r3, [r3, #16]
 800750a:	b25b      	sxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	db26      	blt.n	800755e <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8007510:	4b1a      	ldr	r3, [pc, #104]	@ (800757c <TP_Scan+0x118>)
 8007512:	22c0      	movs	r2, #192	@ 0xc0
 8007514:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8007516:	4b19      	ldr	r3, [pc, #100]	@ (800757c <TP_Scan+0x118>)
 8007518:	899a      	ldrh	r2, [r3, #12]
 800751a:	4b18      	ldr	r3, [pc, #96]	@ (800757c <TP_Scan+0x118>)
 800751c:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 800751e:	4b17      	ldr	r3, [pc, #92]	@ (800757c <TP_Scan+0x118>)
 8007520:	89da      	ldrh	r2, [r3, #14]
 8007522:	4b16      	ldr	r3, [pc, #88]	@ (800757c <TP_Scan+0x118>)
 8007524:	815a      	strh	r2, [r3, #10]
 8007526:	e01a      	b.n	800755e <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8007528:	4b14      	ldr	r3, [pc, #80]	@ (800757c <TP_Scan+0x118>)
 800752a:	7c1b      	ldrb	r3, [r3, #16]
 800752c:	b25b      	sxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	da07      	bge.n	8007542 <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 8007532:	4b12      	ldr	r3, [pc, #72]	@ (800757c <TP_Scan+0x118>)
 8007534:	7c1b      	ldrb	r3, [r3, #16]
 8007536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800753a:	b2da      	uxtb	r2, r3
 800753c:	4b0f      	ldr	r3, [pc, #60]	@ (800757c <TP_Scan+0x118>)
 800753e:	741a      	strb	r2, [r3, #16]
 8007540:	e00d      	b.n	800755e <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 8007542:	4b0e      	ldr	r3, [pc, #56]	@ (800757c <TP_Scan+0x118>)
 8007544:	2200      	movs	r2, #0
 8007546:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8007548:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <TP_Scan+0x118>)
 800754a:	2200      	movs	r2, #0
 800754c:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 800754e:	4b0b      	ldr	r3, [pc, #44]	@ (800757c <TP_Scan+0x118>)
 8007550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007554:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 8007556:	4b09      	ldr	r3, [pc, #36]	@ (800757c <TP_Scan+0x118>)
 8007558:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800755c:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 800755e:	4b07      	ldr	r3, [pc, #28]	@ (800757c <TP_Scan+0x118>)
 8007560:	7c1b      	ldrb	r3, [r3, #16]
 8007562:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007566:	b2db      	uxtb	r3, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40020c00 	.word	0x40020c00
 8007574:	20000166 	.word	0x20000166
 8007578:	20000164 	.word	0x20000164
 800757c:	20000158 	.word	0x20000158

08007580 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007584:	4b11      	ldr	r3, [pc, #68]	@ (80075cc <MX_UART5_Init+0x4c>)
 8007586:	4a12      	ldr	r2, [pc, #72]	@ (80075d0 <MX_UART5_Init+0x50>)
 8007588:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800758a:	4b10      	ldr	r3, [pc, #64]	@ (80075cc <MX_UART5_Init+0x4c>)
 800758c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007590:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007592:	4b0e      	ldr	r3, [pc, #56]	@ (80075cc <MX_UART5_Init+0x4c>)
 8007594:	2200      	movs	r2, #0
 8007596:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007598:	4b0c      	ldr	r3, [pc, #48]	@ (80075cc <MX_UART5_Init+0x4c>)
 800759a:	2200      	movs	r2, #0
 800759c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800759e:	4b0b      	ldr	r3, [pc, #44]	@ (80075cc <MX_UART5_Init+0x4c>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80075a4:	4b09      	ldr	r3, [pc, #36]	@ (80075cc <MX_UART5_Init+0x4c>)
 80075a6:	220c      	movs	r2, #12
 80075a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075aa:	4b08      	ldr	r3, [pc, #32]	@ (80075cc <MX_UART5_Init+0x4c>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80075b0:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <MX_UART5_Init+0x4c>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80075b6:	4805      	ldr	r0, [pc, #20]	@ (80075cc <MX_UART5_Init+0x4c>)
 80075b8:	f005 fd6a 	bl	800d090 <HAL_UART_Init>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80075c2:	f7fe fda7 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80075c6:	bf00      	nop
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	20007154 	.word	0x20007154
 80075d0:	40005000 	.word	0x40005000

080075d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80075d8:	4b11      	ldr	r3, [pc, #68]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 80075da:	4a12      	ldr	r2, [pc, #72]	@ (8007624 <MX_USART3_UART_Init+0x50>)
 80075dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80075de:	4b10      	ldr	r3, [pc, #64]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 80075e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80075e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80075e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80075ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80075f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80075f8:	4b09      	ldr	r3, [pc, #36]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 80075fa:	220c      	movs	r2, #12
 80075fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075fe:	4b08      	ldr	r3, [pc, #32]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 8007600:	2200      	movs	r2, #0
 8007602:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007604:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 8007606:	2200      	movs	r2, #0
 8007608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800760a:	4805      	ldr	r0, [pc, #20]	@ (8007620 <MX_USART3_UART_Init+0x4c>)
 800760c:	f005 fd40 	bl	800d090 <HAL_UART_Init>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007616:	f7fe fd7d 	bl	8006114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800761a:	bf00      	nop
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20007198 	.word	0x20007198
 8007624:	40004800 	.word	0x40004800

08007628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08c      	sub	sp, #48	@ 0x30
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007630:	f107 031c 	add.w	r3, r7, #28
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	605a      	str	r2, [r3, #4]
 800763a:	609a      	str	r2, [r3, #8]
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a42      	ldr	r2, [pc, #264]	@ (8007750 <HAL_UART_MspInit+0x128>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d14b      	bne.n	80076e2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800764a:	2300      	movs	r3, #0
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	4b41      	ldr	r3, [pc, #260]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	4a40      	ldr	r2, [pc, #256]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 8007654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007658:	6413      	str	r3, [r2, #64]	@ 0x40
 800765a:	4b3e      	ldr	r3, [pc, #248]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	4b3a      	ldr	r3, [pc, #232]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	4a39      	ldr	r2, [pc, #228]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 8007670:	f043 0304 	orr.w	r3, r3, #4
 8007674:	6313      	str	r3, [r2, #48]	@ 0x30
 8007676:	4b37      	ldr	r3, [pc, #220]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007682:	2300      	movs	r3, #0
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	4b33      	ldr	r3, [pc, #204]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	4a32      	ldr	r2, [pc, #200]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 800768c:	f043 0308 	orr.w	r3, r3, #8
 8007690:	6313      	str	r3, [r2, #48]	@ 0x30
 8007692:	4b30      	ldr	r3, [pc, #192]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800769e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a4:	2302      	movs	r3, #2
 80076a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076ac:	2303      	movs	r3, #3
 80076ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80076b0:	2308      	movs	r3, #8
 80076b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076b4:	f107 031c 	add.w	r3, r7, #28
 80076b8:	4619      	mov	r1, r3
 80076ba:	4827      	ldr	r0, [pc, #156]	@ (8007758 <HAL_UART_MspInit+0x130>)
 80076bc:	f000 fd40 	bl	8008140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80076c0:	2304      	movs	r3, #4
 80076c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c4:	2302      	movs	r3, #2
 80076c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076cc:	2303      	movs	r3, #3
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80076d0:	2308      	movs	r3, #8
 80076d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076d4:	f107 031c 	add.w	r3, r7, #28
 80076d8:	4619      	mov	r1, r3
 80076da:	4820      	ldr	r0, [pc, #128]	@ (800775c <HAL_UART_MspInit+0x134>)
 80076dc:	f000 fd30 	bl	8008140 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80076e0:	e031      	b.n	8007746 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007760 <HAL_UART_MspInit+0x138>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d12c      	bne.n	8007746 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	4b18      	ldr	r3, [pc, #96]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 80076f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f4:	4a17      	ldr	r2, [pc, #92]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 80076f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80076fc:	4b15      	ldr	r3, [pc, #84]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 80076fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007700:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007708:	2300      	movs	r3, #0
 800770a:	60bb      	str	r3, [r7, #8]
 800770c:	4b11      	ldr	r3, [pc, #68]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 800770e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007710:	4a10      	ldr	r2, [pc, #64]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 8007712:	f043 0302 	orr.w	r3, r3, #2
 8007716:	6313      	str	r3, [r2, #48]	@ 0x30
 8007718:	4b0e      	ldr	r3, [pc, #56]	@ (8007754 <HAL_UART_MspInit+0x12c>)
 800771a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	60bb      	str	r3, [r7, #8]
 8007722:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8007724:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800772a:	2302      	movs	r3, #2
 800772c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772e:	2300      	movs	r3, #0
 8007730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007732:	2303      	movs	r3, #3
 8007734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007736:	2307      	movs	r3, #7
 8007738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800773a:	f107 031c 	add.w	r3, r7, #28
 800773e:	4619      	mov	r1, r3
 8007740:	4808      	ldr	r0, [pc, #32]	@ (8007764 <HAL_UART_MspInit+0x13c>)
 8007742:	f000 fcfd 	bl	8008140 <HAL_GPIO_Init>
}
 8007746:	bf00      	nop
 8007748:	3730      	adds	r7, #48	@ 0x30
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40005000 	.word	0x40005000
 8007754:	40023800 	.word	0x40023800
 8007758:	40020800 	.word	0x40020800
 800775c:	40020c00 	.word	0x40020c00
 8007760:	40004800 	.word	0x40004800
 8007764:	40020400 	.word	0x40020400

08007768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80077a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800776c:	480d      	ldr	r0, [pc, #52]	@ (80077a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800776e:	490e      	ldr	r1, [pc, #56]	@ (80077a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007770:	4a0e      	ldr	r2, [pc, #56]	@ (80077ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007774:	e002      	b.n	800777c <LoopCopyDataInit>

08007776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800777a:	3304      	adds	r3, #4

0800777c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800777c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800777e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007780:	d3f9      	bcc.n	8007776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007782:	4a0b      	ldr	r2, [pc, #44]	@ (80077b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007784:	4c0b      	ldr	r4, [pc, #44]	@ (80077b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007788:	e001      	b.n	800778e <LoopFillZerobss>

0800778a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800778a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800778c:	3204      	adds	r2, #4

0800778e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800778e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007790:	d3fb      	bcc.n	800778a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007792:	f7ff fb8b 	bl	8006eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007796:	f006 f8a1 	bl	800d8dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800779a:	f7fe fc1d 	bl	8005fd8 <main>
  bx  lr    
 800779e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80077a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80077a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80077a8:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80077ac:	0803680c 	.word	0x0803680c
  ldr r2, =_sbss
 80077b0:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80077b4:	200071e0 	.word	0x200071e0

080077b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80077b8:	e7fe      	b.n	80077b8 <ADC_IRQHandler>
	...

080077bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80077c0:	4b0e      	ldr	r3, [pc, #56]	@ (80077fc <HAL_Init+0x40>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a0d      	ldr	r2, [pc, #52]	@ (80077fc <HAL_Init+0x40>)
 80077c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80077ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80077cc:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <HAL_Init+0x40>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	@ (80077fc <HAL_Init+0x40>)
 80077d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80077d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077d8:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <HAL_Init+0x40>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a07      	ldr	r2, [pc, #28]	@ (80077fc <HAL_Init+0x40>)
 80077de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077e4:	2003      	movs	r0, #3
 80077e6:	f000 f94f 	bl	8007a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077ea:	200f      	movs	r0, #15
 80077ec:	f000 f808 	bl	8007800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077f0:	f7ff fabe 	bl	8006d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40023c00 	.word	0x40023c00

08007800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007808:	4b12      	ldr	r3, [pc, #72]	@ (8007854 <HAL_InitTick+0x54>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <HAL_InitTick+0x58>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	4619      	mov	r1, r3
 8007812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007816:	fbb3 f3f1 	udiv	r3, r3, r1
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f967 	bl	8007af2 <HAL_SYSTICK_Config>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e00e      	b.n	800784c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b0f      	cmp	r3, #15
 8007832:	d80a      	bhi.n	800784a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007834:	2200      	movs	r2, #0
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	f000 f92f 	bl	8007a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007840:	4a06      	ldr	r2, [pc, #24]	@ (800785c <HAL_InitTick+0x5c>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	e000      	b.n	800784c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20000154 	.word	0x20000154
 8007858:	20000184 	.word	0x20000184
 800785c:	20000180 	.word	0x20000180

08007860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007864:	4b06      	ldr	r3, [pc, #24]	@ (8007880 <HAL_IncTick+0x20>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	4b06      	ldr	r3, [pc, #24]	@ (8007884 <HAL_IncTick+0x24>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4413      	add	r3, r2
 8007870:	4a04      	ldr	r2, [pc, #16]	@ (8007884 <HAL_IncTick+0x24>)
 8007872:	6013      	str	r3, [r2, #0]
}
 8007874:	bf00      	nop
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20000184 	.word	0x20000184
 8007884:	200071dc 	.word	0x200071dc

08007888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  return uwTick;
 800788c:	4b03      	ldr	r3, [pc, #12]	@ (800789c <HAL_GetTick+0x14>)
 800788e:	681b      	ldr	r3, [r3, #0]
}
 8007890:	4618      	mov	r0, r3
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	200071dc 	.word	0x200071dc

080078a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80078a8:	f7ff ffee 	bl	8007888 <HAL_GetTick>
 80078ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d005      	beq.n	80078c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80078ba:	4b0a      	ldr	r3, [pc, #40]	@ (80078e4 <HAL_Delay+0x44>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80078c6:	bf00      	nop
 80078c8:	f7ff ffde 	bl	8007888 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d8f7      	bhi.n	80078c8 <HAL_Delay+0x28>
  {
  }
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000184 	.word	0x20000184

080078e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078f8:	4b0c      	ldr	r3, [pc, #48]	@ (800792c <__NVIC_SetPriorityGrouping+0x44>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007904:	4013      	ands	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800791a:	4a04      	ldr	r2, [pc, #16]	@ (800792c <__NVIC_SetPriorityGrouping+0x44>)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	60d3      	str	r3, [r2, #12]
}
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007934:	4b04      	ldr	r3, [pc, #16]	@ (8007948 <__NVIC_GetPriorityGrouping+0x18>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	f003 0307 	and.w	r3, r3, #7
}
 800793e:	4618      	mov	r0, r3
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	e000ed00 	.word	0xe000ed00

0800794c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795a:	2b00      	cmp	r3, #0
 800795c:	db0b      	blt.n	8007976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	f003 021f 	and.w	r2, r3, #31
 8007964:	4907      	ldr	r1, [pc, #28]	@ (8007984 <__NVIC_EnableIRQ+0x38>)
 8007966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	2001      	movs	r0, #1
 800796e:	fa00 f202 	lsl.w	r2, r0, r2
 8007972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	e000e100 	.word	0xe000e100

08007988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	6039      	str	r1, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007998:	2b00      	cmp	r3, #0
 800799a:	db0a      	blt.n	80079b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	490c      	ldr	r1, [pc, #48]	@ (80079d4 <__NVIC_SetPriority+0x4c>)
 80079a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a6:	0112      	lsls	r2, r2, #4
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	440b      	add	r3, r1
 80079ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079b0:	e00a      	b.n	80079c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	4908      	ldr	r1, [pc, #32]	@ (80079d8 <__NVIC_SetPriority+0x50>)
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	3b04      	subs	r3, #4
 80079c0:	0112      	lsls	r2, r2, #4
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	440b      	add	r3, r1
 80079c6:	761a      	strb	r2, [r3, #24]
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	e000e100 	.word	0xe000e100
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079dc:	b480      	push	{r7}
 80079de:	b089      	sub	sp, #36	@ 0x24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f1c3 0307 	rsb	r3, r3, #7
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf28      	it	cs
 80079fa:	2304      	movcs	r3, #4
 80079fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3304      	adds	r3, #4
 8007a02:	2b06      	cmp	r3, #6
 8007a04:	d902      	bls.n	8007a0c <NVIC_EncodePriority+0x30>
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	3b03      	subs	r3, #3
 8007a0a:	e000      	b.n	8007a0e <NVIC_EncodePriority+0x32>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	43da      	mvns	r2, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	401a      	ands	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a24:	f04f 31ff 	mov.w	r1, #4294967295
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2e:	43d9      	mvns	r1, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a34:	4313      	orrs	r3, r2
         );
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3724      	adds	r7, #36	@ 0x24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a54:	d301      	bcc.n	8007a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a56:	2301      	movs	r3, #1
 8007a58:	e00f      	b.n	8007a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a84 <SysTick_Config+0x40>)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a62:	210f      	movs	r1, #15
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	f7ff ff8e 	bl	8007988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a6c:	4b05      	ldr	r3, [pc, #20]	@ (8007a84 <SysTick_Config+0x40>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a72:	4b04      	ldr	r3, [pc, #16]	@ (8007a84 <SysTick_Config+0x40>)
 8007a74:	2207      	movs	r2, #7
 8007a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	e000e010 	.word	0xe000e010

08007a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff ff29 	bl	80078e8 <__NVIC_SetPriorityGrouping>
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ab0:	f7ff ff3e 	bl	8007930 <__NVIC_GetPriorityGrouping>
 8007ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	6978      	ldr	r0, [r7, #20]
 8007abc:	f7ff ff8e 	bl	80079dc <NVIC_EncodePriority>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff ff5d 	bl	8007988 <__NVIC_SetPriority>
}
 8007ace:	bf00      	nop
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	4603      	mov	r3, r0
 8007ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff ff31 	bl	800794c <__NVIC_EnableIRQ>
}
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff ffa2 	bl	8007a44 <SysTick_Config>
 8007b00:	4603      	mov	r3, r0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b18:	f7ff feb6 	bl	8007888 <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e099      	b.n	8007c5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0201 	bic.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b48:	e00f      	b.n	8007b6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b4a:	f7ff fe9d 	bl	8007888 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d908      	bls.n	8007b6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2203      	movs	r2, #3
 8007b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e078      	b.n	8007c5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e8      	bne.n	8007b4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4b38      	ldr	r3, [pc, #224]	@ (8007c64 <HAL_DMA_Init+0x158>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d107      	bne.n	8007bd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 0307 	bic.w	r3, r3, #7
 8007bea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d117      	bne.n	8007c2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00e      	beq.n	8007c2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fa19 	bl	8008048 <DMA_CheckFifoParam>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d008      	beq.n	8007c2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2240      	movs	r2, #64	@ 0x40
 8007c20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e016      	b.n	8007c5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f9d0 	bl	8007fdc <DMA_CalcBaseAndBitshift>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c44:	223f      	movs	r2, #63	@ 0x3f
 8007c46:	409a      	lsls	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	f010803f 	.word	0xf010803f

08007c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d004      	beq.n	8007c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2280      	movs	r2, #128	@ 0x80
 8007c80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e00c      	b.n	8007ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2205      	movs	r2, #5
 8007c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8007ef4 <HAL_DMA_IRQHandler+0x248>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8007ef8 <HAL_DMA_IRQHandler+0x24c>)
 8007cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc2:	0a9b      	lsrs	r3, r3, #10
 8007cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd6:	2208      	movs	r2, #8
 8007cd8:	409a      	lsls	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d01a      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d013      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0204 	bic.w	r2, r2, #4
 8007cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d04:	2208      	movs	r2, #8
 8007d06:	409a      	lsls	r2, r3
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d10:	f043 0201 	orr.w	r2, r3, #1
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	409a      	lsls	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4013      	ands	r3, r2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d012      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	409a      	lsls	r2, r3
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d46:	f043 0202 	orr.w	r2, r3, #2
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d52:	2204      	movs	r2, #4
 8007d54:	409a      	lsls	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d012      	beq.n	8007d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d70:	2204      	movs	r2, #4
 8007d72:	409a      	lsls	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7c:	f043 0204 	orr.w	r2, r3, #4
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d88:	2210      	movs	r2, #16
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d043      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0308 	and.w	r3, r3, #8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d03c      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da6:	2210      	movs	r2, #16
 8007da8:	409a      	lsls	r2, r3
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d018      	beq.n	8007dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d108      	bne.n	8007ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d024      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
 8007dda:	e01f      	b.n	8007e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01b      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	4798      	blx	r3
 8007dec:	e016      	b.n	8007e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d107      	bne.n	8007e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0208 	bic.w	r2, r2, #8
 8007e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e20:	2220      	movs	r2, #32
 8007e22:	409a      	lsls	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 808f 	beq.w	8007f4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 8087 	beq.w	8007f4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e42:	2220      	movs	r2, #32
 8007e44:	409a      	lsls	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b05      	cmp	r3, #5
 8007e54:	d136      	bne.n	8007ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0216 	bic.w	r2, r2, #22
 8007e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695a      	ldr	r2, [r3, #20]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d103      	bne.n	8007e86 <HAL_DMA_IRQHandler+0x1da>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0208 	bic.w	r2, r2, #8
 8007e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e9a:	223f      	movs	r2, #63	@ 0x3f
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d07e      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
        }
        return;
 8007ec2:	e079      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01d      	beq.n	8007f0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10d      	bne.n	8007efc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d031      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	4798      	blx	r3
 8007ef0:	e02c      	b.n	8007f4c <HAL_DMA_IRQHandler+0x2a0>
 8007ef2:	bf00      	nop
 8007ef4:	20000154 	.word	0x20000154
 8007ef8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d023      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	4798      	blx	r3
 8007f0c:	e01e      	b.n	8007f4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10f      	bne.n	8007f3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0210 	bic.w	r2, r2, #16
 8007f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d032      	beq.n	8007fba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d022      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2205      	movs	r2, #5
 8007f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d307      	bcc.n	8007f94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f2      	bne.n	8007f78 <HAL_DMA_IRQHandler+0x2cc>
 8007f92:	e000      	b.n	8007f96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007f94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
 8007fb6:	e000      	b.n	8007fba <HAL_DMA_IRQHandler+0x30e>
        return;
 8007fb8:	bf00      	nop
    }
  }
}
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007fce:	b2db      	uxtb	r3, r3
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	3b10      	subs	r3, #16
 8007fec:	4a14      	ldr	r2, [pc, #80]	@ (8008040 <DMA_CalcBaseAndBitshift+0x64>)
 8007fee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff2:	091b      	lsrs	r3, r3, #4
 8007ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007ff6:	4a13      	ldr	r2, [pc, #76]	@ (8008044 <DMA_CalcBaseAndBitshift+0x68>)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b03      	cmp	r3, #3
 8008008:	d909      	bls.n	800801e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008012:	f023 0303 	bic.w	r3, r3, #3
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	659a      	str	r2, [r3, #88]	@ 0x58
 800801c:	e007      	b.n	800802e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008026:	f023 0303 	bic.w	r3, r3, #3
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	aaaaaaab 	.word	0xaaaaaaab
 8008044:	080367cc 	.word	0x080367cc

08008048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d11f      	bne.n	80080a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d856      	bhi.n	8008116 <DMA_CheckFifoParam+0xce>
 8008068:	a201      	add	r2, pc, #4	@ (adr r2, 8008070 <DMA_CheckFifoParam+0x28>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	08008081 	.word	0x08008081
 8008074:	08008093 	.word	0x08008093
 8008078:	08008081 	.word	0x08008081
 800807c:	08008117 	.word	0x08008117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d046      	beq.n	800811a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008090:	e043      	b.n	800811a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008096:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800809a:	d140      	bne.n	800811e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080a0:	e03d      	b.n	800811e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080aa:	d121      	bne.n	80080f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d837      	bhi.n	8008122 <DMA_CheckFifoParam+0xda>
 80080b2:	a201      	add	r2, pc, #4	@ (adr r2, 80080b8 <DMA_CheckFifoParam+0x70>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	080080c9 	.word	0x080080c9
 80080bc:	080080cf 	.word	0x080080cf
 80080c0:	080080c9 	.word	0x080080c9
 80080c4:	080080e1 	.word	0x080080e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]
      break;
 80080cc:	e030      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d025      	beq.n	8008126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080de:	e022      	b.n	8008126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80080e8:	d11f      	bne.n	800812a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80080ee:	e01c      	b.n	800812a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d903      	bls.n	80080fe <DMA_CheckFifoParam+0xb6>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d003      	beq.n	8008104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80080fc:	e018      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	73fb      	strb	r3, [r7, #15]
      break;
 8008102:	e015      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008108:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00e      	beq.n	800812e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	73fb      	strb	r3, [r7, #15]
      break;
 8008114:	e00b      	b.n	800812e <DMA_CheckFifoParam+0xe6>
      break;
 8008116:	bf00      	nop
 8008118:	e00a      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
      break;
 800811a:	bf00      	nop
 800811c:	e008      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
      break;
 800811e:	bf00      	nop
 8008120:	e006      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
      break;
 8008122:	bf00      	nop
 8008124:	e004      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
      break;
 8008126:	bf00      	nop
 8008128:	e002      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
      break;   
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <DMA_CheckFifoParam+0xe8>
      break;
 800812e:	bf00      	nop
    }
  } 
  
  return status; 
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop

08008140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	@ 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800814e:	2300      	movs	r3, #0
 8008150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008152:	2300      	movs	r3, #0
 8008154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008156:	2300      	movs	r3, #0
 8008158:	61fb      	str	r3, [r7, #28]
 800815a:	e16b      	b.n	8008434 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800815c:	2201      	movs	r2, #1
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4013      	ands	r3, r2
 800816e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	429a      	cmp	r2, r3
 8008176:	f040 815a 	bne.w	800842e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b01      	cmp	r3, #1
 8008184:	d005      	beq.n	8008192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800818e:	2b02      	cmp	r3, #2
 8008190:	d130      	bne.n	80081f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	2203      	movs	r2, #3
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43db      	mvns	r3, r3
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	4013      	ands	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081c8:	2201      	movs	r2, #1
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	fa02 f303 	lsl.w	r3, r2, r3
 80081d0:	43db      	mvns	r3, r3
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	4013      	ands	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	091b      	lsrs	r3, r3, #4
 80081de:	f003 0201 	and.w	r2, r3, #1
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d017      	beq.n	8008230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	2203      	movs	r2, #3
 800820c:	fa02 f303 	lsl.w	r3, r2, r3
 8008210:	43db      	mvns	r3, r3
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	4013      	ands	r3, r2
 8008216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	fa02 f303 	lsl.w	r3, r2, r3
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	4313      	orrs	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d123      	bne.n	8008284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	08da      	lsrs	r2, r3, #3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3208      	adds	r2, #8
 8008244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	f003 0307 	and.w	r3, r3, #7
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	220f      	movs	r2, #15
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	43db      	mvns	r3, r3
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	4013      	ands	r3, r2
 800825e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	691a      	ldr	r2, [r3, #16]
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	4313      	orrs	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	08da      	lsrs	r2, r3, #3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3208      	adds	r2, #8
 800827e:	69b9      	ldr	r1, [r7, #24]
 8008280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	2203      	movs	r2, #3
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	43db      	mvns	r3, r3
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	4013      	ands	r3, r2
 800829a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f003 0203 	and.w	r2, r3, #3
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80b4 	beq.w	800842e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	4b60      	ldr	r3, [pc, #384]	@ (800844c <HAL_GPIO_Init+0x30c>)
 80082cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ce:	4a5f      	ldr	r2, [pc, #380]	@ (800844c <HAL_GPIO_Init+0x30c>)
 80082d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80082d6:	4b5d      	ldr	r3, [pc, #372]	@ (800844c <HAL_GPIO_Init+0x30c>)
 80082d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082e2:	4a5b      	ldr	r2, [pc, #364]	@ (8008450 <HAL_GPIO_Init+0x310>)
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	089b      	lsrs	r3, r3, #2
 80082e8:	3302      	adds	r3, #2
 80082ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	220f      	movs	r2, #15
 80082fa:	fa02 f303 	lsl.w	r3, r2, r3
 80082fe:	43db      	mvns	r3, r3
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	4013      	ands	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a52      	ldr	r2, [pc, #328]	@ (8008454 <HAL_GPIO_Init+0x314>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d02b      	beq.n	8008366 <HAL_GPIO_Init+0x226>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a51      	ldr	r2, [pc, #324]	@ (8008458 <HAL_GPIO_Init+0x318>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d025      	beq.n	8008362 <HAL_GPIO_Init+0x222>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a50      	ldr	r2, [pc, #320]	@ (800845c <HAL_GPIO_Init+0x31c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d01f      	beq.n	800835e <HAL_GPIO_Init+0x21e>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a4f      	ldr	r2, [pc, #316]	@ (8008460 <HAL_GPIO_Init+0x320>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d019      	beq.n	800835a <HAL_GPIO_Init+0x21a>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a4e      	ldr	r2, [pc, #312]	@ (8008464 <HAL_GPIO_Init+0x324>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d013      	beq.n	8008356 <HAL_GPIO_Init+0x216>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a4d      	ldr	r2, [pc, #308]	@ (8008468 <HAL_GPIO_Init+0x328>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d00d      	beq.n	8008352 <HAL_GPIO_Init+0x212>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a4c      	ldr	r2, [pc, #304]	@ (800846c <HAL_GPIO_Init+0x32c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d007      	beq.n	800834e <HAL_GPIO_Init+0x20e>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a4b      	ldr	r2, [pc, #300]	@ (8008470 <HAL_GPIO_Init+0x330>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d101      	bne.n	800834a <HAL_GPIO_Init+0x20a>
 8008346:	2307      	movs	r3, #7
 8008348:	e00e      	b.n	8008368 <HAL_GPIO_Init+0x228>
 800834a:	2308      	movs	r3, #8
 800834c:	e00c      	b.n	8008368 <HAL_GPIO_Init+0x228>
 800834e:	2306      	movs	r3, #6
 8008350:	e00a      	b.n	8008368 <HAL_GPIO_Init+0x228>
 8008352:	2305      	movs	r3, #5
 8008354:	e008      	b.n	8008368 <HAL_GPIO_Init+0x228>
 8008356:	2304      	movs	r3, #4
 8008358:	e006      	b.n	8008368 <HAL_GPIO_Init+0x228>
 800835a:	2303      	movs	r3, #3
 800835c:	e004      	b.n	8008368 <HAL_GPIO_Init+0x228>
 800835e:	2302      	movs	r3, #2
 8008360:	e002      	b.n	8008368 <HAL_GPIO_Init+0x228>
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <HAL_GPIO_Init+0x228>
 8008366:	2300      	movs	r3, #0
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	f002 0203 	and.w	r2, r2, #3
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	4093      	lsls	r3, r2
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	4313      	orrs	r3, r2
 8008376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008378:	4935      	ldr	r1, [pc, #212]	@ (8008450 <HAL_GPIO_Init+0x310>)
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	089b      	lsrs	r3, r3, #2
 800837e:	3302      	adds	r3, #2
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008386:	4b3b      	ldr	r3, [pc, #236]	@ (8008474 <HAL_GPIO_Init+0x334>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	43db      	mvns	r3, r3
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	4013      	ands	r3, r2
 8008394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80083aa:	4a32      	ldr	r2, [pc, #200]	@ (8008474 <HAL_GPIO_Init+0x334>)
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80083b0:	4b30      	ldr	r3, [pc, #192]	@ (8008474 <HAL_GPIO_Init+0x334>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	43db      	mvns	r3, r3
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	4013      	ands	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80083d4:	4a27      	ldr	r2, [pc, #156]	@ (8008474 <HAL_GPIO_Init+0x334>)
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80083da:	4b26      	ldr	r3, [pc, #152]	@ (8008474 <HAL_GPIO_Init+0x334>)
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	43db      	mvns	r3, r3
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	4013      	ands	r3, r2
 80083e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008474 <HAL_GPIO_Init+0x334>)
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008404:	4b1b      	ldr	r3, [pc, #108]	@ (8008474 <HAL_GPIO_Init+0x334>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	43db      	mvns	r3, r3
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	4013      	ands	r3, r2
 8008412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008428:	4a12      	ldr	r2, [pc, #72]	@ (8008474 <HAL_GPIO_Init+0x334>)
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	3301      	adds	r3, #1
 8008432:	61fb      	str	r3, [r7, #28]
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	2b0f      	cmp	r3, #15
 8008438:	f67f ae90 	bls.w	800815c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	3724      	adds	r7, #36	@ 0x24
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40023800 	.word	0x40023800
 8008450:	40013800 	.word	0x40013800
 8008454:	40020000 	.word	0x40020000
 8008458:	40020400 	.word	0x40020400
 800845c:	40020800 	.word	0x40020800
 8008460:	40020c00 	.word	0x40020c00
 8008464:	40021000 	.word	0x40021000
 8008468:	40021400 	.word	0x40021400
 800846c:	40021800 	.word	0x40021800
 8008470:	40021c00 	.word	0x40021c00
 8008474:	40013c00 	.word	0x40013c00

08008478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	887b      	ldrh	r3, [r7, #2]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008490:	2301      	movs	r3, #1
 8008492:	73fb      	strb	r3, [r7, #15]
 8008494:	e001      	b.n	800849a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	807b      	strh	r3, [r7, #2]
 80084b4:	4613      	mov	r3, r2
 80084b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084b8:	787b      	ldrb	r3, [r7, #1]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084be:	887a      	ldrh	r2, [r7, #2]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80084c4:	e003      	b.n	80084ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80084c6:	887b      	ldrh	r3, [r7, #2]
 80084c8:	041a      	lsls	r2, r3, #16
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	619a      	str	r2, [r3, #24]
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
	...

080084dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e12b      	b.n	8008746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fd fc58 	bl	8005db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2224      	movs	r2, #36	@ 0x24
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0201 	bic.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800852e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800853e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008540:	f003 f8d6 	bl	800b6f0 <HAL_RCC_GetPCLK1Freq>
 8008544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	4a81      	ldr	r2, [pc, #516]	@ (8008750 <HAL_I2C_Init+0x274>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d807      	bhi.n	8008560 <HAL_I2C_Init+0x84>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a80      	ldr	r2, [pc, #512]	@ (8008754 <HAL_I2C_Init+0x278>)
 8008554:	4293      	cmp	r3, r2
 8008556:	bf94      	ite	ls
 8008558:	2301      	movls	r3, #1
 800855a:	2300      	movhi	r3, #0
 800855c:	b2db      	uxtb	r3, r3
 800855e:	e006      	b.n	800856e <HAL_I2C_Init+0x92>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4a7d      	ldr	r2, [pc, #500]	@ (8008758 <HAL_I2C_Init+0x27c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	bf94      	ite	ls
 8008568:	2301      	movls	r3, #1
 800856a:	2300      	movhi	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e0e7      	b.n	8008746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4a78      	ldr	r2, [pc, #480]	@ (800875c <HAL_I2C_Init+0x280>)
 800857a:	fba2 2303 	umull	r2, r3, r2, r3
 800857e:	0c9b      	lsrs	r3, r3, #18
 8008580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	430a      	orrs	r2, r1
 8008594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	4a6a      	ldr	r2, [pc, #424]	@ (8008750 <HAL_I2C_Init+0x274>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d802      	bhi.n	80085b0 <HAL_I2C_Init+0xd4>
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	3301      	adds	r3, #1
 80085ae:	e009      	b.n	80085c4 <HAL_I2C_Init+0xe8>
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80085b6:	fb02 f303 	mul.w	r3, r2, r3
 80085ba:	4a69      	ldr	r2, [pc, #420]	@ (8008760 <HAL_I2C_Init+0x284>)
 80085bc:	fba2 2303 	umull	r2, r3, r2, r3
 80085c0:	099b      	lsrs	r3, r3, #6
 80085c2:	3301      	adds	r3, #1
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	6812      	ldr	r2, [r2, #0]
 80085c8:	430b      	orrs	r3, r1
 80085ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80085d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	495c      	ldr	r1, [pc, #368]	@ (8008750 <HAL_I2C_Init+0x274>)
 80085e0:	428b      	cmp	r3, r1
 80085e2:	d819      	bhi.n	8008618 <HAL_I2C_Init+0x13c>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	1e59      	subs	r1, r3, #1
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80085f2:	1c59      	adds	r1, r3, #1
 80085f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80085f8:	400b      	ands	r3, r1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <HAL_I2C_Init+0x138>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1e59      	subs	r1, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	fbb1 f3f3 	udiv	r3, r1, r3
 800860c:	3301      	adds	r3, #1
 800860e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008612:	e051      	b.n	80086b8 <HAL_I2C_Init+0x1dc>
 8008614:	2304      	movs	r3, #4
 8008616:	e04f      	b.n	80086b8 <HAL_I2C_Init+0x1dc>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d111      	bne.n	8008644 <HAL_I2C_Init+0x168>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	1e58      	subs	r0, r3, #1
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6859      	ldr	r1, [r3, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	440b      	add	r3, r1
 800862e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008632:	3301      	adds	r3, #1
 8008634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008638:	2b00      	cmp	r3, #0
 800863a:	bf0c      	ite	eq
 800863c:	2301      	moveq	r3, #1
 800863e:	2300      	movne	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	e012      	b.n	800866a <HAL_I2C_Init+0x18e>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	1e58      	subs	r0, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6859      	ldr	r1, [r3, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	440b      	add	r3, r1
 8008652:	0099      	lsls	r1, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	fbb0 f3f3 	udiv	r3, r0, r3
 800865a:	3301      	adds	r3, #1
 800865c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008660:	2b00      	cmp	r3, #0
 8008662:	bf0c      	ite	eq
 8008664:	2301      	moveq	r3, #1
 8008666:	2300      	movne	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <HAL_I2C_Init+0x196>
 800866e:	2301      	movs	r3, #1
 8008670:	e022      	b.n	80086b8 <HAL_I2C_Init+0x1dc>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10e      	bne.n	8008698 <HAL_I2C_Init+0x1bc>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	1e58      	subs	r0, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6859      	ldr	r1, [r3, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	440b      	add	r3, r1
 8008688:	fbb0 f3f3 	udiv	r3, r0, r3
 800868c:	3301      	adds	r3, #1
 800868e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008696:	e00f      	b.n	80086b8 <HAL_I2C_Init+0x1dc>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	1e58      	subs	r0, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6859      	ldr	r1, [r3, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	0099      	lsls	r1, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80086ae:	3301      	adds	r3, #1
 80086b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	6809      	ldr	r1, [r1, #0]
 80086bc:	4313      	orrs	r3, r2
 80086be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69da      	ldr	r2, [r3, #28]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80086e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6911      	ldr	r1, [r2, #16]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	68d2      	ldr	r2, [r2, #12]
 80086f2:	4311      	orrs	r1, r2
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	430b      	orrs	r3, r1
 80086fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	695a      	ldr	r2, [r3, #20]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0201 	orr.w	r2, r2, #1
 8008726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	000186a0 	.word	0x000186a0
 8008754:	001e847f 	.word	0x001e847f
 8008758:	003d08ff 	.word	0x003d08ff
 800875c:	431bde83 	.word	0x431bde83
 8008760:	10624dd3 	.word	0x10624dd3

08008764 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af02      	add	r7, sp, #8
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	4608      	mov	r0, r1
 800876e:	4611      	mov	r1, r2
 8008770:	461a      	mov	r2, r3
 8008772:	4603      	mov	r3, r0
 8008774:	817b      	strh	r3, [r7, #10]
 8008776:	460b      	mov	r3, r1
 8008778:	813b      	strh	r3, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800877e:	f7ff f883 	bl	8007888 <HAL_GetTick>
 8008782:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b20      	cmp	r3, #32
 800878e:	f040 80d9 	bne.w	8008944 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	2319      	movs	r3, #25
 8008798:	2201      	movs	r2, #1
 800879a:	496d      	ldr	r1, [pc, #436]	@ (8008950 <HAL_I2C_Mem_Write+0x1ec>)
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f002 f90d 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80087a8:	2302      	movs	r3, #2
 80087aa:	e0cc      	b.n	8008946 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_I2C_Mem_Write+0x56>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e0c5      	b.n	8008946 <HAL_I2C_Mem_Write+0x1e2>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d007      	beq.n	80087e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2221      	movs	r2, #33	@ 0x21
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2240      	movs	r2, #64	@ 0x40
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a3a      	ldr	r2, [r7, #32]
 800880a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008810:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4a4d      	ldr	r2, [pc, #308]	@ (8008954 <HAL_I2C_Mem_Write+0x1f0>)
 8008820:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008822:	88f8      	ldrh	r0, [r7, #6]
 8008824:	893a      	ldrh	r2, [r7, #8]
 8008826:	8979      	ldrh	r1, [r7, #10]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4603      	mov	r3, r0
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f001 fe9c 	bl	800a570 <I2C_RequestMemoryWrite>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d052      	beq.n	80088e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e081      	b.n	8008946 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f002 f98e 	bl	800ab68 <I2C_WaitOnTXEFlagUntilTimeout>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00d      	beq.n	800886e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008856:	2b04      	cmp	r3, #4
 8008858:	d107      	bne.n	800886a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e06b      	b.n	8008946 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008872:	781a      	ldrb	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008894:	b29b      	uxth	r3, r3
 8008896:	3b01      	subs	r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d11b      	bne.n	80088e4 <HAL_I2C_Mem_Write+0x180>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d017      	beq.n	80088e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	781a      	ldrb	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1aa      	bne.n	8008842 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f002 f97a 	bl	800abea <I2C_WaitOnBTFFlagUntilTimeout>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00d      	beq.n	8008918 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008900:	2b04      	cmp	r3, #4
 8008902:	d107      	bne.n	8008914 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008912:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e016      	b.n	8008946 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	e000      	b.n	8008946 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008944:	2302      	movs	r3, #2
  }
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	00100002 	.word	0x00100002
 8008954:	ffff0000 	.word	0xffff0000

08008958 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08c      	sub	sp, #48	@ 0x30
 800895c:	af02      	add	r7, sp, #8
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	4608      	mov	r0, r1
 8008962:	4611      	mov	r1, r2
 8008964:	461a      	mov	r2, r3
 8008966:	4603      	mov	r3, r0
 8008968:	817b      	strh	r3, [r7, #10]
 800896a:	460b      	mov	r3, r1
 800896c:	813b      	strh	r3, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008972:	f7fe ff89 	bl	8007888 <HAL_GetTick>
 8008976:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b20      	cmp	r3, #32
 8008982:	f040 8208 	bne.w	8008d96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	2319      	movs	r3, #25
 800898c:	2201      	movs	r2, #1
 800898e:	497b      	ldr	r1, [pc, #492]	@ (8008b7c <HAL_I2C_Mem_Read+0x224>)
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f002 f813 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800899c:	2302      	movs	r3, #2
 800899e:	e1fb      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_I2C_Mem_Read+0x56>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e1f4      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d007      	beq.n	80089d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0201 	orr.w	r2, r2, #1
 80089d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2222      	movs	r2, #34	@ 0x22
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2240      	movs	r2, #64	@ 0x40
 80089f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4a5b      	ldr	r2, [pc, #364]	@ (8008b80 <HAL_I2C_Mem_Read+0x228>)
 8008a14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a16:	88f8      	ldrh	r0, [r7, #6]
 8008a18:	893a      	ldrh	r2, [r7, #8]
 8008a1a:	8979      	ldrh	r1, [r7, #10]
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	4603      	mov	r3, r0
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f001 fe38 	bl	800a69c <I2C_RequestMemoryRead>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e1b0      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d113      	bne.n	8008a66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a3e:	2300      	movs	r3, #0
 8008a40:	623b      	str	r3, [r7, #32]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	623b      	str	r3, [r7, #32]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	623b      	str	r3, [r7, #32]
 8008a52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	e184      	b.n	8008d70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d11b      	bne.n	8008aa6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	61fb      	str	r3, [r7, #28]
 8008a92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	e164      	b.n	8008d70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d11b      	bne.n	8008ae6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008abc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61bb      	str	r3, [r7, #24]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	61bb      	str	r3, [r7, #24]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	61bb      	str	r3, [r7, #24]
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	e144      	b.n	8008d70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	617b      	str	r3, [r7, #20]
 8008afa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008afc:	e138      	b.n	8008d70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	f200 80f1 	bhi.w	8008cea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d123      	bne.n	8008b58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f002 f8db 	bl	800acd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e139      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b40:	3b01      	subs	r3, #1
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008b56:	e10b      	b.n	8008d70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d14e      	bne.n	8008bfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b66:	2200      	movs	r2, #0
 8008b68:	4906      	ldr	r1, [pc, #24]	@ (8008b84 <HAL_I2C_Mem_Read+0x22c>)
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f001 ff26 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d008      	beq.n	8008b88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e10e      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
 8008b7a:	bf00      	nop
 8008b7c:	00100002 	.word	0x00100002
 8008b80:	ffff0000 	.word	0xffff0000
 8008b84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	691a      	ldr	r2, [r3, #16]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	691a      	ldr	r2, [r3, #16]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008bfc:	e0b8      	b.n	8008d70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c04:	2200      	movs	r2, #0
 8008c06:	4966      	ldr	r1, [pc, #408]	@ (8008da0 <HAL_I2C_Mem_Read+0x448>)
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f001 fed7 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e0bf      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691a      	ldr	r2, [r3, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	2200      	movs	r2, #0
 8008c62:	494f      	ldr	r1, [pc, #316]	@ (8008da0 <HAL_I2C_Mem_Read+0x448>)
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f001 fea9 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e091      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	691a      	ldr	r2, [r3, #16]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	691a      	ldr	r2, [r3, #16]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc0:	b2d2      	uxtb	r2, r2
 8008cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ce8:	e042      	b.n	8008d70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f001 ffee 	bl	800acd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e04c      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	691a      	ldr	r2, [r3, #16]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	f003 0304 	and.w	r3, r3, #4
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d118      	bne.n	8008d70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d48:	b2d2      	uxtb	r2, r2
 8008d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f47f aec2 	bne.w	8008afe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e000      	b.n	8008d98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3728      	adds	r7, #40	@ 0x28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	00010004 	.word	0x00010004

08008da4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	2b10      	cmp	r3, #16
 8008dd2:	d003      	beq.n	8008ddc <HAL_I2C_EV_IRQHandler+0x38>
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	2b40      	cmp	r3, #64	@ 0x40
 8008dd8:	f040 80c1 	bne.w	8008f5e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10d      	bne.n	8008e12 <HAL_I2C_EV_IRQHandler+0x6e>
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008dfc:	d003      	beq.n	8008e06 <HAL_I2C_EV_IRQHandler+0x62>
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008e04:	d101      	bne.n	8008e0a <HAL_I2C_EV_IRQHandler+0x66>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <HAL_I2C_EV_IRQHandler+0x68>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	f000 8132 	beq.w	8009076 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00c      	beq.n	8008e36 <HAL_I2C_EV_IRQHandler+0x92>
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	0a5b      	lsrs	r3, r3, #9
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 ffd6 	bl	800adda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fd83 	bl	800993a <I2C_Master_SB>
 8008e34:	e092      	b.n	8008f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	08db      	lsrs	r3, r3, #3
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <HAL_I2C_EV_IRQHandler+0xb2>
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	0a5b      	lsrs	r3, r3, #9
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fdf9 	bl	8009a46 <I2C_Master_ADD10>
 8008e54:	e082      	b.n	8008f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	085b      	lsrs	r3, r3, #1
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d009      	beq.n	8008e76 <HAL_I2C_EV_IRQHandler+0xd2>
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	0a5b      	lsrs	r3, r3, #9
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fe13 	bl	8009a9a <I2C_Master_ADDR>
 8008e74:	e072      	b.n	8008f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	089b      	lsrs	r3, r3, #2
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d03b      	beq.n	8008efa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e90:	f000 80f3 	beq.w	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	09db      	lsrs	r3, r3, #7
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00f      	beq.n	8008ec0 <HAL_I2C_EV_IRQHandler+0x11c>
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	0a9b      	lsrs	r3, r3, #10
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d009      	beq.n	8008ec0 <HAL_I2C_EV_IRQHandler+0x11c>
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	089b      	lsrs	r3, r3, #2
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f9f3 	bl	80092a4 <I2C_MasterTransmit_TXE>
 8008ebe:	e04d      	b.n	8008f5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	089b      	lsrs	r3, r3, #2
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 80d6 	beq.w	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	0a5b      	lsrs	r3, r3, #9
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 80cf 	beq.w	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	2b21      	cmp	r3, #33	@ 0x21
 8008ee0:	d103      	bne.n	8008eea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa7a 	bl	80093dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ee8:	e0c7      	b.n	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2b40      	cmp	r3, #64	@ 0x40
 8008eee:	f040 80c4 	bne.w	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fae8 	bl	80094c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ef8:	e0bf      	b.n	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f08:	f000 80b7 	beq.w	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	099b      	lsrs	r3, r3, #6
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00f      	beq.n	8008f38 <HAL_I2C_EV_IRQHandler+0x194>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	0a9b      	lsrs	r3, r3, #10
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d009      	beq.n	8008f38 <HAL_I2C_EV_IRQHandler+0x194>
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	089b      	lsrs	r3, r3, #2
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d103      	bne.n	8008f38 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fb5d 	bl	80095f0 <I2C_MasterReceive_RXNE>
 8008f36:	e011      	b.n	8008f5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	089b      	lsrs	r3, r3, #2
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 809a 	beq.w	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	0a5b      	lsrs	r3, r3, #9
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 8093 	beq.w	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc06 	bl	8009766 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f5a:	e08e      	b.n	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008f5c:	e08d      	b.n	800907a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d004      	beq.n	8008f70 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	e007      	b.n	8008f80 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	085b      	lsrs	r3, r3, #1
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d012      	beq.n	8008fb2 <HAL_I2C_EV_IRQHandler+0x20e>
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	0a5b      	lsrs	r3, r3, #9
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d003      	beq.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008fa8:	69b9      	ldr	r1, [r7, #24]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 ffc4 	bl	8009f38 <I2C_Slave_ADDR>
 8008fb0:	e066      	b.n	8009080 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	091b      	lsrs	r3, r3, #4
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d009      	beq.n	8008fd2 <HAL_I2C_EV_IRQHandler+0x22e>
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	0a5b      	lsrs	r3, r3, #9
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fffe 	bl	8009fcc <I2C_Slave_STOPF>
 8008fd0:	e056      	b.n	8009080 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b21      	cmp	r3, #33	@ 0x21
 8008fd6:	d002      	beq.n	8008fde <HAL_I2C_EV_IRQHandler+0x23a>
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	2b29      	cmp	r3, #41	@ 0x29
 8008fdc:	d125      	bne.n	800902a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	09db      	lsrs	r3, r3, #7
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00f      	beq.n	800900a <HAL_I2C_EV_IRQHandler+0x266>
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	0a9b      	lsrs	r3, r3, #10
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <HAL_I2C_EV_IRQHandler+0x266>
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	089b      	lsrs	r3, r3, #2
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 feda 	bl	8009dbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009008:	e039      	b.n	800907e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	089b      	lsrs	r3, r3, #2
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d033      	beq.n	800907e <HAL_I2C_EV_IRQHandler+0x2da>
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	0a5b      	lsrs	r3, r3, #9
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d02d      	beq.n	800907e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 ff07 	bl	8009e36 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009028:	e029      	b.n	800907e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	099b      	lsrs	r3, r3, #6
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00f      	beq.n	8009056 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	0a9b      	lsrs	r3, r3, #10
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d009      	beq.n	8009056 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	089b      	lsrs	r3, r3, #2
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d103      	bne.n	8009056 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 ff12 	bl	8009e78 <I2C_SlaveReceive_RXNE>
 8009054:	e014      	b.n	8009080 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	089b      	lsrs	r3, r3, #2
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <HAL_I2C_EV_IRQHandler+0x2dc>
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	0a5b      	lsrs	r3, r3, #9
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d008      	beq.n	8009080 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 ff40 	bl	8009ef4 <I2C_SlaveReceive_BTF>
 8009074:	e004      	b.n	8009080 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8009076:	bf00      	nop
 8009078:	e002      	b.n	8009080 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800907a:	bf00      	nop
 800907c:	e000      	b.n	8009080 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800907e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009080:	3720      	adds	r7, #32
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b08a      	sub	sp, #40	@ 0x28
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800909e:	2300      	movs	r3, #0
 80090a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80090a8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	0a1b      	lsrs	r3, r3, #8
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00e      	beq.n	80090d4 <HAL_I2C_ER_IRQHandler+0x4e>
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	0a1b      	lsrs	r3, r3, #8
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	f043 0301 	orr.w	r3, r3, #1
 80090c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80090d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	0a5b      	lsrs	r3, r3, #9
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00e      	beq.n	80090fe <HAL_I2C_ER_IRQHandler+0x78>
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	0a1b      	lsrs	r3, r3, #8
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d008      	beq.n	80090fe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	f043 0302 	orr.w	r3, r3, #2
 80090f2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80090fc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	0a9b      	lsrs	r3, r3, #10
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d03f      	beq.n	800918a <HAL_I2C_ER_IRQHandler+0x104>
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	0a1b      	lsrs	r3, r3, #8
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d039      	beq.n	800918a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8009116:	7efb      	ldrb	r3, [r7, #27]
 8009118:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800911e:	b29b      	uxth	r3, r3
 8009120:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009128:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009130:	7ebb      	ldrb	r3, [r7, #26]
 8009132:	2b20      	cmp	r3, #32
 8009134:	d112      	bne.n	800915c <HAL_I2C_ER_IRQHandler+0xd6>
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10f      	bne.n	800915c <HAL_I2C_ER_IRQHandler+0xd6>
 800913c:	7cfb      	ldrb	r3, [r7, #19]
 800913e:	2b21      	cmp	r3, #33	@ 0x21
 8009140:	d008      	beq.n	8009154 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009142:	7cfb      	ldrb	r3, [r7, #19]
 8009144:	2b29      	cmp	r3, #41	@ 0x29
 8009146:	d005      	beq.n	8009154 <HAL_I2C_ER_IRQHandler+0xce>
 8009148:	7cfb      	ldrb	r3, [r7, #19]
 800914a:	2b28      	cmp	r3, #40	@ 0x28
 800914c:	d106      	bne.n	800915c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b21      	cmp	r3, #33	@ 0x21
 8009152:	d103      	bne.n	800915c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f869 	bl	800a22c <I2C_Slave_AF>
 800915a:	e016      	b.n	800918a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009164:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	f043 0304 	orr.w	r3, r3, #4
 800916c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800916e:	7efb      	ldrb	r3, [r7, #27]
 8009170:	2b10      	cmp	r3, #16
 8009172:	d002      	beq.n	800917a <HAL_I2C_ER_IRQHandler+0xf4>
 8009174:	7efb      	ldrb	r3, [r7, #27]
 8009176:	2b40      	cmp	r3, #64	@ 0x40
 8009178:	d107      	bne.n	800918a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009188:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	0adb      	lsrs	r3, r3, #11
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <HAL_I2C_ER_IRQHandler+0x12e>
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	0a1b      	lsrs	r3, r3, #8
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d008      	beq.n	80091b4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	f043 0308 	orr.w	r3, r3, #8
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80091b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d008      	beq.n	80091cc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 f8a0 	bl	800a30c <I2C_ITError>
  }
}
 80091cc:	bf00      	nop
 80091ce:	3728      	adds	r7, #40	@ 0x28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
 8009230:	4613      	mov	r3, r2
 8009232:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d150      	bne.n	800936c <I2C_MasterTransmit_TXE+0xc8>
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b21      	cmp	r3, #33	@ 0x21
 80092ce:	d14d      	bne.n	800936c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b08      	cmp	r3, #8
 80092d4:	d01d      	beq.n	8009312 <I2C_MasterTransmit_TXE+0x6e>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d01a      	beq.n	8009312 <I2C_MasterTransmit_TXE+0x6e>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80092e2:	d016      	beq.n	8009312 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80092f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2211      	movs	r2, #17
 80092f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff ff62 	bl	80091d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009310:	e060      	b.n	80093d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009320:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009330:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b40      	cmp	r3, #64	@ 0x40
 800934a:	d107      	bne.n	800935c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7ff ff7d 	bl	8009254 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800935a:	e03b      	b.n	80093d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff ff35 	bl	80091d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800936a:	e033      	b.n	80093d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b21      	cmp	r3, #33	@ 0x21
 8009370:	d005      	beq.n	800937e <I2C_MasterTransmit_TXE+0xda>
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b40      	cmp	r3, #64	@ 0x40
 8009376:	d12d      	bne.n	80093d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	2b22      	cmp	r3, #34	@ 0x22
 800937c:	d12a      	bne.n	80093d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d108      	bne.n	800939a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009396:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009398:	e01c      	b.n	80093d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b40      	cmp	r3, #64	@ 0x40
 80093a4:	d103      	bne.n	80093ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f88e 	bl	80094c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80093ac:	e012      	b.n	80093d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b2:	781a      	ldrb	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	3b01      	subs	r3, #1
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80093d2:	e7ff      	b.n	80093d4 <I2C_MasterTransmit_TXE+0x130>
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b21      	cmp	r3, #33	@ 0x21
 80093f4:	d164      	bne.n	80094c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d012      	beq.n	8009426 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009404:	781a      	ldrb	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800941a:	b29b      	uxth	r3, r3
 800941c:	3b01      	subs	r3, #1
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009424:	e04c      	b.n	80094c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b08      	cmp	r3, #8
 800942a:	d01d      	beq.n	8009468 <I2C_MasterTransmit_BTF+0x8c>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b20      	cmp	r3, #32
 8009430:	d01a      	beq.n	8009468 <I2C_MasterTransmit_BTF+0x8c>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009438:	d016      	beq.n	8009468 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009448:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2211      	movs	r2, #17
 800944e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff feb7 	bl	80091d4 <HAL_I2C_MasterTxCpltCallback>
}
 8009466:	e02b      	b.n	80094c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009476:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009486:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2220      	movs	r2, #32
 8009492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b40      	cmp	r3, #64	@ 0x40
 80094a0:	d107      	bne.n	80094b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff fed2 	bl	8009254 <HAL_I2C_MemTxCpltCallback>
}
 80094b0:	e006      	b.n	80094c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff fe8a 	bl	80091d4 <HAL_I2C_MasterTxCpltCallback>
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d11d      	bne.n	800951c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d10b      	bne.n	8009500 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094f8:	1c9a      	adds	r2, r3, #2
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80094fe:	e073      	b.n	80095e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009504:	b29b      	uxth	r3, r3
 8009506:	121b      	asrs	r3, r3, #8
 8009508:	b2da      	uxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800951a:	e065      	b.n	80095e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009520:	2b01      	cmp	r3, #1
 8009522:	d10b      	bne.n	800953c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009528:	b2da      	uxtb	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800953a:	e055      	b.n	80095e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009540:	2b02      	cmp	r3, #2
 8009542:	d151      	bne.n	80095e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	2b22      	cmp	r3, #34	@ 0x22
 8009548:	d10d      	bne.n	8009566 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009558:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009564:	e040      	b.n	80095e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800956a:	b29b      	uxth	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d015      	beq.n	800959c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	2b21      	cmp	r3, #33	@ 0x21
 8009574:	d112      	bne.n	800959c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009590:	b29b      	uxth	r3, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	b29a      	uxth	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800959a:	e025      	b.n	80095e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d120      	bne.n	80095e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	2b21      	cmp	r3, #33	@ 0x21
 80095aa:	d11d      	bne.n	80095e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80095ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fe36 	bl	8009254 <HAL_I2C_MemTxCpltCallback>
}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b22      	cmp	r3, #34	@ 0x22
 8009602:	f040 80ac 	bne.w	800975e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800960a:	b29b      	uxth	r3, r3
 800960c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b03      	cmp	r3, #3
 8009612:	d921      	bls.n	8009658 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	691a      	ldr	r2, [r3, #16]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961e:	b2d2      	uxtb	r2, r2
 8009620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009630:	b29b      	uxth	r3, r3
 8009632:	3b01      	subs	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800963e:	b29b      	uxth	r3, r3
 8009640:	2b03      	cmp	r3, #3
 8009642:	f040 808c 	bne.w	800975e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009654:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009656:	e082      	b.n	800975e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965c:	2b02      	cmp	r3, #2
 800965e:	d075      	beq.n	800974c <I2C_MasterReceive_RXNE+0x15c>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d002      	beq.n	800966c <I2C_MasterReceive_RXNE+0x7c>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d16f      	bne.n	800974c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 fafd 	bl	800ac6c <I2C_WaitOnSTOPRequestThroughIT>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d142      	bne.n	80096fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009686:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009696:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	691a      	ldr	r2, [r3, #16]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b40      	cmp	r3, #64	@ 0x40
 80096d0:	d10a      	bne.n	80096e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff fdc1 	bl	8009268 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80096e6:	e03a      	b.n	800975e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2212      	movs	r2, #18
 80096f4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff fd76 	bl	80091e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80096fc:	e02f      	b.n	800975e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800970c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	691a      	ldr	r2, [r3, #16]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009718:	b2d2      	uxtb	r2, r2
 800971a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800972a:	b29b      	uxth	r3, r3
 800972c:	3b01      	subs	r3, #1
 800972e:	b29a      	uxth	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2220      	movs	r2, #32
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff fd99 	bl	800927c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800974a:	e008      	b.n	800975e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800975a:	605a      	str	r2, [r3, #4]
}
 800975c:	e7ff      	b.n	800975e <I2C_MasterReceive_RXNE+0x16e>
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009772:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b04      	cmp	r3, #4
 800977c:	d11b      	bne.n	80097b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800978c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	691a      	ldr	r2, [r3, #16]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009798:	b2d2      	uxtb	r2, r2
 800979a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	3b01      	subs	r3, #1
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80097b4:	e0bd      	b.n	8009932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d129      	bne.n	8009814 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d00a      	beq.n	80097ec <I2C_MasterReceive_BTF+0x86>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d007      	beq.n	80097ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	691a      	ldr	r2, [r3, #16]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f6:	b2d2      	uxtb	r2, r2
 80097f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fe:	1c5a      	adds	r2, r3, #1
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009808:	b29b      	uxth	r3, r3
 800980a:	3b01      	subs	r3, #1
 800980c:	b29a      	uxth	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009812:	e08e      	b.n	8009932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009818:	b29b      	uxth	r3, r3
 800981a:	2b02      	cmp	r3, #2
 800981c:	d176      	bne.n	800990c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d002      	beq.n	800982a <I2C_MasterReceive_BTF+0xc4>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b10      	cmp	r3, #16
 8009828:	d108      	bne.n	800983c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e019      	b.n	8009870 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b04      	cmp	r3, #4
 8009840:	d002      	beq.n	8009848 <I2C_MasterReceive_BTF+0xe2>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b02      	cmp	r3, #2
 8009846:	d108      	bne.n	800985a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	e00a      	b.n	8009870 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b10      	cmp	r3, #16
 800985e:	d007      	beq.n	8009870 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800986e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	691a      	ldr	r2, [r3, #16]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800988c:	b29b      	uxth	r3, r3
 800988e:	3b01      	subs	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a0:	b2d2      	uxtb	r2, r2
 80098a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	3b01      	subs	r3, #1
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80098ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b40      	cmp	r3, #64	@ 0x40
 80098de:	d10a      	bne.n	80098f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff fcba 	bl	8009268 <HAL_I2C_MemRxCpltCallback>
}
 80098f4:	e01d      	b.n	8009932 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2212      	movs	r2, #18
 8009902:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff fc6f 	bl	80091e8 <HAL_I2C_MasterRxCpltCallback>
}
 800990a:	e012      	b.n	8009932 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	691a      	ldr	r2, [r3, #16]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009928:	b29b      	uxth	r3, r3
 800992a:	3b01      	subs	r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009932:	bf00      	nop
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800993a:	b480      	push	{r7}
 800993c:	b083      	sub	sp, #12
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b40      	cmp	r3, #64	@ 0x40
 800994c:	d117      	bne.n	800997e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009952:	2b00      	cmp	r3, #0
 8009954:	d109      	bne.n	800996a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800995a:	b2db      	uxtb	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009966:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009968:	e067      	b.n	8009a3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800996e:	b2db      	uxtb	r3, r3
 8009970:	f043 0301 	orr.w	r3, r3, #1
 8009974:	b2da      	uxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	611a      	str	r2, [r3, #16]
}
 800997c:	e05d      	b.n	8009a3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009986:	d133      	bne.n	80099f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b21      	cmp	r3, #33	@ 0x21
 8009992:	d109      	bne.n	80099a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009998:	b2db      	uxtb	r3, r3
 800999a:	461a      	mov	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80099a4:	611a      	str	r2, [r3, #16]
 80099a6:	e008      	b.n	80099ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	f043 0301 	orr.w	r3, r3, #1
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d004      	beq.n	80099cc <I2C_Master_SB+0x92>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d108      	bne.n	80099de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d032      	beq.n	8009a3a <I2C_Master_SB+0x100>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d02d      	beq.n	8009a3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099ec:	605a      	str	r2, [r3, #4]
}
 80099ee:	e024      	b.n	8009a3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10e      	bne.n	8009a16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	11db      	asrs	r3, r3, #7
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 0306 	and.w	r3, r3, #6
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	f063 030f 	orn	r3, r3, #15
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	611a      	str	r2, [r3, #16]
}
 8009a14:	e011      	b.n	8009a3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d10d      	bne.n	8009a3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	11db      	asrs	r3, r3, #7
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0306 	and.w	r3, r3, #6
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f063 030e 	orn	r3, r3, #14
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	611a      	str	r2, [r3, #16]
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d004      	beq.n	8009a6c <I2C_Master_ADD10+0x26>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d108      	bne.n	8009a7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00c      	beq.n	8009a8e <I2C_Master_ADD10+0x48>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d007      	beq.n	8009a8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a8c:	605a      	str	r2, [r3, #4]
  }
}
 8009a8e:	bf00      	nop
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b091      	sub	sp, #68	@ 0x44
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009aa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b22      	cmp	r3, #34	@ 0x22
 8009ac2:	f040 8169 	bne.w	8009d98 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10f      	bne.n	8009aee <I2C_Master_ADDR+0x54>
 8009ace:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ad2:	2b40      	cmp	r3, #64	@ 0x40
 8009ad4:	d10b      	bne.n	8009aee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	e160      	b.n	8009db0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d11d      	bne.n	8009b32 <I2C_Master_ADDR+0x98>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009afe:	d118      	bne.n	8009b32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b00:	2300      	movs	r3, #0
 8009b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8009b30:	e13e      	b.n	8009db0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d113      	bne.n	8009b64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	e115      	b.n	8009d90 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	f040 808a 	bne.w	8009c84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009b76:	d137      	bne.n	8009be8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b96:	d113      	bne.n	8009bc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ba6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ba8:	2300      	movs	r3, #0
 8009baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbe:	e0e7      	b.n	8009d90 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	623b      	str	r3, [r7, #32]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	623b      	str	r3, [r7, #32]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	623b      	str	r3, [r7, #32]
 8009bd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	e0d3      	b.n	8009d90 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	2b08      	cmp	r3, #8
 8009bec:	d02e      	beq.n	8009c4c <I2C_Master_ADDR+0x1b2>
 8009bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf0:	2b20      	cmp	r3, #32
 8009bf2:	d02b      	beq.n	8009c4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf6:	2b12      	cmp	r3, #18
 8009bf8:	d102      	bne.n	8009c00 <I2C_Master_ADDR+0x166>
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d125      	bne.n	8009c4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d00e      	beq.n	8009c24 <I2C_Master_ADDR+0x18a>
 8009c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d00b      	beq.n	8009c24 <I2C_Master_ADDR+0x18a>
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	2b10      	cmp	r3, #16
 8009c10:	d008      	beq.n	8009c24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e007      	b.n	8009c34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c34:	2300      	movs	r3, #0
 8009c36:	61fb      	str	r3, [r7, #28]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	61fb      	str	r3, [r7, #28]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	e0a1      	b.n	8009d90 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	61bb      	str	r3, [r7, #24]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	61bb      	str	r3, [r7, #24]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	61bb      	str	r3, [r7, #24]
 8009c70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	e085      	b.n	8009d90 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d14d      	bne.n	8009d2a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	d016      	beq.n	8009cc2 <I2C_Master_ADDR+0x228>
 8009c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d013      	beq.n	8009cc2 <I2C_Master_ADDR+0x228>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d010      	beq.n	8009cc2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	e007      	b.n	8009cd2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009cd0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ce0:	d117      	bne.n	8009d12 <I2C_Master_ADDR+0x278>
 8009ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009ce8:	d00b      	beq.n	8009d02 <I2C_Master_ADDR+0x268>
 8009cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d008      	beq.n	8009d02 <I2C_Master_ADDR+0x268>
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf2:	2b08      	cmp	r3, #8
 8009cf4:	d005      	beq.n	8009d02 <I2C_Master_ADDR+0x268>
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf8:	2b10      	cmp	r3, #16
 8009cfa:	d002      	beq.n	8009d02 <I2C_Master_ADDR+0x268>
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfe:	2b20      	cmp	r3, #32
 8009d00:	d107      	bne.n	8009d12 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	617b      	str	r3, [r7, #20]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	617b      	str	r3, [r7, #20]
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	e032      	b.n	8009d90 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d48:	d117      	bne.n	8009d7a <I2C_Master_ADDR+0x2e0>
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009d50:	d00b      	beq.n	8009d6a <I2C_Master_ADDR+0x2d0>
 8009d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d008      	beq.n	8009d6a <I2C_Master_ADDR+0x2d0>
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	2b08      	cmp	r3, #8
 8009d5c:	d005      	beq.n	8009d6a <I2C_Master_ADDR+0x2d0>
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	2b10      	cmp	r3, #16
 8009d62:	d002      	beq.n	8009d6a <I2C_Master_ADDR+0x2d0>
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	d107      	bne.n	8009d7a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	613b      	str	r3, [r7, #16]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	613b      	str	r3, [r7, #16]
 8009d8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009d96:	e00b      	b.n	8009db0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	68fb      	ldr	r3, [r7, #12]
}
 8009dae:	e7ff      	b.n	8009db0 <I2C_Master_ADDR+0x316>
 8009db0:	bf00      	nop
 8009db2:	3744      	adds	r7, #68	@ 0x44
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d02b      	beq.n	8009e2e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dda:	781a      	ldrb	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d114      	bne.n	8009e2e <I2C_SlaveTransmit_TXE+0x72>
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	2b29      	cmp	r3, #41	@ 0x29
 8009e08:	d111      	bne.n	8009e2e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2221      	movs	r2, #33	@ 0x21
 8009e1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2228      	movs	r2, #40	@ 0x28
 8009e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff f9e7 	bl	80091fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d011      	beq.n	8009e6c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4c:	781a      	ldrb	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	3b01      	subs	r3, #1
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d02c      	beq.n	8009eec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea4:	1c5a      	adds	r2, r3, #1
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d114      	bne.n	8009eec <I2C_SlaveReceive_RXNE+0x74>
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
 8009ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ec6:	d111      	bne.n	8009eec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ed6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2222      	movs	r2, #34	@ 0x22
 8009edc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2228      	movs	r2, #40	@ 0x28
 8009ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff f992 	bl	8009210 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d012      	beq.n	8009f2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009f42:	2300      	movs	r3, #0
 8009f44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009f52:	2b28      	cmp	r3, #40	@ 0x28
 8009f54:	d127      	bne.n	8009fa6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	089b      	lsrs	r3, r3, #2
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009f72:	2301      	movs	r3, #1
 8009f74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	09db      	lsrs	r3, r3, #7
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d103      	bne.n	8009f8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	81bb      	strh	r3, [r7, #12]
 8009f88:	e002      	b.n	8009f90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009f98:	89ba      	ldrh	r2, [r7, #12]
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff f940 	bl	8009224 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009fa4:	e00e      	b.n	8009fc4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60bb      	str	r3, [r7, #8]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	60bb      	str	r3, [r7, #8]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	60bb      	str	r3, [r7, #8]
 8009fba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009fc4:	bf00      	nop
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009fea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009fec:	2300      	movs	r3, #0
 8009fee:	60bb      	str	r3, [r7, #8]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	60bb      	str	r3, [r7, #8]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a018:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a028:	d172      	bne.n	800a110 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	2b22      	cmp	r3, #34	@ 0x22
 800a02e:	d002      	beq.n	800a036 <I2C_Slave_STOPF+0x6a>
 800a030:	7bfb      	ldrb	r3, [r7, #15]
 800a032:	2b2a      	cmp	r3, #42	@ 0x2a
 800a034:	d135      	bne.n	800a0a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	b29a      	uxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a048:	b29b      	uxth	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d005      	beq.n	800a05a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a052:	f043 0204 	orr.w	r2, r3, #4
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a068:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fd ffa6 	bl	8007fc0 <HAL_DMA_GetState>
 800a074:	4603      	mov	r3, r0
 800a076:	2b01      	cmp	r3, #1
 800a078:	d049      	beq.n	800a10e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07e:	4a69      	ldr	r2, [pc, #420]	@ (800a224 <I2C_Slave_STOPF+0x258>)
 800a080:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a086:	4618      	mov	r0, r3
 800a088:	f7fd fdee 	bl	8007c68 <HAL_DMA_Abort_IT>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d03d      	beq.n	800a10e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0a0:	e035      	b.n	800a10e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0be:	f043 0204 	orr.w	r2, r3, #4
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a0d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fd ff70 	bl	8007fc0 <HAL_DMA_GetState>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d014      	beq.n	800a110 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ea:	4a4e      	ldr	r2, [pc, #312]	@ (800a224 <I2C_Slave_STOPF+0x258>)
 800a0ec:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fd fdb8 	bl	8007c68 <HAL_DMA_Abort_IT>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	e000      	b.n	800a110 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a10e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a114:	b29b      	uxth	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d03e      	beq.n	800a198 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b04      	cmp	r3, #4
 800a126:	d112      	bne.n	800a14e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691a      	ldr	r2, [r3, #16]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a132:	b2d2      	uxtb	r2, r2
 800a134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a144:	b29b      	uxth	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	b29a      	uxth	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a158:	2b40      	cmp	r3, #64	@ 0x40
 800a15a:	d112      	bne.n	800a182 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	691a      	ldr	r2, [r3, #16]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a166:	b2d2      	uxtb	r2, r2
 800a168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a178:	b29b      	uxth	r3, r3
 800a17a:	3b01      	subs	r3, #1
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a186:	b29b      	uxth	r3, r3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d005      	beq.n	800a198 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a190:	f043 0204 	orr.w	r2, r3, #4
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f8b3 	bl	800a30c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a1a6:	e039      	b.n	800a21c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ac:	d109      	bne.n	800a1c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2228      	movs	r2, #40	@ 0x28
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff f827 	bl	8009210 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b28      	cmp	r3, #40	@ 0x28
 800a1cc:	d111      	bne.n	800a1f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a15      	ldr	r2, [pc, #84]	@ (800a228 <I2C_Slave_STOPF+0x25c>)
 800a1d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7ff f828 	bl	8009240 <HAL_I2C_ListenCpltCallback>
}
 800a1f0:	e014      	b.n	800a21c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1f6:	2b22      	cmp	r3, #34	@ 0x22
 800a1f8:	d002      	beq.n	800a200 <I2C_Slave_STOPF+0x234>
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	2b22      	cmp	r3, #34	@ 0x22
 800a1fe:	d10d      	bne.n	800a21c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2220      	movs	r2, #32
 800a20a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7fe fffa 	bl	8009210 <HAL_I2C_SlaveRxCpltCallback>
}
 800a21c:	bf00      	nop
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	0800a86d 	.word	0x0800a86d
 800a228:	ffff0000 	.word	0xffff0000

0800a22c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a23a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2b08      	cmp	r3, #8
 800a246:	d002      	beq.n	800a24e <I2C_Slave_AF+0x22>
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b20      	cmp	r3, #32
 800a24c:	d129      	bne.n	800a2a2 <I2C_Slave_AF+0x76>
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	2b28      	cmp	r3, #40	@ 0x28
 800a252:	d126      	bne.n	800a2a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a2c      	ldr	r2, [pc, #176]	@ (800a308 <I2C_Slave_AF+0xdc>)
 800a258:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a268:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a272:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a282:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7fe ffd0 	bl	8009240 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a2a0:	e02e      	b.n	800a300 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	2b21      	cmp	r3, #33	@ 0x21
 800a2a6:	d126      	bne.n	800a2f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a17      	ldr	r2, [pc, #92]	@ (800a308 <I2C_Slave_AF+0xdc>)
 800a2ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2221      	movs	r2, #33	@ 0x21
 800a2b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a2d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a2dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fe ff84 	bl	80091fc <HAL_I2C_SlaveTxCpltCallback>
}
 800a2f4:	e004      	b.n	800a300 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a2fe:	615a      	str	r2, [r3, #20]
}
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	ffff0000 	.word	0xffff0000

0800a30c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a31a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a322:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a324:	7bbb      	ldrb	r3, [r7, #14]
 800a326:	2b10      	cmp	r3, #16
 800a328:	d002      	beq.n	800a330 <I2C_ITError+0x24>
 800a32a:	7bbb      	ldrb	r3, [r7, #14]
 800a32c:	2b40      	cmp	r3, #64	@ 0x40
 800a32e:	d10a      	bne.n	800a346 <I2C_ITError+0x3a>
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	2b22      	cmp	r3, #34	@ 0x22
 800a334:	d107      	bne.n	800a346 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a344:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a34c:	2b28      	cmp	r3, #40	@ 0x28
 800a34e:	d107      	bne.n	800a360 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2228      	movs	r2, #40	@ 0x28
 800a35a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a35e:	e015      	b.n	800a38c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a36a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a36e:	d00a      	beq.n	800a386 <I2C_ITError+0x7a>
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	2b60      	cmp	r3, #96	@ 0x60
 800a374:	d007      	beq.n	800a386 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2220      	movs	r2, #32
 800a37a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a39a:	d162      	bne.n	800a462 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d020      	beq.n	800a3fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3be:	4a6a      	ldr	r2, [pc, #424]	@ (800a568 <I2C_ITError+0x25c>)
 800a3c0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fd fc4e 	bl	8007c68 <HAL_DMA_Abort_IT>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 8089 	beq.w	800a4e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0201 	bic.w	r2, r2, #1
 800a3e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	4798      	blx	r3
 800a3fa:	e074      	b.n	800a4e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a400:	4a59      	ldr	r2, [pc, #356]	@ (800a568 <I2C_ITError+0x25c>)
 800a402:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fd fc2d 	bl	8007c68 <HAL_DMA_Abort_IT>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d068      	beq.n	800a4e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a41e:	2b40      	cmp	r3, #64	@ 0x40
 800a420:	d10b      	bne.n	800a43a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	691a      	ldr	r2, [r3, #16]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42c:	b2d2      	uxtb	r2, r2
 800a42e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f022 0201 	bic.w	r2, r2, #1
 800a448:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a45c:	4610      	mov	r0, r2
 800a45e:	4798      	blx	r3
 800a460:	e041      	b.n	800a4e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b60      	cmp	r3, #96	@ 0x60
 800a46c:	d125      	bne.n	800a4ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2220      	movs	r2, #32
 800a472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a486:	2b40      	cmp	r3, #64	@ 0x40
 800a488:	d10b      	bne.n	800a4a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	691a      	ldr	r2, [r3, #16]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a494:	b2d2      	uxtb	r2, r2
 800a496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0201 	bic.w	r2, r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7fe feec 	bl	8009290 <HAL_I2C_AbortCpltCallback>
 800a4b8:	e015      	b.n	800a4e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c4:	2b40      	cmp	r3, #64	@ 0x40
 800a4c6:	d10b      	bne.n	800a4e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	691a      	ldr	r2, [r3, #16]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7fe fecb 	bl	800927c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10e      	bne.n	800a514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d109      	bne.n	800a514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a506:	2b00      	cmp	r3, #0
 800a508:	d104      	bne.n	800a514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a510:	2b00      	cmp	r3, #0
 800a512:	d007      	beq.n	800a524 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a522:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a52a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	2b04      	cmp	r3, #4
 800a536:	d113      	bne.n	800a560 <I2C_ITError+0x254>
 800a538:	7bfb      	ldrb	r3, [r7, #15]
 800a53a:	2b28      	cmp	r3, #40	@ 0x28
 800a53c:	d110      	bne.n	800a560 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a0a      	ldr	r2, [pc, #40]	@ (800a56c <I2C_ITError+0x260>)
 800a542:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2220      	movs	r2, #32
 800a54e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7fe fe70 	bl	8009240 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a560:	bf00      	nop
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	0800a86d 	.word	0x0800a86d
 800a56c:	ffff0000 	.word	0xffff0000

0800a570 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af02      	add	r7, sp, #8
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	4608      	mov	r0, r1
 800a57a:	4611      	mov	r1, r2
 800a57c:	461a      	mov	r2, r3
 800a57e:	4603      	mov	r3, r0
 800a580:	817b      	strh	r3, [r7, #10]
 800a582:	460b      	mov	r3, r1
 800a584:	813b      	strh	r3, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 fa08 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00d      	beq.n	800a5ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5c0:	d103      	bne.n	800a5ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e05f      	b.n	800a68e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5ce:	897b      	ldrh	r3, [r7, #10]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a5dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e0:	6a3a      	ldr	r2, [r7, #32]
 800a5e2:	492d      	ldr	r1, [pc, #180]	@ (800a698 <I2C_RequestMemoryWrite+0x128>)
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 fa40 	bl	800aa6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e04c      	b.n	800a68e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	617b      	str	r3, [r7, #20]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	617b      	str	r3, [r7, #20]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a60c:	6a39      	ldr	r1, [r7, #32]
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f000 faaa 	bl	800ab68 <I2C_WaitOnTXEFlagUntilTimeout>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00d      	beq.n	800a636 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d107      	bne.n	800a632 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e02b      	b.n	800a68e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a636:	88fb      	ldrh	r3, [r7, #6]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d105      	bne.n	800a648 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a63c:	893b      	ldrh	r3, [r7, #8]
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	611a      	str	r2, [r3, #16]
 800a646:	e021      	b.n	800a68c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a648:	893b      	ldrh	r3, [r7, #8]
 800a64a:	0a1b      	lsrs	r3, r3, #8
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a658:	6a39      	ldr	r1, [r7, #32]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 fa84 	bl	800ab68 <I2C_WaitOnTXEFlagUntilTimeout>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00d      	beq.n	800a682 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d107      	bne.n	800a67e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a67c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e005      	b.n	800a68e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a682:	893b      	ldrh	r3, [r7, #8]
 800a684:	b2da      	uxtb	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	00010002 	.word	0x00010002

0800a69c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	817b      	strh	r3, [r7, #10]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	813b      	strh	r3, [r7, #8]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a6c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 f96a 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00d      	beq.n	800a70a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6fc:	d103      	bne.n	800a706 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a704:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e0aa      	b.n	800a860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a70a:	897b      	ldrh	r3, [r7, #10]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	461a      	mov	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a718:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71c:	6a3a      	ldr	r2, [r7, #32]
 800a71e:	4952      	ldr	r1, [pc, #328]	@ (800a868 <I2C_RequestMemoryRead+0x1cc>)
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 f9a2 	bl	800aa6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e097      	b.n	800a860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a730:	2300      	movs	r3, #0
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a748:	6a39      	ldr	r1, [r7, #32]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 fa0c 	bl	800ab68 <I2C_WaitOnTXEFlagUntilTimeout>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00d      	beq.n	800a772 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a75a:	2b04      	cmp	r3, #4
 800a75c:	d107      	bne.n	800a76e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a76c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e076      	b.n	800a860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d105      	bne.n	800a784 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a778:	893b      	ldrh	r3, [r7, #8]
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	611a      	str	r2, [r3, #16]
 800a782:	e021      	b.n	800a7c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a784:	893b      	ldrh	r3, [r7, #8]
 800a786:	0a1b      	lsrs	r3, r3, #8
 800a788:	b29b      	uxth	r3, r3
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a794:	6a39      	ldr	r1, [r7, #32]
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f000 f9e6 	bl	800ab68 <I2C_WaitOnTXEFlagUntilTimeout>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00d      	beq.n	800a7be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d107      	bne.n	800a7ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e050      	b.n	800a860 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7be:	893b      	ldrh	r3, [r7, #8]
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7ca:	6a39      	ldr	r1, [r7, #32]
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 f9cb 	bl	800ab68 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00d      	beq.n	800a7f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d107      	bne.n	800a7f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e035      	b.n	800a860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a802:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 f8d3 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00d      	beq.n	800a838 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a82a:	d103      	bne.n	800a834 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a832:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e013      	b.n	800a860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a838:	897b      	ldrh	r3, [r7, #10]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f043 0301 	orr.w	r3, r3, #1
 800a840:	b2da      	uxtb	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84a:	6a3a      	ldr	r2, [r7, #32]
 800a84c:	4906      	ldr	r1, [pc, #24]	@ (800a868 <I2C_RequestMemoryRead+0x1cc>)
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f90b 	bl	800aa6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e000      	b.n	800a860 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	00010002 	.word	0x00010002

0800a86c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a874:	2300      	movs	r3, #0
 800a876:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a884:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a886:	4b4b      	ldr	r3, [pc, #300]	@ (800a9b4 <I2C_DMAAbort+0x148>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	08db      	lsrs	r3, r3, #3
 800a88c:	4a4a      	ldr	r2, [pc, #296]	@ (800a9b8 <I2C_DMAAbort+0x14c>)
 800a88e:	fba2 2303 	umull	r2, r3, r2, r3
 800a892:	0a1a      	lsrs	r2, r3, #8
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	00da      	lsls	r2, r3, #3
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8aa:	f043 0220 	orr.w	r2, r3, #32
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a8b2:	e00a      	b.n	800a8ca <I2C_DMAAbort+0x5e>
    }
    count--;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8c8:	d0ea      	beq.n	800a8a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a90c:	2200      	movs	r2, #0
 800a90e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91c:	2200      	movs	r2, #0
 800a91e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0201 	bic.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b60      	cmp	r3, #96	@ 0x60
 800a93a:	d10e      	bne.n	800a95a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2220      	movs	r2, #32
 800a940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	2200      	movs	r2, #0
 800a950:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a952:	6978      	ldr	r0, [r7, #20]
 800a954:	f7fe fc9c 	bl	8009290 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a958:	e027      	b.n	800a9aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a95a:	7cfb      	ldrb	r3, [r7, #19]
 800a95c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a960:	2b28      	cmp	r3, #40	@ 0x28
 800a962:	d117      	bne.n	800a994 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f042 0201 	orr.w	r2, r2, #1
 800a972:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a982:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	2200      	movs	r2, #0
 800a988:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2228      	movs	r2, #40	@ 0x28
 800a98e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a992:	e007      	b.n	800a9a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2220      	movs	r2, #32
 800a998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a9a4:	6978      	ldr	r0, [r7, #20]
 800a9a6:	f7fe fc69 	bl	800927c <HAL_I2C_ErrorCallback>
}
 800a9aa:	bf00      	nop
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000154 	.word	0x20000154
 800a9b8:	14f8b589 	.word	0x14f8b589

0800a9bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9cc:	e025      	b.n	800aa1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d4:	d021      	beq.n	800aa1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9d6:	f7fc ff57 	bl	8007888 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d302      	bcc.n	800a9ec <I2C_WaitOnFlagUntilTimeout+0x30>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d116      	bne.n	800aa1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa06:	f043 0220 	orr.w	r2, r3, #32
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e023      	b.n	800aa62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	0c1b      	lsrs	r3, r3, #16
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d10d      	bne.n	800aa40 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	43da      	mvns	r2, r3
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	4013      	ands	r3, r2
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bf0c      	ite	eq
 800aa36:	2301      	moveq	r3, #1
 800aa38:	2300      	movne	r3, #0
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	e00c      	b.n	800aa5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	43da      	mvns	r2, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	bf0c      	ite	eq
 800aa52:	2301      	moveq	r3, #1
 800aa54:	2300      	movne	r3, #0
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d0b6      	beq.n	800a9ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa78:	e051      	b.n	800ab1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa88:	d123      	bne.n	800aad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aaa2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aabe:	f043 0204 	orr.w	r2, r3, #4
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e046      	b.n	800ab60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad8:	d021      	beq.n	800ab1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aada:	f7fc fed5 	bl	8007888 <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d302      	bcc.n	800aaf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d116      	bne.n	800ab1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab0a:	f043 0220 	orr.w	r2, r3, #32
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e020      	b.n	800ab60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	0c1b      	lsrs	r3, r3, #16
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d10c      	bne.n	800ab42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	43da      	mvns	r2, r3
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	4013      	ands	r3, r2
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bf14      	ite	ne
 800ab3a:	2301      	movne	r3, #1
 800ab3c:	2300      	moveq	r3, #0
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	e00b      	b.n	800ab5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	43da      	mvns	r2, r3
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	bf14      	ite	ne
 800ab54:	2301      	movne	r3, #1
 800ab56:	2300      	moveq	r3, #0
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d18d      	bne.n	800aa7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab74:	e02d      	b.n	800abd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f900 	bl	800ad7c <I2C_IsAcknowledgeFailed>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e02d      	b.n	800abe2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8c:	d021      	beq.n	800abd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab8e:	f7fc fe7b 	bl	8007888 <HAL_GetTick>
 800ab92:	4602      	mov	r2, r0
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d302      	bcc.n	800aba4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d116      	bne.n	800abd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2220      	movs	r2, #32
 800abae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abbe:	f043 0220 	orr.w	r2, r3, #32
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e007      	b.n	800abe2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abdc:	2b80      	cmp	r3, #128	@ 0x80
 800abde:	d1ca      	bne.n	800ab76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60f8      	str	r0, [r7, #12]
 800abf2:	60b9      	str	r1, [r7, #8]
 800abf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abf6:	e02d      	b.n	800ac54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 f8bf 	bl	800ad7c <I2C_IsAcknowledgeFailed>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e02d      	b.n	800ac64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0e:	d021      	beq.n	800ac54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac10:	f7fc fe3a 	bl	8007888 <HAL_GetTick>
 800ac14:	4602      	mov	r2, r0
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d302      	bcc.n	800ac26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d116      	bne.n	800ac54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac40:	f043 0220 	orr.w	r2, r3, #32
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e007      	b.n	800ac64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	d1ca      	bne.n	800abf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac74:	2300      	movs	r3, #0
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ac78:	4b13      	ldr	r3, [pc, #76]	@ (800acc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	08db      	lsrs	r3, r3, #3
 800ac7e:	4a13      	ldr	r2, [pc, #76]	@ (800accc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ac80:	fba2 2303 	umull	r2, r3, r2, r3
 800ac84:	0a1a      	lsrs	r2, r3, #8
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3b01      	subs	r3, #1
 800ac92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d107      	bne.n	800acaa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac9e:	f043 0220 	orr.w	r2, r3, #32
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e008      	b.n	800acbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acb8:	d0e9      	beq.n	800ac8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	20000154 	.word	0x20000154
 800accc:	14f8b589 	.word	0x14f8b589

0800acd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acdc:	e042      	b.n	800ad64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	f003 0310 	and.w	r3, r3, #16
 800ace8:	2b10      	cmp	r3, #16
 800acea:	d119      	bne.n	800ad20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f06f 0210 	mvn.w	r2, #16
 800acf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2220      	movs	r2, #32
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e029      	b.n	800ad74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad20:	f7fc fdb2 	bl	8007888 <HAL_GetTick>
 800ad24:	4602      	mov	r2, r0
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d302      	bcc.n	800ad36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d116      	bne.n	800ad64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad50:	f043 0220 	orr.w	r2, r3, #32
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e007      	b.n	800ad74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad6e:	2b40      	cmp	r3, #64	@ 0x40
 800ad70:	d1b5      	bne.n	800acde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad92:	d11b      	bne.n	800adcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2220      	movs	r2, #32
 800ada8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb8:	f043 0204 	orr.w	r2, r3, #4
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e000      	b.n	800adce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800adea:	d103      	bne.n	800adf4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800adf2:	e007      	b.n	800ae04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800adfc:	d102      	bne.n	800ae04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2208      	movs	r2, #8
 800ae02:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e267      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d075      	beq.n	800af1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae2e:	4b88      	ldr	r3, [pc, #544]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	f003 030c 	and.w	r3, r3, #12
 800ae36:	2b04      	cmp	r3, #4
 800ae38:	d00c      	beq.n	800ae54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae3a:	4b85      	ldr	r3, [pc, #532]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae42:	2b08      	cmp	r3, #8
 800ae44:	d112      	bne.n	800ae6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae46:	4b82      	ldr	r3, [pc, #520]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae52:	d10b      	bne.n	800ae6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae54:	4b7e      	ldr	r3, [pc, #504]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d05b      	beq.n	800af18 <HAL_RCC_OscConfig+0x108>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d157      	bne.n	800af18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e242      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae74:	d106      	bne.n	800ae84 <HAL_RCC_OscConfig+0x74>
 800ae76:	4b76      	ldr	r3, [pc, #472]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a75      	ldr	r2, [pc, #468]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	e01d      	b.n	800aec0 <HAL_RCC_OscConfig+0xb0>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae8c:	d10c      	bne.n	800aea8 <HAL_RCC_OscConfig+0x98>
 800ae8e:	4b70      	ldr	r3, [pc, #448]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a6f      	ldr	r2, [pc, #444]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ae98:	6013      	str	r3, [r2, #0]
 800ae9a:	4b6d      	ldr	r3, [pc, #436]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a6c      	ldr	r2, [pc, #432]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800aea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	e00b      	b.n	800aec0 <HAL_RCC_OscConfig+0xb0>
 800aea8:	4b69      	ldr	r3, [pc, #420]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a68      	ldr	r2, [pc, #416]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800aeae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aeb2:	6013      	str	r3, [r2, #0]
 800aeb4:	4b66      	ldr	r3, [pc, #408]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a65      	ldr	r2, [pc, #404]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800aeba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d013      	beq.n	800aef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aec8:	f7fc fcde 	bl	8007888 <HAL_GetTick>
 800aecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aece:	e008      	b.n	800aee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aed0:	f7fc fcda 	bl	8007888 <HAL_GetTick>
 800aed4:	4602      	mov	r2, r0
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	2b64      	cmp	r3, #100	@ 0x64
 800aedc:	d901      	bls.n	800aee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aede:	2303      	movs	r3, #3
 800aee0:	e207      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aee2:	4b5b      	ldr	r3, [pc, #364]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d0f0      	beq.n	800aed0 <HAL_RCC_OscConfig+0xc0>
 800aeee:	e014      	b.n	800af1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aef0:	f7fc fcca 	bl	8007888 <HAL_GetTick>
 800aef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aef6:	e008      	b.n	800af0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aef8:	f7fc fcc6 	bl	8007888 <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	2b64      	cmp	r3, #100	@ 0x64
 800af04:	d901      	bls.n	800af0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e1f3      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af0a:	4b51      	ldr	r3, [pc, #324]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1f0      	bne.n	800aef8 <HAL_RCC_OscConfig+0xe8>
 800af16:	e000      	b.n	800af1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0302 	and.w	r3, r3, #2
 800af22:	2b00      	cmp	r3, #0
 800af24:	d063      	beq.n	800afee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af26:	4b4a      	ldr	r3, [pc, #296]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f003 030c 	and.w	r3, r3, #12
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00b      	beq.n	800af4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af32:	4b47      	ldr	r3, [pc, #284]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af3a:	2b08      	cmp	r3, #8
 800af3c:	d11c      	bne.n	800af78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af3e:	4b44      	ldr	r3, [pc, #272]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d116      	bne.n	800af78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af4a:	4b41      	ldr	r3, [pc, #260]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0302 	and.w	r3, r3, #2
 800af52:	2b00      	cmp	r3, #0
 800af54:	d005      	beq.n	800af62 <HAL_RCC_OscConfig+0x152>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d001      	beq.n	800af62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e1c7      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af62:	4b3b      	ldr	r3, [pc, #236]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	4937      	ldr	r1, [pc, #220]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800af72:	4313      	orrs	r3, r2
 800af74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af76:	e03a      	b.n	800afee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d020      	beq.n	800afc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af80:	4b34      	ldr	r3, [pc, #208]	@ (800b054 <HAL_RCC_OscConfig+0x244>)
 800af82:	2201      	movs	r2, #1
 800af84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af86:	f7fc fc7f 	bl	8007888 <HAL_GetTick>
 800af8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af8c:	e008      	b.n	800afa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af8e:	f7fc fc7b 	bl	8007888 <HAL_GetTick>
 800af92:	4602      	mov	r2, r0
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d901      	bls.n	800afa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e1a8      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afa0:	4b2b      	ldr	r3, [pc, #172]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0f0      	beq.n	800af8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afac:	4b28      	ldr	r3, [pc, #160]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	4925      	ldr	r1, [pc, #148]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800afbc:	4313      	orrs	r3, r2
 800afbe:	600b      	str	r3, [r1, #0]
 800afc0:	e015      	b.n	800afee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afc2:	4b24      	ldr	r3, [pc, #144]	@ (800b054 <HAL_RCC_OscConfig+0x244>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc8:	f7fc fc5e 	bl	8007888 <HAL_GetTick>
 800afcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afce:	e008      	b.n	800afe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afd0:	f7fc fc5a 	bl	8007888 <HAL_GetTick>
 800afd4:	4602      	mov	r2, r0
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d901      	bls.n	800afe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	e187      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800afe2:	4b1b      	ldr	r3, [pc, #108]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1f0      	bne.n	800afd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0308 	and.w	r3, r3, #8
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d036      	beq.n	800b068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d016      	beq.n	800b030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b002:	4b15      	ldr	r3, [pc, #84]	@ (800b058 <HAL_RCC_OscConfig+0x248>)
 800b004:	2201      	movs	r2, #1
 800b006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b008:	f7fc fc3e 	bl	8007888 <HAL_GetTick>
 800b00c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b00e:	e008      	b.n	800b022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b010:	f7fc fc3a 	bl	8007888 <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d901      	bls.n	800b022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b01e:	2303      	movs	r3, #3
 800b020:	e167      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b022:	4b0b      	ldr	r3, [pc, #44]	@ (800b050 <HAL_RCC_OscConfig+0x240>)
 800b024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0f0      	beq.n	800b010 <HAL_RCC_OscConfig+0x200>
 800b02e:	e01b      	b.n	800b068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b030:	4b09      	ldr	r3, [pc, #36]	@ (800b058 <HAL_RCC_OscConfig+0x248>)
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b036:	f7fc fc27 	bl	8007888 <HAL_GetTick>
 800b03a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b03c:	e00e      	b.n	800b05c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b03e:	f7fc fc23 	bl	8007888 <HAL_GetTick>
 800b042:	4602      	mov	r2, r0
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d907      	bls.n	800b05c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e150      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
 800b050:	40023800 	.word	0x40023800
 800b054:	42470000 	.word	0x42470000
 800b058:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b05c:	4b88      	ldr	r3, [pc, #544]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b05e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1ea      	bne.n	800b03e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 8097 	beq.w	800b1a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b076:	2300      	movs	r3, #0
 800b078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b07a:	4b81      	ldr	r3, [pc, #516]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b07e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10f      	bne.n	800b0a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b086:	2300      	movs	r3, #0
 800b088:	60bb      	str	r3, [r7, #8]
 800b08a:	4b7d      	ldr	r3, [pc, #500]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b08e:	4a7c      	ldr	r2, [pc, #496]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b094:	6413      	str	r3, [r2, #64]	@ 0x40
 800b096:	4b7a      	ldr	r3, [pc, #488]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b09e:	60bb      	str	r3, [r7, #8]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0a6:	4b77      	ldr	r3, [pc, #476]	@ (800b284 <HAL_RCC_OscConfig+0x474>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d118      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0b2:	4b74      	ldr	r3, [pc, #464]	@ (800b284 <HAL_RCC_OscConfig+0x474>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a73      	ldr	r2, [pc, #460]	@ (800b284 <HAL_RCC_OscConfig+0x474>)
 800b0b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0be:	f7fc fbe3 	bl	8007888 <HAL_GetTick>
 800b0c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0c4:	e008      	b.n	800b0d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0c6:	f7fc fbdf 	bl	8007888 <HAL_GetTick>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d901      	bls.n	800b0d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e10c      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0d8:	4b6a      	ldr	r3, [pc, #424]	@ (800b284 <HAL_RCC_OscConfig+0x474>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d0f0      	beq.n	800b0c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d106      	bne.n	800b0fa <HAL_RCC_OscConfig+0x2ea>
 800b0ec:	4b64      	ldr	r3, [pc, #400]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b0ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0f0:	4a63      	ldr	r2, [pc, #396]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b0f2:	f043 0301 	orr.w	r3, r3, #1
 800b0f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0f8:	e01c      	b.n	800b134 <HAL_RCC_OscConfig+0x324>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	2b05      	cmp	r3, #5
 800b100:	d10c      	bne.n	800b11c <HAL_RCC_OscConfig+0x30c>
 800b102:	4b5f      	ldr	r3, [pc, #380]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b106:	4a5e      	ldr	r2, [pc, #376]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b108:	f043 0304 	orr.w	r3, r3, #4
 800b10c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b10e:	4b5c      	ldr	r3, [pc, #368]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b112:	4a5b      	ldr	r2, [pc, #364]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	6713      	str	r3, [r2, #112]	@ 0x70
 800b11a:	e00b      	b.n	800b134 <HAL_RCC_OscConfig+0x324>
 800b11c:	4b58      	ldr	r3, [pc, #352]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b11e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b120:	4a57      	ldr	r2, [pc, #348]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b122:	f023 0301 	bic.w	r3, r3, #1
 800b126:	6713      	str	r3, [r2, #112]	@ 0x70
 800b128:	4b55      	ldr	r3, [pc, #340]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b12a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b12c:	4a54      	ldr	r2, [pc, #336]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b12e:	f023 0304 	bic.w	r3, r3, #4
 800b132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d015      	beq.n	800b168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b13c:	f7fc fba4 	bl	8007888 <HAL_GetTick>
 800b140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b142:	e00a      	b.n	800b15a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b144:	f7fc fba0 	bl	8007888 <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b152:	4293      	cmp	r3, r2
 800b154:	d901      	bls.n	800b15a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b156:	2303      	movs	r3, #3
 800b158:	e0cb      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b15a:	4b49      	ldr	r3, [pc, #292]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b15c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b15e:	f003 0302 	and.w	r3, r3, #2
 800b162:	2b00      	cmp	r3, #0
 800b164:	d0ee      	beq.n	800b144 <HAL_RCC_OscConfig+0x334>
 800b166:	e014      	b.n	800b192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b168:	f7fc fb8e 	bl	8007888 <HAL_GetTick>
 800b16c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b16e:	e00a      	b.n	800b186 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b170:	f7fc fb8a 	bl	8007888 <HAL_GetTick>
 800b174:	4602      	mov	r2, r0
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b17e:	4293      	cmp	r3, r2
 800b180:	d901      	bls.n	800b186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e0b5      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b186:	4b3e      	ldr	r3, [pc, #248]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b18a:	f003 0302 	and.w	r3, r3, #2
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1ee      	bne.n	800b170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b192:	7dfb      	ldrb	r3, [r7, #23]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d105      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b198:	4b39      	ldr	r3, [pc, #228]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b19c:	4a38      	ldr	r2, [pc, #224]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b19e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 80a1 	beq.w	800b2f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b1ae:	4b34      	ldr	r3, [pc, #208]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f003 030c 	and.w	r3, r3, #12
 800b1b6:	2b08      	cmp	r3, #8
 800b1b8:	d05c      	beq.n	800b274 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	699b      	ldr	r3, [r3, #24]
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d141      	bne.n	800b246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1c2:	4b31      	ldr	r3, [pc, #196]	@ (800b288 <HAL_RCC_OscConfig+0x478>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1c8:	f7fc fb5e 	bl	8007888 <HAL_GetTick>
 800b1cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1d0:	f7fc fb5a 	bl	8007888 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e087      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1e2:	4b27      	ldr	r3, [pc, #156]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1f0      	bne.n	800b1d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	69da      	ldr	r2, [r3, #28]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	431a      	orrs	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fc:	019b      	lsls	r3, r3, #6
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b204:	085b      	lsrs	r3, r3, #1
 800b206:	3b01      	subs	r3, #1
 800b208:	041b      	lsls	r3, r3, #16
 800b20a:	431a      	orrs	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b210:	061b      	lsls	r3, r3, #24
 800b212:	491b      	ldr	r1, [pc, #108]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b214:	4313      	orrs	r3, r2
 800b216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b218:	4b1b      	ldr	r3, [pc, #108]	@ (800b288 <HAL_RCC_OscConfig+0x478>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b21e:	f7fc fb33 	bl	8007888 <HAL_GetTick>
 800b222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b224:	e008      	b.n	800b238 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b226:	f7fc fb2f 	bl	8007888 <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	2b02      	cmp	r3, #2
 800b232:	d901      	bls.n	800b238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e05c      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b238:	4b11      	ldr	r3, [pc, #68]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d0f0      	beq.n	800b226 <HAL_RCC_OscConfig+0x416>
 800b244:	e054      	b.n	800b2f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b246:	4b10      	ldr	r3, [pc, #64]	@ (800b288 <HAL_RCC_OscConfig+0x478>)
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b24c:	f7fc fb1c 	bl	8007888 <HAL_GetTick>
 800b250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b252:	e008      	b.n	800b266 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b254:	f7fc fb18 	bl	8007888 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d901      	bls.n	800b266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b262:	2303      	movs	r3, #3
 800b264:	e045      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b266:	4b06      	ldr	r3, [pc, #24]	@ (800b280 <HAL_RCC_OscConfig+0x470>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1f0      	bne.n	800b254 <HAL_RCC_OscConfig+0x444>
 800b272:	e03d      	b.n	800b2f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d107      	bne.n	800b28c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e038      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
 800b280:	40023800 	.word	0x40023800
 800b284:	40007000 	.word	0x40007000
 800b288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b28c:	4b1b      	ldr	r3, [pc, #108]	@ (800b2fc <HAL_RCC_OscConfig+0x4ec>)
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d028      	beq.n	800b2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d121      	bne.n	800b2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d11a      	bne.n	800b2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b2bc:	4013      	ands	r3, r2
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b2c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d111      	bne.n	800b2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d2:	085b      	lsrs	r3, r3, #1
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d107      	bne.n	800b2ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d001      	beq.n	800b2f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e000      	b.n	800b2f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	40023800 	.word	0x40023800

0800b300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e0cc      	b.n	800b4ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b314:	4b68      	ldr	r3, [pc, #416]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0307 	and.w	r3, r3, #7
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d90c      	bls.n	800b33c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b322:	4b65      	ldr	r3, [pc, #404]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	b2d2      	uxtb	r2, r2
 800b328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b32a:	4b63      	ldr	r3, [pc, #396]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0307 	and.w	r3, r3, #7
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d001      	beq.n	800b33c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e0b8      	b.n	800b4ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 0302 	and.w	r3, r3, #2
 800b344:	2b00      	cmp	r3, #0
 800b346:	d020      	beq.n	800b38a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0304 	and.w	r3, r3, #4
 800b350:	2b00      	cmp	r3, #0
 800b352:	d005      	beq.n	800b360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b354:	4b59      	ldr	r3, [pc, #356]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	4a58      	ldr	r2, [pc, #352]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b35a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b35e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0308 	and.w	r3, r3, #8
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d005      	beq.n	800b378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b36c:	4b53      	ldr	r3, [pc, #332]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	4a52      	ldr	r2, [pc, #328]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b378:	4b50      	ldr	r3, [pc, #320]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	494d      	ldr	r1, [pc, #308]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b386:	4313      	orrs	r3, r2
 800b388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	d044      	beq.n	800b420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d107      	bne.n	800b3ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b39e:	4b47      	ldr	r3, [pc, #284]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d119      	bne.n	800b3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e07f      	b.n	800b4ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d003      	beq.n	800b3be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d107      	bne.n	800b3ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3be:	4b3f      	ldr	r3, [pc, #252]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d109      	bne.n	800b3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e06f      	b.n	800b4ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3ce:	4b3b      	ldr	r3, [pc, #236]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 0302 	and.w	r3, r3, #2
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e067      	b.n	800b4ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b3de:	4b37      	ldr	r3, [pc, #220]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f023 0203 	bic.w	r2, r3, #3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	4934      	ldr	r1, [pc, #208]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b3f0:	f7fc fa4a 	bl	8007888 <HAL_GetTick>
 800b3f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3f6:	e00a      	b.n	800b40e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3f8:	f7fc fa46 	bl	8007888 <HAL_GetTick>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b406:	4293      	cmp	r3, r2
 800b408:	d901      	bls.n	800b40e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e04f      	b.n	800b4ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b40e:	4b2b      	ldr	r3, [pc, #172]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f003 020c 	and.w	r2, r3, #12
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d1eb      	bne.n	800b3f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b420:	4b25      	ldr	r3, [pc, #148]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0307 	and.w	r3, r3, #7
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d20c      	bcs.n	800b448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b42e:	4b22      	ldr	r3, [pc, #136]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	b2d2      	uxtb	r2, r2
 800b434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b436:	4b20      	ldr	r3, [pc, #128]	@ (800b4b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0307 	and.w	r3, r3, #7
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	429a      	cmp	r2, r3
 800b442:	d001      	beq.n	800b448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e032      	b.n	800b4ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 0304 	and.w	r3, r3, #4
 800b450:	2b00      	cmp	r3, #0
 800b452:	d008      	beq.n	800b466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b454:	4b19      	ldr	r3, [pc, #100]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	4916      	ldr	r1, [pc, #88]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b462:	4313      	orrs	r3, r2
 800b464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0308 	and.w	r3, r3, #8
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d009      	beq.n	800b486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b472:	4b12      	ldr	r3, [pc, #72]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	490e      	ldr	r1, [pc, #56]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b482:	4313      	orrs	r3, r2
 800b484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b486:	f000 f821 	bl	800b4cc <HAL_RCC_GetSysClockFreq>
 800b48a:	4602      	mov	r2, r0
 800b48c:	4b0b      	ldr	r3, [pc, #44]	@ (800b4bc <HAL_RCC_ClockConfig+0x1bc>)
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	091b      	lsrs	r3, r3, #4
 800b492:	f003 030f 	and.w	r3, r3, #15
 800b496:	490a      	ldr	r1, [pc, #40]	@ (800b4c0 <HAL_RCC_ClockConfig+0x1c0>)
 800b498:	5ccb      	ldrb	r3, [r1, r3]
 800b49a:	fa22 f303 	lsr.w	r3, r2, r3
 800b49e:	4a09      	ldr	r2, [pc, #36]	@ (800b4c4 <HAL_RCC_ClockConfig+0x1c4>)
 800b4a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b4a2:	4b09      	ldr	r3, [pc, #36]	@ (800b4c8 <HAL_RCC_ClockConfig+0x1c8>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fc f9aa 	bl	8007800 <HAL_InitTick>

  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	40023c00 	.word	0x40023c00
 800b4bc:	40023800 	.word	0x40023800
 800b4c0:	080367b4 	.word	0x080367b4
 800b4c4:	20000154 	.word	0x20000154
 800b4c8:	20000180 	.word	0x20000180

0800b4cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4d0:	b094      	sub	sp, #80	@ 0x50
 800b4d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4d8:	2300      	movs	r3, #0
 800b4da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4dc:	2300      	movs	r3, #0
 800b4de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4e4:	4b79      	ldr	r3, [pc, #484]	@ (800b6cc <HAL_RCC_GetSysClockFreq+0x200>)
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	f003 030c 	and.w	r3, r3, #12
 800b4ec:	2b08      	cmp	r3, #8
 800b4ee:	d00d      	beq.n	800b50c <HAL_RCC_GetSysClockFreq+0x40>
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	f200 80e1 	bhi.w	800b6b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d002      	beq.n	800b500 <HAL_RCC_GetSysClockFreq+0x34>
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	d003      	beq.n	800b506 <HAL_RCC_GetSysClockFreq+0x3a>
 800b4fe:	e0db      	b.n	800b6b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b500:	4b73      	ldr	r3, [pc, #460]	@ (800b6d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800b502:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800b504:	e0db      	b.n	800b6be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b506:	4b73      	ldr	r3, [pc, #460]	@ (800b6d4 <HAL_RCC_GetSysClockFreq+0x208>)
 800b508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b50a:	e0d8      	b.n	800b6be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b50c:	4b6f      	ldr	r3, [pc, #444]	@ (800b6cc <HAL_RCC_GetSysClockFreq+0x200>)
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b514:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b516:	4b6d      	ldr	r3, [pc, #436]	@ (800b6cc <HAL_RCC_GetSysClockFreq+0x200>)
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d063      	beq.n	800b5ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b522:	4b6a      	ldr	r3, [pc, #424]	@ (800b6cc <HAL_RCC_GetSysClockFreq+0x200>)
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	099b      	lsrs	r3, r3, #6
 800b528:	2200      	movs	r2, #0
 800b52a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b52c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b534:	633b      	str	r3, [r7, #48]	@ 0x30
 800b536:	2300      	movs	r3, #0
 800b538:	637b      	str	r3, [r7, #52]	@ 0x34
 800b53a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b53e:	4622      	mov	r2, r4
 800b540:	462b      	mov	r3, r5
 800b542:	f04f 0000 	mov.w	r0, #0
 800b546:	f04f 0100 	mov.w	r1, #0
 800b54a:	0159      	lsls	r1, r3, #5
 800b54c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b550:	0150      	lsls	r0, r2, #5
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4621      	mov	r1, r4
 800b558:	1a51      	subs	r1, r2, r1
 800b55a:	6139      	str	r1, [r7, #16]
 800b55c:	4629      	mov	r1, r5
 800b55e:	eb63 0301 	sbc.w	r3, r3, r1
 800b562:	617b      	str	r3, [r7, #20]
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b570:	4659      	mov	r1, fp
 800b572:	018b      	lsls	r3, r1, #6
 800b574:	4651      	mov	r1, sl
 800b576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b57a:	4651      	mov	r1, sl
 800b57c:	018a      	lsls	r2, r1, #6
 800b57e:	4651      	mov	r1, sl
 800b580:	ebb2 0801 	subs.w	r8, r2, r1
 800b584:	4659      	mov	r1, fp
 800b586:	eb63 0901 	sbc.w	r9, r3, r1
 800b58a:	f04f 0200 	mov.w	r2, #0
 800b58e:	f04f 0300 	mov.w	r3, #0
 800b592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b59a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b59e:	4690      	mov	r8, r2
 800b5a0:	4699      	mov	r9, r3
 800b5a2:	4623      	mov	r3, r4
 800b5a4:	eb18 0303 	adds.w	r3, r8, r3
 800b5a8:	60bb      	str	r3, [r7, #8]
 800b5aa:	462b      	mov	r3, r5
 800b5ac:	eb49 0303 	adc.w	r3, r9, r3
 800b5b0:	60fb      	str	r3, [r7, #12]
 800b5b2:	f04f 0200 	mov.w	r2, #0
 800b5b6:	f04f 0300 	mov.w	r3, #0
 800b5ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b5be:	4629      	mov	r1, r5
 800b5c0:	024b      	lsls	r3, r1, #9
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	024a      	lsls	r2, r1, #9
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b5dc:	f7f4 fe06 	bl	80001ec <__aeabi_uldivmod>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5e8:	e058      	b.n	800b69c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5ea:	4b38      	ldr	r3, [pc, #224]	@ (800b6cc <HAL_RCC_GetSysClockFreq+0x200>)
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	099b      	lsrs	r3, r3, #6
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b5fa:	623b      	str	r3, [r7, #32]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800b600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b604:	4642      	mov	r2, r8
 800b606:	464b      	mov	r3, r9
 800b608:	f04f 0000 	mov.w	r0, #0
 800b60c:	f04f 0100 	mov.w	r1, #0
 800b610:	0159      	lsls	r1, r3, #5
 800b612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b616:	0150      	lsls	r0, r2, #5
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4641      	mov	r1, r8
 800b61e:	ebb2 0a01 	subs.w	sl, r2, r1
 800b622:	4649      	mov	r1, r9
 800b624:	eb63 0b01 	sbc.w	fp, r3, r1
 800b628:	f04f 0200 	mov.w	r2, #0
 800b62c:	f04f 0300 	mov.w	r3, #0
 800b630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b63c:	ebb2 040a 	subs.w	r4, r2, sl
 800b640:	eb63 050b 	sbc.w	r5, r3, fp
 800b644:	f04f 0200 	mov.w	r2, #0
 800b648:	f04f 0300 	mov.w	r3, #0
 800b64c:	00eb      	lsls	r3, r5, #3
 800b64e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b652:	00e2      	lsls	r2, r4, #3
 800b654:	4614      	mov	r4, r2
 800b656:	461d      	mov	r5, r3
 800b658:	4643      	mov	r3, r8
 800b65a:	18e3      	adds	r3, r4, r3
 800b65c:	603b      	str	r3, [r7, #0]
 800b65e:	464b      	mov	r3, r9
 800b660:	eb45 0303 	adc.w	r3, r5, r3
 800b664:	607b      	str	r3, [r7, #4]
 800b666:	f04f 0200 	mov.w	r2, #0
 800b66a:	f04f 0300 	mov.w	r3, #0
 800b66e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b672:	4629      	mov	r1, r5
 800b674:	028b      	lsls	r3, r1, #10
 800b676:	4621      	mov	r1, r4
 800b678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b67c:	4621      	mov	r1, r4
 800b67e:	028a      	lsls	r2, r1, #10
 800b680:	4610      	mov	r0, r2
 800b682:	4619      	mov	r1, r3
 800b684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b686:	2200      	movs	r2, #0
 800b688:	61bb      	str	r3, [r7, #24]
 800b68a:	61fa      	str	r2, [r7, #28]
 800b68c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b690:	f7f4 fdac 	bl	80001ec <__aeabi_uldivmod>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	4613      	mov	r3, r2
 800b69a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b69c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6cc <HAL_RCC_GetSysClockFreq+0x200>)
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	0c1b      	lsrs	r3, r3, #16
 800b6a2:	f003 0303 	and.w	r3, r3, #3
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800b6ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b6ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b6b6:	e002      	b.n	800b6be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b6b8:	4b05      	ldr	r3, [pc, #20]	@ (800b6d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800b6ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b6bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b6be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3750      	adds	r7, #80	@ 0x50
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6ca:	bf00      	nop
 800b6cc:	40023800 	.word	0x40023800
 800b6d0:	00f42400 	.word	0x00f42400
 800b6d4:	007a1200 	.word	0x007a1200

0800b6d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6dc:	4b03      	ldr	r3, [pc, #12]	@ (800b6ec <HAL_RCC_GetHCLKFreq+0x14>)
 800b6de:	681b      	ldr	r3, [r3, #0]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	20000154 	.word	0x20000154

0800b6f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b6f4:	f7ff fff0 	bl	800b6d8 <HAL_RCC_GetHCLKFreq>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	4b05      	ldr	r3, [pc, #20]	@ (800b710 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	0a9b      	lsrs	r3, r3, #10
 800b700:	f003 0307 	and.w	r3, r3, #7
 800b704:	4903      	ldr	r1, [pc, #12]	@ (800b714 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b706:	5ccb      	ldrb	r3, [r1, r3]
 800b708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	40023800 	.word	0x40023800
 800b714:	080367c4 	.word	0x080367c4

0800b718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b71c:	f7ff ffdc 	bl	800b6d8 <HAL_RCC_GetHCLKFreq>
 800b720:	4602      	mov	r2, r0
 800b722:	4b05      	ldr	r3, [pc, #20]	@ (800b738 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	0b5b      	lsrs	r3, r3, #13
 800b728:	f003 0307 	and.w	r3, r3, #7
 800b72c:	4903      	ldr	r1, [pc, #12]	@ (800b73c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b72e:	5ccb      	ldrb	r3, [r1, r3]
 800b730:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b734:	4618      	mov	r0, r3
 800b736:	bd80      	pop	{r7, pc}
 800b738:	40023800 	.word	0x40023800
 800b73c:	080367c4 	.word	0x080367c4

0800b740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e07b      	b.n	800b84a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b756:	2b00      	cmp	r3, #0
 800b758:	d108      	bne.n	800b76c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b762:	d009      	beq.n	800b778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	61da      	str	r2, [r3, #28]
 800b76a:	e005      	b.n	800b778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fa fd30 	bl	80061f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b7c0:	431a      	orrs	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	431a      	orrs	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7fc:	ea42 0103 	orr.w	r1, r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b804:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	430a      	orrs	r2, r1
 800b80e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	0c1b      	lsrs	r3, r3, #16
 800b816:	f003 0104 	and.w	r1, r3, #4
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81e:	f003 0210 	and.w	r2, r3, #16
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	430a      	orrs	r2, r1
 800b828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	69da      	ldr	r2, [r3, #28]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b088      	sub	sp, #32
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	603b      	str	r3, [r7, #0]
 800b85e:	4613      	mov	r3, r2
 800b860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d101      	bne.n	800b874 <HAL_SPI_Transmit+0x22>
 800b870:	2302      	movs	r3, #2
 800b872:	e126      	b.n	800bac2 <HAL_SPI_Transmit+0x270>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b87c:	f7fc f804 	bl	8007888 <HAL_GetTick>
 800b880:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b882:	88fb      	ldrh	r3, [r7, #6]
 800b884:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d002      	beq.n	800b898 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b892:	2302      	movs	r3, #2
 800b894:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b896:	e10b      	b.n	800bab0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <HAL_SPI_Transmit+0x52>
 800b89e:	88fb      	ldrh	r3, [r7, #6]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d102      	bne.n	800b8aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b8a8:	e102      	b.n	800bab0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	88fa      	ldrh	r2, [r7, #6]
 800b8c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	88fa      	ldrh	r2, [r7, #6]
 800b8c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8f0:	d10f      	bne.n	800b912 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b910:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b91c:	2b40      	cmp	r3, #64	@ 0x40
 800b91e:	d007      	beq.n	800b930 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b92e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b938:	d14b      	bne.n	800b9d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d002      	beq.n	800b948 <HAL_SPI_Transmit+0xf6>
 800b942:	8afb      	ldrh	r3, [r7, #22]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d13e      	bne.n	800b9c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b94c:	881a      	ldrh	r2, [r3, #0]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b958:	1c9a      	adds	r2, r3, #2
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b962:	b29b      	uxth	r3, r3
 800b964:	3b01      	subs	r3, #1
 800b966:	b29a      	uxth	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b96c:	e02b      	b.n	800b9c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d112      	bne.n	800b9a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b980:	881a      	ldrh	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b98c:	1c9a      	adds	r2, r3, #2
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b996:	b29b      	uxth	r3, r3
 800b998:	3b01      	subs	r3, #1
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b9a0:	e011      	b.n	800b9c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9a2:	f7fb ff71 	bl	8007888 <HAL_GetTick>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d803      	bhi.n	800b9ba <HAL_SPI_Transmit+0x168>
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b8:	d102      	bne.n	800b9c0 <HAL_SPI_Transmit+0x16e>
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d102      	bne.n	800b9c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b9c4:	e074      	b.n	800bab0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1ce      	bne.n	800b96e <HAL_SPI_Transmit+0x11c>
 800b9d0:	e04c      	b.n	800ba6c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d002      	beq.n	800b9e0 <HAL_SPI_Transmit+0x18e>
 800b9da:	8afb      	ldrh	r3, [r7, #22]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d140      	bne.n	800ba62 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	330c      	adds	r3, #12
 800b9ea:	7812      	ldrb	r2, [r2, #0]
 800b9ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ba06:	e02c      	b.n	800ba62 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	f003 0302 	and.w	r3, r3, #2
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d113      	bne.n	800ba3e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	330c      	adds	r3, #12
 800ba20:	7812      	ldrb	r2, [r2, #0]
 800ba22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	3b01      	subs	r3, #1
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ba3c:	e011      	b.n	800ba62 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba3e:	f7fb ff23 	bl	8007888 <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d803      	bhi.n	800ba56 <HAL_SPI_Transmit+0x204>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d102      	bne.n	800ba5c <HAL_SPI_Transmit+0x20a>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d102      	bne.n	800ba62 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ba60:	e026      	b.n	800bab0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1cd      	bne.n	800ba08 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba6c:	69ba      	ldr	r2, [r7, #24]
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 fce9 	bl	800c448 <SPI_EndRxTxTransaction>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	613b      	str	r3, [r7, #16]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	613b      	str	r3, [r7, #16]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	613b      	str	r3, [r7, #16]
 800ba9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	77fb      	strb	r3, [r7, #31]
 800baac:	e000      	b.n	800bab0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800baae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800bac0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3720      	adds	r7, #32
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b088      	sub	sp, #32
 800bace:	af02      	add	r7, sp, #8
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	603b      	str	r3, [r7, #0]
 800bad6:	4613      	mov	r3, r2
 800bad8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bae6:	d112      	bne.n	800bb0e <HAL_SPI_Receive+0x44>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10e      	bne.n	800bb0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2204      	movs	r2, #4
 800baf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800baf8:	88fa      	ldrh	r2, [r7, #6]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	4613      	mov	r3, r2
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	68b9      	ldr	r1, [r7, #8]
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f8f1 	bl	800bcec <HAL_SPI_TransmitReceive>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	e0ea      	b.n	800bce4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d101      	bne.n	800bb1c <HAL_SPI_Receive+0x52>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e0e3      	b.n	800bce4 <HAL_SPI_Receive+0x21a>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb24:	f7fb feb0 	bl	8007888 <HAL_GetTick>
 800bb28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d002      	beq.n	800bb3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bb36:	2302      	movs	r3, #2
 800bb38:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bb3a:	e0ca      	b.n	800bcd2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d002      	beq.n	800bb48 <HAL_SPI_Receive+0x7e>
 800bb42:	88fb      	ldrh	r3, [r7, #6]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d102      	bne.n	800bb4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bb4c:	e0c1      	b.n	800bcd2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2204      	movs	r2, #4
 800bb52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	88fa      	ldrh	r2, [r7, #6]
 800bb66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	88fa      	ldrh	r2, [r7, #6]
 800bb6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb94:	d10f      	bne.n	800bbb6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bba4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bbb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbc0:	2b40      	cmp	r3, #64	@ 0x40
 800bbc2:	d007      	beq.n	800bbd4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d162      	bne.n	800bca2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bbdc:	e02e      	b.n	800bc3c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d115      	bne.n	800bc18 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f103 020c 	add.w	r2, r3, #12
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbf8:	7812      	ldrb	r2, [r2, #0]
 800bbfa:	b2d2      	uxtb	r2, r2
 800bbfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bc16:	e011      	b.n	800bc3c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc18:	f7fb fe36 	bl	8007888 <HAL_GetTick>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d803      	bhi.n	800bc30 <HAL_SPI_Receive+0x166>
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2e:	d102      	bne.n	800bc36 <HAL_SPI_Receive+0x16c>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d102      	bne.n	800bc3c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bc36:	2303      	movs	r3, #3
 800bc38:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bc3a:	e04a      	b.n	800bcd2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1cb      	bne.n	800bbde <HAL_SPI_Receive+0x114>
 800bc46:	e031      	b.n	800bcac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f003 0301 	and.w	r3, r3, #1
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d113      	bne.n	800bc7e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc60:	b292      	uxth	r2, r2
 800bc62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc68:	1c9a      	adds	r2, r3, #2
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	3b01      	subs	r3, #1
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bc7c:	e011      	b.n	800bca2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc7e:	f7fb fe03 	bl	8007888 <HAL_GetTick>
 800bc82:	4602      	mov	r2, r0
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d803      	bhi.n	800bc96 <HAL_SPI_Receive+0x1cc>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d102      	bne.n	800bc9c <HAL_SPI_Receive+0x1d2>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bca0:	e017      	b.n	800bcd2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1cd      	bne.n	800bc48 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f000 fb63 	bl	800c37c <SPI_EndRxTransaction>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2220      	movs	r2, #32
 800bcc0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	75fb      	strb	r3, [r7, #23]
 800bcce:	e000      	b.n	800bcd2 <HAL_SPI_Receive+0x208>
  }

error :
 800bcd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08c      	sub	sp, #48	@ 0x30
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d101      	bne.n	800bd12 <HAL_SPI_TransmitReceive+0x26>
 800bd0e:	2302      	movs	r3, #2
 800bd10:	e18a      	b.n	800c028 <HAL_SPI_TransmitReceive+0x33c>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd1a:	f7fb fdb5 	bl	8007888 <HAL_GetTick>
 800bd1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bd26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bd30:	887b      	ldrh	r3, [r7, #2]
 800bd32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bd34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d00f      	beq.n	800bd5c <HAL_SPI_TransmitReceive+0x70>
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bd42:	d107      	bne.n	800bd54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d103      	bne.n	800bd54 <HAL_SPI_TransmitReceive+0x68>
 800bd4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd50:	2b04      	cmp	r3, #4
 800bd52:	d003      	beq.n	800bd5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bd54:	2302      	movs	r3, #2
 800bd56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800bd5a:	e15b      	b.n	800c014 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d005      	beq.n	800bd6e <HAL_SPI_TransmitReceive+0x82>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d002      	beq.n	800bd6e <HAL_SPI_TransmitReceive+0x82>
 800bd68:	887b      	ldrh	r3, [r7, #2]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d103      	bne.n	800bd76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800bd74:	e14e      	b.n	800c014 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	2b04      	cmp	r3, #4
 800bd80:	d003      	beq.n	800bd8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2205      	movs	r2, #5
 800bd86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	887a      	ldrh	r2, [r7, #2]
 800bd9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	887a      	ldrh	r2, [r7, #2]
 800bda0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	887a      	ldrh	r2, [r7, #2]
 800bdac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	887a      	ldrh	r2, [r7, #2]
 800bdb2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdca:	2b40      	cmp	r3, #64	@ 0x40
 800bdcc:	d007      	beq.n	800bdde <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bddc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bde6:	d178      	bne.n	800beda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d002      	beq.n	800bdf6 <HAL_SPI_TransmitReceive+0x10a>
 800bdf0:	8b7b      	ldrh	r3, [r7, #26]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d166      	bne.n	800bec4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdfa:	881a      	ldrh	r2, [r3, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be06:	1c9a      	adds	r2, r3, #2
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be10:	b29b      	uxth	r3, r3
 800be12:	3b01      	subs	r3, #1
 800be14:	b29a      	uxth	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be1a:	e053      	b.n	800bec4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f003 0302 	and.w	r3, r3, #2
 800be26:	2b02      	cmp	r3, #2
 800be28:	d11b      	bne.n	800be62 <HAL_SPI_TransmitReceive+0x176>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be2e:	b29b      	uxth	r3, r3
 800be30:	2b00      	cmp	r3, #0
 800be32:	d016      	beq.n	800be62 <HAL_SPI_TransmitReceive+0x176>
 800be34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be36:	2b01      	cmp	r3, #1
 800be38:	d113      	bne.n	800be62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be3e:	881a      	ldrh	r2, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be4a:	1c9a      	adds	r2, r3, #2
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be54:	b29b      	uxth	r3, r3
 800be56:	3b01      	subs	r3, #1
 800be58:	b29a      	uxth	r2, r3
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be5e:	2300      	movs	r3, #0
 800be60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d119      	bne.n	800bea4 <HAL_SPI_TransmitReceive+0x1b8>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be74:	b29b      	uxth	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d014      	beq.n	800bea4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68da      	ldr	r2, [r3, #12]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be84:	b292      	uxth	r2, r2
 800be86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be8c:	1c9a      	adds	r2, r3, #2
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be96:	b29b      	uxth	r3, r3
 800be98:	3b01      	subs	r3, #1
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bea0:	2301      	movs	r3, #1
 800bea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bea4:	f7fb fcf0 	bl	8007888 <HAL_GetTick>
 800bea8:	4602      	mov	r2, r0
 800beaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d807      	bhi.n	800bec4 <HAL_SPI_TransmitReceive+0x1d8>
 800beb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beba:	d003      	beq.n	800bec4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bebc:	2303      	movs	r3, #3
 800bebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800bec2:	e0a7      	b.n	800c014 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bec8:	b29b      	uxth	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1a6      	bne.n	800be1c <HAL_SPI_TransmitReceive+0x130>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1a1      	bne.n	800be1c <HAL_SPI_TransmitReceive+0x130>
 800bed8:	e07c      	b.n	800bfd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d002      	beq.n	800bee8 <HAL_SPI_TransmitReceive+0x1fc>
 800bee2:	8b7b      	ldrh	r3, [r7, #26]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d16b      	bne.n	800bfc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	330c      	adds	r3, #12
 800bef2:	7812      	ldrb	r2, [r2, #0]
 800bef4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	3b01      	subs	r3, #1
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf0e:	e057      	b.n	800bfc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	f003 0302 	and.w	r3, r3, #2
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d11c      	bne.n	800bf58 <HAL_SPI_TransmitReceive+0x26c>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d017      	beq.n	800bf58 <HAL_SPI_TransmitReceive+0x26c>
 800bf28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d114      	bne.n	800bf58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	330c      	adds	r3, #12
 800bf38:	7812      	ldrb	r2, [r2, #0]
 800bf3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d119      	bne.n	800bf9a <HAL_SPI_TransmitReceive+0x2ae>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d014      	beq.n	800bf9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68da      	ldr	r2, [r3, #12]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf7a:	b2d2      	uxtb	r2, r2
 800bf7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf96:	2301      	movs	r3, #1
 800bf98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bf9a:	f7fb fc75 	bl	8007888 <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d803      	bhi.n	800bfb2 <HAL_SPI_TransmitReceive+0x2c6>
 800bfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb0:	d102      	bne.n	800bfb8 <HAL_SPI_TransmitReceive+0x2cc>
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d103      	bne.n	800bfc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800bfbe:	e029      	b.n	800c014 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1a2      	bne.n	800bf10 <HAL_SPI_TransmitReceive+0x224>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d19d      	bne.n	800bf10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 fa35 	bl	800c448 <SPI_EndRxTxTransaction>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d006      	beq.n	800bff2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2220      	movs	r2, #32
 800bfee:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800bff0:	e010      	b.n	800c014 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10b      	bne.n	800c012 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bffa:	2300      	movs	r3, #0
 800bffc:	617b      	str	r3, [r7, #20]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	617b      	str	r3, [r7, #20]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	617b      	str	r3, [r7, #20]
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	e000      	b.n	800c014 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c012:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800c024:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3730      	adds	r7, #48	@ 0x30
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	099b      	lsrs	r3, r3, #6
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10f      	bne.n	800c074 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00a      	beq.n	800c074 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	099b      	lsrs	r3, r3, #6
 800c062:	f003 0301 	and.w	r3, r3, #1
 800c066:	2b00      	cmp	r3, #0
 800c068:	d004      	beq.n	800c074 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	4798      	blx	r3
    return;
 800c072:	e0d7      	b.n	800c224 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	085b      	lsrs	r3, r3, #1
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00a      	beq.n	800c096 <HAL_SPI_IRQHandler+0x66>
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	09db      	lsrs	r3, r3, #7
 800c084:	f003 0301 	and.w	r3, r3, #1
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d004      	beq.n	800c096 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	4798      	blx	r3
    return;
 800c094:	e0c6      	b.n	800c224 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	095b      	lsrs	r3, r3, #5
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10c      	bne.n	800c0bc <HAL_SPI_IRQHandler+0x8c>
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	099b      	lsrs	r3, r3, #6
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d106      	bne.n	800c0bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	0a1b      	lsrs	r3, r3, #8
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 80b4 	beq.w	800c224 <HAL_SPI_IRQHandler+0x1f4>
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	095b      	lsrs	r3, r3, #5
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 80ad 	beq.w	800c224 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	099b      	lsrs	r3, r3, #6
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d023      	beq.n	800c11e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d011      	beq.n	800c106 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0e6:	f043 0204 	orr.w	r2, r3, #4
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	617b      	str	r3, [r7, #20]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	617b      	str	r3, [r7, #20]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	617b      	str	r3, [r7, #20]
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	e00b      	b.n	800c11e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c106:	2300      	movs	r3, #0
 800c108:	613b      	str	r3, [r7, #16]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	693b      	ldr	r3, [r7, #16]
        return;
 800c11c:	e082      	b.n	800c224 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	095b      	lsrs	r3, r3, #5
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d014      	beq.n	800c154 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c12e:	f043 0201 	orr.w	r2, r3, #1
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	0a1b      	lsrs	r3, r3, #8
 800c158:	f003 0301 	and.w	r3, r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00c      	beq.n	800c17a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c164:	f043 0208 	orr.w	r2, r3, #8
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c16c:	2300      	movs	r3, #0
 800c16e:	60bb      	str	r3, [r7, #8]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	60bb      	str	r3, [r7, #8]
 800c178:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d04f      	beq.n	800c222 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c190:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	f003 0302 	and.w	r3, r3, #2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d104      	bne.n	800c1ae <HAL_SPI_IRQHandler+0x17e>
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d034      	beq.n	800c218 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f022 0203 	bic.w	r2, r2, #3
 800c1bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d011      	beq.n	800c1ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1ca:	4a18      	ldr	r2, [pc, #96]	@ (800c22c <HAL_SPI_IRQHandler+0x1fc>)
 800c1cc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fb fd48 	bl	8007c68 <HAL_DMA_Abort_IT>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d005      	beq.n	800c1ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d016      	beq.n	800c220 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c22c <HAL_SPI_IRQHandler+0x1fc>)
 800c1f8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fb fd32 	bl	8007c68 <HAL_DMA_Abort_IT>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c20e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800c216:	e003      	b.n	800c220 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f809 	bl	800c230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c21e:	e000      	b.n	800c222 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c220:	bf00      	nop
    return;
 800c222:	bf00      	nop
  }
}
 800c224:	3720      	adds	r7, #32
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	0800c245 	.word	0x0800c245

0800c230 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c250:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2200      	movs	r2, #0
 800c256:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f7ff ffe6 	bl	800c230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c264:	bf00      	nop
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	603b      	str	r3, [r7, #0]
 800c278:	4613      	mov	r3, r2
 800c27a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c27c:	f7fb fb04 	bl	8007888 <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c284:	1a9b      	subs	r3, r3, r2
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	4413      	add	r3, r2
 800c28a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c28c:	f7fb fafc 	bl	8007888 <HAL_GetTick>
 800c290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c292:	4b39      	ldr	r3, [pc, #228]	@ (800c378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	015b      	lsls	r3, r3, #5
 800c298:	0d1b      	lsrs	r3, r3, #20
 800c29a:	69fa      	ldr	r2, [r7, #28]
 800c29c:	fb02 f303 	mul.w	r3, r2, r3
 800c2a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c2a2:	e054      	b.n	800c34e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2aa:	d050      	beq.n	800c34e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c2ac:	f7fb faec 	bl	8007888 <HAL_GetTick>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	69fa      	ldr	r2, [r7, #28]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d902      	bls.n	800c2c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d13d      	bne.n	800c33e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c2d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c2da:	d111      	bne.n	800c300 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2e4:	d004      	beq.n	800c2f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2ee:	d107      	bne.n	800c300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c2fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c308:	d10f      	bne.n	800c32a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c318:	601a      	str	r2, [r3, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2201      	movs	r2, #1
 800c32e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e017      	b.n	800c36e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c344:	2300      	movs	r3, #0
 800c346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	689a      	ldr	r2, [r3, #8]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	4013      	ands	r3, r2
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	bf0c      	ite	eq
 800c35e:	2301      	moveq	r3, #1
 800c360:	2300      	movne	r3, #0
 800c362:	b2db      	uxtb	r3, r3
 800c364:	461a      	mov	r2, r3
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d19b      	bne.n	800c2a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3720      	adds	r7, #32
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20000154 	.word	0x20000154

0800c37c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af02      	add	r7, sp, #8
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c390:	d111      	bne.n	800c3b6 <SPI_EndRxTransaction+0x3a>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c39a:	d004      	beq.n	800c3a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3a4:	d107      	bne.n	800c3b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c3b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c3be:	d12a      	bne.n	800c416 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3c8:	d012      	beq.n	800c3f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2180      	movs	r1, #128	@ 0x80
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f7ff ff49 	bl	800c26c <SPI_WaitFlagStateUntilTimeout>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d02d      	beq.n	800c43c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3e4:	f043 0220 	orr.w	r2, r3, #32
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	e026      	b.n	800c43e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7ff ff36 	bl	800c26c <SPI_WaitFlagStateUntilTimeout>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d01a      	beq.n	800c43c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c40a:	f043 0220 	orr.w	r2, r3, #32
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800c412:	2303      	movs	r3, #3
 800c414:	e013      	b.n	800c43e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2200      	movs	r2, #0
 800c41e:	2101      	movs	r1, #1
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f7ff ff23 	bl	800c26c <SPI_WaitFlagStateUntilTimeout>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d007      	beq.n	800c43c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c430:	f043 0220 	orr.w	r2, r3, #32
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c438:	2303      	movs	r3, #3
 800c43a:	e000      	b.n	800c43e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af02      	add	r7, sp, #8
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c454:	4b1b      	ldr	r3, [pc, #108]	@ (800c4c4 <SPI_EndRxTxTransaction+0x7c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a1b      	ldr	r2, [pc, #108]	@ (800c4c8 <SPI_EndRxTxTransaction+0x80>)
 800c45a:	fba2 2303 	umull	r2, r3, r2, r3
 800c45e:	0d5b      	lsrs	r3, r3, #21
 800c460:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c464:	fb02 f303 	mul.w	r3, r2, r3
 800c468:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c472:	d112      	bne.n	800c49a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2200      	movs	r2, #0
 800c47c:	2180      	movs	r1, #128	@ 0x80
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff fef4 	bl	800c26c <SPI_WaitFlagStateUntilTimeout>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d016      	beq.n	800c4b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c48e:	f043 0220 	orr.w	r2, r3, #32
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c496:	2303      	movs	r3, #3
 800c498:	e00f      	b.n	800c4ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00a      	beq.n	800c4b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4b0:	2b80      	cmp	r3, #128	@ 0x80
 800c4b2:	d0f2      	beq.n	800c49a <SPI_EndRxTxTransaction+0x52>
 800c4b4:	e000      	b.n	800c4b8 <SPI_EndRxTxTransaction+0x70>
        break;
 800c4b6:	bf00      	nop
  }

  return HAL_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20000154 	.word	0x20000154
 800c4c8:	165e9f81 	.word	0x165e9f81

0800c4cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e041      	b.n	800c562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7fa fdb0 	bl	8007058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3304      	adds	r3, #4
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f000 fae0 	bl	800cad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
	...

0800c56c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d001      	beq.n	800c584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	e04e      	b.n	800c622 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68da      	ldr	r2, [r3, #12]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0201 	orr.w	r2, r2, #1
 800c59a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a23      	ldr	r2, [pc, #140]	@ (800c630 <HAL_TIM_Base_Start_IT+0xc4>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d022      	beq.n	800c5ec <HAL_TIM_Base_Start_IT+0x80>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5ae:	d01d      	beq.n	800c5ec <HAL_TIM_Base_Start_IT+0x80>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a1f      	ldr	r2, [pc, #124]	@ (800c634 <HAL_TIM_Base_Start_IT+0xc8>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d018      	beq.n	800c5ec <HAL_TIM_Base_Start_IT+0x80>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a1e      	ldr	r2, [pc, #120]	@ (800c638 <HAL_TIM_Base_Start_IT+0xcc>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d013      	beq.n	800c5ec <HAL_TIM_Base_Start_IT+0x80>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a1c      	ldr	r2, [pc, #112]	@ (800c63c <HAL_TIM_Base_Start_IT+0xd0>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d00e      	beq.n	800c5ec <HAL_TIM_Base_Start_IT+0x80>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a1b      	ldr	r2, [pc, #108]	@ (800c640 <HAL_TIM_Base_Start_IT+0xd4>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d009      	beq.n	800c5ec <HAL_TIM_Base_Start_IT+0x80>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a19      	ldr	r2, [pc, #100]	@ (800c644 <HAL_TIM_Base_Start_IT+0xd8>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d004      	beq.n	800c5ec <HAL_TIM_Base_Start_IT+0x80>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a18      	ldr	r2, [pc, #96]	@ (800c648 <HAL_TIM_Base_Start_IT+0xdc>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d111      	bne.n	800c610 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2b06      	cmp	r3, #6
 800c5fc:	d010      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f042 0201 	orr.w	r2, r2, #1
 800c60c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c60e:	e007      	b.n	800c620 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f042 0201 	orr.w	r2, r2, #1
 800c61e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	40010000 	.word	0x40010000
 800c634:	40000400 	.word	0x40000400
 800c638:	40000800 	.word	0x40000800
 800c63c:	40000c00 	.word	0x40000c00
 800c640:	40010400 	.word	0x40010400
 800c644:	40014000 	.word	0x40014000
 800c648:	40001800 	.word	0x40001800

0800c64c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e041      	b.n	800c6e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b00      	cmp	r3, #0
 800c668:	d106      	bne.n	800c678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7fa fcce 	bl	8007014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2202      	movs	r2, #2
 800c67c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3304      	adds	r3, #4
 800c688:	4619      	mov	r1, r3
 800c68a:	4610      	mov	r0, r2
 800c68c:	f000 fa20 	bl	800cad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	f003 0302 	and.w	r3, r3, #2
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d122      	bne.n	800c746 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	f003 0302 	and.w	r3, r3, #2
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d11b      	bne.n	800c746 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f06f 0202 	mvn.w	r2, #2
 800c716:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	f003 0303 	and.w	r3, r3, #3
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d003      	beq.n	800c734 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f9b1 	bl	800ca94 <HAL_TIM_IC_CaptureCallback>
 800c732:	e005      	b.n	800c740 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f9a3 	bl	800ca80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f9b4 	bl	800caa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	f003 0304 	and.w	r3, r3, #4
 800c750:	2b04      	cmp	r3, #4
 800c752:	d122      	bne.n	800c79a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d11b      	bne.n	800c79a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f06f 0204 	mvn.w	r2, #4
 800c76a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f987 	bl	800ca94 <HAL_TIM_IC_CaptureCallback>
 800c786:	e005      	b.n	800c794 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f979 	bl	800ca80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f98a 	bl	800caa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	f003 0308 	and.w	r3, r3, #8
 800c7a4:	2b08      	cmp	r3, #8
 800c7a6:	d122      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	f003 0308 	and.w	r3, r3, #8
 800c7b2:	2b08      	cmp	r3, #8
 800c7b4:	d11b      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f06f 0208 	mvn.w	r2, #8
 800c7be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2204      	movs	r2, #4
 800c7c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	f003 0303 	and.w	r3, r3, #3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d003      	beq.n	800c7dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f95d 	bl	800ca94 <HAL_TIM_IC_CaptureCallback>
 800c7da:	e005      	b.n	800c7e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f94f 	bl	800ca80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f960 	bl	800caa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	f003 0310 	and.w	r3, r3, #16
 800c7f8:	2b10      	cmp	r3, #16
 800c7fa:	d122      	bne.n	800c842 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f003 0310 	and.w	r3, r3, #16
 800c806:	2b10      	cmp	r3, #16
 800c808:	d11b      	bne.n	800c842 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f06f 0210 	mvn.w	r2, #16
 800c812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2208      	movs	r2, #8
 800c818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	69db      	ldr	r3, [r3, #28]
 800c820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f933 	bl	800ca94 <HAL_TIM_IC_CaptureCallback>
 800c82e:	e005      	b.n	800c83c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f925 	bl	800ca80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f936 	bl	800caa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d10e      	bne.n	800c86e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	f003 0301 	and.w	r3, r3, #1
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d107      	bne.n	800c86e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f06f 0201 	mvn.w	r2, #1
 800c866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7fa fb15 	bl	8006e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c878:	2b80      	cmp	r3, #128	@ 0x80
 800c87a:	d10e      	bne.n	800c89a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c886:	2b80      	cmp	r3, #128	@ 0x80
 800c888:	d107      	bne.n	800c89a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fbf1 	bl	800d07c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a4:	2b40      	cmp	r3, #64	@ 0x40
 800c8a6:	d10e      	bne.n	800c8c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b2:	2b40      	cmp	r3, #64	@ 0x40
 800c8b4:	d107      	bne.n	800c8c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c8be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f8fb 	bl	800cabc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	f003 0320 	and.w	r3, r3, #32
 800c8d0:	2b20      	cmp	r3, #32
 800c8d2:	d10e      	bne.n	800c8f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	f003 0320 	and.w	r3, r3, #32
 800c8de:	2b20      	cmp	r3, #32
 800c8e0:	d107      	bne.n	800c8f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f06f 0220 	mvn.w	r2, #32
 800c8ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fbbb 	bl	800d068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
	...

0800c8fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b086      	sub	sp, #24
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c912:	2b01      	cmp	r3, #1
 800c914:	d101      	bne.n	800c91a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c916:	2302      	movs	r3, #2
 800c918:	e0ae      	b.n	800ca78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b0c      	cmp	r3, #12
 800c926:	f200 809f 	bhi.w	800ca68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c92a:	a201      	add	r2, pc, #4	@ (adr r2, 800c930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c965 	.word	0x0800c965
 800c934:	0800ca69 	.word	0x0800ca69
 800c938:	0800ca69 	.word	0x0800ca69
 800c93c:	0800ca69 	.word	0x0800ca69
 800c940:	0800c9a5 	.word	0x0800c9a5
 800c944:	0800ca69 	.word	0x0800ca69
 800c948:	0800ca69 	.word	0x0800ca69
 800c94c:	0800ca69 	.word	0x0800ca69
 800c950:	0800c9e7 	.word	0x0800c9e7
 800c954:	0800ca69 	.word	0x0800ca69
 800c958:	0800ca69 	.word	0x0800ca69
 800c95c:	0800ca69 	.word	0x0800ca69
 800c960:	0800ca27 	.word	0x0800ca27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68b9      	ldr	r1, [r7, #8]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 f950 	bl	800cc10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f042 0208 	orr.w	r2, r2, #8
 800c97e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	699a      	ldr	r2, [r3, #24]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f022 0204 	bic.w	r2, r2, #4
 800c98e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6999      	ldr	r1, [r3, #24]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	691a      	ldr	r2, [r3, #16]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	430a      	orrs	r2, r1
 800c9a0:	619a      	str	r2, [r3, #24]
      break;
 800c9a2:	e064      	b.n	800ca6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f9a0 	bl	800ccf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	699a      	ldr	r2, [r3, #24]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	699a      	ldr	r2, [r3, #24]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c9ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6999      	ldr	r1, [r3, #24]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	021a      	lsls	r2, r3, #8
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	619a      	str	r2, [r3, #24]
      break;
 800c9e4:	e043      	b.n	800ca6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68b9      	ldr	r1, [r7, #8]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f9f5 	bl	800cddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	69da      	ldr	r2, [r3, #28]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f042 0208 	orr.w	r2, r2, #8
 800ca00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	69da      	ldr	r2, [r3, #28]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f022 0204 	bic.w	r2, r2, #4
 800ca10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69d9      	ldr	r1, [r3, #28]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	691a      	ldr	r2, [r3, #16]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	430a      	orrs	r2, r1
 800ca22:	61da      	str	r2, [r3, #28]
      break;
 800ca24:	e023      	b.n	800ca6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	68b9      	ldr	r1, [r7, #8]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f000 fa49 	bl	800cec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	69da      	ldr	r2, [r3, #28]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	69da      	ldr	r2, [r3, #28]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	69d9      	ldr	r1, [r3, #28]
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	021a      	lsls	r2, r3, #8
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	430a      	orrs	r2, r1
 800ca64:	61da      	str	r2, [r3, #28]
      break;
 800ca66:	e002      	b.n	800ca6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3718      	adds	r7, #24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a40      	ldr	r2, [pc, #256]	@ (800cbe4 <TIM_Base_SetConfig+0x114>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d013      	beq.n	800cb10 <TIM_Base_SetConfig+0x40>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caee:	d00f      	beq.n	800cb10 <TIM_Base_SetConfig+0x40>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a3d      	ldr	r2, [pc, #244]	@ (800cbe8 <TIM_Base_SetConfig+0x118>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d00b      	beq.n	800cb10 <TIM_Base_SetConfig+0x40>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a3c      	ldr	r2, [pc, #240]	@ (800cbec <TIM_Base_SetConfig+0x11c>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d007      	beq.n	800cb10 <TIM_Base_SetConfig+0x40>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a3b      	ldr	r2, [pc, #236]	@ (800cbf0 <TIM_Base_SetConfig+0x120>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d003      	beq.n	800cb10 <TIM_Base_SetConfig+0x40>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4a3a      	ldr	r2, [pc, #232]	@ (800cbf4 <TIM_Base_SetConfig+0x124>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d108      	bne.n	800cb22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a2f      	ldr	r2, [pc, #188]	@ (800cbe4 <TIM_Base_SetConfig+0x114>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d02b      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb30:	d027      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a2c      	ldr	r2, [pc, #176]	@ (800cbe8 <TIM_Base_SetConfig+0x118>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d023      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a2b      	ldr	r2, [pc, #172]	@ (800cbec <TIM_Base_SetConfig+0x11c>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d01f      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a2a      	ldr	r2, [pc, #168]	@ (800cbf0 <TIM_Base_SetConfig+0x120>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d01b      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a29      	ldr	r2, [pc, #164]	@ (800cbf4 <TIM_Base_SetConfig+0x124>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d017      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a28      	ldr	r2, [pc, #160]	@ (800cbf8 <TIM_Base_SetConfig+0x128>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d013      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a27      	ldr	r2, [pc, #156]	@ (800cbfc <TIM_Base_SetConfig+0x12c>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d00f      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a26      	ldr	r2, [pc, #152]	@ (800cc00 <TIM_Base_SetConfig+0x130>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d00b      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a25      	ldr	r2, [pc, #148]	@ (800cc04 <TIM_Base_SetConfig+0x134>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d007      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a24      	ldr	r2, [pc, #144]	@ (800cc08 <TIM_Base_SetConfig+0x138>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d003      	beq.n	800cb82 <TIM_Base_SetConfig+0xb2>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a23      	ldr	r2, [pc, #140]	@ (800cc0c <TIM_Base_SetConfig+0x13c>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d108      	bne.n	800cb94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	689a      	ldr	r2, [r3, #8]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a0a      	ldr	r2, [pc, #40]	@ (800cbe4 <TIM_Base_SetConfig+0x114>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d003      	beq.n	800cbc8 <TIM_Base_SetConfig+0xf8>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a0c      	ldr	r2, [pc, #48]	@ (800cbf4 <TIM_Base_SetConfig+0x124>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d103      	bne.n	800cbd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	691a      	ldr	r2, [r3, #16]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	615a      	str	r2, [r3, #20]
}
 800cbd6:	bf00      	nop
 800cbd8:	3714      	adds	r7, #20
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	40010000 	.word	0x40010000
 800cbe8:	40000400 	.word	0x40000400
 800cbec:	40000800 	.word	0x40000800
 800cbf0:	40000c00 	.word	0x40000c00
 800cbf4:	40010400 	.word	0x40010400
 800cbf8:	40014000 	.word	0x40014000
 800cbfc:	40014400 	.word	0x40014400
 800cc00:	40014800 	.word	0x40014800
 800cc04:	40001800 	.word	0x40001800
 800cc08:	40001c00 	.word	0x40001c00
 800cc0c:	40002000 	.word	0x40002000

0800cc10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	f023 0201 	bic.w	r2, r3, #1
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f023 0303 	bic.w	r3, r3, #3
 800cc46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f023 0302 	bic.w	r3, r3, #2
 800cc58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a20      	ldr	r2, [pc, #128]	@ (800cce8 <TIM_OC1_SetConfig+0xd8>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d003      	beq.n	800cc74 <TIM_OC1_SetConfig+0x64>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a1f      	ldr	r2, [pc, #124]	@ (800ccec <TIM_OC1_SetConfig+0xdc>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d10c      	bne.n	800cc8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	f023 0308 	bic.w	r3, r3, #8
 800cc7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f023 0304 	bic.w	r3, r3, #4
 800cc8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a15      	ldr	r2, [pc, #84]	@ (800cce8 <TIM_OC1_SetConfig+0xd8>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d003      	beq.n	800cc9e <TIM_OC1_SetConfig+0x8e>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4a14      	ldr	r2, [pc, #80]	@ (800ccec <TIM_OC1_SetConfig+0xdc>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d111      	bne.n	800ccc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ccac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	693a      	ldr	r2, [r7, #16]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	697a      	ldr	r2, [r7, #20]
 800ccda:	621a      	str	r2, [r3, #32]
}
 800ccdc:	bf00      	nop
 800ccde:	371c      	adds	r7, #28
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	40010000 	.word	0x40010000
 800ccec:	40010400 	.word	0x40010400

0800ccf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b087      	sub	sp, #28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	f023 0210 	bic.w	r2, r3, #16
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	021b      	lsls	r3, r3, #8
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	f023 0320 	bic.w	r3, r3, #32
 800cd3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	011b      	lsls	r3, r3, #4
 800cd42:	697a      	ldr	r2, [r7, #20]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a22      	ldr	r2, [pc, #136]	@ (800cdd4 <TIM_OC2_SetConfig+0xe4>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d003      	beq.n	800cd58 <TIM_OC2_SetConfig+0x68>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a21      	ldr	r2, [pc, #132]	@ (800cdd8 <TIM_OC2_SetConfig+0xe8>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d10d      	bne.n	800cd74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	011b      	lsls	r3, r3, #4
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a17      	ldr	r2, [pc, #92]	@ (800cdd4 <TIM_OC2_SetConfig+0xe4>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d003      	beq.n	800cd84 <TIM_OC2_SetConfig+0x94>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a16      	ldr	r2, [pc, #88]	@ (800cdd8 <TIM_OC2_SetConfig+0xe8>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d113      	bne.n	800cdac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	695b      	ldr	r3, [r3, #20]
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	699b      	ldr	r3, [r3, #24]
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	621a      	str	r2, [r3, #32]
}
 800cdc6:	bf00      	nop
 800cdc8:	371c      	adds	r7, #28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	40010000 	.word	0x40010000
 800cdd8:	40010400 	.word	0x40010400

0800cddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b087      	sub	sp, #28
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	69db      	ldr	r3, [r3, #28]
 800ce02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f023 0303 	bic.w	r3, r3, #3
 800ce12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ce24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	021b      	lsls	r3, r3, #8
 800ce2c:	697a      	ldr	r2, [r7, #20]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	4a21      	ldr	r2, [pc, #132]	@ (800cebc <TIM_OC3_SetConfig+0xe0>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d003      	beq.n	800ce42 <TIM_OC3_SetConfig+0x66>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4a20      	ldr	r2, [pc, #128]	@ (800cec0 <TIM_OC3_SetConfig+0xe4>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d10d      	bne.n	800ce5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ce48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	021b      	lsls	r3, r3, #8
 800ce50:	697a      	ldr	r2, [r7, #20]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ce5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a16      	ldr	r2, [pc, #88]	@ (800cebc <TIM_OC3_SetConfig+0xe0>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d003      	beq.n	800ce6e <TIM_OC3_SetConfig+0x92>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a15      	ldr	r2, [pc, #84]	@ (800cec0 <TIM_OC3_SetConfig+0xe4>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d113      	bne.n	800ce96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	011b      	lsls	r3, r3, #4
 800ce84:	693a      	ldr	r2, [r7, #16]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	699b      	ldr	r3, [r3, #24]
 800ce8e:	011b      	lsls	r3, r3, #4
 800ce90:	693a      	ldr	r2, [r7, #16]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	685a      	ldr	r2, [r3, #4]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	621a      	str	r2, [r3, #32]
}
 800ceb0:	bf00      	nop
 800ceb2:	371c      	adds	r7, #28
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	40010000 	.word	0x40010000
 800cec0:	40010400 	.word	0x40010400

0800cec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b087      	sub	sp, #28
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a1b      	ldr	r3, [r3, #32]
 800ced2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a1b      	ldr	r3, [r3, #32]
 800cede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	69db      	ldr	r3, [r3, #28]
 800ceea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cefa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	021b      	lsls	r3, r3, #8
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cf0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	031b      	lsls	r3, r3, #12
 800cf16:	693a      	ldr	r2, [r7, #16]
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4a12      	ldr	r2, [pc, #72]	@ (800cf68 <TIM_OC4_SetConfig+0xa4>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d003      	beq.n	800cf2c <TIM_OC4_SetConfig+0x68>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a11      	ldr	r2, [pc, #68]	@ (800cf6c <TIM_OC4_SetConfig+0xa8>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d109      	bne.n	800cf40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	019b      	lsls	r3, r3, #6
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	621a      	str	r2, [r3, #32]
}
 800cf5a:	bf00      	nop
 800cf5c:	371c      	adds	r7, #28
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	40010000 	.word	0x40010000
 800cf6c:	40010400 	.word	0x40010400

0800cf70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d101      	bne.n	800cf88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf84:	2302      	movs	r3, #2
 800cf86:	e05a      	b.n	800d03e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2202      	movs	r2, #2
 800cf94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a21      	ldr	r2, [pc, #132]	@ (800d04c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d022      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfd4:	d01d      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a1d      	ldr	r2, [pc, #116]	@ (800d050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d018      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a1b      	ldr	r2, [pc, #108]	@ (800d054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d013      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a1a      	ldr	r2, [pc, #104]	@ (800d058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d00e      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a18      	ldr	r2, [pc, #96]	@ (800d05c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d009      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a17      	ldr	r2, [pc, #92]	@ (800d060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d004      	beq.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a15      	ldr	r2, [pc, #84]	@ (800d064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d10c      	bne.n	800d02c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	4313      	orrs	r3, r2
 800d022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	40010000 	.word	0x40010000
 800d050:	40000400 	.word	0x40000400
 800d054:	40000800 	.word	0x40000800
 800d058:	40000c00 	.word	0x40000c00
 800d05c:	40010400 	.word	0x40010400
 800d060:	40014000 	.word	0x40014000
 800d064:	40001800 	.word	0x40001800

0800d068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e03f      	b.n	800d122 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7fa fab6 	bl	8007628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2224      	movs	r2, #36	@ 0x24
 800d0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68da      	ldr	r2, [r3, #12]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d0d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f929 	bl	800d32c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	691a      	ldr	r2, [r3, #16]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	695a      	ldr	r2, [r3, #20]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	68da      	ldr	r2, [r3, #12]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2220      	movs	r2, #32
 800d114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2220      	movs	r2, #32
 800d11c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b08a      	sub	sp, #40	@ 0x28
 800d12e:	af02      	add	r7, sp, #8
 800d130:	60f8      	str	r0, [r7, #12]
 800d132:	60b9      	str	r1, [r7, #8]
 800d134:	603b      	str	r3, [r7, #0]
 800d136:	4613      	mov	r3, r2
 800d138:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d13a:	2300      	movs	r3, #0
 800d13c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d144:	b2db      	uxtb	r3, r3
 800d146:	2b20      	cmp	r3, #32
 800d148:	d17c      	bne.n	800d244 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <HAL_UART_Transmit+0x2c>
 800d150:	88fb      	ldrh	r3, [r7, #6]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	e075      	b.n	800d246 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d160:	2b01      	cmp	r3, #1
 800d162:	d101      	bne.n	800d168 <HAL_UART_Transmit+0x3e>
 800d164:	2302      	movs	r3, #2
 800d166:	e06e      	b.n	800d246 <HAL_UART_Transmit+0x11c>
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2221      	movs	r2, #33	@ 0x21
 800d17a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d17e:	f7fa fb83 	bl	8007888 <HAL_GetTick>
 800d182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	88fa      	ldrh	r2, [r7, #6]
 800d188:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	88fa      	ldrh	r2, [r7, #6]
 800d18e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d198:	d108      	bne.n	800d1ac <HAL_UART_Transmit+0x82>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d104      	bne.n	800d1ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	61bb      	str	r3, [r7, #24]
 800d1aa:	e003      	b.n	800d1b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800d1bc:	e02a      	b.n	800d214 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2180      	movs	r1, #128	@ 0x80
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f000 f840 	bl	800d24e <UART_WaitOnFlagUntilTimeout>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	e036      	b.n	800d246 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10b      	bne.n	800d1f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	881b      	ldrh	r3, [r3, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	3302      	adds	r3, #2
 800d1f2:	61bb      	str	r3, [r7, #24]
 800d1f4:	e007      	b.n	800d206 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	781a      	ldrb	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	3301      	adds	r3, #1
 800d204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	3b01      	subs	r3, #1
 800d20e:	b29a      	uxth	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d218:	b29b      	uxth	r3, r3
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1cf      	bne.n	800d1be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	9300      	str	r3, [sp, #0]
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2200      	movs	r2, #0
 800d226:	2140      	movs	r1, #64	@ 0x40
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f000 f810 	bl	800d24e <UART_WaitOnFlagUntilTimeout>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d234:	2303      	movs	r3, #3
 800d236:	e006      	b.n	800d246 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2220      	movs	r2, #32
 800d23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	e000      	b.n	800d246 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d244:	2302      	movs	r3, #2
  }
}
 800d246:	4618      	mov	r0, r3
 800d248:	3720      	adds	r7, #32
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b090      	sub	sp, #64	@ 0x40
 800d252:	af00      	add	r7, sp, #0
 800d254:	60f8      	str	r0, [r7, #12]
 800d256:	60b9      	str	r1, [r7, #8]
 800d258:	603b      	str	r3, [r7, #0]
 800d25a:	4613      	mov	r3, r2
 800d25c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d25e:	e050      	b.n	800d302 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d266:	d04c      	beq.n	800d302 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d007      	beq.n	800d27e <UART_WaitOnFlagUntilTimeout+0x30>
 800d26e:	f7fa fb0b 	bl	8007888 <HAL_GetTick>
 800d272:	4602      	mov	r2, r0
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d241      	bcs.n	800d302 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	330c      	adds	r3, #12
 800d284:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d288:	e853 3f00 	ldrex	r3, [r3]
 800d28c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d290:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	330c      	adds	r3, #12
 800d29c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d29e:	637a      	str	r2, [r7, #52]	@ 0x34
 800d2a0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d2a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2a6:	e841 2300 	strex	r3, r2, [r1]
 800d2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1e5      	bne.n	800d27e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	e853 3f00 	ldrex	r3, [r3]
 800d2c0:	613b      	str	r3, [r7, #16]
   return(result);
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	f023 0301 	bic.w	r3, r3, #1
 800d2c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3314      	adds	r3, #20
 800d2d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2d2:	623a      	str	r2, [r7, #32]
 800d2d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d6:	69f9      	ldr	r1, [r7, #28]
 800d2d8:	6a3a      	ldr	r2, [r7, #32]
 800d2da:	e841 2300 	strex	r3, r2, [r1]
 800d2de:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1e5      	bne.n	800d2b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2220      	movs	r2, #32
 800d2ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2220      	movs	r2, #32
 800d2f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800d2fe:	2303      	movs	r3, #3
 800d300:	e00f      	b.n	800d322 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	4013      	ands	r3, r2
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	429a      	cmp	r2, r3
 800d310:	bf0c      	ite	eq
 800d312:	2301      	moveq	r3, #1
 800d314:	2300      	movne	r3, #0
 800d316:	b2db      	uxtb	r3, r3
 800d318:	461a      	mov	r2, r3
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d09f      	beq.n	800d260 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3740      	adds	r7, #64	@ 0x40
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
	...

0800d32c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d32c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d330:	b0c0      	sub	sp, #256	@ 0x100
 800d332:	af00      	add	r7, sp, #0
 800d334:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d348:	68d9      	ldr	r1, [r3, #12]
 800d34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	ea40 0301 	orr.w	r3, r0, r1
 800d354:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d35a:	689a      	ldr	r2, [r3, #8]
 800d35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	431a      	orrs	r2, r3
 800d364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	431a      	orrs	r2, r3
 800d36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	4313      	orrs	r3, r2
 800d374:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d384:	f021 010c 	bic.w	r1, r1, #12
 800d388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d392:	430b      	orrs	r3, r1
 800d394:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	695b      	ldr	r3, [r3, #20]
 800d39e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3a6:	6999      	ldr	r1, [r3, #24]
 800d3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	ea40 0301 	orr.w	r3, r0, r1
 800d3b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	4b8f      	ldr	r3, [pc, #572]	@ (800d5f8 <UART_SetConfig+0x2cc>)
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d005      	beq.n	800d3cc <UART_SetConfig+0xa0>
 800d3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	4b8d      	ldr	r3, [pc, #564]	@ (800d5fc <UART_SetConfig+0x2d0>)
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d104      	bne.n	800d3d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d3cc:	f7fe f9a4 	bl	800b718 <HAL_RCC_GetPCLK2Freq>
 800d3d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d3d4:	e003      	b.n	800d3de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d3d6:	f7fe f98b 	bl	800b6f0 <HAL_RCC_GetPCLK1Freq>
 800d3da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3e2:	69db      	ldr	r3, [r3, #28]
 800d3e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3e8:	f040 810c 	bne.w	800d604 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d3ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d3f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d3fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d3fe:	4622      	mov	r2, r4
 800d400:	462b      	mov	r3, r5
 800d402:	1891      	adds	r1, r2, r2
 800d404:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d406:	415b      	adcs	r3, r3
 800d408:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d40a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d40e:	4621      	mov	r1, r4
 800d410:	eb12 0801 	adds.w	r8, r2, r1
 800d414:	4629      	mov	r1, r5
 800d416:	eb43 0901 	adc.w	r9, r3, r1
 800d41a:	f04f 0200 	mov.w	r2, #0
 800d41e:	f04f 0300 	mov.w	r3, #0
 800d422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d42a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d42e:	4690      	mov	r8, r2
 800d430:	4699      	mov	r9, r3
 800d432:	4623      	mov	r3, r4
 800d434:	eb18 0303 	adds.w	r3, r8, r3
 800d438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d43c:	462b      	mov	r3, r5
 800d43e:	eb49 0303 	adc.w	r3, r9, r3
 800d442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d452:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d456:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d45a:	460b      	mov	r3, r1
 800d45c:	18db      	adds	r3, r3, r3
 800d45e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d460:	4613      	mov	r3, r2
 800d462:	eb42 0303 	adc.w	r3, r2, r3
 800d466:	657b      	str	r3, [r7, #84]	@ 0x54
 800d468:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d46c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d470:	f7f2 febc 	bl	80001ec <__aeabi_uldivmod>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	4b61      	ldr	r3, [pc, #388]	@ (800d600 <UART_SetConfig+0x2d4>)
 800d47a:	fba3 2302 	umull	r2, r3, r3, r2
 800d47e:	095b      	lsrs	r3, r3, #5
 800d480:	011c      	lsls	r4, r3, #4
 800d482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d486:	2200      	movs	r2, #0
 800d488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d48c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d490:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d494:	4642      	mov	r2, r8
 800d496:	464b      	mov	r3, r9
 800d498:	1891      	adds	r1, r2, r2
 800d49a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d49c:	415b      	adcs	r3, r3
 800d49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d4a4:	4641      	mov	r1, r8
 800d4a6:	eb12 0a01 	adds.w	sl, r2, r1
 800d4aa:	4649      	mov	r1, r9
 800d4ac:	eb43 0b01 	adc.w	fp, r3, r1
 800d4b0:	f04f 0200 	mov.w	r2, #0
 800d4b4:	f04f 0300 	mov.w	r3, #0
 800d4b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d4bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d4c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d4c4:	4692      	mov	sl, r2
 800d4c6:	469b      	mov	fp, r3
 800d4c8:	4643      	mov	r3, r8
 800d4ca:	eb1a 0303 	adds.w	r3, sl, r3
 800d4ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d4d2:	464b      	mov	r3, r9
 800d4d4:	eb4b 0303 	adc.w	r3, fp, r3
 800d4d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d4e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d4ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	18db      	adds	r3, r3, r3
 800d4f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	eb42 0303 	adc.w	r3, r2, r3
 800d4fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d502:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d506:	f7f2 fe71 	bl	80001ec <__aeabi_uldivmod>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4611      	mov	r1, r2
 800d510:	4b3b      	ldr	r3, [pc, #236]	@ (800d600 <UART_SetConfig+0x2d4>)
 800d512:	fba3 2301 	umull	r2, r3, r3, r1
 800d516:	095b      	lsrs	r3, r3, #5
 800d518:	2264      	movs	r2, #100	@ 0x64
 800d51a:	fb02 f303 	mul.w	r3, r2, r3
 800d51e:	1acb      	subs	r3, r1, r3
 800d520:	00db      	lsls	r3, r3, #3
 800d522:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d526:	4b36      	ldr	r3, [pc, #216]	@ (800d600 <UART_SetConfig+0x2d4>)
 800d528:	fba3 2302 	umull	r2, r3, r3, r2
 800d52c:	095b      	lsrs	r3, r3, #5
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d534:	441c      	add	r4, r3
 800d536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d53a:	2200      	movs	r2, #0
 800d53c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d540:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d544:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d548:	4642      	mov	r2, r8
 800d54a:	464b      	mov	r3, r9
 800d54c:	1891      	adds	r1, r2, r2
 800d54e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d550:	415b      	adcs	r3, r3
 800d552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d558:	4641      	mov	r1, r8
 800d55a:	1851      	adds	r1, r2, r1
 800d55c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d55e:	4649      	mov	r1, r9
 800d560:	414b      	adcs	r3, r1
 800d562:	637b      	str	r3, [r7, #52]	@ 0x34
 800d564:	f04f 0200 	mov.w	r2, #0
 800d568:	f04f 0300 	mov.w	r3, #0
 800d56c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d570:	4659      	mov	r1, fp
 800d572:	00cb      	lsls	r3, r1, #3
 800d574:	4651      	mov	r1, sl
 800d576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d57a:	4651      	mov	r1, sl
 800d57c:	00ca      	lsls	r2, r1, #3
 800d57e:	4610      	mov	r0, r2
 800d580:	4619      	mov	r1, r3
 800d582:	4603      	mov	r3, r0
 800d584:	4642      	mov	r2, r8
 800d586:	189b      	adds	r3, r3, r2
 800d588:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d58c:	464b      	mov	r3, r9
 800d58e:	460a      	mov	r2, r1
 800d590:	eb42 0303 	adc.w	r3, r2, r3
 800d594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d5a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d5a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	18db      	adds	r3, r3, r3
 800d5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	eb42 0303 	adc.w	r3, r2, r3
 800d5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d5be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d5c2:	f7f2 fe13 	bl	80001ec <__aeabi_uldivmod>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d600 <UART_SetConfig+0x2d4>)
 800d5cc:	fba3 1302 	umull	r1, r3, r3, r2
 800d5d0:	095b      	lsrs	r3, r3, #5
 800d5d2:	2164      	movs	r1, #100	@ 0x64
 800d5d4:	fb01 f303 	mul.w	r3, r1, r3
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	3332      	adds	r3, #50	@ 0x32
 800d5de:	4a08      	ldr	r2, [pc, #32]	@ (800d600 <UART_SetConfig+0x2d4>)
 800d5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e4:	095b      	lsrs	r3, r3, #5
 800d5e6:	f003 0207 	and.w	r2, r3, #7
 800d5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4422      	add	r2, r4
 800d5f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d5f4:	e106      	b.n	800d804 <UART_SetConfig+0x4d8>
 800d5f6:	bf00      	nop
 800d5f8:	40011000 	.word	0x40011000
 800d5fc:	40011400 	.word	0x40011400
 800d600:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d608:	2200      	movs	r2, #0
 800d60a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d60e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d612:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d616:	4642      	mov	r2, r8
 800d618:	464b      	mov	r3, r9
 800d61a:	1891      	adds	r1, r2, r2
 800d61c:	6239      	str	r1, [r7, #32]
 800d61e:	415b      	adcs	r3, r3
 800d620:	627b      	str	r3, [r7, #36]	@ 0x24
 800d622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d626:	4641      	mov	r1, r8
 800d628:	1854      	adds	r4, r2, r1
 800d62a:	4649      	mov	r1, r9
 800d62c:	eb43 0501 	adc.w	r5, r3, r1
 800d630:	f04f 0200 	mov.w	r2, #0
 800d634:	f04f 0300 	mov.w	r3, #0
 800d638:	00eb      	lsls	r3, r5, #3
 800d63a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d63e:	00e2      	lsls	r2, r4, #3
 800d640:	4614      	mov	r4, r2
 800d642:	461d      	mov	r5, r3
 800d644:	4643      	mov	r3, r8
 800d646:	18e3      	adds	r3, r4, r3
 800d648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d64c:	464b      	mov	r3, r9
 800d64e:	eb45 0303 	adc.w	r3, r5, r3
 800d652:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d662:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d666:	f04f 0200 	mov.w	r2, #0
 800d66a:	f04f 0300 	mov.w	r3, #0
 800d66e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d672:	4629      	mov	r1, r5
 800d674:	008b      	lsls	r3, r1, #2
 800d676:	4621      	mov	r1, r4
 800d678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d67c:	4621      	mov	r1, r4
 800d67e:	008a      	lsls	r2, r1, #2
 800d680:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d684:	f7f2 fdb2 	bl	80001ec <__aeabi_uldivmod>
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	4b60      	ldr	r3, [pc, #384]	@ (800d810 <UART_SetConfig+0x4e4>)
 800d68e:	fba3 2302 	umull	r2, r3, r3, r2
 800d692:	095b      	lsrs	r3, r3, #5
 800d694:	011c      	lsls	r4, r3, #4
 800d696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d69a:	2200      	movs	r2, #0
 800d69c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d6a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d6a8:	4642      	mov	r2, r8
 800d6aa:	464b      	mov	r3, r9
 800d6ac:	1891      	adds	r1, r2, r2
 800d6ae:	61b9      	str	r1, [r7, #24]
 800d6b0:	415b      	adcs	r3, r3
 800d6b2:	61fb      	str	r3, [r7, #28]
 800d6b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d6b8:	4641      	mov	r1, r8
 800d6ba:	1851      	adds	r1, r2, r1
 800d6bc:	6139      	str	r1, [r7, #16]
 800d6be:	4649      	mov	r1, r9
 800d6c0:	414b      	adcs	r3, r1
 800d6c2:	617b      	str	r3, [r7, #20]
 800d6c4:	f04f 0200 	mov.w	r2, #0
 800d6c8:	f04f 0300 	mov.w	r3, #0
 800d6cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d6d0:	4659      	mov	r1, fp
 800d6d2:	00cb      	lsls	r3, r1, #3
 800d6d4:	4651      	mov	r1, sl
 800d6d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6da:	4651      	mov	r1, sl
 800d6dc:	00ca      	lsls	r2, r1, #3
 800d6de:	4610      	mov	r0, r2
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4642      	mov	r2, r8
 800d6e6:	189b      	adds	r3, r3, r2
 800d6e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d6ec:	464b      	mov	r3, r9
 800d6ee:	460a      	mov	r2, r1
 800d6f0:	eb42 0303 	adc.w	r3, r2, r3
 800d6f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d702:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d704:	f04f 0200 	mov.w	r2, #0
 800d708:	f04f 0300 	mov.w	r3, #0
 800d70c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d710:	4649      	mov	r1, r9
 800d712:	008b      	lsls	r3, r1, #2
 800d714:	4641      	mov	r1, r8
 800d716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d71a:	4641      	mov	r1, r8
 800d71c:	008a      	lsls	r2, r1, #2
 800d71e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d722:	f7f2 fd63 	bl	80001ec <__aeabi_uldivmod>
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
 800d72a:	4611      	mov	r1, r2
 800d72c:	4b38      	ldr	r3, [pc, #224]	@ (800d810 <UART_SetConfig+0x4e4>)
 800d72e:	fba3 2301 	umull	r2, r3, r3, r1
 800d732:	095b      	lsrs	r3, r3, #5
 800d734:	2264      	movs	r2, #100	@ 0x64
 800d736:	fb02 f303 	mul.w	r3, r2, r3
 800d73a:	1acb      	subs	r3, r1, r3
 800d73c:	011b      	lsls	r3, r3, #4
 800d73e:	3332      	adds	r3, #50	@ 0x32
 800d740:	4a33      	ldr	r2, [pc, #204]	@ (800d810 <UART_SetConfig+0x4e4>)
 800d742:	fba2 2303 	umull	r2, r3, r2, r3
 800d746:	095b      	lsrs	r3, r3, #5
 800d748:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d74c:	441c      	add	r4, r3
 800d74e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d752:	2200      	movs	r2, #0
 800d754:	673b      	str	r3, [r7, #112]	@ 0x70
 800d756:	677a      	str	r2, [r7, #116]	@ 0x74
 800d758:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d75c:	4642      	mov	r2, r8
 800d75e:	464b      	mov	r3, r9
 800d760:	1891      	adds	r1, r2, r2
 800d762:	60b9      	str	r1, [r7, #8]
 800d764:	415b      	adcs	r3, r3
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d76c:	4641      	mov	r1, r8
 800d76e:	1851      	adds	r1, r2, r1
 800d770:	6039      	str	r1, [r7, #0]
 800d772:	4649      	mov	r1, r9
 800d774:	414b      	adcs	r3, r1
 800d776:	607b      	str	r3, [r7, #4]
 800d778:	f04f 0200 	mov.w	r2, #0
 800d77c:	f04f 0300 	mov.w	r3, #0
 800d780:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d784:	4659      	mov	r1, fp
 800d786:	00cb      	lsls	r3, r1, #3
 800d788:	4651      	mov	r1, sl
 800d78a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d78e:	4651      	mov	r1, sl
 800d790:	00ca      	lsls	r2, r1, #3
 800d792:	4610      	mov	r0, r2
 800d794:	4619      	mov	r1, r3
 800d796:	4603      	mov	r3, r0
 800d798:	4642      	mov	r2, r8
 800d79a:	189b      	adds	r3, r3, r2
 800d79c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d79e:	464b      	mov	r3, r9
 800d7a0:	460a      	mov	r2, r1
 800d7a2:	eb42 0303 	adc.w	r3, r2, r3
 800d7a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d7b2:	667a      	str	r2, [r7, #100]	@ 0x64
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	f04f 0300 	mov.w	r3, #0
 800d7bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d7c0:	4649      	mov	r1, r9
 800d7c2:	008b      	lsls	r3, r1, #2
 800d7c4:	4641      	mov	r1, r8
 800d7c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d7ca:	4641      	mov	r1, r8
 800d7cc:	008a      	lsls	r2, r1, #2
 800d7ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d7d2:	f7f2 fd0b 	bl	80001ec <__aeabi_uldivmod>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	460b      	mov	r3, r1
 800d7da:	4b0d      	ldr	r3, [pc, #52]	@ (800d810 <UART_SetConfig+0x4e4>)
 800d7dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d7e0:	095b      	lsrs	r3, r3, #5
 800d7e2:	2164      	movs	r1, #100	@ 0x64
 800d7e4:	fb01 f303 	mul.w	r3, r1, r3
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	011b      	lsls	r3, r3, #4
 800d7ec:	3332      	adds	r3, #50	@ 0x32
 800d7ee:	4a08      	ldr	r2, [pc, #32]	@ (800d810 <UART_SetConfig+0x4e4>)
 800d7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f4:	095b      	lsrs	r3, r3, #5
 800d7f6:	f003 020f 	and.w	r2, r3, #15
 800d7fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4422      	add	r2, r4
 800d802:	609a      	str	r2, [r3, #8]
}
 800d804:	bf00      	nop
 800d806:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d80a:	46bd      	mov	sp, r7
 800d80c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d810:	51eb851f 	.word	0x51eb851f

0800d814 <__itoa>:
 800d814:	1e93      	subs	r3, r2, #2
 800d816:	2b22      	cmp	r3, #34	@ 0x22
 800d818:	b510      	push	{r4, lr}
 800d81a:	460c      	mov	r4, r1
 800d81c:	d904      	bls.n	800d828 <__itoa+0x14>
 800d81e:	2300      	movs	r3, #0
 800d820:	700b      	strb	r3, [r1, #0]
 800d822:	461c      	mov	r4, r3
 800d824:	4620      	mov	r0, r4
 800d826:	bd10      	pop	{r4, pc}
 800d828:	2a0a      	cmp	r2, #10
 800d82a:	d109      	bne.n	800d840 <__itoa+0x2c>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	da07      	bge.n	800d840 <__itoa+0x2c>
 800d830:	232d      	movs	r3, #45	@ 0x2d
 800d832:	700b      	strb	r3, [r1, #0]
 800d834:	4240      	negs	r0, r0
 800d836:	2101      	movs	r1, #1
 800d838:	4421      	add	r1, r4
 800d83a:	f000 f805 	bl	800d848 <__utoa>
 800d83e:	e7f1      	b.n	800d824 <__itoa+0x10>
 800d840:	2100      	movs	r1, #0
 800d842:	e7f9      	b.n	800d838 <__itoa+0x24>

0800d844 <itoa>:
 800d844:	f7ff bfe6 	b.w	800d814 <__itoa>

0800d848 <__utoa>:
 800d848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d84a:	4c1f      	ldr	r4, [pc, #124]	@ (800d8c8 <__utoa+0x80>)
 800d84c:	b08b      	sub	sp, #44	@ 0x2c
 800d84e:	4605      	mov	r5, r0
 800d850:	460b      	mov	r3, r1
 800d852:	466e      	mov	r6, sp
 800d854:	f104 0c20 	add.w	ip, r4, #32
 800d858:	6820      	ldr	r0, [r4, #0]
 800d85a:	6861      	ldr	r1, [r4, #4]
 800d85c:	4637      	mov	r7, r6
 800d85e:	c703      	stmia	r7!, {r0, r1}
 800d860:	3408      	adds	r4, #8
 800d862:	4564      	cmp	r4, ip
 800d864:	463e      	mov	r6, r7
 800d866:	d1f7      	bne.n	800d858 <__utoa+0x10>
 800d868:	7921      	ldrb	r1, [r4, #4]
 800d86a:	7139      	strb	r1, [r7, #4]
 800d86c:	1e91      	subs	r1, r2, #2
 800d86e:	6820      	ldr	r0, [r4, #0]
 800d870:	6038      	str	r0, [r7, #0]
 800d872:	2922      	cmp	r1, #34	@ 0x22
 800d874:	f04f 0100 	mov.w	r1, #0
 800d878:	d904      	bls.n	800d884 <__utoa+0x3c>
 800d87a:	7019      	strb	r1, [r3, #0]
 800d87c:	460b      	mov	r3, r1
 800d87e:	4618      	mov	r0, r3
 800d880:	b00b      	add	sp, #44	@ 0x2c
 800d882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d884:	1e58      	subs	r0, r3, #1
 800d886:	4684      	mov	ip, r0
 800d888:	fbb5 f7f2 	udiv	r7, r5, r2
 800d88c:	fb02 5617 	mls	r6, r2, r7, r5
 800d890:	3628      	adds	r6, #40	@ 0x28
 800d892:	446e      	add	r6, sp
 800d894:	460c      	mov	r4, r1
 800d896:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d89a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d89e:	462e      	mov	r6, r5
 800d8a0:	42b2      	cmp	r2, r6
 800d8a2:	f101 0101 	add.w	r1, r1, #1
 800d8a6:	463d      	mov	r5, r7
 800d8a8:	d9ee      	bls.n	800d888 <__utoa+0x40>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	545a      	strb	r2, [r3, r1]
 800d8ae:	1919      	adds	r1, r3, r4
 800d8b0:	1aa5      	subs	r5, r4, r2
 800d8b2:	42aa      	cmp	r2, r5
 800d8b4:	dae3      	bge.n	800d87e <__utoa+0x36>
 800d8b6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d8ba:	780e      	ldrb	r6, [r1, #0]
 800d8bc:	7006      	strb	r6, [r0, #0]
 800d8be:	3201      	adds	r2, #1
 800d8c0:	f801 5901 	strb.w	r5, [r1], #-1
 800d8c4:	e7f4      	b.n	800d8b0 <__utoa+0x68>
 800d8c6:	bf00      	nop
 800d8c8:	080367d4 	.word	0x080367d4

0800d8cc <memset>:
 800d8cc:	4402      	add	r2, r0
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d100      	bne.n	800d8d6 <memset+0xa>
 800d8d4:	4770      	bx	lr
 800d8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8da:	e7f9      	b.n	800d8d0 <memset+0x4>

0800d8dc <__libc_init_array>:
 800d8dc:	b570      	push	{r4, r5, r6, lr}
 800d8de:	4d0d      	ldr	r5, [pc, #52]	@ (800d914 <__libc_init_array+0x38>)
 800d8e0:	4c0d      	ldr	r4, [pc, #52]	@ (800d918 <__libc_init_array+0x3c>)
 800d8e2:	1b64      	subs	r4, r4, r5
 800d8e4:	10a4      	asrs	r4, r4, #2
 800d8e6:	2600      	movs	r6, #0
 800d8e8:	42a6      	cmp	r6, r4
 800d8ea:	d109      	bne.n	800d900 <__libc_init_array+0x24>
 800d8ec:	4d0b      	ldr	r5, [pc, #44]	@ (800d91c <__libc_init_array+0x40>)
 800d8ee:	4c0c      	ldr	r4, [pc, #48]	@ (800d920 <__libc_init_array+0x44>)
 800d8f0:	f000 f826 	bl	800d940 <_init>
 800d8f4:	1b64      	subs	r4, r4, r5
 800d8f6:	10a4      	asrs	r4, r4, #2
 800d8f8:	2600      	movs	r6, #0
 800d8fa:	42a6      	cmp	r6, r4
 800d8fc:	d105      	bne.n	800d90a <__libc_init_array+0x2e>
 800d8fe:	bd70      	pop	{r4, r5, r6, pc}
 800d900:	f855 3b04 	ldr.w	r3, [r5], #4
 800d904:	4798      	blx	r3
 800d906:	3601      	adds	r6, #1
 800d908:	e7ee      	b.n	800d8e8 <__libc_init_array+0xc>
 800d90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d90e:	4798      	blx	r3
 800d910:	3601      	adds	r6, #1
 800d912:	e7f2      	b.n	800d8fa <__libc_init_array+0x1e>
 800d914:	08036804 	.word	0x08036804
 800d918:	08036804 	.word	0x08036804
 800d91c:	08036804 	.word	0x08036804
 800d920:	08036808 	.word	0x08036808

0800d924 <memcpy>:
 800d924:	440a      	add	r2, r1
 800d926:	4291      	cmp	r1, r2
 800d928:	f100 33ff 	add.w	r3, r0, #4294967295
 800d92c:	d100      	bne.n	800d930 <memcpy+0xc>
 800d92e:	4770      	bx	lr
 800d930:	b510      	push	{r4, lr}
 800d932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d93a:	4291      	cmp	r1, r2
 800d93c:	d1f9      	bne.n	800d932 <memcpy+0xe>
 800d93e:	bd10      	pop	{r4, pc}

0800d940 <_init>:
 800d940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d942:	bf00      	nop
 800d944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d946:	bc08      	pop	{r3}
 800d948:	469e      	mov	lr, r3
 800d94a:	4770      	bx	lr

0800d94c <_fini>:
 800d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94e:	bf00      	nop
 800d950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d952:	bc08      	pop	{r3}
 800d954:	469e      	mov	lr, r3
 800d956:	4770      	bx	lr
