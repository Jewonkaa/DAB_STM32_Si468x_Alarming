
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009188  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ad8  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde8  0800bde8  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bde8  0800bde8  0001bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdf0  0800bdf0  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf4  0800bdf4  0001bdf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800bdf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          000026d8  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002794  20002794  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f60  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033f9  00000000  00000000  0003704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a8  00000000  00000000  0003b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236d6  00000000  00000000  0003cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ccb  00000000  00000000  000601be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d150b  00000000  00000000  00079e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b394  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005318  00000000  00000000  0014b3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080092f8 	.word	0x080092f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	080092f8 	.word	0x080092f8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fbc3 	bl	8000c70 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fbc0 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fbcc 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fbc9 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fbc6 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fbc3 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fbc0 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fbae 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fbba 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fbb7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fbb4 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fba2 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fbae 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbab 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fba8 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb96 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fba2 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb9f 	bl	8000c8e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb8d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb99 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb96 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb93 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb90 	bl	8000c8e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb7e 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb8a 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb78 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb84 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb72 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb7e 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb6c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb78 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb75 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb63 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb6f 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb5d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb69 	bl	8000c8e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb57 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb63 	bl	8000c8e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb51 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb5d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb5a 	bl	8000c8e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb48 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb54 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb51 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb4e 	bl	8000c8e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb3c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb48 	bl	8000c8e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb36 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb42 	bl	8000c8e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb30 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb3c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb39 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb36 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb33 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb30 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb2d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fb2a 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fb27 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 fb24 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fb21 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 fb1e 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 fb1b 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 fb18 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fb15 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fb12 	bl	8000c8e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fb00 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb0c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fb09 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fb06 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fb03 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fb00 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fafd 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 fafa 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 faf7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 faf4 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 faf1 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 faee 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 faeb 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fae8 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fae5 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fae2 	bl	8000c8e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 fad0 	bl	8000c70 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 facd 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 fad9 	bl	8000c8e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f006 fd94 	bl	8007226 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20002578 	.word	0x20002578

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f004 fa2a 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f003 fc3b 	bl	8003f98 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f004 fa21 	bl	8004b70 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f004 fa1b 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f003 fc2c 	bl	8003f98 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa95 	bl	8000c70 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f004 fa0f 	bl	8004b70 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa82 	bl	8000c70 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa80 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa75 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa6a 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa5f 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f004 f9b4 	bl	8004b70 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f004 f9ae 	bl	8004b70 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f004 f9a4 	bl	8004b70 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9e3 	bl	8000cac <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f004 f916 	bl	8004b70 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f004 f90d 	bl	8004b70 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f977 	bl	8000cac <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af02      	add	r7, sp, #8
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f81c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f814 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f80c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f804 	bl	8000a1c <ILI9341_Draw_Line>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	429a      	cmp	r2, r3
 8000a46:	bfcc      	ite	gt
 8000a48:	2301      	movgt	r3, #1
 8000a4a:	2300      	movle	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a62:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	843b      	strh	r3, [r7, #32]
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d90d      	bls.n	8000a96 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	83fb      	strh	r3, [r7, #30]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	83bb      	strh	r3, [r7, #28]
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bfb8      	it	lt
 8000aa8:	425b      	neglt	r3, r3
 8000aaa:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	0fda      	lsrs	r2, r3, #31
 8000ab0:	4413      	add	r3, r2
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d202      	bcs.n	8000ac4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e023      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aca:	e01f      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0d 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000ade:	e005      	b.n	8000aec <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff06 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da05      	bge.n	8000b06 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]
			err = dx;
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d9db      	bls.n	8000acc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b2e:	7f3b      	ldrb	r3, [r7, #28]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d061      	beq.n	8000bf8 <ILI9341_Draw_String+0xd8>
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	f300 8092 	bgt.w	8000c5e <ILI9341_Draw_String+0x13e>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d028      	beq.n	8000b90 <ILI9341_Draw_String+0x70>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d02b      	beq.n	8000b9a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b42:	e08c      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b44:	7f3b      	ldrb	r3, [r7, #28]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d907      	bls.n	8000b66 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b5a:	7f3b      	ldrb	r3, [r7, #28]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4413      	add	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	7f3a      	ldrb	r2, [r7, #28]
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	f000 f95a 	bl	8000e30 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b7c:	7f3b      	ldrb	r3, [r7, #28]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	3b02      	subs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d5      	bne.n	8000b44 <ILI9341_Draw_String+0x24>
	break;
 8000b98:	e061      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba0:	e025      	b.n	8000bee <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000ba2:	7f3b      	ldrb	r3, [r7, #28]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	441a      	add	r2, r3
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d907      	bls.n	8000bc4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bb8:	7f3b      	ldrb	r3, [r7, #28]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7f3a      	ldrb	r2, [r7, #28]
 8000bce:	9201      	str	r2, [sp, #4]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f000 f92b 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*8;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1d5      	bne.n	8000ba2 <ILI9341_Draw_String+0x82>
	break;
 8000bf6:	e032      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bfe:	e029      	b.n	8000c54 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000c00:	7f3b      	ldrb	r3, [r7, #28]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	441a      	add	r2, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	7f3a      	ldrb	r2, [r7, #28]
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f000 f8fc 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*10;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d1      	bne.n	8000c00 <ILI9341_Draw_String+0xe0>
	break;
 8000c5c:	bf00      	nop
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	200000d8 	.word	0x200000d8

08000c70 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c7a:	f000 fa09 	bl	8001090 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd31 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c98:	f000 f9e8 	bl	800106c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd22 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	733b      	strb	r3, [r7, #12]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000ccc:	f003 ff50 	bl	8004b70 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	4855      	ldr	r0, [pc, #340]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cd8:	f003 ff4a 	bl	8004b70 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f7ff fd03 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cea:	f003 ff41 	bl	8004b70 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cee:	7b3b      	ldrb	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fcf9 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcf5 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d169      	bne.n	8000de6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d12:	e027      	b.n	8000d64 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d14:	2310      	movs	r3, #16
 8000d16:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fce4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fce0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcdc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcd4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcd0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fccc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcc8 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1d9      	bne.n	8000d18 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	81fa      	strh	r2, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1d2      	bne.n	8000d14 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	e007      	b.n	8000d8a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fcaf 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	737a      	strb	r2, [r7, #13]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f2      	bne.n	8000d7a <ILI9341_Send_Burst+0xce>
 8000d94:	e03f      	b.n	8000e16 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fca3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc9f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc9b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc97 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc93 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc8f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc8b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc87 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	81fa      	strh	r2, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1d2      	bne.n	8000d96 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df8:	737b      	strb	r3, [r7, #13]
 8000dfa:	e007      	b.n	8000e0c <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc72 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc6e 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	737a      	strb	r2, [r7, #13]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f2      	bne.n	8000dfc <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000e1e:	f003 fea7 	bl	8004b70 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	f000 80b2 	beq.w	8000fac <ILI9341_Draw_Char+0x17c>
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	f300 8104 	bgt.w	8001056 <ILI9341_Draw_Char+0x226>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <ILI9341_Draw_Char+0x28>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d055      	beq.n	8000f02 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e56:	e0fe      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	f7ff fcfd 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	487b      	ldr	r0, [pc, #492]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e72:	f003 fe7d 	bl	8004b70 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f7ff fc36 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4877      	ldr	r0, [pc, #476]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e84:	f003 fe74 	bl	8004b70 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e035      	b.n	8000efa <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e02c      	b.n	8000eee <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e98:	3b20      	subs	r3, #32
 8000e9a:	4a72      	ldr	r2, [pc, #456]	; (8001064 <ILI9341_Draw_Char+0x234>)
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	441a      	add	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc11 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc0c 	bl	80006e8 <ILI9341_SPI_Send>
 8000ed0:	e00a      	b.n	8000ee8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc05 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc00 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddcf      	ble.n	8000e94 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddc6      	ble.n	8000e8e <ILI9341_Draw_Char+0x5e>
			break;
 8000f00:	e0a9      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	f7ff fca8 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4851      	ldr	r0, [pc, #324]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f1c:	f003 fe28 	bl	8004b70 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f20:	202c      	movs	r0, #44	; 0x2c
 8000f22:	f7ff fbe1 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	484c      	ldr	r0, [pc, #304]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f2e:	f003 fe1f 	bl	8004b70 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e035      	b.n	8000fa4 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e02c      	b.n	8000f98 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f42:	3b20      	subs	r3, #32
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	441a      	add	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f1c3 0307 	rsb	r3, r3, #7
 8000f58:	fa42 f303 	asr.w	r3, r2, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbbc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbb7 	bl	80006e8 <ILI9341_SPI_Send>
 8000f7a:	e00a      	b.n	8000f92 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fbb0 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fbab 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	ddcf      	ble.n	8000f3e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	ddc6      	ble.n	8000f38 <ILI9341_Draw_Char+0x108>
		break;
 8000faa:	e054      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3309      	adds	r3, #9
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3310      	adds	r3, #16
 8000fba:	f7ff fc53 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fc6:	f003 fdd3 	bl	8004b70 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fca:	202c      	movs	r0, #44	; 0x2c
 8000fcc:	f7ff fb8c 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fd8:	f003 fdca 	bl	8004b70 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e035      	b.n	800104e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e02c      	b.n	8001042 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	441a      	add	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	fa42 f303 	asr.w	r3, r2, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fb67 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb62 	bl	80006e8 <ILI9341_SPI_Send>
 8001024:	e00a      	b.n	800103c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb5b 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb56 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddcf      	ble.n	8000fe8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b1d      	cmp	r3, #29
 8001052:	ddc6      	ble.n	8000fe2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001054:	bf00      	nop
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	08009e34 	.word	0x08009e34
 8001068:	0800a10c 	.word	0x0800a10c

0800106c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <Before_Sending_Data+0x20>)
 8001078:	f003 fd7a 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <Before_Sending_Data+0x20>)
 8001084:	f003 fd74 	bl	8004b70 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020c00 	.word	0x40020c00

08001090 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <Before_Sending_Command+0x20>)
 800109c:	f003 fd68 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <Before_Sending_Command+0x20>)
 80010a8:	f003 fd62 	bl	8004b70 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <Si468x_init>:
uint32_t actual_freq = 0;							//value of the frequency to which the Si468x is currently tuned in kHz
uint8_t actual_freq_id = 0;							//frequency table index of the frequency to which the Si468x is currently tuned in kHz


void Si468x_init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 80010ba:	2101      	movs	r1, #1
 80010bc:	4843      	ldr	r0, [pc, #268]	; (80011cc <Si468x_init+0x118>)
 80010be:	f001 fd79 	bl	8002bb4 <send_debug_msg>
	Si468x_reset();
 80010c2:	f000 f887 	bl	80011d4 <Si468x_reset>
	Si468x_power_up();
 80010c6:	f000 f8a1 	bl	800120c <Si468x_power_up>
	Si468x_bootloader_load_host();
 80010ca:	f000 f923 	bl	8001314 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 80010ce:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 80010d2:	f000 f993 	bl	80013fc <Si468x_firmware_load_flash>
	Si468x_boot();
 80010d6:	f000 fa31 	bl	800153c <Si468x_boot>
	Si468x_get_part_info();
 80010da:	f000 fbdb 	bl	8001894 <Si468x_get_part_info>
	Si468x_get_sys_state();
 80010de:	f000 fb53 	bl	8001788 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); //włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 80010e2:	2101      	movs	r1, #1
 80010e4:	f241 7012 	movw	r0, #5906	; 0x1712
 80010e8:	f000 fc44 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF784); //dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010ec:	f24f 7184 	movw	r1, #63364	; 0xf784
 80010f0:	f241 7010 	movw	r0, #5904	; 0x1710
 80010f4:	f000 fc3e 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01D8); //dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010f8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80010fc:	f241 7011 	movw	r0, #5905	; 0x1711
 8001100:	f000 fc38 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x12); //prog RSSI od kiedy łapie kanał, default 12
 8001104:	2112      	movs	r1, #18
 8001106:	f24b 2001 	movw	r0, #45569	; 0xb201
 800110a:	f000 fc33 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); //określa które featury PAD będą przesyłane do hosta
 800110e:	f244 0105 	movw	r1, #16389	; 0x4005
 8001112:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 8001116:	f000 fc2d 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x06); //określa co ile będzie aktualizowana lista usług, x100 ms
 800111a:	2106      	movs	r1, #6
 800111c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8001120:	f000 fc28 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x06); //określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001124:	2106      	movs	r1, #6
 8001126:	f24b 3002 	movw	r0, #45826	; 0xb302
 800112a:	f000 fc23 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);	//tylko soft mute włączone przy slabym sygnale
 800112e:	2101      	movs	r1, #1
 8001130:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001134:	f000 fc1e 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);	//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001138:	2105      	movs	r1, #5
 800113a:	f24b 5001 	movw	r0, #46337	; 0xb501
 800113e:	f000 fc19 	bl	8001974 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); //limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001142:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001146:	f24b 5003 	movw	r0, #46339	; 0xb503
 800114a:	f000 fc13 	bl	8001974 <Si468x_set_property>
	Si468x_dab_get_freq_list(); //odczytujemy z ukladu liste czestotliwosci do tablicy
 800114e:	f000 fcfd 	bl	8001b4c <Si468x_dab_get_freq_list>

//	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala

	Si468x_dab_full_scan();
 8001152:	f001 facd 	bl	80026f0 <Si468x_dab_full_scan>

	HAL_Delay(100);
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f002 ff1e 	bl	8003f98 <HAL_Delay>
	Si468x_dab_tune_freq(CH_10B); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 800115c:	2016      	movs	r0, #22
 800115e:	f000 fdcd 	bl	8001cfc <Si468x_dab_tune_freq>
	HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f002 ff18 	bl	8003f98 <HAL_Delay>

//	Si468x_dab_start_digital_service(0x3a08, 0x6);
	for(uint8_t i = 0; i < 50; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	e025      	b.n	80011ba <Si468x_init+0x106>
	{
		if(services_list[i].service_id == 0x3a08)
 800116e:	79fa      	ldrb	r2, [r7, #7]
 8001170:	4917      	ldr	r1, [pc, #92]	; (80011d0 <Si468x_init+0x11c>)
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	440b      	add	r3, r1
 800117c:	331c      	adds	r3, #28
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f643 2208 	movw	r2, #14856	; 0x3a08
 8001184:	4293      	cmp	r3, r2
 8001186:	d115      	bne.n	80011b4 <Si468x_init+0x100>
		{
			Si468x_dab_start_digital_service(services_list[i].service_id, services_list[i].components[0].subchannel_id);
 8001188:	79fa      	ldrb	r2, [r7, #7]
 800118a:	4911      	ldr	r1, [pc, #68]	; (80011d0 <Si468x_init+0x11c>)
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	440b      	add	r3, r1
 8001196:	331c      	adds	r3, #28
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <Si468x_init+0x11c>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	440b      	add	r3, r1
 80011a8:	3326      	adds	r3, #38	; 0x26
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f001 f973 	bl	8002498 <Si468x_dab_start_digital_service>
			break;
 80011b2:	e006      	b.n	80011c2 <Si468x_init+0x10e>
	for(uint8_t i = 0; i < 50; i++)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	3301      	adds	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b31      	cmp	r3, #49	; 0x31
 80011be:	d9d6      	bls.n	800116e <Si468x_init+0xba>
		}
	}

}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	08009464 	.word	0x08009464
 80011d0:	20001aec 	.word	0x20001aec

080011d4 <Si468x_reset>:

void Si468x_reset()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 80011d8:	2101      	movs	r1, #1
 80011da:	480a      	ldr	r0, [pc, #40]	; (8001204 <Si468x_reset+0x30>)
 80011dc:	f001 fcea 	bl	8002bb4 <send_debug_msg>
	RESET_PIN_LOW;
 80011e0:	2200      	movs	r2, #0
 80011e2:	2120      	movs	r1, #32
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <Si468x_reset+0x34>)
 80011e6:	f003 fcc3 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	f002 fed4 	bl	8003f98 <HAL_Delay>
	RESET_PIN_HIGH;
 80011f0:	2201      	movs	r2, #1
 80011f2:	2120      	movs	r1, #32
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <Si468x_reset+0x34>)
 80011f6:	f003 fcbb 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80011fa:	20c8      	movs	r0, #200	; 0xc8
 80011fc:	f002 fecc 	bl	8003f98 <HAL_Delay>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	080094b4 	.word	0x080094b4
 8001208:	40020800 	.word	0x40020800

0800120c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001210:	2101      	movs	r1, #1
 8001212:	4826      	ldr	r0, [pc, #152]	; (80012ac <Si468x_power_up+0xa0>)
 8001214:	f001 fcce 	bl	8002bb4 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <Si468x_power_up+0xa4>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <Si468x_power_up+0xa4>)
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <Si468x_power_up+0xa4>)
 8001226:	2217      	movs	r2, #23
 8001228:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <Si468x_power_up+0xa4>)
 800122c:	2250      	movs	r2, #80	; 0x50
 800122e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <Si468x_power_up+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <Si468x_power_up+0xa4>)
 8001238:	22f8      	movs	r2, #248	; 0xf8
 800123a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <Si468x_power_up+0xa4>)
 800123e:	2224      	movs	r2, #36	; 0x24
 8001240:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <Si468x_power_up+0xa4>)
 8001244:	2201      	movs	r2, #1
 8001246:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <Si468x_power_up+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <Si468x_power_up+0xa4>)
 8001250:	2210      	movs	r2, #16
 8001252:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <Si468x_power_up+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <Si468x_power_up+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <Si468x_power_up+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <Si468x_power_up+0xa4>)
 8001268:	2228      	movs	r2, #40	; 0x28
 800126a:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <Si468x_power_up+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <Si468x_power_up+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001278:	490d      	ldr	r1, [pc, #52]	; (80012b0 <Si468x_power_up+0xa4>)
 800127a:	2010      	movs	r0, #16
 800127c:	f000 fa52 	bl	8001724 <Si468x_write_command>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <Si468x_power_up+0xa8>)
 8001286:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f002 fe85 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800128e:	490a      	ldr	r1, [pc, #40]	; (80012b8 <Si468x_power_up+0xac>)
 8001290:	2005      	movs	r0, #5
 8001292:	f000 fa69 	bl	8001768 <Si468x_read_reply>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <Si468x_power_up+0xa8>)
 800129c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800129e:	2101      	movs	r1, #1
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <Si468x_power_up+0xb0>)
 80012a2:	f001 fc87 	bl	8002bb4 <send_debug_msg>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	080094c8 	.word	0x080094c8
 80012b0:	200000dc 	.word	0x200000dc
 80012b4:	200018fc 	.word	0x200018fc
 80012b8:	200010dc 	.word	0x200010dc
 80012bc:	08009504 	.word	0x08009504

080012c0 <Si468x_load_init>:

void Si468x_load_init()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 80012c4:	2101      	movs	r1, #1
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <Si468x_load_init+0x44>)
 80012c8:	f001 fc74 	bl	8002bb4 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <Si468x_load_init+0x48>)
 80012ce:	2206      	movs	r2, #6
 80012d0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <Si468x_load_init+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80012d8:	490b      	ldr	r1, [pc, #44]	; (8001308 <Si468x_load_init+0x48>)
 80012da:	2002      	movs	r0, #2
 80012dc:	f000 fa22 	bl	8001724 <Si468x_write_command>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <Si468x_load_init+0x4c>)
 80012e6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f002 fe55 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <Si468x_load_init+0x50>)
 80012f0:	2005      	movs	r0, #5
 80012f2:	f000 fa39 	bl	8001768 <Si468x_read_reply>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <Si468x_load_init+0x4c>)
 80012fc:	701a      	strb	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08009524 	.word	0x08009524
 8001308:	200000dc 	.word	0x200000dc
 800130c:	200018fc 	.word	0x200018fc
 8001310:	200010dc 	.word	0x200010dc

08001314 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800131a:	2101      	movs	r1, #1
 800131c:	4830      	ldr	r0, [pc, #192]	; (80013e0 <Si468x_bootloader_load_host+0xcc>)
 800131e:	f001 fc49 	bl	8002bb4 <send_debug_msg>
	Si468x_load_init();
 8001322:	f7ff ffcd 	bl	80012c0 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001326:	f241 63a4 	movw	r3, #5796	; 0x16a4
 800132a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800132e:	2204      	movs	r2, #4
 8001330:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001334:	2200      	movs	r2, #0
 8001336:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001338:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800133a:	2200      	movs	r2, #0
 800133c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800133e:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001340:	2200      	movs	r2, #0
 8001342:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	e03e      	b.n	80013c8 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 800134a:	2300      	movs	r3, #0
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	e014      	b.n	800137a <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 8001350:	88ba      	ldrh	r2, [r7, #4]
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	4924      	ldr	r1, [pc, #144]	; (80013e8 <Si468x_bootloader_load_host+0xd4>)
 8001356:	fba1 1303 	umull	r1, r3, r1, r3
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	441a      	add	r2, r3
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	3304      	adds	r3, #4
 800136c:	491f      	ldr	r1, [pc, #124]	; (80013ec <Si468x_bootloader_load_host+0xd8>)
 800136e:	5c89      	ldrb	r1, [r1, r2]
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <Si468x_bootloader_load_host+0xd0>)
 8001372:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	3301      	adds	r3, #1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <Si468x_bootloader_load_host+0xd4>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	88ba      	ldrh	r2, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3e1      	bcc.n	8001350 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <Si468x_bootloader_load_host+0xd4>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	3304      	adds	r3, #4
 800139a:	b29b      	uxth	r3, r3
 800139c:	4911      	ldr	r1, [pc, #68]	; (80013e4 <Si468x_bootloader_load_host+0xd0>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f9c0 	bl	8001724 <Si468x_write_command>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <Si468x_bootloader_load_host+0xdc>)
 80013aa:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f002 fdf3 	bl	8003f98 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80013b2:	4910      	ldr	r1, [pc, #64]	; (80013f4 <Si468x_bootloader_load_host+0xe0>)
 80013b4:	2005      	movs	r0, #5
 80013b6:	f000 f9d7 	bl	8001768 <Si468x_read_reply>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <Si468x_bootloader_load_host+0xdc>)
 80013c0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	3301      	adds	r3, #1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d9bd      	bls.n	800134a <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 80013ce:	2101      	movs	r1, #1
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <Si468x_bootloader_load_host+0xe4>)
 80013d2:	f001 fbef 	bl	8002bb4 <send_debug_msg>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800953c 	.word	0x0800953c
 80013e4:	200000dc 	.word	0x200000dc
 80013e8:	aaaaaaab 	.word	0xaaaaaaab
 80013ec:	0800a6fc 	.word	0x0800a6fc
 80013f0:	200018fc 	.word	0x200018fc
 80013f4:	200010dc 	.word	0x200010dc
 80013f8:	08009578 	.word	0x08009578

080013fc <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001404:	2101      	movs	r1, #1
 8001406:	4845      	ldr	r0, [pc, #276]	; (800151c <Si468x_firmware_load_flash+0x120>)
 8001408:	f001 fbd4 	bl	8002bb4 <send_debug_msg>
	Si468x_load_init();
 800140c:	f7ff ff58 	bl	80012c0 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001410:	4b43      	ldr	r3, [pc, #268]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 8001412:	2205      	movs	r2, #5
 8001414:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800141c:	4b40      	ldr	r3, [pc, #256]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 800141e:	2200      	movs	r2, #0
 8001420:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 8001424:	2200      	movs	r2, #0
 8001426:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 800142e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 8001438:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b37      	ldr	r3, [pc, #220]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 8001442:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0e1b      	lsrs	r3, r3, #24
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 800144c:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 800144e:	2100      	movs	r1, #0
 8001450:	4834      	ldr	r0, [pc, #208]	; (8001524 <Si468x_firmware_load_flash+0x128>)
 8001452:	f001 fbaf 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	2210      	movs	r2, #16
 800145c:	4932      	ldr	r1, [pc, #200]	; (8001528 <Si468x_firmware_load_flash+0x12c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f007 fefe 	bl	8009260 <itoa>
 8001464:	4603      	mov	r3, r0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fba3 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 8001470:	795b      	ldrb	r3, [r3, #5]
 8001472:	2210      	movs	r2, #16
 8001474:	492c      	ldr	r1, [pc, #176]	; (8001528 <Si468x_firmware_load_flash+0x12c>)
 8001476:	4618      	mov	r0, r3
 8001478:	f007 fef2 	bl	8009260 <itoa>
 800147c:	4603      	mov	r3, r0
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fb97 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 8001488:	799b      	ldrb	r3, [r3, #6]
 800148a:	2210      	movs	r2, #16
 800148c:	4926      	ldr	r1, [pc, #152]	; (8001528 <Si468x_firmware_load_flash+0x12c>)
 800148e:	4618      	mov	r0, r3
 8001490:	f007 fee6 	bl	8009260 <itoa>
 8001494:	4603      	mov	r3, r0
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f001 fb8b 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 80014a0:	79db      	ldrb	r3, [r3, #7]
 80014a2:	2210      	movs	r2, #16
 80014a4:	4920      	ldr	r1, [pc, #128]	; (8001528 <Si468x_firmware_load_flash+0x12c>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f007 feda 	bl	8009260 <itoa>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2101      	movs	r1, #1
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fb7f 	bl	8002bb4 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 80014be:	2200      	movs	r2, #0
 80014c0:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80014ce:	4914      	ldr	r1, [pc, #80]	; (8001520 <Si468x_firmware_load_flash+0x124>)
 80014d0:	200c      	movs	r0, #12
 80014d2:	f000 f927 	bl	8001724 <Si468x_write_command>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <Si468x_firmware_load_flash+0x130>)
 80014dc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f002 fd5a 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014e4:	4912      	ldr	r1, [pc, #72]	; (8001530 <Si468x_firmware_load_flash+0x134>)
 80014e6:	2005      	movs	r0, #5
 80014e8:	f000 f93e 	bl	8001768 <Si468x_read_reply>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <Si468x_firmware_load_flash+0x130>)
 80014f2:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <Si468x_firmware_load_flash+0x134>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001500:	2101      	movs	r1, #1
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <Si468x_firmware_load_flash+0x138>)
 8001504:	f001 fb56 	bl	8002bb4 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001508:	e003      	b.n	8001512 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800150a:	2101      	movs	r1, #1
 800150c:	480a      	ldr	r0, [pc, #40]	; (8001538 <Si468x_firmware_load_flash+0x13c>)
 800150e:	f001 fb51 	bl	8002bb4 <send_debug_msg>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	08009598 	.word	0x08009598
 8001520:	200000dc 	.word	0x200000dc
 8001524:	080095d4 	.word	0x080095d4
 8001528:	200018dc 	.word	0x200018dc
 800152c:	200018fc 	.word	0x200018fc
 8001530:	200010dc 	.word	0x200010dc
 8001534:	080095e8 	.word	0x080095e8
 8001538:	080095f8 	.word	0x080095f8

0800153c <Si468x_boot>:

void Si468x_boot()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 8001540:	2101      	movs	r1, #1
 8001542:	4816      	ldr	r0, [pc, #88]	; (800159c <Si468x_boot+0x60>)
 8001544:	f001 fb36 	bl	8002bb4 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <Si468x_boot+0x64>)
 800154a:	2207      	movs	r2, #7
 800154c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <Si468x_boot+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 8001554:	4912      	ldr	r1, [pc, #72]	; (80015a0 <Si468x_boot+0x64>)
 8001556:	2002      	movs	r0, #2
 8001558:	f000 f8e4 	bl	8001724 <Si468x_write_command>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <Si468x_boot+0x68>)
 8001562:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f002 fd17 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800156a:	490f      	ldr	r1, [pc, #60]	; (80015a8 <Si468x_boot+0x6c>)
 800156c:	2005      	movs	r0, #5
 800156e:	f000 f8fb 	bl	8001768 <Si468x_read_reply>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <Si468x_boot+0x68>)
 8001578:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <Si468x_boot+0x6c>)
 800157c:	78db      	ldrb	r3, [r3, #3]
 800157e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001582:	2bc0      	cmp	r3, #192	; 0xc0
 8001584:	d104      	bne.n	8001590 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 8001586:	2101      	movs	r1, #1
 8001588:	4808      	ldr	r0, [pc, #32]	; (80015ac <Si468x_boot+0x70>)
 800158a:	f001 fb13 	bl	8002bb4 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 800158e:	e003      	b.n	8001598 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 8001590:	2101      	movs	r1, #1
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <Si468x_boot+0x74>)
 8001594:	f001 fb0e 	bl	8002bb4 <send_debug_msg>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08009614 	.word	0x08009614
 80015a0:	200000dc 	.word	0x200000dc
 80015a4:	200018fc 	.word	0x200018fc
 80015a8:	200010dc 	.word	0x200010dc
 80015ac:	08009650 	.word	0x08009650
 80015b0:	0800966c 	.word	0x0800966c

080015b4 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 80015be:	1df9      	adds	r1, r7, #7
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	2201      	movs	r2, #1
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <Si468x_write_single_byte+0x20>)
 80015c6:	f005 fe2e 	bl	8007226 <HAL_SPI_Transmit>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20002520 	.word	0x20002520

080015d8 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 80015e2:	1df9      	adds	r1, r7, #7
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	2201      	movs	r2, #1
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <Si468x_read_single_byte+0x20>)
 80015ea:	f005 ff58 	bl	800749e <HAL_SPI_Receive>
	return data_buffer;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20002520 	.word	0x20002520

080015fc <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	81fb      	strh	r3, [r7, #14]
 800160e:	e01c      	b.n	800164a <Si468x_wait_for_CTS+0x4e>
	{
		Si468x_read_multiple(1, &cts_status);
 8001610:	f107 030d 	add.w	r3, r7, #13
 8001614:	4619      	mov	r1, r3
 8001616:	2001      	movs	r0, #1
 8001618:	f000 f850 	bl	80016bc <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 800161c:	7b7b      	ldrb	r3, [r7, #13]
 800161e:	b25b      	sxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	da0c      	bge.n	800163e <Si468x_wait_for_CTS+0x42>
		{
			if((cts_status & 0x40) == 0x40)
 8001624:	7b7b      	ldrb	r3, [r7, #13]
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <Si468x_wait_for_CTS+0x3e>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 800162e:	2101      	movs	r1, #1
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <Si468x_wait_for_CTS+0x68>)
 8001632:	f001 fabf 	bl	8002bb4 <send_debug_msg>
				return COMMAND_ERROR;
 8001636:	2320      	movs	r3, #32
 8001638:	e010      	b.n	800165c <Si468x_wait_for_CTS+0x60>
			}
			return SUCCESS;
 800163a:	2300      	movs	r3, #0
 800163c:	e00e      	b.n	800165c <Si468x_wait_for_CTS+0x60>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f002 fcaa 	bl	8003f98 <HAL_Delay>
	for(i = 0; i < timeout; i++)
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	3301      	adds	r3, #1
 8001648:	81fb      	strh	r3, [r7, #14]
 800164a:	89fa      	ldrh	r2, [r7, #14]
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3de      	bcc.n	8001610 <Si468x_wait_for_CTS+0x14>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 8001652:	2101      	movs	r1, #1
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <Si468x_wait_for_CTS+0x6c>)
 8001656:	f001 faad 	bl	8002bb4 <send_debug_msg>
	return TIMEOUT;
 800165a:	2308      	movs	r3, #8
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	08009680 	.word	0x08009680
 8001668:	080096a8 	.word	0x080096a8

0800166c <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 800167c:	2200      	movs	r2, #0
 800167e:	2110      	movs	r1, #16
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <Si468x_write_multiple+0x4c>)
 8001682:	f003 fa75 	bl	8004b70 <HAL_GPIO_WritePin>
	while(len--)
 8001686:	e009      	b.n	800169c <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	81fa      	strh	r2, [r7, #14]
 800168e:	461a      	mov	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff8c 	bl	80015b4 <Si468x_write_single_byte>
	while(len--)
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	1e5a      	subs	r2, r3, #1
 80016a0:	80fa      	strh	r2, [r7, #6]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 80016a6:	2201      	movs	r2, #1
 80016a8:	2110      	movs	r1, #16
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <Si468x_write_multiple+0x4c>)
 80016ac:	f003 fa60 	bl	8004b70 <HAL_GPIO_WritePin>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40020800 	.word	0x40020800

080016bc <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 80016cc:	2201      	movs	r2, #1
 80016ce:	2110      	movs	r1, #16
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <Si468x_read_multiple+0x64>)
 80016d2:	f003 fa4d 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f002 fc5e 	bl	8003f98 <HAL_Delay>
	CS_PIN_LOW;
 80016dc:	2200      	movs	r2, #0
 80016de:	2110      	movs	r1, #16
 80016e0:	480f      	ldr	r0, [pc, #60]	; (8001720 <Si468x_read_multiple+0x64>)
 80016e2:	f003 fa45 	bl	8004b70 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ff64 	bl	80015b4 <Si468x_write_single_byte>
	while(len--)
 80016ec:	e009      	b.n	8001702 <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	81fa      	strh	r2, [r7, #14]
 80016f4:	461a      	mov	r2, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	189c      	adds	r4, r3, r2
 80016fa:	f7ff ff6d 	bl	80015d8 <Si468x_read_single_byte>
 80016fe:	4603      	mov	r3, r0
 8001700:	7023      	strb	r3, [r4, #0]
	while(len--)
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	80fa      	strh	r2, [r7, #6]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 800170c:	2201      	movs	r2, #1
 800170e:	2110      	movs	r1, #16
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <Si468x_read_multiple+0x64>)
 8001712:	f003 fa2d 	bl	8004b70 <HAL_GPIO_WritePin>
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	40020800 	.word	0x40020800

08001724 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001734:	f7ff ff62 	bl	80015fc <Si468x_wait_for_CTS>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <Si468x_write_command+0x24>
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b20      	cmp	r3, #32
 8001746:	d10a      	bne.n	800175e <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff8d 	bl	800166c <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 8001752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001756:	f7ff ff51 	bl	80015fc <Si468x_wait_for_CTS>
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	6839      	ldr	r1, [r7, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff9f 	bl	80016bc <Si468x_read_multiple>
	return SUCCESS;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 800178c:	2101      	movs	r1, #1
 800178e:	4833      	ldr	r0, [pc, #204]	; (800185c <Si468x_get_sys_state+0xd4>)
 8001790:	f001 fa10 	bl	8002bb4 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <Si468x_get_sys_state+0xd8>)
 8001796:	2209      	movs	r2, #9
 8001798:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <Si468x_get_sys_state+0xd8>)
 800179c:	2200      	movs	r2, #0
 800179e:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80017a0:	492f      	ldr	r1, [pc, #188]	; (8001860 <Si468x_get_sys_state+0xd8>)
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7ff ffbe 	bl	8001724 <Si468x_write_command>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <Si468x_get_sys_state+0xdc>)
 80017ae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f002 fbf1 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80017b6:	492c      	ldr	r1, [pc, #176]	; (8001868 <Si468x_get_sys_state+0xe0>)
 80017b8:	2005      	movs	r0, #5
 80017ba:	f7ff ffd5 	bl	8001768 <Si468x_read_reply>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <Si468x_get_sys_state+0xdc>)
 80017c4:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 80017c6:	2100      	movs	r1, #0
 80017c8:	4828      	ldr	r0, [pc, #160]	; (800186c <Si468x_get_sys_state+0xe4>)
 80017ca:	f001 f9f3 	bl	8002bb4 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <Si468x_get_sys_state+0xe0>)
 80017d0:	791b      	ldrb	r3, [r3, #4]
 80017d2:	2b07      	cmp	r3, #7
 80017d4:	d83a      	bhi.n	800184c <Si468x_get_sys_state+0xc4>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <Si468x_get_sys_state+0x54>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017fd 	.word	0x080017fd
 80017e0:	08001807 	.word	0x08001807
 80017e4:	08001811 	.word	0x08001811
 80017e8:	0800181b 	.word	0x0800181b
 80017ec:	08001825 	.word	0x08001825
 80017f0:	0800182f 	.word	0x0800182f
 80017f4:	08001839 	.word	0x08001839
 80017f8:	08001843 	.word	0x08001843
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 80017fc:	2101      	movs	r1, #1
 80017fe:	481c      	ldr	r0, [pc, #112]	; (8001870 <Si468x_get_sys_state+0xe8>)
 8001800:	f001 f9d8 	bl	8002bb4 <send_debug_msg>
			break;
 8001804:	e027      	b.n	8001856 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001806:	2101      	movs	r1, #1
 8001808:	481a      	ldr	r0, [pc, #104]	; (8001874 <Si468x_get_sys_state+0xec>)
 800180a:	f001 f9d3 	bl	8002bb4 <send_debug_msg>
			break;
 800180e:	e022      	b.n	8001856 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 8001810:	2101      	movs	r1, #1
 8001812:	4819      	ldr	r0, [pc, #100]	; (8001878 <Si468x_get_sys_state+0xf0>)
 8001814:	f001 f9ce 	bl	8002bb4 <send_debug_msg>
			break;
 8001818:	e01d      	b.n	8001856 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 800181a:	2101      	movs	r1, #1
 800181c:	4817      	ldr	r0, [pc, #92]	; (800187c <Si468x_get_sys_state+0xf4>)
 800181e:	f001 f9c9 	bl	8002bb4 <send_debug_msg>
			break;
 8001822:	e018      	b.n	8001856 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 8001824:	2101      	movs	r1, #1
 8001826:	4816      	ldr	r0, [pc, #88]	; (8001880 <Si468x_get_sys_state+0xf8>)
 8001828:	f001 f9c4 	bl	8002bb4 <send_debug_msg>
			break;
 800182c:	e013      	b.n	8001856 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 800182e:	2101      	movs	r1, #1
 8001830:	4814      	ldr	r0, [pc, #80]	; (8001884 <Si468x_get_sys_state+0xfc>)
 8001832:	f001 f9bf 	bl	8002bb4 <send_debug_msg>
			break;
 8001836:	e00e      	b.n	8001856 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 8001838:	2101      	movs	r1, #1
 800183a:	4813      	ldr	r0, [pc, #76]	; (8001888 <Si468x_get_sys_state+0x100>)
 800183c:	f001 f9ba 	bl	8002bb4 <send_debug_msg>
			break;
 8001840:	e009      	b.n	8001856 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 8001842:	2101      	movs	r1, #1
 8001844:	4811      	ldr	r0, [pc, #68]	; (800188c <Si468x_get_sys_state+0x104>)
 8001846:	f001 f9b5 	bl	8002bb4 <send_debug_msg>
			break;
 800184a:	e004      	b.n	8001856 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 800184c:	2101      	movs	r1, #1
 800184e:	4810      	ldr	r0, [pc, #64]	; (8001890 <Si468x_get_sys_state+0x108>)
 8001850:	f001 f9b0 	bl	8002bb4 <send_debug_msg>
			break;
 8001854:	bf00      	nop
	}
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	080096b8 	.word	0x080096b8
 8001860:	200000dc 	.word	0x200000dc
 8001864:	200018fc 	.word	0x200018fc
 8001868:	200010dc 	.word	0x200010dc
 800186c:	080096f4 	.word	0x080096f4
 8001870:	08009700 	.word	0x08009700
 8001874:	08009718 	.word	0x08009718
 8001878:	08009730 	.word	0x08009730
 800187c:	08009748 	.word	0x08009748
 8001880:	08009770 	.word	0x08009770
 8001884:	0800978c 	.word	0x0800978c
 8001888:	080097a4 	.word	0x080097a4
 800188c:	080097c0 	.word	0x080097c0
 8001890:	080097d8 	.word	0x080097d8

08001894 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 800189a:	2101      	movs	r1, #1
 800189c:	482d      	ldr	r0, [pc, #180]	; (8001954 <Si468x_get_part_info+0xc0>)
 800189e:	f001 f989 	bl	8002bb4 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 80018a2:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <Si468x_get_part_info+0xc4>)
 80018a4:	2208      	movs	r2, #8
 80018a6:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <Si468x_get_part_info+0xc4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80018ae:	492a      	ldr	r1, [pc, #168]	; (8001958 <Si468x_get_part_info+0xc4>)
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff ff37 	bl	8001724 <Si468x_write_command>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <Si468x_get_part_info+0xc8>)
 80018bc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80018be:	2001      	movs	r0, #1
 80018c0:	f002 fb6a 	bl	8003f98 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff fe75 	bl	80015b4 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 80018ca:	4925      	ldr	r1, [pc, #148]	; (8001960 <Si468x_get_part_info+0xcc>)
 80018cc:	200a      	movs	r0, #10
 80018ce:	f7ff ff4b 	bl	8001768 <Si468x_read_reply>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <Si468x_get_part_info+0xc8>)
 80018d8:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 80018da:	2100      	movs	r1, #0
 80018dc:	4821      	ldr	r0, [pc, #132]	; (8001964 <Si468x_get_part_info+0xd0>)
 80018de:	f001 f969 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <Si468x_get_part_info+0xcc>)
 80018e4:	791b      	ldrb	r3, [r3, #4]
 80018e6:	220a      	movs	r2, #10
 80018e8:	491f      	ldr	r1, [pc, #124]	; (8001968 <Si468x_get_part_info+0xd4>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f007 fcb8 	bl	8009260 <itoa>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 f95d 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 80018fa:	2100      	movs	r1, #0
 80018fc:	481b      	ldr	r0, [pc, #108]	; (800196c <Si468x_get_part_info+0xd8>)
 80018fe:	f001 f959 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <Si468x_get_part_info+0xcc>)
 8001904:	795b      	ldrb	r3, [r3, #5]
 8001906:	220a      	movs	r2, #10
 8001908:	4917      	ldr	r1, [pc, #92]	; (8001968 <Si468x_get_part_info+0xd4>)
 800190a:	4618      	mov	r0, r3
 800190c:	f007 fca8 	bl	8009260 <itoa>
 8001910:	4603      	mov	r3, r0
 8001912:	2101      	movs	r1, #1
 8001914:	4618      	mov	r0, r3
 8001916:	f001 f94d 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 800191a:	2100      	movs	r1, #0
 800191c:	4814      	ldr	r0, [pc, #80]	; (8001970 <Si468x_get_part_info+0xdc>)
 800191e:	f001 f949 	bl	8002bb4 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <Si468x_get_part_info+0xcc>)
 8001924:	7a5b      	ldrb	r3, [r3, #9]
 8001926:	b29b      	uxth	r3, r3
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <Si468x_get_part_info+0xcc>)
 800192e:	7a1b      	ldrb	r3, [r3, #8]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	220a      	movs	r2, #10
 800193a:	490b      	ldr	r1, [pc, #44]	; (8001968 <Si468x_get_part_info+0xd4>)
 800193c:	4618      	mov	r0, r3
 800193e:	f007 fc8f 	bl	8009260 <itoa>
 8001942:	4603      	mov	r3, r0
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f001 f934 	bl	8002bb4 <send_debug_msg>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	080097ec 	.word	0x080097ec
 8001958:	200000dc 	.word	0x200000dc
 800195c:	200018fc 	.word	0x200018fc
 8001960:	200010dc 	.word	0x200010dc
 8001964:	08009828 	.word	0x08009828
 8001968:	200018dc 	.word	0x200018dc
 800196c:	08009838 	.word	0x08009838
 8001970:	08009844 	.word	0x08009844

08001974 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	460a      	mov	r2, r1
 800197e:	80fb      	strh	r3, [r7, #6]
 8001980:	4613      	mov	r3, r2
 8001982:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001984:	2101      	movs	r1, #1
 8001986:	4832      	ldr	r0, [pc, #200]	; (8001a50 <Si468x_set_property+0xdc>)
 8001988:	f001 f914 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 800198c:	2100      	movs	r1, #0
 800198e:	4831      	ldr	r0, [pc, #196]	; (8001a54 <Si468x_set_property+0xe0>)
 8001990:	f001 f910 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	2210      	movs	r2, #16
 8001998:	492f      	ldr	r1, [pc, #188]	; (8001a58 <Si468x_set_property+0xe4>)
 800199a:	4618      	mov	r0, r3
 800199c:	f007 fc60 	bl	8009260 <itoa>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2101      	movs	r1, #1
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 f905 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 80019aa:	2100      	movs	r1, #0
 80019ac:	482b      	ldr	r0, [pc, #172]	; (8001a5c <Si468x_set_property+0xe8>)
 80019ae:	f001 f901 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 80019b2:	88bb      	ldrh	r3, [r7, #4]
 80019b4:	2210      	movs	r2, #16
 80019b6:	4928      	ldr	r1, [pc, #160]	; (8001a58 <Si468x_set_property+0xe4>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f007 fc51 	bl	8009260 <itoa>
 80019be:	4603      	mov	r3, r0
 80019c0:	2101      	movs	r1, #1
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 f8f6 	bl	8002bb4 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <Si468x_set_property+0xec>)
 80019ca:	2213      	movs	r2, #19
 80019cc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <Si468x_set_property+0xec>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <Si468x_set_property+0xec>)
 80019da:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <Si468x_set_property+0xec>)
 80019e6:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <Si468x_set_property+0xec>)
 80019ee:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <Si468x_set_property+0xec>)
 80019fa:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 80019fc:	4918      	ldr	r1, [pc, #96]	; (8001a60 <Si468x_set_property+0xec>)
 80019fe:	2006      	movs	r0, #6
 8001a00:	f7ff fe90 	bl	8001724 <Si468x_write_command>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <Si468x_set_property+0xf0>)
 8001a0a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f002 fac3 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001a12:	4915      	ldr	r1, [pc, #84]	; (8001a68 <Si468x_set_property+0xf4>)
 8001a14:	2005      	movs	r0, #5
 8001a16:	f7ff fea7 	bl	8001768 <Si468x_read_reply>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <Si468x_set_property+0xf0>)
 8001a20:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f825 	bl	8001a74 <Si468x_get_property>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 8001a2e:	89fa      	ldrh	r2, [r7, #14]
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d104      	bne.n	8001a40 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 8001a36:	2101      	movs	r1, #1
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <Si468x_set_property+0xf8>)
 8001a3a:	f001 f8bb 	bl	8002bb4 <send_debug_msg>
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}

}
 8001a3e:	e003      	b.n	8001a48 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 8001a40:	2101      	movs	r1, #1
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <Si468x_set_property+0xfc>)
 8001a44:	f001 f8b6 	bl	8002bb4 <send_debug_msg>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	08009854 	.word	0x08009854
 8001a54:	08009894 	.word	0x08009894
 8001a58:	200018dc 	.word	0x200018dc
 8001a5c:	080098a4 	.word	0x080098a4
 8001a60:	200000dc 	.word	0x200000dc
 8001a64:	200018fc 	.word	0x200018fc
 8001a68:	200010dc 	.word	0x200010dc
 8001a6c:	080098c0 	.word	0x080098c0
 8001a70:	080098dc 	.word	0x080098dc

08001a74 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	482b      	ldr	r0, [pc, #172]	; (8001b30 <Si468x_get_property+0xbc>)
 8001a82:	f001 f897 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a86:	2100      	movs	r1, #0
 8001a88:	482a      	ldr	r0, [pc, #168]	; (8001b34 <Si468x_get_property+0xc0>)
 8001a8a:	f001 f893 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	2210      	movs	r2, #16
 8001a92:	4929      	ldr	r1, [pc, #164]	; (8001b38 <Si468x_get_property+0xc4>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f007 fbe3 	bl	8009260 <itoa>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 f888 	bl	8002bb4 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <Si468x_get_property+0xc8>)
 8001aa6:	2214      	movs	r2, #20
 8001aa8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <Si468x_get_property+0xc8>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <Si468x_get_property+0xc8>)
 8001ab6:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <Si468x_get_property+0xc8>)
 8001ac2:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001ac4:	491d      	ldr	r1, [pc, #116]	; (8001b3c <Si468x_get_property+0xc8>)
 8001ac6:	2004      	movs	r0, #4
 8001ac8:	f7ff fe2c 	bl	8001724 <Si468x_write_command>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <Si468x_get_property+0xcc>)
 8001ad2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f002 fa5f 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001ada:	491a      	ldr	r1, [pc, #104]	; (8001b44 <Si468x_get_property+0xd0>)
 8001adc:	2006      	movs	r0, #6
 8001ade:	f7ff fe43 	bl	8001768 <Si468x_read_reply>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <Si468x_get_property+0xcc>)
 8001ae8:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001aea:	2100      	movs	r1, #0
 8001aec:	4816      	ldr	r0, [pc, #88]	; (8001b48 <Si468x_get_property+0xd4>)
 8001aee:	f001 f861 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <Si468x_get_property+0xd0>)
 8001af4:	795b      	ldrb	r3, [r3, #5]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <Si468x_get_property+0xd0>)
 8001afa:	7912      	ldrb	r2, [r2, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	2210      	movs	r2, #16
 8001b00:	490d      	ldr	r1, [pc, #52]	; (8001b38 <Si468x_get_property+0xc4>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 fbac 	bl	8009260 <itoa>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 f851 	bl	8002bb4 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <Si468x_get_property+0xd0>)
 8001b14:	795b      	ldrb	r3, [r3, #5]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <Si468x_get_property+0xd0>)
 8001b1e:	791b      	ldrb	r3, [r3, #4]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	080098f4 	.word	0x080098f4
 8001b34:	08009894 	.word	0x08009894
 8001b38:	200018dc 	.word	0x200018dc
 8001b3c:	200000dc 	.word	0x200000dc
 8001b40:	200018fc 	.word	0x200018fc
 8001b44:	200010dc 	.word	0x200010dc
 8001b48:	08009930 	.word	0x08009930

08001b4c <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001b52:	2101      	movs	r1, #1
 8001b54:	485c      	ldr	r0, [pc, #368]	; (8001cc8 <Si468x_dab_get_freq_list+0x17c>)
 8001b56:	f001 f82d 	bl	8002bb4 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ccc <Si468x_dab_get_freq_list+0x180>)
 8001b5c:	22b9      	movs	r2, #185	; 0xb9
 8001b5e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001b60:	4b5a      	ldr	r3, [pc, #360]	; (8001ccc <Si468x_dab_get_freq_list+0x180>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001b66:	4959      	ldr	r1, [pc, #356]	; (8001ccc <Si468x_dab_get_freq_list+0x180>)
 8001b68:	2002      	movs	r0, #2
 8001b6a:	f7ff fddb 	bl	8001724 <Si468x_write_command>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <Si468x_dab_get_freq_list+0x184>)
 8001b74:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f002 fa0e 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b7c:	4955      	ldr	r1, [pc, #340]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001b7e:	2005      	movs	r0, #5
 8001b80:	f7ff fdf2 	bl	8001768 <Si468x_read_reply>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b51      	ldr	r3, [pc, #324]	; (8001cd0 <Si468x_dab_get_freq_list+0x184>)
 8001b8a:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001b8c:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <Si468x_dab_get_freq_list+0x56>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b98:	2101      	movs	r1, #1
 8001b9a:	484f      	ldr	r0, [pc, #316]	; (8001cd8 <Si468x_dab_get_freq_list+0x18c>)
 8001b9c:	f001 f80a 	bl	8002bb4 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001ba0:	e08e      	b.n	8001cc0 <Si468x_dab_get_freq_list+0x174>
		if(dab_spi_rx_buffer[4])
 8001ba2:	4b4c      	ldr	r3, [pc, #304]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8086 	beq.w	8001cb8 <Si468x_dab_get_freq_list+0x16c>
			uint8_t read_offset = 2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	70fb      	strb	r3, [r7, #3]
			freq_cnt = dab_spi_rx_buffer[4];
 8001bb0:	4b48      	ldr	r3, [pc, #288]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001bb2:	791a      	ldrb	r2, [r3, #4]
 8001bb4:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <Si468x_dab_get_freq_list+0x190>)
 8001bb6:	701a      	strb	r2, [r3, #0]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4849      	ldr	r0, [pc, #292]	; (8001ce0 <Si468x_dab_get_freq_list+0x194>)
 8001bbc:	f000 fffa 	bl	8002bb4 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001bc0:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <Si468x_dab_get_freq_list+0x190>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	4947      	ldr	r1, [pc, #284]	; (8001ce4 <Si468x_dab_get_freq_list+0x198>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f007 fb49 	bl	8009260 <itoa>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 ffee 	bl	8002bb4 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4843      	ldr	r0, [pc, #268]	; (8001ce8 <Si468x_dab_get_freq_list+0x19c>)
 8001bdc:	f000 ffea 	bl	8002bb4 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001be0:	493c      	ldr	r1, [pc, #240]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001be2:	2003      	movs	r0, #3
 8001be4:	f7ff fdc0 	bl	8001768 <Si468x_read_reply>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <Si468x_dab_get_freq_list+0x184>)
 8001bee:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <Si468x_dab_get_freq_list+0x190>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fdb0 	bl	8001768 <Si468x_read_reply>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <Si468x_dab_get_freq_list+0x184>)
 8001c0e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	e049      	b.n	8001caa <Si468x_dab_get_freq_list+0x15e>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4a2d      	ldr	r2, [pc, #180]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	4619      	mov	r1, r3
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a29      	ldr	r2, [pc, #164]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	18ca      	adds	r2, r1, r3
 8001c36:	78f9      	ldrb	r1, [r7, #3]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	440b      	add	r3, r1
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	4924      	ldr	r1, [pc, #144]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	441a      	add	r2, r3
 8001c48:	78f9      	ldrb	r1, [r7, #3]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	440b      	add	r3, r1
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	3303      	adds	r3, #3
 8001c52:	4920      	ldr	r1, [pc, #128]	; (8001cd4 <Si468x_dab_get_freq_list+0x188>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	061b      	lsls	r3, r3, #24
 8001c58:	4413      	add	r3, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4a23      	ldr	r2, [pc, #140]	; (8001cec <Si468x_dab_get_freq_list+0x1a0>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001c64:	220a      	movs	r2, #10
 8001c66:	491f      	ldr	r1, [pc, #124]	; (8001ce4 <Si468x_dab_get_freq_list+0x198>)
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f007 faf9 	bl	8009260 <itoa>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 ff9e 	bl	8002bb4 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	481d      	ldr	r0, [pc, #116]	; (8001cf0 <Si468x_dab_get_freq_list+0x1a4>)
 8001c7c:	f000 ff9a 	bl	8002bb4 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c80:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <Si468x_dab_get_freq_list+0x1a0>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	220a      	movs	r2, #10
 8001c8a:	4916      	ldr	r1, [pc, #88]	; (8001ce4 <Si468x_dab_get_freq_list+0x198>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f007 fae7 	bl	8009260 <itoa>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 ff8c 	bl	8002bb4 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4815      	ldr	r0, [pc, #84]	; (8001cf4 <Si468x_dab_get_freq_list+0x1a8>)
 8001ca0:	f000 ff88 	bl	8002bb4 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <Si468x_dab_get_freq_list+0x190>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	dbaf      	blt.n	8001c16 <Si468x_dab_get_freq_list+0xca>
}
 8001cb6:	e003      	b.n	8001cc0 <Si468x_dab_get_freq_list+0x174>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001cb8:	2101      	movs	r1, #1
 8001cba:	480f      	ldr	r0, [pc, #60]	; (8001cf8 <Si468x_dab_get_freq_list+0x1ac>)
 8001cbc:	f000 ff7a 	bl	8002bb4 <send_debug_msg>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	08009944 	.word	0x08009944
 8001ccc:	200000dc 	.word	0x200000dc
 8001cd0:	200018fc 	.word	0x200018fc
 8001cd4:	200010dc 	.word	0x200010dc
 8001cd8:	080095e8 	.word	0x080095e8
 8001cdc:	200019c0 	.word	0x200019c0
 8001ce0:	08009980 	.word	0x08009980
 8001ce4:	200018dc 	.word	0x200018dc
 8001ce8:	08009988 	.word	0x08009988
 8001cec:	20001900 	.word	0x20001900
 8001cf0:	080099a0 	.word	0x080099a0
 8001cf4:	080099a4 	.word	0x080099a4
 8001cf8:	080099ac 	.word	0x080099ac

08001cfc <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001d06:	2101      	movs	r1, #1
 8001d08:	4845      	ldr	r0, [pc, #276]	; (8001e20 <Si468x_dab_tune_freq+0x124>)
 8001d0a:	f000 ff53 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4844      	ldr	r0, [pc, #272]	; (8001e24 <Si468x_dab_tune_freq+0x128>)
 8001d12:	f000 ff4f 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4a43      	ldr	r2, [pc, #268]	; (8001e28 <Si468x_dab_tune_freq+0x12c>)
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	220a      	movs	r2, #10
 8001d20:	4942      	ldr	r1, [pc, #264]	; (8001e2c <Si468x_dab_tune_freq+0x130>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f007 fa9c 	bl	8009260 <itoa>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 ff41 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001d32:	2101      	movs	r1, #1
 8001d34:	483e      	ldr	r0, [pc, #248]	; (8001e30 <Si468x_dab_tune_freq+0x134>)
 8001d36:	f000 ff3d 	bl	8002bb4 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <Si468x_dab_tune_freq+0x138>)
 8001d3c:	22b0      	movs	r2, #176	; 0xb0
 8001d3e:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001d40:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <Si468x_dab_tune_freq+0x138>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001d46:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <Si468x_dab_tune_freq+0x138>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001d4c:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <Si468x_dab_tune_freq+0x138>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = 0x00;						//antcap [7:0]
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <Si468x_dab_tune_freq+0x138>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = 0x00;						//antcap [15:8]
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <Si468x_dab_tune_freq+0x138>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001d5e:	4935      	ldr	r1, [pc, #212]	; (8001e34 <Si468x_dab_tune_freq+0x138>)
 8001d60:	2006      	movs	r0, #6
 8001d62:	f7ff fcdf 	bl	8001724 <Si468x_write_command>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <Si468x_dab_tune_freq+0x13c>)
 8001d6c:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d6e:	4933      	ldr	r1, [pc, #204]	; (8001e3c <Si468x_dab_tune_freq+0x140>)
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff fcf9 	bl	8001768 <Si468x_read_reply>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <Si468x_dab_tune_freq+0x13c>)
 8001d7c:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <Si468x_dab_tune_freq+0x140>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <Si468x_dab_tune_freq+0x96>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	482c      	ldr	r0, [pc, #176]	; (8001e40 <Si468x_dab_tune_freq+0x144>)
 8001d8e:	f000 ff11 	bl	8002bb4 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	81fb      	strh	r3, [r7, #14]
 8001d96:	e039      	b.n	8001e0c <Si468x_dab_tune_freq+0x110>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d98:	4928      	ldr	r1, [pc, #160]	; (8001e3c <Si468x_dab_tune_freq+0x140>)
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fce4 	bl	8001768 <Si468x_read_reply>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <Si468x_dab_tune_freq+0x13c>)
 8001da6:	701a      	strb	r2, [r3, #0]

		if(dab_spi_rx_buffer[0] & 0x01)
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <Si468x_dab_tune_freq+0x140>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01c      	beq.n	8001dee <Si468x_dab_tune_freq+0xf2>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001db4:	2100      	movs	r1, #0
 8001db6:	4823      	ldr	r0, [pc, #140]	; (8001e44 <Si468x_dab_tune_freq+0x148>)
 8001db8:	f000 fefc 	bl	8002bb4 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	220a      	movs	r2, #10
 8001dc0:	491a      	ldr	r1, [pc, #104]	; (8001e2c <Si468x_dab_tune_freq+0x130>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f007 fa4c 	bl	8009260 <itoa>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fef1 	bl	8002bb4 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <Si468x_dab_tune_freq+0x14c>)
 8001dd6:	f000 feed 	bl	8002bb4 <send_debug_msg>
			actual_freq_id = channel;
 8001dda:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <Si468x_dab_tune_freq+0x150>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	7013      	strb	r3, [r2, #0]
			actual_freq = freq_table[channel];
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <Si468x_dab_tune_freq+0x12c>)
 8001de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <Si468x_dab_tune_freq+0x154>)
 8001dea:	6013      	str	r3, [r2, #0]
			break;
 8001dec:	e014      	b.n	8001e18 <Si468x_dab_tune_freq+0x11c>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001dee:	89fb      	ldrh	r3, [r7, #14]
 8001df0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d103      	bne.n	8001e00 <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4816      	ldr	r0, [pc, #88]	; (8001e54 <Si468x_dab_tune_freq+0x158>)
 8001dfc:	f000 feda 	bl	8002bb4 <send_debug_msg>
		}
		HAL_Delay(1);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f002 f8c9 	bl	8003f98 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	81fb      	strh	r3, [r7, #14]
 8001e0c:	89fb      	ldrh	r3, [r7, #14]
 8001e0e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d9c0      	bls.n	8001d98 <Si468x_dab_tune_freq+0x9c>
	}
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	080099c8 	.word	0x080099c8
 8001e24:	08009a04 	.word	0x08009a04
 8001e28:	20001900 	.word	0x20001900
 8001e2c:	200018dc 	.word	0x200018dc
 8001e30:	080099a4 	.word	0x080099a4
 8001e34:	200000dc 	.word	0x200000dc
 8001e38:	200018fc 	.word	0x200018fc
 8001e3c:	200010dc 	.word	0x200010dc
 8001e40:	080095e8 	.word	0x080095e8
 8001e44:	08009a10 	.word	0x08009a10
 8001e48:	08009a2c 	.word	0x08009a2c
 8001e4c:	20002454 	.word	0x20002454
 8001e50:	20002450 	.word	0x20002450
 8001e54:	08009a34 	.word	0x08009a34

08001e58 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001e5c:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <Si468x_dab_digrad_status+0x100>)
 8001e5e:	22b2      	movs	r2, #178	; 0xb2
 8001e60:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <Si468x_dab_digrad_status+0x100>)
 8001e64:	221a      	movs	r2, #26
 8001e66:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e68:	493b      	ldr	r1, [pc, #236]	; (8001f58 <Si468x_dab_digrad_status+0x100>)
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f7ff fc5a 	bl	8001724 <Si468x_write_command>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <Si468x_dab_digrad_status+0x104>)
 8001e76:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f002 f88d 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001e7e:	4938      	ldr	r1, [pc, #224]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001e80:	2028      	movs	r0, #40	; 0x28
 8001e82:	f7ff fc71 	bl	8001768 <Si468x_read_reply>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <Si468x_dab_digrad_status+0x104>)
 8001e8c:	701a      	strb	r2, [r3, #0]
	sig_metrics.rssi = dab_spi_rx_buffer[6];
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001e90:	799a      	ldrb	r2, [r3, #6]
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001e94:	701a      	strb	r2, [r3, #0]
	sig_metrics.snr = dab_spi_rx_buffer[7];
 8001e96:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001e98:	79da      	ldrb	r2, [r3, #7]
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001e9c:	705a      	strb	r2, [r3, #1]
	sig_metrics.fic_bit_cnt = dab_spi_rx_buffer[32] + (dab_spi_rx_buffer[33] << 8) + (dab_spi_rx_buffer[34] << 16) + (dab_spi_rx_buffer[35] << 24);
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001ea8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	441a      	add	r2, r3
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001eb2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	441a      	add	r2, r3
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001ebc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	4413      	add	r3, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001ec8:	609a      	str	r2, [r3, #8]
	sig_metrics.fic_err_cnt = dab_spi_rx_buffer[36] + (dab_spi_rx_buffer[37] << 8) + (dab_spi_rx_buffer[38] << 16) + (dab_spi_rx_buffer[39] << 24);
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001ed4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	441a      	add	r2, r3
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001ede:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	441a      	add	r2, r3
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001ee8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	4413      	add	r3, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001ef4:	60da      	str	r2, [r3, #12]
	sig_metrics.fic_q = dab_spi_rx_buffer[8];
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001ef8:	7a1a      	ldrb	r2, [r3, #8]
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001efc:	71da      	strb	r2, [r3, #7]

	if(dab_spi_rx_buffer[5] & 0x01)
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001f00:	795b      	ldrb	r3, [r3, #5]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <Si468x_dab_digrad_status+0xba>
	{
		sig_metrics.valid = 1;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	711a      	strb	r2, [r3, #4]
 8001f10:	e002      	b.n	8001f18 <Si468x_dab_digrad_status+0xc0>
	}
	else
	{
		sig_metrics.valid = 0;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	711a      	strb	r2, [r3, #4]
	}

	if(dab_spi_rx_buffer[5] & 0x04)
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001f1a:	795b      	ldrb	r3, [r3, #5]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <Si468x_dab_digrad_status+0xd4>
	{
		sig_metrics.acq = 1;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	715a      	strb	r2, [r3, #5]
 8001f2a:	e002      	b.n	8001f32 <Si468x_dab_digrad_status+0xda>
	}
	else
	{
		sig_metrics.acq = 0;
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	715a      	strb	r2, [r3, #5]
	}

	if(dab_spi_rx_buffer[4] & 0x04)
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <Si468x_dab_digrad_status+0x108>)
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <Si468x_dab_digrad_status+0xee>
	{
		sig_metrics.acq_int = 1;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	719a      	strb	r2, [r3, #6]
 8001f44:	e002      	b.n	8001f4c <Si468x_dab_digrad_status+0xf4>
	}
	else
	{
		sig_metrics.acq_int = 0;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	719a      	strb	r2, [r3, #6]
	}

	DisplayDabStatus(sig_metrics);
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <Si468x_dab_digrad_status+0x10c>)
 8001f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f50:	f000 ff70 	bl	8002e34 <DisplayDabStatus>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200000dc 	.word	0x200000dc
 8001f5c:	200018fc 	.word	0x200018fc
 8001f60:	200010dc 	.word	0x200010dc
 8001f64:	200019c4 	.word	0x200019c4

08001f68 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	803b      	strh	r3, [r7, #0]
	uint8_t number_of_services = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	71fb      	strb	r3, [r7, #7]
	uint8_t services_count = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	71bb      	strb	r3, [r7, #6]
	uint8_t components_count = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	717b      	strb	r3, [r7, #5]

	#define LIST_READ_OFFSET 4 //Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001f7e:	4ba8      	ldr	r3, [pc, #672]	; (8002220 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001f84:	4ba6      	ldr	r3, [pc, #664]	; (8002220 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001f8a:	49a5      	ldr	r1, [pc, #660]	; (8002220 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	f7ff fbc9 	bl	8001724 <Si468x_write_command>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	4ba3      	ldr	r3, [pc, #652]	; (8002224 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f98:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f001 fffc 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001fa0:	49a1      	ldr	r1, [pc, #644]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fa6:	f7ff fbdf 	bl	8001768 <Si468x_read_reply>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b9d      	ldr	r3, [pc, #628]	; (8002224 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001fb0:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	489d      	ldr	r0, [pc, #628]	; (800222c <Si468x_dab_get_digital_service_list+0x2c4>)
 8001fb6:	f000 fdfd 	bl	8002bb4 <send_debug_msg>

	if(dab_spi_rx_buffer[0] & 0x40)
 8001fba:	4b9b      	ldr	r3, [pc, #620]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <Si468x_dab_get_digital_service_list+0x66>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4899      	ldr	r0, [pc, #612]	; (8002230 <Si468x_dab_get_digital_service_list+0x2c8>)
 8001fca:	f000 fdf3 	bl	8002bb4 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001fce:	4b96      	ldr	r3, [pc, #600]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fd0:	791b      	ldrb	r3, [r3, #4]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b94      	ldr	r3, [pc, #592]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fd6:	795b      	ldrb	r3, [r3, #5]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	803b      	strh	r3, [r7, #0]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001fe2:	4b91      	ldr	r3, [pc, #580]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 8001fe4:	7a1b      	ldrb	r3, [r3, #8]
 8001fe6:	71fb      	strb	r3, [r7, #7]
//			}
//		}
//	}

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	713b      	strb	r3, [r7, #4]
 8001fec:	e234      	b.n	8002458 <Si468x_dab_get_digital_service_list+0x4f0>
	{
		services_list[service_index + actual_services].freq = actual_freq;
 8001fee:	793b      	ldrb	r3, [r7, #4]
 8001ff0:	4a90      	ldr	r2, [pc, #576]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	441a      	add	r2, r3
 8001ff6:	4b90      	ldr	r3, [pc, #576]	; (8002238 <Si468x_dab_get_digital_service_list+0x2d0>)
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	4890      	ldr	r0, [pc, #576]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4403      	add	r3, r0
 8002006:	3320      	adds	r3, #32
 8002008:	6019      	str	r1, [r3, #0]
		services_list[service_index + actual_services].freq_id = actual_freq_id;
 800200a:	793b      	ldrb	r3, [r7, #4]
 800200c:	4a89      	ldr	r2, [pc, #548]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	441a      	add	r2, r3
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <Si468x_dab_get_digital_service_list+0x2d8>)
 8002014:	7818      	ldrb	r0, [r3, #0]
 8002016:	4989      	ldr	r1, [pc, #548]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	440b      	add	r3, r1
 8002022:	3324      	adds	r3, #36	; 0x24
 8002024:	4602      	mov	r2, r0
 8002026:	701a      	strb	r2, [r3, #0]

		services_list[service_index + actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8002028:	79ba      	ldrb	r2, [r7, #6]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	f103 0210 	add.w	r2, r3, #16
 8002036:	797b      	ldrb	r3, [r7, #5]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	4a7a      	ldr	r2, [pc, #488]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	793a      	ldrb	r2, [r7, #4]
 8002042:	497c      	ldr	r1, [pc, #496]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 8002044:	7809      	ldrb	r1, [r1, #0]
 8002046:	440a      	add	r2, r1
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	b2d8      	uxtb	r0, r3
 800204e:	497b      	ldr	r1, [pc, #492]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	440b      	add	r3, r1
 800205a:	3312      	adds	r3, #18
 800205c:	4602      	mov	r2, r0
 800205e:	701a      	strb	r2, [r3, #0]
		services_list[service_index + actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8002060:	79ba      	ldrb	r2, [r7, #6]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	f103 0211 	add.w	r2, r3, #17
 800206e:	797b      	ldrb	r3, [r7, #5]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	4a6c      	ldr	r2, [pc, #432]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	793a      	ldrb	r2, [r7, #4]
 800207a:	496e      	ldr	r1, [pc, #440]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 800207c:	7809      	ldrb	r1, [r1, #0]
 800207e:	440a      	add	r2, r1
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	b2d8      	uxtb	r0, r3
 8002086:	496d      	ldr	r1, [pc, #436]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	440b      	add	r3, r1
 8002092:	3325      	adds	r3, #37	; 0x25
 8002094:	4602      	mov	r2, r0
 8002096:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + actual_services].pd_flag)
 8002098:	793b      	ldrb	r3, [r7, #4]
 800209a:	4a66      	ldr	r2, [pc, #408]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	441a      	add	r2, r3
 80020a0:	4966      	ldr	r1, [pc, #408]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	440b      	add	r3, r1
 80020ac:	3312      	adds	r3, #18
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d018      	beq.n	80020e6 <Si468x_dab_get_digital_service_list+0x17e>
		{
			services_count++;
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	3301      	adds	r3, #1
 80020b8:	71bb      	strb	r3, [r7, #6]
			components_count += services_list[service_index + actual_services].number_of_components;
 80020ba:	793b      	ldrb	r3, [r7, #4]
 80020bc:	4a5d      	ldr	r2, [pc, #372]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	441a      	add	r2, r3
 80020c2:	495e      	ldr	r1, [pc, #376]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	440b      	add	r3, r1
 80020ce:	3325      	adds	r3, #37	; 0x25
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	797b      	ldrb	r3, [r7, #5]
 80020d4:	4413      	add	r3, r2
 80020d6:	717b      	strb	r3, [r7, #5]
			service_index--;
 80020d8:	793b      	ldrb	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	713b      	strb	r3, [r7, #4]
			number_of_services--;
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	71fb      	strb	r3, [r7, #7]
			continue;
 80020e4:	e1b5      	b.n	8002452 <Si468x_dab_get_digital_service_list+0x4ea>
		}

		services_list[service_index + actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 80020e6:	79ba      	ldrb	r2, [r7, #6]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	f103 0210 	add.w	r2, r3, #16
 80020f4:	797b      	ldrb	r3, [r7, #5]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	4a4b      	ldr	r2, [pc, #300]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	105b      	asrs	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	793a      	ldrb	r2, [r7, #4]
 8002104:	494b      	ldr	r1, [pc, #300]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 8002106:	7809      	ldrb	r1, [r1, #0]
 8002108:	440a      	add	r2, r1
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	494a      	ldr	r1, [pc, #296]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	440b      	add	r3, r1
 800211c:	3313      	adds	r3, #19
 800211e:	4602      	mov	r2, r0
 8002120:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + actual_services].pd_flag)
 8002122:	793b      	ldrb	r3, [r7, #4]
 8002124:	4a43      	ldr	r2, [pc, #268]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 8002126:	7812      	ldrb	r2, [r2, #0]
 8002128:	441a      	add	r2, r3
 800212a:	4944      	ldr	r1, [pc, #272]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	440b      	add	r3, r1
 8002136:	3312      	adds	r3, #18
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <Si468x_dab_get_digital_service_list+0x1de>
 800213e:	2b01      	cmp	r3, #1
 8002140:	f000 8080 	beq.w	8002244 <Si468x_dab_get_digital_service_list+0x2dc>
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
				break;

			default:
				break;
 8002144:	e0f9      	b.n	800233a <Si468x_dab_get_digital_service_list+0x3d2>
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8002146:	79ba      	ldrb	r2, [r7, #6]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	f103 020c 	add.w	r2, r3, #12
 8002154:	797b      	ldrb	r3, [r7, #5]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	4a33      	ldr	r2, [pc, #204]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	4619      	mov	r1, r3
 8002160:	79ba      	ldrb	r2, [r7, #6]
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	f103 020d 	add.w	r2, r3, #13
 800216e:	797b      	ldrb	r3, [r7, #5]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800217e:	4419      	add	r1, r3
 8002180:	793b      	ldrb	r3, [r7, #4]
 8002182:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	441a      	add	r2, r3
 8002188:	4608      	mov	r0, r1
 800218a:	492c      	ldr	r1, [pc, #176]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	440b      	add	r3, r1
 8002196:	3314      	adds	r3, #20
 8002198:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 800219a:	79ba      	ldrb	r2, [r7, #6]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	f103 020d 	add.w	r2, r3, #13
 80021a8:	797b      	ldrb	r3, [r7, #5]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <Si468x_dab_get_digital_service_list+0x2c0>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	793a      	ldrb	r2, [r7, #4]
 80021b4:	491f      	ldr	r1, [pc, #124]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 80021b6:	7809      	ldrb	r1, [r1, #0]
 80021b8:	440a      	add	r2, r1
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	b2d8      	uxtb	r0, r3
 80021be:	491f      	ldr	r1, [pc, #124]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	440b      	add	r3, r1
 80021ca:	3318      	adds	r3, #24
 80021cc:	4602      	mov	r2, r0
 80021ce:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 12) + services_list[service_index + actual_services].srv_ref;
 80021d0:	793b      	ldrb	r3, [r7, #4]
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	441a      	add	r2, r3
 80021d8:	4918      	ldr	r1, [pc, #96]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	440b      	add	r3, r1
 80021e4:	3318      	adds	r3, #24
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	031b      	lsls	r3, r3, #12
 80021ea:	4618      	mov	r0, r3
 80021ec:	793b      	ldrb	r3, [r7, #4]
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	441a      	add	r2, r3
 80021f4:	4911      	ldr	r1, [pc, #68]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	440b      	add	r3, r1
 8002200:	3314      	adds	r3, #20
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	793a      	ldrb	r2, [r7, #4]
 8002206:	490b      	ldr	r1, [pc, #44]	; (8002234 <Si468x_dab_get_digital_service_list+0x2cc>)
 8002208:	7809      	ldrb	r1, [r1, #0]
 800220a:	440a      	add	r2, r1
 800220c:	18c1      	adds	r1, r0, r3
 800220e:	480b      	ldr	r0, [pc, #44]	; (800223c <Si468x_dab_get_digital_service_list+0x2d4>)
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4403      	add	r3, r0
 800221a:	331c      	adds	r3, #28
 800221c:	6019      	str	r1, [r3, #0]
				break;
 800221e:	e08c      	b.n	800233a <Si468x_dab_get_digital_service_list+0x3d2>
 8002220:	200000dc 	.word	0x200000dc
 8002224:	200018fc 	.word	0x200018fc
 8002228:	200010dc 	.word	0x200010dc
 800222c:	08009a94 	.word	0x08009a94
 8002230:	080095e8 	.word	0x080095e8
 8002234:	2000244e 	.word	0x2000244e
 8002238:	20002450 	.word	0x20002450
 800223c:	20001aec 	.word	0x20001aec
 8002240:	20002454 	.word	0x20002454
				services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8002244:	79ba      	ldrb	r2, [r7, #6]
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	f103 020c 	add.w	r2, r3, #12
 8002252:	797b      	ldrb	r3, [r7, #5]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	4a8b      	ldr	r2, [pc, #556]	; (8002488 <Si468x_dab_get_digital_service_list+0x520>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	4619      	mov	r1, r3
 800225e:	79ba      	ldrb	r2, [r7, #6]
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	f103 020d 	add.w	r2, r3, #13
 800226c:	797b      	ldrb	r3, [r7, #5]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	4a85      	ldr	r2, [pc, #532]	; (8002488 <Si468x_dab_get_digital_service_list+0x520>)
 8002274:	5cd3      	ldrb	r3, [r2, r3]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	4419      	add	r1, r3
 800227a:	79ba      	ldrb	r2, [r7, #6]
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	f103 020e 	add.w	r2, r3, #14
 8002288:	797b      	ldrb	r3, [r7, #5]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	4a7e      	ldr	r2, [pc, #504]	; (8002488 <Si468x_dab_get_digital_service_list+0x520>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002298:	4419      	add	r1, r3
 800229a:	793b      	ldrb	r3, [r7, #4]
 800229c:	4a7b      	ldr	r2, [pc, #492]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	441a      	add	r2, r3
 80022a2:	4608      	mov	r0, r1
 80022a4:	497a      	ldr	r1, [pc, #488]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	440b      	add	r3, r1
 80022b0:	3314      	adds	r3, #20
 80022b2:	6018      	str	r0, [r3, #0]
				services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80022b4:	79ba      	ldrb	r2, [r7, #6]
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	f103 020e 	add.w	r2, r3, #14
 80022c2:	797b      	ldrb	r3, [r7, #5]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	4a6f      	ldr	r2, [pc, #444]	; (8002488 <Si468x_dab_get_digital_service_list+0x520>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	793a      	ldrb	r2, [r7, #4]
 80022ce:	496f      	ldr	r1, [pc, #444]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 80022d0:	7809      	ldrb	r1, [r1, #0]
 80022d2:	440a      	add	r2, r1
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	b2d8      	uxtb	r0, r3
 80022d8:	496d      	ldr	r1, [pc, #436]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	440b      	add	r3, r1
 80022e4:	3318      	adds	r3, #24
 80022e6:	4602      	mov	r2, r0
 80022e8:	701a      	strb	r2, [r3, #0]
				services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
 80022ea:	793b      	ldrb	r3, [r7, #4]
 80022ec:	4a67      	ldr	r2, [pc, #412]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 80022ee:	7812      	ldrb	r2, [r2, #0]
 80022f0:	441a      	add	r2, r3
 80022f2:	4967      	ldr	r1, [pc, #412]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	440b      	add	r3, r1
 80022fe:	3318      	adds	r3, #24
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	051b      	lsls	r3, r3, #20
 8002304:	4618      	mov	r0, r3
 8002306:	793b      	ldrb	r3, [r7, #4]
 8002308:	4a60      	ldr	r2, [pc, #384]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	441a      	add	r2, r3
 800230e:	4960      	ldr	r1, [pc, #384]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	440b      	add	r3, r1
 800231a:	3314      	adds	r3, #20
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	793a      	ldrb	r2, [r7, #4]
 8002320:	495a      	ldr	r1, [pc, #360]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 8002322:	7809      	ldrb	r1, [r1, #0]
 8002324:	440a      	add	r2, r1
 8002326:	18c1      	adds	r1, r0, r3
 8002328:	4859      	ldr	r0, [pc, #356]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	4403      	add	r3, r0
 8002334:	331c      	adds	r3, #28
 8002336:	6019      	str	r1, [r3, #0]
				break;
 8002338:	bf00      	nop
		}

		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800233a:	2300      	movs	r3, #0
 800233c:	70fb      	strb	r3, [r7, #3]
 800233e:	e03b      	b.n	80023b8 <Si468x_dab_get_digital_service_list+0x450>
		{
			services_list[service_index + actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f103 0114 	add.w	r1, r3, #20
 8002346:	79ba      	ldrb	r2, [r7, #6]
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	18ca      	adds	r2, r1, r3
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	793a      	ldrb	r2, [r7, #4]
 800235a:	494c      	ldr	r1, [pc, #304]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 800235c:	7809      	ldrb	r1, [r1, #0]
 800235e:	440a      	add	r2, r1
 8002360:	78f9      	ldrb	r1, [r7, #3]
 8002362:	4849      	ldr	r0, [pc, #292]	; (8002488 <Si468x_dab_get_digital_service_list+0x520>)
 8002364:	5cc4      	ldrb	r4, [r0, r3]
 8002366:	484a      	ldr	r0, [pc, #296]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	4403      	add	r3, r0
 8002372:	440b      	add	r3, r1
 8002374:	4622      	mov	r2, r4
 8002376:	701a      	strb	r2, [r3, #0]
			if(services_list[service_index + actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 8002378:	793b      	ldrb	r3, [r7, #4]
 800237a:	4a44      	ldr	r2, [pc, #272]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	441a      	add	r2, r3
 8002380:	78f9      	ldrb	r1, [r7, #3]
 8002382:	4843      	ldr	r0, [pc, #268]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4403      	add	r3, r0
 800238e:	440b      	add	r3, r1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b86      	cmp	r3, #134	; 0x86
 8002394:	d10d      	bne.n	80023b2 <Si468x_dab_get_digital_service_list+0x44a>
			{
				services_list[service_index + actual_services].name[name_index] = 0x6F;
 8002396:	793b      	ldrb	r3, [r7, #4]
 8002398:	4a3c      	ldr	r2, [pc, #240]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	441a      	add	r2, r3
 800239e:	78f9      	ldrb	r1, [r7, #3]
 80023a0:	483b      	ldr	r0, [pc, #236]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4403      	add	r3, r0
 80023ac:	440b      	add	r3, r1
 80023ae:	226f      	movs	r2, #111	; 0x6f
 80023b0:	701a      	strb	r2, [r3, #0]
		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	3301      	adds	r3, #1
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	d9c0      	bls.n	8002340 <Si468x_dab_get_digital_service_list+0x3d8>
			}
		}

		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 80023be:	2300      	movs	r3, #0
 80023c0:	70bb      	strb	r3, [r7, #2]
 80023c2:	e034      	b.n	800242e <Si468x_dab_get_digital_service_list+0x4c6>
		{
			services_list[service_index + actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 80023c4:	793b      	ldrb	r3, [r7, #4]
 80023c6:	4a31      	ldr	r2, [pc, #196]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	441a      	add	r2, r3
 80023cc:	78b9      	ldrb	r1, [r7, #2]
 80023ce:	4830      	ldr	r0, [pc, #192]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	3310      	adds	r3, #16
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4403      	add	r3, r0
 80023e0:	2200      	movs	r2, #0
 80023e2:	71da      	strb	r2, [r3, #7]
			services_list[service_index + actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80023e4:	79ba      	ldrb	r2, [r7, #6]
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80023f2:	797b      	ldrb	r3, [r7, #5]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	4a23      	ldr	r2, [pc, #140]	; (8002488 <Si468x_dab_get_digital_service_list+0x520>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	793a      	ldrb	r2, [r7, #4]
 80023fe:	4923      	ldr	r1, [pc, #140]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 8002400:	7809      	ldrb	r1, [r1, #0]
 8002402:	440a      	add	r2, r1
 8002404:	78b9      	ldrb	r1, [r7, #2]
 8002406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240a:	b2dc      	uxtb	r4, r3
 800240c:	4820      	ldr	r0, [pc, #128]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3310      	adds	r3, #16
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4403      	add	r3, r0
 800241e:	4622      	mov	r2, r4
 8002420:	719a      	strb	r2, [r3, #6]
			components_count++;
 8002422:	797b      	ldrb	r3, [r7, #5]
 8002424:	3301      	adds	r3, #1
 8002426:	717b      	strb	r3, [r7, #5]
		for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 8002428:	78bb      	ldrb	r3, [r7, #2]
 800242a:	3301      	adds	r3, #1
 800242c:	70bb      	strb	r3, [r7, #2]
 800242e:	793b      	ldrb	r3, [r7, #4]
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	441a      	add	r2, r3
 8002436:	4916      	ldr	r1, [pc, #88]	; (8002490 <Si468x_dab_get_digital_service_list+0x528>)
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	440b      	add	r3, r1
 8002442:	3325      	adds	r3, #37	; 0x25
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	78ba      	ldrb	r2, [r7, #2]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3bb      	bcc.n	80023c4 <Si468x_dab_get_digital_service_list+0x45c>
		}
		services_count++;
 800244c:	79bb      	ldrb	r3, [r7, #6]
 800244e:	3301      	adds	r3, #1
 8002450:	71bb      	strb	r3, [r7, #6]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8002452:	793b      	ldrb	r3, [r7, #4]
 8002454:	3301      	adds	r3, #1
 8002456:	713b      	strb	r3, [r7, #4]
 8002458:	793a      	ldrb	r2, [r7, #4]
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	429a      	cmp	r2, r3
 800245e:	f4ff adc6 	bcc.w	8001fee <Si468x_dab_get_digital_service_list+0x86>
	}



	total_services += number_of_services;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <Si468x_dab_get_digital_service_list+0x52c>)
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	4413      	add	r3, r2
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <Si468x_dab_get_digital_service_list+0x52c>)
 800246e:	701a      	strb	r2, [r3, #0]
	actual_services += number_of_services;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4413      	add	r3, r2
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <Si468x_dab_get_digital_service_list+0x524>)
 800247c:	701a      	strb	r2, [r3, #0]
//			send_debug_msg(itoa(services_list[i].components[j].tm_id, itoa_buffer, 10), CRLF_SEND);
//			send_debug_msg("Subchannel ID : 0x", CRLF_NO_SEND);
//			send_debug_msg(itoa(services_list[i].components[j].subchannel_id, itoa_buffer, 16), CRLF_SEND);
//		}
//	}
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	bf00      	nop
 8002488:	200010dc 	.word	0x200010dc
 800248c:	2000244e 	.word	0x2000244e
 8002490:	20001aec 	.word	0x20001aec
 8002494:	2000244c 	.word	0x2000244c

08002498 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 80024a2:	2101      	movs	r1, #1
 80024a4:	482d      	ldr	r0, [pc, #180]	; (800255c <Si468x_dab_start_digital_service+0xc4>)
 80024a6:	f000 fb85 	bl	8002bb4 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024ac:	2281      	movs	r2, #129	; 0x81
 80024ae:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 80024bc:	4b28      	ldr	r3, [pc, #160]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024be:	2200      	movs	r2, #0
 80024c0:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024c8:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024d2:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024dc:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0e1b      	lsrs	r3, r3, #24
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024e6:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0] Component ID prawdopodobnie nie ma znaczenia
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024ee:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 80024f8:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 8002502:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	0e1b      	lsrs	r3, r3, #24
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 800250c:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800250e:	4914      	ldr	r1, [pc, #80]	; (8002560 <Si468x_dab_start_digital_service+0xc8>)
 8002510:	200c      	movs	r0, #12
 8002512:	f7ff f907 	bl	8001724 <Si468x_write_command>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <Si468x_dab_start_digital_service+0xcc>)
 800251c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800251e:	2001      	movs	r0, #1
 8002520:	f001 fd3a 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002524:	4910      	ldr	r1, [pc, #64]	; (8002568 <Si468x_dab_start_digital_service+0xd0>)
 8002526:	2005      	movs	r0, #5
 8002528:	f7ff f91e 	bl	8001768 <Si468x_read_reply>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <Si468x_dab_start_digital_service+0xcc>)
 8002532:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <Si468x_dab_start_digital_service+0xd0>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <Si468x_dab_start_digital_service+0xb2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002540:	2101      	movs	r1, #1
 8002542:	480a      	ldr	r0, [pc, #40]	; (800256c <Si468x_dab_start_digital_service+0xd4>)
 8002544:	f000 fb36 	bl	8002bb4 <send_debug_msg>
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}

}
 8002548:	e003      	b.n	8002552 <Si468x_dab_start_digital_service+0xba>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 800254a:	2101      	movs	r1, #1
 800254c:	4808      	ldr	r0, [pc, #32]	; (8002570 <Si468x_dab_start_digital_service+0xd8>)
 800254e:	f000 fb31 	bl	8002bb4 <send_debug_msg>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	08009ad0 	.word	0x08009ad0
 8002560:	200000dc 	.word	0x200000dc
 8002564:	200018fc 	.word	0x200018fc
 8002568:	200010dc 	.word	0x200010dc
 800256c:	080095e8 	.word	0x080095e8
 8002570:	08009b0c 	.word	0x08009b0c

08002574 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800257e:	2101      	movs	r1, #1
 8002580:	4850      	ldr	r0, [pc, #320]	; (80026c4 <Si468x_dab_get_ensemble_info+0x150>)
 8002582:	f000 fb17 	bl	8002bb4 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <Si468x_dab_get_ensemble_info+0x154>)
 8002588:	22b4      	movs	r2, #180	; 0xb4
 800258a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 800258c:	4b4e      	ldr	r3, [pc, #312]	; (80026c8 <Si468x_dab_get_ensemble_info+0x154>)
 800258e:	2200      	movs	r2, #0
 8002590:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002592:	494d      	ldr	r1, [pc, #308]	; (80026c8 <Si468x_dab_get_ensemble_info+0x154>)
 8002594:	2002      	movs	r0, #2
 8002596:	f7ff f8c5 	bl	8001724 <Si468x_write_command>
 800259a:	4603      	mov	r3, r0
 800259c:	461a      	mov	r2, r3
 800259e:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <Si468x_dab_get_ensemble_info+0x158>)
 80025a0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80025a2:	2002      	movs	r0, #2
 80025a4:	f001 fcf8 	bl	8003f98 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80025a8:	4949      	ldr	r1, [pc, #292]	; (80026d0 <Si468x_dab_get_ensemble_info+0x15c>)
 80025aa:	2015      	movs	r0, #21
 80025ac:	f7ff f8dc 	bl	8001768 <Si468x_read_reply>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b45      	ldr	r3, [pc, #276]	; (80026cc <Si468x_dab_get_ensemble_info+0x158>)
 80025b6:	701a      	strb	r2, [r3, #0]

	while(!dab_spi_rx_buffer[6])
 80025b8:	e012      	b.n	80025e0 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80025ba:	4943      	ldr	r1, [pc, #268]	; (80026c8 <Si468x_dab_get_ensemble_info+0x154>)
 80025bc:	2002      	movs	r0, #2
 80025be:	f7ff f8b1 	bl	8001724 <Si468x_write_command>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <Si468x_dab_get_ensemble_info+0x158>)
 80025c8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 80025ca:	2002      	movs	r0, #2
 80025cc:	f001 fce4 	bl	8003f98 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 80025d0:	493f      	ldr	r1, [pc, #252]	; (80026d0 <Si468x_dab_get_ensemble_info+0x15c>)
 80025d2:	2015      	movs	r0, #21
 80025d4:	f7ff f8c8 	bl	8001768 <Si468x_read_reply>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <Si468x_dab_get_ensemble_info+0x158>)
 80025de:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 80025e0:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <Si468x_dab_get_ensemble_info+0x15c>)
 80025e2:	799b      	ldrb	r3, [r3, #6]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0e8      	beq.n	80025ba <Si468x_dab_get_ensemble_info+0x46>
	}

	if(dab_spi_rx_buffer[0] & 0x40)
 80025e8:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <Si468x_dab_get_ensemble_info+0x15c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <Si468x_dab_get_ensemble_info+0x8c>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80025f4:	2101      	movs	r1, #1
 80025f6:	4837      	ldr	r0, [pc, #220]	; (80026d4 <Si468x_dab_get_ensemble_info+0x160>)
 80025f8:	f000 fadc 	bl	8002bb4 <send_debug_msg>
		return 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e05d      	b.n	80026bc <Si468x_dab_get_ensemble_info+0x148>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <Si468x_dab_get_ensemble_info+0x15c>)
 8002602:	795b      	ldrb	r3, [r3, #5]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	4a32      	ldr	r2, [pc, #200]	; (80026d0 <Si468x_dab_get_ensemble_info+0x15c>)
 8002608:	7912      	ldrb	r2, [r2, #4]
 800260a:	4413      	add	r3, r2
 800260c:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d04e      	beq.n	80026b2 <Si468x_dab_get_ensemble_info+0x13e>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 8002614:	2101      	movs	r1, #1
 8002616:	4830      	ldr	r0, [pc, #192]	; (80026d8 <Si468x_dab_get_ensemble_info+0x164>)
 8002618:	f000 facc 	bl	8002bb4 <send_debug_msg>
			ensembles_list[total_ensembles].id = ensemble_id_temp;
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <Si468x_dab_get_ensemble_info+0x168>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b298      	uxth	r0, r3
 8002626:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <Si468x_dab_get_ensemble_info+0x16c>)
 8002628:	460b      	mov	r3, r1
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	1a5b      	subs	r3, r3, r1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	4602      	mov	r2, r0
 8002634:	801a      	strh	r2, [r3, #0]
			ensembles_list[total_ensembles].freq = actual_freq;
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <Si468x_dab_get_ensemble_info+0x168>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <Si468x_dab_get_ensemble_info+0x170>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4927      	ldr	r1, [pc, #156]	; (80026e0 <Si468x_dab_get_ensemble_info+0x16c>)
 8002642:	4603      	mov	r3, r0
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	1a1b      	subs	r3, r3, r0
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3314      	adds	r3, #20
 800264e:	601a      	str	r2, [r3, #0]
			ensembles_list[total_ensembles].freq_id  =actual_freq_id;
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <Si468x_dab_get_ensemble_info+0x168>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <Si468x_dab_get_ensemble_info+0x174>)
 8002658:	7818      	ldrb	r0, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <Si468x_dab_get_ensemble_info+0x16c>)
 800265c:	460b      	mov	r3, r1
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a5b      	subs	r3, r3, r1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3318      	adds	r3, #24
 8002668:	4602      	mov	r2, r0
 800266a:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	71fb      	strb	r3, [r7, #7]
 8002670:	e014      	b.n	800269c <Si468x_dab_get_ensemble_info+0x128>
			{
				ensembles_list[total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	3306      	adds	r3, #6
 8002676:	4a19      	ldr	r2, [pc, #100]	; (80026dc <Si468x_dab_get_ensemble_info+0x168>)
 8002678:	7812      	ldrb	r2, [r2, #0]
 800267a:	4610      	mov	r0, r2
 800267c:	79fa      	ldrb	r2, [r7, #7]
 800267e:	4914      	ldr	r1, [pc, #80]	; (80026d0 <Si468x_dab_get_ensemble_info+0x15c>)
 8002680:	5ccc      	ldrb	r4, [r1, r3]
 8002682:	4917      	ldr	r1, [pc, #92]	; (80026e0 <Si468x_dab_get_ensemble_info+0x16c>)
 8002684:	4603      	mov	r3, r0
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	1a1b      	subs	r3, r3, r0
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	4413      	add	r3, r2
 8002690:	3302      	adds	r3, #2
 8002692:	4622      	mov	r2, r4
 8002694:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	3301      	adds	r3, #1
 800269a:	71fb      	strb	r3, [r7, #7]
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	d9e7      	bls.n	8002672 <Si468x_dab_get_ensemble_info+0xfe>
//			send_debug_msg(itoa(ensembles_list[total_ensembles].freq, itoa_buffer, 10), CRLF_NO_SEND);
//			send_debug_msg(" kHz", CRLF_SEND);
//			send_debug_msg("Channel: ", CRLF_NO_SEND);
//			send_debug_msg(dab_channels_names[ensembles_list[total_ensembles].freq_id], CRLF_SEND);

			total_ensembles++;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <Si468x_dab_get_ensemble_info+0x168>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <Si468x_dab_get_ensemble_info+0x168>)
 80026ac:	701a      	strb	r2, [r3, #0]
			return 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e004      	b.n	80026bc <Si468x_dab_get_ensemble_info+0x148>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 80026b2:	2101      	movs	r1, #1
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <Si468x_dab_get_ensemble_info+0x178>)
 80026b6:	f000 fa7d 	bl	8002bb4 <send_debug_msg>
			return 0;
 80026ba:	2300      	movs	r3, #0
		}
	}
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	08009b2c 	.word	0x08009b2c
 80026c8:	200000dc 	.word	0x200000dc
 80026cc:	200018fc 	.word	0x200018fc
 80026d0:	200010dc 	.word	0x200010dc
 80026d4:	080095e8 	.word	0x080095e8
 80026d8:	08009b68 	.word	0x08009b68
 80026dc:	2000244d 	.word	0x2000244d
 80026e0:	200019d4 	.word	0x200019d4
 80026e4:	20002450 	.word	0x20002450
 80026e8:	20002454 	.word	0x20002454
 80026ec:	08009b78 	.word	0x08009b78

080026f0 <Si468x_dab_full_scan>:

void Si468x_dab_full_scan()
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 80026f6:	2101      	movs	r1, #1
 80026f8:	48ab      	ldr	r0, [pc, #684]	; (80029a8 <Si468x_dab_full_scan+0x2b8>)
 80026fa:	f000 fa5b 	bl	8002bb4 <send_debug_msg>
	total_services = 0;
 80026fe:	4bab      	ldr	r3, [pc, #684]	; (80029ac <Si468x_dab_full_scan+0x2bc>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
	total_ensembles = 0;
 8002704:	4baa      	ldr	r3, [pc, #680]	; (80029b0 <Si468x_dab_full_scan+0x2c0>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
	actual_services = 0;
 800270a:	4baa      	ldr	r3, [pc, #680]	; (80029b4 <Si468x_dab_full_scan+0x2c4>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]

	uint8_t tune_timeout = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	71fb      	strb	r3, [r7, #7]

	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002714:	2300      	movs	r3, #0
 8002716:	71bb      	strb	r3, [r7, #6]
 8002718:	e038      	b.n	800278c <Si468x_dab_full_scan+0x9c>
	{
		sig_metrics.valid = 0;
 800271a:	4ba7      	ldr	r3, [pc, #668]	; (80029b8 <Si468x_dab_full_scan+0x2c8>)
 800271c:	2200      	movs	r2, #0
 800271e:	711a      	strb	r2, [r3, #4]
		sig_metrics.acq = 0;
 8002720:	4ba5      	ldr	r3, [pc, #660]	; (80029b8 <Si468x_dab_full_scan+0x2c8>)
 8002722:	2200      	movs	r2, #0
 8002724:	715a      	strb	r2, [r3, #5]
		sig_metrics.fic_q = 0;
 8002726:	4ba4      	ldr	r3, [pc, #656]	; (80029b8 <Si468x_dab_full_scan+0x2c8>)
 8002728:	2200      	movs	r2, #0
 800272a:	71da      	strb	r2, [r3, #7]
		tune_timeout = 20;
 800272c:	2314      	movs	r3, #20
 800272e:	71fb      	strb	r3, [r7, #7]

		Si468x_dab_tune_freq(freq_index);
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fae2 	bl	8001cfc <Si468x_dab_tune_freq>
		while(!sig_metrics.valid || !sig_metrics.acq || sig_metrics.fic_q < 100)
 8002738:	e00f      	b.n	800275a <Si468x_dab_full_scan+0x6a>
		{
			Si468x_dab_digrad_status();
 800273a:	f7ff fb8d 	bl	8001e58 <Si468x_dab_digrad_status>
			HAL_Delay(30);
 800273e:	201e      	movs	r0, #30
 8002740:	f001 fc2a 	bl	8003f98 <HAL_Delay>
			tune_timeout--;
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	3b01      	subs	r3, #1
 8002748:	71fb      	strb	r3, [r7, #7]
			if(!tune_timeout)
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <Si468x_dab_full_scan+0x6a>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002750:	2101      	movs	r1, #1
 8002752:	489a      	ldr	r0, [pc, #616]	; (80029bc <Si468x_dab_full_scan+0x2cc>)
 8002754:	f000 fa2e 	bl	8002bb4 <send_debug_msg>
				break;
 8002758:	e00b      	b.n	8002772 <Si468x_dab_full_scan+0x82>
		while(!sig_metrics.valid || !sig_metrics.acq || sig_metrics.fic_q < 100)
 800275a:	4b97      	ldr	r3, [pc, #604]	; (80029b8 <Si468x_dab_full_scan+0x2c8>)
 800275c:	791b      	ldrb	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0eb      	beq.n	800273a <Si468x_dab_full_scan+0x4a>
 8002762:	4b95      	ldr	r3, [pc, #596]	; (80029b8 <Si468x_dab_full_scan+0x2c8>)
 8002764:	795b      	ldrb	r3, [r3, #5]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0e7      	beq.n	800273a <Si468x_dab_full_scan+0x4a>
 800276a:	4b93      	ldr	r3, [pc, #588]	; (80029b8 <Si468x_dab_full_scan+0x2c8>)
 800276c:	79db      	ldrb	r3, [r3, #7]
 800276e:	2b63      	cmp	r3, #99	; 0x63
 8002770:	d9e3      	bls.n	800273a <Si468x_dab_full_scan+0x4a>
			}
		}

		if(tune_timeout)
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <Si468x_dab_full_scan+0x96>
		{
			if(Si468x_dab_get_ensemble_info())
 8002778:	f7ff fefc 	bl	8002574 <Si468x_dab_get_ensemble_info>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <Si468x_dab_full_scan+0x96>
			{
				Si468x_dab_get_digital_service_list();
 8002782:	f7ff fbf1 	bl	8001f68 <Si468x_dab_get_digital_service_list>
	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	3301      	adds	r3, #1
 800278a:	71bb      	strb	r3, [r7, #6]
 800278c:	4b8c      	ldr	r3, [pc, #560]	; (80029c0 <Si468x_dab_full_scan+0x2d0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	79ba      	ldrb	r2, [r7, #6]
 8002792:	429a      	cmp	r2, r3
 8002794:	d3c1      	bcc.n	800271a <Si468x_dab_full_scan+0x2a>
	}



	//display info about  ensembles
	send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002796:	2100      	movs	r1, #0
 8002798:	488a      	ldr	r0, [pc, #552]	; (80029c4 <Si468x_dab_full_scan+0x2d4>)
 800279a:	f000 fa0b 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 800279e:	4b84      	ldr	r3, [pc, #528]	; (80029b0 <Si468x_dab_full_scan+0x2c0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	220a      	movs	r2, #10
 80027a4:	4988      	ldr	r1, [pc, #544]	; (80029c8 <Si468x_dab_full_scan+0x2d8>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f006 fd5a 	bl	8009260 <itoa>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f9ff 	bl	8002bb4 <send_debug_msg>

	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80027b6:	2101      	movs	r1, #1
 80027b8:	4884      	ldr	r0, [pc, #528]	; (80029cc <Si468x_dab_full_scan+0x2dc>)
 80027ba:	f000 f9fb 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("| Number", CRLF_NO_SEND);
 80027be:	2100      	movs	r1, #0
 80027c0:	4883      	ldr	r0, [pc, #524]	; (80029d0 <Si468x_dab_full_scan+0x2e0>)
 80027c2:	f000 f9f7 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80027c6:	2100      	movs	r1, #0
 80027c8:	4882      	ldr	r0, [pc, #520]	; (80029d4 <Si468x_dab_full_scan+0x2e4>)
 80027ca:	f000 f9f3 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80027ce:	2100      	movs	r1, #0
 80027d0:	4881      	ldr	r0, [pc, #516]	; (80029d8 <Si468x_dab_full_scan+0x2e8>)
 80027d2:	f000 f9ef 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(" | Channel |", CRLF_SEND);
 80027d6:	2101      	movs	r1, #1
 80027d8:	4880      	ldr	r0, [pc, #512]	; (80029dc <Si468x_dab_full_scan+0x2ec>)
 80027da:	f000 f9eb 	bl	8002bb4 <send_debug_msg>

	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 80027de:	2300      	movs	r3, #0
 80027e0:	717b      	strb	r3, [r7, #5]
 80027e2:	e060      	b.n	80028a6 <Si468x_dab_full_scan+0x1b6>
	{
		send_debug_msg("| ", CRLF_NO_SEND);
 80027e4:	2100      	movs	r1, #0
 80027e6:	487e      	ldr	r0, [pc, #504]	; (80029e0 <Si468x_dab_full_scan+0x2f0>)
 80027e8:	f000 f9e4 	bl	8002bb4 <send_debug_msg>
		send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 80027ec:	797b      	ldrb	r3, [r7, #5]
 80027ee:	220a      	movs	r2, #10
 80027f0:	4975      	ldr	r1, [pc, #468]	; (80029c8 <Si468x_dab_full_scan+0x2d8>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f006 fd34 	bl	8009260 <itoa>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f9d9 	bl	8002bb4 <send_debug_msg>
		send_debug_msg("      | ", CRLF_NO_SEND);
 8002802:	2100      	movs	r1, #0
 8002804:	4877      	ldr	r0, [pc, #476]	; (80029e4 <Si468x_dab_full_scan+0x2f4>)
 8002806:	f000 f9d5 	bl	8002bb4 <send_debug_msg>

		send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 800280a:	797a      	ldrb	r2, [r7, #5]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4a74      	ldr	r2, [pc, #464]	; (80029e8 <Si468x_dab_full_scan+0x2f8>)
 8002816:	4413      	add	r3, r2
 8002818:	3302      	adds	r3, #2
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f9c9 	bl	8002bb4 <send_debug_msg>
		send_debug_msg("| ", CRLF_NO_SEND);
 8002822:	2100      	movs	r1, #0
 8002824:	486e      	ldr	r0, [pc, #440]	; (80029e0 <Si468x_dab_full_scan+0x2f0>)
 8002826:	f000 f9c5 	bl	8002bb4 <send_debug_msg>

		send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800282a:	797a      	ldrb	r2, [r7, #5]
 800282c:	496e      	ldr	r1, [pc, #440]	; (80029e8 <Si468x_dab_full_scan+0x2f8>)
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3314      	adds	r3, #20
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	220a      	movs	r2, #10
 800283e:	4962      	ldr	r1, [pc, #392]	; (80029c8 <Si468x_dab_full_scan+0x2d8>)
 8002840:	4618      	mov	r0, r3
 8002842:	f006 fd0d 	bl	8009260 <itoa>
 8002846:	4603      	mov	r3, r0
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f9b2 	bl	8002bb4 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002850:	2100      	movs	r1, #0
 8002852:	4866      	ldr	r0, [pc, #408]	; (80029ec <Si468x_dab_full_scan+0x2fc>)
 8002854:	f000 f9ae 	bl	8002bb4 <send_debug_msg>

		send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002858:	797a      	ldrb	r2, [r7, #5]
 800285a:	4963      	ldr	r1, [pc, #396]	; (80029e8 <Si468x_dab_full_scan+0x2f8>)
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3318      	adds	r3, #24
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <Si468x_dab_full_scan+0x300>)
 800286e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f99d 	bl	8002bb4 <send_debug_msg>
		if(ensembles_list[ensembles_index].freq_id < 20)
 800287a:	797a      	ldrb	r2, [r7, #5]
 800287c:	495a      	ldr	r1, [pc, #360]	; (80029e8 <Si468x_dab_full_scan+0x2f8>)
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3318      	adds	r3, #24
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b13      	cmp	r3, #19
 800288e:	d803      	bhi.n	8002898 <Si468x_dab_full_scan+0x1a8>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002890:	2100      	movs	r1, #0
 8002892:	4858      	ldr	r0, [pc, #352]	; (80029f4 <Si468x_dab_full_scan+0x304>)
 8002894:	f000 f98e 	bl	8002bb4 <send_debug_msg>
		}
		send_debug_msg("  |", CRLF_SEND);
 8002898:	2101      	movs	r1, #1
 800289a:	4857      	ldr	r0, [pc, #348]	; (80029f8 <Si468x_dab_full_scan+0x308>)
 800289c:	f000 f98a 	bl	8002bb4 <send_debug_msg>
	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 80028a0:	797b      	ldrb	r3, [r7, #5]
 80028a2:	3301      	adds	r3, #1
 80028a4:	717b      	strb	r3, [r7, #5]
 80028a6:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <Si468x_dab_full_scan+0x2c0>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	797a      	ldrb	r2, [r7, #5]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d399      	bcc.n	80027e4 <Si468x_dab_full_scan+0xf4>
	}
	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80028b0:	2101      	movs	r1, #1
 80028b2:	4846      	ldr	r0, [pc, #280]	; (80029cc <Si468x_dab_full_scan+0x2dc>)
 80028b4:	f000 f97e 	bl	8002bb4 <send_debug_msg>

	//display info about services
	send_debug_msg("Services found: ", CRLF_NO_SEND);
 80028b8:	2100      	movs	r1, #0
 80028ba:	4850      	ldr	r0, [pc, #320]	; (80029fc <Si468x_dab_full_scan+0x30c>)
 80028bc:	f000 f97a 	bl	8002bb4 <send_debug_msg>
	send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <Si468x_dab_full_scan+0x2bc>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	220a      	movs	r2, #10
 80028c6:	4940      	ldr	r1, [pc, #256]	; (80029c8 <Si468x_dab_full_scan+0x2d8>)
 80028c8:	4618      	mov	r0, r3
 80028ca:	f006 fcc9 	bl	8009260 <itoa>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f96e 	bl	8002bb4 <send_debug_msg>


	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80028d8:	2101      	movs	r1, #1
 80028da:	4849      	ldr	r0, [pc, #292]	; (8002a00 <Si468x_dab_full_scan+0x310>)
 80028dc:	f000 f96a 	bl	8002bb4 <send_debug_msg>
	send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80028e0:	2101      	movs	r1, #1
 80028e2:	4848      	ldr	r0, [pc, #288]	; (8002a04 <Si468x_dab_full_scan+0x314>)
 80028e4:	f000 f966 	bl	8002bb4 <send_debug_msg>

	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	713b      	strb	r3, [r7, #4]
 80028ec:	e13a      	b.n	8002b64 <Si468x_dab_full_scan+0x474>
	{
		//Number
		send_debug_msg("| ", CRLF_NO_SEND);
 80028ee:	2100      	movs	r1, #0
 80028f0:	483b      	ldr	r0, [pc, #236]	; (80029e0 <Si468x_dab_full_scan+0x2f0>)
 80028f2:	f000 f95f 	bl	8002bb4 <send_debug_msg>
		send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 80028f6:	793b      	ldrb	r3, [r7, #4]
 80028f8:	220a      	movs	r2, #10
 80028fa:	4933      	ldr	r1, [pc, #204]	; (80029c8 <Si468x_dab_full_scan+0x2d8>)
 80028fc:	4618      	mov	r0, r3
 80028fe:	f006 fcaf 	bl	8009260 <itoa>
 8002902:	4603      	mov	r3, r0
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f954 	bl	8002bb4 <send_debug_msg>
		if(services_index < 10)
 800290c:	793b      	ldrb	r3, [r7, #4]
 800290e:	2b09      	cmp	r3, #9
 8002910:	d803      	bhi.n	800291a <Si468x_dab_full_scan+0x22a>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002912:	2100      	movs	r1, #0
 8002914:	4837      	ldr	r0, [pc, #220]	; (80029f4 <Si468x_dab_full_scan+0x304>)
 8002916:	f000 f94d 	bl	8002bb4 <send_debug_msg>
		}
		send_debug_msg("     | ", CRLF_NO_SEND);
 800291a:	2100      	movs	r1, #0
 800291c:	483a      	ldr	r0, [pc, #232]	; (8002a08 <Si468x_dab_full_scan+0x318>)
 800291e:	f000 f949 	bl	8002bb4 <send_debug_msg>

		//Name
		if(services_list[services_index].name[0])
 8002922:	793a      	ldrb	r2, [r7, #4]
 8002924:	4939      	ldr	r1, [pc, #228]	; (8002a0c <Si468x_dab_full_scan+0x31c>)
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	440b      	add	r3, r1
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <Si468x_dab_full_scan+0x25e>
		{
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002936:	793a      	ldrb	r2, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	4a32      	ldr	r2, [pc, #200]	; (8002a0c <Si468x_dab_full_scan+0x31c>)
 8002942:	4413      	add	r3, r2
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f934 	bl	8002bb4 <send_debug_msg>
 800294c:	e003      	b.n	8002956 <Si468x_dab_full_scan+0x266>
		}
		else
		{
			send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 800294e:	2100      	movs	r1, #0
 8002950:	482f      	ldr	r0, [pc, #188]	; (8002a10 <Si468x_dab_full_scan+0x320>)
 8002952:	f000 f92f 	bl	8002bb4 <send_debug_msg>
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 8002956:	2100      	movs	r1, #0
 8002958:	482e      	ldr	r0, [pc, #184]	; (8002a14 <Si468x_dab_full_scan+0x324>)
 800295a:	f000 f92b 	bl	8002bb4 <send_debug_msg>

		//Ensemble Name
		for(uint8_t i = 0; i < total_ensembles; i++)
 800295e:	2300      	movs	r3, #0
 8002960:	70fb      	strb	r3, [r7, #3]
 8002962:	e05c      	b.n	8002a1e <Si468x_dab_full_scan+0x32e>
		{
			if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	4920      	ldr	r1, [pc, #128]	; (80029e8 <Si468x_dab_full_scan+0x2f8>)
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3318      	adds	r3, #24
 8002974:	7819      	ldrb	r1, [r3, #0]
 8002976:	793a      	ldrb	r2, [r7, #4]
 8002978:	4824      	ldr	r0, [pc, #144]	; (8002a0c <Si468x_dab_full_scan+0x31c>)
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4403      	add	r3, r0
 8002984:	3324      	adds	r3, #36	; 0x24
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4299      	cmp	r1, r3
 800298a:	d145      	bne.n	8002a18 <Si468x_dab_full_scan+0x328>
			{
				send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <Si468x_dab_full_scan+0x2f8>)
 8002998:	4413      	add	r3, r2
 800299a:	3302      	adds	r3, #2
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f908 	bl	8002bb4 <send_debug_msg>
				break;
 80029a4:	e040      	b.n	8002a28 <Si468x_dab_full_scan+0x338>
 80029a6:	bf00      	nop
 80029a8:	08009b8c 	.word	0x08009b8c
 80029ac:	2000244c 	.word	0x2000244c
 80029b0:	2000244d 	.word	0x2000244d
 80029b4:	2000244e 	.word	0x2000244e
 80029b8:	200019c4 	.word	0x200019c4
 80029bc:	08009b78 	.word	0x08009b78
 80029c0:	200019c0 	.word	0x200019c0
 80029c4:	08009bc8 	.word	0x08009bc8
 80029c8:	200018dc 	.word	0x200018dc
 80029cc:	08009bdc 	.word	0x08009bdc
 80029d0:	08009c10 	.word	0x08009c10
 80029d4:	08009c1c 	.word	0x08009c1c
 80029d8:	08009c30 	.word	0x08009c30
 80029dc:	08009c40 	.word	0x08009c40
 80029e0:	08009c50 	.word	0x08009c50
 80029e4:	08009c54 	.word	0x08009c54
 80029e8:	200019d4 	.word	0x200019d4
 80029ec:	08009c60 	.word	0x08009c60
 80029f0:	20000008 	.word	0x20000008
 80029f4:	08009c68 	.word	0x08009c68
 80029f8:	08009c6c 	.word	0x08009c6c
 80029fc:	08009c70 	.word	0x08009c70
 8002a00:	08009c84 	.word	0x08009c84
 8002a04:	08009cf0 	.word	0x08009cf0
 8002a08:	08009d5c 	.word	0x08009d5c
 8002a0c:	20001aec 	.word	0x20001aec
 8002a10:	08009d64 	.word	0x08009d64
 8002a14:	08009d78 	.word	0x08009d78
		for(uint8_t i = 0; i < total_ensembles; i++)
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	70fb      	strb	r3, [r7, #3]
 8002a1e:	4b58      	ldr	r3, [pc, #352]	; (8002b80 <Si468x_dab_full_scan+0x490>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d39d      	bcc.n	8002964 <Si468x_dab_full_scan+0x274>
			}
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4856      	ldr	r0, [pc, #344]	; (8002b84 <Si468x_dab_full_scan+0x494>)
 8002a2c:	f000 f8c2 	bl	8002bb4 <send_debug_msg>

		//Frequency
		send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8002a30:	793a      	ldrb	r2, [r7, #4]
 8002a32:	4955      	ldr	r1, [pc, #340]	; (8002b88 <Si468x_dab_full_scan+0x498>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3320      	adds	r3, #32
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	220a      	movs	r2, #10
 8002a44:	4951      	ldr	r1, [pc, #324]	; (8002b8c <Si468x_dab_full_scan+0x49c>)
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 fc0a 	bl	8009260 <itoa>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f8af 	bl	8002bb4 <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002a56:	2100      	movs	r1, #0
 8002a58:	484d      	ldr	r0, [pc, #308]	; (8002b90 <Si468x_dab_full_scan+0x4a0>)
 8002a5a:	f000 f8ab 	bl	8002bb4 <send_debug_msg>

		//Channel
		send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8002a5e:	793a      	ldrb	r2, [r7, #4]
 8002a60:	4949      	ldr	r1, [pc, #292]	; (8002b88 <Si468x_dab_full_scan+0x498>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3324      	adds	r3, #36	; 0x24
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <Si468x_dab_full_scan+0x4a4>)
 8002a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f89a 	bl	8002bb4 <send_debug_msg>
		if(services_list[services_index].freq_id < 20)
 8002a80:	793a      	ldrb	r2, [r7, #4]
 8002a82:	4941      	ldr	r1, [pc, #260]	; (8002b88 <Si468x_dab_full_scan+0x498>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3324      	adds	r3, #36	; 0x24
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b13      	cmp	r3, #19
 8002a94:	d803      	bhi.n	8002a9e <Si468x_dab_full_scan+0x3ae>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002a96:	2100      	movs	r1, #0
 8002a98:	483f      	ldr	r0, [pc, #252]	; (8002b98 <Si468x_dab_full_scan+0x4a8>)
 8002a9a:	f000 f88b 	bl	8002bb4 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	483e      	ldr	r0, [pc, #248]	; (8002b9c <Si468x_dab_full_scan+0x4ac>)
 8002aa2:	f000 f887 	bl	8002bb4 <send_debug_msg>

		//PTY
		send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002aa6:	793a      	ldrb	r2, [r7, #4]
 8002aa8:	4937      	ldr	r1, [pc, #220]	; (8002b88 <Si468x_dab_full_scan+0x498>)
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3313      	adds	r3, #19
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	220a      	movs	r2, #10
 8002aba:	4934      	ldr	r1, [pc, #208]	; (8002b8c <Si468x_dab_full_scan+0x49c>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f006 fbcf 	bl	8009260 <itoa>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f874 	bl	8002bb4 <send_debug_msg>
		if(services_list[services_index].p_ty < 10)
 8002acc:	793a      	ldrb	r2, [r7, #4]
 8002ace:	492e      	ldr	r1, [pc, #184]	; (8002b88 <Si468x_dab_full_scan+0x498>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	440b      	add	r3, r1
 8002ada:	3313      	adds	r3, #19
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d803      	bhi.n	8002aea <Si468x_dab_full_scan+0x3fa>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	482c      	ldr	r0, [pc, #176]	; (8002b98 <Si468x_dab_full_scan+0x4a8>)
 8002ae6:	f000 f865 	bl	8002bb4 <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002aea:	2100      	movs	r1, #0
 8002aec:	482b      	ldr	r0, [pc, #172]	; (8002b9c <Si468x_dab_full_scan+0x4ac>)
 8002aee:	f000 f861 	bl	8002bb4 <send_debug_msg>

		//Service ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002af2:	2100      	movs	r1, #0
 8002af4:	482a      	ldr	r0, [pc, #168]	; (8002ba0 <Si468x_dab_full_scan+0x4b0>)
 8002af6:	f000 f85d 	bl	8002bb4 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002afa:	793a      	ldrb	r2, [r7, #4]
 8002afc:	4922      	ldr	r1, [pc, #136]	; (8002b88 <Si468x_dab_full_scan+0x498>)
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	440b      	add	r3, r1
 8002b08:	331c      	adds	r3, #28
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	491f      	ldr	r1, [pc, #124]	; (8002b8c <Si468x_dab_full_scan+0x49c>)
 8002b10:	4618      	mov	r0, r3
 8002b12:	f006 fba5 	bl	8009260 <itoa>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f84a 	bl	8002bb4 <send_debug_msg>
		send_debug_msg("     | ", CRLF_NO_SEND);
 8002b20:	2100      	movs	r1, #0
 8002b22:	4820      	ldr	r0, [pc, #128]	; (8002ba4 <Si468x_dab_full_scan+0x4b4>)
 8002b24:	f000 f846 	bl	8002bb4 <send_debug_msg>

		//Component ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	481d      	ldr	r0, [pc, #116]	; (8002ba0 <Si468x_dab_full_scan+0x4b0>)
 8002b2c:	f000 f842 	bl	8002bb4 <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002b30:	793a      	ldrb	r2, [r7, #4]
 8002b32:	4915      	ldr	r1, [pc, #84]	; (8002b88 <Si468x_dab_full_scan+0x498>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3326      	adds	r3, #38	; 0x26
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2210      	movs	r2, #16
 8002b44:	4911      	ldr	r1, [pc, #68]	; (8002b8c <Si468x_dab_full_scan+0x49c>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f006 fb8a 	bl	8009260 <itoa>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f82f 	bl	8002bb4 <send_debug_msg>
		send_debug_msg("          |", CRLF_SEND);
 8002b56:	2101      	movs	r1, #1
 8002b58:	4813      	ldr	r0, [pc, #76]	; (8002ba8 <Si468x_dab_full_scan+0x4b8>)
 8002b5a:	f000 f82b 	bl	8002bb4 <send_debug_msg>
	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002b5e:	793b      	ldrb	r3, [r7, #4]
 8002b60:	3301      	adds	r3, #1
 8002b62:	713b      	strb	r3, [r7, #4]
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <Si468x_dab_full_scan+0x4bc>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	793a      	ldrb	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	f4ff aebf 	bcc.w	80028ee <Si468x_dab_full_scan+0x1fe>

	}
	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002b70:	2101      	movs	r1, #1
 8002b72:	480f      	ldr	r0, [pc, #60]	; (8002bb0 <Si468x_dab_full_scan+0x4c0>)
 8002b74:	f000 f81e 	bl	8002bb4 <send_debug_msg>

}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	2000244d 	.word	0x2000244d
 8002b84:	08009d78 	.word	0x08009d78
 8002b88:	20001aec 	.word	0x20001aec
 8002b8c:	200018dc 	.word	0x200018dc
 8002b90:	08009c60 	.word	0x08009c60
 8002b94:	20000008 	.word	0x20000008
 8002b98:	08009c68 	.word	0x08009c68
 8002b9c:	08009d7c 	.word	0x08009d7c
 8002ba0:	08009d84 	.word	0x08009d84
 8002ba4:	08009d5c 	.word	0x08009d5c
 8002ba8:	08009d88 	.word	0x08009d88
 8002bac:	2000244c 	.word	0x2000244c
 8002bb0:	08009c84 	.word	0x08009c84

08002bb4 <send_debug_msg>:

#include "usart.h"
#include "debug_uart.h"

void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7fd fb01 	bl	80001c8 <strlen>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, msg, msg_size, 100);
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	2364      	movs	r3, #100	; 0x64
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	480a      	ldr	r0, [pc, #40]	; (8002bfc <send_debug_msg+0x48>)
 8002bd4:	f005 ff93 	bl	8008afe <HAL_UART_Transmit>

	if(is_crlf)
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8002bde:	f640 230d 	movw	r3, #2573	; 0xa0d
 8002be2:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8002be4:	f107 010c 	add.w	r1, r7, #12
 8002be8:	2364      	movs	r3, #100	; 0x64
 8002bea:	2202      	movs	r2, #2
 8002bec:	4803      	ldr	r0, [pc, #12]	; (8002bfc <send_debug_msg+0x48>)
 8002bee:	f005 ff86 	bl	8008afe <HAL_UART_Transmit>
	}
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2000274c 	.word	0x2000274c

08002c00 <DisplayMainScreen>:
#include "display_management.h"

char char_buffer[32];

void DisplayMainScreen()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fd fe52 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 8002c0c:	23eb      	movs	r3, #235	; 0xeb
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f240 133b 	movw	r3, #315	; 0x13b
 8002c14:	2219      	movs	r2, #25
 8002c16:	2105      	movs	r1, #5
 8002c18:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c1c:	f7fd fed3 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 8002c20:	2302      	movs	r3, #2
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <DisplayMainScreen+0x210>)
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2e:	2105      	movs	r1, #5
 8002c30:	2041      	movs	r0, #65	; 0x41
 8002c32:	f7fd ff75 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 8002c36:	233c      	movs	r3, #60	; 0x3c
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f240 1331 	movw	r3, #305	; 0x131
 8002c3e:	2223      	movs	r2, #35	; 0x23
 8002c40:	210f      	movs	r1, #15
 8002c42:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c46:	f7fd febe 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 8002c4a:	235f      	movs	r3, #95	; 0x5f
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	f240 1331 	movw	r3, #305	; 0x131
 8002c52:	2246      	movs	r2, #70	; 0x46
 8002c54:	210f      	movs	r1, #15
 8002c56:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c5a:	f7fd feb4 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 8002c5e:	23a0      	movs	r3, #160	; 0xa0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2369      	movs	r3, #105	; 0x69
 8002c64:	226e      	movs	r2, #110	; 0x6e
 8002c66:	210f      	movs	r1, #15
 8002c68:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c6c:	f7fd feab 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 8002c70:	239f      	movs	r3, #159	; 0x9f
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2368      	movs	r3, #104	; 0x68
 8002c76:	226f      	movs	r2, #111	; 0x6f
 8002c78:	2110      	movs	r1, #16
 8002c7a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002c7e:	f7fd fe81 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 8002c82:	2302      	movs	r3, #2
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <DisplayMainScreen+0x214>)
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c92:	217f      	movs	r1, #127	; 0x7f
 8002c94:	2023      	movs	r0, #35	; 0x23
 8002c96:	f7fd ff43 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 8002c9a:	23a0      	movs	r3, #160	; 0xa0
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	23cd      	movs	r3, #205	; 0xcd
 8002ca0:	226e      	movs	r2, #110	; 0x6e
 8002ca2:	2173      	movs	r1, #115	; 0x73
 8002ca4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002ca8:	f7fd fe8d 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 8002cac:	239f      	movs	r3, #159	; 0x9f
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	23cc      	movs	r3, #204	; 0xcc
 8002cb2:	226f      	movs	r2, #111	; 0x6f
 8002cb4:	2174      	movs	r1, #116	; 0x74
 8002cb6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002cba:	f7fd fe63 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <DisplayMainScreen+0x218>)
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cce:	217f      	movs	r1, #127	; 0x7f
 8002cd0:	2090      	movs	r0, #144	; 0x90
 8002cd2:	f7fd ff25 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 8002cd6:	23a0      	movs	r3, #160	; 0xa0
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f240 1331 	movw	r3, #305	; 0x131
 8002cde:	226e      	movs	r2, #110	; 0x6e
 8002ce0:	21d7      	movs	r1, #215	; 0xd7
 8002ce2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002ce6:	f7fd fe6e 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 8002cea:	239f      	movs	r3, #159	; 0x9f
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002cf2:	226f      	movs	r2, #111	; 0x6f
 8002cf4:	21d8      	movs	r1, #216	; 0xd8
 8002cf6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002cfa:	f7fd fe43 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 8002cfe:	2302      	movs	r3, #2
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <DisplayMainScreen+0x21c>)
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0e:	217f      	movs	r1, #127	; 0x7f
 8002d10:	20ea      	movs	r0, #234	; 0xea
 8002d12:	f7fd ff05 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 8002d16:	23dc      	movs	r3, #220	; 0xdc
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2369      	movs	r3, #105	; 0x69
 8002d1c:	22aa      	movs	r2, #170	; 0xaa
 8002d1e:	210f      	movs	r1, #15
 8002d20:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002d24:	f7fd fe4f 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 8002d28:	23db      	movs	r3, #219	; 0xdb
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2368      	movs	r3, #104	; 0x68
 8002d2e:	22ab      	movs	r2, #171	; 0xab
 8002d30:	2110      	movs	r1, #16
 8002d32:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002d36:	f7fd fe25 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <DisplayMainScreen+0x220>)
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d4a:	21bb      	movs	r1, #187	; 0xbb
 8002d4c:	202d      	movs	r0, #45	; 0x2d
 8002d4e:	f7fd fee7 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 8002d52:	23dc      	movs	r3, #220	; 0xdc
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	23cd      	movs	r3, #205	; 0xcd
 8002d58:	22aa      	movs	r2, #170	; 0xaa
 8002d5a:	2173      	movs	r1, #115	; 0x73
 8002d5c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002d60:	f7fd fe31 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 8002d64:	23db      	movs	r3, #219	; 0xdb
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	23cc      	movs	r3, #204	; 0xcc
 8002d6a:	22ab      	movs	r2, #171	; 0xab
 8002d6c:	2174      	movs	r1, #116	; 0x74
 8002d6e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002d72:	f7fd fe07 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 8002d76:	2302      	movs	r3, #2
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <DisplayMainScreen+0x224>)
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d86:	21b4      	movs	r1, #180	; 0xb4
 8002d88:	2081      	movs	r0, #129	; 0x81
 8002d8a:	f7fd fec9 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 8002d8e:	2302      	movs	r3, #2
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <DisplayMainScreen+0x228>)
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d9e:	21c3      	movs	r1, #195	; 0xc3
 8002da0:	2084      	movs	r0, #132	; 0x84
 8002da2:	f7fd febd 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 8002da6:	23dc      	movs	r3, #220	; 0xdc
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f240 1331 	movw	r3, #305	; 0x131
 8002dae:	22aa      	movs	r2, #170	; 0xaa
 8002db0:	21d7      	movs	r1, #215	; 0xd7
 8002db2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002db6:	f7fd fe06 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 8002dba:	23db      	movs	r3, #219	; 0xdb
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002dc2:	22ab      	movs	r2, #171	; 0xab
 8002dc4:	21d8      	movs	r1, #216	; 0xd8
 8002dc6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002dca:	f7fd fddb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 8002dce:	2302      	movs	r3, #2
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <DisplayMainScreen+0x22c>)
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dde:	21b4      	movs	r1, #180	; 0xb4
 8002de0:	20f5      	movs	r0, #245	; 0xf5
 8002de2:	f7fd fe9d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 8002de6:	2302      	movs	r3, #2
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <DisplayMainScreen+0x228>)
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df6:	21c3      	movs	r1, #195	; 0xc3
 8002df8:	20e8      	movs	r0, #232	; 0xe8
 8002dfa:	f7fd fe91 	bl	8000b20 <ILI9341_Draw_String>

	CS_OFF;
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e04:	480a      	ldr	r0, [pc, #40]	; (8002e30 <DisplayMainScreen+0x230>)
 8002e06:	f001 feb3 	bl	8004b70 <HAL_GPIO_WritePin>
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	08009d94 	.word	0x08009d94
 8002e14:	08009da8 	.word	0x08009da8
 8002e18:	08009db0 	.word	0x08009db0
 8002e1c:	08009db8 	.word	0x08009db8
 8002e20:	08009dc0 	.word	0x08009dc0
 8002e24:	08009dc8 	.word	0x08009dc8
 8002e28:	08009dd4 	.word	0x08009dd4
 8002e2c:	08009ddc 	.word	0x08009ddc
 8002e30:	40020c00 	.word	0x40020c00

08002e34 <DisplayDabStatus>:
{
	ILI9341_Draw_String(290, 40, WHITE, BLACK, "E", 2);
}

void DisplayDabStatus(sig_metrics_t sig_metrics_val)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	463c      	mov	r4, r7
 8002e3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Valid:", 2);
 8002e40:	2302      	movs	r3, #2
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	4b58      	ldr	r3, [pc, #352]	; (8002fa8 <DisplayDabStatus+0x174>)
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4e:	2128      	movs	r1, #40	; 0x28
 8002e50:	2014      	movs	r0, #20
 8002e52:	f7fd fe65 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(69, 40, WHITE, BLACK, itoa(sig_metrics_val.valid, char_buffer, 10), 2);
 8002e56:	793b      	ldrb	r3, [r7, #4]
 8002e58:	220a      	movs	r2, #10
 8002e5a:	4954      	ldr	r1, [pc, #336]	; (8002fac <DisplayDabStatus+0x178>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f006 f9ff 	bl	8009260 <itoa>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2202      	movs	r2, #2
 8002e66:	9201      	str	r2, [sp, #4]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e70:	2128      	movs	r1, #40	; 0x28
 8002e72:	2045      	movs	r0, #69	; 0x45
 8002e74:	f7fd fe54 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(82, 40, WHITE, BLACK, "ACQ:", 2);
 8002e78:	2302      	movs	r3, #2
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <DisplayDabStatus+0x17c>)
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2300      	movs	r3, #0
 8002e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e86:	2128      	movs	r1, #40	; 0x28
 8002e88:	2052      	movs	r0, #82	; 0x52
 8002e8a:	f7fd fe49 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 40, WHITE, BLACK, itoa(sig_metrics_val.acq, char_buffer, 10), 2);
 8002e8e:	797b      	ldrb	r3, [r7, #5]
 8002e90:	220a      	movs	r2, #10
 8002e92:	4946      	ldr	r1, [pc, #280]	; (8002fac <DisplayDabStatus+0x178>)
 8002e94:	4618      	mov	r0, r3
 8002e96:	f006 f9e3 	bl	8009260 <itoa>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	9201      	str	r2, [sp, #4]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea8:	2128      	movs	r1, #40	; 0x28
 8002eaa:	2073      	movs	r0, #115	; 0x73
 8002eac:	f7fd fe38 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(131, 40, WHITE, BLACK, "RSSI:" , 2);
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <DisplayDabStatus+0x180>)
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ebe:	2128      	movs	r1, #40	; 0x28
 8002ec0:	2083      	movs	r0, #131	; 0x83
 8002ec2:	f7fd fe2d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, "   ", 2);
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <DisplayDabStatus+0x184>)
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed4:	2128      	movs	r1, #40	; 0x28
 8002ed6:	20ac      	movs	r0, #172	; 0xac
 8002ed8:	f7fd fe22 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, itoa(sig_metrics_val.rssi, char_buffer, 10), 2);
 8002edc:	783b      	ldrb	r3, [r7, #0]
 8002ede:	220a      	movs	r2, #10
 8002ee0:	4932      	ldr	r1, [pc, #200]	; (8002fac <DisplayDabStatus+0x178>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f006 f9bc 	bl	8009260 <itoa>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2202      	movs	r2, #2
 8002eec:	9201      	str	r2, [sp, #4]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ef6:	2128      	movs	r1, #40	; 0x28
 8002ef8:	20ac      	movs	r0, #172	; 0xac
 8002efa:	f7fd fe11 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 40, WHITE, BLACK, "SNR:" , 2);
 8002efe:	2302      	movs	r3, #2
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <DisplayDabStatus+0x188>)
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0c:	2128      	movs	r1, #40	; 0x28
 8002f0e:	20c0      	movs	r0, #192	; 0xc0
 8002f10:	f7fd fe06 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, "   ", 2);
 8002f14:	2302      	movs	r3, #2
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <DisplayDabStatus+0x184>)
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f22:	2128      	movs	r1, #40	; 0x28
 8002f24:	20e1      	movs	r0, #225	; 0xe1
 8002f26:	f7fd fdfb 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, itoa(sig_metrics_val.snr, char_buffer, 10), 2);
 8002f2a:	787b      	ldrb	r3, [r7, #1]
 8002f2c:	220a      	movs	r2, #10
 8002f2e:	491f      	ldr	r1, [pc, #124]	; (8002fac <DisplayDabStatus+0x178>)
 8002f30:	4618      	mov	r0, r3
 8002f32:	f006 f995 	bl	8009260 <itoa>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2202      	movs	r2, #2
 8002f3a:	9201      	str	r2, [sp, #4]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f44:	2128      	movs	r1, #40	; 0x28
 8002f46:	20e1      	movs	r0, #225	; 0xe1
 8002f48:	f7fd fdea 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(240, 40, WHITE, BLACK, "FQ:" , 2);
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <DisplayDabStatus+0x18c>)
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f5a:	2128      	movs	r1, #40	; 0x28
 8002f5c:	20f0      	movs	r0, #240	; 0xf0
 8002f5e:	f7fd fddf 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, "   ", 2);
 8002f62:	2302      	movs	r3, #2
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <DisplayDabStatus+0x184>)
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f70:	2128      	movs	r1, #40	; 0x28
 8002f72:	f44f 7088 	mov.w	r0, #272	; 0x110
 8002f76:	f7fd fdd3 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, itoa(sig_metrics_val.fic_q, char_buffer, 10), 2);
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	220a      	movs	r2, #10
 8002f7e:	490b      	ldr	r1, [pc, #44]	; (8002fac <DisplayDabStatus+0x178>)
 8002f80:	4618      	mov	r0, r3
 8002f82:	f006 f96d 	bl	8009260 <itoa>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2202      	movs	r2, #2
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f94:	2128      	movs	r1, #40	; 0x28
 8002f96:	f44f 7088 	mov.w	r0, #272	; 0x110
 8002f9a:	f7fd fdc1 	bl	8000b20 <ILI9341_Draw_String>
//	ILI9341_Draw_String(80, 75, WHITE, BLACK, "          ", 2);
//	ILI9341_Draw_String(80, 75, WHITE, BLACK, itoa(fic_err_val, char_buffer, 10), 2);
//	ILI9341_Draw_String(150, 75, WHITE, BLACK, "FIC Tot:", 2);
//	ILI9341_Draw_String(220, 75, WHITE, BLACK, "          ", 2);
//	ILI9341_Draw_String(220, 75, WHITE, BLACK, itoa(fic_bit_val, char_buffer, 10), 2);
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	08009e00 	.word	0x08009e00
 8002fac:	20002458 	.word	0x20002458
 8002fb0:	08009e08 	.word	0x08009e08
 8002fb4:	08009e10 	.word	0x08009e10
 8002fb8:	08009de4 	.word	0x08009de4
 8002fbc:	08009e18 	.word	0x08009e18
 8002fc0:	08009e20 	.word	0x08009e20

08002fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_DMA_Init+0x3c>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <MX_DMA_Init+0x3c>)
 8002fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_DMA_Init+0x3c>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	200f      	movs	r0, #15
 8002fec:	f001 f8d3 	bl	8004196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002ff0:	200f      	movs	r0, #15
 8002ff2:	f001 f8ec 	bl	80041ce <HAL_NVIC_EnableIRQ>

}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800

08003004 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
 8003018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a64      	ldr	r2, [pc, #400]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b62      	ldr	r3, [pc, #392]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	4b5e      	ldr	r3, [pc, #376]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b5b      	ldr	r3, [pc, #364]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b57      	ldr	r3, [pc, #348]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b54      	ldr	r3, [pc, #336]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4a4f      	ldr	r2, [pc, #316]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	6313      	str	r3, [r2, #48]	; 0x30
 800307e:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	4b49      	ldr	r3, [pc, #292]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 8003094:	f043 0310 	orr.w	r3, r3, #16
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <MX_GPIO_Init+0x1b0>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2130      	movs	r1, #48	; 0x30
 80030c6:	483c      	ldr	r0, [pc, #240]	; (80031b8 <MX_GPIO_Init+0x1b4>)
 80030c8:	f001 fd52 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80030cc:	2200      	movs	r2, #0
 80030ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030d2:	483a      	ldr	r0, [pc, #232]	; (80031bc <MX_GPIO_Init+0x1b8>)
 80030d4:	f001 fd4c 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80030d8:	2200      	movs	r2, #0
 80030da:	f24f 7180 	movw	r1, #63360	; 0xf780
 80030de:	4838      	ldr	r0, [pc, #224]	; (80031c0 <MX_GPIO_Init+0x1bc>)
 80030e0:	f001 fd46 	bl	8004b70 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2128      	movs	r1, #40	; 0x28
 80030e8:	4836      	ldr	r0, [pc, #216]	; (80031c4 <MX_GPIO_Init+0x1c0>)
 80030ea:	f001 fd41 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80030ee:	2310      	movs	r3, #16
 80030f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 80030fa:	f107 031c 	add.w	r3, r7, #28
 80030fe:	4619      	mov	r1, r3
 8003100:	4831      	ldr	r0, [pc, #196]	; (80031c8 <MX_GPIO_Init+0x1c4>)
 8003102:	f001 fb99 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8003106:	2330      	movs	r3, #48	; 0x30
 8003108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310a:	2301      	movs	r3, #1
 800310c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	4619      	mov	r1, r3
 800311c:	4826      	ldr	r0, [pc, #152]	; (80031b8 <MX_GPIO_Init+0x1b4>)
 800311e:	f001 fb8b 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8003122:	2311      	movs	r3, #17
 8003124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	4619      	mov	r1, r3
 8003134:	4823      	ldr	r0, [pc, #140]	; (80031c4 <MX_GPIO_Init+0x1c0>)
 8003136:	f001 fb7f 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 800313a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800313e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003140:	2301      	movs	r3, #1
 8003142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 800314c:	f107 031c 	add.w	r3, r7, #28
 8003150:	4619      	mov	r1, r3
 8003152:	481a      	ldr	r0, [pc, #104]	; (80031bc <MX_GPIO_Init+0x1b8>)
 8003154:	f001 fb70 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8003158:	f24f 7380 	movw	r3, #63360	; 0xf780
 800315c:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315e:	2301      	movs	r3, #1
 8003160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003166:	2300      	movs	r3, #0
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4619      	mov	r1, r3
 8003170:	4813      	ldr	r0, [pc, #76]	; (80031c0 <MX_GPIO_Init+0x1bc>)
 8003172:	f001 fb61 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003176:	2340      	movs	r3, #64	; 0x40
 8003178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003182:	f107 031c 	add.w	r3, r7, #28
 8003186:	4619      	mov	r1, r3
 8003188:	480d      	ldr	r0, [pc, #52]	; (80031c0 <MX_GPIO_Init+0x1bc>)
 800318a:	f001 fb55 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 800318e:	2328      	movs	r3, #40	; 0x28
 8003190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003192:	2301      	movs	r3, #1
 8003194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	4807      	ldr	r0, [pc, #28]	; (80031c4 <MX_GPIO_Init+0x1c0>)
 80031a6:	f001 fb47 	bl	8004838 <HAL_GPIO_Init>

}
 80031aa:	bf00      	nop
 80031ac:	3730      	adds	r7, #48	; 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40020c00 	.word	0x40020c00
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40020000 	.word	0x40020000

080031cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <MX_I2C1_Init+0x50>)
 80031d2:	4a13      	ldr	r2, [pc, #76]	; (8003220 <MX_I2C1_Init+0x54>)
 80031d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <MX_I2C1_Init+0x50>)
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <MX_I2C1_Init+0x58>)
 80031da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <MX_I2C1_Init+0x50>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <MX_I2C1_Init+0x50>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <MX_I2C1_Init+0x50>)
 80031ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <MX_I2C1_Init+0x50>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <MX_I2C1_Init+0x50>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <MX_I2C1_Init+0x50>)
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <MX_I2C1_Init+0x50>)
 8003204:	2200      	movs	r2, #0
 8003206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <MX_I2C1_Init+0x50>)
 800320a:	f001 fccb 	bl	8004ba4 <HAL_I2C_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003214:	f000 fa10 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20002478 	.word	0x20002478
 8003220:	40005400 	.word	0x40005400
 8003224:	000186a0 	.word	0x000186a0

08003228 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <MX_I2C3_Init+0x50>)
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <MX_I2C3_Init+0x54>)
 8003230:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <MX_I2C3_Init+0x50>)
 8003234:	4a12      	ldr	r2, [pc, #72]	; (8003280 <MX_I2C3_Init+0x58>)
 8003236:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <MX_I2C3_Init+0x50>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <MX_I2C3_Init+0x50>)
 8003240:	2200      	movs	r2, #0
 8003242:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <MX_I2C3_Init+0x50>)
 8003246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800324a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <MX_I2C3_Init+0x50>)
 800324e:	2200      	movs	r2, #0
 8003250:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <MX_I2C3_Init+0x50>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <MX_I2C3_Init+0x50>)
 800325a:	2200      	movs	r2, #0
 800325c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <MX_I2C3_Init+0x50>)
 8003260:	2200      	movs	r2, #0
 8003262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003264:	4804      	ldr	r0, [pc, #16]	; (8003278 <MX_I2C3_Init+0x50>)
 8003266:	f001 fc9d 	bl	8004ba4 <HAL_I2C_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003270:	f000 f9e2 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200024cc 	.word	0x200024cc
 800327c:	40005c00 	.word	0x40005c00
 8003280:	000186a0 	.word	0x000186a0

08003284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a4a      	ldr	r2, [pc, #296]	; (80033cc <HAL_I2C_MspInit+0x148>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d12c      	bne.n	8003300 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a48      	ldr	r2, [pc, #288]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80032c2:	23c0      	movs	r3, #192	; 0xc0
 80032c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c6:	2312      	movs	r3, #18
 80032c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032d2:	2304      	movs	r3, #4
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d6:	f107 031c 	add.w	r3, r7, #28
 80032da:	4619      	mov	r1, r3
 80032dc:	483d      	ldr	r0, [pc, #244]	; (80033d4 <HAL_I2C_MspInit+0x150>)
 80032de:	f001 faab 	bl	8004838 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 80032ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80032fe:	e060      	b.n	80033c2 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <HAL_I2C_MspInit+0x154>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d15b      	bne.n	80033c2 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a2f      	ldr	r2, [pc, #188]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8003342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003348:	2312      	movs	r3, #18
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003354:	2304      	movs	r3, #4
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	4619      	mov	r1, r3
 800335e:	481f      	ldr	r0, [pc, #124]	; (80033dc <HAL_I2C_MspInit+0x158>)
 8003360:	f001 fa6a 	bl	8004838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8003364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800336a:	2312      	movs	r3, #18
 800336c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003372:	2303      	movs	r3, #3
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003376:	2304      	movs	r3, #4
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 800337a:	f107 031c 	add.w	r3, r7, #28
 800337e:	4619      	mov	r1, r3
 8003380:	4817      	ldr	r0, [pc, #92]	; (80033e0 <HAL_I2C_MspInit+0x15c>)
 8003382:	f001 fa59 	bl	8004838 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a10      	ldr	r2, [pc, #64]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 8003390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_I2C_MspInit+0x14c>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	2048      	movs	r0, #72	; 0x48
 80033a8:	f000 fef5 	bl	8004196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80033ac:	2048      	movs	r0, #72	; 0x48
 80033ae:	f000 ff0e 	bl	80041ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	2049      	movs	r0, #73	; 0x49
 80033b8:	f000 feed 	bl	8004196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80033bc:	2049      	movs	r0, #73	; 0x49
 80033be:	f000 ff06 	bl	80041ce <HAL_NVIC_EnableIRQ>
}
 80033c2:	bf00      	nop
 80033c4:	3730      	adds	r7, #48	; 0x30
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40005400 	.word	0x40005400
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40020400 	.word	0x40020400
 80033d8:	40005c00 	.word	0x40005c00
 80033dc:	40020800 	.word	0x40020800
 80033e0:	40020000 	.word	0x40020000

080033e4 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	led_number++;
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <Leds_Control_Blink+0x110>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b40      	ldr	r3, [pc, #256]	; (80034f4 <Leds_Control_Blink+0x110>)
 80033f2:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 80033f4:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <Leds_Control_Blink+0x110>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d102      	bne.n	8003402 <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 80033fc:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <Leds_Control_Blink+0x110>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <Leds_Control_Blink+0x110>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	3b01      	subs	r3, #1
 8003408:	2b03      	cmp	r3, #3
 800340a:	d86f      	bhi.n	80034ec <Leds_Control_Blink+0x108>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <Leds_Control_Blink+0x30>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003425 	.word	0x08003425
 8003418:	08003457 	.word	0x08003457
 800341c:	08003489 	.word	0x08003489
 8003420:	080034bb 	.word	0x080034bb
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8003424:	2201      	movs	r2, #1
 8003426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800342a:	4833      	ldr	r0, [pc, #204]	; (80034f8 <Leds_Control_Blink+0x114>)
 800342c:	f001 fba0 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003436:	4830      	ldr	r0, [pc, #192]	; (80034f8 <Leds_Control_Blink+0x114>)
 8003438:	f001 fb9a 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003442:	482d      	ldr	r0, [pc, #180]	; (80034f8 <Leds_Control_Blink+0x114>)
 8003444:	f001 fb94 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800344e:	482a      	ldr	r0, [pc, #168]	; (80034f8 <Leds_Control_Blink+0x114>)
 8003450:	f001 fb8e 	bl	8004b70 <HAL_GPIO_WritePin>
		break;
 8003454:	e04b      	b.n	80034ee <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003456:	2200      	movs	r2, #0
 8003458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800345c:	4826      	ldr	r0, [pc, #152]	; (80034f8 <Leds_Control_Blink+0x114>)
 800345e:	f001 fb87 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 8003462:	2201      	movs	r2, #1
 8003464:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003468:	4823      	ldr	r0, [pc, #140]	; (80034f8 <Leds_Control_Blink+0x114>)
 800346a:	f001 fb81 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800346e:	2200      	movs	r2, #0
 8003470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003474:	4820      	ldr	r0, [pc, #128]	; (80034f8 <Leds_Control_Blink+0x114>)
 8003476:	f001 fb7b 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 800347a:	2200      	movs	r2, #0
 800347c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003480:	481d      	ldr	r0, [pc, #116]	; (80034f8 <Leds_Control_Blink+0x114>)
 8003482:	f001 fb75 	bl	8004b70 <HAL_GPIO_WritePin>
		break;
 8003486:	e032      	b.n	80034ee <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003488:	2200      	movs	r2, #0
 800348a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800348e:	481a      	ldr	r0, [pc, #104]	; (80034f8 <Leds_Control_Blink+0x114>)
 8003490:	f001 fb6e 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800349a:	4817      	ldr	r0, [pc, #92]	; (80034f8 <Leds_Control_Blink+0x114>)
 800349c:	f001 fb68 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 80034a0:	2201      	movs	r2, #1
 80034a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034a6:	4814      	ldr	r0, [pc, #80]	; (80034f8 <Leds_Control_Blink+0x114>)
 80034a8:	f001 fb62 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 80034ac:	2200      	movs	r2, #0
 80034ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034b2:	4811      	ldr	r0, [pc, #68]	; (80034f8 <Leds_Control_Blink+0x114>)
 80034b4:	f001 fb5c 	bl	8004b70 <HAL_GPIO_WritePin>
		break;
 80034b8:	e019      	b.n	80034ee <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034c0:	480d      	ldr	r0, [pc, #52]	; (80034f8 <Leds_Control_Blink+0x114>)
 80034c2:	f001 fb55 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 80034c6:	2200      	movs	r2, #0
 80034c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034cc:	480a      	ldr	r0, [pc, #40]	; (80034f8 <Leds_Control_Blink+0x114>)
 80034ce:	f001 fb4f 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 80034d2:	2200      	movs	r2, #0
 80034d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034d8:	4807      	ldr	r0, [pc, #28]	; (80034f8 <Leds_Control_Blink+0x114>)
 80034da:	f001 fb49 	bl	8004b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 80034de:	2201      	movs	r2, #1
 80034e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034e4:	4804      	ldr	r0, [pc, #16]	; (80034f8 <Leds_Control_Blink+0x114>)
 80034e6:	f001 fb43 	bl	8004b70 <HAL_GPIO_WritePin>
		break;
 80034ea:	e000      	b.n	80034ee <Leds_Control_Blink+0x10a>
	default:

		break;
 80034ec:	bf00      	nop
	}
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200000ac 	.word	0x200000ac
 80034f8:	40020c00 	.word	0x40020c00

080034fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003500:	f000 fcd8 	bl	8003eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003504:	f000 f82e 	bl	8003564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003508:	f7ff fd7c 	bl	8003004 <MX_GPIO_Init>
  MX_DMA_Init();
 800350c:	f7ff fd5a 	bl	8002fc4 <MX_DMA_Init>
  MX_I2C1_Init();
 8003510:	f7ff fe5c 	bl	80031cc <MX_I2C1_Init>
  MX_I2C3_Init();
 8003514:	f7ff fe88 	bl	8003228 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003518:	f000 f894 	bl	8003644 <MX_SPI1_Init>
  MX_SPI2_Init();
 800351c:	f000 f8c8 	bl	80036b0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003520:	f000 fa66 	bl	80039f0 <MX_TIM3_Init>
  MX_UART5_Init();
 8003524:	f000 fba8 	bl	8003c78 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8003528:	f000 fbd0 	bl	8003ccc <MX_USART3_UART_Init>
  MX_TIM10_Init();
 800352c:	f000 faba 	bl	8003aa4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003530:	f000 fadc 	bl	8003aec <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8003534:	2101      	movs	r1, #1
 8003536:	4808      	ldr	r0, [pc, #32]	; (8003558 <main+0x5c>)
 8003538:	f7ff fb3c 	bl	8002bb4 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim10);
 800353c:	4807      	ldr	r0, [pc, #28]	; (800355c <main+0x60>)
 800353e:	f004 fcff 	bl	8007f40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8003542:	4807      	ldr	r0, [pc, #28]	; (8003560 <main+0x64>)
 8003544:	f004 fcfc 	bl	8007f40 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8003548:	f7fc ffc8 	bl	80004dc <ILI9341_Init>
  DisplayMainScreen();
 800354c:	f7ff fb58 	bl	8002c00 <DisplayMainScreen>

  Si468x_init();
 8003550:	f7fd fdb0 	bl	80010b4 <Si468x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003554:	e7fe      	b.n	8003554 <main+0x58>
 8003556:	bf00      	nop
 8003558:	08009e24 	.word	0x08009e24
 800355c:	20002678 	.word	0x20002678
 8003560:	200026c0 	.word	0x200026c0

08003564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b094      	sub	sp, #80	; 0x50
 8003568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800356a:	f107 0320 	add.w	r3, r7, #32
 800356e:	2230      	movs	r2, #48	; 0x30
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f005 fe76 	bl	8009264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <SystemClock_Config+0xcc>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <SystemClock_Config+0xcc>)
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
 8003598:	4b25      	ldr	r3, [pc, #148]	; (8003630 <SystemClock_Config+0xcc>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a4:	2300      	movs	r3, #0
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <SystemClock_Config+0xd0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a21      	ldr	r2, [pc, #132]	; (8003634 <SystemClock_Config+0xd0>)
 80035ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <SystemClock_Config+0xd0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035ca:	2302      	movs	r3, #2
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80035d4:	2304      	movs	r3, #4
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80035d8:	23a0      	movs	r3, #160	; 0xa0
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035dc:	2302      	movs	r3, #2
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035e0:	2304      	movs	r3, #4
 80035e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 f8fb 	bl	80067e4 <HAL_RCC_OscConfig>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035f4:	f000 f820 	bl	8003638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035f8:	230f      	movs	r3, #15
 80035fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035fc:	2302      	movs	r3, #2
 80035fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800360a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800360e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	2105      	movs	r1, #5
 8003616:	4618      	mov	r0, r3
 8003618:	f003 fb5c 	bl	8006cd4 <HAL_RCC_ClockConfig>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003622:	f000 f809 	bl	8003638 <Error_Handler>
  }
}
 8003626:	bf00      	nop
 8003628:	3750      	adds	r7, #80	; 0x50
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40007000 	.word	0x40007000

08003638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800363c:	b672      	cpsid	i
}
 800363e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003640:	e7fe      	b.n	8003640 <Error_Handler+0x8>
	...

08003644 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <MX_SPI1_Init+0x64>)
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <MX_SPI1_Init+0x68>)
 800364c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <MX_SPI1_Init+0x64>)
 8003650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003656:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <MX_SPI1_Init+0x64>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <MX_SPI1_Init+0x64>)
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003662:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <MX_SPI1_Init+0x64>)
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <MX_SPI1_Init+0x64>)
 800366a:	2200      	movs	r2, #0
 800366c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <MX_SPI1_Init+0x64>)
 8003670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <MX_SPI1_Init+0x64>)
 8003678:	2220      	movs	r2, #32
 800367a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <MX_SPI1_Init+0x64>)
 800367e:	2200      	movs	r2, #0
 8003680:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MX_SPI1_Init+0x64>)
 8003684:	2200      	movs	r2, #0
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <MX_SPI1_Init+0x64>)
 800368a:	2200      	movs	r2, #0
 800368c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <MX_SPI1_Init+0x64>)
 8003690:	220a      	movs	r2, #10
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003694:	4804      	ldr	r0, [pc, #16]	; (80036a8 <MX_SPI1_Init+0x64>)
 8003696:	f003 fd3d 	bl	8007114 <HAL_SPI_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80036a0:	f7ff ffca 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20002520 	.word	0x20002520
 80036ac:	40013000 	.word	0x40013000

080036b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <MX_SPI2_Init+0x64>)
 80036b6:	4a18      	ldr	r2, [pc, #96]	; (8003718 <MX_SPI2_Init+0x68>)
 80036b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <MX_SPI2_Init+0x64>)
 80036bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <MX_SPI2_Init+0x64>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <MX_SPI2_Init+0x64>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <MX_SPI2_Init+0x64>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <MX_SPI2_Init+0x64>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <MX_SPI2_Init+0x64>)
 80036dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <MX_SPI2_Init+0x64>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <MX_SPI2_Init+0x64>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <MX_SPI2_Init+0x64>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <MX_SPI2_Init+0x64>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <MX_SPI2_Init+0x64>)
 80036fc:	220a      	movs	r2, #10
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003700:	4804      	ldr	r0, [pc, #16]	; (8003714 <MX_SPI2_Init+0x64>)
 8003702:	f003 fd07 	bl	8007114 <HAL_SPI_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800370c:	f7ff ff94 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20002578 	.word	0x20002578
 8003718:	40003800 	.word	0x40003800

0800371c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 031c 	add.w	r3, r7, #28
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a4d      	ldr	r2, [pc, #308]	; (8003870 <HAL_SPI_MspInit+0x154>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d12c      	bne.n	8003798 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_SPI_MspInit+0x158>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <HAL_SPI_MspInit+0x158>)
 8003748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800374c:	6453      	str	r3, [r2, #68]	; 0x44
 800374e:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_SPI_MspInit+0x158>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	4b45      	ldr	r3, [pc, #276]	; (8003874 <HAL_SPI_MspInit+0x158>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a44      	ldr	r2, [pc, #272]	; (8003874 <HAL_SPI_MspInit+0x158>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b42      	ldr	r3, [pc, #264]	; (8003874 <HAL_SPI_MspInit+0x158>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8003776:	23e0      	movs	r3, #224	; 0xe0
 8003778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	2302      	movs	r3, #2
 800377c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003782:	2303      	movs	r3, #3
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003786:	2305      	movs	r3, #5
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378a:	f107 031c 	add.w	r3, r7, #28
 800378e:	4619      	mov	r1, r3
 8003790:	4839      	ldr	r0, [pc, #228]	; (8003878 <HAL_SPI_MspInit+0x15c>)
 8003792:	f001 f851 	bl	8004838 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003796:	e066      	b.n	8003866 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a37      	ldr	r2, [pc, #220]	; (800387c <HAL_SPI_MspInit+0x160>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d161      	bne.n	8003866 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <HAL_SPI_MspInit+0x158>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a32      	ldr	r2, [pc, #200]	; (8003874 <HAL_SPI_MspInit+0x158>)
 80037ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b30      	ldr	r3, [pc, #192]	; (8003874 <HAL_SPI_MspInit+0x158>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_SPI_MspInit+0x158>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <HAL_SPI_MspInit+0x158>)
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_SPI_MspInit+0x158>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80037da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e8:	2303      	movs	r3, #3
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037ec:	2305      	movs	r3, #5
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	4619      	mov	r1, r3
 80037f6:	4822      	ldr	r0, [pc, #136]	; (8003880 <HAL_SPI_MspInit+0x164>)
 80037f8:	f001 f81e 	bl	8004838 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80037fc:	4b21      	ldr	r3, [pc, #132]	; (8003884 <HAL_SPI_MspInit+0x168>)
 80037fe:	4a22      	ldr	r2, [pc, #136]	; (8003888 <HAL_SPI_MspInit+0x16c>)
 8003800:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_SPI_MspInit+0x168>)
 8003804:	2200      	movs	r2, #0
 8003806:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_SPI_MspInit+0x168>)
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_SPI_MspInit+0x168>)
 8003810:	2200      	movs	r2, #0
 8003812:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_SPI_MspInit+0x168>)
 8003816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800381a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_SPI_MspInit+0x168>)
 800381e:	2200      	movs	r2, #0
 8003820:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003822:	4b18      	ldr	r3, [pc, #96]	; (8003884 <HAL_SPI_MspInit+0x168>)
 8003824:	2200      	movs	r2, #0
 8003826:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003828:	4b16      	ldr	r3, [pc, #88]	; (8003884 <HAL_SPI_MspInit+0x168>)
 800382a:	2200      	movs	r2, #0
 800382c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_SPI_MspInit+0x168>)
 8003830:	2200      	movs	r2, #0
 8003832:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_SPI_MspInit+0x168>)
 8003836:	2200      	movs	r2, #0
 8003838:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800383a:	4812      	ldr	r0, [pc, #72]	; (8003884 <HAL_SPI_MspInit+0x168>)
 800383c:	f000 fce2 	bl	8004204 <HAL_DMA_Init>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8003846:	f7ff fef7 	bl	8003638 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <HAL_SPI_MspInit+0x168>)
 800384e:	649a      	str	r2, [r3, #72]	; 0x48
 8003850:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <HAL_SPI_MspInit+0x168>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2100      	movs	r1, #0
 800385a:	2024      	movs	r0, #36	; 0x24
 800385c:	f000 fc9b 	bl	8004196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003860:	2024      	movs	r0, #36	; 0x24
 8003862:	f000 fcb4 	bl	80041ce <HAL_NVIC_EnableIRQ>
}
 8003866:	bf00      	nop
 8003868:	3730      	adds	r7, #48	; 0x30
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40013000 	.word	0x40013000
 8003874:	40023800 	.word	0x40023800
 8003878:	40020000 	.word	0x40020000
 800387c:	40003800 	.word	0x40003800
 8003880:	40020400 	.word	0x40020400
 8003884:	200025d0 	.word	0x200025d0
 8003888:	40026070 	.word	0x40026070

0800388c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_MspInit+0x4c>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <HAL_MspInit+0x4c>)
 800389c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a0:	6453      	str	r3, [r2, #68]	; 0x44
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_MspInit+0x4c>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_MspInit+0x4c>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <HAL_MspInit+0x4c>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_MspInit+0x4c>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800

080038dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <NMI_Handler+0x4>

080038e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <HardFault_Handler+0x4>

080038e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <MemManage_Handler+0x4>

080038ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038f2:	e7fe      	b.n	80038f2 <BusFault_Handler+0x4>

080038f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <UsageFault_Handler+0x4>

080038fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003928:	f000 fb16 	bl	8003f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}

08003930 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <DMA1_Stream4_IRQHandler+0x10>)
 8003936:	f000 fd35 	bl	80043a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200025d0 	.word	0x200025d0

08003944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800394a:	f004 fbb8 	bl	80080be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20002678 	.word	0x20002678

08003958 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800395e:	f004 fbae 	bl	80080be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200026c0 	.word	0x200026c0

0800396c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <SPI2_IRQHandler+0x10>)
 8003972:	f004 f847 	bl	8007a04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20002578 	.word	0x20002578

08003980 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <I2C3_EV_IRQHandler+0x10>)
 8003986:	f001 fa51 	bl	8004e2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200024cc 	.word	0x200024cc

08003994 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003998:	4802      	ldr	r0, [pc, #8]	; (80039a4 <I2C3_ER_IRQHandler+0x10>)
 800399a:	f001 fbb8 	bl	800510e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200024cc 	.word	0x200024cc

080039a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 80039ba:	f7ff fd13 	bl	80033e4 <Leds_Control_Blink>
//		Si468x_dab_reset_interrupts();
//		Si468x_dab_digrad_status();

	}
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40014800 	.word	0x40014800

080039cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <SystemInit+0x20>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <SystemInit+0x20>)
 80039d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f6:	f107 0320 	add.w	r3, r7, #32
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	615a      	str	r2, [r3, #20]
 8003a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a14:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <MX_TIM3_Init+0xb0>)
 8003a16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a38:	4818      	ldr	r0, [pc, #96]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a3a:	f004 faf1 	bl	8008020 <HAL_TIM_PWM_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003a44:	f7ff fdf8 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a50:	f107 0320 	add.w	r3, r7, #32
 8003a54:	4619      	mov	r1, r3
 8003a56:	4811      	ldr	r0, [pc, #68]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a58:	f004 ff74 	bl	8008944 <HAL_TIMEx_MasterConfigSynchronization>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003a62:	f7ff fde9 	bl	8003638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a66:	2360      	movs	r3, #96	; 0x60
 8003a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2208      	movs	r2, #8
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4807      	ldr	r0, [pc, #28]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a7e:	f004 fc27 	bl	80082d0 <HAL_TIM_PWM_ConfigChannel>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003a88:	f7ff fdd6 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a8c:	4803      	ldr	r0, [pc, #12]	; (8003a9c <MX_TIM3_Init+0xac>)
 8003a8e:	f000 f8b9 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 8003a92:	bf00      	nop
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20002630 	.word	0x20002630
 8003aa0:	40000400 	.word	0x40000400

08003aa4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <MX_TIM10_Init+0x40>)
 8003aaa:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <MX_TIM10_Init+0x44>)
 8003aac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <MX_TIM10_Init+0x40>)
 8003ab0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8003ab4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <MX_TIM10_Init+0x40>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <MX_TIM10_Init+0x40>)
 8003abe:	f240 2257 	movw	r2, #599	; 0x257
 8003ac2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <MX_TIM10_Init+0x40>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <MX_TIM10_Init+0x40>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003ad0:	4804      	ldr	r0, [pc, #16]	; (8003ae4 <MX_TIM10_Init+0x40>)
 8003ad2:	f004 f9e5 	bl	8007ea0 <HAL_TIM_Base_Init>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003adc:	f7ff fdac 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003ae0:	bf00      	nop
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20002678 	.word	0x20002678
 8003ae8:	40014400 	.word	0x40014400

08003aec <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <MX_TIM11_Init+0x40>)
 8003af2:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <MX_TIM11_Init+0x44>)
 8003af4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <MX_TIM11_Init+0x40>)
 8003af8:	f643 2297 	movw	r2, #14999	; 0x3a97
 8003afc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <MX_TIM11_Init+0x40>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <MX_TIM11_Init+0x40>)
 8003b06:	f240 5213 	movw	r2, #1299	; 0x513
 8003b0a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <MX_TIM11_Init+0x40>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <MX_TIM11_Init+0x40>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003b18:	4804      	ldr	r0, [pc, #16]	; (8003b2c <MX_TIM11_Init+0x40>)
 8003b1a:	f004 f9c1 	bl	8007ea0 <HAL_TIM_Base_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003b24:	f7ff fd88 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200026c0 	.word	0x200026c0
 8003b30:	40014800 	.word	0x40014800

08003b34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_TIM_PWM_MspInit+0x40>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_TIM_PWM_MspInit+0x40>)
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	6413      	str	r3, [r2, #64]	; 0x40
 8003b56:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <HAL_TIM_PWM_MspInit+0x40>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40023800 	.word	0x40023800

08003b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_TIM_Base_MspInit+0x80>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d116      	bne.n	8003bb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_TIM_Base_MspInit+0x84>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	4a1a      	ldr	r2, [pc, #104]	; (8003bfc <HAL_TIM_Base_MspInit+0x84>)
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9a:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <HAL_TIM_Base_MspInit+0x84>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2100      	movs	r1, #0
 8003baa:	2019      	movs	r0, #25
 8003bac:	f000 faf3 	bl	8004196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003bb0:	2019      	movs	r0, #25
 8003bb2:	f000 fb0c 	bl	80041ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003bb6:	e01a      	b.n	8003bee <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <HAL_TIM_Base_MspInit+0x88>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d115      	bne.n	8003bee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_TIM_Base_MspInit+0x84>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <HAL_TIM_Base_MspInit+0x84>)
 8003bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_TIM_Base_MspInit+0x84>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	201a      	movs	r0, #26
 8003be4:	f000 fad7 	bl	8004196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003be8:	201a      	movs	r0, #26
 8003bea:	f000 faf0 	bl	80041ce <HAL_NVIC_EnableIRQ>
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40014800 	.word	0x40014800

08003c04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 030c 	add.w	r3, r7, #12
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <HAL_TIM_MspPostInit+0x68>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d11e      	bne.n	8003c64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <HAL_TIM_MspPostInit+0x6c>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a10      	ldr	r2, [pc, #64]	; (8003c70 <HAL_TIM_MspPostInit+0x6c>)
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_TIM_MspPostInit+0x6c>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8003c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c54:	2302      	movs	r3, #2
 8003c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003c58:	f107 030c 	add.w	r3, r7, #12
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4805      	ldr	r0, [pc, #20]	; (8003c74 <HAL_TIM_MspPostInit+0x70>)
 8003c60:	f000 fdea 	bl	8004838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c64:	bf00      	nop
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40020800 	.word	0x40020800

08003c78 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <MX_UART5_Init+0x50>)
 8003c80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003cae:	4805      	ldr	r0, [pc, #20]	; (8003cc4 <MX_UART5_Init+0x4c>)
 8003cb0:	f004 fed8 	bl	8008a64 <HAL_UART_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003cba:	f7ff fcbd 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20002708 	.word	0x20002708
 8003cc8:	40005000 	.word	0x40005000

08003ccc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <MX_USART3_UART_Init+0x50>)
 8003cd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003cd8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003cdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003cf2:	220c      	movs	r2, #12
 8003cf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d02:	4805      	ldr	r0, [pc, #20]	; (8003d18 <MX_USART3_UART_Init+0x4c>)
 8003d04:	f004 feae 	bl	8008a64 <HAL_UART_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003d0e:	f7ff fc93 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	2000274c 	.word	0x2000274c
 8003d1c:	40004800 	.word	0x40004800

08003d20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	; 0x30
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	f107 031c 	add.w	r3, r7, #28
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a42      	ldr	r2, [pc, #264]	; (8003e48 <HAL_UART_MspInit+0x128>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d14b      	bne.n	8003dda <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4a40      	ldr	r2, [pc, #256]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d50:	6413      	str	r3, [r2, #64]	; 0x40
 8003d52:	4b3e      	ldr	r3, [pc, #248]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a39      	ldr	r2, [pc, #228]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a32      	ldr	r2, [pc, #200]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da4:	2303      	movs	r3, #3
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003da8:	2308      	movs	r3, #8
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dac:	f107 031c 	add.w	r3, r7, #28
 8003db0:	4619      	mov	r1, r3
 8003db2:	4827      	ldr	r0, [pc, #156]	; (8003e50 <HAL_UART_MspInit+0x130>)
 8003db4:	f000 fd40 	bl	8004838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003db8:	2304      	movs	r3, #4
 8003dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003dc8:	2308      	movs	r3, #8
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4820      	ldr	r0, [pc, #128]	; (8003e54 <HAL_UART_MspInit+0x134>)
 8003dd4:	f000 fd30 	bl	8004838 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003dd8:	e031      	b.n	8003e3e <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <HAL_UART_MspInit+0x138>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d12c      	bne.n	8003e3e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df2:	6413      	str	r3, [r2, #64]	; 0x40
 8003df4:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003e0a:	f043 0302 	orr.w	r3, r3, #2
 8003e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e10:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <HAL_UART_MspInit+0x12c>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8003e1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e2e:	2307      	movs	r3, #7
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e32:	f107 031c 	add.w	r3, r7, #28
 8003e36:	4619      	mov	r1, r3
 8003e38:	4808      	ldr	r0, [pc, #32]	; (8003e5c <HAL_UART_MspInit+0x13c>)
 8003e3a:	f000 fcfd 	bl	8004838 <HAL_GPIO_Init>
}
 8003e3e:	bf00      	nop
 8003e40:	3730      	adds	r7, #48	; 0x30
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40005000 	.word	0x40005000
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40020800 	.word	0x40020800
 8003e54:	40020c00 	.word	0x40020c00
 8003e58:	40004800 	.word	0x40004800
 8003e5c:	40020400 	.word	0x40020400

08003e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e64:	480d      	ldr	r0, [pc, #52]	; (8003e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e66:	490e      	ldr	r1, [pc, #56]	; (8003ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e68:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e6c:	e002      	b.n	8003e74 <LoopCopyDataInit>

08003e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e72:	3304      	adds	r3, #4

08003e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e78:	d3f9      	bcc.n	8003e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e7c:	4c0b      	ldr	r4, [pc, #44]	; (8003eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e80:	e001      	b.n	8003e86 <LoopFillZerobss>

08003e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e84:	3204      	adds	r2, #4

08003e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e88:	d3fb      	bcc.n	8003e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e8a:	f7ff fd9f 	bl	80039cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e8e:	f005 f9ab 	bl	80091e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e92:	f7ff fb33 	bl	80034fc <main>
  bx  lr    
 8003e96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ea0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8003ea4:	0800bdf8 	.word	0x0800bdf8
  ldr r2, =_sbss
 8003ea8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8003eac:	20002794 	.word	0x20002794

08003eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003eb0:	e7fe      	b.n	8003eb0 <ADC_IRQHandler>
	...

08003eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <HAL_Init+0x40>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	; (8003ef4 <HAL_Init+0x40>)
 8003ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_Init+0x40>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_Init+0x40>)
 8003eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ed0:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_Init+0x40>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <HAL_Init+0x40>)
 8003ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003edc:	2003      	movs	r0, #3
 8003ede:	f000 f94f 	bl	8004180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ee2:	200f      	movs	r0, #15
 8003ee4:	f000 f808 	bl	8003ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ee8:	f7ff fcd0 	bl	800388c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023c00 	.word	0x40023c00

08003ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <HAL_InitTick+0x54>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_InitTick+0x58>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f967 	bl	80041ea <HAL_SYSTICK_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00e      	b.n	8003f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b0f      	cmp	r3, #15
 8003f2a:	d80a      	bhi.n	8003f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	f000 f92f 	bl	8004196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f38:	4a06      	ldr	r2, [pc, #24]	; (8003f54 <HAL_InitTick+0x5c>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200000b0 	.word	0x200000b0
 8003f50:	200000b8 	.word	0x200000b8
 8003f54:	200000b4 	.word	0x200000b4

08003f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_IncTick+0x20>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_IncTick+0x24>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_IncTick+0x24>)
 8003f6a:	6013      	str	r3, [r2, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	200000b8 	.word	0x200000b8
 8003f7c:	20002790 	.word	0x20002790

08003f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return uwTick;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_GetTick+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20002790 	.word	0x20002790

08003f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7ff ffee 	bl	8003f80 <HAL_GetTick>
 8003fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d005      	beq.n	8003fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_Delay+0x44>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fbe:	bf00      	nop
 8003fc0:	f7ff ffde 	bl	8003f80 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d8f7      	bhi.n	8003fc0 <HAL_Delay+0x28>
  {
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200000b8 	.word	0x200000b8

08003fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800400c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004012:	4a04      	ldr	r2, [pc, #16]	; (8004024 <__NVIC_SetPriorityGrouping+0x44>)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	60d3      	str	r3, [r2, #12]
}
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <__NVIC_GetPriorityGrouping+0x18>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	f003 0307 	and.w	r3, r3, #7
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	2b00      	cmp	r3, #0
 8004054:	db0b      	blt.n	800406e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	f003 021f 	and.w	r2, r3, #31
 800405c:	4907      	ldr	r1, [pc, #28]	; (800407c <__NVIC_EnableIRQ+0x38>)
 800405e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2001      	movs	r0, #1
 8004066:	fa00 f202 	lsl.w	r2, r0, r2
 800406a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000e100 	.word	0xe000e100

08004080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004090:	2b00      	cmp	r3, #0
 8004092:	db0a      	blt.n	80040aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	490c      	ldr	r1, [pc, #48]	; (80040cc <__NVIC_SetPriority+0x4c>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	0112      	lsls	r2, r2, #4
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	440b      	add	r3, r1
 80040a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040a8:	e00a      	b.n	80040c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	4908      	ldr	r1, [pc, #32]	; (80040d0 <__NVIC_SetPriority+0x50>)
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	3b04      	subs	r3, #4
 80040b8:	0112      	lsls	r2, r2, #4
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	440b      	add	r3, r1
 80040be:	761a      	strb	r2, [r3, #24]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	e000e100 	.word	0xe000e100
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f1c3 0307 	rsb	r3, r3, #7
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	bf28      	it	cs
 80040f2:	2304      	movcs	r3, #4
 80040f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d902      	bls.n	8004104 <NVIC_EncodePriority+0x30>
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3b03      	subs	r3, #3
 8004102:	e000      	b.n	8004106 <NVIC_EncodePriority+0x32>
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	f04f 32ff 	mov.w	r2, #4294967295
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43da      	mvns	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	401a      	ands	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800411c:	f04f 31ff 	mov.w	r1, #4294967295
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	43d9      	mvns	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	4313      	orrs	r3, r2
         );
}
 800412e:	4618      	mov	r0, r3
 8004130:	3724      	adds	r7, #36	; 0x24
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3b01      	subs	r3, #1
 8004148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800414c:	d301      	bcc.n	8004152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800414e:	2301      	movs	r3, #1
 8004150:	e00f      	b.n	8004172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <SysTick_Config+0x40>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3b01      	subs	r3, #1
 8004158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800415a:	210f      	movs	r1, #15
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	f7ff ff8e 	bl	8004080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <SysTick_Config+0x40>)
 8004166:	2200      	movs	r2, #0
 8004168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800416a:	4b04      	ldr	r3, [pc, #16]	; (800417c <SysTick_Config+0x40>)
 800416c:	2207      	movs	r2, #7
 800416e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	e000e010 	.word	0xe000e010

08004180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff29 	bl	8003fe0 <__NVIC_SetPriorityGrouping>
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	4603      	mov	r3, r0
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041a8:	f7ff ff3e 	bl	8004028 <__NVIC_GetPriorityGrouping>
 80041ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	6978      	ldr	r0, [r7, #20]
 80041b4:	f7ff ff8e 	bl	80040d4 <NVIC_EncodePriority>
 80041b8:	4602      	mov	r2, r0
 80041ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff5d 	bl	8004080 <__NVIC_SetPriority>
}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	4603      	mov	r3, r0
 80041d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff ff31 	bl	8004044 <__NVIC_EnableIRQ>
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ffa2 	bl	800413c <SysTick_Config>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004210:	f7ff feb6 	bl	8003f80 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e099      	b.n	8004354 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004240:	e00f      	b.n	8004262 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004242:	f7ff fe9d 	bl	8003f80 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b05      	cmp	r3, #5
 800424e:	d908      	bls.n	8004262 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2203      	movs	r2, #3
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e078      	b.n	8004354 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e8      	bne.n	8004242 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4b38      	ldr	r3, [pc, #224]	; (800435c <HAL_DMA_Init+0x158>)
 800427c:	4013      	ands	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800428e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800429a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d107      	bne.n	80042cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	4313      	orrs	r3, r2
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d117      	bne.n	8004326 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00e      	beq.n	8004326 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fa19 	bl	8004740 <DMA_CheckFifoParam>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004322:	2301      	movs	r3, #1
 8004324:	e016      	b.n	8004354 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f9d0 	bl	80046d4 <DMA_CalcBaseAndBitshift>
 8004334:	4603      	mov	r3, r0
 8004336:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	223f      	movs	r2, #63	; 0x3f
 800433e:	409a      	lsls	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	f010803f 	.word	0xf010803f

08004360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d004      	beq.n	800437e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e00c      	b.n	8004398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2205      	movs	r2, #5
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043b0:	4b8e      	ldr	r3, [pc, #568]	; (80045ec <HAL_DMA_IRQHandler+0x248>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a8e      	ldr	r2, [pc, #568]	; (80045f0 <HAL_DMA_IRQHandler+0x24c>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0a9b      	lsrs	r3, r3, #10
 80043bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	2208      	movs	r2, #8
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01a      	beq.n	8004410 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d013      	beq.n	8004410 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0204 	bic.w	r2, r2, #4
 80043f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	2208      	movs	r2, #8
 80043fe:	409a      	lsls	r2, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	f043 0201 	orr.w	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d012      	beq.n	8004446 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	2201      	movs	r2, #1
 8004434:	409a      	lsls	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f043 0202 	orr.w	r2, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	2204      	movs	r2, #4
 800444c:	409a      	lsls	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4013      	ands	r3, r2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d012      	beq.n	800447c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	2204      	movs	r2, #4
 800446a:	409a      	lsls	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	2210      	movs	r2, #16
 8004482:	409a      	lsls	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d043      	beq.n	8004514 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d03c      	beq.n	8004514 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449e:	2210      	movs	r2, #16
 80044a0:	409a      	lsls	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d018      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d024      	beq.n	8004514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4798      	blx	r3
 80044d2:	e01f      	b.n	8004514 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01b      	beq.n	8004514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
 80044e4:	e016      	b.n	8004514 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0208 	bic.w	r2, r2, #8
 8004502:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004518:	2220      	movs	r2, #32
 800451a:	409a      	lsls	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 808f 	beq.w	8004644 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8087 	beq.w	8004644 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	2220      	movs	r2, #32
 800453c:	409a      	lsls	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b05      	cmp	r3, #5
 800454c:	d136      	bne.n	80045bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0216 	bic.w	r2, r2, #22
 800455c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800456c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <HAL_DMA_IRQHandler+0x1da>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0208 	bic.w	r2, r2, #8
 800458c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004592:	223f      	movs	r2, #63	; 0x3f
 8004594:	409a      	lsls	r2, r3
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d07e      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4798      	blx	r3
        }
        return;
 80045ba:	e079      	b.n	80046b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01d      	beq.n	8004606 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d031      	beq.n	8004644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	4798      	blx	r3
 80045e8:	e02c      	b.n	8004644 <HAL_DMA_IRQHandler+0x2a0>
 80045ea:	bf00      	nop
 80045ec:	200000b0 	.word	0x200000b0
 80045f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d023      	beq.n	8004644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
 8004604:	e01e      	b.n	8004644 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10f      	bne.n	8004634 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0210 	bic.w	r2, r2, #16
 8004622:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	2b00      	cmp	r3, #0
 800464a:	d032      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d022      	beq.n	800469e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2205      	movs	r2, #5
 800465c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3301      	adds	r3, #1
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	d307      	bcc.n	800468c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f2      	bne.n	8004670 <HAL_DMA_IRQHandler+0x2cc>
 800468a:	e000      	b.n	800468e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800468c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
 80046ae:	e000      	b.n	80046b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80046b0:	bf00      	nop
    }
  }
}
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c6:	b2db      	uxtb	r3, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3b10      	subs	r3, #16
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <DMA_CalcBaseAndBitshift+0x64>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ee:	4a13      	ldr	r2, [pc, #76]	; (800473c <DMA_CalcBaseAndBitshift+0x68>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d909      	bls.n	8004716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	1d1a      	adds	r2, r3, #4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	659a      	str	r2, [r3, #88]	; 0x58
 8004714:	e007      	b.n	8004726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	aaaaaaab 	.word	0xaaaaaaab
 800473c:	0800bdb8 	.word	0x0800bdb8

08004740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11f      	bne.n	800479a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d856      	bhi.n	800480e <DMA_CheckFifoParam+0xce>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <DMA_CheckFifoParam+0x28>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	08004779 	.word	0x08004779
 800476c:	0800478b 	.word	0x0800478b
 8004770:	08004779 	.word	0x08004779
 8004774:	0800480f 	.word	0x0800480f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d046      	beq.n	8004812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004788:	e043      	b.n	8004812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004792:	d140      	bne.n	8004816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004798:	e03d      	b.n	8004816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a2:	d121      	bne.n	80047e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d837      	bhi.n	800481a <DMA_CheckFifoParam+0xda>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <DMA_CheckFifoParam+0x70>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047c7 	.word	0x080047c7
 80047b8:	080047c1 	.word	0x080047c1
 80047bc:	080047d9 	.word	0x080047d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	e030      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d025      	beq.n	800481e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d6:	e022      	b.n	800481e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047e0:	d11f      	bne.n	8004822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047e6:	e01c      	b.n	8004822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d903      	bls.n	80047f6 <DMA_CheckFifoParam+0xb6>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d003      	beq.n	80047fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047f4:	e018      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
      break;
 80047fa:	e015      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00e      	beq.n	8004826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      break;
 800480c:	e00b      	b.n	8004826 <DMA_CheckFifoParam+0xe6>
      break;
 800480e:	bf00      	nop
 8004810:	e00a      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004812:	bf00      	nop
 8004814:	e008      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004816:	bf00      	nop
 8004818:	e006      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 800481a:	bf00      	nop
 800481c:	e004      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 800481e:	bf00      	nop
 8004820:	e002      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;   
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004826:	bf00      	nop
    }
  } 
  
  return status; 
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	; 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e16b      	b.n	8004b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004854:	2201      	movs	r2, #1
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	429a      	cmp	r2, r3
 800486e:	f040 815a 	bne.w	8004b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d005      	beq.n	800488a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004886:	2b02      	cmp	r3, #2
 8004888:	d130      	bne.n	80048ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	2203      	movs	r2, #3
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048c0:	2201      	movs	r2, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 0201 	and.w	r2, r3, #1
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d017      	beq.n	8004928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d123      	bne.n	800497c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	08da      	lsrs	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3208      	adds	r2, #8
 800493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	220f      	movs	r2, #15
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	08da      	lsrs	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3208      	adds	r2, #8
 8004976:	69b9      	ldr	r1, [r7, #24]
 8004978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2203      	movs	r2, #3
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0203 	and.w	r2, r3, #3
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80b4 	beq.w	8004b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b60      	ldr	r3, [pc, #384]	; (8004b44 <HAL_GPIO_Init+0x30c>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	4a5f      	ldr	r2, [pc, #380]	; (8004b44 <HAL_GPIO_Init+0x30c>)
 80049c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049cc:	6453      	str	r3, [r2, #68]	; 0x44
 80049ce:	4b5d      	ldr	r3, [pc, #372]	; (8004b44 <HAL_GPIO_Init+0x30c>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049da:	4a5b      	ldr	r2, [pc, #364]	; (8004b48 <HAL_GPIO_Init+0x310>)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a52      	ldr	r2, [pc, #328]	; (8004b4c <HAL_GPIO_Init+0x314>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d02b      	beq.n	8004a5e <HAL_GPIO_Init+0x226>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a51      	ldr	r2, [pc, #324]	; (8004b50 <HAL_GPIO_Init+0x318>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d025      	beq.n	8004a5a <HAL_GPIO_Init+0x222>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a50      	ldr	r2, [pc, #320]	; (8004b54 <HAL_GPIO_Init+0x31c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01f      	beq.n	8004a56 <HAL_GPIO_Init+0x21e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a4f      	ldr	r2, [pc, #316]	; (8004b58 <HAL_GPIO_Init+0x320>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d019      	beq.n	8004a52 <HAL_GPIO_Init+0x21a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a4e      	ldr	r2, [pc, #312]	; (8004b5c <HAL_GPIO_Init+0x324>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_GPIO_Init+0x216>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a4d      	ldr	r2, [pc, #308]	; (8004b60 <HAL_GPIO_Init+0x328>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00d      	beq.n	8004a4a <HAL_GPIO_Init+0x212>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a4c      	ldr	r2, [pc, #304]	; (8004b64 <HAL_GPIO_Init+0x32c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <HAL_GPIO_Init+0x20e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a4b      	ldr	r2, [pc, #300]	; (8004b68 <HAL_GPIO_Init+0x330>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_GPIO_Init+0x20a>
 8004a3e:	2307      	movs	r3, #7
 8004a40:	e00e      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a42:	2308      	movs	r3, #8
 8004a44:	e00c      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a46:	2306      	movs	r3, #6
 8004a48:	e00a      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a4a:	2305      	movs	r3, #5
 8004a4c:	e008      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a4e:	2304      	movs	r3, #4
 8004a50:	e006      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a52:	2303      	movs	r3, #3
 8004a54:	e004      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e002      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	f002 0203 	and.w	r2, r2, #3
 8004a66:	0092      	lsls	r2, r2, #2
 8004a68:	4093      	lsls	r3, r2
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a70:	4935      	ldr	r1, [pc, #212]	; (8004b48 <HAL_GPIO_Init+0x310>)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	089b      	lsrs	r3, r3, #2
 8004a76:	3302      	adds	r3, #2
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aa2:	4a32      	ldr	r2, [pc, #200]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004aa8:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004acc:	4a27      	ldr	r2, [pc, #156]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ad2:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004af6:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b20:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b0f      	cmp	r3, #15
 8004b30:	f67f ae90 	bls.w	8004854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40013800 	.word	0x40013800
 8004b4c:	40020000 	.word	0x40020000
 8004b50:	40020400 	.word	0x40020400
 8004b54:	40020800 	.word	0x40020800
 8004b58:	40020c00 	.word	0x40020c00
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40021400 	.word	0x40021400
 8004b64:	40021800 	.word	0x40021800
 8004b68:	40021c00 	.word	0x40021c00
 8004b6c:	40013c00 	.word	0x40013c00

08004b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b80:	787b      	ldrb	r3, [r7, #1]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b86:	887a      	ldrh	r2, [r7, #2]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b8c:	e003      	b.n	8004b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	041a      	lsls	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	619a      	str	r2, [r3, #24]
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e12b      	b.n	8004e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fe fb5a 	bl	8003284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	; 0x24
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c08:	f002 fa5c 	bl	80070c4 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4a81      	ldr	r2, [pc, #516]	; (8004e18 <HAL_I2C_Init+0x274>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d807      	bhi.n	8004c28 <HAL_I2C_Init+0x84>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a80      	ldr	r2, [pc, #512]	; (8004e1c <HAL_I2C_Init+0x278>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bf94      	ite	ls
 8004c20:	2301      	movls	r3, #1
 8004c22:	2300      	movhi	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	e006      	b.n	8004c36 <HAL_I2C_Init+0x92>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a7d      	ldr	r2, [pc, #500]	; (8004e20 <HAL_I2C_Init+0x27c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bf94      	ite	ls
 8004c30:	2301      	movls	r3, #1
 8004c32:	2300      	movhi	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0e7      	b.n	8004e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a78      	ldr	r2, [pc, #480]	; (8004e24 <HAL_I2C_Init+0x280>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	0c9b      	lsrs	r3, r3, #18
 8004c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4a6a      	ldr	r2, [pc, #424]	; (8004e18 <HAL_I2C_Init+0x274>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d802      	bhi.n	8004c78 <HAL_I2C_Init+0xd4>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	3301      	adds	r3, #1
 8004c76:	e009      	b.n	8004c8c <HAL_I2C_Init+0xe8>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	4a69      	ldr	r2, [pc, #420]	; (8004e28 <HAL_I2C_Init+0x284>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	495c      	ldr	r1, [pc, #368]	; (8004e18 <HAL_I2C_Init+0x274>)
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	d819      	bhi.n	8004ce0 <HAL_I2C_Init+0x13c>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1e59      	subs	r1, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cba:	1c59      	adds	r1, r3, #1
 8004cbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_I2C_Init+0x138>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1e59      	subs	r1, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cda:	e051      	b.n	8004d80 <HAL_I2C_Init+0x1dc>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	e04f      	b.n	8004d80 <HAL_I2C_Init+0x1dc>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d111      	bne.n	8004d0c <HAL_I2C_Init+0x168>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1e58      	subs	r0, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	440b      	add	r3, r1
 8004cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e012      	b.n	8004d32 <HAL_I2C_Init+0x18e>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1e58      	subs	r0, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	0099      	lsls	r1, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Init+0x196>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e022      	b.n	8004d80 <HAL_I2C_Init+0x1dc>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10e      	bne.n	8004d60 <HAL_I2C_Init+0x1bc>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1e58      	subs	r0, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	440b      	add	r3, r1
 8004d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d54:	3301      	adds	r3, #1
 8004d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5e:	e00f      	b.n	8004d80 <HAL_I2C_Init+0x1dc>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e58      	subs	r0, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	0099      	lsls	r1, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d76:	3301      	adds	r3, #1
 8004d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	6809      	ldr	r1, [r1, #0]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6911      	ldr	r1, [r2, #16]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68d2      	ldr	r2, [r2, #12]
 8004dba:	4311      	orrs	r1, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	000186a0 	.word	0x000186a0
 8004e1c:	001e847f 	.word	0x001e847f
 8004e20:	003d08ff 	.word	0x003d08ff
 8004e24:	431bde83 	.word	0x431bde83
 8004e28:	10624dd3 	.word	0x10624dd3

08004e2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d003      	beq.n	8004e64 <HAL_I2C_EV_IRQHandler+0x38>
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	f040 80c1 	bne.w	8004fe6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <HAL_I2C_EV_IRQHandler+0x6e>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e84:	d003      	beq.n	8004e8e <HAL_I2C_EV_IRQHandler+0x62>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e8c:	d101      	bne.n	8004e92 <HAL_I2C_EV_IRQHandler+0x66>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_I2C_EV_IRQHandler+0x68>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	f000 8132 	beq.w	80050fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_I2C_EV_IRQHandler+0x92>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	0a5b      	lsrs	r3, r3, #9
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 fc7b 	bl	80067ac <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fd83 	bl	80059c2 <I2C_Master_SB>
 8004ebc:	e092      	b.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	08db      	lsrs	r3, r3, #3
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_I2C_EV_IRQHandler+0xb2>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	0a5b      	lsrs	r3, r3, #9
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fdf9 	bl	8005ace <I2C_Master_ADD10>
 8004edc:	e082      	b.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_I2C_EV_IRQHandler+0xd2>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	0a5b      	lsrs	r3, r3, #9
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fe13 	bl	8005b22 <I2C_Master_ADDR>
 8004efc:	e072      	b.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d03b      	beq.n	8004f82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f18:	f000 80f3 	beq.w	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	09db      	lsrs	r3, r3, #7
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00f      	beq.n	8004f48 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	0a9b      	lsrs	r3, r3, #10
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f9f3 	bl	800532c <I2C_MasterTransmit_TXE>
 8004f46:	e04d      	b.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	089b      	lsrs	r3, r3, #2
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80d6 	beq.w	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	0a5b      	lsrs	r3, r3, #9
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80cf 	beq.w	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f64:	7bbb      	ldrb	r3, [r7, #14]
 8004f66:	2b21      	cmp	r3, #33	; 0x21
 8004f68:	d103      	bne.n	8004f72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa7a 	bl	8005464 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f70:	e0c7      	b.n	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	f040 80c4 	bne.w	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fae8 	bl	8005550 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f80:	e0bf      	b.n	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f90:	f000 80b7 	beq.w	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <HAL_I2C_EV_IRQHandler+0x194>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	0a9b      	lsrs	r3, r3, #10
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <HAL_I2C_EV_IRQHandler+0x194>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d103      	bne.n	8004fc0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fb5d 	bl	8005678 <I2C_MasterReceive_RXNE>
 8004fbe:	e011      	b.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	089b      	lsrs	r3, r3, #2
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 809a 	beq.w	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	0a5b      	lsrs	r3, r3, #9
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8093 	beq.w	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fc06 	bl	80057ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fe2:	e08e      	b.n	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004fe4:	e08d      	b.n	8005102 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d004      	beq.n	8004ff8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	e007      	b.n	8005008 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d012      	beq.n	800503a <HAL_I2C_EV_IRQHandler+0x20e>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	0a5b      	lsrs	r3, r3, #9
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00c      	beq.n	800503a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005030:	69b9      	ldr	r1, [r7, #24]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 ffc4 	bl	8005fc0 <I2C_Slave_ADDR>
 8005038:	e066      	b.n	8005108 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_I2C_EV_IRQHandler+0x22e>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	0a5b      	lsrs	r3, r3, #9
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fffe 	bl	8006054 <I2C_Slave_STOPF>
 8005058:	e056      	b.n	8005108 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800505a:	7bbb      	ldrb	r3, [r7, #14]
 800505c:	2b21      	cmp	r3, #33	; 0x21
 800505e:	d002      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0x23a>
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	2b29      	cmp	r3, #41	; 0x29
 8005064:	d125      	bne.n	80050b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	09db      	lsrs	r3, r3, #7
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00f      	beq.n	8005092 <HAL_I2C_EV_IRQHandler+0x266>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	0a9b      	lsrs	r3, r3, #10
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <HAL_I2C_EV_IRQHandler+0x266>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 feda 	bl	8005e44 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005090:	e039      	b.n	8005106 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	089b      	lsrs	r3, r3, #2
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d033      	beq.n	8005106 <HAL_I2C_EV_IRQHandler+0x2da>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	0a5b      	lsrs	r3, r3, #9
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02d      	beq.n	8005106 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 ff07 	bl	8005ebe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050b0:	e029      	b.n	8005106 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	099b      	lsrs	r3, r3, #6
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00f      	beq.n	80050de <HAL_I2C_EV_IRQHandler+0x2b2>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	0a9b      	lsrs	r3, r3, #10
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_I2C_EV_IRQHandler+0x2b2>
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 ff12 	bl	8005f00 <I2C_SlaveReceive_RXNE>
 80050dc:	e014      	b.n	8005108 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	089b      	lsrs	r3, r3, #2
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <HAL_I2C_EV_IRQHandler+0x2dc>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	0a5b      	lsrs	r3, r3, #9
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 ff40 	bl	8005f7c <I2C_SlaveReceive_BTF>
 80050fc:	e004      	b.n	8005108 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80050fe:	bf00      	nop
 8005100:	e002      	b.n	8005108 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005106:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08a      	sub	sp, #40	; 0x28
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005126:	2300      	movs	r3, #0
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005130:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00e      	beq.n	800515c <HAL_I2C_ER_IRQHandler+0x4e>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d008      	beq.n	800515c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800515a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	0a5b      	lsrs	r3, r3, #9
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00e      	beq.n	8005186 <HAL_I2C_ER_IRQHandler+0x78>
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	f043 0302 	orr.w	r3, r3, #2
 800517a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005184:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	0a9b      	lsrs	r3, r3, #10
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d03f      	beq.n	8005212 <HAL_I2C_ER_IRQHandler+0x104>
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d039      	beq.n	8005212 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800519e:	7efb      	ldrb	r3, [r7, #27]
 80051a0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80051b8:	7ebb      	ldrb	r3, [r7, #26]
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d112      	bne.n	80051e4 <HAL_I2C_ER_IRQHandler+0xd6>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <HAL_I2C_ER_IRQHandler+0xd6>
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b21      	cmp	r3, #33	; 0x21
 80051c8:	d008      	beq.n	80051dc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80051ca:	7cfb      	ldrb	r3, [r7, #19]
 80051cc:	2b29      	cmp	r3, #41	; 0x29
 80051ce:	d005      	beq.n	80051dc <HAL_I2C_ER_IRQHandler+0xce>
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	2b28      	cmp	r3, #40	; 0x28
 80051d4:	d106      	bne.n	80051e4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b21      	cmp	r3, #33	; 0x21
 80051da:	d103      	bne.n	80051e4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 f869 	bl	80062b4 <I2C_Slave_AF>
 80051e2:	e016      	b.n	8005212 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051ec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	f043 0304 	orr.w	r3, r3, #4
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051f6:	7efb      	ldrb	r3, [r7, #27]
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d002      	beq.n	8005202 <HAL_I2C_ER_IRQHandler+0xf4>
 80051fc:	7efb      	ldrb	r3, [r7, #27]
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d107      	bne.n	8005212 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005210:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	0adb      	lsrs	r3, r3, #11
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00e      	beq.n	800523c <HAL_I2C_ER_IRQHandler+0x12e>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d008      	beq.n	800523c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	f043 0308 	orr.w	r3, r3, #8
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800523a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f001 f8a0 	bl	8006394 <I2C_ITError>
  }
}
 8005254:	bf00      	nop
 8005256:	3728      	adds	r7, #40	; 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
 80052b8:	4613      	mov	r3, r2
 80052ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005342:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d150      	bne.n	80053f4 <I2C_MasterTransmit_TXE+0xc8>
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b21      	cmp	r3, #33	; 0x21
 8005356:	d14d      	bne.n	80053f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d01d      	beq.n	800539a <I2C_MasterTransmit_TXE+0x6e>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b20      	cmp	r3, #32
 8005362:	d01a      	beq.n	800539a <I2C_MasterTransmit_TXE+0x6e>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800536a:	d016      	beq.n	800539a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800537a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2211      	movs	r2, #17
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ff62 	bl	800525c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005398:	e060      	b.n	800545c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d107      	bne.n	80053e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff ff7d 	bl	80052dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053e2:	e03b      	b.n	800545c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ff35 	bl	800525c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053f2:	e033      	b.n	800545c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b21      	cmp	r3, #33	; 0x21
 80053f8:	d005      	beq.n	8005406 <I2C_MasterTransmit_TXE+0xda>
 80053fa:	7bbb      	ldrb	r3, [r7, #14]
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d12d      	bne.n	800545c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b22      	cmp	r3, #34	; 0x22
 8005404:	d12a      	bne.n	800545c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d108      	bne.n	8005422 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005420:	e01c      	b.n	800545c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d103      	bne.n	8005436 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f88e 	bl	8005550 <I2C_MemoryTransmit_TXE_BTF>
}
 8005434:	e012      	b.n	800545c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	781a      	ldrb	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800545a:	e7ff      	b.n	800545c <I2C_MasterTransmit_TXE+0x130>
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b21      	cmp	r3, #33	; 0x21
 800547c:	d164      	bne.n	8005548 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d012      	beq.n	80054ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	781a      	ldrb	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80054ac:	e04c      	b.n	8005548 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d01d      	beq.n	80054f0 <I2C_MasterTransmit_BTF+0x8c>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d01a      	beq.n	80054f0 <I2C_MasterTransmit_BTF+0x8c>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054c0:	d016      	beq.n	80054f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2211      	movs	r2, #17
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff feb7 	bl	800525c <HAL_I2C_MasterTxCpltCallback>
}
 80054ee:	e02b      	b.n	8005548 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d107      	bne.n	800553a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fed2 	bl	80052dc <HAL_I2C_MemTxCpltCallback>
}
 8005538:	e006      	b.n	8005548 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fe8a 	bl	800525c <HAL_I2C_MasterTxCpltCallback>
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005564:	2b00      	cmp	r3, #0
 8005566:	d11d      	bne.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10b      	bne.n	8005588 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005574:	b2da      	uxtb	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005586:	e073      	b.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558c:	b29b      	uxth	r3, r3
 800558e:	121b      	asrs	r3, r3, #8
 8005590:	b2da      	uxtb	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055a2:	e065      	b.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d10b      	bne.n	80055c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055c2:	e055      	b.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d151      	bne.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b22      	cmp	r3, #34	; 0x22
 80055d0:	d10d      	bne.n	80055ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055ec:	e040      	b.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b21      	cmp	r3, #33	; 0x21
 80055fc:	d112      	bne.n	8005624 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005622:	e025      	b.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d120      	bne.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b21      	cmp	r3, #33	; 0x21
 8005632:	d11d      	bne.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005642:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005652:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fe36 	bl	80052dc <HAL_I2C_MemTxCpltCallback>
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b22      	cmp	r3, #34	; 0x22
 800568a:	f040 80ac 	bne.w	80057e6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d921      	bls.n	80056e0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	f040 808c 	bne.w	80057e6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056dc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80056de:	e082      	b.n	80057e6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d075      	beq.n	80057d4 <I2C_MasterReceive_RXNE+0x15c>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d002      	beq.n	80056f4 <I2C_MasterReceive_RXNE+0x7c>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d16f      	bne.n	80057d4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 f827 	bl	8006748 <I2C_WaitOnSTOPRequestThroughIT>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d142      	bne.n	8005786 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800571e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d10a      	bne.n	8005770 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff fdc1 	bl	80052f0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800576e:	e03a      	b.n	80057e6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2212      	movs	r2, #18
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fd76 	bl	8005270 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005784:	e02f      	b.n	80057e6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005794:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fd99 	bl	8005304 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057d2:	e008      	b.n	80057e6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e2:	605a      	str	r2, [r3, #4]
}
 80057e4:	e7ff      	b.n	80057e6 <I2C_MasterReceive_RXNE+0x16e>
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b04      	cmp	r3, #4
 8005804:	d11b      	bne.n	800583e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005814:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800583c:	e0bd      	b.n	80059ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b03      	cmp	r3, #3
 8005846:	d129      	bne.n	800589c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005856:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b04      	cmp	r3, #4
 800585c:	d00a      	beq.n	8005874 <I2C_MasterReceive_BTF+0x86>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d007      	beq.n	8005874 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800589a:	e08e      	b.n	80059ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d176      	bne.n	8005994 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d002      	beq.n	80058b2 <I2C_MasterReceive_BTF+0xc4>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d108      	bne.n	80058c4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e019      	b.n	80058f8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d002      	beq.n	80058d0 <I2C_MasterReceive_BTF+0xe2>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d108      	bne.n	80058e2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e00a      	b.n	80058f8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d007      	beq.n	80058f8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005952:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d10a      	bne.n	800597e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fcba 	bl	80052f0 <HAL_I2C_MemRxCpltCallback>
}
 800597c:	e01d      	b.n	80059ba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2212      	movs	r2, #18
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff fc6f 	bl	8005270 <HAL_I2C_MasterRxCpltCallback>
}
 8005992:	e012      	b.n	80059ba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d117      	bne.n	8005a06 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80059f0:	e067      	b.n	8005ac2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	611a      	str	r2, [r3, #16]
}
 8005a04:	e05d      	b.n	8005ac2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a0e:	d133      	bne.n	8005a78 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b21      	cmp	r3, #33	; 0x21
 8005a1a:	d109      	bne.n	8005a30 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a2c:	611a      	str	r2, [r3, #16]
 8005a2e:	e008      	b.n	8005a42 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <I2C_Master_SB+0x92>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d032      	beq.n	8005ac2 <I2C_Master_SB+0x100>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02d      	beq.n	8005ac2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a74:	605a      	str	r2, [r3, #4]
}
 8005a76:	e024      	b.n	8005ac2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10e      	bne.n	8005a9e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	11db      	asrs	r3, r3, #7
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f003 0306 	and.w	r3, r3, #6
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f063 030f 	orn	r3, r3, #15
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]
}
 8005a9c:	e011      	b.n	8005ac2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d10d      	bne.n	8005ac2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	11db      	asrs	r3, r3, #7
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f003 0306 	and.w	r3, r3, #6
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f063 030e 	orn	r3, r3, #14
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	611a      	str	r2, [r3, #16]
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <I2C_Master_ADD10+0x26>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d108      	bne.n	8005b06 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00c      	beq.n	8005b16 <I2C_Master_ADD10+0x48>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b14:	605a      	str	r2, [r3, #4]
  }
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b091      	sub	sp, #68	; 0x44
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b22      	cmp	r3, #34	; 0x22
 8005b4a:	f040 8169 	bne.w	8005e20 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <I2C_Master_ADDR+0x54>
 8005b56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d10b      	bne.n	8005b76 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	633b      	str	r3, [r7, #48]	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	e160      	b.n	8005e38 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11d      	bne.n	8005bba <I2C_Master_ADDR+0x98>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b86:	d118      	bne.n	8005bba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	651a      	str	r2, [r3, #80]	; 0x50
 8005bb8:	e13e      	b.n	8005e38 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d113      	bne.n	8005bec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e115      	b.n	8005e18 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	f040 808a 	bne.w	8005d0c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bfe:	d137      	bne.n	8005c70 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1e:	d113      	bne.n	8005c48 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c30:	2300      	movs	r3, #0
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	e0e7      	b.n	8005e18 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c48:	2300      	movs	r3, #0
 8005c4a:	623b      	str	r3, [r7, #32]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	623b      	str	r3, [r7, #32]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	623b      	str	r3, [r7, #32]
 8005c5c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e0d3      	b.n	8005e18 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d02e      	beq.n	8005cd4 <I2C_Master_ADDR+0x1b2>
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d02b      	beq.n	8005cd4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	2b12      	cmp	r3, #18
 8005c80:	d102      	bne.n	8005c88 <I2C_Master_ADDR+0x166>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d125      	bne.n	8005cd4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d00e      	beq.n	8005cac <I2C_Master_ADDR+0x18a>
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d00b      	beq.n	8005cac <I2C_Master_ADDR+0x18a>
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d008      	beq.n	8005cac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e007      	b.n	8005cbc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	e0a1      	b.n	8005e18 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e085      	b.n	8005e18 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d14d      	bne.n	8005db2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d016      	beq.n	8005d4a <I2C_Master_ADDR+0x228>
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d013      	beq.n	8005d4a <I2C_Master_ADDR+0x228>
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d010      	beq.n	8005d4a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d36:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e007      	b.n	8005d5a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d58:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d68:	d117      	bne.n	8005d9a <I2C_Master_ADDR+0x278>
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d70:	d00b      	beq.n	8005d8a <I2C_Master_ADDR+0x268>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d008      	beq.n	8005d8a <I2C_Master_ADDR+0x268>
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d005      	beq.n	8005d8a <I2C_Master_ADDR+0x268>
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	2b10      	cmp	r3, #16
 8005d82:	d002      	beq.n	8005d8a <I2C_Master_ADDR+0x268>
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d107      	bne.n	8005d9a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	e032      	b.n	8005e18 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dc0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd0:	d117      	bne.n	8005e02 <I2C_Master_ADDR+0x2e0>
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dd8:	d00b      	beq.n	8005df2 <I2C_Master_ADDR+0x2d0>
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d008      	beq.n	8005df2 <I2C_Master_ADDR+0x2d0>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d005      	beq.n	8005df2 <I2C_Master_ADDR+0x2d0>
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d002      	beq.n	8005df2 <I2C_Master_ADDR+0x2d0>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d107      	bne.n	8005e02 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e02:	2300      	movs	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005e1e:	e00b      	b.n	8005e38 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
}
 8005e36:	e7ff      	b.n	8005e38 <I2C_Master_ADDR+0x316>
 8005e38:	bf00      	nop
 8005e3a:	3744      	adds	r7, #68	; 0x44
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d02b      	beq.n	8005eb6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	781a      	ldrb	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d114      	bne.n	8005eb6 <I2C_SlaveTransmit_TXE+0x72>
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b29      	cmp	r3, #41	; 0x29
 8005e90:	d111      	bne.n	8005eb6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2221      	movs	r2, #33	; 0x21
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2228      	movs	r2, #40	; 0x28
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff f9e7 	bl	8005284 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d011      	beq.n	8005ef4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d02c      	beq.n	8005f74 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d114      	bne.n	8005f74 <I2C_SlaveReceive_RXNE+0x74>
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4e:	d111      	bne.n	8005f74 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2222      	movs	r2, #34	; 0x22
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2228      	movs	r2, #40	; 0x28
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff f992 	bl	8005298 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d012      	beq.n	8005fb4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fda:	2b28      	cmp	r3, #40	; 0x28
 8005fdc:	d127      	bne.n	800602e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	089b      	lsrs	r3, r3, #2
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	09db      	lsrs	r3, r3, #7
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	81bb      	strh	r3, [r7, #12]
 8006010:	e002      	b.n	8006018 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006020:	89ba      	ldrh	r2, [r7, #12]
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff f940 	bl	80052ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800602c:	e00e      	b.n	800604c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006062:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006072:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006074:	2300      	movs	r3, #0
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	60bb      	str	r3, [r7, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b0:	d172      	bne.n	8006198 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b22      	cmp	r3, #34	; 0x22
 80060b6:	d002      	beq.n	80060be <I2C_Slave_STOPF+0x6a>
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b2a      	cmp	r3, #42	; 0x2a
 80060bc:	d135      	bne.n	800612a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f043 0204 	orr.w	r2, r3, #4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fade 	bl	80046b8 <HAL_DMA_GetState>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d049      	beq.n	8006196 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	4a69      	ldr	r2, [pc, #420]	; (80062ac <I2C_Slave_STOPF+0x258>)
 8006108:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe f926 	bl	8004360 <HAL_DMA_Abort_IT>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d03d      	beq.n	8006196 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006124:	4610      	mov	r0, r2
 8006126:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006128:	e035      	b.n	8006196 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f043 0204 	orr.w	r2, r3, #4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800615c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe faa8 	bl	80046b8 <HAL_DMA_GetState>
 8006168:	4603      	mov	r3, r0
 800616a:	2b01      	cmp	r3, #1
 800616c:	d014      	beq.n	8006198 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	4a4e      	ldr	r2, [pc, #312]	; (80062ac <I2C_Slave_STOPF+0x258>)
 8006174:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe f8f0 	bl	8004360 <HAL_DMA_Abort_IT>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006190:	4610      	mov	r0, r2
 8006192:	4798      	blx	r3
 8006194:	e000      	b.n	8006198 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006196:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d03e      	beq.n	8006220 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d112      	bne.n	80061d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d112      	bne.n	800620a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	f043 0204 	orr.w	r2, r3, #4
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f8b3 	bl	8006394 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800622e:	e039      	b.n	80062a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b2a      	cmp	r3, #42	; 0x2a
 8006234:	d109      	bne.n	800624a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2228      	movs	r2, #40	; 0x28
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff f827 	bl	8005298 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b28      	cmp	r3, #40	; 0x28
 8006254:	d111      	bne.n	800627a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <I2C_Slave_STOPF+0x25c>)
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff f828 	bl	80052c8 <HAL_I2C_ListenCpltCallback>
}
 8006278:	e014      	b.n	80062a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	2b22      	cmp	r3, #34	; 0x22
 8006280:	d002      	beq.n	8006288 <I2C_Slave_STOPF+0x234>
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b22      	cmp	r3, #34	; 0x22
 8006286:	d10d      	bne.n	80062a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fe fffa 	bl	8005298 <HAL_I2C_SlaveRxCpltCallback>
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	080065f9 	.word	0x080065f9
 80062b0:	ffff0000 	.word	0xffff0000

080062b4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d002      	beq.n	80062d6 <I2C_Slave_AF+0x22>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d129      	bne.n	800632a <I2C_Slave_AF+0x76>
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b28      	cmp	r3, #40	; 0x28
 80062da:	d126      	bne.n	800632a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a2c      	ldr	r2, [pc, #176]	; (8006390 <I2C_Slave_AF+0xdc>)
 80062e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062f0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062fa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fe ffd0 	bl	80052c8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006328:	e02e      	b.n	8006388 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b21      	cmp	r3, #33	; 0x21
 800632e:	d126      	bne.n	800637e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a17      	ldr	r2, [pc, #92]	; (8006390 <I2C_Slave_AF+0xdc>)
 8006334:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2221      	movs	r2, #33	; 0x21
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800635a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006364:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006374:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fe ff84 	bl	8005284 <HAL_I2C_SlaveTxCpltCallback>
}
 800637c:	e004      	b.n	8006388 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006386:	615a      	str	r2, [r3, #20]
}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	ffff0000 	.word	0xffff0000

08006394 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d002      	beq.n	80063b8 <I2C_ITError+0x24>
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d10a      	bne.n	80063ce <I2C_ITError+0x3a>
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b22      	cmp	r3, #34	; 0x22
 80063bc:	d107      	bne.n	80063ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063d4:	2b28      	cmp	r3, #40	; 0x28
 80063d6:	d107      	bne.n	80063e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2228      	movs	r2, #40	; 0x28
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063e6:	e015      	b.n	8006414 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f6:	d00a      	beq.n	800640e <I2C_ITError+0x7a>
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2b60      	cmp	r3, #96	; 0x60
 80063fc:	d007      	beq.n	800640e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006422:	d162      	bne.n	80064ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006432:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b01      	cmp	r3, #1
 8006440:	d020      	beq.n	8006484 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	4a6a      	ldr	r2, [pc, #424]	; (80065f0 <I2C_ITError+0x25c>)
 8006448:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644e:	4618      	mov	r0, r3
 8006450:	f7fd ff86 	bl	8004360 <HAL_DMA_Abort_IT>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8089 	beq.w	800656e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800647e:	4610      	mov	r0, r2
 8006480:	4798      	blx	r3
 8006482:	e074      	b.n	800656e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	4a59      	ldr	r2, [pc, #356]	; (80065f0 <I2C_ITError+0x25c>)
 800648a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	4618      	mov	r0, r3
 8006492:	f7fd ff65 	bl	8004360 <HAL_DMA_Abort_IT>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d068      	beq.n	800656e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d10b      	bne.n	80064c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064e4:	4610      	mov	r0, r2
 80064e6:	4798      	blx	r3
 80064e8:	e041      	b.n	800656e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b60      	cmp	r3, #96	; 0x60
 80064f4:	d125      	bne.n	8006542 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d10b      	bne.n	800652a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fe feec 	bl	8005318 <HAL_I2C_AbortCpltCallback>
 8006540:	e015      	b.n	800656e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d10b      	bne.n	8006568 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fe fecb 	bl	8005304 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10e      	bne.n	800659c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d113      	bne.n	80065e8 <I2C_ITError+0x254>
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	2b28      	cmp	r3, #40	; 0x28
 80065c4:	d110      	bne.n	80065e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <I2C_ITError+0x260>)
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fe fe70 	bl	80052c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	080065f9 	.word	0x080065f9
 80065f4:	ffff0000 	.word	0xffff0000

080065f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006610:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006612:	4b4b      	ldr	r3, [pc, #300]	; (8006740 <I2C_DMAAbort+0x148>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	08db      	lsrs	r3, r3, #3
 8006618:	4a4a      	ldr	r2, [pc, #296]	; (8006744 <I2C_DMAAbort+0x14c>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	0a1a      	lsrs	r2, r3, #8
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	00da      	lsls	r2, r3, #3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800663e:	e00a      	b.n	8006656 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3b01      	subs	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006654:	d0ea      	beq.n	800662c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006662:	2200      	movs	r2, #0
 8006664:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	2200      	movs	r2, #0
 8006674:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006684:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2200      	movs	r2, #0
 800668a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	2200      	movs	r2, #0
 800669a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	2200      	movs	r2, #0
 80066aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b60      	cmp	r3, #96	; 0x60
 80066c6:	d10e      	bne.n	80066e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2200      	movs	r2, #0
 80066dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066de:	6978      	ldr	r0, [r7, #20]
 80066e0:	f7fe fe1a 	bl	8005318 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066e4:	e027      	b.n	8006736 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066e6:	7cfb      	ldrb	r3, [r7, #19]
 80066e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066ec:	2b28      	cmp	r3, #40	; 0x28
 80066ee:	d117      	bne.n	8006720 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800670e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2228      	movs	r2, #40	; 0x28
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800671e:	e007      	b.n	8006730 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006730:	6978      	ldr	r0, [r7, #20]
 8006732:	f7fe fde7 	bl	8005304 <HAL_I2C_ErrorCallback>
}
 8006736:	bf00      	nop
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	200000b0 	.word	0x200000b0
 8006744:	14f8b589 	.word	0x14f8b589

08006748 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006754:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	08db      	lsrs	r3, r3, #3
 800675a:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	0a1a      	lsrs	r2, r3, #8
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b01      	subs	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d107      	bne.n	8006786 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e008      	b.n	8006798 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006794:	d0e9      	beq.n	800676a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	200000b0 	.word	0x200000b0
 80067a8:	14f8b589 	.word	0x14f8b589

080067ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80067bc:	d103      	bne.n	80067c6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80067c4:	e007      	b.n	80067d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80067ce:	d102      	bne.n	80067d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2208      	movs	r2, #8
 80067d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e267      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d075      	beq.n	80068ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006802:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
 800680a:	2b04      	cmp	r3, #4
 800680c:	d00c      	beq.n	8006828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b85      	ldr	r3, [pc, #532]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006816:	2b08      	cmp	r3, #8
 8006818:	d112      	bne.n	8006840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800681a:	4b82      	ldr	r3, [pc, #520]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006826:	d10b      	bne.n	8006840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	4b7e      	ldr	r3, [pc, #504]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05b      	beq.n	80068ec <HAL_RCC_OscConfig+0x108>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d157      	bne.n	80068ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e242      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006848:	d106      	bne.n	8006858 <HAL_RCC_OscConfig+0x74>
 800684a:	4b76      	ldr	r3, [pc, #472]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a75      	ldr	r2, [pc, #468]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e01d      	b.n	8006894 <HAL_RCC_OscConfig+0xb0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006860:	d10c      	bne.n	800687c <HAL_RCC_OscConfig+0x98>
 8006862:	4b70      	ldr	r3, [pc, #448]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a6f      	ldr	r2, [pc, #444]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b6d      	ldr	r3, [pc, #436]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a6c      	ldr	r2, [pc, #432]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e00b      	b.n	8006894 <HAL_RCC_OscConfig+0xb0>
 800687c:	4b69      	ldr	r3, [pc, #420]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a68      	ldr	r2, [pc, #416]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b66      	ldr	r3, [pc, #408]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a65      	ldr	r2, [pc, #404]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800688e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d013      	beq.n	80068c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689c:	f7fd fb70 	bl	8003f80 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068a4:	f7fd fb6c 	bl	8003f80 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	; 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e207      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b6:	4b5b      	ldr	r3, [pc, #364]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0xc0>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c4:	f7fd fb5c 	bl	8003f80 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068cc:	f7fd fb58 	bl	8003f80 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	; 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e1f3      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068de:	4b51      	ldr	r3, [pc, #324]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0xe8>
 80068ea:	e000      	b.n	80068ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d063      	beq.n	80069c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068fa:	4b4a      	ldr	r3, [pc, #296]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006906:	4b47      	ldr	r3, [pc, #284]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800690e:	2b08      	cmp	r3, #8
 8006910:	d11c      	bne.n	800694c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006912:	4b44      	ldr	r3, [pc, #272]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d116      	bne.n	800694c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691e:	4b41      	ldr	r3, [pc, #260]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_RCC_OscConfig+0x152>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d001      	beq.n	8006936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e1c7      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006936:	4b3b      	ldr	r3, [pc, #236]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4937      	ldr	r1, [pc, #220]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006946:	4313      	orrs	r3, r2
 8006948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694a:	e03a      	b.n	80069c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d020      	beq.n	8006996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006954:	4b34      	ldr	r3, [pc, #208]	; (8006a28 <HAL_RCC_OscConfig+0x244>)
 8006956:	2201      	movs	r2, #1
 8006958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695a:	f7fd fb11 	bl	8003f80 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006962:	f7fd fb0d 	bl	8003f80 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e1a8      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006974:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0f0      	beq.n	8006962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006980:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4925      	ldr	r1, [pc, #148]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006990:	4313      	orrs	r3, r2
 8006992:	600b      	str	r3, [r1, #0]
 8006994:	e015      	b.n	80069c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006996:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <HAL_RCC_OscConfig+0x244>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fd faf0 	bl	8003f80 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a4:	f7fd faec 	bl	8003f80 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e187      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b6:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d036      	beq.n	8006a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d6:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <HAL_RCC_OscConfig+0x248>)
 80069d8:	2201      	movs	r2, #1
 80069da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069dc:	f7fd fad0 	bl	8003f80 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069e4:	f7fd facc 	bl	8003f80 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e167      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80069f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x200>
 8006a02:	e01b      	b.n	8006a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a04:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <HAL_RCC_OscConfig+0x248>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a0a:	f7fd fab9 	bl	8003f80 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a10:	e00e      	b.n	8006a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a12:	f7fd fab5 	bl	8003f80 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d907      	bls.n	8006a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e150      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
 8006a24:	40023800 	.word	0x40023800
 8006a28:	42470000 	.word	0x42470000
 8006a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a30:	4b88      	ldr	r3, [pc, #544]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ea      	bne.n	8006a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8097 	beq.w	8006b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4e:	4b81      	ldr	r3, [pc, #516]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	4b7d      	ldr	r3, [pc, #500]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	4a7c      	ldr	r2, [pc, #496]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a68:	6413      	str	r3, [r2, #64]	; 0x40
 8006a6a:	4b7a      	ldr	r3, [pc, #488]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a72:	60bb      	str	r3, [r7, #8]
 8006a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7a:	4b77      	ldr	r3, [pc, #476]	; (8006c58 <HAL_RCC_OscConfig+0x474>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d118      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a86:	4b74      	ldr	r3, [pc, #464]	; (8006c58 <HAL_RCC_OscConfig+0x474>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a73      	ldr	r2, [pc, #460]	; (8006c58 <HAL_RCC_OscConfig+0x474>)
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a92:	f7fd fa75 	bl	8003f80 <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a98:	e008      	b.n	8006aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9a:	f7fd fa71 	bl	8003f80 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e10c      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aac:	4b6a      	ldr	r3, [pc, #424]	; (8006c58 <HAL_RCC_OscConfig+0x474>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0f0      	beq.n	8006a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_OscConfig+0x2ea>
 8006ac0:	4b64      	ldr	r3, [pc, #400]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac4:	4a63      	ldr	r2, [pc, #396]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	6713      	str	r3, [r2, #112]	; 0x70
 8006acc:	e01c      	b.n	8006b08 <HAL_RCC_OscConfig+0x324>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x30c>
 8006ad6:	4b5f      	ldr	r3, [pc, #380]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	4a5e      	ldr	r2, [pc, #376]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006adc:	f043 0304 	orr.w	r3, r3, #4
 8006ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae2:	4b5c      	ldr	r3, [pc, #368]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	4a5b      	ldr	r2, [pc, #364]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	6713      	str	r3, [r2, #112]	; 0x70
 8006aee:	e00b      	b.n	8006b08 <HAL_RCC_OscConfig+0x324>
 8006af0:	4b58      	ldr	r3, [pc, #352]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	4a57      	ldr	r2, [pc, #348]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	6713      	str	r3, [r2, #112]	; 0x70
 8006afc:	4b55      	ldr	r3, [pc, #340]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	4a54      	ldr	r2, [pc, #336]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b02:	f023 0304 	bic.w	r3, r3, #4
 8006b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d015      	beq.n	8006b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b10:	f7fd fa36 	bl	8003f80 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b16:	e00a      	b.n	8006b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b18:	f7fd fa32 	bl	8003f80 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e0cb      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2e:	4b49      	ldr	r3, [pc, #292]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0ee      	beq.n	8006b18 <HAL_RCC_OscConfig+0x334>
 8006b3a:	e014      	b.n	8006b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b3c:	f7fd fa20 	bl	8003f80 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b42:	e00a      	b.n	8006b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b44:	f7fd fa1c 	bl	8003f80 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e0b5      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b5a:	4b3e      	ldr	r3, [pc, #248]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1ee      	bne.n	8006b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b6c:	4b39      	ldr	r3, [pc, #228]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	4a38      	ldr	r2, [pc, #224]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80a1 	beq.w	8006cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b82:	4b34      	ldr	r3, [pc, #208]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 030c 	and.w	r3, r3, #12
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d05c      	beq.n	8006c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d141      	bne.n	8006c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b96:	4b31      	ldr	r3, [pc, #196]	; (8006c5c <HAL_RCC_OscConfig+0x478>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9c:	f7fd f9f0 	bl	8003f80 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba4:	f7fd f9ec 	bl	8003f80 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e087      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb6:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f0      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	019b      	lsls	r3, r3, #6
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	041b      	lsls	r3, r3, #16
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	491b      	ldr	r1, [pc, #108]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bec:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <HAL_RCC_OscConfig+0x478>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf2:	f7fd f9c5 	bl	8003f80 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bfa:	f7fd f9c1 	bl	8003f80 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e05c      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0c:	4b11      	ldr	r3, [pc, #68]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCC_OscConfig+0x416>
 8006c18:	e054      	b.n	8006cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <HAL_RCC_OscConfig+0x478>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c20:	f7fd f9ae 	bl	8003f80 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fd f9aa 	bl	8003f80 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e045      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f0      	bne.n	8006c28 <HAL_RCC_OscConfig+0x444>
 8006c46:	e03d      	b.n	8006cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e038      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
 8006c54:	40023800 	.word	0x40023800
 8006c58:	40007000 	.word	0x40007000
 8006c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c60:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <HAL_RCC_OscConfig+0x4ec>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d028      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d121      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d11a      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c90:	4013      	ands	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d111      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40023800 	.word	0x40023800

08006cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0cc      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce8:	4b68      	ldr	r3, [pc, #416]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d90c      	bls.n	8006d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf6:	4b65      	ldr	r3, [pc, #404]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfe:	4b63      	ldr	r3, [pc, #396]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0b8      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d020      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d28:	4b59      	ldr	r3, [pc, #356]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	4a58      	ldr	r2, [pc, #352]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d40:	4b53      	ldr	r3, [pc, #332]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	4a52      	ldr	r2, [pc, #328]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d4c:	4b50      	ldr	r3, [pc, #320]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	494d      	ldr	r1, [pc, #308]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d044      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d107      	bne.n	8006d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d72:	4b47      	ldr	r3, [pc, #284]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d119      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e07f      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d003      	beq.n	8006d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d107      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d92:	4b3f      	ldr	r3, [pc, #252]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e06f      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006da2:	4b3b      	ldr	r3, [pc, #236]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e067      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006db2:	4b37      	ldr	r3, [pc, #220]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f023 0203 	bic.w	r2, r3, #3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	4934      	ldr	r1, [pc, #208]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dc4:	f7fd f8dc 	bl	8003f80 <HAL_GetTick>
 8006dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dca:	e00a      	b.n	8006de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dcc:	f7fd f8d8 	bl	8003f80 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e04f      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de2:	4b2b      	ldr	r3, [pc, #172]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 020c 	and.w	r2, r3, #12
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d1eb      	bne.n	8006dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006df4:	4b25      	ldr	r3, [pc, #148]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d20c      	bcs.n	8006e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e02:	4b22      	ldr	r3, [pc, #136]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0a:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d001      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e032      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e28:	4b19      	ldr	r3, [pc, #100]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	4916      	ldr	r1, [pc, #88]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e46:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	490e      	ldr	r1, [pc, #56]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e5a:	f000 f821 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	490a      	ldr	r1, [pc, #40]	; (8006e94 <HAL_RCC_ClockConfig+0x1c0>)
 8006e6c:	5ccb      	ldrb	r3, [r1, r3]
 8006e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e72:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <HAL_RCC_ClockConfig+0x1c4>)
 8006e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e76:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <HAL_RCC_ClockConfig+0x1c8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fd f83c 	bl	8003ef8 <HAL_InitTick>

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	40023c00 	.word	0x40023c00
 8006e90:	40023800 	.word	0x40023800
 8006e94:	0800bda0 	.word	0x0800bda0
 8006e98:	200000b0 	.word	0x200000b0
 8006e9c:	200000b4 	.word	0x200000b4

08006ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ea4:	b094      	sub	sp, #80	; 0x50
 8006ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8006eac:	2300      	movs	r3, #0
 8006eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eb8:	4b79      	ldr	r3, [pc, #484]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 030c 	and.w	r3, r3, #12
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	f200 80e1 	bhi.w	800708c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d003      	beq.n	8006eda <HAL_RCC_GetSysClockFreq+0x3a>
 8006ed2:	e0db      	b.n	800708c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ed4:	4b73      	ldr	r3, [pc, #460]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ed6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ed8:	e0db      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eda:	4b73      	ldr	r3, [pc, #460]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ede:	e0d8      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ee0:	4b6f      	ldr	r3, [pc, #444]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ee8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eea:	4b6d      	ldr	r3, [pc, #436]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d063      	beq.n	8006fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ef6:	4b6a      	ldr	r3, [pc, #424]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	099b      	lsrs	r3, r3, #6
 8006efc:	2200      	movs	r2, #0
 8006efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f08:	633b      	str	r3, [r7, #48]	; 0x30
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f12:	4622      	mov	r2, r4
 8006f14:	462b      	mov	r3, r5
 8006f16:	f04f 0000 	mov.w	r0, #0
 8006f1a:	f04f 0100 	mov.w	r1, #0
 8006f1e:	0159      	lsls	r1, r3, #5
 8006f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f24:	0150      	lsls	r0, r2, #5
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	1a51      	subs	r1, r2, r1
 8006f2e:	6139      	str	r1, [r7, #16]
 8006f30:	4629      	mov	r1, r5
 8006f32:	eb63 0301 	sbc.w	r3, r3, r1
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f44:	4659      	mov	r1, fp
 8006f46:	018b      	lsls	r3, r1, #6
 8006f48:	4651      	mov	r1, sl
 8006f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f4e:	4651      	mov	r1, sl
 8006f50:	018a      	lsls	r2, r1, #6
 8006f52:	4651      	mov	r1, sl
 8006f54:	ebb2 0801 	subs.w	r8, r2, r1
 8006f58:	4659      	mov	r1, fp
 8006f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f72:	4690      	mov	r8, r2
 8006f74:	4699      	mov	r9, r3
 8006f76:	4623      	mov	r3, r4
 8006f78:	eb18 0303 	adds.w	r3, r8, r3
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	462b      	mov	r3, r5
 8006f80:	eb49 0303 	adc.w	r3, r9, r3
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f92:	4629      	mov	r1, r5
 8006f94:	024b      	lsls	r3, r1, #9
 8006f96:	4621      	mov	r1, r4
 8006f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	024a      	lsls	r2, r1, #9
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fb0:	f7f9 f912 	bl	80001d8 <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4613      	mov	r3, r2
 8006fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbc:	e058      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fbe:	4b38      	ldr	r3, [pc, #224]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	099b      	lsrs	r3, r3, #6
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	4611      	mov	r1, r2
 8006fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fce:	623b      	str	r3, [r7, #32]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fd8:	4642      	mov	r2, r8
 8006fda:	464b      	mov	r3, r9
 8006fdc:	f04f 0000 	mov.w	r0, #0
 8006fe0:	f04f 0100 	mov.w	r1, #0
 8006fe4:	0159      	lsls	r1, r3, #5
 8006fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fea:	0150      	lsls	r0, r2, #5
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800700c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007010:	ebb2 040a 	subs.w	r4, r2, sl
 8007014:	eb63 050b 	sbc.w	r5, r3, fp
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	00eb      	lsls	r3, r5, #3
 8007022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007026:	00e2      	lsls	r2, r4, #3
 8007028:	4614      	mov	r4, r2
 800702a:	461d      	mov	r5, r3
 800702c:	4643      	mov	r3, r8
 800702e:	18e3      	adds	r3, r4, r3
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	464b      	mov	r3, r9
 8007034:	eb45 0303 	adc.w	r3, r5, r3
 8007038:	607b      	str	r3, [r7, #4]
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007046:	4629      	mov	r1, r5
 8007048:	028b      	lsls	r3, r1, #10
 800704a:	4621      	mov	r1, r4
 800704c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007050:	4621      	mov	r1, r4
 8007052:	028a      	lsls	r2, r1, #10
 8007054:	4610      	mov	r0, r2
 8007056:	4619      	mov	r1, r3
 8007058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705a:	2200      	movs	r2, #0
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	61fa      	str	r2, [r7, #28]
 8007060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007064:	f7f9 f8b8 	bl	80001d8 <__aeabi_uldivmod>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4613      	mov	r3, r2
 800706e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007070:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	3301      	adds	r3, #1
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007084:	fbb2 f3f3 	udiv	r3, r2, r3
 8007088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800708a:	e002      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800708e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007094:	4618      	mov	r0, r3
 8007096:	3750      	adds	r7, #80	; 0x50
 8007098:	46bd      	mov	sp, r7
 800709a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800709e:	bf00      	nop
 80070a0:	40023800 	.word	0x40023800
 80070a4:	00f42400 	.word	0x00f42400
 80070a8:	007a1200 	.word	0x007a1200

080070ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b0:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070b2:	681b      	ldr	r3, [r3, #0]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	200000b0 	.word	0x200000b0

080070c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070c8:	f7ff fff0 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 80070cc:	4602      	mov	r2, r0
 80070ce:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	0a9b      	lsrs	r3, r3, #10
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	4903      	ldr	r1, [pc, #12]	; (80070e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070da:	5ccb      	ldrb	r3, [r1, r3]
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40023800 	.word	0x40023800
 80070e8:	0800bdb0 	.word	0x0800bdb0

080070ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070f0:	f7ff ffdc 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 80070f4:	4602      	mov	r2, r0
 80070f6:	4b05      	ldr	r3, [pc, #20]	; (800710c <HAL_RCC_GetPCLK2Freq+0x20>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	0b5b      	lsrs	r3, r3, #13
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	4903      	ldr	r1, [pc, #12]	; (8007110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007102:	5ccb      	ldrb	r3, [r1, r3]
 8007104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40023800 	.word	0x40023800
 8007110:	0800bdb0 	.word	0x0800bdb0

08007114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e07b      	b.n	800721e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b00      	cmp	r3, #0
 800712c:	d108      	bne.n	8007140 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007136:	d009      	beq.n	800714c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	61da      	str	r2, [r3, #28]
 800713e:	e005      	b.n	800714c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fc fad8 	bl	800371c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007182:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d0:	ea42 0103 	orr.w	r1, r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	f003 0104 	and.w	r1, r3, #4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	f003 0210 	and.w	r2, r3, #16
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800720c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b088      	sub	sp, #32
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_SPI_Transmit+0x22>
 8007244:	2302      	movs	r3, #2
 8007246:	e126      	b.n	8007496 <HAL_SPI_Transmit+0x270>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007250:	f7fc fe96 	bl	8003f80 <HAL_GetTick>
 8007254:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b01      	cmp	r3, #1
 8007264:	d002      	beq.n	800726c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007266:	2302      	movs	r3, #2
 8007268:	77fb      	strb	r3, [r7, #31]
    goto error;
 800726a:	e10b      	b.n	8007484 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <HAL_SPI_Transmit+0x52>
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800727c:	e102      	b.n	8007484 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2203      	movs	r2, #3
 8007282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	88fa      	ldrh	r2, [r7, #6]
 8007296:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c4:	d10f      	bne.n	80072e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d007      	beq.n	8007304 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730c:	d14b      	bne.n	80073a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_SPI_Transmit+0xf6>
 8007316:	8afb      	ldrh	r3, [r7, #22]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d13e      	bne.n	800739a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	881a      	ldrh	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	1c9a      	adds	r2, r3, #2
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007340:	e02b      	b.n	800739a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b02      	cmp	r3, #2
 800734e:	d112      	bne.n	8007376 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	86da      	strh	r2, [r3, #54]	; 0x36
 8007374:	e011      	b.n	800739a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007376:	f7fc fe03 	bl	8003f80 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d803      	bhi.n	800738e <HAL_SPI_Transmit+0x168>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d102      	bne.n	8007394 <HAL_SPI_Transmit+0x16e>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007398:	e074      	b.n	8007484 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1ce      	bne.n	8007342 <HAL_SPI_Transmit+0x11c>
 80073a4:	e04c      	b.n	8007440 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <HAL_SPI_Transmit+0x18e>
 80073ae:	8afb      	ldrh	r3, [r7, #22]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d140      	bne.n	8007436 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	330c      	adds	r3, #12
 80073be:	7812      	ldrb	r2, [r2, #0]
 80073c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073da:	e02c      	b.n	8007436 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d113      	bne.n	8007412 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	330c      	adds	r3, #12
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007410:	e011      	b.n	8007436 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007412:	f7fc fdb5 	bl	8003f80 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d803      	bhi.n	800742a <HAL_SPI_Transmit+0x204>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007428:	d102      	bne.n	8007430 <HAL_SPI_Transmit+0x20a>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007434:	e026      	b.n	8007484 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1cd      	bne.n	80073dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 fce9 	bl	8007e1c <SPI_EndRxTxTransaction>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800745e:	2300      	movs	r3, #0
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	613b      	str	r3, [r7, #16]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	77fb      	strb	r3, [r7, #31]
 8007480:	e000      	b.n	8007484 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007494:	7ffb      	ldrb	r3, [r7, #31]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b088      	sub	sp, #32
 80074a2:	af02      	add	r7, sp, #8
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	603b      	str	r3, [r7, #0]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ba:	d112      	bne.n	80074e2 <HAL_SPI_Receive+0x44>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10e      	bne.n	80074e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2204      	movs	r2, #4
 80074c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	4613      	mov	r3, r2
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f8f1 	bl	80076c0 <HAL_SPI_TransmitReceive>
 80074de:	4603      	mov	r3, r0
 80074e0:	e0ea      	b.n	80076b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_SPI_Receive+0x52>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e0e3      	b.n	80076b8 <HAL_SPI_Receive+0x21a>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074f8:	f7fc fd42 	bl	8003f80 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	d002      	beq.n	8007510 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800750a:	2302      	movs	r3, #2
 800750c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800750e:	e0ca      	b.n	80076a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <HAL_SPI_Receive+0x7e>
 8007516:	88fb      	ldrh	r3, [r7, #6]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007520:	e0c1      	b.n	80076a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2204      	movs	r2, #4
 8007526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	88fa      	ldrh	r2, [r7, #6]
 800753a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	88fa      	ldrh	r2, [r7, #6]
 8007540:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007568:	d10f      	bne.n	800758a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007578:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007588:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	d007      	beq.n	80075a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d162      	bne.n	8007676 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075b0:	e02e      	b.n	8007610 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d115      	bne.n	80075ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f103 020c 	add.w	r2, r3, #12
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075ea:	e011      	b.n	8007610 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ec:	f7fc fcc8 	bl	8003f80 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d803      	bhi.n	8007604 <HAL_SPI_Receive+0x166>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007602:	d102      	bne.n	800760a <HAL_SPI_Receive+0x16c>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800760e:	e04a      	b.n	80076a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1cb      	bne.n	80075b2 <HAL_SPI_Receive+0x114>
 800761a:	e031      	b.n	8007680 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b01      	cmp	r3, #1
 8007628:	d113      	bne.n	8007652 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	b292      	uxth	r2, r2
 8007636:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	1c9a      	adds	r2, r3, #2
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007650:	e011      	b.n	8007676 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007652:	f7fc fc95 	bl	8003f80 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d803      	bhi.n	800766a <HAL_SPI_Receive+0x1cc>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007668:	d102      	bne.n	8007670 <HAL_SPI_Receive+0x1d2>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007674:	e017      	b.n	80076a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1cd      	bne.n	800761c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fb63 	bl	8007d50 <SPI_EndRxTransaction>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	75fb      	strb	r3, [r7, #23]
 80076a2:	e000      	b.n	80076a6 <HAL_SPI_Receive+0x208>
  }

error :
 80076a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08c      	sub	sp, #48	; 0x30
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076ce:	2301      	movs	r3, #1
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x26>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e18a      	b.n	80079fc <HAL_SPI_TransmitReceive+0x33c>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ee:	f7fc fc47 	bl	8003f80 <HAL_GetTick>
 80076f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007704:	887b      	ldrh	r3, [r7, #2]
 8007706:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800770c:	2b01      	cmp	r3, #1
 800770e:	d00f      	beq.n	8007730 <HAL_SPI_TransmitReceive+0x70>
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007716:	d107      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x68>
 8007720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007724:	2b04      	cmp	r3, #4
 8007726:	d003      	beq.n	8007730 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007728:	2302      	movs	r3, #2
 800772a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800772e:	e15b      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d005      	beq.n	8007742 <HAL_SPI_TransmitReceive+0x82>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_SPI_TransmitReceive+0x82>
 800773c:	887b      	ldrh	r3, [r7, #2]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d103      	bne.n	800774a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007748:	e14e      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b04      	cmp	r3, #4
 8007754:	d003      	beq.n	800775e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2205      	movs	r2, #5
 800775a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	887a      	ldrh	r2, [r7, #2]
 800776e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	887a      	ldrh	r2, [r7, #2]
 8007774:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	887a      	ldrh	r2, [r7, #2]
 8007780:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	887a      	ldrh	r2, [r7, #2]
 8007786:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b40      	cmp	r3, #64	; 0x40
 80077a0:	d007      	beq.n	80077b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ba:	d178      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_SPI_TransmitReceive+0x10a>
 80077c4:	8b7b      	ldrh	r3, [r7, #26]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d166      	bne.n	8007898 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	881a      	ldrh	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	1c9a      	adds	r2, r3, #2
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ee:	e053      	b.n	8007898 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d11b      	bne.n	8007836 <HAL_SPI_TransmitReceive+0x176>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d016      	beq.n	8007836 <HAL_SPI_TransmitReceive+0x176>
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	2b01      	cmp	r3, #1
 800780c:	d113      	bne.n	8007836 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	881a      	ldrh	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	1c9a      	adds	r2, r3, #2
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d119      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x1b8>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d014      	beq.n	8007878 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	b292      	uxth	r2, r2
 800785a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	1c9a      	adds	r2, r3, #2
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007874:	2301      	movs	r3, #1
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007878:	f7fc fb82 	bl	8003f80 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007884:	429a      	cmp	r2, r3
 8007886:	d807      	bhi.n	8007898 <HAL_SPI_TransmitReceive+0x1d8>
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d003      	beq.n	8007898 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007896:	e0a7      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1a6      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x130>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1a1      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x130>
 80078ac:	e07c      	b.n	80079a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <HAL_SPI_TransmitReceive+0x1fc>
 80078b6:	8b7b      	ldrh	r3, [r7, #26]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d16b      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e2:	e057      	b.n	8007994 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d11c      	bne.n	800792c <HAL_SPI_TransmitReceive+0x26c>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d017      	beq.n	800792c <HAL_SPI_TransmitReceive+0x26c>
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d114      	bne.n	800792c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b01      	cmp	r3, #1
 8007938:	d119      	bne.n	800796e <HAL_SPI_TransmitReceive+0x2ae>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d014      	beq.n	800796e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800796a:	2301      	movs	r3, #1
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800796e:	f7fc fb07 	bl	8003f80 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800797a:	429a      	cmp	r2, r3
 800797c:	d803      	bhi.n	8007986 <HAL_SPI_TransmitReceive+0x2c6>
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d102      	bne.n	800798c <HAL_SPI_TransmitReceive+0x2cc>
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007992:	e029      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007998:	b29b      	uxth	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1a2      	bne.n	80078e4 <HAL_SPI_TransmitReceive+0x224>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d19d      	bne.n	80078e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fa35 	bl	8007e1c <SPI_EndRxTxTransaction>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d006      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2220      	movs	r2, #32
 80079c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079c4:	e010      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10b      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	e000      	b.n	80079e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3730      	adds	r7, #48	; 0x30
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	099b      	lsrs	r3, r3, #6
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10f      	bne.n	8007a48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	099b      	lsrs	r3, r3, #6
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
    return;
 8007a46:	e0d7      	b.n	8007bf8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <HAL_SPI_IRQHandler+0x66>
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	09db      	lsrs	r3, r3, #7
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
    return;
 8007a68:	e0c6      	b.n	8007bf8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10c      	bne.n	8007a90 <HAL_SPI_IRQHandler+0x8c>
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	099b      	lsrs	r3, r3, #6
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	0a1b      	lsrs	r3, r3, #8
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 80b4 	beq.w	8007bf8 <HAL_SPI_IRQHandler+0x1f4>
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80ad 	beq.w	8007bf8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	099b      	lsrs	r3, r3, #6
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d023      	beq.n	8007af2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d011      	beq.n	8007ada <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f043 0204 	orr.w	r2, r3, #4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	617b      	str	r3, [r7, #20]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	e00b      	b.n	8007af2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ada:	2300      	movs	r3, #0
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	693b      	ldr	r3, [r7, #16]
        return;
 8007af0:	e082      	b.n	8007bf8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d014      	beq.n	8007b28 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	f043 0201 	orr.w	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	0a1b      	lsrs	r3, r3, #8
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00c      	beq.n	8007b4e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	f043 0208 	orr.w	r2, r3, #8
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b40:	2300      	movs	r3, #0
 8007b42:	60bb      	str	r3, [r7, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	60bb      	str	r3, [r7, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d04f      	beq.n	8007bf6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b64:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <HAL_SPI_IRQHandler+0x17e>
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d034      	beq.n	8007bec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0203 	bic.w	r2, r2, #3
 8007b90:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d011      	beq.n	8007bbe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9e:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <HAL_SPI_IRQHandler+0x1fc>)
 8007ba0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fc fbda 	bl	8004360 <HAL_DMA_Abort_IT>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d016      	beq.n	8007bf4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bca:	4a0d      	ldr	r2, [pc, #52]	; (8007c00 <HAL_SPI_IRQHandler+0x1fc>)
 8007bcc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fc fbc4 	bl	8004360 <HAL_DMA_Abort_IT>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007bea:	e003      	b.n	8007bf4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f809 	bl	8007c04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007bf2:	e000      	b.n	8007bf6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007bf4:	bf00      	nop
    return;
 8007bf6:	bf00      	nop
  }
}
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	08007c19 	.word	0x08007c19

08007c04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f7ff ffe6 	bl	8007c04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c38:	bf00      	nop
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c50:	f7fc f996 	bl	8003f80 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c60:	f7fc f98e 	bl	8003f80 <HAL_GetTick>
 8007c64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c66:	4b39      	ldr	r3, [pc, #228]	; (8007d4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	015b      	lsls	r3, r3, #5
 8007c6c:	0d1b      	lsrs	r3, r3, #20
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c76:	e054      	b.n	8007d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d050      	beq.n	8007d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c80:	f7fc f97e 	bl	8003f80 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d902      	bls.n	8007c96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d13d      	bne.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ca4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cae:	d111      	bne.n	8007cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb8:	d004      	beq.n	8007cc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc2:	d107      	bne.n	8007cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cdc:	d10f      	bne.n	8007cfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e017      	b.n	8007d42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	bf0c      	ite	eq
 8007d32:	2301      	moveq	r3, #1
 8007d34:	2300      	movne	r3, #0
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d19b      	bne.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	200000b0 	.word	0x200000b0

08007d50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d64:	d111      	bne.n	8007d8a <SPI_EndRxTransaction+0x3a>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6e:	d004      	beq.n	8007d7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d78:	d107      	bne.n	8007d8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d92:	d12a      	bne.n	8007dea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d9c:	d012      	beq.n	8007dc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2200      	movs	r2, #0
 8007da6:	2180      	movs	r1, #128	; 0x80
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7ff ff49 	bl	8007c40 <SPI_WaitFlagStateUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d02d      	beq.n	8007e10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db8:	f043 0220 	orr.w	r2, r3, #32
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e026      	b.n	8007e12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2101      	movs	r1, #1
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f7ff ff36 	bl	8007c40 <SPI_WaitFlagStateUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01a      	beq.n	8007e10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dde:	f043 0220 	orr.w	r2, r3, #32
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e013      	b.n	8007e12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2200      	movs	r2, #0
 8007df2:	2101      	movs	r1, #1
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff ff23 	bl	8007c40 <SPI_WaitFlagStateUntilTimeout>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d007      	beq.n	8007e10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e04:	f043 0220 	orr.w	r2, r3, #32
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e000      	b.n	8007e12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e28:	4b1b      	ldr	r3, [pc, #108]	; (8007e98 <SPI_EndRxTxTransaction+0x7c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1b      	ldr	r2, [pc, #108]	; (8007e9c <SPI_EndRxTxTransaction+0x80>)
 8007e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e32:	0d5b      	lsrs	r3, r3, #21
 8007e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e46:	d112      	bne.n	8007e6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2180      	movs	r1, #128	; 0x80
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff fef4 	bl	8007c40 <SPI_WaitFlagStateUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d016      	beq.n	8007e8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e62:	f043 0220 	orr.w	r2, r3, #32
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e00f      	b.n	8007e8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e84:	2b80      	cmp	r3, #128	; 0x80
 8007e86:	d0f2      	beq.n	8007e6e <SPI_EndRxTxTransaction+0x52>
 8007e88:	e000      	b.n	8007e8c <SPI_EndRxTxTransaction+0x70>
        break;
 8007e8a:	bf00      	nop
  }

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	200000b0 	.word	0x200000b0
 8007e9c:	165e9f81 	.word	0x165e9f81

08007ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e041      	b.n	8007f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fb fe56 	bl	8003b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f000 fae0 	bl	80084a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d001      	beq.n	8007f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e04e      	b.n	8007ff6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0201 	orr.w	r2, r2, #1
 8007f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a23      	ldr	r2, [pc, #140]	; (8008004 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d022      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x80>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f82:	d01d      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x80>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a1f      	ldr	r2, [pc, #124]	; (8008008 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d018      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x80>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a1e      	ldr	r2, [pc, #120]	; (800800c <HAL_TIM_Base_Start_IT+0xcc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d013      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x80>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a1c      	ldr	r2, [pc, #112]	; (8008010 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00e      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x80>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a1b      	ldr	r2, [pc, #108]	; (8008014 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d009      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x80>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a19      	ldr	r2, [pc, #100]	; (8008018 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d004      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x80>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a18      	ldr	r2, [pc, #96]	; (800801c <HAL_TIM_Base_Start_IT+0xdc>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d111      	bne.n	8007fe4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b06      	cmp	r3, #6
 8007fd0:	d010      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f042 0201 	orr.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe2:	e007      	b.n	8007ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0201 	orr.w	r2, r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40010000 	.word	0x40010000
 8008008:	40000400 	.word	0x40000400
 800800c:	40000800 	.word	0x40000800
 8008010:	40000c00 	.word	0x40000c00
 8008014:	40010400 	.word	0x40010400
 8008018:	40014000 	.word	0x40014000
 800801c:	40001800 	.word	0x40001800

08008020 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e041      	b.n	80080b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fb fd74 	bl	8003b34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3304      	adds	r3, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f000 fa20 	bl	80084a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d122      	bne.n	800811a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d11b      	bne.n	800811a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f06f 0202 	mvn.w	r2, #2
 80080ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f9b1 	bl	8008468 <HAL_TIM_IC_CaptureCallback>
 8008106:	e005      	b.n	8008114 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f9a3 	bl	8008454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9b4 	bl	800847c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b04      	cmp	r3, #4
 8008126:	d122      	bne.n	800816e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b04      	cmp	r3, #4
 8008134:	d11b      	bne.n	800816e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f06f 0204 	mvn.w	r2, #4
 800813e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f987 	bl	8008468 <HAL_TIM_IC_CaptureCallback>
 800815a:	e005      	b.n	8008168 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f979 	bl	8008454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f98a 	bl	800847c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	f003 0308 	and.w	r3, r3, #8
 8008178:	2b08      	cmp	r3, #8
 800817a:	d122      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	2b08      	cmp	r3, #8
 8008188:	d11b      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f06f 0208 	mvn.w	r2, #8
 8008192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2204      	movs	r2, #4
 8008198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f95d 	bl	8008468 <HAL_TIM_IC_CaptureCallback>
 80081ae:	e005      	b.n	80081bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f94f 	bl	8008454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f960 	bl	800847c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f003 0310 	and.w	r3, r3, #16
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d122      	bne.n	8008216 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	2b10      	cmp	r3, #16
 80081dc:	d11b      	bne.n	8008216 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f06f 0210 	mvn.w	r2, #16
 80081e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2208      	movs	r2, #8
 80081ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f933 	bl	8008468 <HAL_TIM_IC_CaptureCallback>
 8008202:	e005      	b.n	8008210 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f925 	bl	8008454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f936 	bl	800847c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b01      	cmp	r3, #1
 8008222:	d10e      	bne.n	8008242 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b01      	cmp	r3, #1
 8008230:	d107      	bne.n	8008242 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f06f 0201 	mvn.w	r2, #1
 800823a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fb fbb3 	bl	80039a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824c:	2b80      	cmp	r3, #128	; 0x80
 800824e:	d10e      	bne.n	800826e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	2b80      	cmp	r3, #128	; 0x80
 800825c:	d107      	bne.n	800826e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fbf1 	bl	8008a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008278:	2b40      	cmp	r3, #64	; 0x40
 800827a:	d10e      	bne.n	800829a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	d107      	bne.n	800829a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f8fb 	bl	8008490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d10e      	bne.n	80082c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	d107      	bne.n	80082c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f06f 0220 	mvn.w	r2, #32
 80082be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fbbb 	bl	8008a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d101      	bne.n	80082ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ea:	2302      	movs	r3, #2
 80082ec:	e0ae      	b.n	800844c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b0c      	cmp	r3, #12
 80082fa:	f200 809f 	bhi.w	800843c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008339 	.word	0x08008339
 8008308:	0800843d 	.word	0x0800843d
 800830c:	0800843d 	.word	0x0800843d
 8008310:	0800843d 	.word	0x0800843d
 8008314:	08008379 	.word	0x08008379
 8008318:	0800843d 	.word	0x0800843d
 800831c:	0800843d 	.word	0x0800843d
 8008320:	0800843d 	.word	0x0800843d
 8008324:	080083bb 	.word	0x080083bb
 8008328:	0800843d 	.word	0x0800843d
 800832c:	0800843d 	.word	0x0800843d
 8008330:	0800843d 	.word	0x0800843d
 8008334:	080083fb 	.word	0x080083fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 f950 	bl	80085e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0208 	orr.w	r2, r2, #8
 8008352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0204 	bic.w	r2, r2, #4
 8008362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	619a      	str	r2, [r3, #24]
      break;
 8008376:	e064      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	4618      	mov	r0, r3
 8008380:	f000 f9a0 	bl	80086c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6999      	ldr	r1, [r3, #24]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	021a      	lsls	r2, r3, #8
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	619a      	str	r2, [r3, #24]
      break;
 80083b8:	e043      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f9f5 	bl	80087b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0208 	orr.w	r2, r2, #8
 80083d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0204 	bic.w	r2, r2, #4
 80083e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	61da      	str	r2, [r3, #28]
      break;
 80083f8:	e023      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fa49 	bl	8008898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69da      	ldr	r2, [r3, #28]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69d9      	ldr	r1, [r3, #28]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	021a      	lsls	r2, r3, #8
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	61da      	str	r2, [r3, #28]
      break;
 800843a:	e002      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
      break;
 8008440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a40      	ldr	r2, [pc, #256]	; (80085b8 <TIM_Base_SetConfig+0x114>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d013      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c2:	d00f      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a3d      	ldr	r2, [pc, #244]	; (80085bc <TIM_Base_SetConfig+0x118>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00b      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a3c      	ldr	r2, [pc, #240]	; (80085c0 <TIM_Base_SetConfig+0x11c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d007      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a3b      	ldr	r2, [pc, #236]	; (80085c4 <TIM_Base_SetConfig+0x120>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d003      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a3a      	ldr	r2, [pc, #232]	; (80085c8 <TIM_Base_SetConfig+0x124>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d108      	bne.n	80084f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a2f      	ldr	r2, [pc, #188]	; (80085b8 <TIM_Base_SetConfig+0x114>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d02b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008504:	d027      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a2c      	ldr	r2, [pc, #176]	; (80085bc <TIM_Base_SetConfig+0x118>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d023      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a2b      	ldr	r2, [pc, #172]	; (80085c0 <TIM_Base_SetConfig+0x11c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d01f      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a2a      	ldr	r2, [pc, #168]	; (80085c4 <TIM_Base_SetConfig+0x120>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d01b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a29      	ldr	r2, [pc, #164]	; (80085c8 <TIM_Base_SetConfig+0x124>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d017      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a28      	ldr	r2, [pc, #160]	; (80085cc <TIM_Base_SetConfig+0x128>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d013      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a27      	ldr	r2, [pc, #156]	; (80085d0 <TIM_Base_SetConfig+0x12c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00f      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a26      	ldr	r2, [pc, #152]	; (80085d4 <TIM_Base_SetConfig+0x130>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a25      	ldr	r2, [pc, #148]	; (80085d8 <TIM_Base_SetConfig+0x134>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d007      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a24      	ldr	r2, [pc, #144]	; (80085dc <TIM_Base_SetConfig+0x138>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a23      	ldr	r2, [pc, #140]	; (80085e0 <TIM_Base_SetConfig+0x13c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d108      	bne.n	8008568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a0a      	ldr	r2, [pc, #40]	; (80085b8 <TIM_Base_SetConfig+0x114>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <TIM_Base_SetConfig+0xf8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <TIM_Base_SetConfig+0x124>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d103      	bne.n	80085a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	615a      	str	r2, [r3, #20]
}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40010000 	.word	0x40010000
 80085bc:	40000400 	.word	0x40000400
 80085c0:	40000800 	.word	0x40000800
 80085c4:	40000c00 	.word	0x40000c00
 80085c8:	40010400 	.word	0x40010400
 80085cc:	40014000 	.word	0x40014000
 80085d0:	40014400 	.word	0x40014400
 80085d4:	40014800 	.word	0x40014800
 80085d8:	40001800 	.word	0x40001800
 80085dc:	40001c00 	.word	0x40001c00
 80085e0:	40002000 	.word	0x40002000

080085e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f023 0201 	bic.w	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0303 	bic.w	r3, r3, #3
 800861a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f023 0302 	bic.w	r3, r3, #2
 800862c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	4313      	orrs	r3, r2
 8008636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a20      	ldr	r2, [pc, #128]	; (80086bc <TIM_OC1_SetConfig+0xd8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d003      	beq.n	8008648 <TIM_OC1_SetConfig+0x64>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a1f      	ldr	r2, [pc, #124]	; (80086c0 <TIM_OC1_SetConfig+0xdc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d10c      	bne.n	8008662 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f023 0308 	bic.w	r3, r3, #8
 800864e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f023 0304 	bic.w	r3, r3, #4
 8008660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a15      	ldr	r2, [pc, #84]	; (80086bc <TIM_OC1_SetConfig+0xd8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d003      	beq.n	8008672 <TIM_OC1_SetConfig+0x8e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a14      	ldr	r2, [pc, #80]	; (80086c0 <TIM_OC1_SetConfig+0xdc>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d111      	bne.n	8008696 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	40010000 	.word	0x40010000
 80086c0:	40010400 	.word	0x40010400

080086c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f023 0210 	bic.w	r2, r3, #16
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f023 0320 	bic.w	r3, r3, #32
 800870e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a22      	ldr	r2, [pc, #136]	; (80087a8 <TIM_OC2_SetConfig+0xe4>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d003      	beq.n	800872c <TIM_OC2_SetConfig+0x68>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a21      	ldr	r2, [pc, #132]	; (80087ac <TIM_OC2_SetConfig+0xe8>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d10d      	bne.n	8008748 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	4313      	orrs	r3, r2
 800873e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <TIM_OC2_SetConfig+0xe4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d003      	beq.n	8008758 <TIM_OC2_SetConfig+0x94>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a16      	ldr	r2, [pc, #88]	; (80087ac <TIM_OC2_SetConfig+0xe8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d113      	bne.n	8008780 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800875e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	4313      	orrs	r3, r2
 800877e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40010000 	.word	0x40010000
 80087ac:	40010400 	.word	0x40010400

080087b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a21      	ldr	r2, [pc, #132]	; (8008890 <TIM_OC3_SetConfig+0xe0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d003      	beq.n	8008816 <TIM_OC3_SetConfig+0x66>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a20      	ldr	r2, [pc, #128]	; (8008894 <TIM_OC3_SetConfig+0xe4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d10d      	bne.n	8008832 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800881c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a16      	ldr	r2, [pc, #88]	; (8008890 <TIM_OC3_SetConfig+0xe0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d003      	beq.n	8008842 <TIM_OC3_SetConfig+0x92>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <TIM_OC3_SetConfig+0xe4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d113      	bne.n	800886a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	4313      	orrs	r3, r2
 800885c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	621a      	str	r2, [r3, #32]
}
 8008884:	bf00      	nop
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	40010000 	.word	0x40010000
 8008894:	40010400 	.word	0x40010400

08008898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	031b      	lsls	r3, r3, #12
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a12      	ldr	r2, [pc, #72]	; (800893c <TIM_OC4_SetConfig+0xa4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_OC4_SetConfig+0x68>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a11      	ldr	r2, [pc, #68]	; (8008940 <TIM_OC4_SetConfig+0xa8>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d109      	bne.n	8008914 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	019b      	lsls	r3, r3, #6
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	621a      	str	r2, [r3, #32]
}
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	40010000 	.word	0x40010000
 8008940:	40010400 	.word	0x40010400

08008944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008958:	2302      	movs	r3, #2
 800895a:	e05a      	b.n	8008a12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a21      	ldr	r2, [pc, #132]	; (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d022      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a8:	d01d      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d018      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a1b      	ldr	r2, [pc, #108]	; (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d013      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1a      	ldr	r2, [pc, #104]	; (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00e      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a18      	ldr	r2, [pc, #96]	; (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d009      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a17      	ldr	r2, [pc, #92]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d004      	beq.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d10c      	bne.n	8008a00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40000400 	.word	0x40000400
 8008a28:	40000800 	.word	0x40000800
 8008a2c:	40000c00 	.word	0x40000c00
 8008a30:	40010400 	.word	0x40010400
 8008a34:	40014000 	.word	0x40014000
 8008a38:	40001800 	.word	0x40001800

08008a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e03f      	b.n	8008af6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fb f948 	bl	8003d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2224      	movs	r2, #36	; 0x24
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f929 	bl	8008d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	695a      	ldr	r2, [r3, #20]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b08a      	sub	sp, #40	; 0x28
 8008b02:	af02      	add	r7, sp, #8
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	d17c      	bne.n	8008c18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <HAL_UART_Transmit+0x2c>
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e075      	b.n	8008c1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d101      	bne.n	8008b3c <HAL_UART_Transmit+0x3e>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e06e      	b.n	8008c1a <HAL_UART_Transmit+0x11c>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2221      	movs	r2, #33	; 0x21
 8008b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b52:	f7fb fa15 	bl	8003f80 <HAL_GetTick>
 8008b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6c:	d108      	bne.n	8008b80 <HAL_UART_Transmit+0x82>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d104      	bne.n	8008b80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	e003      	b.n	8008b88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008b90:	e02a      	b.n	8008be8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2180      	movs	r1, #128	; 0x80
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f840 	bl	8008c22 <UART_WaitOnFlagUntilTimeout>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e036      	b.n	8008c1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10b      	bne.n	8008bca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	e007      	b.n	8008bda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	781a      	ldrb	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1cf      	bne.n	8008b92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2140      	movs	r1, #64	; 0x40
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f810 	bl	8008c22 <UART_WaitOnFlagUntilTimeout>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e006      	b.n	8008c1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e000      	b.n	8008c1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c18:	2302      	movs	r3, #2
  }
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b090      	sub	sp, #64	; 0x40
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	603b      	str	r3, [r7, #0]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c32:	e050      	b.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3a:	d04c      	beq.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c42:	f7fb f99d 	bl	8003f80 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d241      	bcs.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	330c      	adds	r3, #12
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	330c      	adds	r3, #12
 8008c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c72:	637a      	str	r2, [r7, #52]	; 0x34
 8008c74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c7a:	e841 2300 	strex	r3, r2, [r1]
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1e5      	bne.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3314      	adds	r3, #20
 8008c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	613b      	str	r3, [r7, #16]
   return(result);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f023 0301 	bic.w	r3, r3, #1
 8008c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3314      	adds	r3, #20
 8008ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca6:	623a      	str	r2, [r7, #32]
 8008ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	69f9      	ldr	r1, [r7, #28]
 8008cac:	6a3a      	ldr	r2, [r7, #32]
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e5      	bne.n	8008c86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e00f      	b.n	8008cf6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4013      	ands	r3, r2
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	bf0c      	ite	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	2300      	movne	r3, #0
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	461a      	mov	r2, r3
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d09f      	beq.n	8008c34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3740      	adds	r7, #64	; 0x40
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d04:	b0c0      	sub	sp, #256	; 0x100
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1c:	68d9      	ldr	r1, [r3, #12]
 8008d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	ea40 0301 	orr.w	r3, r0, r1
 8008d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	431a      	orrs	r2, r3
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d58:	f021 010c 	bic.w	r1, r1, #12
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d66:	430b      	orrs	r3, r1
 8008d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d7a:	6999      	ldr	r1, [r3, #24]
 8008d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	ea40 0301 	orr.w	r3, r0, r1
 8008d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4b8f      	ldr	r3, [pc, #572]	; (8008fcc <UART_SetConfig+0x2cc>)
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d005      	beq.n	8008da0 <UART_SetConfig+0xa0>
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b8d      	ldr	r3, [pc, #564]	; (8008fd0 <UART_SetConfig+0x2d0>)
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d104      	bne.n	8008daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008da0:	f7fe f9a4 	bl	80070ec <HAL_RCC_GetPCLK2Freq>
 8008da4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008da8:	e003      	b.n	8008db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008daa:	f7fe f98b 	bl	80070c4 <HAL_RCC_GetPCLK1Freq>
 8008dae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dbc:	f040 810c 	bne.w	8008fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008dca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	1891      	adds	r1, r2, r2
 8008dd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008dda:	415b      	adcs	r3, r3
 8008ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008de2:	4621      	mov	r1, r4
 8008de4:	eb12 0801 	adds.w	r8, r2, r1
 8008de8:	4629      	mov	r1, r5
 8008dea:	eb43 0901 	adc.w	r9, r3, r1
 8008dee:	f04f 0200 	mov.w	r2, #0
 8008df2:	f04f 0300 	mov.w	r3, #0
 8008df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e02:	4690      	mov	r8, r2
 8008e04:	4699      	mov	r9, r3
 8008e06:	4623      	mov	r3, r4
 8008e08:	eb18 0303 	adds.w	r3, r8, r3
 8008e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e10:	462b      	mov	r3, r5
 8008e12:	eb49 0303 	adc.w	r3, r9, r3
 8008e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e2e:	460b      	mov	r3, r1
 8008e30:	18db      	adds	r3, r3, r3
 8008e32:	653b      	str	r3, [r7, #80]	; 0x50
 8008e34:	4613      	mov	r3, r2
 8008e36:	eb42 0303 	adc.w	r3, r2, r3
 8008e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e44:	f7f7 f9c8 	bl	80001d8 <__aeabi_uldivmod>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4b61      	ldr	r3, [pc, #388]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e52:	095b      	lsrs	r3, r3, #5
 8008e54:	011c      	lsls	r4, r3, #4
 8008e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	1891      	adds	r1, r2, r2
 8008e6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e70:	415b      	adcs	r3, r3
 8008e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e78:	4641      	mov	r1, r8
 8008e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8008e7e:	4649      	mov	r1, r9
 8008e80:	eb43 0b01 	adc.w	fp, r3, r1
 8008e84:	f04f 0200 	mov.w	r2, #0
 8008e88:	f04f 0300 	mov.w	r3, #0
 8008e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e98:	4692      	mov	sl, r2
 8008e9a:	469b      	mov	fp, r3
 8008e9c:	4643      	mov	r3, r8
 8008e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8008ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8008eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	18db      	adds	r3, r3, r3
 8008ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8008eca:	4613      	mov	r3, r2
 8008ecc:	eb42 0303 	adc.w	r3, r2, r3
 8008ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008eda:	f7f7 f97d 	bl	80001d8 <__aeabi_uldivmod>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4b3b      	ldr	r3, [pc, #236]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8008eea:	095b      	lsrs	r3, r3, #5
 8008eec:	2264      	movs	r2, #100	; 0x64
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
 8008ef2:	1acb      	subs	r3, r1, r3
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008efa:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008efc:	fba3 2302 	umull	r2, r3, r3, r2
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f08:	441c      	add	r4, r3
 8008f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	1891      	adds	r1, r2, r2
 8008f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f24:	415b      	adcs	r3, r3
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f2c:	4641      	mov	r1, r8
 8008f2e:	1851      	adds	r1, r2, r1
 8008f30:	6339      	str	r1, [r7, #48]	; 0x30
 8008f32:	4649      	mov	r1, r9
 8008f34:	414b      	adcs	r3, r1
 8008f36:	637b      	str	r3, [r7, #52]	; 0x34
 8008f38:	f04f 0200 	mov.w	r2, #0
 8008f3c:	f04f 0300 	mov.w	r3, #0
 8008f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f44:	4659      	mov	r1, fp
 8008f46:	00cb      	lsls	r3, r1, #3
 8008f48:	4651      	mov	r1, sl
 8008f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f4e:	4651      	mov	r1, sl
 8008f50:	00ca      	lsls	r2, r1, #3
 8008f52:	4610      	mov	r0, r2
 8008f54:	4619      	mov	r1, r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	4642      	mov	r2, r8
 8008f5a:	189b      	adds	r3, r3, r2
 8008f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f60:	464b      	mov	r3, r9
 8008f62:	460a      	mov	r2, r1
 8008f64:	eb42 0303 	adc.w	r3, r2, r3
 8008f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f80:	460b      	mov	r3, r1
 8008f82:	18db      	adds	r3, r3, r3
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f86:	4613      	mov	r3, r2
 8008f88:	eb42 0303 	adc.w	r3, r2, r3
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f96:	f7f7 f91f 	bl	80001d8 <__aeabi_uldivmod>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa4:	095b      	lsrs	r3, r3, #5
 8008fa6:	2164      	movs	r1, #100	; 0x64
 8008fa8:	fb01 f303 	mul.w	r3, r1, r3
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	3332      	adds	r3, #50	; 0x32
 8008fb2:	4a08      	ldr	r2, [pc, #32]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	f003 0207 	and.w	r2, r3, #7
 8008fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4422      	add	r2, r4
 8008fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fc8:	e105      	b.n	80091d6 <UART_SetConfig+0x4d6>
 8008fca:	bf00      	nop
 8008fcc:	40011000 	.word	0x40011000
 8008fd0:	40011400 	.word	0x40011400
 8008fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008fea:	4642      	mov	r2, r8
 8008fec:	464b      	mov	r3, r9
 8008fee:	1891      	adds	r1, r2, r2
 8008ff0:	6239      	str	r1, [r7, #32]
 8008ff2:	415b      	adcs	r3, r3
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	1854      	adds	r4, r2, r1
 8008ffe:	4649      	mov	r1, r9
 8009000:	eb43 0501 	adc.w	r5, r3, r1
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	f04f 0300 	mov.w	r3, #0
 800900c:	00eb      	lsls	r3, r5, #3
 800900e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009012:	00e2      	lsls	r2, r4, #3
 8009014:	4614      	mov	r4, r2
 8009016:	461d      	mov	r5, r3
 8009018:	4643      	mov	r3, r8
 800901a:	18e3      	adds	r3, r4, r3
 800901c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009020:	464b      	mov	r3, r9
 8009022:	eb45 0303 	adc.w	r3, r5, r3
 8009026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800902a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800903a:	f04f 0200 	mov.w	r2, #0
 800903e:	f04f 0300 	mov.w	r3, #0
 8009042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009046:	4629      	mov	r1, r5
 8009048:	008b      	lsls	r3, r1, #2
 800904a:	4621      	mov	r1, r4
 800904c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009050:	4621      	mov	r1, r4
 8009052:	008a      	lsls	r2, r1, #2
 8009054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009058:	f7f7 f8be 	bl	80001d8 <__aeabi_uldivmod>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4b60      	ldr	r3, [pc, #384]	; (80091e4 <UART_SetConfig+0x4e4>)
 8009062:	fba3 2302 	umull	r2, r3, r3, r2
 8009066:	095b      	lsrs	r3, r3, #5
 8009068:	011c      	lsls	r4, r3, #4
 800906a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800906e:	2200      	movs	r2, #0
 8009070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009074:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800907c:	4642      	mov	r2, r8
 800907e:	464b      	mov	r3, r9
 8009080:	1891      	adds	r1, r2, r2
 8009082:	61b9      	str	r1, [r7, #24]
 8009084:	415b      	adcs	r3, r3
 8009086:	61fb      	str	r3, [r7, #28]
 8009088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800908c:	4641      	mov	r1, r8
 800908e:	1851      	adds	r1, r2, r1
 8009090:	6139      	str	r1, [r7, #16]
 8009092:	4649      	mov	r1, r9
 8009094:	414b      	adcs	r3, r1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	f04f 0300 	mov.w	r3, #0
 80090a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090a4:	4659      	mov	r1, fp
 80090a6:	00cb      	lsls	r3, r1, #3
 80090a8:	4651      	mov	r1, sl
 80090aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090ae:	4651      	mov	r1, sl
 80090b0:	00ca      	lsls	r2, r1, #3
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	4603      	mov	r3, r0
 80090b8:	4642      	mov	r2, r8
 80090ba:	189b      	adds	r3, r3, r2
 80090bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090c0:	464b      	mov	r3, r9
 80090c2:	460a      	mov	r2, r1
 80090c4:	eb42 0303 	adc.w	r3, r2, r3
 80090c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80090d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090e4:	4649      	mov	r1, r9
 80090e6:	008b      	lsls	r3, r1, #2
 80090e8:	4641      	mov	r1, r8
 80090ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090ee:	4641      	mov	r1, r8
 80090f0:	008a      	lsls	r2, r1, #2
 80090f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090f6:	f7f7 f86f 	bl	80001d8 <__aeabi_uldivmod>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4b39      	ldr	r3, [pc, #228]	; (80091e4 <UART_SetConfig+0x4e4>)
 8009100:	fba3 1302 	umull	r1, r3, r3, r2
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	2164      	movs	r1, #100	; 0x64
 8009108:	fb01 f303 	mul.w	r3, r1, r3
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	3332      	adds	r3, #50	; 0x32
 8009112:	4a34      	ldr	r2, [pc, #208]	; (80091e4 <UART_SetConfig+0x4e4>)
 8009114:	fba2 2303 	umull	r2, r3, r2, r3
 8009118:	095b      	lsrs	r3, r3, #5
 800911a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800911e:	441c      	add	r4, r3
 8009120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009124:	2200      	movs	r2, #0
 8009126:	673b      	str	r3, [r7, #112]	; 0x70
 8009128:	677a      	str	r2, [r7, #116]	; 0x74
 800912a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800912e:	4642      	mov	r2, r8
 8009130:	464b      	mov	r3, r9
 8009132:	1891      	adds	r1, r2, r2
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	415b      	adcs	r3, r3
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800913e:	4641      	mov	r1, r8
 8009140:	1851      	adds	r1, r2, r1
 8009142:	6039      	str	r1, [r7, #0]
 8009144:	4649      	mov	r1, r9
 8009146:	414b      	adcs	r3, r1
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009156:	4659      	mov	r1, fp
 8009158:	00cb      	lsls	r3, r1, #3
 800915a:	4651      	mov	r1, sl
 800915c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009160:	4651      	mov	r1, sl
 8009162:	00ca      	lsls	r2, r1, #3
 8009164:	4610      	mov	r0, r2
 8009166:	4619      	mov	r1, r3
 8009168:	4603      	mov	r3, r0
 800916a:	4642      	mov	r2, r8
 800916c:	189b      	adds	r3, r3, r2
 800916e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009170:	464b      	mov	r3, r9
 8009172:	460a      	mov	r2, r1
 8009174:	eb42 0303 	adc.w	r3, r2, r3
 8009178:	66fb      	str	r3, [r7, #108]	; 0x6c
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	663b      	str	r3, [r7, #96]	; 0x60
 8009184:	667a      	str	r2, [r7, #100]	; 0x64
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009192:	4649      	mov	r1, r9
 8009194:	008b      	lsls	r3, r1, #2
 8009196:	4641      	mov	r1, r8
 8009198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800919c:	4641      	mov	r1, r8
 800919e:	008a      	lsls	r2, r1, #2
 80091a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80091a4:	f7f7 f818 	bl	80001d8 <__aeabi_uldivmod>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <UART_SetConfig+0x4e4>)
 80091ae:	fba3 1302 	umull	r1, r3, r3, r2
 80091b2:	095b      	lsrs	r3, r3, #5
 80091b4:	2164      	movs	r1, #100	; 0x64
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	011b      	lsls	r3, r3, #4
 80091be:	3332      	adds	r3, #50	; 0x32
 80091c0:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <UART_SetConfig+0x4e4>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	095b      	lsrs	r3, r3, #5
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4422      	add	r2, r4
 80091d4:	609a      	str	r2, [r3, #8]
}
 80091d6:	bf00      	nop
 80091d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091dc:	46bd      	mov	sp, r7
 80091de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091e2:	bf00      	nop
 80091e4:	51eb851f 	.word	0x51eb851f

080091e8 <__libc_init_array>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	4d0d      	ldr	r5, [pc, #52]	; (8009220 <__libc_init_array+0x38>)
 80091ec:	4c0d      	ldr	r4, [pc, #52]	; (8009224 <__libc_init_array+0x3c>)
 80091ee:	1b64      	subs	r4, r4, r5
 80091f0:	10a4      	asrs	r4, r4, #2
 80091f2:	2600      	movs	r6, #0
 80091f4:	42a6      	cmp	r6, r4
 80091f6:	d109      	bne.n	800920c <__libc_init_array+0x24>
 80091f8:	4d0b      	ldr	r5, [pc, #44]	; (8009228 <__libc_init_array+0x40>)
 80091fa:	4c0c      	ldr	r4, [pc, #48]	; (800922c <__libc_init_array+0x44>)
 80091fc:	f000 f87c 	bl	80092f8 <_init>
 8009200:	1b64      	subs	r4, r4, r5
 8009202:	10a4      	asrs	r4, r4, #2
 8009204:	2600      	movs	r6, #0
 8009206:	42a6      	cmp	r6, r4
 8009208:	d105      	bne.n	8009216 <__libc_init_array+0x2e>
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009210:	4798      	blx	r3
 8009212:	3601      	adds	r6, #1
 8009214:	e7ee      	b.n	80091f4 <__libc_init_array+0xc>
 8009216:	f855 3b04 	ldr.w	r3, [r5], #4
 800921a:	4798      	blx	r3
 800921c:	3601      	adds	r6, #1
 800921e:	e7f2      	b.n	8009206 <__libc_init_array+0x1e>
 8009220:	0800bdf0 	.word	0x0800bdf0
 8009224:	0800bdf0 	.word	0x0800bdf0
 8009228:	0800bdf0 	.word	0x0800bdf0
 800922c:	0800bdf4 	.word	0x0800bdf4

08009230 <__itoa>:
 8009230:	1e93      	subs	r3, r2, #2
 8009232:	2b22      	cmp	r3, #34	; 0x22
 8009234:	b510      	push	{r4, lr}
 8009236:	460c      	mov	r4, r1
 8009238:	d904      	bls.n	8009244 <__itoa+0x14>
 800923a:	2300      	movs	r3, #0
 800923c:	700b      	strb	r3, [r1, #0]
 800923e:	461c      	mov	r4, r3
 8009240:	4620      	mov	r0, r4
 8009242:	bd10      	pop	{r4, pc}
 8009244:	2a0a      	cmp	r2, #10
 8009246:	d109      	bne.n	800925c <__itoa+0x2c>
 8009248:	2800      	cmp	r0, #0
 800924a:	da07      	bge.n	800925c <__itoa+0x2c>
 800924c:	232d      	movs	r3, #45	; 0x2d
 800924e:	700b      	strb	r3, [r1, #0]
 8009250:	4240      	negs	r0, r0
 8009252:	2101      	movs	r1, #1
 8009254:	4421      	add	r1, r4
 8009256:	f000 f80d 	bl	8009274 <__utoa>
 800925a:	e7f1      	b.n	8009240 <__itoa+0x10>
 800925c:	2100      	movs	r1, #0
 800925e:	e7f9      	b.n	8009254 <__itoa+0x24>

08009260 <itoa>:
 8009260:	f7ff bfe6 	b.w	8009230 <__itoa>

08009264 <memset>:
 8009264:	4402      	add	r2, r0
 8009266:	4603      	mov	r3, r0
 8009268:	4293      	cmp	r3, r2
 800926a:	d100      	bne.n	800926e <memset+0xa>
 800926c:	4770      	bx	lr
 800926e:	f803 1b01 	strb.w	r1, [r3], #1
 8009272:	e7f9      	b.n	8009268 <memset+0x4>

08009274 <__utoa>:
 8009274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009276:	4c1f      	ldr	r4, [pc, #124]	; (80092f4 <__utoa+0x80>)
 8009278:	b08b      	sub	sp, #44	; 0x2c
 800927a:	4605      	mov	r5, r0
 800927c:	460b      	mov	r3, r1
 800927e:	466e      	mov	r6, sp
 8009280:	f104 0c20 	add.w	ip, r4, #32
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	6861      	ldr	r1, [r4, #4]
 8009288:	4637      	mov	r7, r6
 800928a:	c703      	stmia	r7!, {r0, r1}
 800928c:	3408      	adds	r4, #8
 800928e:	4564      	cmp	r4, ip
 8009290:	463e      	mov	r6, r7
 8009292:	d1f7      	bne.n	8009284 <__utoa+0x10>
 8009294:	7921      	ldrb	r1, [r4, #4]
 8009296:	7139      	strb	r1, [r7, #4]
 8009298:	1e91      	subs	r1, r2, #2
 800929a:	6820      	ldr	r0, [r4, #0]
 800929c:	6038      	str	r0, [r7, #0]
 800929e:	2922      	cmp	r1, #34	; 0x22
 80092a0:	f04f 0100 	mov.w	r1, #0
 80092a4:	d904      	bls.n	80092b0 <__utoa+0x3c>
 80092a6:	7019      	strb	r1, [r3, #0]
 80092a8:	460b      	mov	r3, r1
 80092aa:	4618      	mov	r0, r3
 80092ac:	b00b      	add	sp, #44	; 0x2c
 80092ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b0:	1e58      	subs	r0, r3, #1
 80092b2:	4684      	mov	ip, r0
 80092b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80092b8:	fb02 5617 	mls	r6, r2, r7, r5
 80092bc:	3628      	adds	r6, #40	; 0x28
 80092be:	446e      	add	r6, sp
 80092c0:	460c      	mov	r4, r1
 80092c2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80092c6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80092ca:	462e      	mov	r6, r5
 80092cc:	42b2      	cmp	r2, r6
 80092ce:	f101 0101 	add.w	r1, r1, #1
 80092d2:	463d      	mov	r5, r7
 80092d4:	d9ee      	bls.n	80092b4 <__utoa+0x40>
 80092d6:	2200      	movs	r2, #0
 80092d8:	545a      	strb	r2, [r3, r1]
 80092da:	1919      	adds	r1, r3, r4
 80092dc:	1aa5      	subs	r5, r4, r2
 80092de:	42aa      	cmp	r2, r5
 80092e0:	dae3      	bge.n	80092aa <__utoa+0x36>
 80092e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80092e6:	780e      	ldrb	r6, [r1, #0]
 80092e8:	7006      	strb	r6, [r0, #0]
 80092ea:	3201      	adds	r2, #1
 80092ec:	f801 5901 	strb.w	r5, [r1], #-1
 80092f0:	e7f4      	b.n	80092dc <__utoa+0x68>
 80092f2:	bf00      	nop
 80092f4:	0800bdc0 	.word	0x0800bdc0

080092f8 <_init>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr

08009304 <_fini>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr
