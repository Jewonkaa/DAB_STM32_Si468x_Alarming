
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c84  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3e4  0800c3e4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3e4  0800c3e4  0001c3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3ec  0800c3ec  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3f0  0800c3f0  0001c3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800c3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          000027a0  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000285c  2000285c  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017225  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e7  00000000  00000000  00037311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  0003a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d0  00000000  00000000  0003bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236e8  00000000  00000000  0003cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ef6  00000000  00000000  000604d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d164b  00000000  00000000  0007a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ba11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053ac  00000000  00000000  0014ba64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009748 	.word	0x08009748

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	08009748 	.word	0x08009748

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fbc3 	bl	8000c70 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fbc0 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fbcc 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fbc9 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fbc6 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fbc3 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fbc0 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fbae 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fbba 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fbb7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fbb4 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fba2 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fbae 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbab 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fba8 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb96 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fba2 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb9f 	bl	8000c8e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb8d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb99 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb96 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb93 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb90 	bl	8000c8e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb7e 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb8a 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb78 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb84 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb72 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb7e 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb6c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb78 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb75 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb63 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb6f 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb5d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb69 	bl	8000c8e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb57 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb63 	bl	8000c8e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb51 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb5d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb5a 	bl	8000c8e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb48 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb54 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb51 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb4e 	bl	8000c8e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb3c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb48 	bl	8000c8e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb36 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb42 	bl	8000c8e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb30 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb3c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb39 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb36 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb33 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb30 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb2d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fb2a 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fb27 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 fb24 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fb21 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 fb1e 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 fb1b 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 fb18 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fb15 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fb12 	bl	8000c8e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fb00 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb0c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fb09 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fb06 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fb03 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fb00 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fafd 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 fafa 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 faf7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 faf4 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 faf1 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 faee 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 faeb 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fae8 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fae5 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fae2 	bl	8000c8e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 fad0 	bl	8000c70 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 facd 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 fad9 	bl	8000c8e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f006 ffbc 	bl	8007676 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20002640 	.word	0x20002640

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f004 fc52 	bl	8004fc0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f003 fe4b 	bl	80043b8 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f004 fc49 	bl	8004fc0 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f004 fc43 	bl	8004fc0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f003 fe3c 	bl	80043b8 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa95 	bl	8000c70 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f004 fc37 	bl	8004fc0 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa82 	bl	8000c70 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa80 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa75 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa6a 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa5f 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f004 fbdc 	bl	8004fc0 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f004 fbd6 	bl	8004fc0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f004 fbcc 	bl	8004fc0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9e3 	bl	8000cac <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f004 fb3e 	bl	8004fc0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f004 fb35 	bl	8004fc0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f977 	bl	8000cac <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af02      	add	r7, sp, #8
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f81c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f814 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f80c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f804 	bl	8000a1c <ILI9341_Draw_Line>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	429a      	cmp	r2, r3
 8000a46:	bfcc      	ite	gt
 8000a48:	2301      	movgt	r3, #1
 8000a4a:	2300      	movle	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a62:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	843b      	strh	r3, [r7, #32]
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d90d      	bls.n	8000a96 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	83fb      	strh	r3, [r7, #30]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	83bb      	strh	r3, [r7, #28]
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bfb8      	it	lt
 8000aa8:	425b      	neglt	r3, r3
 8000aaa:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	0fda      	lsrs	r2, r3, #31
 8000ab0:	4413      	add	r3, r2
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d202      	bcs.n	8000ac4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e023      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aca:	e01f      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0d 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000ade:	e005      	b.n	8000aec <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff06 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da05      	bge.n	8000b06 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]
			err = dx;
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d9db      	bls.n	8000acc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b2e:	7f3b      	ldrb	r3, [r7, #28]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d061      	beq.n	8000bf8 <ILI9341_Draw_String+0xd8>
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	f300 8092 	bgt.w	8000c5e <ILI9341_Draw_String+0x13e>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d028      	beq.n	8000b90 <ILI9341_Draw_String+0x70>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d02b      	beq.n	8000b9a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b42:	e08c      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b44:	7f3b      	ldrb	r3, [r7, #28]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d907      	bls.n	8000b66 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b5a:	7f3b      	ldrb	r3, [r7, #28]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4413      	add	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	7f3a      	ldrb	r2, [r7, #28]
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	f000 f95a 	bl	8000e30 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b7c:	7f3b      	ldrb	r3, [r7, #28]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	3b02      	subs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d5      	bne.n	8000b44 <ILI9341_Draw_String+0x24>
	break;
 8000b98:	e061      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba0:	e025      	b.n	8000bee <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000ba2:	7f3b      	ldrb	r3, [r7, #28]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	441a      	add	r2, r3
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d907      	bls.n	8000bc4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bb8:	7f3b      	ldrb	r3, [r7, #28]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7f3a      	ldrb	r2, [r7, #28]
 8000bce:	9201      	str	r2, [sp, #4]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f000 f92b 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*8;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1d5      	bne.n	8000ba2 <ILI9341_Draw_String+0x82>
	break;
 8000bf6:	e032      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bfe:	e029      	b.n	8000c54 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000c00:	7f3b      	ldrb	r3, [r7, #28]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	441a      	add	r2, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	7f3a      	ldrb	r2, [r7, #28]
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f000 f8fc 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*10;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d1      	bne.n	8000c00 <ILI9341_Draw_String+0xe0>
	break;
 8000c5c:	bf00      	nop
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	200000d8 	.word	0x200000d8

08000c70 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c7a:	f000 fa09 	bl	8001090 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd31 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c98:	f000 f9e8 	bl	800106c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd22 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	733b      	strb	r3, [r7, #12]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000ccc:	f004 f978 	bl	8004fc0 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	4855      	ldr	r0, [pc, #340]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cd8:	f004 f972 	bl	8004fc0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f7ff fd03 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cea:	f004 f969 	bl	8004fc0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cee:	7b3b      	ldrb	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fcf9 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcf5 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d169      	bne.n	8000de6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d12:	e027      	b.n	8000d64 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d14:	2310      	movs	r3, #16
 8000d16:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fce4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fce0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcdc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcd4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcd0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fccc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcc8 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1d9      	bne.n	8000d18 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	81fa      	strh	r2, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1d2      	bne.n	8000d14 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	e007      	b.n	8000d8a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fcaf 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	737a      	strb	r2, [r7, #13]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f2      	bne.n	8000d7a <ILI9341_Send_Burst+0xce>
 8000d94:	e03f      	b.n	8000e16 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fca3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc9f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc9b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc97 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc93 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc8f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc8b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc87 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	81fa      	strh	r2, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1d2      	bne.n	8000d96 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df8:	737b      	strb	r3, [r7, #13]
 8000dfa:	e007      	b.n	8000e0c <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc72 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc6e 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	737a      	strb	r2, [r7, #13]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f2      	bne.n	8000dfc <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000e1e:	f004 f8cf 	bl	8004fc0 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	f000 80b2 	beq.w	8000fac <ILI9341_Draw_Char+0x17c>
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	f300 8104 	bgt.w	8001056 <ILI9341_Draw_Char+0x226>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <ILI9341_Draw_Char+0x28>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d055      	beq.n	8000f02 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e56:	e0fe      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	f7ff fcfd 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	487b      	ldr	r0, [pc, #492]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e72:	f004 f8a5 	bl	8004fc0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f7ff fc36 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4877      	ldr	r0, [pc, #476]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e84:	f004 f89c 	bl	8004fc0 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e035      	b.n	8000efa <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e02c      	b.n	8000eee <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e98:	3b20      	subs	r3, #32
 8000e9a:	4a72      	ldr	r2, [pc, #456]	; (8001064 <ILI9341_Draw_Char+0x234>)
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	441a      	add	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc11 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc0c 	bl	80006e8 <ILI9341_SPI_Send>
 8000ed0:	e00a      	b.n	8000ee8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc05 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc00 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddcf      	ble.n	8000e94 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddc6      	ble.n	8000e8e <ILI9341_Draw_Char+0x5e>
			break;
 8000f00:	e0a9      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	f7ff fca8 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4851      	ldr	r0, [pc, #324]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f1c:	f004 f850 	bl	8004fc0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f20:	202c      	movs	r0, #44	; 0x2c
 8000f22:	f7ff fbe1 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	484c      	ldr	r0, [pc, #304]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f2e:	f004 f847 	bl	8004fc0 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e035      	b.n	8000fa4 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e02c      	b.n	8000f98 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f42:	3b20      	subs	r3, #32
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	441a      	add	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f1c3 0307 	rsb	r3, r3, #7
 8000f58:	fa42 f303 	asr.w	r3, r2, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbbc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbb7 	bl	80006e8 <ILI9341_SPI_Send>
 8000f7a:	e00a      	b.n	8000f92 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fbb0 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fbab 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	ddcf      	ble.n	8000f3e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	ddc6      	ble.n	8000f38 <ILI9341_Draw_Char+0x108>
		break;
 8000faa:	e054      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3309      	adds	r3, #9
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3310      	adds	r3, #16
 8000fba:	f7ff fc53 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fc6:	f003 fffb 	bl	8004fc0 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fca:	202c      	movs	r0, #44	; 0x2c
 8000fcc:	f7ff fb8c 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fd8:	f003 fff2 	bl	8004fc0 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e035      	b.n	800104e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e02c      	b.n	8001042 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	441a      	add	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	fa42 f303 	asr.w	r3, r2, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fb67 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb62 	bl	80006e8 <ILI9341_SPI_Send>
 8001024:	e00a      	b.n	800103c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb5b 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb56 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddcf      	ble.n	8000fe8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b1d      	cmp	r3, #29
 8001052:	ddc6      	ble.n	8000fe2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001054:	bf00      	nop
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	0800a430 	.word	0x0800a430
 8001068:	0800a708 	.word	0x0800a708

0800106c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <Before_Sending_Data+0x20>)
 8001078:	f003 ffa2 	bl	8004fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <Before_Sending_Data+0x20>)
 8001084:	f003 ff9c 	bl	8004fc0 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020c00 	.word	0x40020c00

08001090 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <Before_Sending_Command+0x20>)
 800109c:	f003 ff90 	bl	8004fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <Before_Sending_Command+0x20>)
 80010a8:	f003 ff8a 	bl	8004fc0 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <Si468x_init>:
uint8_t actual_freq_id = 0;							//frequency table index of the frequency to which the Si468x is currently tuned in kHz

uint8_t actual_station = 0;

void Si468x_init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 80010b8:	2101      	movs	r1, #1
 80010ba:	482c      	ldr	r0, [pc, #176]	; (800116c <Si468x_init+0xb8>)
 80010bc:	f001 ff26 	bl	8002f0c <send_debug_msg>
	Si468x_reset();
 80010c0:	f000 f856 	bl	8001170 <Si468x_reset>
	Si468x_power_up();
 80010c4:	f000 f870 	bl	80011a8 <Si468x_power_up>
	Si468x_bootloader_load_host();
 80010c8:	f000 f8f2 	bl	80012b0 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 80010cc:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 80010d0:	f000 f962 	bl	8001398 <Si468x_firmware_load_flash>
	Si468x_boot();
 80010d4:	f000 fa00 	bl	80014d8 <Si468x_boot>
	Si468x_get_part_info();
 80010d8:	f000 fbaa 	bl	8001830 <Si468x_get_part_info>
	Si468x_get_sys_state();
 80010dc:	f000 fb22 	bl	8001724 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); //włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 80010e0:	2101      	movs	r1, #1
 80010e2:	f241 7012 	movw	r0, #5906	; 0x1712
 80010e6:	f000 fc13 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8A9); //dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010ea:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 80010ee:	f241 7010 	movw	r0, #5904	; 0x1710
 80010f2:	f000 fc0d 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01C6); //dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010f6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010fa:	f241 7011 	movw	r0, #5905	; 0x1711
 80010fe:	f000 fc07 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x12); //prog RSSI od kiedy łapie kanał, default 12
 8001102:	2112      	movs	r1, #18
 8001104:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001108:	f000 fc02 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); //określa które featury PAD będą przesyłane do hosta
 800110c:	f244 0105 	movw	r1, #16389	; 0x4005
 8001110:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 8001114:	f000 fbfc 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); //określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 8001118:	2101      	movs	r1, #1
 800111a:	f24b 3001 	movw	r0, #45825	; 0xb301
 800111e:	f000 fbf7 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); //określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001122:	2101      	movs	r1, #1
 8001124:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001128:	f000 fbf2 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);	//tylko soft mute włączone przy slabym sygnale
 800112c:	2101      	movs	r1, #1
 800112e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001132:	f000 fbed 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);	//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001136:	2105      	movs	r1, #5
 8001138:	f24b 5001 	movw	r0, #46337	; 0xb501
 800113c:	f000 fbe8 	bl	8001910 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); //limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001140:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001144:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001148:	f000 fbe2 	bl	8001910 <Si468x_set_property>
	Si468x_dab_get_freq_list(); //odczytujemy z ukladu liste czestotliwosci do tablicy
 800114c:	f000 fccc 	bl	8001ae8 <Si468x_dab_get_freq_list>

//	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala

	Si468x_dab_full_scan();
 8001150:	f001 fa82 	bl	8002658 <Si468x_dab_full_scan>

	Si468x_dab_tune_freq(CH_11B);
 8001154:	201b      	movs	r0, #27
 8001156:	f000 fd9f 	bl	8001c98 <Si468x_dab_tune_freq>
	HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f003 f92b 	bl	80043b8 <HAL_Delay>
	Si468x_dab_get_time();
 8001162:	f001 fdd9 	bl	8002d18 <Si468x_dab_get_time>
//			Si468x_dab_start_digital_service(services_list[i].service_id, services_list[i].components[0].subchannel_id);
//			break;
//		}
//	}

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	080098b4 	.word	0x080098b4

08001170 <Si468x_reset>:

void Si468x_reset()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001174:	2101      	movs	r1, #1
 8001176:	480a      	ldr	r0, [pc, #40]	; (80011a0 <Si468x_reset+0x30>)
 8001178:	f001 fec8 	bl	8002f0c <send_debug_msg>
	RESET_PIN_LOW;
 800117c:	2200      	movs	r2, #0
 800117e:	2120      	movs	r1, #32
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <Si468x_reset+0x34>)
 8001182:	f003 ff1d 	bl	8004fc0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001186:	2064      	movs	r0, #100	; 0x64
 8001188:	f003 f916 	bl	80043b8 <HAL_Delay>
	RESET_PIN_HIGH;
 800118c:	2201      	movs	r2, #1
 800118e:	2120      	movs	r1, #32
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <Si468x_reset+0x34>)
 8001192:	f003 ff15 	bl	8004fc0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001196:	20c8      	movs	r0, #200	; 0xc8
 8001198:	f003 f90e 	bl	80043b8 <HAL_Delay>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	08009904 	.word	0x08009904
 80011a4:	40020800 	.word	0x40020800

080011a8 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 80011ac:	2101      	movs	r1, #1
 80011ae:	4826      	ldr	r0, [pc, #152]	; (8001248 <Si468x_power_up+0xa0>)
 80011b0:	f001 feac 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <Si468x_power_up+0xa4>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <Si468x_power_up+0xa4>)
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <Si468x_power_up+0xa4>)
 80011c2:	2217      	movs	r2, #23
 80011c4:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <Si468x_power_up+0xa4>)
 80011c8:	2250      	movs	r2, #80	; 0x50
 80011ca:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <Si468x_power_up+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <Si468x_power_up+0xa4>)
 80011d4:	22f8      	movs	r2, #248	; 0xf8
 80011d6:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <Si468x_power_up+0xa4>)
 80011da:	2224      	movs	r2, #36	; 0x24
 80011dc:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <Si468x_power_up+0xa4>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <Si468x_power_up+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <Si468x_power_up+0xa4>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <Si468x_power_up+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <Si468x_power_up+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <Si468x_power_up+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <Si468x_power_up+0xa4>)
 8001204:	2228      	movs	r2, #40	; 0x28
 8001206:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <Si468x_power_up+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <Si468x_power_up+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001214:	490d      	ldr	r1, [pc, #52]	; (800124c <Si468x_power_up+0xa4>)
 8001216:	2010      	movs	r0, #16
 8001218:	f000 fa52 	bl	80016c0 <Si468x_write_command>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <Si468x_power_up+0xa8>)
 8001222:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f003 f8c7 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800122a:	490a      	ldr	r1, [pc, #40]	; (8001254 <Si468x_power_up+0xac>)
 800122c:	2005      	movs	r0, #5
 800122e:	f000 fa69 	bl	8001704 <Si468x_read_reply>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <Si468x_power_up+0xa8>)
 8001238:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800123a:	2101      	movs	r1, #1
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <Si468x_power_up+0xb0>)
 800123e:	f001 fe65 	bl	8002f0c <send_debug_msg>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08009918 	.word	0x08009918
 800124c:	200000dc 	.word	0x200000dc
 8001250:	200018fc 	.word	0x200018fc
 8001254:	200010dc 	.word	0x200010dc
 8001258:	08009954 	.word	0x08009954

0800125c <Si468x_load_init>:

void Si468x_load_init()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001260:	2101      	movs	r1, #1
 8001262:	480f      	ldr	r0, [pc, #60]	; (80012a0 <Si468x_load_init+0x44>)
 8001264:	f001 fe52 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <Si468x_load_init+0x48>)
 800126a:	2206      	movs	r2, #6
 800126c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <Si468x_load_init+0x48>)
 8001270:	2200      	movs	r2, #0
 8001272:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001274:	490b      	ldr	r1, [pc, #44]	; (80012a4 <Si468x_load_init+0x48>)
 8001276:	2002      	movs	r0, #2
 8001278:	f000 fa22 	bl	80016c0 <Si468x_write_command>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <Si468x_load_init+0x4c>)
 8001282:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f003 f897 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <Si468x_load_init+0x50>)
 800128c:	2005      	movs	r0, #5
 800128e:	f000 fa39 	bl	8001704 <Si468x_read_reply>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <Si468x_load_init+0x4c>)
 8001298:	701a      	strb	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08009974 	.word	0x08009974
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	200018fc 	.word	0x200018fc
 80012ac:	200010dc 	.word	0x200010dc

080012b0 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 80012b6:	2101      	movs	r1, #1
 80012b8:	4830      	ldr	r0, [pc, #192]	; (800137c <Si468x_bootloader_load_host+0xcc>)
 80012ba:	f001 fe27 	bl	8002f0c <send_debug_msg>
	Si468x_load_init();
 80012be:	f7ff ffcd 	bl	800125c <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 80012c2:	f241 63a4 	movw	r3, #5796	; 0x16a4
 80012c6:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <Si468x_bootloader_load_host+0xd0>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80012ce:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <Si468x_bootloader_load_host+0xd0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012d4:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <Si468x_bootloader_load_host+0xd0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <Si468x_bootloader_load_host+0xd0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	80fb      	strh	r3, [r7, #6]
 80012e4:	e03e      	b.n	8001364 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	e014      	b.n	8001316 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 80012ec:	88ba      	ldrh	r2, [r7, #4]
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	4924      	ldr	r1, [pc, #144]	; (8001384 <Si468x_bootloader_load_host+0xd4>)
 80012f2:	fba1 1303 	umull	r1, r3, r1, r3
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	441a      	add	r2, r3
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	491f      	ldr	r1, [pc, #124]	; (8001388 <Si468x_bootloader_load_host+0xd8>)
 800130a:	5c89      	ldrb	r1, [r1, r2]
 800130c:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <Si468x_bootloader_load_host+0xd0>)
 800130e:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001310:	88bb      	ldrh	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	80bb      	strh	r3, [r7, #4]
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <Si468x_bootloader_load_host+0xd4>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	b29b      	uxth	r3, r3
 8001322:	88ba      	ldrh	r2, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3e1      	bcc.n	80012ec <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <Si468x_bootloader_load_host+0xd4>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	085b      	lsrs	r3, r3, #1
 8001332:	b29b      	uxth	r3, r3
 8001334:	3304      	adds	r3, #4
 8001336:	b29b      	uxth	r3, r3
 8001338:	4911      	ldr	r1, [pc, #68]	; (8001380 <Si468x_bootloader_load_host+0xd0>)
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f9c0 	bl	80016c0 <Si468x_write_command>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <Si468x_bootloader_load_host+0xdc>)
 8001346:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f003 f835 	bl	80043b8 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800134e:	4910      	ldr	r1, [pc, #64]	; (8001390 <Si468x_bootloader_load_host+0xe0>)
 8001350:	2005      	movs	r0, #5
 8001352:	f000 f9d7 	bl	8001704 <Si468x_read_reply>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <Si468x_bootloader_load_host+0xdc>)
 800135c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	3301      	adds	r3, #1
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d9bd      	bls.n	80012e6 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800136a:	2101      	movs	r1, #1
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <Si468x_bootloader_load_host+0xe4>)
 800136e:	f001 fdcd 	bl	8002f0c <send_debug_msg>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	0800998c 	.word	0x0800998c
 8001380:	200000dc 	.word	0x200000dc
 8001384:	aaaaaaab 	.word	0xaaaaaaab
 8001388:	0800acf8 	.word	0x0800acf8
 800138c:	200018fc 	.word	0x200018fc
 8001390:	200010dc 	.word	0x200010dc
 8001394:	080099c8 	.word	0x080099c8

08001398 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 80013a0:	2101      	movs	r1, #1
 80013a2:	4845      	ldr	r0, [pc, #276]	; (80014b8 <Si468x_firmware_load_flash+0x120>)
 80013a4:	f001 fdb2 	bl	8002f0c <send_debug_msg>
	Si468x_load_init();
 80013a8:	f7ff ff58 	bl	800125c <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013ae:	2205      	movs	r2, #5
 80013b0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 80013b2:	4b42      	ldr	r3, [pc, #264]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 80013b8:	4b40      	ldr	r3, [pc, #256]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 80013be:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013ca:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013d4:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0c1b      	lsrs	r3, r3, #16
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013de:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	0e1b      	lsrs	r3, r3, #24
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b35      	ldr	r3, [pc, #212]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013e8:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 80013ea:	2100      	movs	r1, #0
 80013ec:	4834      	ldr	r0, [pc, #208]	; (80014c0 <Si468x_firmware_load_flash+0x128>)
 80013ee:	f001 fd8d 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 80013f4:	791b      	ldrb	r3, [r3, #4]
 80013f6:	2210      	movs	r2, #16
 80013f8:	4932      	ldr	r1, [pc, #200]	; (80014c4 <Si468x_firmware_load_flash+0x12c>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f008 f958 	bl	80096b0 <itoa>
 8001400:	4603      	mov	r3, r0
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fd81 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 800140a:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 800140c:	795b      	ldrb	r3, [r3, #5]
 800140e:	2210      	movs	r2, #16
 8001410:	492c      	ldr	r1, [pc, #176]	; (80014c4 <Si468x_firmware_load_flash+0x12c>)
 8001412:	4618      	mov	r0, r3
 8001414:	f008 f94c 	bl	80096b0 <itoa>
 8001418:	4603      	mov	r3, r0
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f001 fd75 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 8001424:	799b      	ldrb	r3, [r3, #6]
 8001426:	2210      	movs	r2, #16
 8001428:	4926      	ldr	r1, [pc, #152]	; (80014c4 <Si468x_firmware_load_flash+0x12c>)
 800142a:	4618      	mov	r0, r3
 800142c:	f008 f940 	bl	80096b0 <itoa>
 8001430:	4603      	mov	r3, r0
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f001 fd69 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 800143c:	79db      	ldrb	r3, [r3, #7]
 800143e:	2210      	movs	r2, #16
 8001440:	4920      	ldr	r1, [pc, #128]	; (80014c4 <Si468x_firmware_load_flash+0x12c>)
 8001442:	4618      	mov	r0, r3
 8001444:	f008 f934 	bl	80096b0 <itoa>
 8001448:	4603      	mov	r3, r0
 800144a:	2101      	movs	r1, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fd5d 	bl	8002f0c <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 8001454:	2200      	movs	r2, #0
 8001456:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 800145a:	2200      	movs	r2, #0
 800145c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 8001460:	2200      	movs	r2, #0
 8001462:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 8001466:	2200      	movs	r2, #0
 8001468:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800146a:	4914      	ldr	r1, [pc, #80]	; (80014bc <Si468x_firmware_load_flash+0x124>)
 800146c:	200c      	movs	r0, #12
 800146e:	f000 f927 	bl	80016c0 <Si468x_write_command>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <Si468x_firmware_load_flash+0x130>)
 8001478:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f002 ff9c 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001480:	4912      	ldr	r1, [pc, #72]	; (80014cc <Si468x_firmware_load_flash+0x134>)
 8001482:	2005      	movs	r0, #5
 8001484:	f000 f93e 	bl	8001704 <Si468x_read_reply>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <Si468x_firmware_load_flash+0x130>)
 800148e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <Si468x_firmware_load_flash+0x134>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800149c:	2101      	movs	r1, #1
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <Si468x_firmware_load_flash+0x138>)
 80014a0:	f001 fd34 	bl	8002f0c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 80014a4:	e003      	b.n	80014ae <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 80014a6:	2101      	movs	r1, #1
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <Si468x_firmware_load_flash+0x13c>)
 80014aa:	f001 fd2f 	bl	8002f0c <send_debug_msg>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	080099e8 	.word	0x080099e8
 80014bc:	200000dc 	.word	0x200000dc
 80014c0:	08009a24 	.word	0x08009a24
 80014c4:	200018dc 	.word	0x200018dc
 80014c8:	200018fc 	.word	0x200018fc
 80014cc:	200010dc 	.word	0x200010dc
 80014d0:	08009a38 	.word	0x08009a38
 80014d4:	08009a48 	.word	0x08009a48

080014d8 <Si468x_boot>:

void Si468x_boot()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014dc:	2101      	movs	r1, #1
 80014de:	4816      	ldr	r0, [pc, #88]	; (8001538 <Si468x_boot+0x60>)
 80014e0:	f001 fd14 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <Si468x_boot+0x64>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <Si468x_boot+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014f0:	4912      	ldr	r1, [pc, #72]	; (800153c <Si468x_boot+0x64>)
 80014f2:	2002      	movs	r0, #2
 80014f4:	f000 f8e4 	bl	80016c0 <Si468x_write_command>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <Si468x_boot+0x68>)
 80014fe:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f002 ff59 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001506:	490f      	ldr	r1, [pc, #60]	; (8001544 <Si468x_boot+0x6c>)
 8001508:	2005      	movs	r0, #5
 800150a:	f000 f8fb 	bl	8001704 <Si468x_read_reply>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <Si468x_boot+0x68>)
 8001514:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <Si468x_boot+0x6c>)
 8001518:	78db      	ldrb	r3, [r3, #3]
 800151a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800151e:	2bc0      	cmp	r3, #192	; 0xc0
 8001520:	d104      	bne.n	800152c <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 8001522:	2101      	movs	r1, #1
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <Si468x_boot+0x70>)
 8001526:	f001 fcf1 	bl	8002f0c <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 800152a:	e003      	b.n	8001534 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 800152c:	2101      	movs	r1, #1
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <Si468x_boot+0x74>)
 8001530:	f001 fcec 	bl	8002f0c <send_debug_msg>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	08009a64 	.word	0x08009a64
 800153c:	200000dc 	.word	0x200000dc
 8001540:	200018fc 	.word	0x200018fc
 8001544:	200010dc 	.word	0x200010dc
 8001548:	08009aa0 	.word	0x08009aa0
 800154c:	08009abc 	.word	0x08009abc

08001550 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800155a:	1df9      	adds	r1, r7, #7
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	2201      	movs	r2, #1
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <Si468x_write_single_byte+0x20>)
 8001562:	f006 f888 	bl	8007676 <HAL_SPI_Transmit>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200025e8 	.word	0x200025e8

08001574 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800157e:	1df9      	adds	r1, r7, #7
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	2201      	movs	r2, #1
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <Si468x_read_single_byte+0x20>)
 8001586:	f006 f9b2 	bl	80078ee <HAL_SPI_Receive>
	return data_buffer;
 800158a:	79fb      	ldrb	r3, [r7, #7]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200025e8 	.word	0x200025e8

08001598 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	e01c      	b.n	80015e6 <Si468x_wait_for_CTS+0x4e>
	{
		Si468x_read_multiple(1, &cts_status);
 80015ac:	f107 030d 	add.w	r3, r7, #13
 80015b0:	4619      	mov	r1, r3
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 f850 	bl	8001658 <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 80015b8:	7b7b      	ldrb	r3, [r7, #13]
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da0c      	bge.n	80015da <Si468x_wait_for_CTS+0x42>
		{
			if((cts_status & 0x40) == 0x40)
 80015c0:	7b7b      	ldrb	r3, [r7, #13]
 80015c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <Si468x_wait_for_CTS+0x3e>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 80015ca:	2101      	movs	r1, #1
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <Si468x_wait_for_CTS+0x68>)
 80015ce:	f001 fc9d 	bl	8002f0c <send_debug_msg>
				return COMMAND_ERROR;
 80015d2:	2320      	movs	r3, #32
 80015d4:	e010      	b.n	80015f8 <Si468x_wait_for_CTS+0x60>
			}
			return SUCCESS;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e00e      	b.n	80015f8 <Si468x_wait_for_CTS+0x60>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f002 feec 	bl	80043b8 <HAL_Delay>
	for(i = 0; i < timeout; i++)
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	3301      	adds	r3, #1
 80015e4:	81fb      	strh	r3, [r7, #14]
 80015e6:	89fa      	ldrh	r2, [r7, #14]
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3de      	bcc.n	80015ac <Si468x_wait_for_CTS+0x14>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015ee:	2101      	movs	r1, #1
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <Si468x_wait_for_CTS+0x6c>)
 80015f2:	f001 fc8b 	bl	8002f0c <send_debug_msg>
	return TIMEOUT;
 80015f6:	2308      	movs	r3, #8
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	08009ad0 	.word	0x08009ad0
 8001604:	08009af8 	.word	0x08009af8

08001608 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001618:	2200      	movs	r2, #0
 800161a:	2110      	movs	r1, #16
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <Si468x_write_multiple+0x4c>)
 800161e:	f003 fccf 	bl	8004fc0 <HAL_GPIO_WritePin>
	while(len--)
 8001622:	e009      	b.n	8001638 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	81fa      	strh	r2, [r7, #14]
 800162a:	461a      	mov	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff8c 	bl	8001550 <Si468x_write_single_byte>
	while(len--)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	1e5a      	subs	r2, r3, #1
 800163c:	80fa      	strh	r2, [r7, #6]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 8001642:	2201      	movs	r2, #1
 8001644:	2110      	movs	r1, #16
 8001646:	4803      	ldr	r0, [pc, #12]	; (8001654 <Si468x_write_multiple+0x4c>)
 8001648:	f003 fcba 	bl	8004fc0 <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40020800 	.word	0x40020800

08001658 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001668:	2201      	movs	r2, #1
 800166a:	2110      	movs	r1, #16
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <Si468x_read_multiple+0x64>)
 800166e:	f003 fca7 	bl	8004fc0 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001672:	2003      	movs	r0, #3
 8001674:	f002 fea0 	bl	80043b8 <HAL_Delay>
	CS_PIN_LOW;
 8001678:	2200      	movs	r2, #0
 800167a:	2110      	movs	r1, #16
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <Si468x_read_multiple+0x64>)
 800167e:	f003 fc9f 	bl	8004fc0 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ff64 	bl	8001550 <Si468x_write_single_byte>
	while(len--)
 8001688:	e009      	b.n	800169e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	81fa      	strh	r2, [r7, #14]
 8001690:	461a      	mov	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	189c      	adds	r4, r3, r2
 8001696:	f7ff ff6d 	bl	8001574 <Si468x_read_single_byte>
 800169a:	4603      	mov	r3, r0
 800169c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	80fa      	strh	r2, [r7, #6]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 80016a8:	2201      	movs	r2, #1
 80016aa:	2110      	movs	r1, #16
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <Si468x_read_multiple+0x64>)
 80016ae:	f003 fc87 	bl	8004fc0 <HAL_GPIO_WritePin>
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020800 	.word	0x40020800

080016c0 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d0:	f7ff ff62 	bl	8001598 <Si468x_wait_for_CTS>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <Si468x_write_command+0x24>
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d10a      	bne.n	80016fa <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff8d 	bl	8001608 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f2:	f7ff ff51 	bl	8001598 <Si468x_wait_for_CTS>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff9f 	bl	8001658 <Si468x_read_multiple>
	return SUCCESS;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001728:	2101      	movs	r1, #1
 800172a:	4833      	ldr	r0, [pc, #204]	; (80017f8 <Si468x_get_sys_state+0xd4>)
 800172c:	f001 fbee 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001730:	4b32      	ldr	r3, [pc, #200]	; (80017fc <Si468x_get_sys_state+0xd8>)
 8001732:	2209      	movs	r2, #9
 8001734:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <Si468x_get_sys_state+0xd8>)
 8001738:	2200      	movs	r2, #0
 800173a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800173c:	492f      	ldr	r1, [pc, #188]	; (80017fc <Si468x_get_sys_state+0xd8>)
 800173e:	2002      	movs	r0, #2
 8001740:	f7ff ffbe 	bl	80016c0 <Si468x_write_command>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <Si468x_get_sys_state+0xdc>)
 800174a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800174c:	2001      	movs	r0, #1
 800174e:	f002 fe33 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001752:	492c      	ldr	r1, [pc, #176]	; (8001804 <Si468x_get_sys_state+0xe0>)
 8001754:	2005      	movs	r0, #5
 8001756:	f7ff ffd5 	bl	8001704 <Si468x_read_reply>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <Si468x_get_sys_state+0xdc>)
 8001760:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 8001762:	2100      	movs	r1, #0
 8001764:	4828      	ldr	r0, [pc, #160]	; (8001808 <Si468x_get_sys_state+0xe4>)
 8001766:	f001 fbd1 	bl	8002f0c <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <Si468x_get_sys_state+0xe0>)
 800176c:	791b      	ldrb	r3, [r3, #4]
 800176e:	2b07      	cmp	r3, #7
 8001770:	d83a      	bhi.n	80017e8 <Si468x_get_sys_state+0xc4>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <Si468x_get_sys_state+0x54>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	08001799 	.word	0x08001799
 800177c:	080017a3 	.word	0x080017a3
 8001780:	080017ad 	.word	0x080017ad
 8001784:	080017b7 	.word	0x080017b7
 8001788:	080017c1 	.word	0x080017c1
 800178c:	080017cb 	.word	0x080017cb
 8001790:	080017d5 	.word	0x080017d5
 8001794:	080017df 	.word	0x080017df
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001798:	2101      	movs	r1, #1
 800179a:	481c      	ldr	r0, [pc, #112]	; (800180c <Si468x_get_sys_state+0xe8>)
 800179c:	f001 fbb6 	bl	8002f0c <send_debug_msg>
			break;
 80017a0:	e027      	b.n	80017f2 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 80017a2:	2101      	movs	r1, #1
 80017a4:	481a      	ldr	r0, [pc, #104]	; (8001810 <Si468x_get_sys_state+0xec>)
 80017a6:	f001 fbb1 	bl	8002f0c <send_debug_msg>
			break;
 80017aa:	e022      	b.n	80017f2 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 80017ac:	2101      	movs	r1, #1
 80017ae:	4819      	ldr	r0, [pc, #100]	; (8001814 <Si468x_get_sys_state+0xf0>)
 80017b0:	f001 fbac 	bl	8002f0c <send_debug_msg>
			break;
 80017b4:	e01d      	b.n	80017f2 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 80017b6:	2101      	movs	r1, #1
 80017b8:	4817      	ldr	r0, [pc, #92]	; (8001818 <Si468x_get_sys_state+0xf4>)
 80017ba:	f001 fba7 	bl	8002f0c <send_debug_msg>
			break;
 80017be:	e018      	b.n	80017f2 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017c0:	2101      	movs	r1, #1
 80017c2:	4816      	ldr	r0, [pc, #88]	; (800181c <Si468x_get_sys_state+0xf8>)
 80017c4:	f001 fba2 	bl	8002f0c <send_debug_msg>
			break;
 80017c8:	e013      	b.n	80017f2 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017ca:	2101      	movs	r1, #1
 80017cc:	4814      	ldr	r0, [pc, #80]	; (8001820 <Si468x_get_sys_state+0xfc>)
 80017ce:	f001 fb9d 	bl	8002f0c <send_debug_msg>
			break;
 80017d2:	e00e      	b.n	80017f2 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017d4:	2101      	movs	r1, #1
 80017d6:	4813      	ldr	r0, [pc, #76]	; (8001824 <Si468x_get_sys_state+0x100>)
 80017d8:	f001 fb98 	bl	8002f0c <send_debug_msg>
			break;
 80017dc:	e009      	b.n	80017f2 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017de:	2101      	movs	r1, #1
 80017e0:	4811      	ldr	r0, [pc, #68]	; (8001828 <Si468x_get_sys_state+0x104>)
 80017e2:	f001 fb93 	bl	8002f0c <send_debug_msg>
			break;
 80017e6:	e004      	b.n	80017f2 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017e8:	2101      	movs	r1, #1
 80017ea:	4810      	ldr	r0, [pc, #64]	; (800182c <Si468x_get_sys_state+0x108>)
 80017ec:	f001 fb8e 	bl	8002f0c <send_debug_msg>
			break;
 80017f0:	bf00      	nop
	}
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	08009b08 	.word	0x08009b08
 80017fc:	200000dc 	.word	0x200000dc
 8001800:	200018fc 	.word	0x200018fc
 8001804:	200010dc 	.word	0x200010dc
 8001808:	08009b44 	.word	0x08009b44
 800180c:	08009b50 	.word	0x08009b50
 8001810:	08009b68 	.word	0x08009b68
 8001814:	08009b80 	.word	0x08009b80
 8001818:	08009b98 	.word	0x08009b98
 800181c:	08009bc0 	.word	0x08009bc0
 8001820:	08009bdc 	.word	0x08009bdc
 8001824:	08009bf4 	.word	0x08009bf4
 8001828:	08009c10 	.word	0x08009c10
 800182c:	08009c28 	.word	0x08009c28

08001830 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001836:	2101      	movs	r1, #1
 8001838:	482d      	ldr	r0, [pc, #180]	; (80018f0 <Si468x_get_part_info+0xc0>)
 800183a:	f001 fb67 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <Si468x_get_part_info+0xc4>)
 8001840:	2208      	movs	r2, #8
 8001842:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <Si468x_get_part_info+0xc4>)
 8001846:	2200      	movs	r2, #0
 8001848:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800184a:	492a      	ldr	r1, [pc, #168]	; (80018f4 <Si468x_get_part_info+0xc4>)
 800184c:	2002      	movs	r0, #2
 800184e:	f7ff ff37 	bl	80016c0 <Si468x_write_command>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <Si468x_get_part_info+0xc8>)
 8001858:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f002 fdac 	bl	80043b8 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fe75 	bl	8001550 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001866:	4925      	ldr	r1, [pc, #148]	; (80018fc <Si468x_get_part_info+0xcc>)
 8001868:	200a      	movs	r0, #10
 800186a:	f7ff ff4b 	bl	8001704 <Si468x_read_reply>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <Si468x_get_part_info+0xc8>)
 8001874:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001876:	2100      	movs	r1, #0
 8001878:	4821      	ldr	r0, [pc, #132]	; (8001900 <Si468x_get_part_info+0xd0>)
 800187a:	f001 fb47 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <Si468x_get_part_info+0xcc>)
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	220a      	movs	r2, #10
 8001884:	491f      	ldr	r1, [pc, #124]	; (8001904 <Si468x_get_part_info+0xd4>)
 8001886:	4618      	mov	r0, r3
 8001888:	f007 ff12 	bl	80096b0 <itoa>
 800188c:	4603      	mov	r3, r0
 800188e:	2101      	movs	r1, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fb3b 	bl	8002f0c <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001896:	2100      	movs	r1, #0
 8001898:	481b      	ldr	r0, [pc, #108]	; (8001908 <Si468x_get_part_info+0xd8>)
 800189a:	f001 fb37 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <Si468x_get_part_info+0xcc>)
 80018a0:	795b      	ldrb	r3, [r3, #5]
 80018a2:	220a      	movs	r2, #10
 80018a4:	4917      	ldr	r1, [pc, #92]	; (8001904 <Si468x_get_part_info+0xd4>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f007 ff02 	bl	80096b0 <itoa>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2101      	movs	r1, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 fb2b 	bl	8002f0c <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 80018b6:	2100      	movs	r1, #0
 80018b8:	4814      	ldr	r0, [pc, #80]	; (800190c <Si468x_get_part_info+0xdc>)
 80018ba:	f001 fb27 	bl	8002f0c <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <Si468x_get_part_info+0xcc>)
 80018c0:	7a5b      	ldrb	r3, [r3, #9]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <Si468x_get_part_info+0xcc>)
 80018ca:	7a1b      	ldrb	r3, [r3, #8]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	220a      	movs	r2, #10
 80018d6:	490b      	ldr	r1, [pc, #44]	; (8001904 <Si468x_get_part_info+0xd4>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f007 fee9 	bl	80096b0 <itoa>
 80018de:	4603      	mov	r3, r0
 80018e0:	2101      	movs	r1, #1
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 fb12 	bl	8002f0c <send_debug_msg>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	08009c3c 	.word	0x08009c3c
 80018f4:	200000dc 	.word	0x200000dc
 80018f8:	200018fc 	.word	0x200018fc
 80018fc:	200010dc 	.word	0x200010dc
 8001900:	08009c78 	.word	0x08009c78
 8001904:	200018dc 	.word	0x200018dc
 8001908:	08009c88 	.word	0x08009c88
 800190c:	08009c94 	.word	0x08009c94

08001910 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	4613      	mov	r3, r2
 800191e:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001920:	2101      	movs	r1, #1
 8001922:	4832      	ldr	r0, [pc, #200]	; (80019ec <Si468x_set_property+0xdc>)
 8001924:	f001 faf2 	bl	8002f0c <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001928:	2100      	movs	r1, #0
 800192a:	4831      	ldr	r0, [pc, #196]	; (80019f0 <Si468x_set_property+0xe0>)
 800192c:	f001 faee 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	2210      	movs	r2, #16
 8001934:	492f      	ldr	r1, [pc, #188]	; (80019f4 <Si468x_set_property+0xe4>)
 8001936:	4618      	mov	r0, r3
 8001938:	f007 feba 	bl	80096b0 <itoa>
 800193c:	4603      	mov	r3, r0
 800193e:	2101      	movs	r1, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fae3 	bl	8002f0c <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001946:	2100      	movs	r1, #0
 8001948:	482b      	ldr	r0, [pc, #172]	; (80019f8 <Si468x_set_property+0xe8>)
 800194a:	f001 fadf 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800194e:	88bb      	ldrh	r3, [r7, #4]
 8001950:	2210      	movs	r2, #16
 8001952:	4928      	ldr	r1, [pc, #160]	; (80019f4 <Si468x_set_property+0xe4>)
 8001954:	4618      	mov	r0, r3
 8001956:	f007 feab 	bl	80096b0 <itoa>
 800195a:	4603      	mov	r3, r0
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fad4 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <Si468x_set_property+0xec>)
 8001966:	2213      	movs	r2, #19
 8001968:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <Si468x_set_property+0xec>)
 800196c:	2200      	movs	r2, #0
 800196e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <Si468x_set_property+0xec>)
 8001976:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <Si468x_set_property+0xec>)
 8001982:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001984:	88bb      	ldrh	r3, [r7, #4]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <Si468x_set_property+0xec>)
 800198a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 800198c:	88bb      	ldrh	r3, [r7, #4]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	b29b      	uxth	r3, r3
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <Si468x_set_property+0xec>)
 8001996:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001998:	4918      	ldr	r1, [pc, #96]	; (80019fc <Si468x_set_property+0xec>)
 800199a:	2006      	movs	r0, #6
 800199c:	f7ff fe90 	bl	80016c0 <Si468x_write_command>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <Si468x_set_property+0xf0>)
 80019a6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f002 fd05 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80019ae:	4915      	ldr	r1, [pc, #84]	; (8001a04 <Si468x_set_property+0xf4>)
 80019b0:	2005      	movs	r0, #5
 80019b2:	f7ff fea7 	bl	8001704 <Si468x_read_reply>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <Si468x_set_property+0xf0>)
 80019bc:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f825 	bl	8001a10 <Si468x_get_property>
 80019c6:	4603      	mov	r3, r0
 80019c8:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019ca:	89fa      	ldrh	r2, [r7, #14]
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d104      	bne.n	80019dc <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019d2:	2101      	movs	r1, #1
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <Si468x_set_property+0xf8>)
 80019d6:	f001 fa99 	bl	8002f0c <send_debug_msg>
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}

}
 80019da:	e003      	b.n	80019e4 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019dc:	2101      	movs	r1, #1
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <Si468x_set_property+0xfc>)
 80019e0:	f001 fa94 	bl	8002f0c <send_debug_msg>
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	08009ca4 	.word	0x08009ca4
 80019f0:	08009ce4 	.word	0x08009ce4
 80019f4:	200018dc 	.word	0x200018dc
 80019f8:	08009cf4 	.word	0x08009cf4
 80019fc:	200000dc 	.word	0x200000dc
 8001a00:	200018fc 	.word	0x200018fc
 8001a04:	200010dc 	.word	0x200010dc
 8001a08:	08009d10 	.word	0x08009d10
 8001a0c:	08009d2c 	.word	0x08009d2c

08001a10 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	482b      	ldr	r0, [pc, #172]	; (8001acc <Si468x_get_property+0xbc>)
 8001a1e:	f001 fa75 	bl	8002f0c <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a22:	2100      	movs	r1, #0
 8001a24:	482a      	ldr	r0, [pc, #168]	; (8001ad0 <Si468x_get_property+0xc0>)
 8001a26:	f001 fa71 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	4929      	ldr	r1, [pc, #164]	; (8001ad4 <Si468x_get_property+0xc4>)
 8001a30:	4618      	mov	r0, r3
 8001a32:	f007 fe3d 	bl	80096b0 <itoa>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fa66 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <Si468x_get_property+0xc8>)
 8001a42:	2214      	movs	r2, #20
 8001a44:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <Si468x_get_property+0xc8>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <Si468x_get_property+0xc8>)
 8001a52:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <Si468x_get_property+0xc8>)
 8001a5e:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a60:	491d      	ldr	r1, [pc, #116]	; (8001ad8 <Si468x_get_property+0xc8>)
 8001a62:	2004      	movs	r0, #4
 8001a64:	f7ff fe2c 	bl	80016c0 <Si468x_write_command>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <Si468x_get_property+0xcc>)
 8001a6e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f002 fca1 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a76:	491a      	ldr	r1, [pc, #104]	; (8001ae0 <Si468x_get_property+0xd0>)
 8001a78:	2006      	movs	r0, #6
 8001a7a:	f7ff fe43 	bl	8001704 <Si468x_read_reply>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <Si468x_get_property+0xcc>)
 8001a84:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a86:	2100      	movs	r1, #0
 8001a88:	4816      	ldr	r0, [pc, #88]	; (8001ae4 <Si468x_get_property+0xd4>)
 8001a8a:	f001 fa3f 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <Si468x_get_property+0xd0>)
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <Si468x_get_property+0xd0>)
 8001a96:	7912      	ldrb	r2, [r2, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <Si468x_get_property+0xc4>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 fe06 	bl	80096b0 <itoa>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fa2f 	bl	8002f0c <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <Si468x_get_property+0xd0>)
 8001ab0:	795b      	ldrb	r3, [r3, #5]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <Si468x_get_property+0xd0>)
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08009d44 	.word	0x08009d44
 8001ad0:	08009ce4 	.word	0x08009ce4
 8001ad4:	200018dc 	.word	0x200018dc
 8001ad8:	200000dc 	.word	0x200000dc
 8001adc:	200018fc 	.word	0x200018fc
 8001ae0:	200010dc 	.word	0x200010dc
 8001ae4:	08009d80 	.word	0x08009d80

08001ae8 <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001aee:	2101      	movs	r1, #1
 8001af0:	485c      	ldr	r0, [pc, #368]	; (8001c64 <Si468x_dab_get_freq_list+0x17c>)
 8001af2:	f001 fa0b 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <Si468x_dab_get_freq_list+0x180>)
 8001af8:	22b9      	movs	r2, #185	; 0xb9
 8001afa:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001afc:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <Si468x_dab_get_freq_list+0x180>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001b02:	4959      	ldr	r1, [pc, #356]	; (8001c68 <Si468x_dab_get_freq_list+0x180>)
 8001b04:	2002      	movs	r0, #2
 8001b06:	f7ff fddb 	bl	80016c0 <Si468x_write_command>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <Si468x_dab_get_freq_list+0x184>)
 8001b10:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f002 fc50 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b18:	4955      	ldr	r1, [pc, #340]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001b1a:	2005      	movs	r0, #5
 8001b1c:	f7ff fdf2 	bl	8001704 <Si468x_read_reply>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <Si468x_dab_get_freq_list+0x184>)
 8001b26:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001b28:	4b51      	ldr	r3, [pc, #324]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <Si468x_dab_get_freq_list+0x56>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b34:	2101      	movs	r1, #1
 8001b36:	484f      	ldr	r0, [pc, #316]	; (8001c74 <Si468x_dab_get_freq_list+0x18c>)
 8001b38:	f001 f9e8 	bl	8002f0c <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b3c:	e08e      	b.n	8001c5c <Si468x_dab_get_freq_list+0x174>
		if(dab_spi_rx_buffer[4])
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8086 	beq.w	8001c54 <Si468x_dab_get_freq_list+0x16c>
			uint8_t read_offset = 2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	70fb      	strb	r3, [r7, #3]
			freq_cnt = dab_spi_rx_buffer[4];
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001b4e:	791a      	ldrb	r2, [r3, #4]
 8001b50:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <Si468x_dab_get_freq_list+0x190>)
 8001b52:	701a      	strb	r2, [r3, #0]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b54:	2100      	movs	r1, #0
 8001b56:	4849      	ldr	r0, [pc, #292]	; (8001c7c <Si468x_dab_get_freq_list+0x194>)
 8001b58:	f001 f9d8 	bl	8002f0c <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b5c:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <Si468x_dab_get_freq_list+0x190>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	220a      	movs	r2, #10
 8001b62:	4947      	ldr	r1, [pc, #284]	; (8001c80 <Si468x_dab_get_freq_list+0x198>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f007 fda3 	bl	80096b0 <itoa>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 f9cc 	bl	8002f0c <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b74:	2101      	movs	r1, #1
 8001b76:	4843      	ldr	r0, [pc, #268]	; (8001c84 <Si468x_dab_get_freq_list+0x19c>)
 8001b78:	f001 f9c8 	bl	8002f0c <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001b7c:	493c      	ldr	r1, [pc, #240]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001b7e:	2003      	movs	r0, #3
 8001b80:	f7ff fdc0 	bl	8001704 <Si468x_read_reply>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <Si468x_dab_get_freq_list+0x184>)
 8001b8a:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <Si468x_dab_get_freq_list+0x190>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	4413      	add	r3, r2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4934      	ldr	r1, [pc, #208]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fdb0 	bl	8001704 <Si468x_read_reply>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <Si468x_dab_get_freq_list+0x184>)
 8001baa:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	e049      	b.n	8001c46 <Si468x_dab_get_freq_list+0x15e>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4a2d      	ldr	r2, [pc, #180]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4a29      	ldr	r2, [pc, #164]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	18ca      	adds	r2, r1, r3
 8001bd2:	78f9      	ldrb	r1, [r7, #3]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	440b      	add	r3, r1
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	4924      	ldr	r1, [pc, #144]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	441a      	add	r2, r3
 8001be4:	78f9      	ldrb	r1, [r7, #3]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	440b      	add	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	3303      	adds	r3, #3
 8001bee:	4920      	ldr	r1, [pc, #128]	; (8001c70 <Si468x_dab_get_freq_list+0x188>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	061b      	lsls	r3, r3, #24
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <Si468x_dab_get_freq_list+0x1a0>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001c00:	220a      	movs	r2, #10
 8001c02:	491f      	ldr	r1, [pc, #124]	; (8001c80 <Si468x_dab_get_freq_list+0x198>)
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f007 fd53 	bl	80096b0 <itoa>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 f97c 	bl	8002f0c <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001c14:	2100      	movs	r1, #0
 8001c16:	481d      	ldr	r0, [pc, #116]	; (8001c8c <Si468x_dab_get_freq_list+0x1a4>)
 8001c18:	f001 f978 	bl	8002f0c <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <Si468x_dab_get_freq_list+0x1a0>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	220a      	movs	r2, #10
 8001c26:	4916      	ldr	r1, [pc, #88]	; (8001c80 <Si468x_dab_get_freq_list+0x198>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f007 fd41 	bl	80096b0 <itoa>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 f96a 	bl	8002f0c <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4815      	ldr	r0, [pc, #84]	; (8001c90 <Si468x_dab_get_freq_list+0x1a8>)
 8001c3c:	f001 f966 	bl	8002f0c <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3301      	adds	r3, #1
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <Si468x_dab_get_freq_list+0x190>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	dbaf      	blt.n	8001bb2 <Si468x_dab_get_freq_list+0xca>
}
 8001c52:	e003      	b.n	8001c5c <Si468x_dab_get_freq_list+0x174>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c54:	2101      	movs	r1, #1
 8001c56:	480f      	ldr	r0, [pc, #60]	; (8001c94 <Si468x_dab_get_freq_list+0x1ac>)
 8001c58:	f001 f958 	bl	8002f0c <send_debug_msg>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	08009d94 	.word	0x08009d94
 8001c68:	200000dc 	.word	0x200000dc
 8001c6c:	200018fc 	.word	0x200018fc
 8001c70:	200010dc 	.word	0x200010dc
 8001c74:	08009a38 	.word	0x08009a38
 8001c78:	200019c0 	.word	0x200019c0
 8001c7c:	08009dd0 	.word	0x08009dd0
 8001c80:	200018dc 	.word	0x200018dc
 8001c84:	08009dd8 	.word	0x08009dd8
 8001c88:	20001900 	.word	0x20001900
 8001c8c:	08009df0 	.word	0x08009df0
 8001c90:	08009df4 	.word	0x08009df4
 8001c94:	08009dfc 	.word	0x08009dfc

08001c98 <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4845      	ldr	r0, [pc, #276]	; (8001dbc <Si468x_dab_tune_freq+0x124>)
 8001ca6:	f001 f931 	bl	8002f0c <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001caa:	2100      	movs	r1, #0
 8001cac:	4844      	ldr	r0, [pc, #272]	; (8001dc0 <Si468x_dab_tune_freq+0x128>)
 8001cae:	f001 f92d 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4a43      	ldr	r2, [pc, #268]	; (8001dc4 <Si468x_dab_tune_freq+0x12c>)
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	220a      	movs	r2, #10
 8001cbc:	4942      	ldr	r1, [pc, #264]	; (8001dc8 <Si468x_dab_tune_freq+0x130>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f007 fcf6 	bl	80096b0 <itoa>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 f91f 	bl	8002f0c <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001cce:	2101      	movs	r1, #1
 8001cd0:	483e      	ldr	r0, [pc, #248]	; (8001dcc <Si468x_dab_tune_freq+0x134>)
 8001cd2:	f001 f91b 	bl	8002f0c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <Si468x_dab_tune_freq+0x138>)
 8001cd8:	22b0      	movs	r2, #176	; 0xb0
 8001cda:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cdc:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <Si468x_dab_tune_freq+0x138>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001ce2:	4a3b      	ldr	r2, [pc, #236]	; (8001dd0 <Si468x_dab_tune_freq+0x138>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <Si468x_dab_tune_freq+0x138>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = 0x00;						//antcap [7:0]
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <Si468x_dab_tune_freq+0x138>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = 0x00;						//antcap [15:8]
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <Si468x_dab_tune_freq+0x138>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001cfa:	4935      	ldr	r1, [pc, #212]	; (8001dd0 <Si468x_dab_tune_freq+0x138>)
 8001cfc:	2006      	movs	r0, #6
 8001cfe:	f7ff fcdf 	bl	80016c0 <Si468x_write_command>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <Si468x_dab_tune_freq+0x13c>)
 8001d08:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d0a:	4933      	ldr	r1, [pc, #204]	; (8001dd8 <Si468x_dab_tune_freq+0x140>)
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fcf9 	bl	8001704 <Si468x_read_reply>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <Si468x_dab_tune_freq+0x13c>)
 8001d18:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <Si468x_dab_tune_freq+0x140>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <Si468x_dab_tune_freq+0x96>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d26:	2101      	movs	r1, #1
 8001d28:	482c      	ldr	r0, [pc, #176]	; (8001ddc <Si468x_dab_tune_freq+0x144>)
 8001d2a:	f001 f8ef 	bl	8002f0c <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	81fb      	strh	r3, [r7, #14]
 8001d32:	e039      	b.n	8001da8 <Si468x_dab_tune_freq+0x110>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d34:	4928      	ldr	r1, [pc, #160]	; (8001dd8 <Si468x_dab_tune_freq+0x140>)
 8001d36:	2001      	movs	r0, #1
 8001d38:	f7ff fce4 	bl	8001704 <Si468x_read_reply>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <Si468x_dab_tune_freq+0x13c>)
 8001d42:	701a      	strb	r2, [r3, #0]

		if(dab_spi_rx_buffer[0] & 0x01)
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <Si468x_dab_tune_freq+0x140>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01c      	beq.n	8001d8a <Si468x_dab_tune_freq+0xf2>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001d50:	2100      	movs	r1, #0
 8001d52:	4823      	ldr	r0, [pc, #140]	; (8001de0 <Si468x_dab_tune_freq+0x148>)
 8001d54:	f001 f8da 	bl	8002f0c <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	220a      	movs	r2, #10
 8001d5c:	491a      	ldr	r1, [pc, #104]	; (8001dc8 <Si468x_dab_tune_freq+0x130>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f007 fca6 	bl	80096b0 <itoa>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 f8cf 	bl	8002f0c <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001d6e:	2101      	movs	r1, #1
 8001d70:	481c      	ldr	r0, [pc, #112]	; (8001de4 <Si468x_dab_tune_freq+0x14c>)
 8001d72:	f001 f8cb 	bl	8002f0c <send_debug_msg>
			actual_freq_id = channel;
 8001d76:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <Si468x_dab_tune_freq+0x150>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	7013      	strb	r3, [r2, #0]
			actual_freq = freq_table[channel];
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4a11      	ldr	r2, [pc, #68]	; (8001dc4 <Si468x_dab_tune_freq+0x12c>)
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <Si468x_dab_tune_freq+0x154>)
 8001d86:	6013      	str	r3, [r2, #0]
			break;
 8001d88:	e014      	b.n	8001db4 <Si468x_dab_tune_freq+0x11c>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d103      	bne.n	8001d9c <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001d94:	2101      	movs	r1, #1
 8001d96:	4816      	ldr	r0, [pc, #88]	; (8001df0 <Si468x_dab_tune_freq+0x158>)
 8001d98:	f001 f8b8 	bl	8002f0c <send_debug_msg>
		}
		HAL_Delay(1);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f002 fb0b 	bl	80043b8 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	3301      	adds	r3, #1
 8001da6:	81fb      	strh	r3, [r7, #14]
 8001da8:	89fb      	ldrh	r3, [r7, #14]
 8001daa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d9c0      	bls.n	8001d34 <Si468x_dab_tune_freq+0x9c>
	}
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	08009e18 	.word	0x08009e18
 8001dc0:	08009e54 	.word	0x08009e54
 8001dc4:	20001900 	.word	0x20001900
 8001dc8:	200018dc 	.word	0x200018dc
 8001dcc:	08009df4 	.word	0x08009df4
 8001dd0:	200000dc 	.word	0x200000dc
 8001dd4:	200018fc 	.word	0x200018fc
 8001dd8:	200010dc 	.word	0x200010dc
 8001ddc:	08009a38 	.word	0x08009a38
 8001de0:	08009e60 	.word	0x08009e60
 8001de4:	08009e7c 	.word	0x08009e7c
 8001de8:	2000251c 	.word	0x2000251c
 8001dec:	20002518 	.word	0x20002518
 8001df0:	08009e84 	.word	0x08009e84

08001df4 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001df8:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <Si468x_dab_digrad_status+0x100>)
 8001dfa:	22b2      	movs	r2, #178	; 0xb2
 8001dfc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <Si468x_dab_digrad_status+0x100>)
 8001e00:	221a      	movs	r2, #26
 8001e02:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e04:	493b      	ldr	r1, [pc, #236]	; (8001ef4 <Si468x_dab_digrad_status+0x100>)
 8001e06:	2002      	movs	r0, #2
 8001e08:	f7ff fc5a 	bl	80016c0 <Si468x_write_command>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <Si468x_dab_digrad_status+0x104>)
 8001e12:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f002 facf 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001e1a:	4938      	ldr	r1, [pc, #224]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e1c:	2028      	movs	r0, #40	; 0x28
 8001e1e:	f7ff fc71 	bl	8001704 <Si468x_read_reply>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <Si468x_dab_digrad_status+0x104>)
 8001e28:	701a      	strb	r2, [r3, #0]
	sig_metrics.rssi = dab_spi_rx_buffer[6];
 8001e2a:	4b34      	ldr	r3, [pc, #208]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e2c:	799a      	ldrb	r2, [r3, #6]
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001e30:	701a      	strb	r2, [r3, #0]
	sig_metrics.snr = dab_spi_rx_buffer[7];
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e34:	79da      	ldrb	r2, [r3, #7]
 8001e36:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001e38:	705a      	strb	r2, [r3, #1]
	sig_metrics.fic_bit_cnt = dab_spi_rx_buffer[32] + (dab_spi_rx_buffer[33] << 8) + (dab_spi_rx_buffer[34] << 16) + (dab_spi_rx_buffer[35] << 24);
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	441a      	add	r2, r3
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e4e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e52:	041b      	lsls	r3, r3, #16
 8001e54:	441a      	add	r2, r3
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e58:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4413      	add	r3, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001e64:	609a      	str	r2, [r3, #8]
	sig_metrics.fic_err_cnt = dab_spi_rx_buffer[36] + (dab_spi_rx_buffer[37] << 8) + (dab_spi_rx_buffer[38] << 16) + (dab_spi_rx_buffer[39] << 24);
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	441a      	add	r2, r3
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e7a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	441a      	add	r2, r3
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e84:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	4413      	add	r3, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001e90:	60da      	str	r2, [r3, #12]
	sig_metrics.fic_q = dab_spi_rx_buffer[8];
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e94:	7a1a      	ldrb	r2, [r3, #8]
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001e98:	71da      	strb	r2, [r3, #7]

	if(dab_spi_rx_buffer[5] & 0x01)
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001e9c:	795b      	ldrb	r3, [r3, #5]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <Si468x_dab_digrad_status+0xba>
	{
		sig_metrics.valid = 1;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	711a      	strb	r2, [r3, #4]
 8001eac:	e002      	b.n	8001eb4 <Si468x_dab_digrad_status+0xc0>
	}
	else
	{
		sig_metrics.valid = 0;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	711a      	strb	r2, [r3, #4]
	}

	if(dab_spi_rx_buffer[5] & 0x04)
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001eb6:	795b      	ldrb	r3, [r3, #5]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <Si468x_dab_digrad_status+0xd4>
	{
		sig_metrics.acq = 1;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	715a      	strb	r2, [r3, #5]
 8001ec6:	e002      	b.n	8001ece <Si468x_dab_digrad_status+0xda>
	}
	else
	{
		sig_metrics.acq = 0;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	715a      	strb	r2, [r3, #5]
	}

	if(dab_spi_rx_buffer[4] & 0x04)
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <Si468x_dab_digrad_status+0x108>)
 8001ed0:	791b      	ldrb	r3, [r3, #4]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <Si468x_dab_digrad_status+0xee>
	{
		sig_metrics.acq_int = 1;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	719a      	strb	r2, [r3, #6]
 8001ee0:	e002      	b.n	8001ee8 <Si468x_dab_digrad_status+0xf4>
	}
	else
	{
		sig_metrics.acq_int = 0;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	719a      	strb	r2, [r3, #6]
	}

	DisplayDabStatus(sig_metrics);
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <Si468x_dab_digrad_status+0x10c>)
 8001eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eec:	f001 f94e 	bl	800318c <DisplayDabStatus>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200000dc 	.word	0x200000dc
 8001ef8:	200018fc 	.word	0x200018fc
 8001efc:	200010dc 	.word	0x200010dc
 8001f00:	200019c4 	.word	0x200019c4

08001f04 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	803b      	strh	r3, [r7, #0]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001f0e:	2300      	movs	r3, #0
 8001f10:	71fb      	strb	r3, [r7, #7]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001f12:	2300      	movs	r3, #0
 8001f14:	71bb      	strb	r3, [r7, #6]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001f16:	2300      	movs	r3, #0
 8001f18:	717b      	strb	r3, [r7, #5]

//	uint8_t complete_flag = 0;			//flag informing that all service names are obtained

//	do
//	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001f1a:	4ba1      	ldr	r3, [pc, #644]	; (80021a0 <Si468x_dab_get_digital_service_list+0x29c>)
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001f20:	4b9f      	ldr	r3, [pc, #636]	; (80021a0 <Si468x_dab_get_digital_service_list+0x29c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001f26:	499e      	ldr	r1, [pc, #632]	; (80021a0 <Si468x_dab_get_digital_service_list+0x29c>)
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f7ff fbc9 	bl	80016c0 <Si468x_write_command>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b9c      	ldr	r3, [pc, #624]	; (80021a4 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001f34:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f002 fa3e 	bl	80043b8 <HAL_Delay>
		status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001f3c:	499a      	ldr	r1, [pc, #616]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f42:	f7ff fbdf 	bl	8001704 <Si468x_read_reply>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b96      	ldr	r3, [pc, #600]	; (80021a4 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001f4c:	701a      	strb	r2, [r3, #0]

		send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001f4e:	2101      	movs	r1, #1
 8001f50:	4896      	ldr	r0, [pc, #600]	; (80021ac <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f52:	f000 ffdb 	bl	8002f0c <send_debug_msg>

		if(dab_spi_rx_buffer[0] & 0x40)
 8001f56:	4b94      	ldr	r3, [pc, #592]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <Si468x_dab_get_digital_service_list+0x66>
		{
			send_debug_msg("Command Error!", CRLF_SEND);
 8001f62:	2101      	movs	r1, #1
 8001f64:	4892      	ldr	r0, [pc, #584]	; (80021b0 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001f66:	f000 ffd1 	bl	8002f0c <send_debug_msg>
		}

		list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001f6a:	4b8f      	ldr	r3, [pc, #572]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b8d      	ldr	r3, [pc, #564]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f72:	795b      	ldrb	r3, [r3, #5]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	803b      	strh	r3, [r7, #0]
		number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001f7e:	4b8a      	ldr	r3, [pc, #552]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001f80:	7a1b      	ldrb	r3, [r3, #8]
 8001f82:	71fb      	strb	r3, [r7, #7]

		//-----read services info---------------------------------------------------------------------------------------------------------------
		for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	713b      	strb	r3, [r7, #4]
 8001f88:	e21b      	b.n	80023c2 <Si468x_dab_get_digital_service_list+0x4be>
		{
			services_list[service_index + actual_services].freq = actual_freq;
 8001f8a:	793b      	ldrb	r3, [r7, #4]
 8001f8c:	4a89      	ldr	r2, [pc, #548]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a89      	ldr	r2, [pc, #548]	; (80021b8 <Si468x_dab_get_digital_service_list+0x2b4>)
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4989      	ldr	r1, [pc, #548]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f98:	2034      	movs	r0, #52	; 0x34
 8001f9a:	fb00 f303 	mul.w	r3, r0, r3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3328      	adds	r3, #40	; 0x28
 8001fa2:	601a      	str	r2, [r3, #0]
			services_list[service_index + actual_services].freq_id = actual_freq_id;
 8001fa4:	793b      	ldrb	r3, [r7, #4]
 8001fa6:	4a83      	ldr	r2, [pc, #524]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a84      	ldr	r2, [pc, #528]	; (80021c0 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001fae:	7810      	ldrb	r0, [r2, #0]
 8001fb0:	4a82      	ldr	r2, [pc, #520]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fb2:	2134      	movs	r1, #52	; 0x34
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	332c      	adds	r3, #44	; 0x2c
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	701a      	strb	r2, [r3, #0]

			services_list[service_index + actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001fc0:	79ba      	ldrb	r2, [r7, #6]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	f103 0210 	add.w	r2, r3, #16
 8001fce:	797b      	ldrb	r3, [r7, #5]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a74      	ldr	r2, [pc, #464]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 8001fd6:	5cd2      	ldrb	r2, [r2, r3]
 8001fd8:	793b      	ldrb	r3, [r7, #4]
 8001fda:	4976      	ldr	r1, [pc, #472]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001fdc:	7809      	ldrb	r1, [r1, #0]
 8001fde:	440b      	add	r3, r1
 8001fe0:	f002 0201 	and.w	r2, r2, #1
 8001fe4:	b2d0      	uxtb	r0, r2
 8001fe6:	4a75      	ldr	r2, [pc, #468]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8001fe8:	2134      	movs	r1, #52	; 0x34
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	701a      	strb	r2, [r3, #0]
			services_list[service_index + actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001ff6:	79ba      	ldrb	r2, [r7, #6]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	f103 0211 	add.w	r2, r3, #17
 8002004:	797b      	ldrb	r3, [r7, #5]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	4a67      	ldr	r2, [pc, #412]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 800200c:	5cd2      	ldrb	r2, [r2, r3]
 800200e:	793b      	ldrb	r3, [r7, #4]
 8002010:	4968      	ldr	r1, [pc, #416]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 8002012:	7809      	ldrb	r1, [r1, #0]
 8002014:	440b      	add	r3, r1
 8002016:	f002 020f 	and.w	r2, r2, #15
 800201a:	b2d0      	uxtb	r0, r2
 800201c:	4a67      	ldr	r2, [pc, #412]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 800201e:	2134      	movs	r1, #52	; 0x34
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	332d      	adds	r3, #45	; 0x2d
 8002028:	4602      	mov	r2, r0
 800202a:	701a      	strb	r2, [r3, #0]

			//ignore service with PD Flag = 1 - it's data service, not audio service
			if(services_list[service_index + actual_services].pd_flag)
 800202c:	793b      	ldrb	r3, [r7, #4]
 800202e:	4a61      	ldr	r2, [pc, #388]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a61      	ldr	r2, [pc, #388]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8002036:	2134      	movs	r1, #52	; 0x34
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3318      	adds	r3, #24
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d017      	beq.n	8002076 <Si468x_dab_get_digital_service_list+0x172>
			{
				services_count++;
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	3301      	adds	r3, #1
 800204a:	71bb      	strb	r3, [r7, #6]
				components_count += services_list[service_index + actual_services].number_of_components;
 800204c:	793b      	ldrb	r3, [r7, #4]
 800204e:	4a59      	ldr	r2, [pc, #356]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a59      	ldr	r2, [pc, #356]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8002056:	2134      	movs	r1, #52	; 0x34
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	332d      	adds	r3, #45	; 0x2d
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	797b      	ldrb	r3, [r7, #5]
 8002064:	4413      	add	r3, r2
 8002066:	717b      	strb	r3, [r7, #5]
				service_index--;
 8002068:	793b      	ldrb	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	713b      	strb	r3, [r7, #4]
				number_of_services--;
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	3b01      	subs	r3, #1
 8002072:	71fb      	strb	r3, [r7, #7]
				continue;
 8002074:	e1a2      	b.n	80023bc <Si468x_dab_get_digital_service_list+0x4b8>
			}

			services_list[service_index + actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8002076:	79ba      	ldrb	r2, [r7, #6]
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	f103 0210 	add.w	r2, r3, #16
 8002084:	797b      	ldrb	r3, [r7, #5]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	4a47      	ldr	r2, [pc, #284]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	105b      	asrs	r3, r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	793b      	ldrb	r3, [r7, #4]
 8002094:	4947      	ldr	r1, [pc, #284]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 8002096:	7809      	ldrb	r1, [r1, #0]
 8002098:	440b      	add	r3, r1
 800209a:	f002 021f 	and.w	r2, r2, #31
 800209e:	b2d0      	uxtb	r0, r2
 80020a0:	4a46      	ldr	r2, [pc, #280]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 80020a2:	2134      	movs	r1, #52	; 0x34
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3319      	adds	r3, #25
 80020ac:	4602      	mov	r2, r0
 80020ae:	701a      	strb	r2, [r3, #0]

			//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
			switch(services_list[service_index + actual_services].pd_flag)
 80020b0:	793b      	ldrb	r3, [r7, #4]
 80020b2:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a40      	ldr	r2, [pc, #256]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 80020ba:	2134      	movs	r1, #52	; 0x34
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3318      	adds	r3, #24
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <Si468x_dab_get_digital_service_list+0x1cc>
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d07a      	beq.n	80021c4 <Si468x_dab_get_digital_service_list+0x2c0>
					services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
					services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
					break;

				default:
					break;
 80020ce:	e0ef      	b.n	80022b0 <Si468x_dab_get_digital_service_list+0x3ac>
					services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 80020d0:	79ba      	ldrb	r2, [r7, #6]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	f103 020c 	add.w	r2, r3, #12
 80020de:	797b      	ldrb	r3, [r7, #5]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	4619      	mov	r1, r3
 80020ea:	79ba      	ldrb	r2, [r7, #6]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	f103 020d 	add.w	r2, r3, #13
 80020f8:	797b      	ldrb	r3, [r7, #5]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002108:	4419      	add	r1, r3
 800210a:	793b      	ldrb	r3, [r7, #4]
 800210c:	4a29      	ldr	r2, [pc, #164]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 800210e:	7812      	ldrb	r2, [r2, #0]
 8002110:	4413      	add	r3, r2
 8002112:	4608      	mov	r0, r1
 8002114:	4a29      	ldr	r2, [pc, #164]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8002116:	2134      	movs	r1, #52	; 0x34
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	331c      	adds	r3, #28
 8002120:	6018      	str	r0, [r3, #0]
					services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002122:	79ba      	ldrb	r2, [r7, #6]
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f103 020d 	add.w	r2, r3, #13
 8002130:	797b      	ldrb	r3, [r7, #5]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <Si468x_dab_get_digital_service_list+0x2a4>)
 8002138:	5cd2      	ldrb	r2, [r2, r3]
 800213a:	793b      	ldrb	r3, [r7, #4]
 800213c:	491d      	ldr	r1, [pc, #116]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 800213e:	7809      	ldrb	r1, [r1, #0]
 8002140:	440b      	add	r3, r1
 8002142:	0912      	lsrs	r2, r2, #4
 8002144:	b2d0      	uxtb	r0, r2
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8002148:	2134      	movs	r1, #52	; 0x34
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3320      	adds	r3, #32
 8002152:	4602      	mov	r2, r0
 8002154:	701a      	strb	r2, [r3, #0]
					services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 12) + services_list[service_index + actual_services].srv_ref;
 8002156:	793b      	ldrb	r3, [r7, #4]
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	4413      	add	r3, r2
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8002160:	2134      	movs	r1, #52	; 0x34
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3320      	adds	r3, #32
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	031b      	lsls	r3, r3, #12
 800216e:	4618      	mov	r0, r3
 8002170:	793b      	ldrb	r3, [r7, #4]
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a10      	ldr	r2, [pc, #64]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 800217a:	2134      	movs	r1, #52	; 0x34
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	331c      	adds	r3, #28
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	793b      	ldrb	r3, [r7, #4]
 8002188:	490a      	ldr	r1, [pc, #40]	; (80021b4 <Si468x_dab_get_digital_service_list+0x2b0>)
 800218a:	7809      	ldrb	r1, [r1, #0]
 800218c:	440b      	add	r3, r1
 800218e:	4402      	add	r2, r0
 8002190:	490a      	ldr	r1, [pc, #40]	; (80021bc <Si468x_dab_get_digital_service_list+0x2b8>)
 8002192:	2034      	movs	r0, #52	; 0x34
 8002194:	fb00 f303 	mul.w	r3, r0, r3
 8002198:	440b      	add	r3, r1
 800219a:	3324      	adds	r3, #36	; 0x24
 800219c:	601a      	str	r2, [r3, #0]
					break;
 800219e:	e087      	b.n	80022b0 <Si468x_dab_get_digital_service_list+0x3ac>
 80021a0:	200000dc 	.word	0x200000dc
 80021a4:	200018fc 	.word	0x200018fc
 80021a8:	200010dc 	.word	0x200010dc
 80021ac:	08009ee4 	.word	0x08009ee4
 80021b0:	08009a38 	.word	0x08009a38
 80021b4:	20002516 	.word	0x20002516
 80021b8:	20002518 	.word	0x20002518
 80021bc:	20001aec 	.word	0x20001aec
 80021c0:	2000251c 	.word	0x2000251c
					services_list[service_index + actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 80021c4:	79ba      	ldrb	r2, [r7, #6]
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	f103 020c 	add.w	r2, r3, #12
 80021d2:	797b      	ldrb	r3, [r7, #5]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	4a85      	ldr	r2, [pc, #532]	; (80023f0 <Si468x_dab_get_digital_service_list+0x4ec>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	4619      	mov	r1, r3
 80021de:	79ba      	ldrb	r2, [r7, #6]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	f103 020d 	add.w	r2, r3, #13
 80021ec:	797b      	ldrb	r3, [r7, #5]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	4a7f      	ldr	r2, [pc, #508]	; (80023f0 <Si468x_dab_get_digital_service_list+0x4ec>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	4419      	add	r1, r3
 80021fa:	79ba      	ldrb	r2, [r7, #6]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	f103 020e 	add.w	r2, r3, #14
 8002208:	797b      	ldrb	r3, [r7, #5]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	4a78      	ldr	r2, [pc, #480]	; (80023f0 <Si468x_dab_get_digital_service_list+0x4ec>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002218:	4419      	add	r1, r3
 800221a:	793b      	ldrb	r3, [r7, #4]
 800221c:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	4413      	add	r3, r2
 8002222:	4608      	mov	r0, r1
 8002224:	4a74      	ldr	r2, [pc, #464]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002226:	2134      	movs	r1, #52	; 0x34
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	331c      	adds	r3, #28
 8002230:	6018      	str	r0, [r3, #0]
					services_list[service_index + actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002232:	79ba      	ldrb	r2, [r7, #6]
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	f103 020e 	add.w	r2, r3, #14
 8002240:	797b      	ldrb	r3, [r7, #5]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <Si468x_dab_get_digital_service_list+0x4ec>)
 8002248:	5cd2      	ldrb	r2, [r2, r3]
 800224a:	793b      	ldrb	r3, [r7, #4]
 800224c:	4969      	ldr	r1, [pc, #420]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 800224e:	7809      	ldrb	r1, [r1, #0]
 8002250:	440b      	add	r3, r1
 8002252:	0912      	lsrs	r2, r2, #4
 8002254:	b2d0      	uxtb	r0, r2
 8002256:	4a68      	ldr	r2, [pc, #416]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002258:	2134      	movs	r1, #52	; 0x34
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3320      	adds	r3, #32
 8002262:	4602      	mov	r2, r0
 8002264:	701a      	strb	r2, [r3, #0]
					services_list[service_index + actual_services].service_id = (services_list[service_index + actual_services].country_id << 20) + services_list[service_index + actual_services].srv_ref;
 8002266:	793b      	ldrb	r3, [r7, #4]
 8002268:	4a62      	ldr	r2, [pc, #392]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	4413      	add	r3, r2
 800226e:	4a62      	ldr	r2, [pc, #392]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002270:	2134      	movs	r1, #52	; 0x34
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3320      	adds	r3, #32
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	051b      	lsls	r3, r3, #20
 800227e:	4618      	mov	r0, r3
 8002280:	793b      	ldrb	r3, [r7, #4]
 8002282:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a5b      	ldr	r2, [pc, #364]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 800228a:	2134      	movs	r1, #52	; 0x34
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	331c      	adds	r3, #28
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	793b      	ldrb	r3, [r7, #4]
 8002298:	4956      	ldr	r1, [pc, #344]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 800229a:	7809      	ldrb	r1, [r1, #0]
 800229c:	440b      	add	r3, r1
 800229e:	4402      	add	r2, r0
 80022a0:	4955      	ldr	r1, [pc, #340]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 80022a2:	2034      	movs	r0, #52	; 0x34
 80022a4:	fb00 f303 	mul.w	r3, r0, r3
 80022a8:	440b      	add	r3, r1
 80022aa:	3324      	adds	r3, #36	; 0x24
 80022ac:	601a      	str	r2, [r3, #0]
					break;
 80022ae:	bf00      	nop
			}

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	70fb      	strb	r3, [r7, #3]
 80022b4:	e038      	b.n	8002328 <Si468x_dab_get_digital_service_list+0x424>
			{
				services_list[service_index + actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f103 0114 	add.w	r1, r3, #20
 80022bc:	79ba      	ldrb	r2, [r7, #6]
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	18ca      	adds	r2, r1, r3
 80022c8:	797b      	ldrb	r3, [r7, #5]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	18d1      	adds	r1, r2, r3
 80022ce:	793b      	ldrb	r3, [r7, #4]
 80022d0:	4a48      	ldr	r2, [pc, #288]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	441a      	add	r2, r3
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	4845      	ldr	r0, [pc, #276]	; (80023f0 <Si468x_dab_get_digital_service_list+0x4ec>)
 80022da:	5c44      	ldrb	r4, [r0, r1]
 80022dc:	4946      	ldr	r1, [pc, #280]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 80022de:	2034      	movs	r0, #52	; 0x34
 80022e0:	fb00 f202 	mul.w	r2, r0, r2
 80022e4:	440a      	add	r2, r1
 80022e6:	4413      	add	r3, r2
 80022e8:	4622      	mov	r2, r4
 80022ea:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80022ec:	793b      	ldrb	r3, [r7, #4]
 80022ee:	4a41      	ldr	r2, [pc, #260]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	441a      	add	r2, r3
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	4940      	ldr	r1, [pc, #256]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 80022f8:	2034      	movs	r0, #52	; 0x34
 80022fa:	fb00 f202 	mul.w	r2, r0, r2
 80022fe:	440a      	add	r2, r1
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b86      	cmp	r3, #134	; 0x86
 8002306:	d10c      	bne.n	8002322 <Si468x_dab_get_digital_service_list+0x41e>
				{
					services_list[service_index + actual_services].name[name_index] = 0x6F;
 8002308:	793b      	ldrb	r3, [r7, #4]
 800230a:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	441a      	add	r2, r3
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	4939      	ldr	r1, [pc, #228]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002314:	2034      	movs	r0, #52	; 0x34
 8002316:	fb00 f202 	mul.w	r2, r0, r2
 800231a:	440a      	add	r2, r1
 800231c:	4413      	add	r3, r2
 800231e:	226f      	movs	r2, #111	; 0x6f
 8002320:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	3301      	adds	r3, #1
 8002326:	70fb      	strb	r3, [r7, #3]
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	d9c3      	bls.n	80022b6 <Si468x_dab_get_digital_service_list+0x3b2>
				}
			}

			//----read component info---------------------------------------------------------------------------------------------
			for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 800232e:	2300      	movs	r3, #0
 8002330:	70bb      	strb	r3, [r7, #2]
 8002332:	e032      	b.n	800239a <Si468x_dab_get_digital_service_list+0x496>
			{
				services_list[service_index + actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002334:	793b      	ldrb	r3, [r7, #4]
 8002336:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	441a      	add	r2, r3
 800233c:	78bb      	ldrb	r3, [r7, #2]
 800233e:	492e      	ldr	r1, [pc, #184]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 8002340:	201a      	movs	r0, #26
 8002342:	fb00 f202 	mul.w	r2, r0, r2
 8002346:	4413      	add	r3, r2
 8002348:	3314      	adds	r3, #20
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	2200      	movs	r2, #0
 8002350:	71da      	strb	r2, [r3, #7]
				services_list[service_index + actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 8002352:	79ba      	ldrb	r2, [r7, #6]
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002360:	797b      	ldrb	r3, [r7, #5]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <Si468x_dab_get_digital_service_list+0x4ec>)
 8002368:	5cd1      	ldrb	r1, [r2, r3]
 800236a:	793b      	ldrb	r3, [r7, #4]
 800236c:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	441a      	add	r2, r3
 8002372:	78bb      	ldrb	r3, [r7, #2]
 8002374:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002378:	b2cc      	uxtb	r4, r1
 800237a:	491f      	ldr	r1, [pc, #124]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 800237c:	201a      	movs	r0, #26
 800237e:	fb00 f202 	mul.w	r2, r0, r2
 8002382:	4413      	add	r3, r2
 8002384:	3314      	adds	r3, #20
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	440b      	add	r3, r1
 800238a:	4622      	mov	r2, r4
 800238c:	719a      	strb	r2, [r3, #6]
				components_count++;
 800238e:	797b      	ldrb	r3, [r7, #5]
 8002390:	3301      	adds	r3, #1
 8002392:	717b      	strb	r3, [r7, #5]
			for(uint8_t component_index = 0; component_index < services_list[service_index + actual_services].number_of_components; component_index++)
 8002394:	78bb      	ldrb	r3, [r7, #2]
 8002396:	3301      	adds	r3, #1
 8002398:	70bb      	strb	r3, [r7, #2]
 800239a:	793b      	ldrb	r3, [r7, #4]
 800239c:	4a15      	ldr	r2, [pc, #84]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 800239e:	7812      	ldrb	r2, [r2, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <Si468x_dab_get_digital_service_list+0x4f4>)
 80023a4:	2134      	movs	r1, #52	; 0x34
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	332d      	adds	r3, #45	; 0x2d
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	78ba      	ldrb	r2, [r7, #2]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d3be      	bcc.n	8002334 <Si468x_dab_get_digital_service_list+0x430>
			}
			services_count++;
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	3301      	adds	r3, #1
 80023ba:	71bb      	strb	r3, [r7, #6]
		for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 80023bc:	793b      	ldrb	r3, [r7, #4]
 80023be:	3301      	adds	r3, #1
 80023c0:	713b      	strb	r3, [r7, #4]
 80023c2:	793a      	ldrb	r2, [r7, #4]
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	f4ff addf 	bcc.w	8001f8a <Si468x_dab_get_digital_service_list+0x86>
//		}
//		HAL_Delay(5);
//	}
//	while(!complete_flag);

	total_services += number_of_services;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <Si468x_dab_get_digital_service_list+0x4f8>)
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <Si468x_dab_get_digital_service_list+0x4f8>)
 80023d8:	701a      	strb	r2, [r3, #0]
	actual_services += number_of_services;
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	4413      	add	r3, r2
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <Si468x_dab_get_digital_service_list+0x4f0>)
 80023e6:	701a      	strb	r2, [r3, #0]
//			send_debug_msg(itoa(services_list[i].components[j].tm_id, itoa_buffer, 10), CRLF_SEND);
//			send_debug_msg("Subchannel ID : 0x", CRLF_NO_SEND);
//			send_debug_msg(itoa(services_list[i].components[j].subchannel_id, itoa_buffer, 16), CRLF_SEND);
//		}
//	}
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd90      	pop	{r4, r7, pc}
 80023f0:	200010dc 	.word	0x200010dc
 80023f4:	20002516 	.word	0x20002516
 80023f8:	20001aec 	.word	0x20001aec
 80023fc:	20002514 	.word	0x20002514

08002400 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 800240a:	2101      	movs	r1, #1
 800240c:	482d      	ldr	r0, [pc, #180]	; (80024c4 <Si468x_dab_start_digital_service+0xc4>)
 800240e:	f000 fd7d 	bl	8002f0c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002414:	2281      	movs	r2, #129	; 0x81
 8002416:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 800241a:	2200      	movs	r2, #0
 800241c:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002420:	2200      	movs	r2, #0
 8002422:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002426:	2200      	movs	r2, #0
 8002428:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002430:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 800243a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002444:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0e1b      	lsrs	r3, r3, #24
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 800244e:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0] Component ID prawdopodobnie nie ma znaczenia
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002456:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002460:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 800246a:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	0e1b      	lsrs	r3, r3, #24
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002474:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002476:	4914      	ldr	r1, [pc, #80]	; (80024c8 <Si468x_dab_start_digital_service+0xc8>)
 8002478:	200c      	movs	r0, #12
 800247a:	f7ff f921 	bl	80016c0 <Si468x_write_command>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <Si468x_dab_start_digital_service+0xcc>)
 8002484:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002486:	2001      	movs	r0, #1
 8002488:	f001 ff96 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800248c:	4910      	ldr	r1, [pc, #64]	; (80024d0 <Si468x_dab_start_digital_service+0xd0>)
 800248e:	2005      	movs	r0, #5
 8002490:	f7ff f938 	bl	8001704 <Si468x_read_reply>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <Si468x_dab_start_digital_service+0xcc>)
 800249a:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <Si468x_dab_start_digital_service+0xd0>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <Si468x_dab_start_digital_service+0xb2>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80024a8:	2101      	movs	r1, #1
 80024aa:	480a      	ldr	r0, [pc, #40]	; (80024d4 <Si468x_dab_start_digital_service+0xd4>)
 80024ac:	f000 fd2e 	bl	8002f0c <send_debug_msg>
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}

}
 80024b0:	e003      	b.n	80024ba <Si468x_dab_start_digital_service+0xba>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 80024b2:	2101      	movs	r1, #1
 80024b4:	4808      	ldr	r0, [pc, #32]	; (80024d8 <Si468x_dab_start_digital_service+0xd8>)
 80024b6:	f000 fd29 	bl	8002f0c <send_debug_msg>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	08009f20 	.word	0x08009f20
 80024c8:	200000dc 	.word	0x200000dc
 80024cc:	200018fc 	.word	0x200018fc
 80024d0:	200010dc 	.word	0x200010dc
 80024d4:	08009a38 	.word	0x08009a38
 80024d8:	08009f5c 	.word	0x08009f5c

080024dc <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 80024e6:	2101      	movs	r1, #1
 80024e8:	4850      	ldr	r0, [pc, #320]	; (800262c <Si468x_dab_get_ensemble_info+0x150>)
 80024ea:	f000 fd0f 	bl	8002f0c <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 80024ee:	4b50      	ldr	r3, [pc, #320]	; (8002630 <Si468x_dab_get_ensemble_info+0x154>)
 80024f0:	22b4      	movs	r2, #180	; 0xb4
 80024f2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 80024f4:	4b4e      	ldr	r3, [pc, #312]	; (8002630 <Si468x_dab_get_ensemble_info+0x154>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80024fa:	494d      	ldr	r1, [pc, #308]	; (8002630 <Si468x_dab_get_ensemble_info+0x154>)
 80024fc:	2002      	movs	r0, #2
 80024fe:	f7ff f8df 	bl	80016c0 <Si468x_write_command>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <Si468x_dab_get_ensemble_info+0x158>)
 8002508:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800250a:	2002      	movs	r0, #2
 800250c:	f001 ff54 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002510:	4949      	ldr	r1, [pc, #292]	; (8002638 <Si468x_dab_get_ensemble_info+0x15c>)
 8002512:	2015      	movs	r0, #21
 8002514:	f7ff f8f6 	bl	8001704 <Si468x_read_reply>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	4b45      	ldr	r3, [pc, #276]	; (8002634 <Si468x_dab_get_ensemble_info+0x158>)
 800251e:	701a      	strb	r2, [r3, #0]

	while(!dab_spi_rx_buffer[6])
 8002520:	e012      	b.n	8002548 <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002522:	4943      	ldr	r1, [pc, #268]	; (8002630 <Si468x_dab_get_ensemble_info+0x154>)
 8002524:	2002      	movs	r0, #2
 8002526:	f7ff f8cb 	bl	80016c0 <Si468x_write_command>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <Si468x_dab_get_ensemble_info+0x158>)
 8002530:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8002532:	2002      	movs	r0, #2
 8002534:	f001 ff40 	bl	80043b8 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002538:	493f      	ldr	r1, [pc, #252]	; (8002638 <Si468x_dab_get_ensemble_info+0x15c>)
 800253a:	2015      	movs	r0, #21
 800253c:	f7ff f8e2 	bl	8001704 <Si468x_read_reply>
 8002540:	4603      	mov	r3, r0
 8002542:	461a      	mov	r2, r3
 8002544:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <Si468x_dab_get_ensemble_info+0x158>)
 8002546:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <Si468x_dab_get_ensemble_info+0x15c>)
 800254a:	799b      	ldrb	r3, [r3, #6]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0e8      	beq.n	8002522 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(dab_spi_rx_buffer[0] & 0x40)
 8002550:	4b39      	ldr	r3, [pc, #228]	; (8002638 <Si468x_dab_get_ensemble_info+0x15c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <Si468x_dab_get_ensemble_info+0x8c>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 800255c:	2101      	movs	r1, #1
 800255e:	4837      	ldr	r0, [pc, #220]	; (800263c <Si468x_dab_get_ensemble_info+0x160>)
 8002560:	f000 fcd4 	bl	8002f0c <send_debug_msg>
		return 0;
 8002564:	2300      	movs	r3, #0
 8002566:	e05d      	b.n	8002624 <Si468x_dab_get_ensemble_info+0x148>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002568:	4b33      	ldr	r3, [pc, #204]	; (8002638 <Si468x_dab_get_ensemble_info+0x15c>)
 800256a:	795b      	ldrb	r3, [r3, #5]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	4a32      	ldr	r2, [pc, #200]	; (8002638 <Si468x_dab_get_ensemble_info+0x15c>)
 8002570:	7912      	ldrb	r2, [r2, #4]
 8002572:	4413      	add	r3, r2
 8002574:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d04e      	beq.n	800261a <Si468x_dab_get_ensemble_info+0x13e>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 800257c:	2101      	movs	r1, #1
 800257e:	4830      	ldr	r0, [pc, #192]	; (8002640 <Si468x_dab_get_ensemble_info+0x164>)
 8002580:	f000 fcc4 	bl	8002f0c <send_debug_msg>
			ensembles_list[total_ensembles].id = ensemble_id_temp;
 8002584:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <Si468x_dab_get_ensemble_info+0x168>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b298      	uxth	r0, r3
 800258e:	4a2e      	ldr	r2, [pc, #184]	; (8002648 <Si468x_dab_get_ensemble_info+0x16c>)
 8002590:	460b      	mov	r3, r1
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a5b      	subs	r3, r3, r1
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	4602      	mov	r2, r0
 800259c:	801a      	strh	r2, [r3, #0]
			ensembles_list[total_ensembles].freq = actual_freq;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <Si468x_dab_get_ensemble_info+0x168>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <Si468x_dab_get_ensemble_info+0x170>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4927      	ldr	r1, [pc, #156]	; (8002648 <Si468x_dab_get_ensemble_info+0x16c>)
 80025aa:	4603      	mov	r3, r0
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	1a1b      	subs	r3, r3, r0
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3314      	adds	r3, #20
 80025b6:	601a      	str	r2, [r3, #0]
			ensembles_list[total_ensembles].freq_id  =actual_freq_id;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <Si468x_dab_get_ensemble_info+0x168>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <Si468x_dab_get_ensemble_info+0x174>)
 80025c0:	7818      	ldrb	r0, [r3, #0]
 80025c2:	4a21      	ldr	r2, [pc, #132]	; (8002648 <Si468x_dab_get_ensemble_info+0x16c>)
 80025c4:	460b      	mov	r3, r1
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	1a5b      	subs	r3, r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3318      	adds	r3, #24
 80025d0:	4602      	mov	r2, r0
 80025d2:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	71fb      	strb	r3, [r7, #7]
 80025d8:	e014      	b.n	8002604 <Si468x_dab_get_ensemble_info+0x128>
			{
				ensembles_list[total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	3306      	adds	r3, #6
 80025de:	4a19      	ldr	r2, [pc, #100]	; (8002644 <Si468x_dab_get_ensemble_info+0x168>)
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	4610      	mov	r0, r2
 80025e4:	79fa      	ldrb	r2, [r7, #7]
 80025e6:	4914      	ldr	r1, [pc, #80]	; (8002638 <Si468x_dab_get_ensemble_info+0x15c>)
 80025e8:	5ccc      	ldrb	r4, [r1, r3]
 80025ea:	4917      	ldr	r1, [pc, #92]	; (8002648 <Si468x_dab_get_ensemble_info+0x16c>)
 80025ec:	4603      	mov	r3, r0
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	1a1b      	subs	r3, r3, r0
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	4413      	add	r3, r2
 80025f8:	3302      	adds	r3, #2
 80025fa:	4622      	mov	r2, r4
 80025fc:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	3301      	adds	r3, #1
 8002602:	71fb      	strb	r3, [r7, #7]
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	d9e7      	bls.n	80025da <Si468x_dab_get_ensemble_info+0xfe>
//			send_debug_msg(itoa(ensembles_list[total_ensembles].freq, itoa_buffer, 10), CRLF_NO_SEND);
//			send_debug_msg(" kHz", CRLF_SEND);
//			send_debug_msg("Channel: ", CRLF_NO_SEND);
//			send_debug_msg(dab_channels_names[ensembles_list[total_ensembles].freq_id], CRLF_SEND);

			total_ensembles++;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <Si468x_dab_get_ensemble_info+0x168>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <Si468x_dab_get_ensemble_info+0x168>)
 8002614:	701a      	strb	r2, [r3, #0]
			return 1;
 8002616:	2301      	movs	r3, #1
 8002618:	e004      	b.n	8002624 <Si468x_dab_get_ensemble_info+0x148>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 800261a:	2101      	movs	r1, #1
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <Si468x_dab_get_ensemble_info+0x178>)
 800261e:	f000 fc75 	bl	8002f0c <send_debug_msg>
			return 0;
 8002622:	2300      	movs	r3, #0
		}
	}
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	08009f7c 	.word	0x08009f7c
 8002630:	200000dc 	.word	0x200000dc
 8002634:	200018fc 	.word	0x200018fc
 8002638:	200010dc 	.word	0x200010dc
 800263c:	08009a38 	.word	0x08009a38
 8002640:	08009fb8 	.word	0x08009fb8
 8002644:	20002515 	.word	0x20002515
 8002648:	200019d4 	.word	0x200019d4
 800264c:	20002518 	.word	0x20002518
 8002650:	2000251c 	.word	0x2000251c
 8002654:	08009fc8 	.word	0x08009fc8

08002658 <Si468x_dab_full_scan>:

void Si468x_dab_full_scan()
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 800265e:	2101      	movs	r1, #1
 8002660:	48b7      	ldr	r0, [pc, #732]	; (8002940 <Si468x_dab_full_scan+0x2e8>)
 8002662:	f000 fc53 	bl	8002f0c <send_debug_msg>
	total_services = 0;
 8002666:	4bb7      	ldr	r3, [pc, #732]	; (8002944 <Si468x_dab_full_scan+0x2ec>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
	total_ensembles = 0;
 800266c:	4bb6      	ldr	r3, [pc, #728]	; (8002948 <Si468x_dab_full_scan+0x2f0>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
	actual_services = 0;
 8002672:	4bb6      	ldr	r3, [pc, #728]	; (800294c <Si468x_dab_full_scan+0x2f4>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]

	uint8_t valid_timeout = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	71fb      	strb	r3, [r7, #7]
	uint8_t fic_q_timeout = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	71bb      	strb	r3, [r7, #6]

	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002680:	2300      	movs	r3, #0
 8002682:	717b      	strb	r3, [r7, #5]
 8002684:	e051      	b.n	800272a <Si468x_dab_full_scan+0xd2>
	{
		sig_metrics.valid = 0;
 8002686:	4bb2      	ldr	r3, [pc, #712]	; (8002950 <Si468x_dab_full_scan+0x2f8>)
 8002688:	2200      	movs	r2, #0
 800268a:	711a      	strb	r2, [r3, #4]
		sig_metrics.acq = 0;
 800268c:	4bb0      	ldr	r3, [pc, #704]	; (8002950 <Si468x_dab_full_scan+0x2f8>)
 800268e:	2200      	movs	r2, #0
 8002690:	715a      	strb	r2, [r3, #5]
		sig_metrics.fic_q = 0;
 8002692:	4baf      	ldr	r3, [pc, #700]	; (8002950 <Si468x_dab_full_scan+0x2f8>)
 8002694:	2200      	movs	r2, #0
 8002696:	71da      	strb	r2, [r3, #7]

		valid_timeout = VALID_TIMEOUT;
 8002698:	2304      	movs	r3, #4
 800269a:	71fb      	strb	r3, [r7, #7]
		fic_q_timeout = FIC_Q_TIMEOUT;
 800269c:	2364      	movs	r3, #100	; 0x64
 800269e:	71bb      	strb	r3, [r7, #6]

		Si468x_dab_tune_freq(freq_index);
 80026a0:	797b      	ldrb	r3, [r7, #5]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff faf8 	bl	8001c98 <Si468x_dab_tune_freq>
		while(!sig_metrics.valid || !sig_metrics.acq /*|| sig_metrics.fic_q < 100*/)
 80026a8:	e00f      	b.n	80026ca <Si468x_dab_full_scan+0x72>
		{
			Si468x_dab_digrad_status();
 80026aa:	f7ff fba3 	bl	8001df4 <Si468x_dab_digrad_status>
			valid_timeout--;
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	71fb      	strb	r3, [r7, #7]
			if(!valid_timeout)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d104      	bne.n	80026c4 <Si468x_dab_full_scan+0x6c>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 80026ba:	2101      	movs	r1, #1
 80026bc:	48a5      	ldr	r0, [pc, #660]	; (8002954 <Si468x_dab_full_scan+0x2fc>)
 80026be:	f000 fc25 	bl	8002f0c <send_debug_msg>
				break;
 80026c2:	e00a      	b.n	80026da <Si468x_dab_full_scan+0x82>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 80026c4:	2032      	movs	r0, #50	; 0x32
 80026c6:	f001 fe77 	bl	80043b8 <HAL_Delay>
		while(!sig_metrics.valid || !sig_metrics.acq /*|| sig_metrics.fic_q < 100*/)
 80026ca:	4ba1      	ldr	r3, [pc, #644]	; (8002950 <Si468x_dab_full_scan+0x2f8>)
 80026cc:	791b      	ldrb	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0eb      	beq.n	80026aa <Si468x_dab_full_scan+0x52>
 80026d2:	4b9f      	ldr	r3, [pc, #636]	; (8002950 <Si468x_dab_full_scan+0x2f8>)
 80026d4:	795b      	ldrb	r3, [r3, #5]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0e7      	beq.n	80026aa <Si468x_dab_full_scan+0x52>
		}
		if(valid_timeout)
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d014      	beq.n	800270a <Si468x_dab_full_scan+0xb2>
		{
			while(sig_metrics.fic_q < 100)
 80026e0:	e00f      	b.n	8002702 <Si468x_dab_full_scan+0xaa>
			{
				Si468x_dab_digrad_status();
 80026e2:	f7ff fb87 	bl	8001df4 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 80026e6:	79bb      	ldrb	r3, [r7, #6]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	71bb      	strb	r3, [r7, #6]
				if(!fic_q_timeout)
 80026ec:	79bb      	ldrb	r3, [r7, #6]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <Si468x_dab_full_scan+0xa4>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 80026f2:	2101      	movs	r1, #1
 80026f4:	4897      	ldr	r0, [pc, #604]	; (8002954 <Si468x_dab_full_scan+0x2fc>)
 80026f6:	f000 fc09 	bl	8002f0c <send_debug_msg>
					break;
 80026fa:	e006      	b.n	800270a <Si468x_dab_full_scan+0xb2>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 80026fc:	2032      	movs	r0, #50	; 0x32
 80026fe:	f001 fe5b 	bl	80043b8 <HAL_Delay>
			while(sig_metrics.fic_q < 100)
 8002702:	4b93      	ldr	r3, [pc, #588]	; (8002950 <Si468x_dab_full_scan+0x2f8>)
 8002704:	79db      	ldrb	r3, [r3, #7]
 8002706:	2b63      	cmp	r3, #99	; 0x63
 8002708:	d9eb      	bls.n	80026e2 <Si468x_dab_full_scan+0x8a>
			}
		}

		if(valid_timeout && fic_q_timeout)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <Si468x_dab_full_scan+0xcc>
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <Si468x_dab_full_scan+0xcc>
		{
			if(Si468x_dab_get_ensemble_info())
 8002716:	f7ff fee1 	bl	80024dc <Si468x_dab_get_ensemble_info>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <Si468x_dab_full_scan+0xcc>
			{
				Si468x_dab_get_digital_service_list();
 8002720:	f7ff fbf0 	bl	8001f04 <Si468x_dab_get_digital_service_list>
	for(uint8_t freq_index = 0; freq_index < freq_cnt; freq_index++)
 8002724:	797b      	ldrb	r3, [r7, #5]
 8002726:	3301      	adds	r3, #1
 8002728:	717b      	strb	r3, [r7, #5]
 800272a:	4b8b      	ldr	r3, [pc, #556]	; (8002958 <Si468x_dab_full_scan+0x300>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	797a      	ldrb	r2, [r7, #5]
 8002730:	429a      	cmp	r2, r3
 8002732:	d3a8      	bcc.n	8002686 <Si468x_dab_full_scan+0x2e>
			}
		}
	}

	//display info about  ensembles
	send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002734:	2100      	movs	r1, #0
 8002736:	4889      	ldr	r0, [pc, #548]	; (800295c <Si468x_dab_full_scan+0x304>)
 8002738:	f000 fbe8 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(total_ensembles, itoa_buffer, 10), CRLF_SEND);
 800273c:	4b82      	ldr	r3, [pc, #520]	; (8002948 <Si468x_dab_full_scan+0x2f0>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	220a      	movs	r2, #10
 8002742:	4987      	ldr	r1, [pc, #540]	; (8002960 <Si468x_dab_full_scan+0x308>)
 8002744:	4618      	mov	r0, r3
 8002746:	f006 ffb3 	bl	80096b0 <itoa>
 800274a:	4603      	mov	r3, r0
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fbdc 	bl	8002f0c <send_debug_msg>

	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002754:	2101      	movs	r1, #1
 8002756:	4883      	ldr	r0, [pc, #524]	; (8002964 <Si468x_dab_full_scan+0x30c>)
 8002758:	f000 fbd8 	bl	8002f0c <send_debug_msg>
	send_debug_msg("| Number", CRLF_NO_SEND);
 800275c:	2100      	movs	r1, #0
 800275e:	4882      	ldr	r0, [pc, #520]	; (8002968 <Si468x_dab_full_scan+0x310>)
 8002760:	f000 fbd4 	bl	8002f0c <send_debug_msg>
	send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8002764:	2100      	movs	r1, #0
 8002766:	4881      	ldr	r0, [pc, #516]	; (800296c <Si468x_dab_full_scan+0x314>)
 8002768:	f000 fbd0 	bl	8002f0c <send_debug_msg>
	send_debug_msg("| Frequency ", CRLF_NO_SEND);
 800276c:	2100      	movs	r1, #0
 800276e:	4880      	ldr	r0, [pc, #512]	; (8002970 <Si468x_dab_full_scan+0x318>)
 8002770:	f000 fbcc 	bl	8002f0c <send_debug_msg>
	send_debug_msg(" | Channel |", CRLF_SEND);
 8002774:	2101      	movs	r1, #1
 8002776:	487f      	ldr	r0, [pc, #508]	; (8002974 <Si468x_dab_full_scan+0x31c>)
 8002778:	f000 fbc8 	bl	8002f0c <send_debug_msg>

	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 800277c:	2300      	movs	r3, #0
 800277e:	713b      	strb	r3, [r7, #4]
 8002780:	e060      	b.n	8002844 <Si468x_dab_full_scan+0x1ec>
	{
		send_debug_msg("| ", CRLF_NO_SEND);
 8002782:	2100      	movs	r1, #0
 8002784:	487c      	ldr	r0, [pc, #496]	; (8002978 <Si468x_dab_full_scan+0x320>)
 8002786:	f000 fbc1 	bl	8002f0c <send_debug_msg>
		send_debug_msg(itoa(ensembles_index, itoa_buffer, 10), CRLF_NO_SEND);
 800278a:	793b      	ldrb	r3, [r7, #4]
 800278c:	220a      	movs	r2, #10
 800278e:	4974      	ldr	r1, [pc, #464]	; (8002960 <Si468x_dab_full_scan+0x308>)
 8002790:	4618      	mov	r0, r3
 8002792:	f006 ff8d 	bl	80096b0 <itoa>
 8002796:	4603      	mov	r3, r0
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fbb6 	bl	8002f0c <send_debug_msg>
		send_debug_msg("      | ", CRLF_NO_SEND);
 80027a0:	2100      	movs	r1, #0
 80027a2:	4876      	ldr	r0, [pc, #472]	; (800297c <Si468x_dab_full_scan+0x324>)
 80027a4:	f000 fbb2 	bl	8002f0c <send_debug_msg>

		send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 80027a8:	793a      	ldrb	r2, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4a73      	ldr	r2, [pc, #460]	; (8002980 <Si468x_dab_full_scan+0x328>)
 80027b4:	4413      	add	r3, r2
 80027b6:	3302      	adds	r3, #2
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fba6 	bl	8002f0c <send_debug_msg>
		send_debug_msg("| ", CRLF_NO_SEND);
 80027c0:	2100      	movs	r1, #0
 80027c2:	486d      	ldr	r0, [pc, #436]	; (8002978 <Si468x_dab_full_scan+0x320>)
 80027c4:	f000 fba2 	bl	8002f0c <send_debug_msg>

		send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80027c8:	793a      	ldrb	r2, [r7, #4]
 80027ca:	496d      	ldr	r1, [pc, #436]	; (8002980 <Si468x_dab_full_scan+0x328>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3314      	adds	r3, #20
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	220a      	movs	r2, #10
 80027dc:	4960      	ldr	r1, [pc, #384]	; (8002960 <Si468x_dab_full_scan+0x308>)
 80027de:	4618      	mov	r0, r3
 80027e0:	f006 ff66 	bl	80096b0 <itoa>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fb8f 	bl	8002f0c <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80027ee:	2100      	movs	r1, #0
 80027f0:	4864      	ldr	r0, [pc, #400]	; (8002984 <Si468x_dab_full_scan+0x32c>)
 80027f2:	f000 fb8b 	bl	8002f0c <send_debug_msg>

		send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80027f6:	793a      	ldrb	r2, [r7, #4]
 80027f8:	4961      	ldr	r1, [pc, #388]	; (8002980 <Si468x_dab_full_scan+0x328>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3318      	adds	r3, #24
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <Si468x_dab_full_scan+0x330>)
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fb7a 	bl	8002f0c <send_debug_msg>
		if(ensembles_list[ensembles_index].freq_id < 20)
 8002818:	793a      	ldrb	r2, [r7, #4]
 800281a:	4959      	ldr	r1, [pc, #356]	; (8002980 <Si468x_dab_full_scan+0x328>)
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3318      	adds	r3, #24
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b13      	cmp	r3, #19
 800282c:	d803      	bhi.n	8002836 <Si468x_dab_full_scan+0x1de>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 800282e:	2100      	movs	r1, #0
 8002830:	4856      	ldr	r0, [pc, #344]	; (800298c <Si468x_dab_full_scan+0x334>)
 8002832:	f000 fb6b 	bl	8002f0c <send_debug_msg>
		}
		send_debug_msg("  |", CRLF_SEND);
 8002836:	2101      	movs	r1, #1
 8002838:	4855      	ldr	r0, [pc, #340]	; (8002990 <Si468x_dab_full_scan+0x338>)
 800283a:	f000 fb67 	bl	8002f0c <send_debug_msg>
	for(uint8_t ensembles_index = 0; ensembles_index < total_ensembles; ensembles_index++)
 800283e:	793b      	ldrb	r3, [r7, #4]
 8002840:	3301      	adds	r3, #1
 8002842:	713b      	strb	r3, [r7, #4]
 8002844:	4b40      	ldr	r3, [pc, #256]	; (8002948 <Si468x_dab_full_scan+0x2f0>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	793a      	ldrb	r2, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d399      	bcc.n	8002782 <Si468x_dab_full_scan+0x12a>
	}
	send_debug_msg("--------------------------------------------------", CRLF_SEND);
 800284e:	2101      	movs	r1, #1
 8002850:	4844      	ldr	r0, [pc, #272]	; (8002964 <Si468x_dab_full_scan+0x30c>)
 8002852:	f000 fb5b 	bl	8002f0c <send_debug_msg>

	//display info about services
	send_debug_msg("Services found: ", CRLF_NO_SEND);
 8002856:	2100      	movs	r1, #0
 8002858:	484e      	ldr	r0, [pc, #312]	; (8002994 <Si468x_dab_full_scan+0x33c>)
 800285a:	f000 fb57 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(total_services, itoa_buffer, 10), CRLF_SEND);
 800285e:	4b39      	ldr	r3, [pc, #228]	; (8002944 <Si468x_dab_full_scan+0x2ec>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	220a      	movs	r2, #10
 8002864:	493e      	ldr	r1, [pc, #248]	; (8002960 <Si468x_dab_full_scan+0x308>)
 8002866:	4618      	mov	r0, r3
 8002868:	f006 ff22 	bl	80096b0 <itoa>
 800286c:	4603      	mov	r3, r0
 800286e:	2101      	movs	r1, #1
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fb4b 	bl	8002f0c <send_debug_msg>


	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002876:	2101      	movs	r1, #1
 8002878:	4847      	ldr	r0, [pc, #284]	; (8002998 <Si468x_dab_full_scan+0x340>)
 800287a:	f000 fb47 	bl	8002f0c <send_debug_msg>
	send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 800287e:	2101      	movs	r1, #1
 8002880:	4846      	ldr	r0, [pc, #280]	; (800299c <Si468x_dab_full_scan+0x344>)
 8002882:	f000 fb43 	bl	8002f0c <send_debug_msg>

	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002886:	2300      	movs	r3, #0
 8002888:	70fb      	strb	r3, [r7, #3]
 800288a:	e130      	b.n	8002aee <Si468x_dab_full_scan+0x496>
	{
		//Number
		send_debug_msg("| ", CRLF_NO_SEND);
 800288c:	2100      	movs	r1, #0
 800288e:	483a      	ldr	r0, [pc, #232]	; (8002978 <Si468x_dab_full_scan+0x320>)
 8002890:	f000 fb3c 	bl	8002f0c <send_debug_msg>
		send_debug_msg(itoa(services_index, itoa_buffer, 10), CRLF_NO_SEND);
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	220a      	movs	r2, #10
 8002898:	4931      	ldr	r1, [pc, #196]	; (8002960 <Si468x_dab_full_scan+0x308>)
 800289a:	4618      	mov	r0, r3
 800289c:	f006 ff08 	bl	80096b0 <itoa>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fb31 	bl	8002f0c <send_debug_msg>
		if(services_index < 10)
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	2b09      	cmp	r3, #9
 80028ae:	d803      	bhi.n	80028b8 <Si468x_dab_full_scan+0x260>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 80028b0:	2100      	movs	r1, #0
 80028b2:	4836      	ldr	r0, [pc, #216]	; (800298c <Si468x_dab_full_scan+0x334>)
 80028b4:	f000 fb2a 	bl	8002f0c <send_debug_msg>
		}
		send_debug_msg("     | ", CRLF_NO_SEND);
 80028b8:	2100      	movs	r1, #0
 80028ba:	4839      	ldr	r0, [pc, #228]	; (80029a0 <Si468x_dab_full_scan+0x348>)
 80028bc:	f000 fb26 	bl	8002f0c <send_debug_msg>

		//Name
		if(services_list[services_index].name[0])
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <Si468x_dab_full_scan+0x34c>)
 80028c4:	2134      	movs	r1, #52	; 0x34
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <Si468x_dab_full_scan+0x290>
		{
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	2234      	movs	r2, #52	; 0x34
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	4a32      	ldr	r2, [pc, #200]	; (80029a4 <Si468x_dab_full_scan+0x34c>)
 80028dc:	4413      	add	r3, r2
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fb13 	bl	8002f0c <send_debug_msg>
 80028e6:	e003      	b.n	80028f0 <Si468x_dab_full_scan+0x298>
		}
		else
		{
			send_debug_msg("Unknown name    ", CRLF_NO_SEND);
 80028e8:	2100      	movs	r1, #0
 80028ea:	482f      	ldr	r0, [pc, #188]	; (80029a8 <Si468x_dab_full_scan+0x350>)
 80028ec:	f000 fb0e 	bl	8002f0c <send_debug_msg>
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 80028f0:	2100      	movs	r1, #0
 80028f2:	482e      	ldr	r0, [pc, #184]	; (80029ac <Si468x_dab_full_scan+0x354>)
 80028f4:	f000 fb0a 	bl	8002f0c <send_debug_msg>

		//Ensemble Name
		for(uint8_t i = 0; i < total_ensembles; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	70bb      	strb	r3, [r7, #2]
 80028fc:	e05b      	b.n	80029b6 <Si468x_dab_full_scan+0x35e>
		{
			if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 80028fe:	78ba      	ldrb	r2, [r7, #2]
 8002900:	491f      	ldr	r1, [pc, #124]	; (8002980 <Si468x_dab_full_scan+0x328>)
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3318      	adds	r3, #24
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	4924      	ldr	r1, [pc, #144]	; (80029a4 <Si468x_dab_full_scan+0x34c>)
 8002914:	2034      	movs	r0, #52	; 0x34
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	440b      	add	r3, r1
 800291c:	332c      	adds	r3, #44	; 0x2c
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d145      	bne.n	80029b0 <Si468x_dab_full_scan+0x358>
			{
				send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8002924:	78ba      	ldrb	r2, [r7, #2]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4a14      	ldr	r2, [pc, #80]	; (8002980 <Si468x_dab_full_scan+0x328>)
 8002930:	4413      	add	r3, r2
 8002932:	3302      	adds	r3, #2
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fae8 	bl	8002f0c <send_debug_msg>
				break;
 800293c:	e040      	b.n	80029c0 <Si468x_dab_full_scan+0x368>
 800293e:	bf00      	nop
 8002940:	08009fdc 	.word	0x08009fdc
 8002944:	20002514 	.word	0x20002514
 8002948:	20002515 	.word	0x20002515
 800294c:	20002516 	.word	0x20002516
 8002950:	200019c4 	.word	0x200019c4
 8002954:	08009fc8 	.word	0x08009fc8
 8002958:	200019c0 	.word	0x200019c0
 800295c:	0800a018 	.word	0x0800a018
 8002960:	200018dc 	.word	0x200018dc
 8002964:	0800a02c 	.word	0x0800a02c
 8002968:	0800a060 	.word	0x0800a060
 800296c:	0800a06c 	.word	0x0800a06c
 8002970:	0800a080 	.word	0x0800a080
 8002974:	0800a090 	.word	0x0800a090
 8002978:	0800a0a0 	.word	0x0800a0a0
 800297c:	0800a0a4 	.word	0x0800a0a4
 8002980:	200019d4 	.word	0x200019d4
 8002984:	0800a0b0 	.word	0x0800a0b0
 8002988:	20000008 	.word	0x20000008
 800298c:	0800a0b8 	.word	0x0800a0b8
 8002990:	0800a0bc 	.word	0x0800a0bc
 8002994:	0800a0c0 	.word	0x0800a0c0
 8002998:	0800a0d4 	.word	0x0800a0d4
 800299c:	0800a140 	.word	0x0800a140
 80029a0:	0800a1ac 	.word	0x0800a1ac
 80029a4:	20001aec 	.word	0x20001aec
 80029a8:	0800a1b4 	.word	0x0800a1b4
 80029ac:	0800a1c8 	.word	0x0800a1c8
		for(uint8_t i = 0; i < total_ensembles; i++)
 80029b0:	78bb      	ldrb	r3, [r7, #2]
 80029b2:	3301      	adds	r3, #1
 80029b4:	70bb      	strb	r3, [r7, #2]
 80029b6:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <Si468x_dab_full_scan+0x4b4>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	78ba      	ldrb	r2, [r7, #2]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d39e      	bcc.n	80028fe <Si468x_dab_full_scan+0x2a6>
			}
		}
		send_debug_msg(" | ", CRLF_NO_SEND);
 80029c0:	2100      	movs	r1, #0
 80029c2:	4853      	ldr	r0, [pc, #332]	; (8002b10 <Si468x_dab_full_scan+0x4b8>)
 80029c4:	f000 faa2 	bl	8002f0c <send_debug_msg>

		//Frequency
		send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <Si468x_dab_full_scan+0x4bc>)
 80029cc:	2134      	movs	r1, #52	; 0x34
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3328      	adds	r3, #40	; 0x28
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	220a      	movs	r2, #10
 80029da:	494f      	ldr	r1, [pc, #316]	; (8002b18 <Si468x_dab_full_scan+0x4c0>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f006 fe67 	bl	80096b0 <itoa>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa90 	bl	8002f0c <send_debug_msg>
		send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80029ec:	2100      	movs	r1, #0
 80029ee:	484b      	ldr	r0, [pc, #300]	; (8002b1c <Si468x_dab_full_scan+0x4c4>)
 80029f0:	f000 fa8c 	bl	8002f0c <send_debug_msg>

		//Channel
		send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <Si468x_dab_full_scan+0x4bc>)
 80029f8:	2134      	movs	r1, #52	; 0x34
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	332c      	adds	r3, #44	; 0x2c
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <Si468x_dab_full_scan+0x4c8>)
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fa7c 	bl	8002f0c <send_debug_msg>
		if(services_list[services_index].freq_id < 20)
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <Si468x_dab_full_scan+0x4bc>)
 8002a18:	2134      	movs	r1, #52	; 0x34
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	332c      	adds	r3, #44	; 0x2c
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b13      	cmp	r3, #19
 8002a26:	d803      	bhi.n	8002a30 <Si468x_dab_full_scan+0x3d8>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	483e      	ldr	r0, [pc, #248]	; (8002b24 <Si468x_dab_full_scan+0x4cc>)
 8002a2c:	f000 fa6e 	bl	8002f0c <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002a30:	2100      	movs	r1, #0
 8002a32:	483d      	ldr	r0, [pc, #244]	; (8002b28 <Si468x_dab_full_scan+0x4d0>)
 8002a34:	f000 fa6a 	bl	8002f0c <send_debug_msg>

		//PTY
		send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	4a36      	ldr	r2, [pc, #216]	; (8002b14 <Si468x_dab_full_scan+0x4bc>)
 8002a3c:	2134      	movs	r1, #52	; 0x34
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3319      	adds	r3, #25
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	220a      	movs	r2, #10
 8002a4a:	4933      	ldr	r1, [pc, #204]	; (8002b18 <Si468x_dab_full_scan+0x4c0>)
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f006 fe2f 	bl	80096b0 <itoa>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fa58 	bl	8002f0c <send_debug_msg>
		if(services_list[services_index].p_ty < 10)
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <Si468x_dab_full_scan+0x4bc>)
 8002a60:	2134      	movs	r1, #52	; 0x34
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3319      	adds	r3, #25
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	d803      	bhi.n	8002a78 <Si468x_dab_full_scan+0x420>
		{
			send_debug_msg(" ", CRLF_NO_SEND);
 8002a70:	2100      	movs	r1, #0
 8002a72:	482c      	ldr	r0, [pc, #176]	; (8002b24 <Si468x_dab_full_scan+0x4cc>)
 8002a74:	f000 fa4a 	bl	8002f0c <send_debug_msg>
		}
		send_debug_msg("  | ", CRLF_NO_SEND);
 8002a78:	2100      	movs	r1, #0
 8002a7a:	482b      	ldr	r0, [pc, #172]	; (8002b28 <Si468x_dab_full_scan+0x4d0>)
 8002a7c:	f000 fa46 	bl	8002f0c <send_debug_msg>

		//Service ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002a80:	2100      	movs	r1, #0
 8002a82:	482a      	ldr	r0, [pc, #168]	; (8002b2c <Si468x_dab_full_scan+0x4d4>)
 8002a84:	f000 fa42 	bl	8002f0c <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <Si468x_dab_full_scan+0x4bc>)
 8002a8c:	2134      	movs	r1, #52	; 0x34
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3324      	adds	r3, #36	; 0x24
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	491f      	ldr	r1, [pc, #124]	; (8002b18 <Si468x_dab_full_scan+0x4c0>)
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f006 fe07 	bl	80096b0 <itoa>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fa30 	bl	8002f0c <send_debug_msg>
		send_debug_msg("     | ", CRLF_NO_SEND);
 8002aac:	2100      	movs	r1, #0
 8002aae:	4820      	ldr	r0, [pc, #128]	; (8002b30 <Si468x_dab_full_scan+0x4d8>)
 8002ab0:	f000 fa2c 	bl	8002f0c <send_debug_msg>

		//Component ID
		send_debug_msg("0x", CRLF_NO_SEND);
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	481d      	ldr	r0, [pc, #116]	; (8002b2c <Si468x_dab_full_scan+0x4d4>)
 8002ab8:	f000 fa28 	bl	8002f0c <send_debug_msg>
		send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	4a15      	ldr	r2, [pc, #84]	; (8002b14 <Si468x_dab_full_scan+0x4bc>)
 8002ac0:	2134      	movs	r1, #52	; 0x34
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	332e      	adds	r3, #46	; 0x2e
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2210      	movs	r2, #16
 8002ace:	4912      	ldr	r1, [pc, #72]	; (8002b18 <Si468x_dab_full_scan+0x4c0>)
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f006 fded 	bl	80096b0 <itoa>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fa16 	bl	8002f0c <send_debug_msg>
		send_debug_msg("          |", CRLF_SEND);
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4814      	ldr	r0, [pc, #80]	; (8002b34 <Si468x_dab_full_scan+0x4dc>)
 8002ae4:	f000 fa12 	bl	8002f0c <send_debug_msg>
	for(uint8_t services_index = 0; services_index < total_services; services_index++)
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	3301      	adds	r3, #1
 8002aec:	70fb      	strb	r3, [r7, #3]
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <Si468x_dab_full_scan+0x4e0>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f4ff aec9 	bcc.w	800288c <Si468x_dab_full_scan+0x234>

	}
	send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 8002afa:	2101      	movs	r1, #1
 8002afc:	480f      	ldr	r0, [pc, #60]	; (8002b3c <Si468x_dab_full_scan+0x4e4>)
 8002afe:	f000 fa05 	bl	8002f0c <send_debug_msg>

}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20002515 	.word	0x20002515
 8002b10:	0800a1c8 	.word	0x0800a1c8
 8002b14:	20001aec 	.word	0x20001aec
 8002b18:	200018dc 	.word	0x200018dc
 8002b1c:	0800a0b0 	.word	0x0800a0b0
 8002b20:	20000008 	.word	0x20000008
 8002b24:	0800a0b8 	.word	0x0800a0b8
 8002b28:	0800a1cc 	.word	0x0800a1cc
 8002b2c:	0800a1d4 	.word	0x0800a1d4
 8002b30:	0800a1ac 	.word	0x0800a1ac
 8002b34:	0800a1d8 	.word	0x0800a1d8
 8002b38:	20002514 	.word	0x20002514
 8002b3c:	0800a0d4 	.word	0x0800a0d4

08002b40 <Si468x_dab_get_audio_info>:

void Si468x_dab_get_audio_info()
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
	uint16_t bit_rate, sample_rate;
	uint8_t xpad_indicator, ps_flag, sbr_flag, audio_mode;

	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002b46:	2101      	movs	r1, #1
 8002b48:	4867      	ldr	r0, [pc, #412]	; (8002ce8 <Si468x_dab_get_audio_info+0x1a8>)
 8002b4a:	f000 f9df 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002b4e:	4b67      	ldr	r3, [pc, #412]	; (8002cec <Si468x_dab_get_audio_info+0x1ac>)
 8002b50:	22bd      	movs	r2, #189	; 0xbd
 8002b52:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002b54:	4b65      	ldr	r3, [pc, #404]	; (8002cec <Si468x_dab_get_audio_info+0x1ac>)
 8002b56:	2203      	movs	r2, #3
 8002b58:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002b5a:	4964      	ldr	r1, [pc, #400]	; (8002cec <Si468x_dab_get_audio_info+0x1ac>)
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f7fe fdaf 	bl	80016c0 <Si468x_write_command>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b62      	ldr	r3, [pc, #392]	; (8002cf0 <Si468x_dab_get_audio_info+0x1b0>)
 8002b68:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f001 fc24 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002b70:	4960      	ldr	r1, [pc, #384]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002b72:	2014      	movs	r0, #20
 8002b74:	f7fe fdc6 	bl	8001704 <Si468x_read_reply>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b5c      	ldr	r3, [pc, #368]	; (8002cf0 <Si468x_dab_get_audio_info+0x1b0>)
 8002b7e:	701a      	strb	r2, [r3, #0]

	bit_rate = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002b80:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002b82:	795b      	ldrb	r3, [r3, #5]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b5a      	ldr	r3, [pc, #360]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002b8c:	791b      	ldrb	r3, [r3, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	80fb      	strh	r3, [r7, #6]
	sample_rate = (dab_spi_rx_buffer[7] << 8) + dab_spi_rx_buffer[6];
 8002b94:	4b57      	ldr	r3, [pc, #348]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002b96:	79db      	ldrb	r3, [r3, #7]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	4b55      	ldr	r3, [pc, #340]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002ba0:	799b      	ldrb	r3, [r3, #6]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	80bb      	strh	r3, [r7, #4]

	xpad_indicator = (dab_spi_rx_buffer[8] & 0x30) >> 4;
 8002ba8:	4b52      	ldr	r3, [pc, #328]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002baa:	7a1b      	ldrb	r3, [r3, #8]
 8002bac:	111b      	asrs	r3, r3, #4
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	70fb      	strb	r3, [r7, #3]
	ps_flag = (dab_spi_rx_buffer[8] & 0x08) >> 3;
 8002bb6:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002bb8:	7a1b      	ldrb	r3, [r3, #8]
 8002bba:	10db      	asrs	r3, r3, #3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	70bb      	strb	r3, [r7, #2]
	sbr_flag = (dab_spi_rx_buffer[8] & 0x04) >> 2;
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002bc6:	7a1b      	ldrb	r3, [r3, #8]
 8002bc8:	109b      	asrs	r3, r3, #2
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	707b      	strb	r3, [r7, #1]
	audio_mode = dab_spi_rx_buffer[8] & 0x03;
 8002bd2:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002bd4:	7a1b      	ldrb	r3, [r3, #8]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	703b      	strb	r3, [r7, #0]

	sig_metrics.fic_bit_cnt = dab_spi_rx_buffer[12] + (dab_spi_rx_buffer[13] << 8) + (dab_spi_rx_buffer[14] << 16) + (dab_spi_rx_buffer[15] << 24);
 8002bdc:	4b45      	ldr	r3, [pc, #276]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002bde:	7b1b      	ldrb	r3, [r3, #12]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002be4:	7b5b      	ldrb	r3, [r3, #13]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	441a      	add	r2, r3
 8002bea:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002bec:	7b9b      	ldrb	r3, [r3, #14]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	441a      	add	r2, r3
 8002bf2:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002bf4:	7bdb      	ldrb	r3, [r3, #15]
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	4413      	add	r3, r2
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <Si468x_dab_get_audio_info+0x1b8>)
 8002bfe:	609a      	str	r2, [r3, #8]
	sig_metrics.fic_err_cnt = dab_spi_rx_buffer[16] + (dab_spi_rx_buffer[17] << 8) + (dab_spi_rx_buffer[18] << 16) + (dab_spi_rx_buffer[19] << 24);
 8002c00:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002c02:	7c1b      	ldrb	r3, [r3, #16]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002c08:	7c5b      	ldrb	r3, [r3, #17]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	441a      	add	r2, r3
 8002c0e:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002c10:	7c9b      	ldrb	r3, [r3, #18]
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	441a      	add	r2, r3
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <Si468x_dab_get_audio_info+0x1b4>)
 8002c18:	7cdb      	ldrb	r3, [r3, #19]
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	4413      	add	r3, r2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <Si468x_dab_get_audio_info+0x1b8>)
 8002c22:	60da      	str	r2, [r3, #12]

	DisplayDabStatus(sig_metrics);
 8002c24:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <Si468x_dab_get_audio_info+0x1b8>)
 8002c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c28:	f000 fab0 	bl	800318c <DisplayDabStatus>

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4833      	ldr	r0, [pc, #204]	; (8002cfc <Si468x_dab_get_audio_info+0x1bc>)
 8002c30:	f000 f96c 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	220a      	movs	r2, #10
 8002c38:	4931      	ldr	r1, [pc, #196]	; (8002d00 <Si468x_dab_get_audio_info+0x1c0>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f006 fd38 	bl	80096b0 <itoa>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f961 	bl	8002f0c <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	482d      	ldr	r0, [pc, #180]	; (8002d04 <Si468x_dab_get_audio_info+0x1c4>)
 8002c4e:	f000 f95d 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002c52:	88bb      	ldrh	r3, [r7, #4]
 8002c54:	220a      	movs	r2, #10
 8002c56:	492a      	ldr	r1, [pc, #168]	; (8002d00 <Si468x_dab_get_audio_info+0x1c0>)
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f006 fd29 	bl	80096b0 <itoa>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f952 	bl	8002f0c <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4827      	ldr	r0, [pc, #156]	; (8002d08 <Si468x_dab_get_audio_info+0x1c8>)
 8002c6c:	f000 f94e 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(xpad_indicator, itoa_buffer, 10), CRLF_SEND);
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	220a      	movs	r2, #10
 8002c74:	4922      	ldr	r1, [pc, #136]	; (8002d00 <Si468x_dab_get_audio_info+0x1c0>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f006 fd1a 	bl	80096b0 <itoa>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f943 	bl	8002f0c <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002c86:	2100      	movs	r1, #0
 8002c88:	4820      	ldr	r0, [pc, #128]	; (8002d0c <Si468x_dab_get_audio_info+0x1cc>)
 8002c8a:	f000 f93f 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002c8e:	78bb      	ldrb	r3, [r7, #2]
 8002c90:	220a      	movs	r2, #10
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <Si468x_dab_get_audio_info+0x1c0>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f006 fd0b 	bl	80096b0 <itoa>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f934 	bl	8002f0c <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	481a      	ldr	r0, [pc, #104]	; (8002d10 <Si468x_dab_get_audio_info+0x1d0>)
 8002ca8:	f000 f930 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(sbr_flag, itoa_buffer, 10), CRLF_SEND);
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	220a      	movs	r2, #10
 8002cb0:	4913      	ldr	r1, [pc, #76]	; (8002d00 <Si468x_dab_get_audio_info+0x1c0>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f006 fcfc 	bl	80096b0 <itoa>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f925 	bl	8002f0c <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4813      	ldr	r0, [pc, #76]	; (8002d14 <Si468x_dab_get_audio_info+0x1d4>)
 8002cc6:	f000 f921 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002cca:	783b      	ldrb	r3, [r7, #0]
 8002ccc:	220a      	movs	r2, #10
 8002cce:	490c      	ldr	r1, [pc, #48]	; (8002d00 <Si468x_dab_get_audio_info+0x1c0>)
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f006 fced 	bl	80096b0 <itoa>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f916 	bl	8002f0c <send_debug_msg>

}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	0800a1e4 	.word	0x0800a1e4
 8002cec:	200000dc 	.word	0x200000dc
 8002cf0:	200018fc 	.word	0x200018fc
 8002cf4:	200010dc 	.word	0x200010dc
 8002cf8:	200019c4 	.word	0x200019c4
 8002cfc:	0800a220 	.word	0x0800a220
 8002d00:	200018dc 	.word	0x200018dc
 8002d04:	0800a22c 	.word	0x0800a22c
 8002d08:	0800a23c 	.word	0x0800a23c
 8002d0c:	0800a250 	.word	0x0800a250
 8002d10:	0800a25c 	.word	0x0800a25c
 8002d14:	0800a268 	.word	0x0800a268

08002d18 <Si468x_dab_get_time>:

		DisplayDabStatus(sig_metrics);
}

void Si468x_dab_get_time()
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
	uint16_t year;
	uint8_t months, days, hours, minutes, seconds;

	send_debug_msg("--------------Getting time from Si468x-------------------", CRLF_SEND);
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4845      	ldr	r0, [pc, #276]	; (8002e38 <Si468x_dab_get_time+0x120>)
 8002d22:	f000 f8f3 	bl	8002f0c <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 8002d26:	4b45      	ldr	r3, [pc, #276]	; (8002e3c <Si468x_dab_get_time+0x124>)
 8002d28:	22bc      	movs	r2, #188	; 0xbc
 8002d2a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 8002d2c:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <Si468x_dab_get_time+0x124>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002d32:	4942      	ldr	r1, [pc, #264]	; (8002e3c <Si468x_dab_get_time+0x124>)
 8002d34:	2002      	movs	r0, #2
 8002d36:	f7fe fcc3 	bl	80016c0 <Si468x_write_command>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <Si468x_dab_get_time+0x128>)
 8002d40:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f001 fb38 	bl	80043b8 <HAL_Delay>
	status = Si468x_read_reply(11, dab_spi_rx_buffer);
 8002d48:	493e      	ldr	r1, [pc, #248]	; (8002e44 <Si468x_dab_get_time+0x12c>)
 8002d4a:	200b      	movs	r0, #11
 8002d4c:	f7fe fcda 	bl	8001704 <Si468x_read_reply>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <Si468x_dab_get_time+0x128>)
 8002d56:	701a      	strb	r2, [r3, #0]

	year = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8002d58:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <Si468x_dab_get_time+0x12c>)
 8002d5a:	795b      	ldrb	r3, [r3, #5]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <Si468x_dab_get_time+0x12c>)
 8002d64:	791b      	ldrb	r3, [r3, #4]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	80fb      	strh	r3, [r7, #6]
	months = dab_spi_rx_buffer[6];
 8002d6c:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <Si468x_dab_get_time+0x12c>)
 8002d6e:	799b      	ldrb	r3, [r3, #6]
 8002d70:	717b      	strb	r3, [r7, #5]
	days = dab_spi_rx_buffer[7];
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <Si468x_dab_get_time+0x12c>)
 8002d74:	79db      	ldrb	r3, [r3, #7]
 8002d76:	713b      	strb	r3, [r7, #4]
	hours = dab_spi_rx_buffer[8];
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <Si468x_dab_get_time+0x12c>)
 8002d7a:	7a1b      	ldrb	r3, [r3, #8]
 8002d7c:	70fb      	strb	r3, [r7, #3]
	minutes = dab_spi_rx_buffer[9];
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <Si468x_dab_get_time+0x12c>)
 8002d80:	7a5b      	ldrb	r3, [r3, #9]
 8002d82:	70bb      	strb	r3, [r7, #2]
	seconds = dab_spi_rx_buffer[10];
 8002d84:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <Si468x_dab_get_time+0x12c>)
 8002d86:	7a9b      	ldrb	r3, [r3, #10]
 8002d88:	707b      	strb	r3, [r7, #1]

	send_debug_msg(itoa(hours, itoa_buffer, 10), CRLF_NO_SEND);
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	220a      	movs	r2, #10
 8002d8e:	492e      	ldr	r1, [pc, #184]	; (8002e48 <Si468x_dab_get_time+0x130>)
 8002d90:	4618      	mov	r0, r3
 8002d92:	f006 fc8d 	bl	80096b0 <itoa>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f8b6 	bl	8002f0c <send_debug_msg>
	send_debug_msg(":", CRLF_NO_SEND);
 8002da0:	2100      	movs	r1, #0
 8002da2:	482a      	ldr	r0, [pc, #168]	; (8002e4c <Si468x_dab_get_time+0x134>)
 8002da4:	f000 f8b2 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(minutes, itoa_buffer, 10), CRLF_NO_SEND);
 8002da8:	78bb      	ldrb	r3, [r7, #2]
 8002daa:	220a      	movs	r2, #10
 8002dac:	4926      	ldr	r1, [pc, #152]	; (8002e48 <Si468x_dab_get_time+0x130>)
 8002dae:	4618      	mov	r0, r3
 8002db0:	f006 fc7e 	bl	80096b0 <itoa>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f8a7 	bl	8002f0c <send_debug_msg>
	send_debug_msg(":", CRLF_NO_SEND);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4822      	ldr	r0, [pc, #136]	; (8002e4c <Si468x_dab_get_time+0x134>)
 8002dc2:	f000 f8a3 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(seconds, itoa_buffer, 10), CRLF_SEND);
 8002dc6:	787b      	ldrb	r3, [r7, #1]
 8002dc8:	220a      	movs	r2, #10
 8002dca:	491f      	ldr	r1, [pc, #124]	; (8002e48 <Si468x_dab_get_time+0x130>)
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f006 fc6f 	bl	80096b0 <itoa>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f898 	bl	8002f0c <send_debug_msg>

	send_debug_msg(itoa(days, itoa_buffer, 10), CRLF_NO_SEND);
 8002ddc:	793b      	ldrb	r3, [r7, #4]
 8002dde:	220a      	movs	r2, #10
 8002de0:	4919      	ldr	r1, [pc, #100]	; (8002e48 <Si468x_dab_get_time+0x130>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f006 fc64 	bl	80096b0 <itoa>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f88d 	bl	8002f0c <send_debug_msg>
	send_debug_msg(".", CRLF_NO_SEND);
 8002df2:	2100      	movs	r1, #0
 8002df4:	4816      	ldr	r0, [pc, #88]	; (8002e50 <Si468x_dab_get_time+0x138>)
 8002df6:	f000 f889 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(months, itoa_buffer, 10), CRLF_NO_SEND);
 8002dfa:	797b      	ldrb	r3, [r7, #5]
 8002dfc:	220a      	movs	r2, #10
 8002dfe:	4912      	ldr	r1, [pc, #72]	; (8002e48 <Si468x_dab_get_time+0x130>)
 8002e00:	4618      	mov	r0, r3
 8002e02:	f006 fc55 	bl	80096b0 <itoa>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f87e 	bl	8002f0c <send_debug_msg>
	send_debug_msg(".", CRLF_NO_SEND);
 8002e10:	2100      	movs	r1, #0
 8002e12:	480f      	ldr	r0, [pc, #60]	; (8002e50 <Si468x_dab_get_time+0x138>)
 8002e14:	f000 f87a 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(year, itoa_buffer, 10), CRLF_SEND);
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	490a      	ldr	r1, [pc, #40]	; (8002e48 <Si468x_dab_get_time+0x130>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f006 fc46 	bl	80096b0 <itoa>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f86f 	bl	8002f0c <send_debug_msg>

}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	0800a2f4 	.word	0x0800a2f4
 8002e3c:	200000dc 	.word	0x200000dc
 8002e40:	200018fc 	.word	0x200018fc
 8002e44:	200010dc 	.word	0x200010dc
 8002e48:	200018dc 	.word	0x200018dc
 8002e4c:	0800a330 	.word	0x0800a330
 8002e50:	0800a334 	.word	0x0800a334

08002e54 <Si468x_play_next_station>:


void Si468x_play_next_station()
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------", CRLF_SEND);
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4826      	ldr	r0, [pc, #152]	; (8002ef4 <Si468x_play_next_station+0xa0>)
 8002e5c:	f000 f856 	bl	8002f0c <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 8002e60:	2100      	movs	r1, #0
 8002e62:	4825      	ldr	r0, [pc, #148]	; (8002ef8 <Si468x_play_next_station+0xa4>)
 8002e64:	f000 f852 	bl	8002f0c <send_debug_msg>
	send_debug_msg(itoa(actual_station, itoa_buffer, 10), CRLF_SEND);
 8002e68:	4b24      	ldr	r3, [pc, #144]	; (8002efc <Si468x_play_next_station+0xa8>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	220a      	movs	r2, #10
 8002e6e:	4924      	ldr	r1, [pc, #144]	; (8002f00 <Si468x_play_next_station+0xac>)
 8002e70:	4618      	mov	r0, r3
 8002e72:	f006 fc1d 	bl	80096b0 <itoa>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f846 	bl	8002f0c <send_debug_msg>
	  Si468x_dab_tune_freq(services_list[actual_station].freq_id); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <Si468x_play_next_station+0xa8>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <Si468x_play_next_station+0xb0>)
 8002e88:	2334      	movs	r3, #52	; 0x34
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	332c      	adds	r3, #44	; 0x2c
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe feff 	bl	8001c98 <Si468x_dab_tune_freq>
	  Si468x_dab_start_digital_service(services_list[actual_station].service_id, services_list[actual_station].components[0].subchannel_id);
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <Si468x_play_next_station+0xa8>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <Si468x_play_next_station+0xb0>)
 8002ea2:	2334      	movs	r3, #52	; 0x34
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3324      	adds	r3, #36	; 0x24
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <Si468x_play_next_station+0xa8>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	4913      	ldr	r1, [pc, #76]	; (8002f04 <Si468x_play_next_station+0xb0>)
 8002eb6:	2334      	movs	r3, #52	; 0x34
 8002eb8:	fb00 f303 	mul.w	r3, r0, r3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	332e      	adds	r3, #46	; 0x2e
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7ff fa9b 	bl	8002400 <Si468x_dab_start_digital_service>
	  Si468x_dab_digrad_status();
 8002eca:	f7fe ff93 	bl	8001df4 <Si468x_dab_digrad_status>
	  Si468x_dab_get_audio_info();
 8002ece:	f7ff fe37 	bl	8002b40 <Si468x_dab_get_audio_info>
	  actual_station++;
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <Si468x_play_next_station+0xa8>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <Si468x_play_next_station+0xa8>)
 8002edc:	701a      	strb	r2, [r3, #0]
	  if(actual_station == total_services)
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <Si468x_play_next_station+0xa8>)
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <Si468x_play_next_station+0xb4>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d102      	bne.n	8002ef0 <Si468x_play_next_station+0x9c>
	  {
		  actual_station = 0;
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <Si468x_play_next_station+0xa8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
	  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	0800a338 	.word	0x0800a338
 8002ef8:	0800a35c 	.word	0x0800a35c
 8002efc:	2000251d 	.word	0x2000251d
 8002f00:	200018dc 	.word	0x200018dc
 8002f04:	20001aec 	.word	0x20001aec
 8002f08:	20002514 	.word	0x20002514

08002f0c <send_debug_msg>:

#include "usart.h"
#include "debug_uart.h"

void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fd f955 	bl	80001c8 <strlen>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, msg, msg_size, 100);
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	2364      	movs	r3, #100	; 0x64
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	480a      	ldr	r0, [pc, #40]	; (8002f54 <send_debug_msg+0x48>)
 8002f2c:	f006 f80f 	bl	8008f4e <HAL_UART_Transmit>

	if(is_crlf)
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8002f36:	f640 230d 	movw	r3, #2573	; 0xa0d
 8002f3a:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8002f3c:	f107 010c 	add.w	r1, r7, #12
 8002f40:	2364      	movs	r3, #100	; 0x64
 8002f42:	2202      	movs	r2, #2
 8002f44:	4803      	ldr	r0, [pc, #12]	; (8002f54 <send_debug_msg+0x48>)
 8002f46:	f006 f802 	bl	8008f4e <HAL_UART_Transmit>
	}
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20002814 	.word	0x20002814

08002f58 <DisplayMainScreen>:
#include "display_management.h"

char char_buffer[32];

void DisplayMainScreen()
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fca6 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 8002f64:	23eb      	movs	r3, #235	; 0xeb
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f240 133b 	movw	r3, #315	; 0x13b
 8002f6c:	2219      	movs	r2, #25
 8002f6e:	2105      	movs	r1, #5
 8002f70:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002f74:	f7fd fd27 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 8002f78:	2302      	movs	r3, #2
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	4b7a      	ldr	r3, [pc, #488]	; (8003168 <DisplayMainScreen+0x210>)
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f86:	2105      	movs	r1, #5
 8002f88:	2041      	movs	r0, #65	; 0x41
 8002f8a:	f7fd fdc9 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 8002f8e:	233c      	movs	r3, #60	; 0x3c
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	f240 1331 	movw	r3, #305	; 0x131
 8002f96:	2223      	movs	r2, #35	; 0x23
 8002f98:	210f      	movs	r1, #15
 8002f9a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002f9e:	f7fd fd12 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 8002fa2:	235f      	movs	r3, #95	; 0x5f
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	f240 1331 	movw	r3, #305	; 0x131
 8002faa:	2246      	movs	r2, #70	; 0x46
 8002fac:	210f      	movs	r1, #15
 8002fae:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002fb2:	f7fd fd08 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 8002fb6:	23a0      	movs	r3, #160	; 0xa0
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2369      	movs	r3, #105	; 0x69
 8002fbc:	226e      	movs	r2, #110	; 0x6e
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002fc4:	f7fd fcff 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 8002fc8:	239f      	movs	r3, #159	; 0x9f
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2368      	movs	r3, #104	; 0x68
 8002fce:	226f      	movs	r2, #111	; 0x6f
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002fd6:	f7fd fcd5 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 8002fda:	2302      	movs	r3, #2
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	4b63      	ldr	r3, [pc, #396]	; (800316c <DisplayMainScreen+0x214>)
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fea:	217f      	movs	r1, #127	; 0x7f
 8002fec:	2023      	movs	r0, #35	; 0x23
 8002fee:	f7fd fd97 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 8002ff2:	23a0      	movs	r3, #160	; 0xa0
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	23cd      	movs	r3, #205	; 0xcd
 8002ff8:	226e      	movs	r2, #110	; 0x6e
 8002ffa:	2173      	movs	r1, #115	; 0x73
 8002ffc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003000:	f7fd fce1 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 8003004:	239f      	movs	r3, #159	; 0x9f
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	23cc      	movs	r3, #204	; 0xcc
 800300a:	226f      	movs	r2, #111	; 0x6f
 800300c:	2174      	movs	r1, #116	; 0x74
 800300e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003012:	f7fd fcb7 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 8003016:	2302      	movs	r3, #2
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	4b55      	ldr	r3, [pc, #340]	; (8003170 <DisplayMainScreen+0x218>)
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003026:	217f      	movs	r1, #127	; 0x7f
 8003028:	2090      	movs	r0, #144	; 0x90
 800302a:	f7fd fd79 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 800302e:	23a0      	movs	r3, #160	; 0xa0
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	f240 1331 	movw	r3, #305	; 0x131
 8003036:	226e      	movs	r2, #110	; 0x6e
 8003038:	21d7      	movs	r1, #215	; 0xd7
 800303a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800303e:	f7fd fcc2 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 8003042:	239f      	movs	r3, #159	; 0x9f
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f44f 7398 	mov.w	r3, #304	; 0x130
 800304a:	226f      	movs	r2, #111	; 0x6f
 800304c:	21d8      	movs	r1, #216	; 0xd8
 800304e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003052:	f7fd fc97 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 8003056:	2302      	movs	r3, #2
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	4b46      	ldr	r3, [pc, #280]	; (8003174 <DisplayMainScreen+0x21c>)
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003066:	217f      	movs	r1, #127	; 0x7f
 8003068:	20ea      	movs	r0, #234	; 0xea
 800306a:	f7fd fd59 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 800306e:	23dc      	movs	r3, #220	; 0xdc
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	2369      	movs	r3, #105	; 0x69
 8003074:	22aa      	movs	r2, #170	; 0xaa
 8003076:	210f      	movs	r1, #15
 8003078:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800307c:	f7fd fca3 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 8003080:	23db      	movs	r3, #219	; 0xdb
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2368      	movs	r3, #104	; 0x68
 8003086:	22ab      	movs	r2, #171	; 0xab
 8003088:	2110      	movs	r1, #16
 800308a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800308e:	f7fd fc79 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 8003092:	2302      	movs	r3, #2
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <DisplayMainScreen+0x220>)
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800309e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030a2:	21bb      	movs	r1, #187	; 0xbb
 80030a4:	202d      	movs	r0, #45	; 0x2d
 80030a6:	f7fd fd3b 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 80030aa:	23dc      	movs	r3, #220	; 0xdc
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	23cd      	movs	r3, #205	; 0xcd
 80030b0:	22aa      	movs	r2, #170	; 0xaa
 80030b2:	2173      	movs	r1, #115	; 0x73
 80030b4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80030b8:	f7fd fc85 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 80030bc:	23db      	movs	r3, #219	; 0xdb
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	23cc      	movs	r3, #204	; 0xcc
 80030c2:	22ab      	movs	r2, #171	; 0xab
 80030c4:	2174      	movs	r1, #116	; 0x74
 80030c6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80030ca:	f7fd fc5b 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 80030ce:	2302      	movs	r3, #2
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <DisplayMainScreen+0x224>)
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030de:	21b4      	movs	r1, #180	; 0xb4
 80030e0:	2081      	movs	r0, #129	; 0x81
 80030e2:	f7fd fd1d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 80030e6:	2302      	movs	r3, #2
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	4b25      	ldr	r3, [pc, #148]	; (8003180 <DisplayMainScreen+0x228>)
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030f6:	21c3      	movs	r1, #195	; 0xc3
 80030f8:	2084      	movs	r0, #132	; 0x84
 80030fa:	f7fd fd11 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 80030fe:	23dc      	movs	r3, #220	; 0xdc
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f240 1331 	movw	r3, #305	; 0x131
 8003106:	22aa      	movs	r2, #170	; 0xaa
 8003108:	21d7      	movs	r1, #215	; 0xd7
 800310a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800310e:	f7fd fc5a 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 8003112:	23db      	movs	r3, #219	; 0xdb
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	f44f 7398 	mov.w	r3, #304	; 0x130
 800311a:	22ab      	movs	r2, #171	; 0xab
 800311c:	21d8      	movs	r1, #216	; 0xd8
 800311e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003122:	f7fd fc2f 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 8003126:	2302      	movs	r3, #2
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <DisplayMainScreen+0x22c>)
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003136:	21b4      	movs	r1, #180	; 0xb4
 8003138:	20f5      	movs	r0, #245	; 0xf5
 800313a:	f7fd fcf1 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 800313e:	2302      	movs	r3, #2
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <DisplayMainScreen+0x228>)
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800314a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800314e:	21c3      	movs	r1, #195	; 0xc3
 8003150:	20e8      	movs	r0, #232	; 0xe8
 8003152:	f7fd fce5 	bl	8000b20 <ILI9341_Draw_String>

	CS_OFF;
 8003156:	2201      	movs	r2, #1
 8003158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315c:	480a      	ldr	r0, [pc, #40]	; (8003188 <DisplayMainScreen+0x230>)
 800315e:	f001 ff2f 	bl	8004fc0 <HAL_GPIO_WritePin>
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	0800a370 	.word	0x0800a370
 800316c:	0800a384 	.word	0x0800a384
 8003170:	0800a38c 	.word	0x0800a38c
 8003174:	0800a394 	.word	0x0800a394
 8003178:	0800a39c 	.word	0x0800a39c
 800317c:	0800a3a4 	.word	0x0800a3a4
 8003180:	0800a3b0 	.word	0x0800a3b0
 8003184:	0800a3b8 	.word	0x0800a3b8
 8003188:	40020c00 	.word	0x40020c00

0800318c <DisplayDabStatus>:
{
	ILI9341_Draw_String(290, 40, WHITE, BLACK, "E", 2);
}

void DisplayDabStatus(sig_metrics_t sig_metrics_val)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b087      	sub	sp, #28
 8003190:	af02      	add	r7, sp, #8
 8003192:	463c      	mov	r4, r7
 8003194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Valid:", 2);
 8003198:	2302      	movs	r3, #2
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	4b7f      	ldr	r3, [pc, #508]	; (800339c <DisplayDabStatus+0x210>)
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2300      	movs	r3, #0
 80031a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a6:	2128      	movs	r1, #40	; 0x28
 80031a8:	2014      	movs	r0, #20
 80031aa:	f7fd fcb9 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(69, 40, WHITE, BLACK, itoa(sig_metrics_val.valid, char_buffer, 10), 2);
 80031ae:	793b      	ldrb	r3, [r7, #4]
 80031b0:	220a      	movs	r2, #10
 80031b2:	497b      	ldr	r1, [pc, #492]	; (80033a0 <DisplayDabStatus+0x214>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f006 fa7b 	bl	80096b0 <itoa>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2202      	movs	r2, #2
 80031be:	9201      	str	r2, [sp, #4]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c8:	2128      	movs	r1, #40	; 0x28
 80031ca:	2045      	movs	r0, #69	; 0x45
 80031cc:	f7fd fca8 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(82, 40, WHITE, BLACK, "ACQ:", 2);
 80031d0:	2302      	movs	r3, #2
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	4b73      	ldr	r3, [pc, #460]	; (80033a4 <DisplayDabStatus+0x218>)
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2300      	movs	r3, #0
 80031da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031de:	2128      	movs	r1, #40	; 0x28
 80031e0:	2052      	movs	r0, #82	; 0x52
 80031e2:	f7fd fc9d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 40, WHITE, BLACK, itoa(sig_metrics_val.acq, char_buffer, 10), 2);
 80031e6:	797b      	ldrb	r3, [r7, #5]
 80031e8:	220a      	movs	r2, #10
 80031ea:	496d      	ldr	r1, [pc, #436]	; (80033a0 <DisplayDabStatus+0x214>)
 80031ec:	4618      	mov	r0, r3
 80031ee:	f006 fa5f 	bl	80096b0 <itoa>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2202      	movs	r2, #2
 80031f6:	9201      	str	r2, [sp, #4]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	2300      	movs	r3, #0
 80031fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003200:	2128      	movs	r1, #40	; 0x28
 8003202:	2073      	movs	r0, #115	; 0x73
 8003204:	f7fd fc8c 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(131, 40, WHITE, BLACK, "RSSI:" , 2);
 8003208:	2302      	movs	r3, #2
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	4b66      	ldr	r3, [pc, #408]	; (80033a8 <DisplayDabStatus+0x21c>)
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2300      	movs	r3, #0
 8003212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003216:	2128      	movs	r1, #40	; 0x28
 8003218:	2083      	movs	r0, #131	; 0x83
 800321a:	f7fd fc81 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, "   ", 2);
 800321e:	2302      	movs	r3, #2
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	4b62      	ldr	r3, [pc, #392]	; (80033ac <DisplayDabStatus+0x220>)
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2300      	movs	r3, #0
 8003228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800322c:	2128      	movs	r1, #40	; 0x28
 800322e:	20ac      	movs	r0, #172	; 0xac
 8003230:	f7fd fc76 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, itoa(sig_metrics_val.rssi, char_buffer, 10), 2);
 8003234:	783b      	ldrb	r3, [r7, #0]
 8003236:	220a      	movs	r2, #10
 8003238:	4959      	ldr	r1, [pc, #356]	; (80033a0 <DisplayDabStatus+0x214>)
 800323a:	4618      	mov	r0, r3
 800323c:	f006 fa38 	bl	80096b0 <itoa>
 8003240:	4603      	mov	r3, r0
 8003242:	2202      	movs	r2, #2
 8003244:	9201      	str	r2, [sp, #4]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800324e:	2128      	movs	r1, #40	; 0x28
 8003250:	20ac      	movs	r0, #172	; 0xac
 8003252:	f7fd fc65 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 40, WHITE, BLACK, "SNR:" , 2);
 8003256:	2302      	movs	r3, #2
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	4b55      	ldr	r3, [pc, #340]	; (80033b0 <DisplayDabStatus+0x224>)
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003264:	2128      	movs	r1, #40	; 0x28
 8003266:	20c0      	movs	r0, #192	; 0xc0
 8003268:	f7fd fc5a 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, "   ", 2);
 800326c:	2302      	movs	r3, #2
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <DisplayDabStatus+0x220>)
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327a:	2128      	movs	r1, #40	; 0x28
 800327c:	20e1      	movs	r0, #225	; 0xe1
 800327e:	f7fd fc4f 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, itoa(sig_metrics_val.snr, char_buffer, 10), 2);
 8003282:	787b      	ldrb	r3, [r7, #1]
 8003284:	220a      	movs	r2, #10
 8003286:	4946      	ldr	r1, [pc, #280]	; (80033a0 <DisplayDabStatus+0x214>)
 8003288:	4618      	mov	r0, r3
 800328a:	f006 fa11 	bl	80096b0 <itoa>
 800328e:	4603      	mov	r3, r0
 8003290:	2202      	movs	r2, #2
 8003292:	9201      	str	r2, [sp, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2300      	movs	r3, #0
 8003298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329c:	2128      	movs	r1, #40	; 0x28
 800329e:	20e1      	movs	r0, #225	; 0xe1
 80032a0:	f7fd fc3e 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(240, 40, WHITE, BLACK, "FQ:" , 2);
 80032a4:	2302      	movs	r3, #2
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	4b42      	ldr	r3, [pc, #264]	; (80033b4 <DisplayDabStatus+0x228>)
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2300      	movs	r3, #0
 80032ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032b2:	2128      	movs	r1, #40	; 0x28
 80032b4:	20f0      	movs	r0, #240	; 0xf0
 80032b6:	f7fd fc33 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, "   ", 2);
 80032ba:	2302      	movs	r3, #2
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <DisplayDabStatus+0x220>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	2300      	movs	r3, #0
 80032c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c8:	2128      	movs	r1, #40	; 0x28
 80032ca:	f44f 7088 	mov.w	r0, #272	; 0x110
 80032ce:	f7fd fc27 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, itoa(sig_metrics_val.fic_q, char_buffer, 10), 2);
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	220a      	movs	r2, #10
 80032d6:	4932      	ldr	r1, [pc, #200]	; (80033a0 <DisplayDabStatus+0x214>)
 80032d8:	4618      	mov	r0, r3
 80032da:	f006 f9e9 	bl	80096b0 <itoa>
 80032de:	4603      	mov	r3, r0
 80032e0:	2202      	movs	r2, #2
 80032e2:	9201      	str	r2, [sp, #4]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ec:	2128      	movs	r1, #40	; 0x28
 80032ee:	f44f 7088 	mov.w	r0, #272	; 0x110
 80032f2:	f7fd fc15 	bl	8000b20 <ILI9341_Draw_String>

//	ILI9341_Draw_String(20, 75, WHITE, BLACK, "FIB Error:", 2);
//	ILI9341_Draw_String(100, 75, WHITE, BLACK, "          ", 2);
//	ILI9341_Draw_String(100, 75, WHITE, BLACK, itoa(fib_error_val, char_buffer, 10), 2);
	//póki co nie wiadomo jak włączyć pomiar pseudo BER
	ILI9341_Draw_String(20, 75, WHITE, BLACK, "FIC Er:", 2);
 80032f6:	2302      	movs	r3, #2
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <DisplayDabStatus+0x22c>)
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003304:	214b      	movs	r1, #75	; 0x4b
 8003306:	2014      	movs	r0, #20
 8003308:	f7fd fc0a 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 75, WHITE, BLACK, "          ", 2);
 800330c:	2302      	movs	r3, #2
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <DisplayDabStatus+0x230>)
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800331a:	214b      	movs	r1, #75	; 0x4b
 800331c:	2050      	movs	r0, #80	; 0x50
 800331e:	f7fd fbff 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 75, WHITE, BLACK, itoa(sig_metrics_val.fic_err_cnt, char_buffer, 10), 2);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	220a      	movs	r2, #10
 8003326:	491e      	ldr	r1, [pc, #120]	; (80033a0 <DisplayDabStatus+0x214>)
 8003328:	4618      	mov	r0, r3
 800332a:	f006 f9c1 	bl	80096b0 <itoa>
 800332e:	4603      	mov	r3, r0
 8003330:	2202      	movs	r2, #2
 8003332:	9201      	str	r2, [sp, #4]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800333c:	214b      	movs	r1, #75	; 0x4b
 800333e:	2050      	movs	r0, #80	; 0x50
 8003340:	f7fd fbee 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 75, WHITE, BLACK, "FIC Tot:", 2);
 8003344:	2302      	movs	r3, #2
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <DisplayDabStatus+0x234>)
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003352:	214b      	movs	r1, #75	; 0x4b
 8003354:	2096      	movs	r0, #150	; 0x96
 8003356:	f7fd fbe3 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, "          ", 2);
 800335a:	2302      	movs	r3, #2
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	4b17      	ldr	r3, [pc, #92]	; (80033bc <DisplayDabStatus+0x230>)
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003368:	214b      	movs	r1, #75	; 0x4b
 800336a:	20dc      	movs	r0, #220	; 0xdc
 800336c:	f7fd fbd8 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, itoa(sig_metrics_val.fic_bit_cnt, char_buffer, 10), 2);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	220a      	movs	r2, #10
 8003374:	490a      	ldr	r1, [pc, #40]	; (80033a0 <DisplayDabStatus+0x214>)
 8003376:	4618      	mov	r0, r3
 8003378:	f006 f99a 	bl	80096b0 <itoa>
 800337c:	4603      	mov	r3, r0
 800337e:	2202      	movs	r2, #2
 8003380:	9201      	str	r2, [sp, #4]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2300      	movs	r3, #0
 8003386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800338a:	214b      	movs	r1, #75	; 0x4b
 800338c:	20dc      	movs	r0, #220	; 0xdc
 800338e:	f7fd fbc7 	bl	8000b20 <ILI9341_Draw_String>
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bd90      	pop	{r4, r7, pc}
 800339a:	bf00      	nop
 800339c:	0800a3dc 	.word	0x0800a3dc
 80033a0:	20002520 	.word	0x20002520
 80033a4:	0800a3e4 	.word	0x0800a3e4
 80033a8:	0800a3ec 	.word	0x0800a3ec
 80033ac:	0800a3c0 	.word	0x0800a3c0
 80033b0:	0800a3f4 	.word	0x0800a3f4
 80033b4:	0800a3fc 	.word	0x0800a3fc
 80033b8:	0800a400 	.word	0x0800a400
 80033bc:	0800a408 	.word	0x0800a408
 80033c0:	0800a414 	.word	0x0800a414

080033c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <MX_DMA_Init+0x3c>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <MX_DMA_Init+0x3c>)
 80033d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <MX_DMA_Init+0x3c>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	200f      	movs	r0, #15
 80033ec:	f001 f8e3 	bl	80045b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80033f0:	200f      	movs	r0, #15
 80033f2:	f001 f8fc 	bl	80045ee <HAL_NVIC_EnableIRQ>

}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	; 0x30
 8003408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340a:	f107 031c 	add.w	r3, r7, #28
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	60da      	str	r2, [r3, #12]
 8003418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	4b65      	ldr	r3, [pc, #404]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a64      	ldr	r2, [pc, #400]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	4b5e      	ldr	r3, [pc, #376]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a5d      	ldr	r2, [pc, #372]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b5b      	ldr	r3, [pc, #364]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	4b57      	ldr	r3, [pc, #348]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a56      	ldr	r2, [pc, #344]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a4f      	ldr	r2, [pc, #316]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b4d      	ldr	r3, [pc, #308]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a48      	ldr	r2, [pc, #288]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 8003494:	f043 0310 	orr.w	r3, r3, #16
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a41      	ldr	r2, [pc, #260]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <MX_GPIO_Init+0x1b0>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2130      	movs	r1, #48	; 0x30
 80034c6:	483c      	ldr	r0, [pc, #240]	; (80035b8 <MX_GPIO_Init+0x1b4>)
 80034c8:	f001 fd7a 	bl	8004fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034d2:	483a      	ldr	r0, [pc, #232]	; (80035bc <MX_GPIO_Init+0x1b8>)
 80034d4:	f001 fd74 	bl	8004fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 80034d8:	2200      	movs	r2, #0
 80034da:	f24f 7180 	movw	r1, #63360	; 0xf780
 80034de:	4838      	ldr	r0, [pc, #224]	; (80035c0 <MX_GPIO_Init+0x1bc>)
 80034e0:	f001 fd6e 	bl	8004fc0 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 80034e4:	2200      	movs	r2, #0
 80034e6:	2128      	movs	r1, #40	; 0x28
 80034e8:	4836      	ldr	r0, [pc, #216]	; (80035c4 <MX_GPIO_Init+0x1c0>)
 80034ea:	f001 fd69 	bl	8004fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 80034ee:	2310      	movs	r3, #16
 80034f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f2:	2300      	movs	r3, #0
 80034f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 80034fa:	f107 031c 	add.w	r3, r7, #28
 80034fe:	4619      	mov	r1, r3
 8003500:	4831      	ldr	r0, [pc, #196]	; (80035c8 <MX_GPIO_Init+0x1c4>)
 8003502:	f001 fba9 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8003506:	2330      	movs	r3, #48	; 0x30
 8003508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350a:	2301      	movs	r3, #1
 800350c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	2300      	movs	r3, #0
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003516:	f107 031c 	add.w	r3, r7, #28
 800351a:	4619      	mov	r1, r3
 800351c:	4826      	ldr	r0, [pc, #152]	; (80035b8 <MX_GPIO_Init+0x1b4>)
 800351e:	f001 fb9b 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8003522:	2311      	movs	r3, #17
 8003524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352e:	f107 031c 	add.w	r3, r7, #28
 8003532:	4619      	mov	r1, r3
 8003534:	4823      	ldr	r0, [pc, #140]	; (80035c4 <MX_GPIO_Init+0x1c0>)
 8003536:	f001 fb8f 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 800353a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800353e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003540:	2301      	movs	r3, #1
 8003542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003548:	2300      	movs	r3, #0
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4619      	mov	r1, r3
 8003552:	481a      	ldr	r0, [pc, #104]	; (80035bc <MX_GPIO_Init+0x1b8>)
 8003554:	f001 fb80 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8003558:	f24f 7380 	movw	r3, #63360	; 0xf780
 800355c:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355e:	2301      	movs	r3, #1
 8003560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	4813      	ldr	r0, [pc, #76]	; (80035c0 <MX_GPIO_Init+0x1bc>)
 8003572:	f001 fb71 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800357a:	2300      	movs	r3, #0
 800357c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003582:	f107 031c 	add.w	r3, r7, #28
 8003586:	4619      	mov	r1, r3
 8003588:	480d      	ldr	r0, [pc, #52]	; (80035c0 <MX_GPIO_Init+0x1bc>)
 800358a:	f001 fb65 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 800358e:	2328      	movs	r3, #40	; 0x28
 8003590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003592:	2301      	movs	r3, #1
 8003594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359a:	2300      	movs	r3, #0
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	f107 031c 	add.w	r3, r7, #28
 80035a2:	4619      	mov	r1, r3
 80035a4:	4807      	ldr	r0, [pc, #28]	; (80035c4 <MX_GPIO_Init+0x1c0>)
 80035a6:	f001 fb57 	bl	8004c58 <HAL_GPIO_Init>

}
 80035aa:	bf00      	nop
 80035ac:	3730      	adds	r7, #48	; 0x30
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40020800 	.word	0x40020800
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40020c00 	.word	0x40020c00
 80035c4:	40020400 	.word	0x40020400
 80035c8:	40020000 	.word	0x40020000

080035cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <MX_I2C1_Init+0x50>)
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <MX_I2C1_Init+0x54>)
 80035d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <MX_I2C1_Init+0x50>)
 80035d8:	4a12      	ldr	r2, [pc, #72]	; (8003624 <MX_I2C1_Init+0x58>)
 80035da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <MX_I2C1_Init+0x50>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <MX_I2C1_Init+0x50>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <MX_I2C1_Init+0x50>)
 80035ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <MX_I2C1_Init+0x50>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <MX_I2C1_Init+0x50>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <MX_I2C1_Init+0x50>)
 80035fe:	2200      	movs	r2, #0
 8003600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <MX_I2C1_Init+0x50>)
 8003604:	2200      	movs	r2, #0
 8003606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003608:	4804      	ldr	r0, [pc, #16]	; (800361c <MX_I2C1_Init+0x50>)
 800360a:	f001 fcf3 	bl	8004ff4 <HAL_I2C_Init>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003614:	f000 fa20 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20002540 	.word	0x20002540
 8003620:	40005400 	.word	0x40005400
 8003624:	000186a0 	.word	0x000186a0

08003628 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <MX_I2C3_Init+0x50>)
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <MX_I2C3_Init+0x54>)
 8003630:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <MX_I2C3_Init+0x50>)
 8003634:	4a12      	ldr	r2, [pc, #72]	; (8003680 <MX_I2C3_Init+0x58>)
 8003636:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <MX_I2C3_Init+0x50>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <MX_I2C3_Init+0x50>)
 8003640:	2200      	movs	r2, #0
 8003642:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <MX_I2C3_Init+0x50>)
 8003646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800364a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <MX_I2C3_Init+0x50>)
 800364e:	2200      	movs	r2, #0
 8003650:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <MX_I2C3_Init+0x50>)
 8003654:	2200      	movs	r2, #0
 8003656:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003658:	4b07      	ldr	r3, [pc, #28]	; (8003678 <MX_I2C3_Init+0x50>)
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <MX_I2C3_Init+0x50>)
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003664:	4804      	ldr	r0, [pc, #16]	; (8003678 <MX_I2C3_Init+0x50>)
 8003666:	f001 fcc5 	bl	8004ff4 <HAL_I2C_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003670:	f000 f9f2 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20002594 	.word	0x20002594
 800367c:	40005c00 	.word	0x40005c00
 8003680:	000186a0 	.word	0x000186a0

08003684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	f107 031c 	add.w	r3, r7, #28
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4a      	ldr	r2, [pc, #296]	; (80037cc <HAL_I2C_MspInit+0x148>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d12c      	bne.n	8003700 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	4b49      	ldr	r3, [pc, #292]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a48      	ldr	r2, [pc, #288]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	6313      	str	r3, [r2, #48]	; 0x30
 80036b6:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80036c2:	23c0      	movs	r3, #192	; 0xc0
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c6:	2312      	movs	r3, #18
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036d2:	2304      	movs	r3, #4
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d6:	f107 031c 	add.w	r3, r7, #28
 80036da:	4619      	mov	r1, r3
 80036dc:	483d      	ldr	r0, [pc, #244]	; (80037d4 <HAL_I2C_MspInit+0x150>)
 80036de:	f001 fabb 	bl	8004c58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a39      	ldr	r2, [pc, #228]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 80036ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80036fe:	e060      	b.n	80037c2 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a34      	ldr	r2, [pc, #208]	; (80037d8 <HAL_I2C_MspInit+0x154>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d15b      	bne.n	80037c2 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a2f      	ldr	r2, [pc, #188]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
 800371a:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8003742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003748:	2312      	movs	r3, #18
 800374a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003750:	2303      	movs	r3, #3
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003754:	2304      	movs	r3, #4
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	4619      	mov	r1, r3
 800375e:	481f      	ldr	r0, [pc, #124]	; (80037dc <HAL_I2C_MspInit+0x158>)
 8003760:	f001 fa7a 	bl	8004c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8003764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800376a:	2312      	movs	r3, #18
 800376c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003772:	2303      	movs	r3, #3
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003776:	2304      	movs	r3, #4
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 800377a:	f107 031c 	add.w	r3, r7, #28
 800377e:	4619      	mov	r1, r3
 8003780:	4817      	ldr	r0, [pc, #92]	; (80037e0 <HAL_I2C_MspInit+0x15c>)
 8003782:	f001 fa69 	bl	8004c58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a10      	ldr	r2, [pc, #64]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 8003790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_I2C_MspInit+0x14c>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	2048      	movs	r0, #72	; 0x48
 80037a8:	f000 ff05 	bl	80045b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80037ac:	2048      	movs	r0, #72	; 0x48
 80037ae:	f000 ff1e 	bl	80045ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	2049      	movs	r0, #73	; 0x49
 80037b8:	f000 fefd 	bl	80045b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80037bc:	2049      	movs	r0, #73	; 0x49
 80037be:	f000 ff16 	bl	80045ee <HAL_NVIC_EnableIRQ>
}
 80037c2:	bf00      	nop
 80037c4:	3730      	adds	r7, #48	; 0x30
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40005400 	.word	0x40005400
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40020400 	.word	0x40020400
 80037d8:	40005c00 	.word	0x40005c00
 80037dc:	40020800 	.word	0x40020800
 80037e0:	40020000 	.word	0x40020000

080037e4 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
	led_number++;
 80037e8:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <Leds_Control_Blink+0x110>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <Leds_Control_Blink+0x110>)
 80037f2:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 80037f4:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <Leds_Control_Blink+0x110>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d102      	bne.n	8003802 <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 80037fc:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <Leds_Control_Blink+0x110>)
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8003802:	4b3c      	ldr	r3, [pc, #240]	; (80038f4 <Leds_Control_Blink+0x110>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	3b01      	subs	r3, #1
 8003808:	2b03      	cmp	r3, #3
 800380a:	d86f      	bhi.n	80038ec <Leds_Control_Blink+0x108>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <Leds_Control_Blink+0x30>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003825 	.word	0x08003825
 8003818:	08003857 	.word	0x08003857
 800381c:	08003889 	.word	0x08003889
 8003820:	080038bb 	.word	0x080038bb
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8003824:	2201      	movs	r2, #1
 8003826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800382a:	4833      	ldr	r0, [pc, #204]	; (80038f8 <Leds_Control_Blink+0x114>)
 800382c:	f001 fbc8 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003836:	4830      	ldr	r0, [pc, #192]	; (80038f8 <Leds_Control_Blink+0x114>)
 8003838:	f001 fbc2 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800383c:	2200      	movs	r2, #0
 800383e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003842:	482d      	ldr	r0, [pc, #180]	; (80038f8 <Leds_Control_Blink+0x114>)
 8003844:	f001 fbbc 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8003848:	2200      	movs	r2, #0
 800384a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800384e:	482a      	ldr	r0, [pc, #168]	; (80038f8 <Leds_Control_Blink+0x114>)
 8003850:	f001 fbb6 	bl	8004fc0 <HAL_GPIO_WritePin>
		break;
 8003854:	e04b      	b.n	80038ee <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003856:	2200      	movs	r2, #0
 8003858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800385c:	4826      	ldr	r0, [pc, #152]	; (80038f8 <Leds_Control_Blink+0x114>)
 800385e:	f001 fbaf 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 8003862:	2201      	movs	r2, #1
 8003864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003868:	4823      	ldr	r0, [pc, #140]	; (80038f8 <Leds_Control_Blink+0x114>)
 800386a:	f001 fba9 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003874:	4820      	ldr	r0, [pc, #128]	; (80038f8 <Leds_Control_Blink+0x114>)
 8003876:	f001 fba3 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 800387a:	2200      	movs	r2, #0
 800387c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003880:	481d      	ldr	r0, [pc, #116]	; (80038f8 <Leds_Control_Blink+0x114>)
 8003882:	f001 fb9d 	bl	8004fc0 <HAL_GPIO_WritePin>
		break;
 8003886:	e032      	b.n	80038ee <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8003888:	2200      	movs	r2, #0
 800388a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800388e:	481a      	ldr	r0, [pc, #104]	; (80038f8 <Leds_Control_Blink+0x114>)
 8003890:	f001 fb96 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8003894:	2200      	movs	r2, #0
 8003896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800389a:	4817      	ldr	r0, [pc, #92]	; (80038f8 <Leds_Control_Blink+0x114>)
 800389c:	f001 fb90 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 80038a0:	2201      	movs	r2, #1
 80038a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038a6:	4814      	ldr	r0, [pc, #80]	; (80038f8 <Leds_Control_Blink+0x114>)
 80038a8:	f001 fb8a 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038b2:	4811      	ldr	r0, [pc, #68]	; (80038f8 <Leds_Control_Blink+0x114>)
 80038b4:	f001 fb84 	bl	8004fc0 <HAL_GPIO_WritePin>
		break;
 80038b8:	e019      	b.n	80038ee <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 80038ba:	2200      	movs	r2, #0
 80038bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038c0:	480d      	ldr	r0, [pc, #52]	; (80038f8 <Leds_Control_Blink+0x114>)
 80038c2:	f001 fb7d 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 80038c6:	2200      	movs	r2, #0
 80038c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038cc:	480a      	ldr	r0, [pc, #40]	; (80038f8 <Leds_Control_Blink+0x114>)
 80038ce:	f001 fb77 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 80038d2:	2200      	movs	r2, #0
 80038d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038d8:	4807      	ldr	r0, [pc, #28]	; (80038f8 <Leds_Control_Blink+0x114>)
 80038da:	f001 fb71 	bl	8004fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 80038de:	2201      	movs	r2, #1
 80038e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038e4:	4804      	ldr	r0, [pc, #16]	; (80038f8 <Leds_Control_Blink+0x114>)
 80038e6:	f001 fb6b 	bl	8004fc0 <HAL_GPIO_WritePin>
		break;
 80038ea:	e000      	b.n	80038ee <Leds_Control_Blink+0x10a>
	default:

		break;
 80038ec:	bf00      	nop
	}
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200000ac 	.word	0x200000ac
 80038f8:	40020c00 	.word	0x40020c00

080038fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003900:	f000 fce8 	bl	80042d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003904:	f000 f83e 	bl	8003984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003908:	f7ff fd7c 	bl	8003404 <MX_GPIO_Init>
  MX_DMA_Init();
 800390c:	f7ff fd5a 	bl	80033c4 <MX_DMA_Init>
  MX_I2C1_Init();
 8003910:	f7ff fe5c 	bl	80035cc <MX_I2C1_Init>
  MX_I2C3_Init();
 8003914:	f7ff fe88 	bl	8003628 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003918:	f000 f8a4 	bl	8003a64 <MX_SPI1_Init>
  MX_SPI2_Init();
 800391c:	f000 f8d8 	bl	8003ad0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003920:	f000 fa76 	bl	8003e10 <MX_TIM3_Init>
  MX_UART5_Init();
 8003924:	f000 fbb8 	bl	8004098 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8003928:	f000 fbe0 	bl	80040ec <MX_USART3_UART_Init>
  MX_TIM10_Init();
 800392c:	f000 faca 	bl	8003ec4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003930:	f000 faec 	bl	8003f0c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8003934:	2101      	movs	r1, #1
 8003936:	480f      	ldr	r0, [pc, #60]	; (8003974 <main+0x78>)
 8003938:	f7ff fae8 	bl	8002f0c <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim10);
 800393c:	480e      	ldr	r0, [pc, #56]	; (8003978 <main+0x7c>)
 800393e:	f004 fd27 	bl	8008390 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8003942:	480e      	ldr	r0, [pc, #56]	; (800397c <main+0x80>)
 8003944:	f004 fd24 	bl	8008390 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8003948:	f7fc fdc8 	bl	80004dc <ILI9341_Init>
  DisplayMainScreen();
 800394c:	f7ff fb04 	bl	8002f58 <DisplayMainScreen>

  Si468x_init();
 8003950:	f7fd fbb0 	bl	80010b4 <Si468x_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8003954:	2101      	movs	r1, #1
 8003956:	480a      	ldr	r0, [pc, #40]	; (8003980 <main+0x84>)
 8003958:	f001 fb1a 	bl	8004f90 <HAL_GPIO_ReadPin>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <main+0x6a>
	  {
		  Si468x_play_next_station();
 8003962:	f7ff fa77 	bl	8002e54 <Si468x_play_next_station>
	  }
	  HAL_Delay(200);
 8003966:	20c8      	movs	r0, #200	; 0xc8
 8003968:	f000 fd26 	bl	80043b8 <HAL_Delay>
	  Si468x_dab_digrad_status();
 800396c:	f7fe fa42 	bl	8001df4 <Si468x_dab_digrad_status>
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8003970:	e7f0      	b.n	8003954 <main+0x58>
 8003972:	bf00      	nop
 8003974:	0800a420 	.word	0x0800a420
 8003978:	20002740 	.word	0x20002740
 800397c:	20002788 	.word	0x20002788
 8003980:	40020400 	.word	0x40020400

08003984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b094      	sub	sp, #80	; 0x50
 8003988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800398a:	f107 0320 	add.w	r3, r7, #32
 800398e:	2230      	movs	r2, #48	; 0x30
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f005 fe8e 	bl	80096b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003998:	f107 030c 	add.w	r3, r7, #12
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039a8:	2300      	movs	r3, #0
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <SystemClock_Config+0xcc>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <SystemClock_Config+0xcc>)
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6413      	str	r3, [r2, #64]	; 0x40
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <SystemClock_Config+0xcc>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c4:	2300      	movs	r3, #0
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <SystemClock_Config+0xd0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <SystemClock_Config+0xd0>)
 80039ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b1f      	ldr	r3, [pc, #124]	; (8003a54 <SystemClock_Config+0xd0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039ea:	2302      	movs	r3, #2
 80039ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039f4:	2304      	movs	r3, #4
 80039f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80039f8:	23a0      	movs	r3, #160	; 0xa0
 80039fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039fc:	2302      	movs	r3, #2
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a00:	2304      	movs	r3, #4
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a04:	f107 0320 	add.w	r3, r7, #32
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 f913 	bl	8006c34 <HAL_RCC_OscConfig>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a14:	f000 f820 	bl	8003a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a18:	230f      	movs	r3, #15
 8003a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a30:	f107 030c 	add.w	r3, r7, #12
 8003a34:	2105      	movs	r1, #5
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fb74 	bl	8007124 <HAL_RCC_ClockConfig>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a42:	f000 f809 	bl	8003a58 <Error_Handler>
  }
}
 8003a46:	bf00      	nop
 8003a48:	3750      	adds	r7, #80	; 0x50
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40007000 	.word	0x40007000

08003a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a5c:	b672      	cpsid	i
}
 8003a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <Error_Handler+0x8>
	...

08003a64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a68:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <MX_SPI1_Init+0x68>)
 8003a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a6e:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a98:	2220      	movs	r2, #32
 8003a9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003ab0:	220a      	movs	r2, #10
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ab4:	4804      	ldr	r0, [pc, #16]	; (8003ac8 <MX_SPI1_Init+0x64>)
 8003ab6:	f003 fd55 	bl	8007564 <HAL_SPI_Init>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ac0:	f7ff ffca 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	200025e8 	.word	0x200025e8
 8003acc:	40013000 	.word	0x40013000

08003ad0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003ad4:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <MX_SPI2_Init+0x68>)
 8003ad8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ae0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003b1c:	220a      	movs	r2, #10
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b20:	4804      	ldr	r0, [pc, #16]	; (8003b34 <MX_SPI2_Init+0x64>)
 8003b22:	f003 fd1f 	bl	8007564 <HAL_SPI_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003b2c:	f7ff ff94 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20002640 	.word	0x20002640
 8003b38:	40003800 	.word	0x40003800

08003b3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	f107 031c 	add.w	r3, r7, #28
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_SPI_MspInit+0x154>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d12c      	bne.n	8003bb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	4a4b      	ldr	r2, [pc, #300]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6e:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	4b45      	ldr	r3, [pc, #276]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a44      	ldr	r2, [pc, #272]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b42      	ldr	r3, [pc, #264]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8003b96:	23e0      	movs	r3, #224	; 0xe0
 8003b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003baa:	f107 031c 	add.w	r3, r7, #28
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4839      	ldr	r0, [pc, #228]	; (8003c98 <HAL_SPI_MspInit+0x15c>)
 8003bb2:	f001 f851 	bl	8004c58 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003bb6:	e066      	b.n	8003c86 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a37      	ldr	r2, [pc, #220]	; (8003c9c <HAL_SPI_MspInit+0x160>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d161      	bne.n	8003c86 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a32      	ldr	r2, [pc, #200]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003be8:	f043 0302 	orr.w	r3, r3, #2
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_SPI_MspInit+0x158>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8003bfa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c00:	2302      	movs	r3, #2
 8003c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c0c:	2305      	movs	r3, #5
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c10:	f107 031c 	add.w	r3, r7, #28
 8003c14:	4619      	mov	r1, r3
 8003c16:	4822      	ldr	r0, [pc, #136]	; (8003ca0 <HAL_SPI_MspInit+0x164>)
 8003c18:	f001 f81e 	bl	8004c58 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c1e:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <HAL_SPI_MspInit+0x16c>)
 8003c20:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c34:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c3a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003c48:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c4e:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003c5a:	4812      	ldr	r0, [pc, #72]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c5c:	f000 fce2 	bl	8004624 <HAL_DMA_Init>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8003c66:	f7ff fef7 	bl	8003a58 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c6e:	649a      	str	r2, [r3, #72]	; 0x48
 8003c70:	4a0c      	ldr	r2, [pc, #48]	; (8003ca4 <HAL_SPI_MspInit+0x168>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2100      	movs	r1, #0
 8003c7a:	2024      	movs	r0, #36	; 0x24
 8003c7c:	f000 fc9b 	bl	80045b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003c80:	2024      	movs	r0, #36	; 0x24
 8003c82:	f000 fcb4 	bl	80045ee <HAL_NVIC_EnableIRQ>
}
 8003c86:	bf00      	nop
 8003c88:	3730      	adds	r7, #48	; 0x30
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40013000 	.word	0x40013000
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40020000 	.word	0x40020000
 8003c9c:	40003800 	.word	0x40003800
 8003ca0:	40020400 	.word	0x40020400
 8003ca4:	20002698 	.word	0x20002698
 8003ca8:	40026070 	.word	0x40026070

08003cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <HAL_MspInit+0x4c>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4a0f      	ldr	r2, [pc, #60]	; (8003cf8 <HAL_MspInit+0x4c>)
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_MspInit+0x4c>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <HAL_MspInit+0x4c>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <HAL_MspInit+0x4c>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_MspInit+0x4c>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800

08003cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d00:	e7fe      	b.n	8003d00 <NMI_Handler+0x4>

08003d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d06:	e7fe      	b.n	8003d06 <HardFault_Handler+0x4>

08003d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <MemManage_Handler+0x4>

08003d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d12:	e7fe      	b.n	8003d12 <BusFault_Handler+0x4>

08003d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <UsageFault_Handler+0x4>

08003d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d48:	f000 fb16 	bl	8004378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <DMA1_Stream4_IRQHandler+0x10>)
 8003d56:	f000 fd35 	bl	80047c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20002698 	.word	0x20002698

08003d64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003d6a:	f004 fbd0 	bl	800850e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20002740 	.word	0x20002740

08003d78 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003d7e:	f004 fbc6 	bl	800850e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20002788 	.word	0x20002788

08003d8c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <SPI2_IRQHandler+0x10>)
 8003d92:	f004 f85f 	bl	8007e54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20002640 	.word	0x20002640

08003da0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <I2C3_EV_IRQHandler+0x10>)
 8003da6:	f001 fa69 	bl	800527c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20002594 	.word	0x20002594

08003db4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <I2C3_ER_IRQHandler+0x10>)
 8003dba:	f001 fbd0 	bl	800555e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20002594 	.word	0x20002594

08003dc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 8003dda:	f7ff fd03 	bl	80037e4 <Leds_Control_Blink>
//		Si468x_dab_reset_interrupts();
//		Si468x_dab_digrad_status();

	}
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40014800 	.word	0x40014800

08003dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <SystemInit+0x20>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <SystemInit+0x20>)
 8003df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e16:	f107 0320 	add.w	r3, r7, #32
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e20:	1d3b      	adds	r3, r7, #4
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	609a      	str	r2, [r3, #8]
 8003e2a:	60da      	str	r2, [r3, #12]
 8003e2c:	611a      	str	r2, [r3, #16]
 8003e2e:	615a      	str	r2, [r3, #20]
 8003e30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e32:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <MX_TIM3_Init+0xb0>)
 8003e36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3e:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e58:	4818      	ldr	r0, [pc, #96]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e5a:	f004 fb09 	bl	8008470 <HAL_TIM_PWM_Init>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003e64:	f7ff fdf8 	bl	8003a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e70:	f107 0320 	add.w	r3, r7, #32
 8003e74:	4619      	mov	r1, r3
 8003e76:	4811      	ldr	r0, [pc, #68]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e78:	f004 ff8c 	bl	8008d94 <HAL_TIMEx_MasterConfigSynchronization>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003e82:	f7ff fde9 	bl	8003a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e86:	2360      	movs	r3, #96	; 0x60
 8003e88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	2208      	movs	r2, #8
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4807      	ldr	r0, [pc, #28]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003e9e:	f004 fc3f 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003ea8:	f7ff fdd6 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003eac:	4803      	ldr	r0, [pc, #12]	; (8003ebc <MX_TIM3_Init+0xac>)
 8003eae:	f000 f8b9 	bl	8004024 <HAL_TIM_MspPostInit>

}
 8003eb2:	bf00      	nop
 8003eb4:	3728      	adds	r7, #40	; 0x28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200026f8 	.word	0x200026f8
 8003ec0:	40000400 	.word	0x40000400

08003ec4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003eca:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <MX_TIM10_Init+0x44>)
 8003ecc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8003ece:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ed0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8003ed4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ede:	f240 2257 	movw	r2, #599	; 0x257
 8003ee2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003ef0:	4804      	ldr	r0, [pc, #16]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ef2:	f004 f9fd 	bl	80082f0 <HAL_TIM_Base_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003efc:	f7ff fdac 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20002740 	.word	0x20002740
 8003f08:	40014400 	.word	0x40014400

08003f0c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <MX_TIM11_Init+0x44>)
 8003f14:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f18:	f643 2297 	movw	r2, #14999	; 0x3a97
 8003f1c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f26:	f240 5213 	movw	r2, #1299	; 0x513
 8003f2a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f2c:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003f38:	4804      	ldr	r0, [pc, #16]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f3a:	f004 f9d9 	bl	80082f0 <HAL_TIM_Base_Init>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003f44:	f7ff fd88 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003f48:	bf00      	nop
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20002788 	.word	0x20002788
 8003f50:	40014800 	.word	0x40014800

08003f54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <HAL_TIM_PWM_MspInit+0x3c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10d      	bne.n	8003f82 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_TIM_PWM_MspInit+0x40>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_TIM_PWM_MspInit+0x40>)
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <HAL_TIM_PWM_MspInit+0x40>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40023800 	.word	0x40023800

08003f98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_TIM_Base_MspInit+0x80>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d116      	bne.n	8003fd8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_TIM_Base_MspInit+0x84>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_TIM_Base_MspInit+0x84>)
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <HAL_TIM_Base_MspInit+0x84>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2019      	movs	r0, #25
 8003fcc:	f000 faf3 	bl	80045b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fd0:	2019      	movs	r0, #25
 8003fd2:	f000 fb0c 	bl	80045ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003fd6:	e01a      	b.n	800400e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a10      	ldr	r2, [pc, #64]	; (8004020 <HAL_TIM_Base_MspInit+0x88>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d115      	bne.n	800400e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_TIM_Base_MspInit+0x84>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a0c      	ldr	r2, [pc, #48]	; (800401c <HAL_TIM_Base_MspInit+0x84>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_TIM_Base_MspInit+0x84>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	201a      	movs	r0, #26
 8004004:	f000 fad7 	bl	80045b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004008:	201a      	movs	r0, #26
 800400a:	f000 faf0 	bl	80045ee <HAL_NVIC_EnableIRQ>
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40014400 	.word	0x40014400
 800401c:	40023800 	.word	0x40023800
 8004020:	40014800 	.word	0x40014800

08004024 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_TIM_MspPostInit+0x68>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d11e      	bne.n	8004084 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_TIM_MspPostInit+0x6c>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4a10      	ldr	r2, [pc, #64]	; (8004090 <HAL_TIM_MspPostInit+0x6c>)
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	6313      	str	r3, [r2, #48]	; 0x30
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_TIM_MspPostInit+0x6c>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8004062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004066:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004068:	2302      	movs	r3, #2
 800406a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004074:	2302      	movs	r3, #2
 8004076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	4619      	mov	r1, r3
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <HAL_TIM_MspPostInit+0x70>)
 8004080:	f000 fdea 	bl	8004c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004084:	bf00      	nop
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40000400 	.word	0x40000400
 8004090:	40023800 	.word	0x40023800
 8004094:	40020800 	.word	0x40020800

08004098 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <MX_UART5_Init+0x4c>)
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <MX_UART5_Init+0x50>)
 80040a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <MX_UART5_Init+0x4c>)
 80040a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <MX_UART5_Init+0x4c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <MX_UART5_Init+0x4c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <MX_UART5_Init+0x4c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80040bc:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <MX_UART5_Init+0x4c>)
 80040be:	220c      	movs	r2, #12
 80040c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <MX_UART5_Init+0x4c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <MX_UART5_Init+0x4c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80040ce:	4805      	ldr	r0, [pc, #20]	; (80040e4 <MX_UART5_Init+0x4c>)
 80040d0:	f004 fef0 	bl	8008eb4 <HAL_UART_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80040da:	f7ff fcbd 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200027d0 	.word	0x200027d0
 80040e8:	40005000 	.word	0x40005000

080040ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <MX_USART3_UART_Init+0x50>)
 80040f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 80040f8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80040fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040fe:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 8004112:	220c      	movs	r2, #12
 8004114:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004116:	4b08      	ldr	r3, [pc, #32]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004122:	4805      	ldr	r0, [pc, #20]	; (8004138 <MX_USART3_UART_Init+0x4c>)
 8004124:	f004 fec6 	bl	8008eb4 <HAL_UART_Init>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800412e:	f7ff fc93 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20002814 	.word	0x20002814
 800413c:	40004800 	.word	0x40004800

08004140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08c      	sub	sp, #48	; 0x30
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a42      	ldr	r2, [pc, #264]	; (8004268 <HAL_UART_MspInit+0x128>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d14b      	bne.n	80041fa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_UART_MspInit+0x12c>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	4a40      	ldr	r2, [pc, #256]	; (800426c <HAL_UART_MspInit+0x12c>)
 800416c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004170:	6413      	str	r3, [r2, #64]	; 0x40
 8004172:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_UART_MspInit+0x12c>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	4b3a      	ldr	r3, [pc, #232]	; (800426c <HAL_UART_MspInit+0x12c>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	4a39      	ldr	r2, [pc, #228]	; (800426c <HAL_UART_MspInit+0x12c>)
 8004188:	f043 0304 	orr.w	r3, r3, #4
 800418c:	6313      	str	r3, [r2, #48]	; 0x30
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <HAL_UART_MspInit+0x12c>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	4b33      	ldr	r3, [pc, #204]	; (800426c <HAL_UART_MspInit+0x12c>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	4a32      	ldr	r2, [pc, #200]	; (800426c <HAL_UART_MspInit+0x12c>)
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	6313      	str	r3, [r2, #48]	; 0x30
 80041aa:	4b30      	ldr	r3, [pc, #192]	; (800426c <HAL_UART_MspInit+0x12c>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80041b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
 80041be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c4:	2303      	movs	r3, #3
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80041c8:	2308      	movs	r3, #8
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041cc:	f107 031c 	add.w	r3, r7, #28
 80041d0:	4619      	mov	r1, r3
 80041d2:	4827      	ldr	r0, [pc, #156]	; (8004270 <HAL_UART_MspInit+0x130>)
 80041d4:	f000 fd40 	bl	8004c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041d8:	2304      	movs	r3, #4
 80041da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041dc:	2302      	movs	r3, #2
 80041de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e4:	2303      	movs	r3, #3
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80041e8:	2308      	movs	r3, #8
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ec:	f107 031c 	add.w	r3, r7, #28
 80041f0:	4619      	mov	r1, r3
 80041f2:	4820      	ldr	r0, [pc, #128]	; (8004274 <HAL_UART_MspInit+0x134>)
 80041f4:	f000 fd30 	bl	8004c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80041f8:	e031      	b.n	800425e <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_UART_MspInit+0x138>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d12c      	bne.n	800425e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	4b18      	ldr	r3, [pc, #96]	; (800426c <HAL_UART_MspInit+0x12c>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <HAL_UART_MspInit+0x12c>)
 800420e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004212:	6413      	str	r3, [r2, #64]	; 0x40
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_UART_MspInit+0x12c>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_UART_MspInit+0x12c>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	4a10      	ldr	r2, [pc, #64]	; (800426c <HAL_UART_MspInit+0x12c>)
 800422a:	f043 0302 	orr.w	r3, r3, #2
 800422e:	6313      	str	r3, [r2, #48]	; 0x30
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_UART_MspInit+0x12c>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 800423c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004242:	2302      	movs	r3, #2
 8004244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424a:	2303      	movs	r3, #3
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800424e:	2307      	movs	r3, #7
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004252:	f107 031c 	add.w	r3, r7, #28
 8004256:	4619      	mov	r1, r3
 8004258:	4808      	ldr	r0, [pc, #32]	; (800427c <HAL_UART_MspInit+0x13c>)
 800425a:	f000 fcfd 	bl	8004c58 <HAL_GPIO_Init>
}
 800425e:	bf00      	nop
 8004260:	3730      	adds	r7, #48	; 0x30
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40005000 	.word	0x40005000
 800426c:	40023800 	.word	0x40023800
 8004270:	40020800 	.word	0x40020800
 8004274:	40020c00 	.word	0x40020c00
 8004278:	40004800 	.word	0x40004800
 800427c:	40020400 	.word	0x40020400

08004280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004284:	480d      	ldr	r0, [pc, #52]	; (80042bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004286:	490e      	ldr	r1, [pc, #56]	; (80042c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004288:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800428a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800428c:	e002      	b.n	8004294 <LoopCopyDataInit>

0800428e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800428e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004292:	3304      	adds	r3, #4

08004294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004298:	d3f9      	bcc.n	800428e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800429a:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800429c:	4c0b      	ldr	r4, [pc, #44]	; (80042cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800429e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a0:	e001      	b.n	80042a6 <LoopFillZerobss>

080042a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042a4:	3204      	adds	r2, #4

080042a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042a8:	d3fb      	bcc.n	80042a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042aa:	f7ff fd9f 	bl	8003dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ae:	f005 f9c3 	bl	8009638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042b2:	f7ff fb23 	bl	80038fc <main>
  bx  lr    
 80042b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80042c4:	0800c3f4 	.word	0x0800c3f4
  ldr r2, =_sbss
 80042c8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80042cc:	2000285c 	.word	0x2000285c

080042d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d0:	e7fe      	b.n	80042d0 <ADC_IRQHandler>
	...

080042d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <HAL_Init+0x40>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0d      	ldr	r2, [pc, #52]	; (8004314 <HAL_Init+0x40>)
 80042de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <HAL_Init+0x40>)
 80042ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_Init+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a07      	ldr	r2, [pc, #28]	; (8004314 <HAL_Init+0x40>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042fc:	2003      	movs	r0, #3
 80042fe:	f000 f94f 	bl	80045a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004302:	200f      	movs	r0, #15
 8004304:	f000 f808 	bl	8004318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004308:	f7ff fcd0 	bl	8003cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40023c00 	.word	0x40023c00

08004318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_InitTick+0x54>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_InitTick+0x58>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	4619      	mov	r1, r3
 800432a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800432e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f967 	bl	800460a <HAL_SYSTICK_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e00e      	b.n	8004364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d80a      	bhi.n	8004362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800434c:	2200      	movs	r2, #0
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	f000 f92f 	bl	80045b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004358:	4a06      	ldr	r2, [pc, #24]	; (8004374 <HAL_InitTick+0x5c>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	200000b0 	.word	0x200000b0
 8004370:	200000b8 	.word	0x200000b8
 8004374:	200000b4 	.word	0x200000b4

08004378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_IncTick+0x20>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_IncTick+0x24>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4413      	add	r3, r2
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <HAL_IncTick+0x24>)
 800438a:	6013      	str	r3, [r2, #0]
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	200000b8 	.word	0x200000b8
 800439c:	20002858 	.word	0x20002858

080043a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return uwTick;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_GetTick+0x14>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20002858 	.word	0x20002858

080043b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043c0:	f7ff ffee 	bl	80043a0 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d005      	beq.n	80043de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_Delay+0x44>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043de:	bf00      	nop
 80043e0:	f7ff ffde 	bl	80043a0 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d8f7      	bhi.n	80043e0 <HAL_Delay+0x28>
  {
  }
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	200000b8 	.word	0x200000b8

08004400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <__NVIC_SetPriorityGrouping+0x44>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800441c:	4013      	ands	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800442c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004432:	4a04      	ldr	r2, [pc, #16]	; (8004444 <__NVIC_SetPriorityGrouping+0x44>)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	60d3      	str	r3, [r2, #12]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	e000ed00 	.word	0xe000ed00

08004448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <__NVIC_GetPriorityGrouping+0x18>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f003 0307 	and.w	r3, r3, #7
}
 8004456:	4618      	mov	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004472:	2b00      	cmp	r3, #0
 8004474:	db0b      	blt.n	800448e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	f003 021f 	and.w	r2, r3, #31
 800447c:	4907      	ldr	r1, [pc, #28]	; (800449c <__NVIC_EnableIRQ+0x38>)
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2001      	movs	r0, #1
 8004486:	fa00 f202 	lsl.w	r2, r0, r2
 800448a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	e000e100 	.word	0xe000e100

080044a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	6039      	str	r1, [r7, #0]
 80044aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db0a      	blt.n	80044ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	490c      	ldr	r1, [pc, #48]	; (80044ec <__NVIC_SetPriority+0x4c>)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	0112      	lsls	r2, r2, #4
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	440b      	add	r3, r1
 80044c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c8:	e00a      	b.n	80044e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4908      	ldr	r1, [pc, #32]	; (80044f0 <__NVIC_SetPriority+0x50>)
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	3b04      	subs	r3, #4
 80044d8:	0112      	lsls	r2, r2, #4
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	440b      	add	r3, r1
 80044de:	761a      	strb	r2, [r3, #24]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000e100 	.word	0xe000e100
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f1c3 0307 	rsb	r3, r3, #7
 800450e:	2b04      	cmp	r3, #4
 8004510:	bf28      	it	cs
 8004512:	2304      	movcs	r3, #4
 8004514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3304      	adds	r3, #4
 800451a:	2b06      	cmp	r3, #6
 800451c:	d902      	bls.n	8004524 <NVIC_EncodePriority+0x30>
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3b03      	subs	r3, #3
 8004522:	e000      	b.n	8004526 <NVIC_EncodePriority+0x32>
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43da      	mvns	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	401a      	ands	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800453c:	f04f 31ff 	mov.w	r1, #4294967295
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	43d9      	mvns	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800454c:	4313      	orrs	r3, r2
         );
}
 800454e:	4618      	mov	r0, r3
 8004550:	3724      	adds	r7, #36	; 0x24
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3b01      	subs	r3, #1
 8004568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456c:	d301      	bcc.n	8004572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456e:	2301      	movs	r3, #1
 8004570:	e00f      	b.n	8004592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <SysTick_Config+0x40>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800457a:	210f      	movs	r1, #15
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	f7ff ff8e 	bl	80044a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <SysTick_Config+0x40>)
 8004586:	2200      	movs	r2, #0
 8004588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458a:	4b04      	ldr	r3, [pc, #16]	; (800459c <SysTick_Config+0x40>)
 800458c:	2207      	movs	r2, #7
 800458e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	e000e010 	.word	0xe000e010

080045a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff29 	bl	8004400 <__NVIC_SetPriorityGrouping>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	4603      	mov	r3, r0
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045c8:	f7ff ff3e 	bl	8004448 <__NVIC_GetPriorityGrouping>
 80045cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	6978      	ldr	r0, [r7, #20]
 80045d4:	f7ff ff8e 	bl	80044f4 <NVIC_EncodePriority>
 80045d8:	4602      	mov	r2, r0
 80045da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ff5d 	bl	80044a0 <__NVIC_SetPriority>
}
 80045e6:	bf00      	nop
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff31 	bl	8004464 <__NVIC_EnableIRQ>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ffa2 	bl	800455c <SysTick_Config>
 8004618:	4603      	mov	r3, r0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004630:	f7ff feb6 	bl	80043a0 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e099      	b.n	8004774 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004660:	e00f      	b.n	8004682 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004662:	f7ff fe9d 	bl	80043a0 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b05      	cmp	r3, #5
 800466e:	d908      	bls.n	8004682 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2203      	movs	r2, #3
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e078      	b.n	8004774 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e8      	bne.n	8004662 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4b38      	ldr	r3, [pc, #224]	; (800477c <HAL_DMA_Init+0x158>)
 800469c:	4013      	ands	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d107      	bne.n	80046ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	4313      	orrs	r3, r2
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0307 	bic.w	r3, r3, #7
 8004702:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b04      	cmp	r3, #4
 8004714:	d117      	bne.n	8004746 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fa19 	bl	8004b60 <DMA_CheckFifoParam>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2240      	movs	r2, #64	; 0x40
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004742:	2301      	movs	r3, #1
 8004744:	e016      	b.n	8004774 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f9d0 	bl	8004af4 <DMA_CalcBaseAndBitshift>
 8004754:	4603      	mov	r3, r0
 8004756:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	223f      	movs	r2, #63	; 0x3f
 800475e:	409a      	lsls	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	f010803f 	.word	0xf010803f

08004780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d004      	beq.n	800479e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e00c      	b.n	80047b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2205      	movs	r2, #5
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047d0:	4b8e      	ldr	r3, [pc, #568]	; (8004a0c <HAL_DMA_IRQHandler+0x248>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a8e      	ldr	r2, [pc, #568]	; (8004a10 <HAL_DMA_IRQHandler+0x24c>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0a9b      	lsrs	r3, r3, #10
 80047dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	2208      	movs	r2, #8
 80047f0:	409a      	lsls	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01a      	beq.n	8004830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481c:	2208      	movs	r2, #8
 800481e:	409a      	lsls	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004834:	2201      	movs	r2, #1
 8004836:	409a      	lsls	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d012      	beq.n	8004866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	2201      	movs	r2, #1
 8004854:	409a      	lsls	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f043 0202 	orr.w	r2, r3, #2
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	2204      	movs	r2, #4
 800486c:	409a      	lsls	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d012      	beq.n	800489c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004888:	2204      	movs	r2, #4
 800488a:	409a      	lsls	r2, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	2210      	movs	r2, #16
 80048a2:	409a      	lsls	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d043      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d03c      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	2210      	movs	r2, #16
 80048c0:	409a      	lsls	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d018      	beq.n	8004906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d024      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
 80048f2:	e01f      	b.n	8004934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
 8004904:	e016      	b.n	8004934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d107      	bne.n	8004924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0208 	bic.w	r2, r2, #8
 8004922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	2220      	movs	r2, #32
 800493a:	409a      	lsls	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 808f 	beq.w	8004a64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8087 	beq.w	8004a64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	2220      	movs	r2, #32
 800495c:	409a      	lsls	r2, r3
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b05      	cmp	r3, #5
 800496c:	d136      	bne.n	80049dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0216 	bic.w	r2, r2, #22
 800497c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_DMA_IRQHandler+0x1da>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0208 	bic.w	r2, r2, #8
 80049ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	223f      	movs	r2, #63	; 0x3f
 80049b4:	409a      	lsls	r2, r3
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d07e      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
        }
        return;
 80049da:	e079      	b.n	8004ad0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01d      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10d      	bne.n	8004a14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d031      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
 8004a08:	e02c      	b.n	8004a64 <HAL_DMA_IRQHandler+0x2a0>
 8004a0a:	bf00      	nop
 8004a0c:	200000b0 	.word	0x200000b0
 8004a10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d023      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
 8004a24:	e01e      	b.n	8004a64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10f      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0210 	bic.w	r2, r2, #16
 8004a42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d032      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d022      	beq.n	8004abe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d307      	bcc.n	8004aac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f2      	bne.n	8004a90 <HAL_DMA_IRQHandler+0x2cc>
 8004aaa:	e000      	b.n	8004aae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004aac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
 8004ace:	e000      	b.n	8004ad2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ad0:	bf00      	nop
    }
  }
}
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae6:	b2db      	uxtb	r3, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	3b10      	subs	r3, #16
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <DMA_CalcBaseAndBitshift+0x64>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b0e:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <DMA_CalcBaseAndBitshift+0x68>)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d909      	bls.n	8004b36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	659a      	str	r2, [r3, #88]	; 0x58
 8004b34:	e007      	b.n	8004b46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	aaaaaaab 	.word	0xaaaaaaab
 8004b5c:	0800c3b4 	.word	0x0800c3b4

08004b60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11f      	bne.n	8004bba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d856      	bhi.n	8004c2e <DMA_CheckFifoParam+0xce>
 8004b80:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <DMA_CheckFifoParam+0x28>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004bab 	.word	0x08004bab
 8004b90:	08004b99 	.word	0x08004b99
 8004b94:	08004c2f 	.word	0x08004c2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d046      	beq.n	8004c32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba8:	e043      	b.n	8004c32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb2:	d140      	bne.n	8004c36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb8:	e03d      	b.n	8004c36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	d121      	bne.n	8004c08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d837      	bhi.n	8004c3a <DMA_CheckFifoParam+0xda>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <DMA_CheckFifoParam+0x70>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004be7 	.word	0x08004be7
 8004bd8:	08004be1 	.word	0x08004be1
 8004bdc:	08004bf9 	.word	0x08004bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
      break;
 8004be4:	e030      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d025      	beq.n	8004c3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf6:	e022      	b.n	8004c3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c00:	d11f      	bne.n	8004c42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c06:	e01c      	b.n	8004c42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d903      	bls.n	8004c16 <DMA_CheckFifoParam+0xb6>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d003      	beq.n	8004c1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c14:	e018      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1a:	e015      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2c:	e00b      	b.n	8004c46 <DMA_CheckFifoParam+0xe6>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e00a      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c32:	bf00      	nop
 8004c34:	e008      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c36:	bf00      	nop
 8004c38:	e006      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e004      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c46:	bf00      	nop
    }
  } 
  
  return status; 
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e16b      	b.n	8004f4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c74:	2201      	movs	r2, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	f040 815a 	bne.w	8004f46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d005      	beq.n	8004caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d130      	bne.n	8004d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0201 	and.w	r2, r3, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d017      	beq.n	8004d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d123      	bne.n	8004d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	08da      	lsrs	r2, r3, #3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3208      	adds	r2, #8
 8004d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	220f      	movs	r2, #15
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	08da      	lsrs	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3208      	adds	r2, #8
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80b4 	beq.w	8004f46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	4b60      	ldr	r3, [pc, #384]	; (8004f64 <HAL_GPIO_Init+0x30c>)
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	4a5f      	ldr	r2, [pc, #380]	; (8004f64 <HAL_GPIO_Init+0x30c>)
 8004de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dec:	6453      	str	r3, [r2, #68]	; 0x44
 8004dee:	4b5d      	ldr	r3, [pc, #372]	; (8004f64 <HAL_GPIO_Init+0x30c>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfa:	4a5b      	ldr	r2, [pc, #364]	; (8004f68 <HAL_GPIO_Init+0x310>)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	3302      	adds	r3, #2
 8004e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	220f      	movs	r2, #15
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a52      	ldr	r2, [pc, #328]	; (8004f6c <HAL_GPIO_Init+0x314>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d02b      	beq.n	8004e7e <HAL_GPIO_Init+0x226>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a51      	ldr	r2, [pc, #324]	; (8004f70 <HAL_GPIO_Init+0x318>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d025      	beq.n	8004e7a <HAL_GPIO_Init+0x222>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a50      	ldr	r2, [pc, #320]	; (8004f74 <HAL_GPIO_Init+0x31c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01f      	beq.n	8004e76 <HAL_GPIO_Init+0x21e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a4f      	ldr	r2, [pc, #316]	; (8004f78 <HAL_GPIO_Init+0x320>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d019      	beq.n	8004e72 <HAL_GPIO_Init+0x21a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <HAL_GPIO_Init+0x324>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_GPIO_Init+0x216>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a4d      	ldr	r2, [pc, #308]	; (8004f80 <HAL_GPIO_Init+0x328>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00d      	beq.n	8004e6a <HAL_GPIO_Init+0x212>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a4c      	ldr	r2, [pc, #304]	; (8004f84 <HAL_GPIO_Init+0x32c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <HAL_GPIO_Init+0x20e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a4b      	ldr	r2, [pc, #300]	; (8004f88 <HAL_GPIO_Init+0x330>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d101      	bne.n	8004e62 <HAL_GPIO_Init+0x20a>
 8004e5e:	2307      	movs	r3, #7
 8004e60:	e00e      	b.n	8004e80 <HAL_GPIO_Init+0x228>
 8004e62:	2308      	movs	r3, #8
 8004e64:	e00c      	b.n	8004e80 <HAL_GPIO_Init+0x228>
 8004e66:	2306      	movs	r3, #6
 8004e68:	e00a      	b.n	8004e80 <HAL_GPIO_Init+0x228>
 8004e6a:	2305      	movs	r3, #5
 8004e6c:	e008      	b.n	8004e80 <HAL_GPIO_Init+0x228>
 8004e6e:	2304      	movs	r3, #4
 8004e70:	e006      	b.n	8004e80 <HAL_GPIO_Init+0x228>
 8004e72:	2303      	movs	r3, #3
 8004e74:	e004      	b.n	8004e80 <HAL_GPIO_Init+0x228>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e002      	b.n	8004e80 <HAL_GPIO_Init+0x228>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_GPIO_Init+0x228>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	f002 0203 	and.w	r2, r2, #3
 8004e86:	0092      	lsls	r2, r2, #2
 8004e88:	4093      	lsls	r3, r2
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e90:	4935      	ldr	r1, [pc, #212]	; (8004f68 <HAL_GPIO_Init+0x310>)
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	089b      	lsrs	r3, r3, #2
 8004e96:	3302      	adds	r3, #2
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_GPIO_Init+0x334>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ec2:	4a32      	ldr	r2, [pc, #200]	; (8004f8c <HAL_GPIO_Init+0x334>)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ec8:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <HAL_GPIO_Init+0x334>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eec:	4a27      	ldr	r2, [pc, #156]	; (8004f8c <HAL_GPIO_Init+0x334>)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ef2:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <HAL_GPIO_Init+0x334>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f16:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <HAL_GPIO_Init+0x334>)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <HAL_GPIO_Init+0x334>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f40:	4a12      	ldr	r2, [pc, #72]	; (8004f8c <HAL_GPIO_Init+0x334>)
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	f67f ae90 	bls.w	8004c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	3724      	adds	r7, #36	; 0x24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
 8004f68:	40013800 	.word	0x40013800
 8004f6c:	40020000 	.word	0x40020000
 8004f70:	40020400 	.word	0x40020400
 8004f74:	40020800 	.word	0x40020800
 8004f78:	40020c00 	.word	0x40020c00
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40021400 	.word	0x40021400
 8004f84:	40021800 	.word	0x40021800
 8004f88:	40021c00 	.word	0x40021c00
 8004f8c:	40013c00 	.word	0x40013c00

08004f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	887b      	ldrh	r3, [r7, #2]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	e001      	b.n	8004fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	807b      	strh	r3, [r7, #2]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fd0:	787b      	ldrb	r3, [r7, #1]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fd6:	887a      	ldrh	r2, [r7, #2]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fdc:	e003      	b.n	8004fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fde:	887b      	ldrh	r3, [r7, #2]
 8004fe0:	041a      	lsls	r2, r3, #16
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	619a      	str	r2, [r3, #24]
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e12b      	b.n	800525e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fe fb32 	bl	8003684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2224      	movs	r2, #36	; 0x24
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005058:	f002 fa5c 	bl	8007514 <HAL_RCC_GetPCLK1Freq>
 800505c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4a81      	ldr	r2, [pc, #516]	; (8005268 <HAL_I2C_Init+0x274>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d807      	bhi.n	8005078 <HAL_I2C_Init+0x84>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a80      	ldr	r2, [pc, #512]	; (800526c <HAL_I2C_Init+0x278>)
 800506c:	4293      	cmp	r3, r2
 800506e:	bf94      	ite	ls
 8005070:	2301      	movls	r3, #1
 8005072:	2300      	movhi	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e006      	b.n	8005086 <HAL_I2C_Init+0x92>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a7d      	ldr	r2, [pc, #500]	; (8005270 <HAL_I2C_Init+0x27c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	bf94      	ite	ls
 8005080:	2301      	movls	r3, #1
 8005082:	2300      	movhi	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0e7      	b.n	800525e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4a78      	ldr	r2, [pc, #480]	; (8005274 <HAL_I2C_Init+0x280>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	0c9b      	lsrs	r3, r3, #18
 8005098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a6a      	ldr	r2, [pc, #424]	; (8005268 <HAL_I2C_Init+0x274>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d802      	bhi.n	80050c8 <HAL_I2C_Init+0xd4>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	3301      	adds	r3, #1
 80050c6:	e009      	b.n	80050dc <HAL_I2C_Init+0xe8>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	4a69      	ldr	r2, [pc, #420]	; (8005278 <HAL_I2C_Init+0x284>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	099b      	lsrs	r3, r3, #6
 80050da:	3301      	adds	r3, #1
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	495c      	ldr	r1, [pc, #368]	; (8005268 <HAL_I2C_Init+0x274>)
 80050f8:	428b      	cmp	r3, r1
 80050fa:	d819      	bhi.n	8005130 <HAL_I2C_Init+0x13c>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	1e59      	subs	r1, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	fbb1 f3f3 	udiv	r3, r1, r3
 800510a:	1c59      	adds	r1, r3, #1
 800510c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005110:	400b      	ands	r3, r1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_I2C_Init+0x138>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1e59      	subs	r1, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	fbb1 f3f3 	udiv	r3, r1, r3
 8005124:	3301      	adds	r3, #1
 8005126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800512a:	e051      	b.n	80051d0 <HAL_I2C_Init+0x1dc>
 800512c:	2304      	movs	r3, #4
 800512e:	e04f      	b.n	80051d0 <HAL_I2C_Init+0x1dc>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d111      	bne.n	800515c <HAL_I2C_Init+0x168>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1e58      	subs	r0, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6859      	ldr	r1, [r3, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	440b      	add	r3, r1
 8005146:	fbb0 f3f3 	udiv	r3, r0, r3
 800514a:	3301      	adds	r3, #1
 800514c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e012      	b.n	8005182 <HAL_I2C_Init+0x18e>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1e58      	subs	r0, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	0099      	lsls	r1, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005172:	3301      	adds	r3, #1
 8005174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_I2C_Init+0x196>
 8005186:	2301      	movs	r3, #1
 8005188:	e022      	b.n	80051d0 <HAL_I2C_Init+0x1dc>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10e      	bne.n	80051b0 <HAL_I2C_Init+0x1bc>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1e58      	subs	r0, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6859      	ldr	r1, [r3, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	440b      	add	r3, r1
 80051a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a4:	3301      	adds	r3, #1
 80051a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	e00f      	b.n	80051d0 <HAL_I2C_Init+0x1dc>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1e58      	subs	r0, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6859      	ldr	r1, [r3, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	0099      	lsls	r1, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c6:	3301      	adds	r3, #1
 80051c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	6809      	ldr	r1, [r1, #0]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6911      	ldr	r1, [r2, #16]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	68d2      	ldr	r2, [r2, #12]
 800520a:	4311      	orrs	r1, r2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	430b      	orrs	r3, r1
 8005212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	000186a0 	.word	0x000186a0
 800526c:	001e847f 	.word	0x001e847f
 8005270:	003d08ff 	.word	0x003d08ff
 8005274:	431bde83 	.word	0x431bde83
 8005278:	10624dd3 	.word	0x10624dd3

0800527c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d003      	beq.n	80052b4 <HAL_I2C_EV_IRQHandler+0x38>
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b40      	cmp	r3, #64	; 0x40
 80052b0:	f040 80c1 	bne.w	8005436 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10d      	bne.n	80052ea <HAL_I2C_EV_IRQHandler+0x6e>
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052d4:	d003      	beq.n	80052de <HAL_I2C_EV_IRQHandler+0x62>
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052dc:	d101      	bne.n	80052e2 <HAL_I2C_EV_IRQHandler+0x66>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_I2C_EV_IRQHandler+0x68>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	f000 8132 	beq.w	800554e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00c      	beq.n	800530e <HAL_I2C_EV_IRQHandler+0x92>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	0a5b      	lsrs	r3, r3, #9
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 fc7b 	bl	8006bfc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fd83 	bl	8005e12 <I2C_Master_SB>
 800530c:	e092      	b.n	8005434 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	08db      	lsrs	r3, r3, #3
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d009      	beq.n	800532e <HAL_I2C_EV_IRQHandler+0xb2>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	0a5b      	lsrs	r3, r3, #9
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fdf9 	bl	8005f1e <I2C_Master_ADD10>
 800532c:	e082      	b.n	8005434 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_I2C_EV_IRQHandler+0xd2>
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	0a5b      	lsrs	r3, r3, #9
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fe13 	bl	8005f72 <I2C_Master_ADDR>
 800534c:	e072      	b.n	8005434 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	089b      	lsrs	r3, r3, #2
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d03b      	beq.n	80053d2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005368:	f000 80f3 	beq.w	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	09db      	lsrs	r3, r3, #7
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00f      	beq.n	8005398 <HAL_I2C_EV_IRQHandler+0x11c>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	0a9b      	lsrs	r3, r3, #10
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <HAL_I2C_EV_IRQHandler+0x11c>
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	089b      	lsrs	r3, r3, #2
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f9f3 	bl	800577c <I2C_MasterTransmit_TXE>
 8005396:	e04d      	b.n	8005434 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80d6 	beq.w	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 80cf 	beq.w	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80053b4:	7bbb      	ldrb	r3, [r7, #14]
 80053b6:	2b21      	cmp	r3, #33	; 0x21
 80053b8:	d103      	bne.n	80053c2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa7a 	bl	80058b4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053c0:	e0c7      	b.n	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	f040 80c4 	bne.w	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fae8 	bl	80059a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d0:	e0bf      	b.n	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e0:	f000 80b7 	beq.w	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00f      	beq.n	8005410 <HAL_I2C_EV_IRQHandler+0x194>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	0a9b      	lsrs	r3, r3, #10
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <HAL_I2C_EV_IRQHandler+0x194>
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d103      	bne.n	8005410 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fb5d 	bl	8005ac8 <I2C_MasterReceive_RXNE>
 800540e:	e011      	b.n	8005434 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 809a 	beq.w	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	0a5b      	lsrs	r3, r3, #9
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8093 	beq.w	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fc06 	bl	8005c3e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005432:	e08e      	b.n	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005434:	e08d      	b.n	8005552 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	e007      	b.n	8005458 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d012      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0x20e>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	0a5b      	lsrs	r3, r3, #9
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 ffc4 	bl	8006410 <I2C_Slave_ADDR>
 8005488:	e066      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <HAL_I2C_EV_IRQHandler+0x22e>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	0a5b      	lsrs	r3, r3, #9
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fffe 	bl	80064a4 <I2C_Slave_STOPF>
 80054a8:	e056      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054aa:	7bbb      	ldrb	r3, [r7, #14]
 80054ac:	2b21      	cmp	r3, #33	; 0x21
 80054ae:	d002      	beq.n	80054b6 <HAL_I2C_EV_IRQHandler+0x23a>
 80054b0:	7bbb      	ldrb	r3, [r7, #14]
 80054b2:	2b29      	cmp	r3, #41	; 0x29
 80054b4:	d125      	bne.n	8005502 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	09db      	lsrs	r3, r3, #7
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00f      	beq.n	80054e2 <HAL_I2C_EV_IRQHandler+0x266>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	0a9b      	lsrs	r3, r3, #10
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <HAL_I2C_EV_IRQHandler+0x266>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	089b      	lsrs	r3, r3, #2
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 feda 	bl	8006294 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054e0:	e039      	b.n	8005556 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	089b      	lsrs	r3, r3, #2
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d033      	beq.n	8005556 <HAL_I2C_EV_IRQHandler+0x2da>
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	0a5b      	lsrs	r3, r3, #9
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d02d      	beq.n	8005556 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 ff07 	bl	800630e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005500:	e029      	b.n	8005556 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	099b      	lsrs	r3, r3, #6
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00f      	beq.n	800552e <HAL_I2C_EV_IRQHandler+0x2b2>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	0a9b      	lsrs	r3, r3, #10
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_I2C_EV_IRQHandler+0x2b2>
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	089b      	lsrs	r3, r3, #2
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 ff12 	bl	8006350 <I2C_SlaveReceive_RXNE>
 800552c:	e014      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00e      	beq.n	8005558 <HAL_I2C_EV_IRQHandler+0x2dc>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	0a5b      	lsrs	r3, r3, #9
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 ff40 	bl	80063cc <I2C_SlaveReceive_BTF>
 800554c:	e004      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800554e:	bf00      	nop
 8005550:	e002      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005556:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08a      	sub	sp, #40	; 0x28
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005576:	2300      	movs	r3, #0
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005580:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00e      	beq.n	80055ac <HAL_I2C_ER_IRQHandler+0x4e>
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	0a5b      	lsrs	r3, r3, #9
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00e      	beq.n	80055d6 <HAL_I2C_ER_IRQHandler+0x78>
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	f043 0302 	orr.w	r3, r3, #2
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80055d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	0a9b      	lsrs	r3, r3, #10
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03f      	beq.n	8005662 <HAL_I2C_ER_IRQHandler+0x104>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d039      	beq.n	8005662 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80055ee:	7efb      	ldrb	r3, [r7, #27]
 80055f0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005608:	7ebb      	ldrb	r3, [r7, #26]
 800560a:	2b20      	cmp	r3, #32
 800560c:	d112      	bne.n	8005634 <HAL_I2C_ER_IRQHandler+0xd6>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10f      	bne.n	8005634 <HAL_I2C_ER_IRQHandler+0xd6>
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	2b21      	cmp	r3, #33	; 0x21
 8005618:	d008      	beq.n	800562c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	2b29      	cmp	r3, #41	; 0x29
 800561e:	d005      	beq.n	800562c <HAL_I2C_ER_IRQHandler+0xce>
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	2b28      	cmp	r3, #40	; 0x28
 8005624:	d106      	bne.n	8005634 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b21      	cmp	r3, #33	; 0x21
 800562a:	d103      	bne.n	8005634 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 f869 	bl	8006704 <I2C_Slave_AF>
 8005632:	e016      	b.n	8005662 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800563c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	f043 0304 	orr.w	r3, r3, #4
 8005644:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005646:	7efb      	ldrb	r3, [r7, #27]
 8005648:	2b10      	cmp	r3, #16
 800564a:	d002      	beq.n	8005652 <HAL_I2C_ER_IRQHandler+0xf4>
 800564c:	7efb      	ldrb	r3, [r7, #27]
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d107      	bne.n	8005662 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005660:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	0adb      	lsrs	r3, r3, #11
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <HAL_I2C_ER_IRQHandler+0x12e>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	f043 0308 	orr.w	r3, r3, #8
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800568a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	d008      	beq.n	80056a4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 f8a0 	bl	80067e4 <I2C_ITError>
  }
}
 80056a4:	bf00      	nop
 80056a6:	3728      	adds	r7, #40	; 0x28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
 8005708:	4613      	mov	r3, r2
 800570a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005792:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d150      	bne.n	8005844 <I2C_MasterTransmit_TXE+0xc8>
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b21      	cmp	r3, #33	; 0x21
 80057a6:	d14d      	bne.n	8005844 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d01d      	beq.n	80057ea <I2C_MasterTransmit_TXE+0x6e>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d01a      	beq.n	80057ea <I2C_MasterTransmit_TXE+0x6e>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057ba:	d016      	beq.n	80057ea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2211      	movs	r2, #17
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff ff62 	bl	80056ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057e8:	e060      	b.n	80058ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057f8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005808:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d107      	bne.n	8005834 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ff7d 	bl	800572c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005832:	e03b      	b.n	80058ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff ff35 	bl	80056ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005842:	e033      	b.n	80058ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b21      	cmp	r3, #33	; 0x21
 8005848:	d005      	beq.n	8005856 <I2C_MasterTransmit_TXE+0xda>
 800584a:	7bbb      	ldrb	r3, [r7, #14]
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d12d      	bne.n	80058ac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b22      	cmp	r3, #34	; 0x22
 8005854:	d12a      	bne.n	80058ac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d108      	bne.n	8005872 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005870:	e01c      	b.n	80058ac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d103      	bne.n	8005886 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f88e 	bl	80059a0 <I2C_MemoryTransmit_TXE_BTF>
}
 8005884:	e012      	b.n	80058ac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058aa:	e7ff      	b.n	80058ac <I2C_MasterTransmit_TXE+0x130>
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b21      	cmp	r3, #33	; 0x21
 80058cc:	d164      	bne.n	8005998 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d012      	beq.n	80058fe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80058fc:	e04c      	b.n	8005998 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d01d      	beq.n	8005940 <I2C_MasterTransmit_BTF+0x8c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b20      	cmp	r3, #32
 8005908:	d01a      	beq.n	8005940 <I2C_MasterTransmit_BTF+0x8c>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005910:	d016      	beq.n	8005940 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005920:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2211      	movs	r2, #17
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff feb7 	bl	80056ac <HAL_I2C_MasterTxCpltCallback>
}
 800593e:	e02b      	b.n	8005998 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800594e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b40      	cmp	r3, #64	; 0x40
 8005978:	d107      	bne.n	800598a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fed2 	bl	800572c <HAL_I2C_MemTxCpltCallback>
}
 8005988:	e006      	b.n	8005998 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fe8a 	bl	80056ac <HAL_I2C_MasterTxCpltCallback>
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11d      	bne.n	80059f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d10b      	bne.n	80059d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	1c9a      	adds	r2, r3, #2
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80059d6:	e073      	b.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059dc:	b29b      	uxth	r3, r3
 80059de:	121b      	asrs	r3, r3, #8
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059f2:	e065      	b.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d10b      	bne.n	8005a14 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a12:	e055      	b.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d151      	bne.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b22      	cmp	r3, #34	; 0x22
 8005a20:	d10d      	bne.n	8005a3e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a3c:	e040      	b.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d015      	beq.n	8005a74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b21      	cmp	r3, #33	; 0x21
 8005a4c:	d112      	bne.n	8005a74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a72:	e025      	b.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d120      	bne.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b21      	cmp	r3, #33	; 0x21
 8005a82:	d11d      	bne.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a92:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fe36 	bl	800572c <HAL_I2C_MemTxCpltCallback>
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b22      	cmp	r3, #34	; 0x22
 8005ada:	f040 80ac 	bne.w	8005c36 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d921      	bls.n	8005b30 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	f040 808c 	bne.w	8005c36 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005b2e:	e082      	b.n	8005c36 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d075      	beq.n	8005c24 <I2C_MasterReceive_RXNE+0x15c>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d002      	beq.n	8005b44 <I2C_MasterReceive_RXNE+0x7c>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d16f      	bne.n	8005c24 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 f827 	bl	8006b98 <I2C_WaitOnSTOPRequestThroughIT>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d142      	bne.n	8005bd6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b6e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d10a      	bne.n	8005bc0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff fdc1 	bl	8005740 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bbe:	e03a      	b.n	8005c36 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2212      	movs	r2, #18
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff fd76 	bl	80056c0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bd4:	e02f      	b.n	8005c36 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005be4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fd99 	bl	8005754 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c22:	e008      	b.n	8005c36 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c32:	605a      	str	r2, [r3, #4]
}
 8005c34:	e7ff      	b.n	8005c36 <I2C_MasterReceive_RXNE+0x16e>
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d11b      	bne.n	8005c8e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c64:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c8c:	e0bd      	b.n	8005e0a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d129      	bne.n	8005cec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d00a      	beq.n	8005cc4 <I2C_MasterReceive_BTF+0x86>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d007      	beq.n	8005cc4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cea:	e08e      	b.n	8005e0a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d176      	bne.n	8005de4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d002      	beq.n	8005d02 <I2C_MasterReceive_BTF+0xc4>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d108      	bne.n	8005d14 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e019      	b.n	8005d48 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d002      	beq.n	8005d20 <I2C_MasterReceive_BTF+0xe2>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d108      	bne.n	8005d32 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e00a      	b.n	8005d48 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d007      	beq.n	8005d48 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005da2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	d10a      	bne.n	8005dce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fcba 	bl	8005740 <HAL_I2C_MemRxCpltCallback>
}
 8005dcc:	e01d      	b.n	8005e0a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2212      	movs	r2, #18
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff fc6f 	bl	80056c0 <HAL_I2C_MasterRxCpltCallback>
}
 8005de2:	e012      	b.n	8005e0a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d117      	bne.n	8005e56 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e3e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005e40:	e067      	b.n	8005f12 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	611a      	str	r2, [r3, #16]
}
 8005e54:	e05d      	b.n	8005f12 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5e:	d133      	bne.n	8005ec8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b21      	cmp	r3, #33	; 0x21
 8005e6a:	d109      	bne.n	8005e80 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e7c:	611a      	str	r2, [r3, #16]
 8005e7e:	e008      	b.n	8005e92 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d004      	beq.n	8005ea4 <I2C_Master_SB+0x92>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d108      	bne.n	8005eb6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d032      	beq.n	8005f12 <I2C_Master_SB+0x100>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d02d      	beq.n	8005f12 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec4:	605a      	str	r2, [r3, #4]
}
 8005ec6:	e024      	b.n	8005f12 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10e      	bne.n	8005eee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	11db      	asrs	r3, r3, #7
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	f003 0306 	and.w	r3, r3, #6
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f063 030f 	orn	r3, r3, #15
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	611a      	str	r2, [r3, #16]
}
 8005eec:	e011      	b.n	8005f12 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d10d      	bne.n	8005f12 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	11db      	asrs	r3, r3, #7
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 0306 	and.w	r3, r3, #6
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f063 030e 	orn	r3, r3, #14
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	611a      	str	r2, [r3, #16]
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <I2C_Master_ADD10+0x26>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d108      	bne.n	8005f56 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00c      	beq.n	8005f66 <I2C_Master_ADD10+0x48>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f64:	605a      	str	r2, [r3, #4]
  }
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b091      	sub	sp, #68	; 0x44
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b22      	cmp	r3, #34	; 0x22
 8005f9a:	f040 8169 	bne.w	8006270 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10f      	bne.n	8005fc6 <I2C_Master_ADDR+0x54>
 8005fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d10b      	bne.n	8005fc6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	e160      	b.n	8006288 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d11d      	bne.n	800600a <I2C_Master_ADDR+0x98>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fd6:	d118      	bne.n	800600a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ffc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	651a      	str	r2, [r3, #80]	; 0x50
 8006008:	e13e      	b.n	8006288 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d113      	bne.n	800603c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006014:	2300      	movs	r3, #0
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e115      	b.n	8006268 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	f040 808a 	bne.w	800615c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800604e:	d137      	bne.n	80060c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800606e:	d113      	bne.n	8006098 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006080:	2300      	movs	r3, #0
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	e0e7      	b.n	8006268 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006098:	2300      	movs	r3, #0
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	623b      	str	r3, [r7, #32]
 80060ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e0d3      	b.n	8006268 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d02e      	beq.n	8006124 <I2C_Master_ADDR+0x1b2>
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d02b      	beq.n	8006124 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ce:	2b12      	cmp	r3, #18
 80060d0:	d102      	bne.n	80060d8 <I2C_Master_ADDR+0x166>
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d125      	bne.n	8006124 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d00e      	beq.n	80060fc <I2C_Master_ADDR+0x18a>
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d00b      	beq.n	80060fc <I2C_Master_ADDR+0x18a>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d008      	beq.n	80060fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e007      	b.n	800610c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800610a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	e0a1      	b.n	8006268 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006132:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006134:	2300      	movs	r3, #0
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	e085      	b.n	8006268 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d14d      	bne.n	8006202 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	2b04      	cmp	r3, #4
 800616a:	d016      	beq.n	800619a <I2C_Master_ADDR+0x228>
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	2b02      	cmp	r3, #2
 8006170:	d013      	beq.n	800619a <I2C_Master_ADDR+0x228>
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b10      	cmp	r3, #16
 8006176:	d010      	beq.n	800619a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006186:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	e007      	b.n	80061aa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061a8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b8:	d117      	bne.n	80061ea <I2C_Master_ADDR+0x278>
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061c0:	d00b      	beq.n	80061da <I2C_Master_ADDR+0x268>
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d008      	beq.n	80061da <I2C_Master_ADDR+0x268>
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d005      	beq.n	80061da <I2C_Master_ADDR+0x268>
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d002      	beq.n	80061da <I2C_Master_ADDR+0x268>
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d107      	bne.n	80061ea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	e032      	b.n	8006268 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006210:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800621c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006220:	d117      	bne.n	8006252 <I2C_Master_ADDR+0x2e0>
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006228:	d00b      	beq.n	8006242 <I2C_Master_ADDR+0x2d0>
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	2b01      	cmp	r3, #1
 800622e:	d008      	beq.n	8006242 <I2C_Master_ADDR+0x2d0>
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	2b08      	cmp	r3, #8
 8006234:	d005      	beq.n	8006242 <I2C_Master_ADDR+0x2d0>
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	2b10      	cmp	r3, #16
 800623a:	d002      	beq.n	8006242 <I2C_Master_ADDR+0x2d0>
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	2b20      	cmp	r3, #32
 8006240:	d107      	bne.n	8006252 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006250:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006252:	2300      	movs	r3, #0
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800626e:	e00b      	b.n	8006288 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
}
 8006286:	e7ff      	b.n	8006288 <I2C_Master_ADDR+0x316>
 8006288:	bf00      	nop
 800628a:	3744      	adds	r7, #68	; 0x44
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d02b      	beq.n	8006306 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	781a      	ldrb	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d114      	bne.n	8006306 <I2C_SlaveTransmit_TXE+0x72>
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b29      	cmp	r3, #41	; 0x29
 80062e0:	d111      	bne.n	8006306 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2221      	movs	r2, #33	; 0x21
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2228      	movs	r2, #40	; 0x28
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff f9e7 	bl	80056d4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d011      	beq.n	8006344 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d02c      	beq.n	80063c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d114      	bne.n	80063c4 <I2C_SlaveReceive_RXNE+0x74>
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	2b2a      	cmp	r3, #42	; 0x2a
 800639e:	d111      	bne.n	80063c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2222      	movs	r2, #34	; 0x22
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2228      	movs	r2, #40	; 0x28
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff f992 	bl	80056e8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063c4:	bf00      	nop
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d012      	beq.n	8006404 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800642a:	2b28      	cmp	r3, #40	; 0x28
 800642c:	d127      	bne.n	800647e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800644a:	2301      	movs	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	09db      	lsrs	r3, r3, #7
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	81bb      	strh	r3, [r7, #12]
 8006460:	e002      	b.n	8006468 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006470:	89ba      	ldrh	r2, [r7, #12]
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff f940 	bl	80056fc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800647c:	e00e      	b.n	800649c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80064c4:	2300      	movs	r3, #0
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006500:	d172      	bne.n	80065e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b22      	cmp	r3, #34	; 0x22
 8006506:	d002      	beq.n	800650e <I2C_Slave_STOPF+0x6a>
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b2a      	cmp	r3, #42	; 0x2a
 800650c:	d135      	bne.n	800657a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	b29a      	uxth	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f043 0204 	orr.w	r2, r3, #4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006540:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fac6 	bl	8004ad8 <HAL_DMA_GetState>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d049      	beq.n	80065e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	4a69      	ldr	r2, [pc, #420]	; (80066fc <I2C_Slave_STOPF+0x258>)
 8006558:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe f90e 	bl	8004780 <HAL_DMA_Abort_IT>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d03d      	beq.n	80065e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006574:	4610      	mov	r0, r2
 8006576:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006578:	e035      	b.n	80065e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	f043 0204 	orr.w	r2, r3, #4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fa90 	bl	8004ad8 <HAL_DMA_GetState>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d014      	beq.n	80065e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	4a4e      	ldr	r2, [pc, #312]	; (80066fc <I2C_Slave_STOPF+0x258>)
 80065c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe f8d8 	bl	8004780 <HAL_DMA_Abort_IT>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d008      	beq.n	80065e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065e0:	4610      	mov	r0, r2
 80065e2:	4798      	blx	r3
 80065e4:	e000      	b.n	80065e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03e      	beq.n	8006670 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d112      	bne.n	8006626 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d112      	bne.n	800665a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	f043 0204 	orr.w	r2, r3, #4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f8b3 	bl	80067e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800667e:	e039      	b.n	80066f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	2b2a      	cmp	r3, #42	; 0x2a
 8006684:	d109      	bne.n	800669a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2228      	movs	r2, #40	; 0x28
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff f827 	bl	80056e8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b28      	cmp	r3, #40	; 0x28
 80066a4:	d111      	bne.n	80066ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a15      	ldr	r2, [pc, #84]	; (8006700 <I2C_Slave_STOPF+0x25c>)
 80066aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff f828 	bl	8005718 <HAL_I2C_ListenCpltCallback>
}
 80066c8:	e014      	b.n	80066f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	2b22      	cmp	r3, #34	; 0x22
 80066d0:	d002      	beq.n	80066d8 <I2C_Slave_STOPF+0x234>
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b22      	cmp	r3, #34	; 0x22
 80066d6:	d10d      	bne.n	80066f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fe fffa 	bl	80056e8 <HAL_I2C_SlaveRxCpltCallback>
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	08006a49 	.word	0x08006a49
 8006700:	ffff0000 	.word	0xffff0000

08006704 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006712:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b08      	cmp	r3, #8
 800671e:	d002      	beq.n	8006726 <I2C_Slave_AF+0x22>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b20      	cmp	r3, #32
 8006724:	d129      	bne.n	800677a <I2C_Slave_AF+0x76>
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	2b28      	cmp	r3, #40	; 0x28
 800672a:	d126      	bne.n	800677a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a2c      	ldr	r2, [pc, #176]	; (80067e0 <I2C_Slave_AF+0xdc>)
 8006730:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006740:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800674a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fe ffd0 	bl	8005718 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006778:	e02e      	b.n	80067d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b21      	cmp	r3, #33	; 0x21
 800677e:	d126      	bne.n	80067ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a17      	ldr	r2, [pc, #92]	; (80067e0 <I2C_Slave_AF+0xdc>)
 8006784:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2221      	movs	r2, #33	; 0x21
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fe ff84 	bl	80056d4 <HAL_I2C_SlaveTxCpltCallback>
}
 80067cc:	e004      	b.n	80067d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067d6:	615a      	str	r2, [r3, #20]
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	ffff0000 	.word	0xffff0000

080067e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	2b10      	cmp	r3, #16
 8006800:	d002      	beq.n	8006808 <I2C_ITError+0x24>
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	d10a      	bne.n	800681e <I2C_ITError+0x3a>
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	2b22      	cmp	r3, #34	; 0x22
 800680c:	d107      	bne.n	800681e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800681c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006824:	2b28      	cmp	r3, #40	; 0x28
 8006826:	d107      	bne.n	8006838 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2228      	movs	r2, #40	; 0x28
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006836:	e015      	b.n	8006864 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006846:	d00a      	beq.n	800685e <I2C_ITError+0x7a>
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2b60      	cmp	r3, #96	; 0x60
 800684c:	d007      	beq.n	800685e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800686e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006872:	d162      	bne.n	800693a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006882:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	d020      	beq.n	80068d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	4a6a      	ldr	r2, [pc, #424]	; (8006a40 <I2C_ITError+0x25c>)
 8006898:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd ff6e 	bl	8004780 <HAL_DMA_Abort_IT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8089 	beq.w	80069be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068ce:	4610      	mov	r0, r2
 80068d0:	4798      	blx	r3
 80068d2:	e074      	b.n	80069be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	4a59      	ldr	r2, [pc, #356]	; (8006a40 <I2C_ITError+0x25c>)
 80068da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fd ff4d 	bl	8004780 <HAL_DMA_Abort_IT>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d068      	beq.n	80069be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d10b      	bne.n	8006912 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691a      	ldr	r2, [r3, #16]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006934:	4610      	mov	r0, r2
 8006936:	4798      	blx	r3
 8006938:	e041      	b.n	80069be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b60      	cmp	r3, #96	; 0x60
 8006944:	d125      	bne.n	8006992 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	d10b      	bne.n	800697a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0201 	bic.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fe feec 	bl	8005768 <HAL_I2C_AbortCpltCallback>
 8006990:	e015      	b.n	80069be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d10b      	bne.n	80069b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fe fecb 	bl	8005754 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10e      	bne.n	80069ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d109      	bne.n	80069ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d113      	bne.n	8006a38 <I2C_ITError+0x254>
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b28      	cmp	r3, #40	; 0x28
 8006a14:	d110      	bne.n	8006a38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <I2C_ITError+0x260>)
 8006a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fe fe70 	bl	8005718 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	08006a49 	.word	0x08006a49
 8006a44:	ffff0000 	.word	0xffff0000

08006a48 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a62:	4b4b      	ldr	r3, [pc, #300]	; (8006b90 <I2C_DMAAbort+0x148>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	08db      	lsrs	r3, r3, #3
 8006a68:	4a4a      	ldr	r2, [pc, #296]	; (8006b94 <I2C_DMAAbort+0x14c>)
 8006a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6e:	0a1a      	lsrs	r2, r3, #8
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	00da      	lsls	r2, r3, #3
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f043 0220 	orr.w	r2, r3, #32
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006a8e:	e00a      	b.n	8006aa6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa4:	d0ea      	beq.n	8006a7c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae8:	2200      	movs	r2, #0
 8006aea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	2200      	movs	r2, #0
 8006afa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0201 	bic.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b60      	cmp	r3, #96	; 0x60
 8006b16:	d10e      	bne.n	8006b36 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b2e:	6978      	ldr	r0, [r7, #20]
 8006b30:	f7fe fe1a 	bl	8005768 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b34:	e027      	b.n	8006b86 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b3c:	2b28      	cmp	r3, #40	; 0x28
 8006b3e:	d117      	bne.n	8006b70 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2228      	movs	r2, #40	; 0x28
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b6e:	e007      	b.n	8006b80 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006b80:	6978      	ldr	r0, [r7, #20]
 8006b82:	f7fe fde7 	bl	8005754 <HAL_I2C_ErrorCallback>
}
 8006b86:	bf00      	nop
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200000b0 	.word	0x200000b0
 8006b94:	14f8b589 	.word	0x14f8b589

08006b98 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ba4:	4b13      	ldr	r3, [pc, #76]	; (8006bf4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	08db      	lsrs	r3, r3, #3
 8006baa:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006bac:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb0:	0a1a      	lsrs	r2, r3, #8
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d107      	bne.n	8006bd6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	f043 0220 	orr.w	r2, r3, #32
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e008      	b.n	8006be8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be4:	d0e9      	beq.n	8006bba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	200000b0 	.word	0x200000b0
 8006bf8:	14f8b589 	.word	0x14f8b589

08006bfc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006c0c:	d103      	bne.n	8006c16 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c14:	e007      	b.n	8006c26 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c1e:	d102      	bne.n	8006c26 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2208      	movs	r2, #8
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e267      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d075      	beq.n	8006d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c52:	4b88      	ldr	r3, [pc, #544]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 030c 	and.w	r3, r3, #12
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d00c      	beq.n	8006c78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c5e:	4b85      	ldr	r3, [pc, #532]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d112      	bne.n	8006c90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c6a:	4b82      	ldr	r3, [pc, #520]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c76:	d10b      	bne.n	8006c90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c78:	4b7e      	ldr	r3, [pc, #504]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d05b      	beq.n	8006d3c <HAL_RCC_OscConfig+0x108>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d157      	bne.n	8006d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e242      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c98:	d106      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x74>
 8006c9a:	4b76      	ldr	r3, [pc, #472]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a75      	ldr	r2, [pc, #468]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e01d      	b.n	8006ce4 <HAL_RCC_OscConfig+0xb0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cb0:	d10c      	bne.n	8006ccc <HAL_RCC_OscConfig+0x98>
 8006cb2:	4b70      	ldr	r3, [pc, #448]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a6f      	ldr	r2, [pc, #444]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	4b6d      	ldr	r3, [pc, #436]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6c      	ldr	r2, [pc, #432]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	e00b      	b.n	8006ce4 <HAL_RCC_OscConfig+0xb0>
 8006ccc:	4b69      	ldr	r3, [pc, #420]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a68      	ldr	r2, [pc, #416]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4b66      	ldr	r3, [pc, #408]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a65      	ldr	r2, [pc, #404]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d013      	beq.n	8006d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cec:	f7fd fb58 	bl	80043a0 <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cf4:	f7fd fb54 	bl	80043a0 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b64      	cmp	r3, #100	; 0x64
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e207      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d06:	4b5b      	ldr	r3, [pc, #364]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0f0      	beq.n	8006cf4 <HAL_RCC_OscConfig+0xc0>
 8006d12:	e014      	b.n	8006d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d14:	f7fd fb44 	bl	80043a0 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d1c:	f7fd fb40 	bl	80043a0 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	; 0x64
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e1f3      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2e:	4b51      	ldr	r3, [pc, #324]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0xe8>
 8006d3a:	e000      	b.n	8006d3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d063      	beq.n	8006e12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d4a:	4b4a      	ldr	r3, [pc, #296]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 030c 	and.w	r3, r3, #12
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d56:	4b47      	ldr	r3, [pc, #284]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d11c      	bne.n	8006d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d62:	4b44      	ldr	r3, [pc, #272]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d116      	bne.n	8006d9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d6e:	4b41      	ldr	r3, [pc, #260]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_RCC_OscConfig+0x152>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d001      	beq.n	8006d86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e1c7      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d86:	4b3b      	ldr	r3, [pc, #236]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4937      	ldr	r1, [pc, #220]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d9a:	e03a      	b.n	8006e12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d020      	beq.n	8006de6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da4:	4b34      	ldr	r3, [pc, #208]	; (8006e78 <HAL_RCC_OscConfig+0x244>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006daa:	f7fd faf9 	bl	80043a0 <HAL_GetTick>
 8006dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006db2:	f7fd faf5 	bl	80043a0 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e1a8      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd0:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4925      	ldr	r1, [pc, #148]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	600b      	str	r3, [r1, #0]
 8006de4:	e015      	b.n	8006e12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006de6:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <HAL_RCC_OscConfig+0x244>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fd fad8 	bl	80043a0 <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006df4:	f7fd fad4 	bl	80043a0 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e187      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e06:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d036      	beq.n	8006e8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e26:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <HAL_RCC_OscConfig+0x248>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2c:	f7fd fab8 	bl	80043a0 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e34:	f7fd fab4 	bl	80043a0 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e167      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0x200>
 8006e52:	e01b      	b.n	8006e8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e54:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <HAL_RCC_OscConfig+0x248>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e5a:	f7fd faa1 	bl	80043a0 <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e60:	e00e      	b.n	8006e80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e62:	f7fd fa9d 	bl	80043a0 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d907      	bls.n	8006e80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e150      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
 8006e74:	40023800 	.word	0x40023800
 8006e78:	42470000 	.word	0x42470000
 8006e7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e80:	4b88      	ldr	r3, [pc, #544]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1ea      	bne.n	8006e62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8097 	beq.w	8006fc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e9e:	4b81      	ldr	r3, [pc, #516]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10f      	bne.n	8006eca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]
 8006eae:	4b7d      	ldr	r3, [pc, #500]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	4a7c      	ldr	r2, [pc, #496]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eba:	4b7a      	ldr	r3, [pc, #488]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec2:	60bb      	str	r3, [r7, #8]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eca:	4b77      	ldr	r3, [pc, #476]	; (80070a8 <HAL_RCC_OscConfig+0x474>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d118      	bne.n	8006f08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ed6:	4b74      	ldr	r3, [pc, #464]	; (80070a8 <HAL_RCC_OscConfig+0x474>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a73      	ldr	r2, [pc, #460]	; (80070a8 <HAL_RCC_OscConfig+0x474>)
 8006edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ee2:	f7fd fa5d 	bl	80043a0 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eea:	f7fd fa59 	bl	80043a0 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e10c      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efc:	4b6a      	ldr	r3, [pc, #424]	; (80070a8 <HAL_RCC_OscConfig+0x474>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0f0      	beq.n	8006eea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d106      	bne.n	8006f1e <HAL_RCC_OscConfig+0x2ea>
 8006f10:	4b64      	ldr	r3, [pc, #400]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4a63      	ldr	r2, [pc, #396]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f1c:	e01c      	b.n	8006f58 <HAL_RCC_OscConfig+0x324>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d10c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x30c>
 8006f26:	4b5f      	ldr	r3, [pc, #380]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	4a5e      	ldr	r2, [pc, #376]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	f043 0304 	orr.w	r3, r3, #4
 8006f30:	6713      	str	r3, [r2, #112]	; 0x70
 8006f32:	4b5c      	ldr	r3, [pc, #368]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	4a5b      	ldr	r2, [pc, #364]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f3e:	e00b      	b.n	8006f58 <HAL_RCC_OscConfig+0x324>
 8006f40:	4b58      	ldr	r3, [pc, #352]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f44:	4a57      	ldr	r2, [pc, #348]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f4c:	4b55      	ldr	r3, [pc, #340]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f50:	4a54      	ldr	r2, [pc, #336]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f52:	f023 0304 	bic.w	r3, r3, #4
 8006f56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fd fa1e 	bl	80043a0 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f66:	e00a      	b.n	8006f7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f68:	f7fd fa1a 	bl	80043a0 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e0cb      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f7e:	4b49      	ldr	r3, [pc, #292]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0ee      	beq.n	8006f68 <HAL_RCC_OscConfig+0x334>
 8006f8a:	e014      	b.n	8006fb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f8c:	f7fd fa08 	bl	80043a0 <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f94:	f7fd fa04 	bl	80043a0 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e0b5      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006faa:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ee      	bne.n	8006f94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d105      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fbc:	4b39      	ldr	r3, [pc, #228]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	4a38      	ldr	r2, [pc, #224]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80a1 	beq.w	8007114 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fd2:	4b34      	ldr	r3, [pc, #208]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 030c 	and.w	r3, r3, #12
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d05c      	beq.n	8007098 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d141      	bne.n	800706a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe6:	4b31      	ldr	r3, [pc, #196]	; (80070ac <HAL_RCC_OscConfig+0x478>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fec:	f7fd f9d8 	bl	80043a0 <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff4:	f7fd f9d4 	bl	80043a0 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e087      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007006:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f0      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	019b      	lsls	r3, r3, #6
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	3b01      	subs	r3, #1
 800702c:	041b      	lsls	r3, r3, #16
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	491b      	ldr	r1, [pc, #108]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8007038:	4313      	orrs	r3, r2
 800703a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800703c:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <HAL_RCC_OscConfig+0x478>)
 800703e:	2201      	movs	r2, #1
 8007040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007042:	f7fd f9ad 	bl	80043a0 <HAL_GetTick>
 8007046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007048:	e008      	b.n	800705c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800704a:	f7fd f9a9 	bl	80043a0 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e05c      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800705c:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0f0      	beq.n	800704a <HAL_RCC_OscConfig+0x416>
 8007068:	e054      	b.n	8007114 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800706a:	4b10      	ldr	r3, [pc, #64]	; (80070ac <HAL_RCC_OscConfig+0x478>)
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007070:	f7fd f996 	bl	80043a0 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007078:	f7fd f992 	bl	80043a0 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e045      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708a:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f0      	bne.n	8007078 <HAL_RCC_OscConfig+0x444>
 8007096:	e03d      	b.n	8007114 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d107      	bne.n	80070b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e038      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
 80070a4:	40023800 	.word	0x40023800
 80070a8:	40007000 	.word	0x40007000
 80070ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070b0:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <HAL_RCC_OscConfig+0x4ec>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d028      	beq.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d121      	bne.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d11a      	bne.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070e0:	4013      	ands	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d111      	bne.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	3b01      	subs	r3, #1
 80070fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d107      	bne.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800710c:	429a      	cmp	r2, r3
 800710e:	d001      	beq.n	8007114 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40023800 	.word	0x40023800

08007124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e0cc      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007138:	4b68      	ldr	r3, [pc, #416]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d90c      	bls.n	8007160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007146:	4b65      	ldr	r3, [pc, #404]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714e:	4b63      	ldr	r3, [pc, #396]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d001      	beq.n	8007160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e0b8      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d020      	beq.n	80071ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007178:	4b59      	ldr	r3, [pc, #356]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4a58      	ldr	r2, [pc, #352]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007190:	4b53      	ldr	r3, [pc, #332]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	4a52      	ldr	r2, [pc, #328]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800719a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800719c:	4b50      	ldr	r3, [pc, #320]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	494d      	ldr	r1, [pc, #308]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d044      	beq.n	8007244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d107      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c2:	4b47      	ldr	r3, [pc, #284]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d119      	bne.n	8007202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e07f      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d003      	beq.n	80071e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d107      	bne.n	80071f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e2:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e06f      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f2:	4b3b      	ldr	r3, [pc, #236]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e067      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007202:	4b37      	ldr	r3, [pc, #220]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f023 0203 	bic.w	r2, r3, #3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	4934      	ldr	r1, [pc, #208]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007210:	4313      	orrs	r3, r2
 8007212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007214:	f7fd f8c4 	bl	80043a0 <HAL_GetTick>
 8007218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721a:	e00a      	b.n	8007232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800721c:	f7fd f8c0 	bl	80043a0 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	f241 3288 	movw	r2, #5000	; 0x1388
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e04f      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007232:	4b2b      	ldr	r3, [pc, #172]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 020c 	and.w	r2, r3, #12
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	429a      	cmp	r2, r3
 8007242:	d1eb      	bne.n	800721c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007244:	4b25      	ldr	r3, [pc, #148]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d20c      	bcs.n	800726c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007252:	4b22      	ldr	r3, [pc, #136]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725a:	4b20      	ldr	r3, [pc, #128]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d001      	beq.n	800726c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e032      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d008      	beq.n	800728a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4916      	ldr	r1, [pc, #88]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007286:	4313      	orrs	r3, r2
 8007288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007296:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	490e      	ldr	r1, [pc, #56]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072aa:	f000 f821 	bl	80072f0 <HAL_RCC_GetSysClockFreq>
 80072ae:	4602      	mov	r2, r0
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	490a      	ldr	r1, [pc, #40]	; (80072e4 <HAL_RCC_ClockConfig+0x1c0>)
 80072bc:	5ccb      	ldrb	r3, [r1, r3]
 80072be:	fa22 f303 	lsr.w	r3, r2, r3
 80072c2:	4a09      	ldr	r2, [pc, #36]	; (80072e8 <HAL_RCC_ClockConfig+0x1c4>)
 80072c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072c6:	4b09      	ldr	r3, [pc, #36]	; (80072ec <HAL_RCC_ClockConfig+0x1c8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fd f824 	bl	8004318 <HAL_InitTick>

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40023c00 	.word	0x40023c00
 80072e0:	40023800 	.word	0x40023800
 80072e4:	0800c39c 	.word	0x0800c39c
 80072e8:	200000b0 	.word	0x200000b0
 80072ec:	200000b4 	.word	0x200000b4

080072f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f4:	b094      	sub	sp, #80	; 0x50
 80072f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	647b      	str	r3, [r7, #68]	; 0x44
 80072fc:	2300      	movs	r3, #0
 80072fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007300:	2300      	movs	r3, #0
 8007302:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007308:	4b79      	ldr	r3, [pc, #484]	; (80074f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f003 030c 	and.w	r3, r3, #12
 8007310:	2b08      	cmp	r3, #8
 8007312:	d00d      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0x40>
 8007314:	2b08      	cmp	r3, #8
 8007316:	f200 80e1 	bhi.w	80074dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <HAL_RCC_GetSysClockFreq+0x34>
 800731e:	2b04      	cmp	r3, #4
 8007320:	d003      	beq.n	800732a <HAL_RCC_GetSysClockFreq+0x3a>
 8007322:	e0db      	b.n	80074dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007324:	4b73      	ldr	r3, [pc, #460]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007326:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007328:	e0db      	b.n	80074e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800732a:	4b73      	ldr	r3, [pc, #460]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800732c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800732e:	e0d8      	b.n	80074e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007330:	4b6f      	ldr	r3, [pc, #444]	; (80074f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007338:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800733a:	4b6d      	ldr	r3, [pc, #436]	; (80074f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d063      	beq.n	800740e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007346:	4b6a      	ldr	r3, [pc, #424]	; (80074f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	099b      	lsrs	r3, r3, #6
 800734c:	2200      	movs	r2, #0
 800734e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007350:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007358:	633b      	str	r3, [r7, #48]	; 0x30
 800735a:	2300      	movs	r3, #0
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
 800735e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007362:	4622      	mov	r2, r4
 8007364:	462b      	mov	r3, r5
 8007366:	f04f 0000 	mov.w	r0, #0
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	0159      	lsls	r1, r3, #5
 8007370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007374:	0150      	lsls	r0, r2, #5
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4621      	mov	r1, r4
 800737c:	1a51      	subs	r1, r2, r1
 800737e:	6139      	str	r1, [r7, #16]
 8007380:	4629      	mov	r1, r5
 8007382:	eb63 0301 	sbc.w	r3, r3, r1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007394:	4659      	mov	r1, fp
 8007396:	018b      	lsls	r3, r1, #6
 8007398:	4651      	mov	r1, sl
 800739a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800739e:	4651      	mov	r1, sl
 80073a0:	018a      	lsls	r2, r1, #6
 80073a2:	4651      	mov	r1, sl
 80073a4:	ebb2 0801 	subs.w	r8, r2, r1
 80073a8:	4659      	mov	r1, fp
 80073aa:	eb63 0901 	sbc.w	r9, r3, r1
 80073ae:	f04f 0200 	mov.w	r2, #0
 80073b2:	f04f 0300 	mov.w	r3, #0
 80073b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073c2:	4690      	mov	r8, r2
 80073c4:	4699      	mov	r9, r3
 80073c6:	4623      	mov	r3, r4
 80073c8:	eb18 0303 	adds.w	r3, r8, r3
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	462b      	mov	r3, r5
 80073d0:	eb49 0303 	adc.w	r3, r9, r3
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073e2:	4629      	mov	r1, r5
 80073e4:	024b      	lsls	r3, r1, #9
 80073e6:	4621      	mov	r1, r4
 80073e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073ec:	4621      	mov	r1, r4
 80073ee:	024a      	lsls	r2, r1, #9
 80073f0:	4610      	mov	r0, r2
 80073f2:	4619      	mov	r1, r3
 80073f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f6:	2200      	movs	r2, #0
 80073f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007400:	f7f8 feea 	bl	80001d8 <__aeabi_uldivmod>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4613      	mov	r3, r2
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800740c:	e058      	b.n	80074c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800740e:	4b38      	ldr	r3, [pc, #224]	; (80074f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	099b      	lsrs	r3, r3, #6
 8007414:	2200      	movs	r2, #0
 8007416:	4618      	mov	r0, r3
 8007418:	4611      	mov	r1, r2
 800741a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800741e:	623b      	str	r3, [r7, #32]
 8007420:	2300      	movs	r3, #0
 8007422:	627b      	str	r3, [r7, #36]	; 0x24
 8007424:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	f04f 0000 	mov.w	r0, #0
 8007430:	f04f 0100 	mov.w	r1, #0
 8007434:	0159      	lsls	r1, r3, #5
 8007436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800743a:	0150      	lsls	r0, r2, #5
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4641      	mov	r1, r8
 8007442:	ebb2 0a01 	subs.w	sl, r2, r1
 8007446:	4649      	mov	r1, r9
 8007448:	eb63 0b01 	sbc.w	fp, r3, r1
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007458:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800745c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007460:	ebb2 040a 	subs.w	r4, r2, sl
 8007464:	eb63 050b 	sbc.w	r5, r3, fp
 8007468:	f04f 0200 	mov.w	r2, #0
 800746c:	f04f 0300 	mov.w	r3, #0
 8007470:	00eb      	lsls	r3, r5, #3
 8007472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007476:	00e2      	lsls	r2, r4, #3
 8007478:	4614      	mov	r4, r2
 800747a:	461d      	mov	r5, r3
 800747c:	4643      	mov	r3, r8
 800747e:	18e3      	adds	r3, r4, r3
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	464b      	mov	r3, r9
 8007484:	eb45 0303 	adc.w	r3, r5, r3
 8007488:	607b      	str	r3, [r7, #4]
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007496:	4629      	mov	r1, r5
 8007498:	028b      	lsls	r3, r1, #10
 800749a:	4621      	mov	r1, r4
 800749c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074a0:	4621      	mov	r1, r4
 80074a2:	028a      	lsls	r2, r1, #10
 80074a4:	4610      	mov	r0, r2
 80074a6:	4619      	mov	r1, r3
 80074a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074aa:	2200      	movs	r2, #0
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	61fa      	str	r2, [r7, #28]
 80074b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b4:	f7f8 fe90 	bl	80001d8 <__aeabi_uldivmod>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4613      	mov	r3, r2
 80074be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	3301      	adds	r3, #1
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80074d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074da:	e002      	b.n	80074e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80074de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3750      	adds	r7, #80	; 0x50
 80074e8:	46bd      	mov	sp, r7
 80074ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ee:	bf00      	nop
 80074f0:	40023800 	.word	0x40023800
 80074f4:	00f42400 	.word	0x00f42400
 80074f8:	007a1200 	.word	0x007a1200

080074fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007500:	4b03      	ldr	r3, [pc, #12]	; (8007510 <HAL_RCC_GetHCLKFreq+0x14>)
 8007502:	681b      	ldr	r3, [r3, #0]
}
 8007504:	4618      	mov	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	200000b0 	.word	0x200000b0

08007514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007518:	f7ff fff0 	bl	80074fc <HAL_RCC_GetHCLKFreq>
 800751c:	4602      	mov	r2, r0
 800751e:	4b05      	ldr	r3, [pc, #20]	; (8007534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	0a9b      	lsrs	r3, r3, #10
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	4903      	ldr	r1, [pc, #12]	; (8007538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800752a:	5ccb      	ldrb	r3, [r1, r3]
 800752c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007530:	4618      	mov	r0, r3
 8007532:	bd80      	pop	{r7, pc}
 8007534:	40023800 	.word	0x40023800
 8007538:	0800c3ac 	.word	0x0800c3ac

0800753c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007540:	f7ff ffdc 	bl	80074fc <HAL_RCC_GetHCLKFreq>
 8007544:	4602      	mov	r2, r0
 8007546:	4b05      	ldr	r3, [pc, #20]	; (800755c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	0b5b      	lsrs	r3, r3, #13
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	4903      	ldr	r1, [pc, #12]	; (8007560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007552:	5ccb      	ldrb	r3, [r1, r3]
 8007554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007558:	4618      	mov	r0, r3
 800755a:	bd80      	pop	{r7, pc}
 800755c:	40023800 	.word	0x40023800
 8007560:	0800c3ac 	.word	0x0800c3ac

08007564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e07b      	b.n	800766e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2b00      	cmp	r3, #0
 800757c:	d108      	bne.n	8007590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007586:	d009      	beq.n	800759c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	61da      	str	r2, [r3, #28]
 800758e:	e005      	b.n	800759c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fc fac0 	bl	8003b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007620:	ea42 0103 	orr.w	r1, r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	0c1b      	lsrs	r3, r3, #16
 800763a:	f003 0104 	and.w	r1, r3, #4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	f003 0210 	and.w	r2, r3, #16
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69da      	ldr	r2, [r3, #28]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800765c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b088      	sub	sp, #32
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_SPI_Transmit+0x22>
 8007694:	2302      	movs	r3, #2
 8007696:	e126      	b.n	80078e6 <HAL_SPI_Transmit+0x270>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a0:	f7fc fe7e 	bl	80043a0 <HAL_GetTick>
 80076a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d002      	beq.n	80076bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076b6:	2302      	movs	r3, #2
 80076b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076ba:	e10b      	b.n	80078d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_SPI_Transmit+0x52>
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d102      	bne.n	80076ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076cc:	e102      	b.n	80078d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2203      	movs	r2, #3
 80076d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	88fa      	ldrh	r2, [r7, #6]
 80076e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	88fa      	ldrh	r2, [r7, #6]
 80076ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007714:	d10f      	bne.n	8007736 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007724:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007734:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d007      	beq.n	8007754 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775c:	d14b      	bne.n	80077f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_SPI_Transmit+0xf6>
 8007766:	8afb      	ldrh	r3, [r7, #22]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d13e      	bne.n	80077ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007770:	881a      	ldrh	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	1c9a      	adds	r2, r3, #2
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007790:	e02b      	b.n	80077ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b02      	cmp	r3, #2
 800779e:	d112      	bne.n	80077c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	881a      	ldrh	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	1c9a      	adds	r2, r3, #2
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80077c4:	e011      	b.n	80077ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c6:	f7fc fdeb 	bl	80043a0 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d803      	bhi.n	80077de <HAL_SPI_Transmit+0x168>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d102      	bne.n	80077e4 <HAL_SPI_Transmit+0x16e>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077e8:	e074      	b.n	80078d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1ce      	bne.n	8007792 <HAL_SPI_Transmit+0x11c>
 80077f4:	e04c      	b.n	8007890 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_SPI_Transmit+0x18e>
 80077fe:	8afb      	ldrh	r3, [r7, #22]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d140      	bne.n	8007886 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800782a:	e02c      	b.n	8007886 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d113      	bne.n	8007862 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	7812      	ldrb	r2, [r2, #0]
 8007846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007860:	e011      	b.n	8007886 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007862:	f7fc fd9d 	bl	80043a0 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d803      	bhi.n	800787a <HAL_SPI_Transmit+0x204>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007878:	d102      	bne.n	8007880 <HAL_SPI_Transmit+0x20a>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007884:	e026      	b.n	80078d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800788a:	b29b      	uxth	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1cd      	bne.n	800782c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fce9 	bl	800826c <SPI_EndRxTxTransaction>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078ae:	2300      	movs	r3, #0
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	77fb      	strb	r3, [r7, #31]
 80078d0:	e000      	b.n	80078d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80078d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b088      	sub	sp, #32
 80078f2:	af02      	add	r7, sp, #8
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	603b      	str	r3, [r7, #0]
 80078fa:	4613      	mov	r3, r2
 80078fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800790a:	d112      	bne.n	8007932 <HAL_SPI_Receive+0x44>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10e      	bne.n	8007932 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2204      	movs	r2, #4
 8007918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	4613      	mov	r3, r2
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f8f1 	bl	8007b10 <HAL_SPI_TransmitReceive>
 800792e:	4603      	mov	r3, r0
 8007930:	e0ea      	b.n	8007b08 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_SPI_Receive+0x52>
 800793c:	2302      	movs	r3, #2
 800793e:	e0e3      	b.n	8007b08 <HAL_SPI_Receive+0x21a>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007948:	f7fc fd2a 	bl	80043a0 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b01      	cmp	r3, #1
 8007958:	d002      	beq.n	8007960 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800795a:	2302      	movs	r3, #2
 800795c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800795e:	e0ca      	b.n	8007af6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_SPI_Receive+0x7e>
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007970:	e0c1      	b.n	8007af6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2204      	movs	r2, #4
 8007976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b8:	d10f      	bne.n	80079da <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	d007      	beq.n	80079f8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d162      	bne.n	8007ac6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a00:	e02e      	b.n	8007a60 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d115      	bne.n	8007a3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f103 020c 	add.w	r2, r3, #12
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	7812      	ldrb	r2, [r2, #0]
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a3a:	e011      	b.n	8007a60 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a3c:	f7fc fcb0 	bl	80043a0 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d803      	bhi.n	8007a54 <HAL_SPI_Receive+0x166>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a52:	d102      	bne.n	8007a5a <HAL_SPI_Receive+0x16c>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d102      	bne.n	8007a60 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a5e:	e04a      	b.n	8007af6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1cb      	bne.n	8007a02 <HAL_SPI_Receive+0x114>
 8007a6a:	e031      	b.n	8007ad0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d113      	bne.n	8007aa2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	b292      	uxth	r2, r2
 8007a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	1c9a      	adds	r2, r3, #2
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aa0:	e011      	b.n	8007ac6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aa2:	f7fc fc7d 	bl	80043a0 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d803      	bhi.n	8007aba <HAL_SPI_Receive+0x1cc>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_Receive+0x1d2>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ac4:	e017      	b.n	8007af6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1cd      	bne.n	8007a6c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fb63 	bl	80081a0 <SPI_EndRxTransaction>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	75fb      	strb	r3, [r7, #23]
 8007af2:	e000      	b.n	8007af6 <HAL_SPI_Receive+0x208>
  }

error :
 8007af4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b08c      	sub	sp, #48	; 0x30
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_SPI_TransmitReceive+0x26>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e18a      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x33c>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b3e:	f7fc fc2f 	bl	80043a0 <HAL_GetTick>
 8007b42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b54:	887b      	ldrh	r3, [r7, #2]
 8007b56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d00f      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x70>
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b66:	d107      	bne.n	8007b78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <HAL_SPI_TransmitReceive+0x68>
 8007b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d003      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b7e:	e15b      	b.n	8007e38 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <HAL_SPI_TransmitReceive+0x82>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <HAL_SPI_TransmitReceive+0x82>
 8007b8c:	887b      	ldrh	r3, [r7, #2]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d103      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b98:	e14e      	b.n	8007e38 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d003      	beq.n	8007bae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2205      	movs	r2, #5
 8007baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	887a      	ldrh	r2, [r7, #2]
 8007bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	887a      	ldrh	r2, [r7, #2]
 8007bc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	887a      	ldrh	r2, [r7, #2]
 8007bd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	887a      	ldrh	r2, [r7, #2]
 8007bd6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	d007      	beq.n	8007c02 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c0a:	d178      	bne.n	8007cfe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_SPI_TransmitReceive+0x10a>
 8007c14:	8b7b      	ldrh	r3, [r7, #26]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d166      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	881a      	ldrh	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	1c9a      	adds	r2, r3, #2
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c3e:	e053      	b.n	8007ce8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d11b      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x176>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d016      	beq.n	8007c86 <HAL_SPI_TransmitReceive+0x176>
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d113      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	881a      	ldrh	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	1c9a      	adds	r2, r3, #2
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d119      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x1b8>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d014      	beq.n	8007cc8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	1c9a      	adds	r2, r3, #2
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cc8:	f7fc fb6a 	bl	80043a0 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d807      	bhi.n	8007ce8 <HAL_SPI_TransmitReceive+0x1d8>
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d003      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ce6:	e0a7      	b.n	8007e38 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1a6      	bne.n	8007c40 <HAL_SPI_TransmitReceive+0x130>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1a1      	bne.n	8007c40 <HAL_SPI_TransmitReceive+0x130>
 8007cfc:	e07c      	b.n	8007df8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_SPI_TransmitReceive+0x1fc>
 8007d06:	8b7b      	ldrh	r3, [r7, #26]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d16b      	bne.n	8007de4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	330c      	adds	r3, #12
 8007d16:	7812      	ldrb	r2, [r2, #0]
 8007d18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d32:	e057      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d11c      	bne.n	8007d7c <HAL_SPI_TransmitReceive+0x26c>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d017      	beq.n	8007d7c <HAL_SPI_TransmitReceive+0x26c>
 8007d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d114      	bne.n	8007d7c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	330c      	adds	r3, #12
 8007d5c:	7812      	ldrb	r2, [r2, #0]
 8007d5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d119      	bne.n	8007dbe <HAL_SPI_TransmitReceive+0x2ae>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d014      	beq.n	8007dbe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	b2d2      	uxtb	r2, r2
 8007da0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007dbe:	f7fc faef 	bl	80043a0 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d803      	bhi.n	8007dd6 <HAL_SPI_TransmitReceive+0x2c6>
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd4:	d102      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x2cc>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007de2:	e029      	b.n	8007e38 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1a2      	bne.n	8007d34 <HAL_SPI_TransmitReceive+0x224>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d19d      	bne.n	8007d34 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fa35 	bl	800826c <SPI_EndRxTxTransaction>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d006      	beq.n	8007e16 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2220      	movs	r2, #32
 8007e12:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e14:	e010      	b.n	8007e38 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10b      	bne.n	8007e36 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	e000      	b.n	8007e38 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3730      	adds	r7, #48	; 0x30
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	099b      	lsrs	r3, r3, #6
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10f      	bne.n	8007e98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	099b      	lsrs	r3, r3, #6
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d004      	beq.n	8007e98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
    return;
 8007e96:	e0d7      	b.n	8008048 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <HAL_SPI_IRQHandler+0x66>
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	09db      	lsrs	r3, r3, #7
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
    return;
 8007eb8:	e0c6      	b.n	8008048 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_SPI_IRQHandler+0x8c>
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	099b      	lsrs	r3, r3, #6
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	0a1b      	lsrs	r3, r3, #8
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80b4 	beq.w	8008048 <HAL_SPI_IRQHandler+0x1f4>
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80ad 	beq.w	8008048 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	099b      	lsrs	r3, r3, #6
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d023      	beq.n	8007f42 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d011      	beq.n	8007f2a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0a:	f043 0204 	orr.w	r2, r3, #4
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f12:	2300      	movs	r3, #0
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	e00b      	b.n	8007f42 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	693b      	ldr	r3, [r7, #16]
        return;
 8007f40:	e082      	b.n	8008048 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d014      	beq.n	8007f78 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f52:	f043 0201 	orr.w	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	0a1b      	lsrs	r3, r3, #8
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00c      	beq.n	8007f9e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f88:	f043 0208 	orr.w	r2, r3, #8
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f90:	2300      	movs	r3, #0
 8007f92:	60bb      	str	r3, [r7, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	60bb      	str	r3, [r7, #8]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d04f      	beq.n	8008046 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fb4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d104      	bne.n	8007fd2 <HAL_SPI_IRQHandler+0x17e>
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d034      	beq.n	800803c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0203 	bic.w	r2, r2, #3
 8007fe0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d011      	beq.n	800800e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fee:	4a18      	ldr	r2, [pc, #96]	; (8008050 <HAL_SPI_IRQHandler+0x1fc>)
 8007ff0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fc fbc2 	bl	8004780 <HAL_DMA_Abort_IT>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008012:	2b00      	cmp	r3, #0
 8008014:	d016      	beq.n	8008044 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801a:	4a0d      	ldr	r2, [pc, #52]	; (8008050 <HAL_SPI_IRQHandler+0x1fc>)
 800801c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008022:	4618      	mov	r0, r3
 8008024:	f7fc fbac 	bl	8004780 <HAL_DMA_Abort_IT>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800803a:	e003      	b.n	8008044 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f809 	bl	8008054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008042:	e000      	b.n	8008046 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008044:	bf00      	nop
    return;
 8008046:	bf00      	nop
  }
}
 8008048:	3720      	adds	r7, #32
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	08008069 	.word	0x08008069

08008054 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff ffe6 	bl	8008054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	4613      	mov	r3, r2
 800809e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080a0:	f7fc f97e 	bl	80043a0 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	4413      	add	r3, r2
 80080ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080b0:	f7fc f976 	bl	80043a0 <HAL_GetTick>
 80080b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080b6:	4b39      	ldr	r3, [pc, #228]	; (800819c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	015b      	lsls	r3, r3, #5
 80080bc:	0d1b      	lsrs	r3, r3, #20
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	fb02 f303 	mul.w	r3, r2, r3
 80080c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080c6:	e054      	b.n	8008172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ce:	d050      	beq.n	8008172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080d0:	f7fc f966 	bl	80043a0 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d902      	bls.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d13d      	bne.n	8008162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080fe:	d111      	bne.n	8008124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008108:	d004      	beq.n	8008114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008112:	d107      	bne.n	8008124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812c:	d10f      	bne.n	800814e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800814c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e017      	b.n	8008192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	3b01      	subs	r3, #1
 8008170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4013      	ands	r3, r2
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	429a      	cmp	r2, r3
 8008180:	bf0c      	ite	eq
 8008182:	2301      	moveq	r3, #1
 8008184:	2300      	movne	r3, #0
 8008186:	b2db      	uxtb	r3, r3
 8008188:	461a      	mov	r2, r3
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	429a      	cmp	r2, r3
 800818e:	d19b      	bne.n	80080c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	200000b0 	.word	0x200000b0

080081a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081b4:	d111      	bne.n	80081da <SPI_EndRxTransaction+0x3a>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081be:	d004      	beq.n	80081ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c8:	d107      	bne.n	80081da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081e2:	d12a      	bne.n	800823a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ec:	d012      	beq.n	8008214 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2180      	movs	r1, #128	; 0x80
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff ff49 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d02d      	beq.n	8008260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008208:	f043 0220 	orr.w	r2, r3, #32
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e026      	b.n	8008262 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	2101      	movs	r1, #1
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff ff36 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01a      	beq.n	8008260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822e:	f043 0220 	orr.w	r2, r3, #32
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e013      	b.n	8008262 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2200      	movs	r2, #0
 8008242:	2101      	movs	r1, #1
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff ff23 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008254:	f043 0220 	orr.w	r2, r3, #32
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e000      	b.n	8008262 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008278:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <SPI_EndRxTxTransaction+0x7c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1b      	ldr	r2, [pc, #108]	; (80082ec <SPI_EndRxTxTransaction+0x80>)
 800827e:	fba2 2303 	umull	r2, r3, r2, r3
 8008282:	0d5b      	lsrs	r3, r3, #21
 8008284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008288:	fb02 f303 	mul.w	r3, r2, r3
 800828c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008296:	d112      	bne.n	80082be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	2180      	movs	r1, #128	; 0x80
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f7ff fef4 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d016      	beq.n	80082dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b2:	f043 0220 	orr.w	r2, r3, #32
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e00f      	b.n	80082de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d4:	2b80      	cmp	r3, #128	; 0x80
 80082d6:	d0f2      	beq.n	80082be <SPI_EndRxTxTransaction+0x52>
 80082d8:	e000      	b.n	80082dc <SPI_EndRxTxTransaction+0x70>
        break;
 80082da:	bf00      	nop
  }

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	200000b0 	.word	0x200000b0
 80082ec:	165e9f81 	.word	0x165e9f81

080082f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e041      	b.n	8008386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7fb fe3e 	bl	8003f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3304      	adds	r3, #4
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f000 fae0 	bl	80088f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d001      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e04e      	b.n	8008446 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a23      	ldr	r2, [pc, #140]	; (8008454 <HAL_TIM_Base_Start_IT+0xc4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d022      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d2:	d01d      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1f      	ldr	r2, [pc, #124]	; (8008458 <HAL_TIM_Base_Start_IT+0xc8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d018      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1e      	ldr	r2, [pc, #120]	; (800845c <HAL_TIM_Base_Start_IT+0xcc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1c      	ldr	r2, [pc, #112]	; (8008460 <HAL_TIM_Base_Start_IT+0xd0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00e      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1b      	ldr	r2, [pc, #108]	; (8008464 <HAL_TIM_Base_Start_IT+0xd4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d009      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a19      	ldr	r2, [pc, #100]	; (8008468 <HAL_TIM_Base_Start_IT+0xd8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d004      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a18      	ldr	r2, [pc, #96]	; (800846c <HAL_TIM_Base_Start_IT+0xdc>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d111      	bne.n	8008434 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b06      	cmp	r3, #6
 8008420:	d010      	beq.n	8008444 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0201 	orr.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008432:	e007      	b.n	8008444 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0201 	orr.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40010000 	.word	0x40010000
 8008458:	40000400 	.word	0x40000400
 800845c:	40000800 	.word	0x40000800
 8008460:	40000c00 	.word	0x40000c00
 8008464:	40010400 	.word	0x40010400
 8008468:	40014000 	.word	0x40014000
 800846c:	40001800 	.word	0x40001800

08008470 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e041      	b.n	8008506 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fb fd5c 	bl	8003f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f000 fa20 	bl	80088f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d122      	bne.n	800856a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d11b      	bne.n	800856a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f06f 0202 	mvn.w	r2, #2
 800853a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f003 0303 	and.w	r3, r3, #3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9b1 	bl	80088b8 <HAL_TIM_IC_CaptureCallback>
 8008556:	e005      	b.n	8008564 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f9a3 	bl	80088a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f9b4 	bl	80088cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b04      	cmp	r3, #4
 8008576:	d122      	bne.n	80085be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b04      	cmp	r3, #4
 8008584:	d11b      	bne.n	80085be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f06f 0204 	mvn.w	r2, #4
 800858e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f987 	bl	80088b8 <HAL_TIM_IC_CaptureCallback>
 80085aa:	e005      	b.n	80085b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f979 	bl	80088a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f98a 	bl	80088cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d122      	bne.n	8008612 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f003 0308 	and.w	r3, r3, #8
 80085d6:	2b08      	cmp	r3, #8
 80085d8:	d11b      	bne.n	8008612 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f06f 0208 	mvn.w	r2, #8
 80085e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2204      	movs	r2, #4
 80085e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f95d 	bl	80088b8 <HAL_TIM_IC_CaptureCallback>
 80085fe:	e005      	b.n	800860c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f94f 	bl	80088a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f960 	bl	80088cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b10      	cmp	r3, #16
 800861e:	d122      	bne.n	8008666 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b10      	cmp	r3, #16
 800862c:	d11b      	bne.n	8008666 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f06f 0210 	mvn.w	r2, #16
 8008636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2208      	movs	r2, #8
 800863c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f933 	bl	80088b8 <HAL_TIM_IC_CaptureCallback>
 8008652:	e005      	b.n	8008660 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f925 	bl	80088a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f936 	bl	80088cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b01      	cmp	r3, #1
 8008672:	d10e      	bne.n	8008692 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b01      	cmp	r3, #1
 8008680:	d107      	bne.n	8008692 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f06f 0201 	mvn.w	r2, #1
 800868a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7fb fb9b 	bl	8003dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869c:	2b80      	cmp	r3, #128	; 0x80
 800869e:	d10e      	bne.n	80086be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d107      	bne.n	80086be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fbf1 	bl	8008ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d10e      	bne.n	80086ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	d107      	bne.n	80086ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f8fb 	bl	80088e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d10e      	bne.n	8008716 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f003 0320 	and.w	r3, r3, #32
 8008702:	2b20      	cmp	r3, #32
 8008704:	d107      	bne.n	8008716 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f06f 0220 	mvn.w	r2, #32
 800870e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fbbb 	bl	8008e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800873a:	2302      	movs	r3, #2
 800873c:	e0ae      	b.n	800889c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b0c      	cmp	r3, #12
 800874a:	f200 809f 	bhi.w	800888c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800874e:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	08008789 	.word	0x08008789
 8008758:	0800888d 	.word	0x0800888d
 800875c:	0800888d 	.word	0x0800888d
 8008760:	0800888d 	.word	0x0800888d
 8008764:	080087c9 	.word	0x080087c9
 8008768:	0800888d 	.word	0x0800888d
 800876c:	0800888d 	.word	0x0800888d
 8008770:	0800888d 	.word	0x0800888d
 8008774:	0800880b 	.word	0x0800880b
 8008778:	0800888d 	.word	0x0800888d
 800877c:	0800888d 	.word	0x0800888d
 8008780:	0800888d 	.word	0x0800888d
 8008784:	0800884b 	.word	0x0800884b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 f950 	bl	8008a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0208 	orr.w	r2, r2, #8
 80087a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0204 	bic.w	r2, r2, #4
 80087b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6999      	ldr	r1, [r3, #24]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	619a      	str	r2, [r3, #24]
      break;
 80087c6:	e064      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 f9a0 	bl	8008b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6999      	ldr	r1, [r3, #24]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	021a      	lsls	r2, r3, #8
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	619a      	str	r2, [r3, #24]
      break;
 8008808:	e043      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 f9f5 	bl	8008c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0208 	orr.w	r2, r2, #8
 8008824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69da      	ldr	r2, [r3, #28]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0204 	bic.w	r2, r2, #4
 8008834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69d9      	ldr	r1, [r3, #28]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	61da      	str	r2, [r3, #28]
      break;
 8008848:	e023      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fa49 	bl	8008ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69da      	ldr	r2, [r3, #28]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69d9      	ldr	r1, [r3, #28]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	021a      	lsls	r2, r3, #8
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	61da      	str	r2, [r3, #28]
      break;
 800888a:	e002      	b.n	8008892 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
      break;
 8008890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800889a:	7dfb      	ldrb	r3, [r7, #23]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a40      	ldr	r2, [pc, #256]	; (8008a08 <TIM_Base_SetConfig+0x114>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d013      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008912:	d00f      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a3d      	ldr	r2, [pc, #244]	; (8008a0c <TIM_Base_SetConfig+0x118>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d00b      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a3c      	ldr	r2, [pc, #240]	; (8008a10 <TIM_Base_SetConfig+0x11c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d007      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a3b      	ldr	r2, [pc, #236]	; (8008a14 <TIM_Base_SetConfig+0x120>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d003      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a3a      	ldr	r2, [pc, #232]	; (8008a18 <TIM_Base_SetConfig+0x124>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d108      	bne.n	8008946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2f      	ldr	r2, [pc, #188]	; (8008a08 <TIM_Base_SetConfig+0x114>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d02b      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d027      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a2c      	ldr	r2, [pc, #176]	; (8008a0c <TIM_Base_SetConfig+0x118>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d023      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a2b      	ldr	r2, [pc, #172]	; (8008a10 <TIM_Base_SetConfig+0x11c>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01f      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <TIM_Base_SetConfig+0x120>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d01b      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a29      	ldr	r2, [pc, #164]	; (8008a18 <TIM_Base_SetConfig+0x124>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d017      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a28      	ldr	r2, [pc, #160]	; (8008a1c <TIM_Base_SetConfig+0x128>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a27      	ldr	r2, [pc, #156]	; (8008a20 <TIM_Base_SetConfig+0x12c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00f      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a26      	ldr	r2, [pc, #152]	; (8008a24 <TIM_Base_SetConfig+0x130>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00b      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a25      	ldr	r2, [pc, #148]	; (8008a28 <TIM_Base_SetConfig+0x134>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d007      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a24      	ldr	r2, [pc, #144]	; (8008a2c <TIM_Base_SetConfig+0x138>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a23      	ldr	r2, [pc, #140]	; (8008a30 <TIM_Base_SetConfig+0x13c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d108      	bne.n	80089b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <TIM_Base_SetConfig+0x114>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d003      	beq.n	80089ec <TIM_Base_SetConfig+0xf8>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <TIM_Base_SetConfig+0x124>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d103      	bne.n	80089f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	615a      	str	r2, [r3, #20]
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40010000 	.word	0x40010000
 8008a0c:	40000400 	.word	0x40000400
 8008a10:	40000800 	.word	0x40000800
 8008a14:	40000c00 	.word	0x40000c00
 8008a18:	40010400 	.word	0x40010400
 8008a1c:	40014000 	.word	0x40014000
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40014800 	.word	0x40014800
 8008a28:	40001800 	.word	0x40001800
 8008a2c:	40001c00 	.word	0x40001c00
 8008a30:	40002000 	.word	0x40002000

08008a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	f023 0201 	bic.w	r2, r3, #1
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0303 	bic.w	r3, r3, #3
 8008a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f023 0302 	bic.w	r3, r3, #2
 8008a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a20      	ldr	r2, [pc, #128]	; (8008b0c <TIM_OC1_SetConfig+0xd8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <TIM_OC1_SetConfig+0x64>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a1f      	ldr	r2, [pc, #124]	; (8008b10 <TIM_OC1_SetConfig+0xdc>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d10c      	bne.n	8008ab2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f023 0308 	bic.w	r3, r3, #8
 8008a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f023 0304 	bic.w	r3, r3, #4
 8008ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a15      	ldr	r2, [pc, #84]	; (8008b0c <TIM_OC1_SetConfig+0xd8>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d003      	beq.n	8008ac2 <TIM_OC1_SetConfig+0x8e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a14      	ldr	r2, [pc, #80]	; (8008b10 <TIM_OC1_SetConfig+0xdc>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d111      	bne.n	8008ae6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	621a      	str	r2, [r3, #32]
}
 8008b00:	bf00      	nop
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40010400 	.word	0x40010400

08008b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f023 0210 	bic.w	r2, r3, #16
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0320 	bic.w	r3, r3, #32
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a22      	ldr	r2, [pc, #136]	; (8008bf8 <TIM_OC2_SetConfig+0xe4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d003      	beq.n	8008b7c <TIM_OC2_SetConfig+0x68>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <TIM_OC2_SetConfig+0xe8>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d10d      	bne.n	8008b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a17      	ldr	r2, [pc, #92]	; (8008bf8 <TIM_OC2_SetConfig+0xe4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d003      	beq.n	8008ba8 <TIM_OC2_SetConfig+0x94>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <TIM_OC2_SetConfig+0xe8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d113      	bne.n	8008bd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40010000 	.word	0x40010000
 8008bfc:	40010400 	.word	0x40010400

08008c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0303 	bic.w	r3, r3, #3
 8008c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a21      	ldr	r2, [pc, #132]	; (8008ce0 <TIM_OC3_SetConfig+0xe0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_OC3_SetConfig+0x66>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a20      	ldr	r2, [pc, #128]	; (8008ce4 <TIM_OC3_SetConfig+0xe4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d10d      	bne.n	8008c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a16      	ldr	r2, [pc, #88]	; (8008ce0 <TIM_OC3_SetConfig+0xe0>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d003      	beq.n	8008c92 <TIM_OC3_SetConfig+0x92>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a15      	ldr	r2, [pc, #84]	; (8008ce4 <TIM_OC3_SetConfig+0xe4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d113      	bne.n	8008cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	621a      	str	r2, [r3, #32]
}
 8008cd4:	bf00      	nop
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	40010000 	.word	0x40010000
 8008ce4:	40010400 	.word	0x40010400

08008ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	031b      	lsls	r3, r3, #12
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a12      	ldr	r2, [pc, #72]	; (8008d8c <TIM_OC4_SetConfig+0xa4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d003      	beq.n	8008d50 <TIM_OC4_SetConfig+0x68>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a11      	ldr	r2, [pc, #68]	; (8008d90 <TIM_OC4_SetConfig+0xa8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d109      	bne.n	8008d64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	019b      	lsls	r3, r3, #6
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40010000 	.word	0x40010000
 8008d90:	40010400 	.word	0x40010400

08008d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e05a      	b.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a21      	ldr	r2, [pc, #132]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d022      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df8:	d01d      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a1d      	ldr	r2, [pc, #116]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d018      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1b      	ldr	r2, [pc, #108]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d013      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1a      	ldr	r2, [pc, #104]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00e      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d009      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a17      	ldr	r2, [pc, #92]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d004      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d10c      	bne.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40010000 	.word	0x40010000
 8008e74:	40000400 	.word	0x40000400
 8008e78:	40000800 	.word	0x40000800
 8008e7c:	40000c00 	.word	0x40000c00
 8008e80:	40010400 	.word	0x40010400
 8008e84:	40014000 	.word	0x40014000
 8008e88:	40001800 	.word	0x40001800

08008e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e03f      	b.n	8008f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7fb f930 	bl	8004140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2224      	movs	r2, #36	; 0x24
 8008ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f929 	bl	8009150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	695a      	ldr	r2, [r3, #20]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b08a      	sub	sp, #40	; 0x28
 8008f52:	af02      	add	r7, sp, #8
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	603b      	str	r3, [r7, #0]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d17c      	bne.n	8009068 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <HAL_UART_Transmit+0x2c>
 8008f74:	88fb      	ldrh	r3, [r7, #6]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e075      	b.n	800906a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_UART_Transmit+0x3e>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e06e      	b.n	800906a <HAL_UART_Transmit+0x11c>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2221      	movs	r2, #33	; 0x21
 8008f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fa2:	f7fb f9fd 	bl	80043a0 <HAL_GetTick>
 8008fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	88fa      	ldrh	r2, [r7, #6]
 8008fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fbc:	d108      	bne.n	8008fd0 <HAL_UART_Transmit+0x82>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	e003      	b.n	8008fd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008fe0:	e02a      	b.n	8009038 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2180      	movs	r1, #128	; 0x80
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f840 	bl	8009072 <UART_WaitOnFlagUntilTimeout>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e036      	b.n	800906a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	3302      	adds	r3, #2
 8009016:	61bb      	str	r3, [r7, #24]
 8009018:	e007      	b.n	800902a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	781a      	ldrb	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	3301      	adds	r3, #1
 8009028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800902e:	b29b      	uxth	r3, r3
 8009030:	3b01      	subs	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800903c:	b29b      	uxth	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1cf      	bne.n	8008fe2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2200      	movs	r2, #0
 800904a:	2140      	movs	r1, #64	; 0x40
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 f810 	bl	8009072 <UART_WaitOnFlagUntilTimeout>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e006      	b.n	800906a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	e000      	b.n	800906a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009068:	2302      	movs	r3, #2
  }
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b090      	sub	sp, #64	; 0x40
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	4613      	mov	r3, r2
 8009080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009082:	e050      	b.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908a:	d04c      	beq.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800908c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009092:	f7fb f985 	bl	80043a0 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800909e:	429a      	cmp	r2, r3
 80090a0:	d241      	bcs.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	330c      	adds	r3, #12
 80090a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	330c      	adds	r3, #12
 80090c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090c2:	637a      	str	r2, [r7, #52]	; 0x34
 80090c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e5      	bne.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3314      	adds	r3, #20
 80090dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	613b      	str	r3, [r7, #16]
   return(result);
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3314      	adds	r3, #20
 80090f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f6:	623a      	str	r2, [r7, #32]
 80090f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	69f9      	ldr	r1, [r7, #28]
 80090fc:	6a3a      	ldr	r2, [r7, #32]
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	61bb      	str	r3, [r7, #24]
   return(result);
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e5      	bne.n	80090d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2220      	movs	r2, #32
 800910e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2220      	movs	r2, #32
 8009116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e00f      	b.n	8009146 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4013      	ands	r3, r2
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	bf0c      	ite	eq
 8009136:	2301      	moveq	r3, #1
 8009138:	2300      	movne	r3, #0
 800913a:	b2db      	uxtb	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	429a      	cmp	r2, r3
 8009142:	d09f      	beq.n	8009084 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3740      	adds	r7, #64	; 0x40
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009154:	b0c0      	sub	sp, #256	; 0x100
 8009156:	af00      	add	r7, sp, #0
 8009158:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800916c:	68d9      	ldr	r1, [r3, #12]
 800916e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	ea40 0301 	orr.w	r3, r0, r1
 8009178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	431a      	orrs	r2, r3
 8009188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	431a      	orrs	r2, r3
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4313      	orrs	r3, r2
 8009198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091a8:	f021 010c 	bic.w	r1, r1, #12
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091b6:	430b      	orrs	r3, r1
 80091b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ca:	6999      	ldr	r1, [r3, #24]
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	ea40 0301 	orr.w	r3, r0, r1
 80091d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	4b8f      	ldr	r3, [pc, #572]	; (800941c <UART_SetConfig+0x2cc>)
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d005      	beq.n	80091f0 <UART_SetConfig+0xa0>
 80091e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	4b8d      	ldr	r3, [pc, #564]	; (8009420 <UART_SetConfig+0x2d0>)
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d104      	bne.n	80091fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091f0:	f7fe f9a4 	bl	800753c <HAL_RCC_GetPCLK2Freq>
 80091f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091f8:	e003      	b.n	8009202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091fa:	f7fe f98b 	bl	8007514 <HAL_RCC_GetPCLK1Freq>
 80091fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800920c:	f040 810c 	bne.w	8009428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009214:	2200      	movs	r2, #0
 8009216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800921a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800921e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009222:	4622      	mov	r2, r4
 8009224:	462b      	mov	r3, r5
 8009226:	1891      	adds	r1, r2, r2
 8009228:	65b9      	str	r1, [r7, #88]	; 0x58
 800922a:	415b      	adcs	r3, r3
 800922c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800922e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009232:	4621      	mov	r1, r4
 8009234:	eb12 0801 	adds.w	r8, r2, r1
 8009238:	4629      	mov	r1, r5
 800923a:	eb43 0901 	adc.w	r9, r3, r1
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800924a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800924e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009252:	4690      	mov	r8, r2
 8009254:	4699      	mov	r9, r3
 8009256:	4623      	mov	r3, r4
 8009258:	eb18 0303 	adds.w	r3, r8, r3
 800925c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009260:	462b      	mov	r3, r5
 8009262:	eb49 0303 	adc.w	r3, r9, r3
 8009266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800926a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009276:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800927a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800927e:	460b      	mov	r3, r1
 8009280:	18db      	adds	r3, r3, r3
 8009282:	653b      	str	r3, [r7, #80]	; 0x50
 8009284:	4613      	mov	r3, r2
 8009286:	eb42 0303 	adc.w	r3, r2, r3
 800928a:	657b      	str	r3, [r7, #84]	; 0x54
 800928c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009294:	f7f6 ffa0 	bl	80001d8 <__aeabi_uldivmod>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4b61      	ldr	r3, [pc, #388]	; (8009424 <UART_SetConfig+0x2d4>)
 800929e:	fba3 2302 	umull	r2, r3, r3, r2
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	011c      	lsls	r4, r3, #4
 80092a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092b8:	4642      	mov	r2, r8
 80092ba:	464b      	mov	r3, r9
 80092bc:	1891      	adds	r1, r2, r2
 80092be:	64b9      	str	r1, [r7, #72]	; 0x48
 80092c0:	415b      	adcs	r3, r3
 80092c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092c8:	4641      	mov	r1, r8
 80092ca:	eb12 0a01 	adds.w	sl, r2, r1
 80092ce:	4649      	mov	r1, r9
 80092d0:	eb43 0b01 	adc.w	fp, r3, r1
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	f04f 0300 	mov.w	r3, #0
 80092dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092e8:	4692      	mov	sl, r2
 80092ea:	469b      	mov	fp, r3
 80092ec:	4643      	mov	r3, r8
 80092ee:	eb1a 0303 	adds.w	r3, sl, r3
 80092f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092f6:	464b      	mov	r3, r9
 80092f8:	eb4b 0303 	adc.w	r3, fp, r3
 80092fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800930c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009314:	460b      	mov	r3, r1
 8009316:	18db      	adds	r3, r3, r3
 8009318:	643b      	str	r3, [r7, #64]	; 0x40
 800931a:	4613      	mov	r3, r2
 800931c:	eb42 0303 	adc.w	r3, r2, r3
 8009320:	647b      	str	r3, [r7, #68]	; 0x44
 8009322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800932a:	f7f6 ff55 	bl	80001d8 <__aeabi_uldivmod>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4611      	mov	r1, r2
 8009334:	4b3b      	ldr	r3, [pc, #236]	; (8009424 <UART_SetConfig+0x2d4>)
 8009336:	fba3 2301 	umull	r2, r3, r3, r1
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	2264      	movs	r2, #100	; 0x64
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	1acb      	subs	r3, r1, r3
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800934a:	4b36      	ldr	r3, [pc, #216]	; (8009424 <UART_SetConfig+0x2d4>)
 800934c:	fba3 2302 	umull	r2, r3, r3, r2
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009358:	441c      	add	r4, r3
 800935a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800935e:	2200      	movs	r2, #0
 8009360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009364:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800936c:	4642      	mov	r2, r8
 800936e:	464b      	mov	r3, r9
 8009370:	1891      	adds	r1, r2, r2
 8009372:	63b9      	str	r1, [r7, #56]	; 0x38
 8009374:	415b      	adcs	r3, r3
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800937c:	4641      	mov	r1, r8
 800937e:	1851      	adds	r1, r2, r1
 8009380:	6339      	str	r1, [r7, #48]	; 0x30
 8009382:	4649      	mov	r1, r9
 8009384:	414b      	adcs	r3, r1
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009394:	4659      	mov	r1, fp
 8009396:	00cb      	lsls	r3, r1, #3
 8009398:	4651      	mov	r1, sl
 800939a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800939e:	4651      	mov	r1, sl
 80093a0:	00ca      	lsls	r2, r1, #3
 80093a2:	4610      	mov	r0, r2
 80093a4:	4619      	mov	r1, r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	4642      	mov	r2, r8
 80093aa:	189b      	adds	r3, r3, r2
 80093ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093b0:	464b      	mov	r3, r9
 80093b2:	460a      	mov	r2, r1
 80093b4:	eb42 0303 	adc.w	r3, r2, r3
 80093b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093d0:	460b      	mov	r3, r1
 80093d2:	18db      	adds	r3, r3, r3
 80093d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d6:	4613      	mov	r3, r2
 80093d8:	eb42 0303 	adc.w	r3, r2, r3
 80093dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093e6:	f7f6 fef7 	bl	80001d8 <__aeabi_uldivmod>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <UART_SetConfig+0x2d4>)
 80093f0:	fba3 1302 	umull	r1, r3, r3, r2
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	2164      	movs	r1, #100	; 0x64
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	3332      	adds	r3, #50	; 0x32
 8009402:	4a08      	ldr	r2, [pc, #32]	; (8009424 <UART_SetConfig+0x2d4>)
 8009404:	fba2 2303 	umull	r2, r3, r2, r3
 8009408:	095b      	lsrs	r3, r3, #5
 800940a:	f003 0207 	and.w	r2, r3, #7
 800940e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4422      	add	r2, r4
 8009416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009418:	e105      	b.n	8009626 <UART_SetConfig+0x4d6>
 800941a:	bf00      	nop
 800941c:	40011000 	.word	0x40011000
 8009420:	40011400 	.word	0x40011400
 8009424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800942c:	2200      	movs	r2, #0
 800942e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009432:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800943a:	4642      	mov	r2, r8
 800943c:	464b      	mov	r3, r9
 800943e:	1891      	adds	r1, r2, r2
 8009440:	6239      	str	r1, [r7, #32]
 8009442:	415b      	adcs	r3, r3
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
 8009446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800944a:	4641      	mov	r1, r8
 800944c:	1854      	adds	r4, r2, r1
 800944e:	4649      	mov	r1, r9
 8009450:	eb43 0501 	adc.w	r5, r3, r1
 8009454:	f04f 0200 	mov.w	r2, #0
 8009458:	f04f 0300 	mov.w	r3, #0
 800945c:	00eb      	lsls	r3, r5, #3
 800945e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009462:	00e2      	lsls	r2, r4, #3
 8009464:	4614      	mov	r4, r2
 8009466:	461d      	mov	r5, r3
 8009468:	4643      	mov	r3, r8
 800946a:	18e3      	adds	r3, r4, r3
 800946c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009470:	464b      	mov	r3, r9
 8009472:	eb45 0303 	adc.w	r3, r5, r3
 8009476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800947a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800948a:	f04f 0200 	mov.w	r2, #0
 800948e:	f04f 0300 	mov.w	r3, #0
 8009492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009496:	4629      	mov	r1, r5
 8009498:	008b      	lsls	r3, r1, #2
 800949a:	4621      	mov	r1, r4
 800949c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094a0:	4621      	mov	r1, r4
 80094a2:	008a      	lsls	r2, r1, #2
 80094a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094a8:	f7f6 fe96 	bl	80001d8 <__aeabi_uldivmod>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4b60      	ldr	r3, [pc, #384]	; (8009634 <UART_SetConfig+0x4e4>)
 80094b2:	fba3 2302 	umull	r2, r3, r3, r2
 80094b6:	095b      	lsrs	r3, r3, #5
 80094b8:	011c      	lsls	r4, r3, #4
 80094ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094cc:	4642      	mov	r2, r8
 80094ce:	464b      	mov	r3, r9
 80094d0:	1891      	adds	r1, r2, r2
 80094d2:	61b9      	str	r1, [r7, #24]
 80094d4:	415b      	adcs	r3, r3
 80094d6:	61fb      	str	r3, [r7, #28]
 80094d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094dc:	4641      	mov	r1, r8
 80094de:	1851      	adds	r1, r2, r1
 80094e0:	6139      	str	r1, [r7, #16]
 80094e2:	4649      	mov	r1, r9
 80094e4:	414b      	adcs	r3, r1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094f4:	4659      	mov	r1, fp
 80094f6:	00cb      	lsls	r3, r1, #3
 80094f8:	4651      	mov	r1, sl
 80094fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094fe:	4651      	mov	r1, sl
 8009500:	00ca      	lsls	r2, r1, #3
 8009502:	4610      	mov	r0, r2
 8009504:	4619      	mov	r1, r3
 8009506:	4603      	mov	r3, r0
 8009508:	4642      	mov	r2, r8
 800950a:	189b      	adds	r3, r3, r2
 800950c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009510:	464b      	mov	r3, r9
 8009512:	460a      	mov	r2, r1
 8009514:	eb42 0303 	adc.w	r3, r2, r3
 8009518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	67bb      	str	r3, [r7, #120]	; 0x78
 8009526:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009534:	4649      	mov	r1, r9
 8009536:	008b      	lsls	r3, r1, #2
 8009538:	4641      	mov	r1, r8
 800953a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800953e:	4641      	mov	r1, r8
 8009540:	008a      	lsls	r2, r1, #2
 8009542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009546:	f7f6 fe47 	bl	80001d8 <__aeabi_uldivmod>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4b39      	ldr	r3, [pc, #228]	; (8009634 <UART_SetConfig+0x4e4>)
 8009550:	fba3 1302 	umull	r1, r3, r3, r2
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	2164      	movs	r1, #100	; 0x64
 8009558:	fb01 f303 	mul.w	r3, r1, r3
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	3332      	adds	r3, #50	; 0x32
 8009562:	4a34      	ldr	r2, [pc, #208]	; (8009634 <UART_SetConfig+0x4e4>)
 8009564:	fba2 2303 	umull	r2, r3, r2, r3
 8009568:	095b      	lsrs	r3, r3, #5
 800956a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800956e:	441c      	add	r4, r3
 8009570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009574:	2200      	movs	r2, #0
 8009576:	673b      	str	r3, [r7, #112]	; 0x70
 8009578:	677a      	str	r2, [r7, #116]	; 0x74
 800957a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800957e:	4642      	mov	r2, r8
 8009580:	464b      	mov	r3, r9
 8009582:	1891      	adds	r1, r2, r2
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	415b      	adcs	r3, r3
 8009588:	60fb      	str	r3, [r7, #12]
 800958a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800958e:	4641      	mov	r1, r8
 8009590:	1851      	adds	r1, r2, r1
 8009592:	6039      	str	r1, [r7, #0]
 8009594:	4649      	mov	r1, r9
 8009596:	414b      	adcs	r3, r1
 8009598:	607b      	str	r3, [r7, #4]
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	f04f 0300 	mov.w	r3, #0
 80095a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095a6:	4659      	mov	r1, fp
 80095a8:	00cb      	lsls	r3, r1, #3
 80095aa:	4651      	mov	r1, sl
 80095ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095b0:	4651      	mov	r1, sl
 80095b2:	00ca      	lsls	r2, r1, #3
 80095b4:	4610      	mov	r0, r2
 80095b6:	4619      	mov	r1, r3
 80095b8:	4603      	mov	r3, r0
 80095ba:	4642      	mov	r2, r8
 80095bc:	189b      	adds	r3, r3, r2
 80095be:	66bb      	str	r3, [r7, #104]	; 0x68
 80095c0:	464b      	mov	r3, r9
 80095c2:	460a      	mov	r2, r1
 80095c4:	eb42 0303 	adc.w	r3, r2, r3
 80095c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	663b      	str	r3, [r7, #96]	; 0x60
 80095d4:	667a      	str	r2, [r7, #100]	; 0x64
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095e2:	4649      	mov	r1, r9
 80095e4:	008b      	lsls	r3, r1, #2
 80095e6:	4641      	mov	r1, r8
 80095e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095ec:	4641      	mov	r1, r8
 80095ee:	008a      	lsls	r2, r1, #2
 80095f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095f4:	f7f6 fdf0 	bl	80001d8 <__aeabi_uldivmod>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <UART_SetConfig+0x4e4>)
 80095fe:	fba3 1302 	umull	r1, r3, r3, r2
 8009602:	095b      	lsrs	r3, r3, #5
 8009604:	2164      	movs	r1, #100	; 0x64
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	3332      	adds	r3, #50	; 0x32
 8009610:	4a08      	ldr	r2, [pc, #32]	; (8009634 <UART_SetConfig+0x4e4>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4422      	add	r2, r4
 8009624:	609a      	str	r2, [r3, #8]
}
 8009626:	bf00      	nop
 8009628:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800962c:	46bd      	mov	sp, r7
 800962e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009632:	bf00      	nop
 8009634:	51eb851f 	.word	0x51eb851f

08009638 <__libc_init_array>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4d0d      	ldr	r5, [pc, #52]	; (8009670 <__libc_init_array+0x38>)
 800963c:	4c0d      	ldr	r4, [pc, #52]	; (8009674 <__libc_init_array+0x3c>)
 800963e:	1b64      	subs	r4, r4, r5
 8009640:	10a4      	asrs	r4, r4, #2
 8009642:	2600      	movs	r6, #0
 8009644:	42a6      	cmp	r6, r4
 8009646:	d109      	bne.n	800965c <__libc_init_array+0x24>
 8009648:	4d0b      	ldr	r5, [pc, #44]	; (8009678 <__libc_init_array+0x40>)
 800964a:	4c0c      	ldr	r4, [pc, #48]	; (800967c <__libc_init_array+0x44>)
 800964c:	f000 f87c 	bl	8009748 <_init>
 8009650:	1b64      	subs	r4, r4, r5
 8009652:	10a4      	asrs	r4, r4, #2
 8009654:	2600      	movs	r6, #0
 8009656:	42a6      	cmp	r6, r4
 8009658:	d105      	bne.n	8009666 <__libc_init_array+0x2e>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009660:	4798      	blx	r3
 8009662:	3601      	adds	r6, #1
 8009664:	e7ee      	b.n	8009644 <__libc_init_array+0xc>
 8009666:	f855 3b04 	ldr.w	r3, [r5], #4
 800966a:	4798      	blx	r3
 800966c:	3601      	adds	r6, #1
 800966e:	e7f2      	b.n	8009656 <__libc_init_array+0x1e>
 8009670:	0800c3ec 	.word	0x0800c3ec
 8009674:	0800c3ec 	.word	0x0800c3ec
 8009678:	0800c3ec 	.word	0x0800c3ec
 800967c:	0800c3f0 	.word	0x0800c3f0

08009680 <__itoa>:
 8009680:	1e93      	subs	r3, r2, #2
 8009682:	2b22      	cmp	r3, #34	; 0x22
 8009684:	b510      	push	{r4, lr}
 8009686:	460c      	mov	r4, r1
 8009688:	d904      	bls.n	8009694 <__itoa+0x14>
 800968a:	2300      	movs	r3, #0
 800968c:	700b      	strb	r3, [r1, #0]
 800968e:	461c      	mov	r4, r3
 8009690:	4620      	mov	r0, r4
 8009692:	bd10      	pop	{r4, pc}
 8009694:	2a0a      	cmp	r2, #10
 8009696:	d109      	bne.n	80096ac <__itoa+0x2c>
 8009698:	2800      	cmp	r0, #0
 800969a:	da07      	bge.n	80096ac <__itoa+0x2c>
 800969c:	232d      	movs	r3, #45	; 0x2d
 800969e:	700b      	strb	r3, [r1, #0]
 80096a0:	4240      	negs	r0, r0
 80096a2:	2101      	movs	r1, #1
 80096a4:	4421      	add	r1, r4
 80096a6:	f000 f80d 	bl	80096c4 <__utoa>
 80096aa:	e7f1      	b.n	8009690 <__itoa+0x10>
 80096ac:	2100      	movs	r1, #0
 80096ae:	e7f9      	b.n	80096a4 <__itoa+0x24>

080096b0 <itoa>:
 80096b0:	f7ff bfe6 	b.w	8009680 <__itoa>

080096b4 <memset>:
 80096b4:	4402      	add	r2, r0
 80096b6:	4603      	mov	r3, r0
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d100      	bne.n	80096be <memset+0xa>
 80096bc:	4770      	bx	lr
 80096be:	f803 1b01 	strb.w	r1, [r3], #1
 80096c2:	e7f9      	b.n	80096b8 <memset+0x4>

080096c4 <__utoa>:
 80096c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c6:	4c1f      	ldr	r4, [pc, #124]	; (8009744 <__utoa+0x80>)
 80096c8:	b08b      	sub	sp, #44	; 0x2c
 80096ca:	4605      	mov	r5, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	466e      	mov	r6, sp
 80096d0:	f104 0c20 	add.w	ip, r4, #32
 80096d4:	6820      	ldr	r0, [r4, #0]
 80096d6:	6861      	ldr	r1, [r4, #4]
 80096d8:	4637      	mov	r7, r6
 80096da:	c703      	stmia	r7!, {r0, r1}
 80096dc:	3408      	adds	r4, #8
 80096de:	4564      	cmp	r4, ip
 80096e0:	463e      	mov	r6, r7
 80096e2:	d1f7      	bne.n	80096d4 <__utoa+0x10>
 80096e4:	7921      	ldrb	r1, [r4, #4]
 80096e6:	7139      	strb	r1, [r7, #4]
 80096e8:	1e91      	subs	r1, r2, #2
 80096ea:	6820      	ldr	r0, [r4, #0]
 80096ec:	6038      	str	r0, [r7, #0]
 80096ee:	2922      	cmp	r1, #34	; 0x22
 80096f0:	f04f 0100 	mov.w	r1, #0
 80096f4:	d904      	bls.n	8009700 <__utoa+0x3c>
 80096f6:	7019      	strb	r1, [r3, #0]
 80096f8:	460b      	mov	r3, r1
 80096fa:	4618      	mov	r0, r3
 80096fc:	b00b      	add	sp, #44	; 0x2c
 80096fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009700:	1e58      	subs	r0, r3, #1
 8009702:	4684      	mov	ip, r0
 8009704:	fbb5 f7f2 	udiv	r7, r5, r2
 8009708:	fb02 5617 	mls	r6, r2, r7, r5
 800970c:	3628      	adds	r6, #40	; 0x28
 800970e:	446e      	add	r6, sp
 8009710:	460c      	mov	r4, r1
 8009712:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009716:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800971a:	462e      	mov	r6, r5
 800971c:	42b2      	cmp	r2, r6
 800971e:	f101 0101 	add.w	r1, r1, #1
 8009722:	463d      	mov	r5, r7
 8009724:	d9ee      	bls.n	8009704 <__utoa+0x40>
 8009726:	2200      	movs	r2, #0
 8009728:	545a      	strb	r2, [r3, r1]
 800972a:	1919      	adds	r1, r3, r4
 800972c:	1aa5      	subs	r5, r4, r2
 800972e:	42aa      	cmp	r2, r5
 8009730:	dae3      	bge.n	80096fa <__utoa+0x36>
 8009732:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009736:	780e      	ldrb	r6, [r1, #0]
 8009738:	7006      	strb	r6, [r0, #0]
 800973a:	3201      	adds	r2, #1
 800973c:	f801 5901 	strb.w	r5, [r1], #-1
 8009740:	e7f4      	b.n	800972c <__utoa+0x68>
 8009742:	bf00      	nop
 8009744:	0800c3bc 	.word	0x0800c3bc

08009748 <_init>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	bf00      	nop
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr

08009754 <_fini>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	bf00      	nop
 8009758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975a:	bc08      	pop	{r3}
 800975c:	469e      	mov	lr, r3
 800975e:	4770      	bx	lr
