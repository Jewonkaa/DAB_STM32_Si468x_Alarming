
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b18  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000291c  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5bc  0800b5bc  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5bc  0800b5bc  0001b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5c4  0800b5c4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5c4  0800b5c4  0001b5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5c8  0800b5c8  0001b5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800b5cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00001c50  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001c68  20001c68  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c45  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339e  00000000  00000000  00036c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003a030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a0  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237d4  00000000  00000000  0003c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198ca  00000000  00000000  0005fe94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d14a3  00000000  00000000  0007975e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ac01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052f4  00000000  00000000  0014ac54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c88 	.word	0x08008c88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08008c88 	.word	0x08008c88

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004e0:	f000 f914 	bl	800070c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fbc3 	bl	8000c70 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f000 fbc0 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f000 fbcc 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f000 fbc9 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fbc6 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f000 fbc3 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fbc0 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fbae 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fbba 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fbb7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fbb4 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f000 fba2 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f000 fbae 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbab 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f000 fba8 	bl	8000c8e <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f000 fb96 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fba2 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb9f 	bl	8000c8e <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f000 fb8d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fb99 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 fb96 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 fb93 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f000 fb90 	bl	8000c8e <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f000 fb7e 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f000 fb8a 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f000 fb78 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 fb84 	bl	8000c8e <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f000 fb72 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f000 fb7e 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f000 fb6c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f000 fb78 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f000 fb75 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f000 fb63 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f000 fb6f 	bl	8000c8e <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f000 fb5d 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f000 fb69 	bl	8000c8e <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f000 fb57 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f000 fb63 	bl	8000c8e <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f000 fb51 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb5d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fb5a 	bl	8000c8e <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f000 fb48 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f000 fb54 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f000 fb51 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f000 fb4e 	bl	8000c8e <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f000 fb3c 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb48 	bl	8000c8e <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fb36 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fb42 	bl	8000c8e <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f000 fb30 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f000 fb3c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f000 fb39 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fb36 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f000 fb33 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fb30 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 fb2d 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f000 fb2a 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f000 fb27 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f000 fb24 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fb21 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f000 fb1e 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f000 fb1b 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 fb18 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fb15 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fb12 	bl	8000c8e <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f000 fb00 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fb0c 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f000 fb09 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f000 fb06 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 fb03 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f000 fb00 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f000 fafd 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f000 fafa 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f000 faf7 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f000 faf4 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 faf1 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 faee 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f000 faeb 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f000 fae8 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fae5 	bl	8000c8e <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 fae2 	bl	8000c8e <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 fad0 	bl	8000c70 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f000 facd 	bl	8000c70 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006d6:	202c      	movs	r0, #44	; 0x2c
 80006d8:	f000 fad9 	bl	8000c8e <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f83d 	bl	800075c <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80006f2:	1df9      	adds	r1, r7, #7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_SPI_Send+0x20>)
 80006fa:	f006 fa5c 	bl	8006bb6 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20001a4c 	.word	0x20001a4c

0800070c <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	RESET_ON;
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <ILI9341_Reset+0x4c>)
 8000718:	f003 fef2 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800071c:	2032      	movs	r0, #50	; 0x32
 800071e:	f003 f903 	bl	8003928 <HAL_Delay>
	RESET_OFF;
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <ILI9341_Reset+0x4c>)
 800072a:	f003 fee9 	bl	8004500 <HAL_GPIO_WritePin>
	CS_ON;
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <ILI9341_Reset+0x4c>)
 8000736:	f003 fee3 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f003 f8f4 	bl	8003928 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fa95 	bl	8000c70 <ILI9341_Send_Command>
	CS_OFF;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ILI9341_Reset+0x4c>)
 800074e:	f003 fed7 	bl	8004500 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8000766:	2036      	movs	r0, #54	; 0x36
 8000768:	f000 fa82 	bl	8000c70 <ILI9341_Send_Command>
	switch (rotation) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d836      	bhi.n	80007e0 <ILI9341_Set_Rotation+0x84>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <ILI9341_Set_Rotation+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800079f 	.word	0x0800079f
 8000780:	080007b5 	.word	0x080007b5
 8000784:	080007cb 	.word	0x080007cb
	case 0:
		ILI9341_Send_Data(0x48);
 8000788:	2048      	movs	r0, #72	; 0x48
 800078a:	f000 fa80 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	; 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e020      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fa75 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	e015      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007b4:	2088      	movs	r0, #136	; 0x88
 80007b6:	f000 fa6a 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007bc:	22f0      	movs	r2, #240	; 0xf0
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e00a      	b.n	80007e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007ca:	20e8      	movs	r0, #232	; 0xe8
 80007cc:	f000 fa5f 	bl	8000c8e <ILI9341_Send_Data>
		X_SIZE = 320;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <ILI9341_Set_Rotation+0x8c>)
 80007d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <ILI9341_Set_Rotation+0x90>)
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	601a      	str	r2, [r3, #0]
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004

080007f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000804:	f003 fe7c 	bl	8004500 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000810:	f003 fe76 	bl	8004500 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff66 	bl	80006e8 <ILI9341_SPI_Send>

	DC_DATA;
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f003 fe6c 	bl	8004500 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5a 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff54 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff4e 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff49 	bl	80006e8 <ILI9341_SPI_Send>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020c00 	.word	0x40020c00

08000864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_SPI_Send_32>
	t = y1;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4313      	orrs	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	202b      	movs	r0, #43	; 0x2b
 80008a2:	f7ff ffa5 	bl	80007f0 <ILI9341_SPI_Send_32>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffcc 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ILI9341_Fill_Screen+0x40>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <ILI9341_Fill_Screen+0x44>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fb01 f202 	mul.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9e3 	bl	8000cac <ILI9341_Send_Burst>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db31      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db2e      	blt.n	800096e <ILI9341_Draw_Pixel+0x76>
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d229      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d224      	bcs.n	800096e <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <ILI9341_Draw_Pixel+0x80>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	1e5a      	subs	r2, r3, #1
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <ILI9341_Draw_Pixel+0x84>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	f7ff ff96 	bl	8000864 <ILI9341_Set_Address>
	DC_COMMAND;
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000940:	f003 fdde 	bl	8004500 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000944:	202c      	movs	r0, #44	; 0x2c
 8000946:	f7ff fecf 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <ILI9341_Draw_Pixel+0x88>)
 8000952:	f003 fdd5 	bl	8004500 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fec3 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff febe 	bl	80006e8 <ILI9341_SPI_Send>
 800096c:	e000      	b.n	8000970 <ILI9341_Draw_Pixel+0x78>
		return;
 800096e:	bf00      	nop
}
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	40020c00 	.word	0x40020c00

08000984 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff ff63 	bl	8000864 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f977 	bl	8000cac <ILI9341_Send_Burst>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ILI9341_Draw_Empty_Rectangle>:

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af02      	add	r7, sp, #8
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f81c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f814 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f80c 	bl	8000a1c <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f804 	bl	8000a1c <ILI9341_Draw_Line>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	429a      	cmp	r2, r3
 8000a46:	bfcc      	ite	gt
 8000a48:	2301      	movgt	r3, #1
 8000a4a:	2300      	movle	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a62:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	843b      	strh	r3, [r7, #32]
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d90d      	bls.n	8000a96 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	83fb      	strh	r3, [r7, #30]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	83bb      	strh	r3, [r7, #28]
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bfb8      	it	lt
 8000aa8:	425b      	neglt	r3, r3
 8000aaa:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	0fda      	lsrs	r2, r3, #31
 8000ab0:	4413      	add	r3, r2
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d202      	bcs.n	8000ac4 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e023      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000aca:	e01f      	b.n	8000b0c <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0d 	bl	80008f8 <ILI9341_Draw_Pixel>
 8000ade:	e005      	b.n	8000aec <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff06 	bl	80008f8 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da05      	bge.n	8000b06 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]
			err = dx;
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d9db      	bls.n	8000acc <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
	switch (size)
 8000b2e:	7f3b      	ldrb	r3, [r7, #28]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d061      	beq.n	8000bf8 <ILI9341_Draw_String+0xd8>
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	f300 8092 	bgt.w	8000c5e <ILI9341_Draw_String+0x13e>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d028      	beq.n	8000b90 <ILI9341_Draw_String+0x70>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d02b      	beq.n	8000b9a <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000b42:	e08c      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b44:	7f3b      	ldrb	r3, [r7, #28]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d907      	bls.n	8000b66 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b5a:	7f3b      	ldrb	r3, [r7, #28]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4413      	add	r3, r2
 8000b64:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	7f3a      	ldrb	r2, [r7, #28]
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	f000 f95a 	bl	8000e30 <ILI9341_Draw_Char>
			x += size*8-2;
 8000b7c:	7f3b      	ldrb	r3, [r7, #28]
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	3b02      	subs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d5      	bne.n	8000b44 <ILI9341_Draw_String+0x24>
	break;
 8000b98:	e061      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000ba0:	e025      	b.n	8000bee <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000ba2:	7f3b      	ldrb	r3, [r7, #28]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	441a      	add	r2, r3
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d907      	bls.n	8000bc4 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bb8:	7f3b      	ldrb	r3, [r7, #28]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7f3a      	ldrb	r2, [r7, #28]
 8000bce:	9201      	str	r2, [sp, #4]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f000 f92b 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*8;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
			*str++;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1d5      	bne.n	8000ba2 <ILI9341_Draw_String+0x82>
	break;
 8000bf6:	e032      	b.n	8000c5e <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bfe:	e029      	b.n	8000c54 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000c00:	7f3b      	ldrb	r3, [r7, #28]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	441a      	add	r2, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <ILI9341_Draw_String+0x148>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d907      	bls.n	8000c22 <ILI9341_Draw_String+0x102>
				x = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	7f3a      	ldrb	r2, [r7, #28]
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f000 f8fc 	bl	8000e30 <ILI9341_Draw_Char>
			x += hh*10;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <ILI9341_Draw_String+0x14c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d1      	bne.n	8000c00 <ILI9341_Draw_String+0xe0>
	break;
 8000c5c:	bf00      	nop
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000034 	.word	0x20000034

08000c70 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c7a:	f000 fa09 	bl	8001090 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd31 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c98:	f000 f9e8 	bl	800106c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd22 	bl	80006e8 <ILI9341_SPI_Send>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	733b      	strb	r3, [r7, #12]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000ccc:	f003 fc18 	bl	8004500 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	4855      	ldr	r0, [pc, #340]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cd8:	f003 fc12 	bl	8004500 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f7ff fd03 	bl	80006e8 <ILI9341_SPI_Send>
	DC_DATA;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000cea:	f003 fc09 	bl	8004500 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000cee:	7b3b      	ldrb	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fcf9 	bl	80006e8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cf6:	7afb      	ldrb	r3, [r7, #11]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcf5 	bl	80006e8 <ILI9341_SPI_Send>
	len--;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d169      	bne.n	8000de6 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000d12:	e027      	b.n	8000d64 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000d14:	2310      	movs	r3, #16
 8000d16:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fce4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fce0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcdc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd8 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcd4 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcd0 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fccc 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcc8 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1d9      	bne.n	8000d18 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	81fa      	strh	r2, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1d2      	bne.n	8000d14 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	e007      	b.n	8000d8a <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcb3 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fcaf 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	737a      	strb	r2, [r7, #13]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f2      	bne.n	8000d7a <ILI9341_Send_Burst+0xce>
 8000d94:	e03f      	b.n	8000e16 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fca3 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc9f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc9b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc97 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc93 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc8f 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc8b 	bl	80006e8 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc87 	bl	80006e8 <ILI9341_SPI_Send>
			} while (--i);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	81fa      	strh	r2, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1d2      	bne.n	8000d96 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df8:	737b      	strb	r3, [r7, #13]
 8000dfa:	e007      	b.n	8000e0c <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc72 	bl	80006e8 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc6e 	bl	80006e8 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	737a      	strb	r2, [r7, #13]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f2      	bne.n	8000dfc <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <ILI9341_Send_Burst+0x180>)
 8000e1e:	f003 fb6f 	bl	8004500 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	f000 80b2 	beq.w	8000fac <ILI9341_Draw_Char+0x17c>
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	f300 8104 	bgt.w	8001056 <ILI9341_Draw_Char+0x226>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d002      	beq.n	8000e58 <ILI9341_Draw_Char+0x28>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d055      	beq.n	8000f02 <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e56:	e0fe      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	f7ff fcfd 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	487b      	ldr	r0, [pc, #492]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e72:	f003 fb45 	bl	8004500 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e76:	202c      	movs	r0, #44	; 0x2c
 8000e78:	f7ff fc36 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4877      	ldr	r0, [pc, #476]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000e84:	f003 fb3c 	bl	8004500 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e035      	b.n	8000efa <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e02c      	b.n	8000eee <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e98:	3b20      	subs	r3, #32
 8000e9a:	4a72      	ldr	r2, [pc, #456]	; (8001064 <ILI9341_Draw_Char+0x234>)
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	441a      	add	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fc11 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc0c 	bl	80006e8 <ILI9341_SPI_Send>
 8000ed0:	e00a      	b.n	8000ee8 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc05 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc00 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddcf      	ble.n	8000e94 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddc6      	ble.n	8000e8e <ILI9341_Draw_Char+0x5e>
			break;
 8000f00:	e0a9      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3310      	adds	r3, #16
 8000f10:	f7ff fca8 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4851      	ldr	r0, [pc, #324]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f1c:	f003 faf0 	bl	8004500 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f20:	202c      	movs	r0, #44	; 0x2c
 8000f22:	f7ff fbe1 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	484c      	ldr	r0, [pc, #304]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000f2e:	f003 fae7 	bl	8004500 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e035      	b.n	8000fa4 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e02c      	b.n	8000f98 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f42:	3b20      	subs	r3, #32
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	441a      	add	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f1c3 0307 	rsb	r3, r3, #7
 8000f58:	fa42 f303 	asr.w	r3, r2, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbbc 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbb7 	bl	80006e8 <ILI9341_SPI_Send>
 8000f7a:	e00a      	b.n	8000f92 <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fbb0 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fbab 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	ddcf      	ble.n	8000f3e <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	ddc6      	ble.n	8000f38 <ILI9341_Draw_Char+0x108>
		break;
 8000faa:	e054      	b.n	8001056 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3309      	adds	r3, #9
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3310      	adds	r3, #16
 8000fba:	f7ff fc53 	bl	8000864 <ILI9341_Set_Address>
			DC_COMMAND;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fc6:	f003 fa9b 	bl	8004500 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000fca:	202c      	movs	r0, #44	; 0x2c
 8000fcc:	f7ff fb8c 	bl	80006e8 <ILI9341_SPI_Send>
			DC_DATA;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <ILI9341_Draw_Char+0x230>)
 8000fd8:	f003 fa92 	bl	8004500 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e035      	b.n	800104e <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e02c      	b.n	8001042 <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ILI9341_Draw_Char+0x238>)
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	441a      	add	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	fa42 f303 	asr.w	r3, r2, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fb67 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb62 	bl	80006e8 <ILI9341_SPI_Send>
 8001024:	e00a      	b.n	800103c <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb5b 	bl	80006e8 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb56 	bl	80006e8 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddcf      	ble.n	8000fe8 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b1d      	cmp	r3, #29
 8001052:	ddc6      	ble.n	8000fe2 <ILI9341_Draw_Char+0x1b2>
		break;
 8001054:	bf00      	nop
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	08009608 	.word	0x08009608
 8001068:	080098e0 	.word	0x080098e0

0800106c <Before_Sending_Data>:

static void Before_Sending_Data() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <Before_Sending_Data+0x20>)
 8001078:	f003 fa42 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <Before_Sending_Data+0x20>)
 8001084:	f003 fa3c 	bl	8004500 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020c00 	.word	0x40020c00

08001090 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <Before_Sending_Command+0x20>)
 800109c:	f003 fa30 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <Before_Sending_Command+0x20>)
 80010a8:	f003 fa2a 	bl	8004500 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <Si468x_init>:

uint8_t name_temp[];


void Si468x_init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------------------Si468x init---------------------------------", CRLF_SEND);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4832      	ldr	r0, [pc, #200]	; (8001184 <Si468x_init+0xd0>)
 80010bc:	f001 f9e4 	bl	8002488 <send_debug_msg>
	Si468x_reset();
 80010c0:	f000 f866 	bl	8001190 <Si468x_reset>
	Si468x_power_up();
 80010c4:	f000 f880 	bl	80011c8 <Si468x_power_up>
	Si468x_bootloader_load_host();
 80010c8:	f000 f902 	bl	80012d0 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_4_0_5_START_ADDR);
 80010cc:	f44f 1083 	mov.w	r0, #1073152	; 0x106000
 80010d0:	f000 f972 	bl	80013b8 <Si468x_firmware_load_flash>
	Si468x_boot();
 80010d4:	f000 fa10 	bl	80014f8 <Si468x_boot>
	Si468x_get_part_info();
 80010d8:	f000 fbbe 	bl	8001858 <Si468x_get_part_info>
	Si468x_get_sys_state();
 80010dc:	f000 fb38 	bl	8001750 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x00); //włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 80010e0:	2100      	movs	r1, #0
 80010e2:	f241 7012 	movw	r0, #5906	; 0x1712
 80010e6:	f000 fc27 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF889); //dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010ea:	f64f 0189 	movw	r1, #63625	; 0xf889
 80010ee:	f241 7010 	movw	r0, #5904	; 0x1710
 80010f2:	f000 fc21 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01E6); //dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010f6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 80010fa:	f241 7011 	movw	r0, #5905	; 0x1711
 80010fe:	f000 fc1b 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x12); //prog RSSI od kiedy łapie kanał, default 12
 8001102:	2112      	movs	r1, #18
 8001104:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001108:	f000 fc16 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); //określa które featury PAD będą przesyłane do hosta
 800110c:	f244 0105 	movw	r1, #16389	; 0x4005
 8001110:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 8001114:	f000 fc10 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x06); //określa co ile będzie aktualizowana lista usług, x100 ms
 8001118:	2106      	movs	r1, #6
 800111a:	f24b 3001 	movw	r0, #45825	; 0xb301
 800111e:	f000 fc0b 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x06); //określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 8001122:	2106      	movs	r1, #6
 8001124:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001128:	f000 fc06 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);	//tylko soft mute włączone przy slabym sygnale
 800112c:	2101      	movs	r1, #1
 800112e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001132:	f000 fc01 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);	//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001136:	2105      	movs	r1, #5
 8001138:	f24b 5001 	movw	r0, #46337	; 0xb501
 800113c:	f000 fbfc 	bl	8001938 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); //limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001140:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001144:	f24b 5003 	movw	r0, #46339	; 0xb503
 8001148:	f000 fbf6 	bl	8001938 <Si468x_set_property>
	Si468x_dab_get_freq_list(); //odczytujemy z ukladu liste czestotliwosci do tablicy
 800114c:	f000 fce0 	bl	8001b10 <Si468x_dab_get_freq_list>
	Si468x_dab_tune_freq/*(CH_9C);*/ (CH_11B);
 8001150:	201b      	movs	r0, #27
 8001152:	f000 fdad 	bl	8001cb0 <Si468x_dab_tune_freq>
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001156:	f000 fafb 	bl	8001750 <Si468x_get_sys_state>

	while(!valid || !acq)
 800115a:	e004      	b.n	8001166 <Si468x_init+0xb2>
	{
		Si468x_dab_digrad_status();
 800115c:	f000 fe4a 	bl	8001df4 <Si468x_dab_digrad_status>
		HAL_Delay(200);
 8001160:	20c8      	movs	r0, #200	; 0xc8
 8001162:	f002 fbe1 	bl	8003928 <HAL_Delay>
	while(!valid || !acq)
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <Si468x_init+0xd4>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f6      	beq.n	800115c <Si468x_init+0xa8>
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <Si468x_init+0xd8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f2      	beq.n	800115c <Si468x_init+0xa8>
	}
//	HAL_Delay(500);
	Si468x_dab_get_ensemble_info();
 8001176:	f001 f923 	bl	80023c0 <Si468x_dab_get_ensemble_info>
	Si468x_dab_get_digital_service_list();
 800117a:	f000 feff 	bl	8001f7c <Si468x_dab_get_digital_service_list>
//			Si468x_dab_start_digital_service(12966, 4);
//			started = 1;
//		}
//		HAL_Delay(500);
//	}
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	08008ca0 	.word	0x08008ca0
 8001188:	2000191c 	.word	0x2000191c
 800118c:	2000191d 	.word	0x2000191d

08001190 <Si468x_reset>:

void Si468x_reset()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001194:	2101      	movs	r1, #1
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <Si468x_reset+0x30>)
 8001198:	f001 f976 	bl	8002488 <send_debug_msg>
	RESET_PIN_LOW;
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <Si468x_reset+0x34>)
 80011a2:	f003 f9ad 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011a6:	2064      	movs	r0, #100	; 0x64
 80011a8:	f002 fbbe 	bl	8003928 <HAL_Delay>
	RESET_PIN_HIGH;
 80011ac:	2201      	movs	r2, #1
 80011ae:	2120      	movs	r1, #32
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <Si468x_reset+0x34>)
 80011b2:	f003 f9a5 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80011b6:	20c8      	movs	r0, #200	; 0xc8
 80011b8:	f002 fbb6 	bl	8003928 <HAL_Delay>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	08008cf0 	.word	0x08008cf0
 80011c4:	40020800 	.word	0x40020800

080011c8 <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 80011cc:	2101      	movs	r1, #1
 80011ce:	4826      	ldr	r0, [pc, #152]	; (8001268 <Si468x_power_up+0xa0>)
 80011d0:	f001 f95a 	bl	8002488 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Si468x_power_up+0xa4>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <Si468x_power_up+0xa4>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <Si468x_power_up+0xa4>)
 80011e2:	2217      	movs	r2, #23
 80011e4:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <Si468x_power_up+0xa4>)
 80011e8:	2250      	movs	r2, #80	; 0x50
 80011ea:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Si468x_power_up+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F9??				//crystal frequency in MHz [15:8], 19.2 MHz
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <Si468x_power_up+0xa4>)
 80011f4:	22f8      	movs	r2, #248	; 0xf8
 80011f6:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Si468x_power_up+0xa4>)
 80011fa:	2224      	movs	r2, #36	; 0x24
 80011fc:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <Si468x_power_up+0xa4>)
 8001200:	2201      	movs	r2, #1
 8001202:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <Si468x_power_up+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <Si468x_power_up+0xa4>)
 800120c:	2210      	movs	r2, #16
 800120e:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <Si468x_power_up+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <Si468x_power_up+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Si468x_power_up+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <Si468x_power_up+0xa4>)
 8001224:	2228      	movs	r2, #40	; 0x28
 8001226:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <Si468x_power_up+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <Si468x_power_up+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 8001234:	490d      	ldr	r1, [pc, #52]	; (800126c <Si468x_power_up+0xa4>)
 8001236:	2010      	movs	r0, #16
 8001238:	f000 fa52 	bl	80016e0 <Si468x_write_command>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <Si468x_power_up+0xa8>)
 8001242:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f002 fb6f 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800124a:	490a      	ldr	r1, [pc, #40]	; (8001274 <Si468x_power_up+0xac>)
 800124c:	2005      	movs	r0, #5
 800124e:	f000 fa6f 	bl	8001730 <Si468x_read_reply>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <Si468x_power_up+0xa8>)
 8001258:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 800125a:	2101      	movs	r1, #1
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <Si468x_power_up+0xb0>)
 800125e:	f001 f913 	bl	8002488 <send_debug_msg>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	08008d04 	.word	0x08008d04
 800126c:	20000038 	.word	0x20000038
 8001270:	200018f4 	.word	0x200018f4
 8001274:	20001038 	.word	0x20001038
 8001278:	08008d40 	.word	0x08008d40

0800127c <Si468x_load_init>:

void Si468x_load_init()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001280:	2101      	movs	r1, #1
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <Si468x_load_init+0x44>)
 8001284:	f001 f900 	bl	8002488 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <Si468x_load_init+0x48>)
 800128a:	2206      	movs	r2, #6
 800128c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <Si468x_load_init+0x48>)
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001294:	490b      	ldr	r1, [pc, #44]	; (80012c4 <Si468x_load_init+0x48>)
 8001296:	2002      	movs	r0, #2
 8001298:	f000 fa22 	bl	80016e0 <Si468x_write_command>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <Si468x_load_init+0x4c>)
 80012a2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 fb3f 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <Si468x_load_init+0x50>)
 80012ac:	2005      	movs	r0, #5
 80012ae:	f000 fa3f 	bl	8001730 <Si468x_read_reply>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <Si468x_load_init+0x4c>)
 80012b8:	701a      	strb	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	08008d60 	.word	0x08008d60
 80012c4:	20000038 	.word	0x20000038
 80012c8:	200018f4 	.word	0x200018f4
 80012cc:	20001038 	.word	0x20001038

080012d0 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 80012d6:	2101      	movs	r1, #1
 80012d8:	4830      	ldr	r0, [pc, #192]	; (800139c <Si468x_bootloader_load_host+0xcc>)
 80012da:	f001 f8d5 	bl	8002488 <send_debug_msg>
	Si468x_load_init();
 80012de:	f7ff ffcd 	bl	800127c <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 80012e2:	f241 63a4 	movw	r3, #5796	; 0x16a4
 80012e6:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <Si468x_bootloader_load_host+0xd0>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <Si468x_bootloader_load_host+0xd0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <Si468x_bootloader_load_host+0xd0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <Si468x_bootloader_load_host+0xd0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	80fb      	strh	r3, [r7, #6]
 8001304:	e03e      	b.n	8001384 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001306:	2300      	movs	r3, #0
 8001308:	80bb      	strh	r3, [r7, #4]
 800130a:	e014      	b.n	8001336 <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 800130c:	88ba      	ldrh	r2, [r7, #4]
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	4924      	ldr	r1, [pc, #144]	; (80013a4 <Si468x_bootloader_load_host+0xd4>)
 8001312:	fba1 1303 	umull	r1, r3, r1, r3
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	b29b      	uxth	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	fb01 f303 	mul.w	r3, r1, r3
 8001322:	441a      	add	r2, r3
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	3304      	adds	r3, #4
 8001328:	491f      	ldr	r1, [pc, #124]	; (80013a8 <Si468x_bootloader_load_host+0xd8>)
 800132a:	5c89      	ldrb	r1, [r1, r2]
 800132c:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <Si468x_bootloader_load_host+0xd0>)
 800132e:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 8001330:	88bb      	ldrh	r3, [r7, #4]
 8001332:	3301      	adds	r3, #1
 8001334:	80bb      	strh	r3, [r7, #4]
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <Si468x_bootloader_load_host+0xd4>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	88ba      	ldrh	r2, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3e1      	bcc.n	800130c <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <Si468x_bootloader_load_host+0xd4>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	b29b      	uxth	r3, r3
 8001354:	3304      	adds	r3, #4
 8001356:	b29b      	uxth	r3, r3
 8001358:	4911      	ldr	r1, [pc, #68]	; (80013a0 <Si468x_bootloader_load_host+0xd0>)
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f9c0 	bl	80016e0 <Si468x_write_command>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <Si468x_bootloader_load_host+0xdc>)
 8001366:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f002 fadd 	bl	8003928 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800136e:	4910      	ldr	r1, [pc, #64]	; (80013b0 <Si468x_bootloader_load_host+0xe0>)
 8001370:	2005      	movs	r0, #5
 8001372:	f000 f9dd 	bl	8001730 <Si468x_read_reply>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <Si468x_bootloader_load_host+0xdc>)
 800137c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3301      	adds	r3, #1
 8001382:	80fb      	strh	r3, [r7, #6]
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d9bd      	bls.n	8001306 <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800138a:	2101      	movs	r1, #1
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <Si468x_bootloader_load_host+0xe4>)
 800138e:	f001 f87b 	bl	8002488 <send_debug_msg>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08008d78 	.word	0x08008d78
 80013a0:	20000038 	.word	0x20000038
 80013a4:	aaaaaaab 	.word	0xaaaaaaab
 80013a8:	08009ed0 	.word	0x08009ed0
 80013ac:	200018f4 	.word	0x200018f4
 80013b0:	20001038 	.word	0x20001038
 80013b4:	08008db4 	.word	0x08008db4

080013b8 <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 80013c0:	2101      	movs	r1, #1
 80013c2:	4845      	ldr	r0, [pc, #276]	; (80014d8 <Si468x_firmware_load_flash+0x120>)
 80013c4:	f001 f860 	bl	8002488 <send_debug_msg>
	Si468x_load_init();
 80013c8:	f7ff ff58 	bl	800127c <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 80013ce:	2205      	movs	r2, #5
 80013d0:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 80013da:	2200      	movs	r2, #0
 80013dc:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 80013ea:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 80013f4:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 80013fe:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0e1b      	lsrs	r3, r3, #24
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 8001408:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address", CRLF_SEND);
 800140a:	2101      	movs	r1, #1
 800140c:	4834      	ldr	r0, [pc, #208]	; (80014e0 <Si468x_firmware_load_flash+0x128>)
 800140e:	f001 f83b 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 8001414:	791b      	ldrb	r3, [r3, #4]
 8001416:	2210      	movs	r2, #16
 8001418:	4932      	ldr	r1, [pc, #200]	; (80014e4 <Si468x_firmware_load_flash+0x12c>)
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fbe8 	bl	8008bf0 <itoa>
 8001420:	4603      	mov	r3, r0
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f001 f82f 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_SEND);
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 800142c:	795b      	ldrb	r3, [r3, #5]
 800142e:	2210      	movs	r2, #16
 8001430:	492c      	ldr	r1, [pc, #176]	; (80014e4 <Si468x_firmware_load_flash+0x12c>)
 8001432:	4618      	mov	r0, r3
 8001434:	f007 fbdc 	bl	8008bf0 <itoa>
 8001438:	4603      	mov	r3, r0
 800143a:	2101      	movs	r1, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f001 f823 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_SEND);
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 8001444:	799b      	ldrb	r3, [r3, #6]
 8001446:	2210      	movs	r2, #16
 8001448:	4926      	ldr	r1, [pc, #152]	; (80014e4 <Si468x_firmware_load_flash+0x12c>)
 800144a:	4618      	mov	r0, r3
 800144c:	f007 fbd0 	bl	8008bf0 <itoa>
 8001450:	4603      	mov	r3, r0
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f001 f817 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 800145c:	79db      	ldrb	r3, [r3, #7]
 800145e:	2210      	movs	r2, #16
 8001460:	4920      	ldr	r1, [pc, #128]	; (80014e4 <Si468x_firmware_load_flash+0x12c>)
 8001462:	4618      	mov	r0, r3
 8001464:	f007 fbc4 	bl	8008bf0 <itoa>
 8001468:	4603      	mov	r3, r0
 800146a:	2101      	movs	r1, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f001 f80b 	bl	8002488 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 8001474:	2200      	movs	r2, #0
 8001476:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 800147a:	2200      	movs	r2, #0
 800147c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 8001480:	2200      	movs	r2, #0
 8001482:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 8001486:	2200      	movs	r2, #0
 8001488:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800148a:	4914      	ldr	r1, [pc, #80]	; (80014dc <Si468x_firmware_load_flash+0x124>)
 800148c:	200c      	movs	r0, #12
 800148e:	f000 f927 	bl	80016e0 <Si468x_write_command>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <Si468x_firmware_load_flash+0x130>)
 8001498:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800149a:	2001      	movs	r0, #1
 800149c:	f002 fa44 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <Si468x_firmware_load_flash+0x134>)
 80014a2:	2005      	movs	r0, #5
 80014a4:	f000 f944 	bl	8001730 <Si468x_read_reply>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <Si468x_firmware_load_flash+0x130>)
 80014ae:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <Si468x_firmware_load_flash+0x134>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80014bc:	2101      	movs	r1, #1
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <Si468x_firmware_load_flash+0x138>)
 80014c0:	f000 ffe2 	bl	8002488 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 80014c4:	e003      	b.n	80014ce <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 80014c6:	2101      	movs	r1, #1
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <Si468x_firmware_load_flash+0x13c>)
 80014ca:	f000 ffdd 	bl	8002488 <send_debug_msg>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	08008dd4 	.word	0x08008dd4
 80014dc:	20000038 	.word	0x20000038
 80014e0:	08008e10 	.word	0x08008e10
 80014e4:	200018f8 	.word	0x200018f8
 80014e8:	200018f4 	.word	0x200018f4
 80014ec:	20001038 	.word	0x20001038
 80014f0:	08008e20 	.word	0x08008e20
 80014f4:	08008e30 	.word	0x08008e30

080014f8 <Si468x_boot>:

void Si468x_boot()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014fc:	2101      	movs	r1, #1
 80014fe:	4816      	ldr	r0, [pc, #88]	; (8001558 <Si468x_boot+0x60>)
 8001500:	f000 ffc2 	bl	8002488 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <Si468x_boot+0x64>)
 8001506:	2207      	movs	r2, #7
 8001508:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <Si468x_boot+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 8001510:	4912      	ldr	r1, [pc, #72]	; (800155c <Si468x_boot+0x64>)
 8001512:	2002      	movs	r0, #2
 8001514:	f000 f8e4 	bl	80016e0 <Si468x_write_command>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <Si468x_boot+0x68>)
 800151e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001520:	2001      	movs	r0, #1
 8001522:	f002 fa01 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001526:	490f      	ldr	r1, [pc, #60]	; (8001564 <Si468x_boot+0x6c>)
 8001528:	2005      	movs	r0, #5
 800152a:	f000 f901 	bl	8001730 <Si468x_read_reply>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <Si468x_boot+0x68>)
 8001534:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <Si468x_boot+0x6c>)
 8001538:	78db      	ldrb	r3, [r3, #3]
 800153a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800153e:	2bc0      	cmp	r3, #192	; 0xc0
 8001540:	d104      	bne.n	800154c <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 8001542:	2101      	movs	r1, #1
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <Si468x_boot+0x70>)
 8001546:	f000 ff9f 	bl	8002488 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 800154a:	e003      	b.n	8001554 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 800154c:	2101      	movs	r1, #1
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <Si468x_boot+0x74>)
 8001550:	f000 ff9a 	bl	8002488 <send_debug_msg>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	08008e4c 	.word	0x08008e4c
 800155c:	20000038 	.word	0x20000038
 8001560:	200018f4 	.word	0x200018f4
 8001564:	20001038 	.word	0x20001038
 8001568:	08008e88 	.word	0x08008e88
 800156c:	08008ea4 	.word	0x08008ea4

08001570 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800157a:	1df9      	adds	r1, r7, #7
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	2201      	movs	r2, #1
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <Si468x_write_single_byte+0x20>)
 8001582:	f005 fb18 	bl	8006bb6 <HAL_SPI_Transmit>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200019f4 	.word	0x200019f4

08001594 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 800159e:	1df9      	adds	r1, r7, #7
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	2201      	movs	r2, #1
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <Si468x_read_single_byte+0x20>)
 80015a6:	f005 fc42 	bl	8006e2e <HAL_SPI_Receive>
	return data_buffer;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200019f4 	.word	0x200019f4

080015b8 <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t cts_status = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < timeout; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	81fb      	strh	r3, [r7, #14]
 80015ca:	e01c      	b.n	8001606 <Si468x_wait_for_CTS+0x4e>
	{
		Si468x_read_multiple(1, &cts_status);
 80015cc:	f107 030d 	add.w	r3, r7, #13
 80015d0:	4619      	mov	r1, r3
 80015d2:	2001      	movs	r0, #1
 80015d4:	f000 f850 	bl	8001678 <Si468x_read_multiple>

		if((cts_status & 0x80) == 0x80)
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da0c      	bge.n	80015fa <Si468x_wait_for_CTS+0x42>
		{
			if((cts_status & 0x40) == 0x40)
 80015e0:	7b7b      	ldrb	r3, [r7, #13]
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <Si468x_wait_for_CTS+0x3e>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 80015ea:	2101      	movs	r1, #1
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <Si468x_wait_for_CTS+0x68>)
 80015ee:	f000 ff4b 	bl	8002488 <send_debug_msg>
				return COMMAND_ERROR;
 80015f2:	2320      	movs	r3, #32
 80015f4:	e010      	b.n	8001618 <Si468x_wait_for_CTS+0x60>
			}
			return SUCCESS;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e00e      	b.n	8001618 <Si468x_wait_for_CTS+0x60>
		}

		// delay function for 1 ms
		HAL_Delay(1);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f002 f994 	bl	8003928 <HAL_Delay>
	for(i = 0; i < timeout; i++)
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	3301      	adds	r3, #1
 8001604:	81fb      	strh	r3, [r7, #14]
 8001606:	89fa      	ldrh	r2, [r7, #14]
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3de      	bcc.n	80015cc <Si468x_wait_for_CTS+0x14>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 800160e:	2101      	movs	r1, #1
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <Si468x_wait_for_CTS+0x6c>)
 8001612:	f000 ff39 	bl	8002488 <send_debug_msg>
	return TIMEOUT;
 8001616:	2308      	movs	r3, #8
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	08008eb8 	.word	0x08008eb8
 8001624:	08008ee0 	.word	0x08008ee0

08001628 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 8001638:	2200      	movs	r2, #0
 800163a:	2110      	movs	r1, #16
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <Si468x_write_multiple+0x4c>)
 800163e:	f002 ff5f 	bl	8004500 <HAL_GPIO_WritePin>
	while(len--)
 8001642:	e009      	b.n	8001658 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	81fa      	strh	r2, [r7, #14]
 800164a:	461a      	mov	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4413      	add	r3, r2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff8c 	bl	8001570 <Si468x_write_single_byte>
	while(len--)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	1e5a      	subs	r2, r3, #1
 800165c:	80fa      	strh	r2, [r7, #6]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 8001662:	2201      	movs	r2, #1
 8001664:	2110      	movs	r1, #16
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <Si468x_write_multiple+0x4c>)
 8001668:	f002 ff4a 	bl	8004500 <HAL_GPIO_WritePin>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40020800 	.word	0x40020800

08001678 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001688:	2201      	movs	r2, #1
 800168a:	2110      	movs	r1, #16
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <Si468x_read_multiple+0x64>)
 800168e:	f002 ff37 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001692:	2003      	movs	r0, #3
 8001694:	f002 f948 	bl	8003928 <HAL_Delay>
	CS_PIN_LOW;
 8001698:	2200      	movs	r2, #0
 800169a:	2110      	movs	r1, #16
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <Si468x_read_multiple+0x64>)
 800169e:	f002 ff2f 	bl	8004500 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff ff64 	bl	8001570 <Si468x_write_single_byte>
	while(len--)
 80016a8:	e009      	b.n	80016be <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	81fa      	strh	r2, [r7, #14]
 80016b0:	461a      	mov	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	189c      	adds	r4, r3, r2
 80016b6:	f7ff ff6d 	bl	8001594 <Si468x_read_single_byte>
 80016ba:	4603      	mov	r3, r0
 80016bc:	7023      	strb	r3, [r4, #0]
	while(len--)
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	1e5a      	subs	r2, r3, #1
 80016c2:	80fa      	strh	r2, [r7, #6]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 80016c8:	2201      	movs	r2, #1
 80016ca:	2110      	movs	r1, #16
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <Si468x_read_multiple+0x64>)
 80016ce:	f002 ff17 	bl	8004500 <HAL_GPIO_WritePin>
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020800 	.word	0x40020800

080016e0 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f0:	f7ff ff62 	bl	80015b8 <Si468x_wait_for_CTS>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <Si468x_write_command+0x24>
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b20      	cmp	r3, #32
 8001702:	d10a      	bne.n	800171a <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff8d 	bl	8001628 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800170e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001712:	f7ff ff51 	bl	80015b8 <Si468x_wait_for_CTS>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
	}
	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
 800171a:	2101      	movs	r1, #1
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <Si468x_write_command+0x4c>)
 800171e:	f000 feb3 	bl	8002488 <send_debug_msg>
	return ret;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	08008ef0 	.word	0x08008ef0

08001730 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff99 	bl	8001678 <Si468x_read_multiple>
	return SUCCESS;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <Si468x_get_sys_state>:
{
	return dab_spi_rx_buffer[buffer_pos];
}

void Si468x_get_sys_state()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001754:	2101      	movs	r1, #1
 8001756:	4833      	ldr	r0, [pc, #204]	; (8001824 <Si468x_get_sys_state+0xd4>)
 8001758:	f000 fe96 	bl	8002488 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <Si468x_get_sys_state+0xd8>)
 800175e:	2209      	movs	r2, #9
 8001760:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <Si468x_get_sys_state+0xd8>)
 8001764:	2200      	movs	r2, #0
 8001766:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001768:	492f      	ldr	r1, [pc, #188]	; (8001828 <Si468x_get_sys_state+0xd8>)
 800176a:	2002      	movs	r0, #2
 800176c:	f7ff ffb8 	bl	80016e0 <Si468x_write_command>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <Si468x_get_sys_state+0xdc>)
 8001776:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001778:	2001      	movs	r0, #1
 800177a:	f002 f8d5 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800177e:	492c      	ldr	r1, [pc, #176]	; (8001830 <Si468x_get_sys_state+0xe0>)
 8001780:	2005      	movs	r0, #5
 8001782:	f7ff ffd5 	bl	8001730 <Si468x_read_reply>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <Si468x_get_sys_state+0xdc>)
 800178c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 800178e:	2100      	movs	r1, #0
 8001790:	4828      	ldr	r0, [pc, #160]	; (8001834 <Si468x_get_sys_state+0xe4>)
 8001792:	f000 fe79 	bl	8002488 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <Si468x_get_sys_state+0xe0>)
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	2b07      	cmp	r3, #7
 800179c:	d83a      	bhi.n	8001814 <Si468x_get_sys_state+0xc4>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <Si468x_get_sys_state+0x54>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017c5 	.word	0x080017c5
 80017a8:	080017cf 	.word	0x080017cf
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	080017e3 	.word	0x080017e3
 80017b4:	080017ed 	.word	0x080017ed
 80017b8:	080017f7 	.word	0x080017f7
 80017bc:	08001801 	.word	0x08001801
 80017c0:	0800180b 	.word	0x0800180b
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 80017c4:	2101      	movs	r1, #1
 80017c6:	481c      	ldr	r0, [pc, #112]	; (8001838 <Si468x_get_sys_state+0xe8>)
 80017c8:	f000 fe5e 	bl	8002488 <send_debug_msg>
			break;
 80017cc:	e027      	b.n	800181e <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 80017ce:	2101      	movs	r1, #1
 80017d0:	481a      	ldr	r0, [pc, #104]	; (800183c <Si468x_get_sys_state+0xec>)
 80017d2:	f000 fe59 	bl	8002488 <send_debug_msg>
			break;
 80017d6:	e022      	b.n	800181e <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 80017d8:	2101      	movs	r1, #1
 80017da:	4819      	ldr	r0, [pc, #100]	; (8001840 <Si468x_get_sys_state+0xf0>)
 80017dc:	f000 fe54 	bl	8002488 <send_debug_msg>
			break;
 80017e0:	e01d      	b.n	800181e <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 80017e2:	2101      	movs	r1, #1
 80017e4:	4817      	ldr	r0, [pc, #92]	; (8001844 <Si468x_get_sys_state+0xf4>)
 80017e6:	f000 fe4f 	bl	8002488 <send_debug_msg>
			break;
 80017ea:	e018      	b.n	800181e <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017ec:	2101      	movs	r1, #1
 80017ee:	4816      	ldr	r0, [pc, #88]	; (8001848 <Si468x_get_sys_state+0xf8>)
 80017f0:	f000 fe4a 	bl	8002488 <send_debug_msg>
			break;
 80017f4:	e013      	b.n	800181e <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017f6:	2101      	movs	r1, #1
 80017f8:	4814      	ldr	r0, [pc, #80]	; (800184c <Si468x_get_sys_state+0xfc>)
 80017fa:	f000 fe45 	bl	8002488 <send_debug_msg>
			break;
 80017fe:	e00e      	b.n	800181e <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 8001800:	2101      	movs	r1, #1
 8001802:	4813      	ldr	r0, [pc, #76]	; (8001850 <Si468x_get_sys_state+0x100>)
 8001804:	f000 fe40 	bl	8002488 <send_debug_msg>
			break;
 8001808:	e009      	b.n	800181e <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 800180a:	2101      	movs	r1, #1
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <Si468x_get_sys_state+0x104>)
 800180e:	f000 fe3b 	bl	8002488 <send_debug_msg>
			break;
 8001812:	e004      	b.n	800181e <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001814:	2101      	movs	r1, #1
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <Si468x_get_sys_state+0xe8>)
 8001818:	f000 fe36 	bl	8002488 <send_debug_msg>
			break;
 800181c:	bf00      	nop
	}
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	08008f0c 	.word	0x08008f0c
 8001828:	20000038 	.word	0x20000038
 800182c:	200018f4 	.word	0x200018f4
 8001830:	20001038 	.word	0x20001038
 8001834:	08008f48 	.word	0x08008f48
 8001838:	08008f54 	.word	0x08008f54
 800183c:	08008f6c 	.word	0x08008f6c
 8001840:	08008f84 	.word	0x08008f84
 8001844:	08008f9c 	.word	0x08008f9c
 8001848:	08008fc4 	.word	0x08008fc4
 800184c:	08008fe0 	.word	0x08008fe0
 8001850:	08008ff8 	.word	0x08008ff8
 8001854:	08009014 	.word	0x08009014

08001858 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 800185e:	2101      	movs	r1, #1
 8001860:	482d      	ldr	r0, [pc, #180]	; (8001918 <Si468x_get_part_info+0xc0>)
 8001862:	f000 fe11 	bl	8002488 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 8001866:	4b2d      	ldr	r3, [pc, #180]	; (800191c <Si468x_get_part_info+0xc4>)
 8001868:	2208      	movs	r2, #8
 800186a:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <Si468x_get_part_info+0xc4>)
 800186e:	2200      	movs	r2, #0
 8001870:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001872:	492a      	ldr	r1, [pc, #168]	; (800191c <Si468x_get_part_info+0xc4>)
 8001874:	2002      	movs	r0, #2
 8001876:	f7ff ff33 	bl	80016e0 <Si468x_write_command>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <Si468x_get_part_info+0xc8>)
 8001880:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f002 f850 	bl	8003928 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fe71 	bl	8001570 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 800188e:	4925      	ldr	r1, [pc, #148]	; (8001924 <Si468x_get_part_info+0xcc>)
 8001890:	200a      	movs	r0, #10
 8001892:	f7ff ff4d 	bl	8001730 <Si468x_read_reply>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <Si468x_get_part_info+0xc8>)
 800189c:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 800189e:	2100      	movs	r1, #0
 80018a0:	4821      	ldr	r0, [pc, #132]	; (8001928 <Si468x_get_part_info+0xd0>)
 80018a2:	f000 fdf1 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <Si468x_get_part_info+0xcc>)
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	220a      	movs	r2, #10
 80018ac:	491f      	ldr	r1, [pc, #124]	; (800192c <Si468x_get_part_info+0xd4>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f007 f99e 	bl	8008bf0 <itoa>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fde5 	bl	8002488 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 80018be:	2100      	movs	r1, #0
 80018c0:	481b      	ldr	r0, [pc, #108]	; (8001930 <Si468x_get_part_info+0xd8>)
 80018c2:	f000 fde1 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <Si468x_get_part_info+0xcc>)
 80018c8:	795b      	ldrb	r3, [r3, #5]
 80018ca:	220a      	movs	r2, #10
 80018cc:	4917      	ldr	r1, [pc, #92]	; (800192c <Si468x_get_part_info+0xd4>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f007 f98e 	bl	8008bf0 <itoa>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fdd5 	bl	8002488 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 80018de:	2100      	movs	r1, #0
 80018e0:	4814      	ldr	r0, [pc, #80]	; (8001934 <Si468x_get_part_info+0xdc>)
 80018e2:	f000 fdd1 	bl	8002488 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <Si468x_get_part_info+0xcc>)
 80018e8:	7a5b      	ldrb	r3, [r3, #9]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <Si468x_get_part_info+0xcc>)
 80018f2:	7a1b      	ldrb	r3, [r3, #8]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	220a      	movs	r2, #10
 80018fe:	490b      	ldr	r1, [pc, #44]	; (800192c <Si468x_get_part_info+0xd4>)
 8001900:	4618      	mov	r0, r3
 8001902:	f007 f975 	bl	8008bf0 <itoa>
 8001906:	4603      	mov	r3, r0
 8001908:	2101      	movs	r1, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fdbc 	bl	8002488 <send_debug_msg>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	0800902c 	.word	0x0800902c
 800191c:	20000038 	.word	0x20000038
 8001920:	200018f4 	.word	0x200018f4
 8001924:	20001038 	.word	0x20001038
 8001928:	08009068 	.word	0x08009068
 800192c:	200018f8 	.word	0x200018f8
 8001930:	08009078 	.word	0x08009078
 8001934:	08009084 	.word	0x08009084

08001938 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	460a      	mov	r2, r1
 8001942:	80fb      	strh	r3, [r7, #6]
 8001944:	4613      	mov	r3, r2
 8001946:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001948:	2101      	movs	r1, #1
 800194a:	4832      	ldr	r0, [pc, #200]	; (8001a14 <Si468x_set_property+0xdc>)
 800194c:	f000 fd9c 	bl	8002488 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001950:	2100      	movs	r1, #0
 8001952:	4831      	ldr	r0, [pc, #196]	; (8001a18 <Si468x_set_property+0xe0>)
 8001954:	f000 fd98 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	2210      	movs	r2, #16
 800195c:	492f      	ldr	r1, [pc, #188]	; (8001a1c <Si468x_set_property+0xe4>)
 800195e:	4618      	mov	r0, r3
 8001960:	f007 f946 	bl	8008bf0 <itoa>
 8001964:	4603      	mov	r3, r0
 8001966:	2101      	movs	r1, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fd8d 	bl	8002488 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 800196e:	2100      	movs	r1, #0
 8001970:	482b      	ldr	r0, [pc, #172]	; (8001a20 <Si468x_set_property+0xe8>)
 8001972:	f000 fd89 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 8001976:	88bb      	ldrh	r3, [r7, #4]
 8001978:	2210      	movs	r2, #16
 800197a:	4928      	ldr	r1, [pc, #160]	; (8001a1c <Si468x_set_property+0xe4>)
 800197c:	4618      	mov	r0, r3
 800197e:	f007 f937 	bl	8008bf0 <itoa>
 8001982:	4603      	mov	r3, r0
 8001984:	2101      	movs	r1, #1
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fd7e 	bl	8002488 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <Si468x_set_property+0xec>)
 800198e:	2213      	movs	r2, #19
 8001990:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <Si468x_set_property+0xec>)
 8001994:	2200      	movs	r2, #0
 8001996:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <Si468x_set_property+0xec>)
 800199e:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <Si468x_set_property+0xec>)
 80019aa:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <Si468x_set_property+0xec>)
 80019b2:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <Si468x_set_property+0xec>)
 80019be:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 80019c0:	4918      	ldr	r1, [pc, #96]	; (8001a24 <Si468x_set_property+0xec>)
 80019c2:	2006      	movs	r0, #6
 80019c4:	f7ff fe8c 	bl	80016e0 <Si468x_write_command>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <Si468x_set_property+0xf0>)
 80019ce:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f001 ffa9 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80019d6:	4915      	ldr	r1, [pc, #84]	; (8001a2c <Si468x_set_property+0xf4>)
 80019d8:	2005      	movs	r0, #5
 80019da:	f7ff fea9 	bl	8001730 <Si468x_read_reply>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <Si468x_set_property+0xf0>)
 80019e4:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f825 	bl	8001a38 <Si468x_get_property>
 80019ee:	4603      	mov	r3, r0
 80019f0:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019f2:	89fa      	ldrh	r2, [r7, #14]
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d104      	bne.n	8001a04 <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019fa:	2101      	movs	r1, #1
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <Si468x_set_property+0xf8>)
 80019fe:	f000 fd43 	bl	8002488 <send_debug_msg>
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}

}
 8001a02:	e003      	b.n	8001a0c <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 8001a04:	2101      	movs	r1, #1
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <Si468x_set_property+0xfc>)
 8001a08:	f000 fd3e 	bl	8002488 <send_debug_msg>
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	08009094 	.word	0x08009094
 8001a18:	080090d4 	.word	0x080090d4
 8001a1c:	200018f8 	.word	0x200018f8
 8001a20:	080090e4 	.word	0x080090e4
 8001a24:	20000038 	.word	0x20000038
 8001a28:	200018f4 	.word	0x200018f4
 8001a2c:	20001038 	.word	0x20001038
 8001a30:	08009100 	.word	0x08009100
 8001a34:	0800911c 	.word	0x0800911c

08001a38 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 8001a42:	2101      	movs	r1, #1
 8001a44:	482b      	ldr	r0, [pc, #172]	; (8001af4 <Si468x_get_property+0xbc>)
 8001a46:	f000 fd1f 	bl	8002488 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	482a      	ldr	r0, [pc, #168]	; (8001af8 <Si468x_get_property+0xc0>)
 8001a4e:	f000 fd1b 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2210      	movs	r2, #16
 8001a56:	4929      	ldr	r1, [pc, #164]	; (8001afc <Si468x_get_property+0xc4>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f007 f8c9 	bl	8008bf0 <itoa>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fd10 	bl	8002488 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <Si468x_get_property+0xc8>)
 8001a6a:	2214      	movs	r2, #20
 8001a6c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <Si468x_get_property+0xc8>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <Si468x_get_property+0xc8>)
 8001a7a:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <Si468x_get_property+0xc8>)
 8001a86:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a88:	491d      	ldr	r1, [pc, #116]	; (8001b00 <Si468x_get_property+0xc8>)
 8001a8a:	2004      	movs	r0, #4
 8001a8c:	f7ff fe28 	bl	80016e0 <Si468x_write_command>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <Si468x_get_property+0xcc>)
 8001a96:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f001 ff45 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a9e:	491a      	ldr	r1, [pc, #104]	; (8001b08 <Si468x_get_property+0xd0>)
 8001aa0:	2006      	movs	r0, #6
 8001aa2:	f7ff fe45 	bl	8001730 <Si468x_read_reply>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <Si468x_get_property+0xcc>)
 8001aac:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4816      	ldr	r0, [pc, #88]	; (8001b0c <Si468x_get_property+0xd4>)
 8001ab2:	f000 fce9 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <Si468x_get_property+0xd0>)
 8001ab8:	795b      	ldrb	r3, [r3, #5]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <Si468x_get_property+0xd0>)
 8001abe:	7912      	ldrb	r2, [r2, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	490d      	ldr	r1, [pc, #52]	; (8001afc <Si468x_get_property+0xc4>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f007 f892 	bl	8008bf0 <itoa>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fcd9 	bl	8002488 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <Si468x_get_property+0xd0>)
 8001ad8:	795b      	ldrb	r3, [r3, #5]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <Si468x_get_property+0xd0>)
 8001ae2:	791b      	ldrb	r3, [r3, #4]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b29b      	uxth	r3, r3
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	08009134 	.word	0x08009134
 8001af8:	080090d4 	.word	0x080090d4
 8001afc:	200018f8 	.word	0x200018f8
 8001b00:	20000038 	.word	0x20000038
 8001b04:	200018f4 	.word	0x200018f4
 8001b08:	20001038 	.word	0x20001038
 8001b0c:	08009170 	.word	0x08009170

08001b10 <Si468x_dab_get_freq_list>:

void Si468x_dab_get_freq_list()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------Getting Frequency List------------------", CRLF_SEND);
 8001b16:	2101      	movs	r1, #1
 8001b18:	4859      	ldr	r0, [pc, #356]	; (8001c80 <Si468x_dab_get_freq_list+0x170>)
 8001b1a:	f000 fcb5 	bl	8002488 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_DAB_GET_FREQ_LIST;		//Power up command code
 8001b1e:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <Si468x_dab_get_freq_list+0x174>)
 8001b20:	22b9      	movs	r2, #185	; 0xb9
 8001b22:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001b24:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <Si468x_dab_get_freq_list+0x174>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001b2a:	4956      	ldr	r1, [pc, #344]	; (8001c84 <Si468x_dab_get_freq_list+0x174>)
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f7ff fdd7 	bl	80016e0 <Si468x_write_command>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b54      	ldr	r3, [pc, #336]	; (8001c88 <Si468x_dab_get_freq_list+0x178>)
 8001b38:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f001 fef4 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001b40:	4952      	ldr	r1, [pc, #328]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001b42:	2005      	movs	r0, #5
 8001b44:	f7ff fdf4 	bl	8001730 <Si468x_read_reply>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <Si468x_dab_get_freq_list+0x178>)
 8001b4e:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <Si468x_dab_get_freq_list+0x56>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	484c      	ldr	r0, [pc, #304]	; (8001c90 <Si468x_dab_get_freq_list+0x180>)
 8001b60:	f000 fc92 	bl	8002488 <send_debug_msg>
		else
		{
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
		}
	}
}
 8001b64:	e087      	b.n	8001c76 <Si468x_dab_get_freq_list+0x166>
		if(dab_spi_rx_buffer[4])
 8001b66:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001b68:	791b      	ldrb	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d07f      	beq.n	8001c6e <Si468x_dab_get_freq_list+0x15e>
			uint8_t read_offset = 2;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	70fb      	strb	r3, [r7, #3]
			uint8_t freq_cnt = dab_spi_rx_buffer[4];
 8001b72:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001b74:	791b      	ldrb	r3, [r3, #4]
 8001b76:	70bb      	strb	r3, [r7, #2]
			send_debug_msg("Found ", CRLF_NO_SEND);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4846      	ldr	r0, [pc, #280]	; (8001c94 <Si468x_dab_get_freq_list+0x184>)
 8001b7c:	f000 fc84 	bl	8002488 <send_debug_msg>
			send_debug_msg(itoa(freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	220a      	movs	r2, #10
 8001b84:	4944      	ldr	r1, [pc, #272]	; (8001c98 <Si468x_dab_get_freq_list+0x188>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f007 f832 	bl	8008bf0 <itoa>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fc79 	bl	8002488 <send_debug_msg>
			send_debug_msg(" frequencies in list.", CRLF_SEND);
 8001b96:	2101      	movs	r1, #1
 8001b98:	4840      	ldr	r0, [pc, #256]	; (8001c9c <Si468x_dab_get_freq_list+0x18c>)
 8001b9a:	f000 fc75 	bl	8002488 <send_debug_msg>
			status = Si468x_read_reply(3, dab_spi_rx_buffer);
 8001b9e:	493b      	ldr	r1, [pc, #236]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f7ff fdc5 	bl	8001730 <Si468x_read_reply>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <Si468x_dab_get_freq_list+0x178>)
 8001bac:	701a      	strb	r2, [r3, #0]
			status = Si468x_read_reply((freq_cnt + read_offset) * 4, dab_spi_rx_buffer);
 8001bae:	78ba      	ldrb	r2, [r7, #2]
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4934      	ldr	r1, [pc, #208]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fdb7 	bl	8001730 <Si468x_read_reply>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <Si468x_dab_get_freq_list+0x178>)
 8001bc8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < freq_cnt; i++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	e049      	b.n	8001c64 <Si468x_dab_get_freq_list+0x154>
				freq_table[i] = dab_spi_rx_buffer[4 * (i + read_offset)] + (dab_spi_rx_buffer[4 * (i + read_offset) + 1] << 8) + (dab_spi_rx_buffer[4 * (i + read_offset) + 2] << 16) + (dab_spi_rx_buffer[4 * (i + read_offset) + 3] << 24);
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4a2c      	ldr	r2, [pc, #176]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	18ca      	adds	r2, r1, r3
 8001bf0:	78f9      	ldrb	r1, [r7, #3]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	4924      	ldr	r1, [pc, #144]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001bfc:	5ccb      	ldrb	r3, [r1, r3]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	441a      	add	r2, r3
 8001c02:	78f9      	ldrb	r1, [r7, #3]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	440b      	add	r3, r1
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	3303      	adds	r3, #3
 8001c0c:	491f      	ldr	r1, [pc, #124]	; (8001c8c <Si468x_dab_get_freq_list+0x17c>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	4413      	add	r3, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <Si468x_dab_get_freq_list+0x190>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8001c1e:	220a      	movs	r2, #10
 8001c20:	491d      	ldr	r1, [pc, #116]	; (8001c98 <Si468x_dab_get_freq_list+0x188>)
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f006 ffe4 	bl	8008bf0 <itoa>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fc2b 	bl	8002488 <send_debug_msg>
				send_debug_msg(": ", CRLF_NO_SEND);
 8001c32:	2100      	movs	r1, #0
 8001c34:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <Si468x_dab_get_freq_list+0x194>)
 8001c36:	f000 fc27 	bl	8002488 <send_debug_msg>
				send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <Si468x_dab_get_freq_list+0x190>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	220a      	movs	r2, #10
 8001c44:	4914      	ldr	r1, [pc, #80]	; (8001c98 <Si468x_dab_get_freq_list+0x188>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 ffd2 	bl	8008bf0 <itoa>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fc19 	bl	8002488 <send_debug_msg>
				send_debug_msg(" kHz", CRLF_SEND);
 8001c56:	2101      	movs	r1, #1
 8001c58:	4813      	ldr	r0, [pc, #76]	; (8001ca8 <Si468x_dab_get_freq_list+0x198>)
 8001c5a:	f000 fc15 	bl	8002488 <send_debug_msg>
			for(int i = 0; i < freq_cnt; i++)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3301      	adds	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	78bb      	ldrb	r3, [r7, #2]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbb1      	blt.n	8001bd0 <Si468x_dab_get_freq_list+0xc0>
}
 8001c6c:	e003      	b.n	8001c76 <Si468x_dab_get_freq_list+0x166>
			send_debug_msg("Frequency Table is empty.", CRLF_SEND);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	480e      	ldr	r0, [pc, #56]	; (8001cac <Si468x_dab_get_freq_list+0x19c>)
 8001c72:	f000 fc09 	bl	8002488 <send_debug_msg>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	08009184 	.word	0x08009184
 8001c84:	20000038 	.word	0x20000038
 8001c88:	200018f4 	.word	0x200018f4
 8001c8c:	20001038 	.word	0x20001038
 8001c90:	08008e20 	.word	0x08008e20
 8001c94:	080091c0 	.word	0x080091c0
 8001c98:	200018f8 	.word	0x200018f8
 8001c9c:	080091c8 	.word	0x080091c8
 8001ca0:	20001838 	.word	0x20001838
 8001ca4:	080091e0 	.word	0x080091e0
 8001ca8:	080091e4 	.word	0x080091e4
 8001cac:	080091ec 	.word	0x080091ec

08001cb0 <Si468x_dab_tune_freq>:

void Si468x_dab_tune_freq(uint8_t channel)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4841      	ldr	r0, [pc, #260]	; (8001dc4 <Si468x_dab_tune_freq+0x114>)
 8001cbe:	f000 fbe3 	bl	8002488 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4840      	ldr	r0, [pc, #256]	; (8001dc8 <Si468x_dab_tune_freq+0x118>)
 8001cc6:	f000 fbdf 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a3f      	ldr	r2, [pc, #252]	; (8001dcc <Si468x_dab_tune_freq+0x11c>)
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	220a      	movs	r2, #10
 8001cd4:	493e      	ldr	r1, [pc, #248]	; (8001dd0 <Si468x_dab_tune_freq+0x120>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f006 ff8a 	bl	8008bf0 <itoa>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fbd1 	bl	8002488 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	483a      	ldr	r0, [pc, #232]	; (8001dd4 <Si468x_dab_tune_freq+0x124>)
 8001cea:	f000 fbcd 	bl	8002488 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001cee:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <Si468x_dab_tune_freq+0x128>)
 8001cf0:	22b0      	movs	r2, #176	; 0xb0
 8001cf2:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <Si468x_dab_tune_freq+0x128>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001cfa:	4a37      	ldr	r2, [pc, #220]	; (8001dd8 <Si468x_dab_tune_freq+0x128>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <Si468x_dab_tune_freq+0x128>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = 0x00;						//antcap [7:0]
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <Si468x_dab_tune_freq+0x128>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = 0x00;						//antcap [15:8]
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <Si468x_dab_tune_freq+0x128>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001d12:	4931      	ldr	r1, [pc, #196]	; (8001dd8 <Si468x_dab_tune_freq+0x128>)
 8001d14:	2006      	movs	r0, #6
 8001d16:	f7ff fce3 	bl	80016e0 <Si468x_write_command>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <Si468x_dab_tune_freq+0x12c>)
 8001d20:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d22:	492f      	ldr	r1, [pc, #188]	; (8001de0 <Si468x_dab_tune_freq+0x130>)
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff fd03 	bl	8001730 <Si468x_read_reply>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <Si468x_dab_tune_freq+0x12c>)
 8001d30:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <Si468x_dab_tune_freq+0x130>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <Si468x_dab_tune_freq+0x96>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4828      	ldr	r0, [pc, #160]	; (8001de4 <Si468x_dab_tune_freq+0x134>)
 8001d42:	f000 fba1 	bl	8002488 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	81fb      	strh	r3, [r7, #14]
 8001d4a:	e030      	b.n	8001dae <Si468x_dab_tune_freq+0xfe>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001d4c:	4924      	ldr	r1, [pc, #144]	; (8001de0 <Si468x_dab_tune_freq+0x130>)
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7ff fcee 	bl	8001730 <Si468x_read_reply>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <Si468x_dab_tune_freq+0x12c>)
 8001d5a:	701a      	strb	r2, [r3, #0]

		if(dab_spi_rx_buffer[0] & 0x01)
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <Si468x_dab_tune_freq+0x130>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <Si468x_dab_tune_freq+0xe0>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	481f      	ldr	r0, [pc, #124]	; (8001de8 <Si468x_dab_tune_freq+0x138>)
 8001d6c:	f000 fb8c 	bl	8002488 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	220a      	movs	r2, #10
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <Si468x_dab_tune_freq+0x120>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f006 ff3a 	bl	8008bf0 <itoa>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fb81 	bl	8002488 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001d86:	2101      	movs	r1, #1
 8001d88:	4818      	ldr	r0, [pc, #96]	; (8001dec <Si468x_dab_tune_freq+0x13c>)
 8001d8a:	f000 fb7d 	bl	8002488 <send_debug_msg>
			break;
 8001d8e:	e014      	b.n	8001dba <Si468x_dab_tune_freq+0x10a>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001d90:	89fb      	ldrh	r3, [r7, #14]
 8001d92:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d103      	bne.n	8001da2 <Si468x_dab_tune_freq+0xf2>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4814      	ldr	r0, [pc, #80]	; (8001df0 <Si468x_dab_tune_freq+0x140>)
 8001d9e:	f000 fb73 	bl	8002488 <send_debug_msg>
		}
		HAL_Delay(1);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f001 fdc0 	bl	8003928 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001da8:	89fb      	ldrh	r3, [r7, #14]
 8001daa:	3301      	adds	r3, #1
 8001dac:	81fb      	strh	r3, [r7, #14]
 8001dae:	89fb      	ldrh	r3, [r7, #14]
 8001db0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d9c9      	bls.n	8001d4c <Si468x_dab_tune_freq+0x9c>
	}
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	08009208 	.word	0x08009208
 8001dc8:	08009244 	.word	0x08009244
 8001dcc:	20001838 	.word	0x20001838
 8001dd0:	200018f8 	.word	0x200018f8
 8001dd4:	080091e4 	.word	0x080091e4
 8001dd8:	20000038 	.word	0x20000038
 8001ddc:	200018f4 	.word	0x200018f4
 8001de0:	20001038 	.word	0x20001038
 8001de4:	08008e20 	.word	0x08008e20
 8001de8:	08009250 	.word	0x08009250
 8001dec:	0800926c 	.word	0x0800926c
 8001df0:	08009274 	.word	0x08009274

08001df4 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

void Si468x_dab_digrad_status()
{
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af04      	add	r7, sp, #16
	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4852      	ldr	r0, [pc, #328]	; (8001f48 <Si468x_dab_digrad_status+0x154>)
 8001dfe:	f000 fb43 	bl	8002488 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//
 8001e02:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <Si468x_dab_digrad_status+0x158>)
 8001e04:	22b2      	movs	r2, #178	; 0xb2
 8001e06:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001e08:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <Si468x_dab_digrad_status+0x158>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001e0e:	494f      	ldr	r1, [pc, #316]	; (8001f4c <Si468x_dab_digrad_status+0x158>)
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7ff fc65 	bl	80016e0 <Si468x_write_command>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <Si468x_dab_digrad_status+0x15c>)
 8001e1c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f001 fd82 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001e24:	494b      	ldr	r1, [pc, #300]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e26:	2028      	movs	r0, #40	; 0x28
 8001e28:	f7ff fc82 	bl	8001730 <Si468x_read_reply>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <Si468x_dab_digrad_status+0x15c>)
 8001e32:	701a      	strb	r2, [r3, #0]
	rssi = dab_spi_rx_buffer[6];
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e36:	799a      	ldrb	r2, [r3, #6]
 8001e38:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <Si468x_dab_digrad_status+0x164>)
 8001e3a:	701a      	strb	r2, [r3, #0]
	snr = dab_spi_rx_buffer[7];
 8001e3c:	4b45      	ldr	r3, [pc, #276]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e3e:	79da      	ldrb	r2, [r3, #7]
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <Si468x_dab_digrad_status+0x168>)
 8001e42:	701a      	strb	r2, [r3, #0]
	fib_error_count = (dab_spi_rx_buffer[11] << 8) + dab_spi_rx_buffer[10];
 8001e44:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e46:	7adb      	ldrb	r3, [r3, #11]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e50:	7a9b      	ldrb	r3, [r3, #10]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <Si468x_dab_digrad_status+0x16c>)
 8001e5a:	801a      	strh	r2, [r3, #0]
	fic_bit_cnt = dab_spi_rx_buffer[32] + (dab_spi_rx_buffer[33] << 8) + (dab_spi_rx_buffer[34] << 16) + (dab_spi_rx_buffer[35] << 24);
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	441a      	add	r2, r3
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	441a      	add	r2, r3
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e7a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e7e:	061b      	lsls	r3, r3, #24
 8001e80:	4413      	add	r3, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <Si468x_dab_digrad_status+0x170>)
 8001e86:	601a      	str	r2, [r3, #0]
	fic_err_cnt = dab_spi_rx_buffer[36] + (dab_spi_rx_buffer[37] << 8) + (dab_spi_rx_buffer[38] << 16) + (dab_spi_rx_buffer[39] << 24);
 8001e88:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	441a      	add	r2, r3
 8001e9a:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001e9c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	441a      	add	r2, r3
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001ea6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001eaa:	061b      	lsls	r3, r3, #24
 8001eac:	4413      	add	r3, r2
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <Si468x_dab_digrad_status+0x174>)
 8001eb2:	601a      	str	r2, [r3, #0]
	fic_quality = dab_spi_rx_buffer[8];
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001eb6:	7a1a      	ldrb	r2, [r3, #8]
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <Si468x_dab_digrad_status+0x178>)
 8001eba:	701a      	strb	r2, [r3, #0]

	if(dab_spi_rx_buffer[5] & 0x01)
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001ebe:	795b      	ldrb	r3, [r3, #5]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <Si468x_dab_digrad_status+0xdc>
	{
		valid = 1;
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <Si468x_dab_digrad_status+0x17c>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e002      	b.n	8001ed6 <Si468x_dab_digrad_status+0xe2>
	}
	else
	{
		valid = 0;
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <Si468x_dab_digrad_status+0x17c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
	}

	if(dab_spi_rx_buffer[5] & 0x04)
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001ed8:	795b      	ldrb	r3, [r3, #5]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <Si468x_dab_digrad_status+0xf6>
	{
		acq = 1;
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <Si468x_dab_digrad_status+0x180>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e002      	b.n	8001ef0 <Si468x_dab_digrad_status+0xfc>
	}
	else
	{
		acq = 0;
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <Si468x_dab_digrad_status+0x180>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
	}

	if(dab_spi_rx_buffer[4] & 0x04)
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <Si468x_dab_digrad_status+0x160>)
 8001ef2:	791b      	ldrb	r3, [r3, #4]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <Si468x_dab_digrad_status+0x110>
	{
		acq_int = 1;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <Si468x_dab_digrad_status+0x184>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e002      	b.n	8001f0a <Si468x_dab_digrad_status+0x116>
	}
	else
	{
		acq_int = 0;
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <Si468x_dab_digrad_status+0x184>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	}


	DisplayDabStatus(rssi, snr, valid, acq, fic_bit_cnt, fic_err_cnt, fic_quality);
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <Si468x_dab_digrad_status+0x164>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <Si468x_dab_digrad_status+0x168>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461c      	mov	r4, r3
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <Si468x_dab_digrad_status+0x17c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461d      	mov	r5, r3
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <Si468x_dab_digrad_status+0x180>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461e      	mov	r6, r3
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <Si468x_dab_digrad_status+0x170>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <Si468x_dab_digrad_status+0x174>)
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	4910      	ldr	r1, [pc, #64]	; (8001f6c <Si468x_dab_digrad_status+0x178>)
 8001f2c:	7809      	ldrb	r1, [r1, #0]
 8001f2e:	9102      	str	r1, [sp, #8]
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	4633      	mov	r3, r6
 8001f36:	462a      	mov	r2, r5
 8001f38:	4621      	mov	r1, r4
 8001f3a:	f000 fbe5 	bl	8002708 <DisplayDabStatus>
}
 8001f3e:	bf00      	nop
 8001f40:	3704      	adds	r7, #4
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f46:	bf00      	nop
 8001f48:	080092d4 	.word	0x080092d4
 8001f4c:	20000038 	.word	0x20000038
 8001f50:	200018f4 	.word	0x200018f4
 8001f54:	20001038 	.word	0x20001038
 8001f58:	20001918 	.word	0x20001918
 8001f5c:	20001919 	.word	0x20001919
 8001f60:	2000191a 	.word	0x2000191a
 8001f64:	20001920 	.word	0x20001920
 8001f68:	20001924 	.word	0x20001924
 8001f6c:	2000191f 	.word	0x2000191f
 8001f70:	2000191c 	.word	0x2000191c
 8001f74:	2000191d 	.word	0x2000191d
 8001f78:	2000191e 	.word	0x2000191e

08001f7c <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001f82:	2101      	movs	r1, #1
 8001f84:	48be      	ldr	r0, [pc, #760]	; (8002280 <Si468x_dab_get_digital_service_list+0x304>)
 8001f86:	f000 fa7f 	bl	8002488 <send_debug_msg>

	//List management variables
	uint16_t list_size = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	817b      	strh	r3, [r7, #10]
	uint8_t number_of_services = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	727b      	strb	r3, [r7, #9]
	uint8_t services_count = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	77fb      	strb	r3, [r7, #31]
	uint8_t components_count = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	77bb      	strb	r3, [r7, #30]

	//Service management variables
	uint8_t pd_flag = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	723b      	strb	r3, [r7, #8]
	uint32_t srv_ref = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
	uint8_t country_id = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]
	uint8_t p_ty = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	71fb      	strb	r3, [r7, #7]
	uint8_t number_of_components = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	71bb      	strb	r3, [r7, #6]
	uint32_t service_id = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]

	//Component management variables
	uint8_t tm_id = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	717b      	strb	r3, [r7, #5]
	uint8_t sub_ch_id = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	713b      	strb	r3, [r7, #4]

	#define LIST_READ_OFFSET 4 //Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001fba:	4bb2      	ldr	r3, [pc, #712]	; (8002284 <Si468x_dab_get_digital_service_list+0x308>)
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001fc0:	4bb0      	ldr	r3, [pc, #704]	; (8002284 <Si468x_dab_get_digital_service_list+0x308>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001fc6:	49af      	ldr	r1, [pc, #700]	; (8002284 <Si468x_dab_get_digital_service_list+0x308>)
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7ff fb89 	bl	80016e0 <Si468x_write_command>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4bad      	ldr	r3, [pc, #692]	; (8002288 <Si468x_dab_get_digital_service_list+0x30c>)
 8001fd4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8001fd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fda:	f001 fca5 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(400, dab_spi_rx_buffer);
 8001fde:	49ab      	ldr	r1, [pc, #684]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8001fe0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001fe4:	f7ff fba4 	bl	8001730 <Si468x_read_reply>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	4ba6      	ldr	r3, [pc, #664]	; (8002288 <Si468x_dab_get_digital_service_list+0x30c>)
 8001fee:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001ff0:	4ba6      	ldr	r3, [pc, #664]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <Si468x_dab_get_digital_service_list+0x88>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	48a4      	ldr	r0, [pc, #656]	; (8002290 <Si468x_dab_get_digital_service_list+0x314>)
 8002000:	f000 fa42 	bl	8002488 <send_debug_msg>
	}
	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8002004:	4ba1      	ldr	r3, [pc, #644]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	b29a      	uxth	r2, r3
 800200a:	4ba0      	ldr	r3, [pc, #640]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 800200c:	795b      	ldrb	r3, [r3, #5]
 800200e:	b29b      	uxth	r3, r3
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	b29b      	uxth	r3, r3
 8002014:	4413      	add	r3, r2
 8002016:	817b      	strh	r3, [r7, #10]
	send_debug_msg("Services list size: ", CRLF_NO_SEND);
 8002018:	2100      	movs	r1, #0
 800201a:	489e      	ldr	r0, [pc, #632]	; (8002294 <Si468x_dab_get_digital_service_list+0x318>)
 800201c:	f000 fa34 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(list_size, itoa_buffer, 10), CRLF_NO_SEND);
 8002020:	897b      	ldrh	r3, [r7, #10]
 8002022:	220a      	movs	r2, #10
 8002024:	499c      	ldr	r1, [pc, #624]	; (8002298 <Si468x_dab_get_digital_service_list+0x31c>)
 8002026:	4618      	mov	r0, r3
 8002028:	f006 fde2 	bl	8008bf0 <itoa>
 800202c:	4603      	mov	r3, r0
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fa29 	bl	8002488 <send_debug_msg>
	send_debug_msg(" bytes.", CRLF_SEND);
 8002036:	2101      	movs	r1, #1
 8002038:	4898      	ldr	r0, [pc, #608]	; (800229c <Si468x_dab_get_digital_service_list+0x320>)
 800203a:	f000 fa25 	bl	8002488 <send_debug_msg>

	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 800203e:	4b93      	ldr	r3, [pc, #588]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8002040:	7a1b      	ldrb	r3, [r3, #8]
 8002042:	727b      	strb	r3, [r7, #9]
	send_debug_msg("Number of services: ", CRLF_NO_SEND);
 8002044:	2100      	movs	r1, #0
 8002046:	4896      	ldr	r0, [pc, #600]	; (80022a0 <Si468x_dab_get_digital_service_list+0x324>)
 8002048:	f000 fa1e 	bl	8002488 <send_debug_msg>
	send_debug_msg(itoa(number_of_services, itoa_buffer, 10), CRLF_SEND);
 800204c:	7a7b      	ldrb	r3, [r7, #9]
 800204e:	220a      	movs	r2, #10
 8002050:	4991      	ldr	r1, [pc, #580]	; (8002298 <Si468x_dab_get_digital_service_list+0x31c>)
 8002052:	4618      	mov	r0, r3
 8002054:	f006 fdcc 	bl	8008bf0 <itoa>
 8002058:	4603      	mov	r3, r0
 800205a:	2101      	movs	r1, #1
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fa13 	bl	8002488 <send_debug_msg>
//		send_debug_msg(itoa(dab_spi_rx_buffer[i + 12], itoa_buffer, 16), CRLF_SEND);
//	}

	//-----read service info---------------------------------------------------------------------------------------------------------------

	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e192      	b.n	800238e <Si468x_dab_get_digital_service_list+0x412>
	{
		send_debug_msg("Next service----------------------------------------------", CRLF_SEND);
 8002068:	2101      	movs	r1, #1
 800206a:	488e      	ldr	r0, [pc, #568]	; (80022a4 <Si468x_dab_get_digital_service_list+0x328>)
 800206c:	f000 fa0c 	bl	8002488 <send_debug_msg>

		pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8002070:	7ffa      	ldrb	r2, [r7, #31]
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	f103 0210 	add.w	r2, r3, #16
 800207e:	7fbb      	ldrb	r3, [r7, #30]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	4a81      	ldr	r2, [pc, #516]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	723b      	strb	r3, [r7, #8]
		send_debug_msg("PD Flag: ", CRLF_NO_SEND);
 800208e:	2100      	movs	r1, #0
 8002090:	4885      	ldr	r0, [pc, #532]	; (80022a8 <Si468x_dab_get_digital_service_list+0x32c>)
 8002092:	f000 f9f9 	bl	8002488 <send_debug_msg>
		send_debug_msg(itoa(pd_flag, itoa_buffer, 10), CRLF_SEND);
 8002096:	7a3b      	ldrb	r3, [r7, #8]
 8002098:	220a      	movs	r2, #10
 800209a:	497f      	ldr	r1, [pc, #508]	; (8002298 <Si468x_dab_get_digital_service_list+0x31c>)
 800209c:	4618      	mov	r0, r3
 800209e:	f006 fda7 	bl	8008bf0 <itoa>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2101      	movs	r1, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f9ee 	bl	8002488 <send_debug_msg>

		p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 80020ac:	7ffa      	ldrb	r2, [r7, #31]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	f103 0210 	add.w	r2, r3, #16
 80020ba:	7fbb      	ldrb	r3, [r7, #30]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	4a72      	ldr	r2, [pc, #456]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	105b      	asrs	r3, r3, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	71fb      	strb	r3, [r7, #7]
		send_debug_msg("Program Type: ", CRLF_NO_SEND);
 80020ce:	2100      	movs	r1, #0
 80020d0:	4876      	ldr	r0, [pc, #472]	; (80022ac <Si468x_dab_get_digital_service_list+0x330>)
 80020d2:	f000 f9d9 	bl	8002488 <send_debug_msg>
		send_debug_msg(itoa(p_ty, itoa_buffer, 10), CRLF_SEND);
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	220a      	movs	r2, #10
 80020da:	496f      	ldr	r1, [pc, #444]	; (8002298 <Si468x_dab_get_digital_service_list+0x31c>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f006 fd87 	bl	8008bf0 <itoa>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2101      	movs	r1, #1
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f9ce 	bl	8002488 <send_debug_msg>

		number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 80020ec:	7ffa      	ldrb	r2, [r7, #31]
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	f103 0211 	add.w	r2, r3, #17
 80020fa:	7fbb      	ldrb	r3, [r7, #30]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	4a62      	ldr	r2, [pc, #392]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	71bb      	strb	r3, [r7, #6]
		send_debug_msg("Number of Components: ", CRLF_NO_SEND);
 800210a:	2100      	movs	r1, #0
 800210c:	4868      	ldr	r0, [pc, #416]	; (80022b0 <Si468x_dab_get_digital_service_list+0x334>)
 800210e:	f000 f9bb 	bl	8002488 <send_debug_msg>
		send_debug_msg(itoa(number_of_components, itoa_buffer, 10), CRLF_SEND);
 8002112:	79bb      	ldrb	r3, [r7, #6]
 8002114:	220a      	movs	r2, #10
 8002116:	4960      	ldr	r1, [pc, #384]	; (8002298 <Si468x_dab_get_digital_service_list+0x31c>)
 8002118:	4618      	mov	r0, r3
 800211a:	f006 fd69 	bl	8008bf0 <itoa>
 800211e:	4603      	mov	r3, r0
 8002120:	2101      	movs	r1, #1
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f9b0 	bl	8002488 <send_debug_msg>

		switch(pd_flag)
 8002128:	7a3b      	ldrb	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <Si468x_dab_get_digital_service_list+0x1b8>
 800212e:	2b01      	cmp	r3, #1
 8002130:	d033      	beq.n	800219a <Si468x_dab_get_digital_service_list+0x21e>
				country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				service_id = (country_id << 20) + srv_ref;
				break;

			default:
				break;
 8002132:	e073      	b.n	800221c <Si468x_dab_get_digital_service_list+0x2a0>
				srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8002134:	7ffa      	ldrb	r2, [r7, #31]
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	f103 020c 	add.w	r2, r3, #12
 8002142:	7fbb      	ldrb	r3, [r7, #30]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	4a50      	ldr	r2, [pc, #320]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	4619      	mov	r1, r3
 800214e:	7ffa      	ldrb	r2, [r7, #31]
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	f103 020d 	add.w	r2, r3, #13
 800215c:	7fbb      	ldrb	r3, [r7, #30]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	4a4a      	ldr	r2, [pc, #296]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800216c:	440b      	add	r3, r1
 800216e:	61bb      	str	r3, [r7, #24]
				country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002170:	7ffa      	ldrb	r2, [r7, #31]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	f103 020d 	add.w	r2, r3, #13
 800217e:	7fbb      	ldrb	r3, [r7, #30]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	4a41      	ldr	r2, [pc, #260]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	75fb      	strb	r3, [r7, #23]
				service_id = (country_id << 12) + srv_ref;
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	031b      	lsls	r3, r3, #12
 8002190:	461a      	mov	r2, r3
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4413      	add	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
				break;
 8002198:	e040      	b.n	800221c <Si468x_dab_get_digital_service_list+0x2a0>
				srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 800219a:	7ffa      	ldrb	r2, [r7, #31]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	f103 020c 	add.w	r2, r3, #12
 80021a8:	7fbb      	ldrb	r3, [r7, #30]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	4a37      	ldr	r2, [pc, #220]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	4619      	mov	r1, r3
 80021b4:	7ffa      	ldrb	r2, [r7, #31]
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f103 020d 	add.w	r2, r3, #13
 80021c2:	7fbb      	ldrb	r3, [r7, #30]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	4a30      	ldr	r2, [pc, #192]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4419      	add	r1, r3
 80021d0:	7ffa      	ldrb	r2, [r7, #31]
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	f103 020e 	add.w	r2, r3, #14
 80021de:	7fbb      	ldrb	r3, [r7, #30]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021ee:	440b      	add	r3, r1
 80021f0:	61bb      	str	r3, [r7, #24]
				country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 80021f2:	7ffa      	ldrb	r2, [r7, #31]
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	f103 020e 	add.w	r2, r3, #14
 8002200:	7fbb      	ldrb	r3, [r7, #30]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	4a21      	ldr	r2, [pc, #132]	; (800228c <Si468x_dab_get_digital_service_list+0x310>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	75fb      	strb	r3, [r7, #23]
				service_id = (country_id << 20) + srv_ref;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	051b      	lsls	r3, r3, #20
 8002212:	461a      	mov	r2, r3
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
				break;
 800221a:	bf00      	nop
		}
		send_debug_msg("Service Ref: ", CRLF_NO_SEND);
 800221c:	2100      	movs	r1, #0
 800221e:	4825      	ldr	r0, [pc, #148]	; (80022b4 <Si468x_dab_get_digital_service_list+0x338>)
 8002220:	f000 f932 	bl	8002488 <send_debug_msg>
		send_debug_msg(itoa(srv_ref, itoa_buffer, 16), CRLF_SEND);
 8002224:	2210      	movs	r2, #16
 8002226:	491c      	ldr	r1, [pc, #112]	; (8002298 <Si468x_dab_get_digital_service_list+0x31c>)
 8002228:	69b8      	ldr	r0, [r7, #24]
 800222a:	f006 fce1 	bl	8008bf0 <itoa>
 800222e:	4603      	mov	r3, r0
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f928 	bl	8002488 <send_debug_msg>
		send_debug_msg("Country ID: ", CRLF_NO_SEND);
 8002238:	2100      	movs	r1, #0
 800223a:	481f      	ldr	r0, [pc, #124]	; (80022b8 <Si468x_dab_get_digital_service_list+0x33c>)
 800223c:	f000 f924 	bl	8002488 <send_debug_msg>
		send_debug_msg(itoa(country_id, itoa_buffer, 16), CRLF_SEND);
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2210      	movs	r2, #16
 8002244:	4914      	ldr	r1, [pc, #80]	; (8002298 <Si468x_dab_get_digital_service_list+0x31c>)
 8002246:	4618      	mov	r0, r3
 8002248:	f006 fcd2 	bl	8008bf0 <itoa>
 800224c:	4603      	mov	r3, r0
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f000 f919 	bl	8002488 <send_debug_msg>
		send_debug_msg("Service ID: ", CRLF_NO_SEND);
 8002256:	2100      	movs	r1, #0
 8002258:	4818      	ldr	r0, [pc, #96]	; (80022bc <Si468x_dab_get_digital_service_list+0x340>)
 800225a:	f000 f915 	bl	8002488 <send_debug_msg>
		send_debug_msg(itoa(service_id, itoa_buffer, 16), CRLF_SEND);
 800225e:	2210      	movs	r2, #16
 8002260:	490d      	ldr	r1, [pc, #52]	; (8002298 <Si468x_dab_get_digital_service_list+0x31c>)
 8002262:	6938      	ldr	r0, [r7, #16]
 8002264:	f006 fcc4 	bl	8008bf0 <itoa>
 8002268:	4603      	mov	r3, r0
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f90b 	bl	8002488 <send_debug_msg>

		send_debug_msg("Service Name: ", CRLF_NO_SEND);
 8002272:	2100      	movs	r1, #0
 8002274:	4812      	ldr	r0, [pc, #72]	; (80022c0 <Si468x_dab_get_digital_service_list+0x344>)
 8002276:	f000 f907 	bl	8002488 <send_debug_msg>

		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 800227a:	2300      	movs	r3, #0
 800227c:	73bb      	strb	r3, [r7, #14]
 800227e:	e035      	b.n	80022ec <Si468x_dab_get_digital_service_list+0x370>
 8002280:	08009310 	.word	0x08009310
 8002284:	20000038 	.word	0x20000038
 8002288:	200018f4 	.word	0x200018f4
 800228c:	20001038 	.word	0x20001038
 8002290:	08008e20 	.word	0x08008e20
 8002294:	0800934c 	.word	0x0800934c
 8002298:	200018f8 	.word	0x200018f8
 800229c:	08009364 	.word	0x08009364
 80022a0:	0800936c 	.word	0x0800936c
 80022a4:	08009384 	.word	0x08009384
 80022a8:	080093c0 	.word	0x080093c0
 80022ac:	080093cc 	.word	0x080093cc
 80022b0:	080093dc 	.word	0x080093dc
 80022b4:	080093f4 	.word	0x080093f4
 80022b8:	08009404 	.word	0x08009404
 80022bc:	08009414 	.word	0x08009414
 80022c0:	08009424 	.word	0x08009424
		{
			name_temp[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80022c4:	7bbb      	ldrb	r3, [r7, #14]
 80022c6:	f103 0114 	add.w	r1, r3, #20
 80022ca:	7ffa      	ldrb	r2, [r7, #31]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	18ca      	adds	r2, r1, r3
 80022d6:	7fbb      	ldrb	r3, [r7, #30]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	441a      	add	r2, r3
 80022dc:	7bbb      	ldrb	r3, [r7, #14]
 80022de:	4931      	ldr	r1, [pc, #196]	; (80023a4 <Si468x_dab_get_digital_service_list+0x428>)
 80022e0:	5c89      	ldrb	r1, [r1, r2]
 80022e2:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <Si468x_dab_get_digital_service_list+0x42c>)
 80022e4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80022e6:	7bbb      	ldrb	r3, [r7, #14]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73bb      	strb	r3, [r7, #14]
 80022ec:	7bbb      	ldrb	r3, [r7, #14]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	d9e8      	bls.n	80022c4 <Si468x_dab_get_digital_service_list+0x348>
		}
		send_debug_msg((char*)name_temp, CRLF_SEND);
 80022f2:	2101      	movs	r1, #1
 80022f4:	482c      	ldr	r0, [pc, #176]	; (80023a8 <Si468x_dab_get_digital_service_list+0x42c>)
 80022f6:	f000 f8c7 	bl	8002488 <send_debug_msg>
		send_debug_msg("End Of Service Name", CRLF_SEND);
 80022fa:	2101      	movs	r1, #1
 80022fc:	482b      	ldr	r0, [pc, #172]	; (80023ac <Si468x_dab_get_digital_service_list+0x430>)
 80022fe:	f000 f8c3 	bl	8002488 <send_debug_msg>

		//----read component info---------------------------------------------------------------------------------------------

		for(uint8_t component_index = 0; component_index < number_of_components; component_index++)
 8002302:	2300      	movs	r3, #0
 8002304:	737b      	strb	r3, [r7, #13]
 8002306:	e038      	b.n	800237a <Si468x_dab_get_digital_service_list+0x3fe>
		{
			send_debug_msg("Next component--------------------------------", CRLF_SEND);
 8002308:	2101      	movs	r1, #1
 800230a:	4829      	ldr	r0, [pc, #164]	; (80023b0 <Si468x_dab_get_digital_service_list+0x434>)
 800230c:	f000 f8bc 	bl	8002488 <send_debug_msg>

			tm_id = (dab_spi_rx_buffer[33  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002310:	2300      	movs	r3, #0
 8002312:	717b      	strb	r3, [r7, #5]
			send_debug_msg("TM ID : ", CRLF_NO_SEND);
 8002314:	2100      	movs	r1, #0
 8002316:	4827      	ldr	r0, [pc, #156]	; (80023b4 <Si468x_dab_get_digital_service_list+0x438>)
 8002318:	f000 f8b6 	bl	8002488 <send_debug_msg>
			send_debug_msg(itoa(tm_id, itoa_buffer, 10), CRLF_SEND);
 800231c:	797b      	ldrb	r3, [r7, #5]
 800231e:	220a      	movs	r2, #10
 8002320:	4925      	ldr	r1, [pc, #148]	; (80023b8 <Si468x_dab_get_digital_service_list+0x43c>)
 8002322:	4618      	mov	r0, r3
 8002324:	f006 fc64 	bl	8008bf0 <itoa>
 8002328:	4603      	mov	r3, r0
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f8ab 	bl	8002488 <send_debug_msg>

			sub_ch_id = dab_spi_rx_buffer[32  + 24 * services_count + 4 * components_count] & 0x3F;
 8002332:	7ffa      	ldrb	r2, [r7, #31]
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	f103 0220 	add.w	r2, r3, #32
 8002340:	7fbb      	ldrb	r3, [r7, #30]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <Si468x_dab_get_digital_service_list+0x428>)
 8002348:	5cd3      	ldrb	r3, [r2, r3]
 800234a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800234e:	713b      	strb	r3, [r7, #4]
			send_debug_msg("Subchannel ID : ", CRLF_NO_SEND);
 8002350:	2100      	movs	r1, #0
 8002352:	481a      	ldr	r0, [pc, #104]	; (80023bc <Si468x_dab_get_digital_service_list+0x440>)
 8002354:	f000 f898 	bl	8002488 <send_debug_msg>
			send_debug_msg(itoa(sub_ch_id, itoa_buffer, 10), CRLF_SEND);
 8002358:	793b      	ldrb	r3, [r7, #4]
 800235a:	220a      	movs	r2, #10
 800235c:	4916      	ldr	r1, [pc, #88]	; (80023b8 <Si468x_dab_get_digital_service_list+0x43c>)
 800235e:	4618      	mov	r0, r3
 8002360:	f006 fc46 	bl	8008bf0 <itoa>
 8002364:	4603      	mov	r3, r0
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f88d 	bl	8002488 <send_debug_msg>
			components_count++;
 800236e:	7fbb      	ldrb	r3, [r7, #30]
 8002370:	3301      	adds	r3, #1
 8002372:	77bb      	strb	r3, [r7, #30]
		for(uint8_t component_index = 0; component_index < number_of_components; component_index++)
 8002374:	7b7b      	ldrb	r3, [r7, #13]
 8002376:	3301      	adds	r3, #1
 8002378:	737b      	strb	r3, [r7, #13]
 800237a:	7b7a      	ldrb	r2, [r7, #13]
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	429a      	cmp	r2, r3
 8002380:	d3c2      	bcc.n	8002308 <Si468x_dab_get_digital_service_list+0x38c>
		}
		services_count++;
 8002382:	7ffb      	ldrb	r3, [r7, #31]
 8002384:	3301      	adds	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	7a7b      	ldrb	r3, [r7, #9]
 8002392:	429a      	cmp	r2, r3
 8002394:	f4ff ae68 	bcc.w	8002068 <Si468x_dab_get_digital_service_list+0xec>
	}
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20001038 	.word	0x20001038
 80023a8:	20001928 	.word	0x20001928
 80023ac:	08009434 	.word	0x08009434
 80023b0:	08009448 	.word	0x08009448
 80023b4:	08009478 	.word	0x08009478
 80023b8:	200018f8 	.word	0x200018f8
 80023bc:	08009484 	.word	0x08009484

080023c0 <Si468x_dab_get_ensemble_info>:
	}

}

void Si468x_dab_get_ensemble_info()
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
	uint16_t ensemble_id = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	82fb      	strh	r3, [r7, #22]
	uint8_t ensemble_label[16];

	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 80023ca:	2101      	movs	r1, #1
 80023cc:	4826      	ldr	r0, [pc, #152]	; (8002468 <Si468x_dab_get_ensemble_info+0xa8>)
 80023ce:	f000 f85b 	bl	8002488 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <Si468x_dab_get_ensemble_info+0xac>)
 80023d4:	22b4      	movs	r2, #180	; 0xb4
 80023d6:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <Si468x_dab_get_ensemble_info+0xac>)
 80023da:	2200      	movs	r2, #0
 80023dc:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 80023de:	4923      	ldr	r1, [pc, #140]	; (800246c <Si468x_dab_get_ensemble_info+0xac>)
 80023e0:	2002      	movs	r0, #2
 80023e2:	f7ff f97d 	bl	80016e0 <Si468x_write_command>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <Si468x_dab_get_ensemble_info+0xb0>)
 80023ec:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80023ee:	200a      	movs	r0, #10
 80023f0:	f001 fa9a 	bl	8003928 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 80023f4:	491f      	ldr	r1, [pc, #124]	; (8002474 <Si468x_dab_get_ensemble_info+0xb4>)
 80023f6:	2014      	movs	r0, #20
 80023f8:	f7ff f99a 	bl	8001730 <Si468x_read_reply>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <Si468x_dab_get_ensemble_info+0xb0>)
 8002402:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <Si468x_dab_get_ensemble_info+0xb4>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <Si468x_dab_get_ensemble_info+0x5a>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8002410:	2101      	movs	r1, #1
 8002412:	4819      	ldr	r0, [pc, #100]	; (8002478 <Si468x_dab_get_ensemble_info+0xb8>)
 8002414:	f000 f838 	bl	8002488 <send_debug_msg>
		send_debug_msg(itoa(ensemble_id, itoa_buffer, 10), CRLF_SEND);

		send_debug_msg("Label: ", CRLF_NO_SEND);
		send_debug_msg((char*)ensemble_label, CRLF_SEND);
	}
}
 8002418:	e021      	b.n	800245e <Si468x_dab_get_ensemble_info+0x9e>
		ensemble_id = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <Si468x_dab_get_ensemble_info+0xb4>)
 800241c:	795b      	ldrb	r3, [r3, #5]
 800241e:	b29b      	uxth	r3, r3
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b29a      	uxth	r2, r3
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <Si468x_dab_get_ensemble_info+0xb4>)
 8002426:	791b      	ldrb	r3, [r3, #4]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4413      	add	r3, r2
 800242c:	82fb      	strh	r3, [r7, #22]
		send_debug_msg("Ensemble ID: ", CRLF_NO_SEND);
 800242e:	2100      	movs	r1, #0
 8002430:	4812      	ldr	r0, [pc, #72]	; (800247c <Si468x_dab_get_ensemble_info+0xbc>)
 8002432:	f000 f829 	bl	8002488 <send_debug_msg>
		send_debug_msg(itoa(ensemble_id, itoa_buffer, 10), CRLF_SEND);
 8002436:	8afb      	ldrh	r3, [r7, #22]
 8002438:	220a      	movs	r2, #10
 800243a:	4911      	ldr	r1, [pc, #68]	; (8002480 <Si468x_dab_get_ensemble_info+0xc0>)
 800243c:	4618      	mov	r0, r3
 800243e:	f006 fbd7 	bl	8008bf0 <itoa>
 8002442:	4603      	mov	r3, r0
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f81e 	bl	8002488 <send_debug_msg>
		send_debug_msg("Label: ", CRLF_NO_SEND);
 800244c:	2100      	movs	r1, #0
 800244e:	480d      	ldr	r0, [pc, #52]	; (8002484 <Si468x_dab_get_ensemble_info+0xc4>)
 8002450:	f000 f81a 	bl	8002488 <send_debug_msg>
		send_debug_msg((char*)ensemble_label, CRLF_SEND);
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f815 	bl	8002488 <send_debug_msg>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	080094f4 	.word	0x080094f4
 800246c:	20000038 	.word	0x20000038
 8002470:	200018f4 	.word	0x200018f4
 8002474:	20001038 	.word	0x20001038
 8002478:	08008e20 	.word	0x08008e20
 800247c:	08009530 	.word	0x08009530
 8002480:	200018f8 	.word	0x200018f8
 8002484:	08009540 	.word	0x08009540

08002488 <send_debug_msg>:

#include "usart.h"
#include "debug_uart.h"

void send_debug_msg(char* msg, uint8_t is_crlf)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7fd fe97 	bl	80001c8 <strlen>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, msg, msg_size, 100);
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	2364      	movs	r3, #100	; 0x64
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	480a      	ldr	r0, [pc, #40]	; (80024d0 <send_debug_msg+0x48>)
 80024a8:	f005 fff1 	bl	800848e <HAL_UART_Transmit>

	if(is_crlf)
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 80024b2:	f640 230d 	movw	r3, #2573	; 0xa0d
 80024b6:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 80024b8:	f107 010c 	add.w	r1, r7, #12
 80024bc:	2364      	movs	r3, #100	; 0x64
 80024be:	2202      	movs	r2, #2
 80024c0:	4803      	ldr	r0, [pc, #12]	; (80024d0 <send_debug_msg+0x48>)
 80024c2:	f005 ffe4 	bl	800848e <HAL_UART_Transmit>
	}
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20001c20 	.word	0x20001c20

080024d4 <DisplayMainScreen>:
#include "Si468x.h"

char char_buffer[32];

void DisplayMainScreen()
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af02      	add	r7, sp, #8
	/* EKRAN GŁÓWNY NASZEGO URZĄDZENIA Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe f9e8 	bl	80008b0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 5, 25, 315, 235); // żółta obwoluta
 80024e0:	23eb      	movs	r3, #235	; 0xeb
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	f240 133b 	movw	r3, #315	; 0x13b
 80024e8:	2219      	movs	r2, #25
 80024ea:	2105      	movs	r1, #5
 80024ec:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80024f0:	f7fe fa69 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>

    /*Nagłówek */
	ILI9341_Draw_String(65,5,WHITE,BLACK,"DAB+ Radio Receiver",2); //Naglowek radia
 80024f4:	2302      	movs	r3, #2
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	4b7a      	ldr	r3, [pc, #488]	; (80026e4 <DisplayMainScreen+0x210>)
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2300      	movs	r3, #0
 80024fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002502:	2105      	movs	r1, #5
 8002504:	2041      	movs	r0, #65	; 0x41
 8002506:	f7fe fb0b 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 35, 305, 60); //Nazwa radia
 800250a:	233c      	movs	r3, #60	; 0x3c
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	f240 1331 	movw	r3, #305	; 0x131
 8002512:	2223      	movs	r2, #35	; 0x23
 8002514:	210f      	movs	r1, #15
 8002516:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800251a:	f7fe fa54 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 105, 95); //Głośnośc
	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 70, 305, 95); //Napis bufor
 800251e:	235f      	movs	r3, #95	; 0x5f
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	f240 1331 	movw	r3, #305	; 0x131
 8002526:	2246      	movs	r2, #70	; 0x46
 8002528:	210f      	movs	r1, #15
 800252a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800252e:	f7fe fa4a 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	//ILI9341_Draw_Empty_Rectangle(YELLOW, 185, 70, 305, 95); //Pasek bufora


	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 110, 105, 160); //volume-
 8002532:	23a0      	movs	r3, #160	; 0xa0
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2369      	movs	r3, #105	; 0x69
 8002538:	226e      	movs	r2, #110	; 0x6e
 800253a:	210f      	movs	r1, #15
 800253c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002540:	f7fe fa41 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 111, 104, 159); //filled red volume-
 8002544:	239f      	movs	r3, #159	; 0x9f
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2368      	movs	r3, #104	; 0x68
 800254a:	226f      	movs	r2, #111	; 0x6f
 800254c:	2110      	movs	r1, #16
 800254e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002552:	f7fe fa17 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35,127,WHITE,RED,"VOLUME-",2);//Wyswietl stringa
 8002556:	2302      	movs	r3, #2
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <DisplayMainScreen+0x214>)
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002566:	217f      	movs	r1, #127	; 0x7f
 8002568:	2023      	movs	r0, #35	; 0x23
 800256a:	f7fe fad9 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 110, 205, 160); //mute
 800256e:	23a0      	movs	r3, #160	; 0xa0
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	23cd      	movs	r3, #205	; 0xcd
 8002574:	226e      	movs	r2, #110	; 0x6e
 8002576:	2173      	movs	r1, #115	; 0x73
 8002578:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800257c:	f7fe fa23 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 111, 204, 159); //filled red mute
 8002580:	239f      	movs	r3, #159	; 0x9f
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	23cc      	movs	r3, #204	; 0xcc
 8002586:	226f      	movs	r2, #111	; 0x6f
 8002588:	2174      	movs	r1, #116	; 0x74
 800258a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800258e:	f7fe f9f9 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(144,127,WHITE,RED,"MUTE",2);//Wyswietl stringa
 8002592:	2302      	movs	r3, #2
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	4b55      	ldr	r3, [pc, #340]	; (80026ec <DisplayMainScreen+0x218>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800259e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a2:	217f      	movs	r1, #127	; 0x7f
 80025a4:	2090      	movs	r0, #144	; 0x90
 80025a6:	f7fe fabb 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 110, 305, 160); //volume+
 80025aa:	23a0      	movs	r3, #160	; 0xa0
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	f240 1331 	movw	r3, #305	; 0x131
 80025b2:	226e      	movs	r2, #110	; 0x6e
 80025b4:	21d7      	movs	r1, #215	; 0xd7
 80025b6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025ba:	f7fe fa04 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 111, 304, 159);
 80025be:	239f      	movs	r3, #159	; 0x9f
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f44f 7398 	mov.w	r3, #304	; 0x130
 80025c6:	226f      	movs	r2, #111	; 0x6f
 80025c8:	21d8      	movs	r1, #216	; 0xd8
 80025ca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80025ce:	f7fe f9d9 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(234,127,WHITE,RED,"VOLUME+",2);
 80025d2:	2302      	movs	r3, #2
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <DisplayMainScreen+0x21c>)
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e2:	217f      	movs	r1, #127	; 0x7f
 80025e4:	20ea      	movs	r0, #234	; 0xea
 80025e6:	f7fe fa9b 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 15, 170, 105, 220); //MENU
 80025ea:	23dc      	movs	r3, #220	; 0xdc
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2369      	movs	r3, #105	; 0x69
 80025f0:	22aa      	movs	r2, #170	; 0xaa
 80025f2:	210f      	movs	r1, #15
 80025f4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025f8:	f7fe f9e5 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 16, 171, 104, 219);
 80025fc:	23db      	movs	r3, #219	; 0xdb
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2368      	movs	r3, #104	; 0x68
 8002602:	22ab      	movs	r2, #171	; 0xab
 8002604:	2110      	movs	r1, #16
 8002606:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800260a:	f7fe f9bb 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(45,187,WHITE,RED,"MENU",2);//Wyswietl stringa
 800260e:	2302      	movs	r3, #2
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <DisplayMainScreen+0x220>)
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800261a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261e:	21bb      	movs	r1, #187	; 0xbb
 8002620:	202d      	movs	r0, #45	; 0x2d
 8002622:	f7fe fa7d 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 115, 170, 205, 220); //Previous Station
 8002626:	23dc      	movs	r3, #220	; 0xdc
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	23cd      	movs	r3, #205	; 0xcd
 800262c:	22aa      	movs	r2, #170	; 0xaa
 800262e:	2173      	movs	r1, #115	; 0x73
 8002630:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002634:	f7fe f9c7 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 116, 171, 204, 219);
 8002638:	23db      	movs	r3, #219	; 0xdb
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	23cc      	movs	r3, #204	; 0xcc
 800263e:	22ab      	movs	r2, #171	; 0xab
 8002640:	2174      	movs	r1, #116	; 0x74
 8002642:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002646:	f7fe f99d 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(129,180,WHITE,RED,"PREVIOUS",2);//Wyswietl stringa
 800264a:	2302      	movs	r3, #2
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <DisplayMainScreen+0x224>)
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800265a:	21b4      	movs	r1, #180	; 0xb4
 800265c:	2081      	movs	r0, #129	; 0x81
 800265e:	f7fe fa5f 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(132,195,WHITE,RED,"STATION",2);//Wyswietl stringa
 8002662:	2302      	movs	r3, #2
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	4b25      	ldr	r3, [pc, #148]	; (80026fc <DisplayMainScreen+0x228>)
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800266e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002672:	21c3      	movs	r1, #195	; 0xc3
 8002674:	2084      	movs	r0, #132	; 0x84
 8002676:	f7fe fa53 	bl	8000b20 <ILI9341_Draw_String>

	ILI9341_Draw_Empty_Rectangle(YELLOW, 215, 170, 305, 220); //Next station
 800267a:	23dc      	movs	r3, #220	; 0xdc
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	f240 1331 	movw	r3, #305	; 0x131
 8002682:	22aa      	movs	r2, #170	; 0xaa
 8002684:	21d7      	movs	r1, #215	; 0xd7
 8002686:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800268a:	f7fe f99c 	bl	80009c6 <ILI9341_Draw_Empty_Rectangle>
	ILI9341_Draw_Filled_Rectangle(RED, 216, 171, 304, 219);
 800268e:	23db      	movs	r3, #219	; 0xdb
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002696:	22ab      	movs	r2, #171	; 0xab
 8002698:	21d8      	movs	r1, #216	; 0xd8
 800269a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800269e:	f7fe f971 	bl	8000984 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(245,180,WHITE,RED,"NEXT", 2);//Wyswietl stringa
 80026a2:	2302      	movs	r3, #2
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <DisplayMainScreen+0x22c>)
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b2:	21b4      	movs	r1, #180	; 0xb4
 80026b4:	20f5      	movs	r0, #245	; 0xf5
 80026b6:	f7fe fa33 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(232,195,WHITE,RED,"STATION", 2);//Wyswietl stringa
 80026ba:	2302      	movs	r3, #2
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <DisplayMainScreen+0x228>)
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ca:	21c3      	movs	r1, #195	; 0xc3
 80026cc:	20e8      	movs	r0, #232	; 0xe8
 80026ce:	f7fe fa27 	bl	8000b20 <ILI9341_Draw_String>

	CS_OFF;
 80026d2:	2201      	movs	r2, #1
 80026d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d8:	480a      	ldr	r0, [pc, #40]	; (8002704 <DisplayMainScreen+0x230>)
 80026da:	f001 ff11 	bl	8004500 <HAL_GPIO_WritePin>
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	08009548 	.word	0x08009548
 80026e8:	0800955c 	.word	0x0800955c
 80026ec:	08009564 	.word	0x08009564
 80026f0:	0800956c 	.word	0x0800956c
 80026f4:	08009574 	.word	0x08009574
 80026f8:	0800957c 	.word	0x0800957c
 80026fc:	08009588 	.word	0x08009588
 8002700:	08009590 	.word	0x08009590
 8002704:	40020c00 	.word	0x40020c00

08002708 <DisplayDabStatus>:
{
	ILI9341_Draw_String(290, 40, WHITE, BLACK, "E", 2);
}

void DisplayDabStatus(uint8_t rssi_val, uint8_t snr_val, uint8_t valid_val, uint8_t acq_val, uint32_t fic_bit_val, uint32_t fic_err_val, uint8_t fic_quality_val)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af02      	add	r7, sp, #8
 800270e:	4604      	mov	r4, r0
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4623      	mov	r3, r4
 8002718:	71fb      	strb	r3, [r7, #7]
 800271a:	4603      	mov	r3, r0
 800271c:	71bb      	strb	r3, [r7, #6]
 800271e:	460b      	mov	r3, r1
 8002720:	717b      	strb	r3, [r7, #5]
 8002722:	4613      	mov	r3, r2
 8002724:	713b      	strb	r3, [r7, #4]
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Valid:", 2);
 8002726:	2302      	movs	r3, #2
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	4b80      	ldr	r3, [pc, #512]	; (800292c <DisplayDabStatus+0x224>)
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002734:	2128      	movs	r1, #40	; 0x28
 8002736:	2014      	movs	r0, #20
 8002738:	f7fe f9f2 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(69, 40, WHITE, BLACK, itoa(valid_val, char_buffer, 10), 2);
 800273c:	797b      	ldrb	r3, [r7, #5]
 800273e:	220a      	movs	r2, #10
 8002740:	497b      	ldr	r1, [pc, #492]	; (8002930 <DisplayDabStatus+0x228>)
 8002742:	4618      	mov	r0, r3
 8002744:	f006 fa54 	bl	8008bf0 <itoa>
 8002748:	4603      	mov	r3, r0
 800274a:	2202      	movs	r2, #2
 800274c:	9201      	str	r2, [sp, #4]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002756:	2128      	movs	r1, #40	; 0x28
 8002758:	2045      	movs	r0, #69	; 0x45
 800275a:	f7fe f9e1 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(82, 40, WHITE, BLACK, "ACQ:", 2);
 800275e:	2302      	movs	r3, #2
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	4b74      	ldr	r3, [pc, #464]	; (8002934 <DisplayDabStatus+0x22c>)
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2300      	movs	r3, #0
 8002768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276c:	2128      	movs	r1, #40	; 0x28
 800276e:	2052      	movs	r0, #82	; 0x52
 8002770:	f7fe f9d6 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 40, WHITE, BLACK, itoa(acq_val, char_buffer, 10), 2);
 8002774:	793b      	ldrb	r3, [r7, #4]
 8002776:	220a      	movs	r2, #10
 8002778:	496d      	ldr	r1, [pc, #436]	; (8002930 <DisplayDabStatus+0x228>)
 800277a:	4618      	mov	r0, r3
 800277c:	f006 fa38 	bl	8008bf0 <itoa>
 8002780:	4603      	mov	r3, r0
 8002782:	2202      	movs	r2, #2
 8002784:	9201      	str	r2, [sp, #4]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2300      	movs	r3, #0
 800278a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278e:	2128      	movs	r1, #40	; 0x28
 8002790:	2073      	movs	r0, #115	; 0x73
 8002792:	f7fe f9c5 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(131, 40, WHITE, BLACK, "RSSI:" , 2);
 8002796:	2302      	movs	r3, #2
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <DisplayDabStatus+0x230>)
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a4:	2128      	movs	r1, #40	; 0x28
 80027a6:	2083      	movs	r0, #131	; 0x83
 80027a8:	f7fe f9ba 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, "   ", 2);
 80027ac:	2302      	movs	r3, #2
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	4b62      	ldr	r3, [pc, #392]	; (800293c <DisplayDabStatus+0x234>)
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ba:	2128      	movs	r1, #40	; 0x28
 80027bc:	20ac      	movs	r0, #172	; 0xac
 80027be:	f7fe f9af 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(172, 40, WHITE, BLACK, itoa(rssi_val, char_buffer, 10), 2);
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	220a      	movs	r2, #10
 80027c6:	495a      	ldr	r1, [pc, #360]	; (8002930 <DisplayDabStatus+0x228>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f006 fa11 	bl	8008bf0 <itoa>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2202      	movs	r2, #2
 80027d2:	9201      	str	r2, [sp, #4]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2300      	movs	r3, #0
 80027d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027dc:	2128      	movs	r1, #40	; 0x28
 80027de:	20ac      	movs	r0, #172	; 0xac
 80027e0:	f7fe f99e 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 40, WHITE, BLACK, "SNR:" , 2);
 80027e4:	2302      	movs	r3, #2
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	4b55      	ldr	r3, [pc, #340]	; (8002940 <DisplayDabStatus+0x238>)
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2300      	movs	r3, #0
 80027ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f2:	2128      	movs	r1, #40	; 0x28
 80027f4:	20c0      	movs	r0, #192	; 0xc0
 80027f6:	f7fe f993 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, "   ", 2);
 80027fa:	2302      	movs	r3, #2
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	4b4f      	ldr	r3, [pc, #316]	; (800293c <DisplayDabStatus+0x234>)
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2300      	movs	r3, #0
 8002804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002808:	2128      	movs	r1, #40	; 0x28
 800280a:	20e1      	movs	r0, #225	; 0xe1
 800280c:	f7fe f988 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(225, 40, WHITE, BLACK, itoa(snr_val, char_buffer, 10), 2);
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	220a      	movs	r2, #10
 8002814:	4946      	ldr	r1, [pc, #280]	; (8002930 <DisplayDabStatus+0x228>)
 8002816:	4618      	mov	r0, r3
 8002818:	f006 f9ea 	bl	8008bf0 <itoa>
 800281c:	4603      	mov	r3, r0
 800281e:	2202      	movs	r2, #2
 8002820:	9201      	str	r2, [sp, #4]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800282a:	2128      	movs	r1, #40	; 0x28
 800282c:	20e1      	movs	r0, #225	; 0xe1
 800282e:	f7fe f977 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(240, 40, WHITE, BLACK, "FQ:" , 2);
 8002832:	2302      	movs	r3, #2
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	4b43      	ldr	r3, [pc, #268]	; (8002944 <DisplayDabStatus+0x23c>)
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002840:	2128      	movs	r1, #40	; 0x28
 8002842:	20f0      	movs	r0, #240	; 0xf0
 8002844:	f7fe f96c 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, "   ", 2);
 8002848:	2302      	movs	r3, #2
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	4b3b      	ldr	r3, [pc, #236]	; (800293c <DisplayDabStatus+0x234>)
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2300      	movs	r3, #0
 8002852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002856:	2128      	movs	r1, #40	; 0x28
 8002858:	f44f 7088 	mov.w	r0, #272	; 0x110
 800285c:	f7fe f960 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(272, 40, WHITE, BLACK, itoa(fic_quality_val, char_buffer, 10), 2);
 8002860:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002864:	220a      	movs	r2, #10
 8002866:	4932      	ldr	r1, [pc, #200]	; (8002930 <DisplayDabStatus+0x228>)
 8002868:	4618      	mov	r0, r3
 800286a:	f006 f9c1 	bl	8008bf0 <itoa>
 800286e:	4603      	mov	r3, r0
 8002870:	2202      	movs	r2, #2
 8002872:	9201      	str	r2, [sp, #4]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287c:	2128      	movs	r1, #40	; 0x28
 800287e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8002882:	f7fe f94d 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(20, 75, WHITE, BLACK, "FIC Er:", 2);
 8002886:	2302      	movs	r3, #2
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <DisplayDabStatus+0x240>)
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2300      	movs	r3, #0
 8002890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002894:	214b      	movs	r1, #75	; 0x4b
 8002896:	2014      	movs	r0, #20
 8002898:	f7fe f942 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 75, WHITE, BLACK, "          ", 2);
 800289c:	2302      	movs	r3, #2
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <DisplayDabStatus+0x244>)
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028aa:	214b      	movs	r1, #75	; 0x4b
 80028ac:	2050      	movs	r0, #80	; 0x50
 80028ae:	f7fe f937 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 75, WHITE, BLACK, itoa(fic_err_val, char_buffer, 10), 2);
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	220a      	movs	r2, #10
 80028b6:	491e      	ldr	r1, [pc, #120]	; (8002930 <DisplayDabStatus+0x228>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f006 f999 	bl	8008bf0 <itoa>
 80028be:	4603      	mov	r3, r0
 80028c0:	2202      	movs	r2, #2
 80028c2:	9201      	str	r2, [sp, #4]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2300      	movs	r3, #0
 80028c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028cc:	214b      	movs	r1, #75	; 0x4b
 80028ce:	2050      	movs	r0, #80	; 0x50
 80028d0:	f7fe f926 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(150, 75, WHITE, BLACK, "FIC Tot:", 2);
 80028d4:	2302      	movs	r3, #2
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <DisplayDabStatus+0x248>)
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2300      	movs	r3, #0
 80028de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e2:	214b      	movs	r1, #75	; 0x4b
 80028e4:	2096      	movs	r0, #150	; 0x96
 80028e6:	f7fe f91b 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, "          ", 2);
 80028ea:	2302      	movs	r3, #2
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <DisplayDabStatus+0x244>)
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	2300      	movs	r3, #0
 80028f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028f8:	214b      	movs	r1, #75	; 0x4b
 80028fa:	20dc      	movs	r0, #220	; 0xdc
 80028fc:	f7fe f910 	bl	8000b20 <ILI9341_Draw_String>
	ILI9341_Draw_String(220, 75, WHITE, BLACK, itoa(fic_bit_val, char_buffer, 10), 2);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	220a      	movs	r2, #10
 8002904:	490a      	ldr	r1, [pc, #40]	; (8002930 <DisplayDabStatus+0x228>)
 8002906:	4618      	mov	r0, r3
 8002908:	f006 f972 	bl	8008bf0 <itoa>
 800290c:	4603      	mov	r3, r0
 800290e:	2202      	movs	r2, #2
 8002910:	9201      	str	r2, [sp, #4]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2300      	movs	r3, #0
 8002916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800291a:	214b      	movs	r1, #75	; 0x4b
 800291c:	20dc      	movs	r0, #220	; 0xdc
 800291e:	f7fe f8ff 	bl	8000b20 <ILI9341_Draw_String>
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	bf00      	nop
 800292c:	080095b4 	.word	0x080095b4
 8002930:	2000192c 	.word	0x2000192c
 8002934:	080095bc 	.word	0x080095bc
 8002938:	080095c4 	.word	0x080095c4
 800293c:	08009598 	.word	0x08009598
 8002940:	080095cc 	.word	0x080095cc
 8002944:	080095d4 	.word	0x080095d4
 8002948:	080095d8 	.word	0x080095d8
 800294c:	080095e0 	.word	0x080095e0
 8002950:	080095ec 	.word	0x080095ec

08002954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_DMA_Init+0x3c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <MX_DMA_Init+0x3c>)
 8002964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_DMA_Init+0x3c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	200f      	movs	r0, #15
 800297c:	f001 f8d3 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002980:	200f      	movs	r0, #15
 8002982:	f001 f8ec 	bl	8003b5e <HAL_NVIC_EnableIRQ>

}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a64      	ldr	r2, [pc, #400]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	4b5e      	ldr	r3, [pc, #376]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a5d      	ldr	r2, [pc, #372]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b5b      	ldr	r3, [pc, #364]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	4b57      	ldr	r3, [pc, #348]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a4f      	ldr	r2, [pc, #316]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b4d      	ldr	r3, [pc, #308]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a48      	ldr	r2, [pc, #288]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a24:	f043 0310 	orr.w	r3, r3, #16
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a41      	ldr	r2, [pc, #260]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a40:	f043 0308 	orr.w	r3, r3, #8
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <MX_GPIO_Init+0x1b0>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2130      	movs	r1, #48	; 0x30
 8002a56:	483c      	ldr	r0, [pc, #240]	; (8002b48 <MX_GPIO_Init+0x1b4>)
 8002a58:	f001 fd52 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a62:	483a      	ldr	r0, [pc, #232]	; (8002b4c <MX_GPIO_Init+0x1b8>)
 8002a64:	f001 fd4c 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f24f 7180 	movw	r1, #63360	; 0xf780
 8002a6e:	4838      	ldr	r0, [pc, #224]	; (8002b50 <MX_GPIO_Init+0x1bc>)
 8002a70:	f001 fd46 	bl	8004500 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2128      	movs	r1, #40	; 0x28
 8002a78:	4836      	ldr	r0, [pc, #216]	; (8002b54 <MX_GPIO_Init+0x1c0>)
 8002a7a:	f001 fd41 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8002a7e:	2310      	movs	r3, #16
 8002a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a82:	2300      	movs	r3, #0
 8002a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4831      	ldr	r0, [pc, #196]	; (8002b58 <MX_GPIO_Init+0x1c4>)
 8002a92:	f001 fb99 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 8002a96:	2330      	movs	r3, #48	; 0x30
 8002a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa6:	f107 031c 	add.w	r3, r7, #28
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4826      	ldr	r0, [pc, #152]	; (8002b48 <MX_GPIO_Init+0x1b4>)
 8002aae:	f001 fb8b 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 8002ab2:	2311      	movs	r3, #17
 8002ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4823      	ldr	r0, [pc, #140]	; (8002b54 <MX_GPIO_Init+0x1c0>)
 8002ac6:	f001 fb7f 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8002aca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	481a      	ldr	r0, [pc, #104]	; (8002b4c <MX_GPIO_Init+0x1b8>)
 8002ae4:	f001 fb70 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8002ae8:	f24f 7380 	movw	r3, #63360	; 0xf780
 8002aec:	61fb      	str	r3, [r7, #28]
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002afa:	f107 031c 	add.w	r3, r7, #28
 8002afe:	4619      	mov	r1, r3
 8002b00:	4813      	ldr	r0, [pc, #76]	; (8002b50 <MX_GPIO_Init+0x1bc>)
 8002b02:	f001 fb61 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8002b06:	2340      	movs	r3, #64	; 0x40
 8002b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4619      	mov	r1, r3
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <MX_GPIO_Init+0x1bc>)
 8002b1a:	f001 fb55 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8002b1e:	2328      	movs	r3, #40	; 0x28
 8002b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	4807      	ldr	r0, [pc, #28]	; (8002b54 <MX_GPIO_Init+0x1c0>)
 8002b36:	f001 fb47 	bl	80041c8 <HAL_GPIO_Init>

}
 8002b3a:	bf00      	nop
 8002b3c:	3730      	adds	r7, #48	; 0x30
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020000 	.word	0x40020000

08002b5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <MX_I2C1_Init+0x54>)
 8002b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <MX_I2C1_Init+0x58>)
 8002b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b98:	4804      	ldr	r0, [pc, #16]	; (8002bac <MX_I2C1_Init+0x50>)
 8002b9a:	f001 fccb 	bl	8004534 <HAL_I2C_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ba4:	f000 fa10 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	2000194c 	.word	0x2000194c
 8002bb0:	40005400 	.word	0x40005400
 8002bb4:	000186a0 	.word	0x000186a0

08002bb8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bbe:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <MX_I2C3_Init+0x54>)
 8002bc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bc4:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <MX_I2C3_Init+0x58>)
 8002bc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <MX_I2C3_Init+0x50>)
 8002bf6:	f001 fc9d 	bl	8004534 <HAL_I2C_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002c00:	f000 f9e2 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200019a0 	.word	0x200019a0
 8002c0c:	40005c00 	.word	0x40005c00
 8002c10:	000186a0 	.word	0x000186a0

08002c14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a4a      	ldr	r2, [pc, #296]	; (8002d5c <HAL_I2C_MspInit+0x148>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12c      	bne.n	8002c90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a48      	ldr	r2, [pc, #288]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8002c52:	23c0      	movs	r3, #192	; 0xc0
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c56:	2312      	movs	r3, #18
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c62:	2304      	movs	r3, #4
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	483d      	ldr	r0, [pc, #244]	; (8002d64 <HAL_I2C_MspInit+0x150>)
 8002c6e:	f001 faab 	bl	80041c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a39      	ldr	r2, [pc, #228]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002c8e:	e060      	b.n	8002d52 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <HAL_I2C_MspInit+0x154>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d15b      	bne.n	8002d52 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8002cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd8:	2312      	movs	r3, #18
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	4619      	mov	r1, r3
 8002cee:	481f      	ldr	r0, [pc, #124]	; (8002d6c <HAL_I2C_MspInit+0x158>)
 8002cf0:	f001 fa6a 	bl	80041c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8002cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cfa:	2312      	movs	r3, #18
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d06:	2304      	movs	r3, #4
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4817      	ldr	r0, [pc, #92]	; (8002d70 <HAL_I2C_MspInit+0x15c>)
 8002d12:	f001 fa59 	bl	80041c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_I2C_MspInit+0x14c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2100      	movs	r1, #0
 8002d36:	2048      	movs	r0, #72	; 0x48
 8002d38:	f000 fef5 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002d3c:	2048      	movs	r0, #72	; 0x48
 8002d3e:	f000 ff0e 	bl	8003b5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	2049      	movs	r0, #73	; 0x49
 8002d48:	f000 feed 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002d4c:	2049      	movs	r0, #73	; 0x49
 8002d4e:	f000 ff06 	bl	8003b5e <HAL_NVIC_EnableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3730      	adds	r7, #48	; 0x30
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40005400 	.word	0x40005400
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40005c00 	.word	0x40005c00
 8002d6c:	40020800 	.word	0x40020800
 8002d70:	40020000 	.word	0x40020000

08002d74 <Leds_Control_Blink>:

uint8_t led_number = 1;


void Leds_Control_Blink()
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	led_number++;
 8002d78:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <Leds_Control_Blink+0x110>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	4b40      	ldr	r3, [pc, #256]	; (8002e84 <Leds_Control_Blink+0x110>)
 8002d82:	701a      	strb	r2, [r3, #0]
		if(led_number == 5)
 8002d84:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <Leds_Control_Blink+0x110>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d102      	bne.n	8002d92 <Leds_Control_Blink+0x1e>
		{
			led_number = 1;
 8002d8c:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <Leds_Control_Blink+0x110>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
		}

	switch(led_number)
 8002d92:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <Leds_Control_Blink+0x110>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d86f      	bhi.n	8002e7c <Leds_Control_Blink+0x108>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <Leds_Control_Blink+0x30>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002de7 	.word	0x08002de7
 8002dac:	08002e19 	.word	0x08002e19
 8002db0:	08002e4b 	.word	0x08002e4b
	{
	case 1:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1); //ziel
 8002db4:	2201      	movs	r2, #1
 8002db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dba:	4833      	ldr	r0, [pc, #204]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002dbc:	f001 fba0 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc6:	4830      	ldr	r0, [pc, #192]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002dc8:	f001 fb9a 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dd2:	482d      	ldr	r0, [pc, #180]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002dd4:	f001 fb94 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dde:	482a      	ldr	r0, [pc, #168]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002de0:	f001 fb8e 	bl	8004500 <HAL_GPIO_WritePin>
		break;
 8002de4:	e04b      	b.n	8002e7e <Leds_Control_Blink+0x10a>
	case 2:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002de6:	2200      	movs	r2, #0
 8002de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dec:	4826      	ldr	r0, [pc, #152]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002dee:	f001 fb87 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1); //pom
 8002df2:	2201      	movs	r2, #1
 8002df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df8:	4823      	ldr	r0, [pc, #140]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002dfa:	f001 fb81 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e04:	4820      	ldr	r0, [pc, #128]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e06:	f001 fb7b 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e10:	481d      	ldr	r0, [pc, #116]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e12:	f001 fb75 	bl	8004500 <HAL_GPIO_WritePin>
		break;
 8002e16:	e032      	b.n	8002e7e <Leds_Control_Blink+0x10a>
	case 3:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e1e:	481a      	ldr	r0, [pc, #104]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e20:	f001 fb6e 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002e24:	2200      	movs	r2, #0
 8002e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e2a:	4817      	ldr	r0, [pc, #92]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e2c:	f001 fb68 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1); //czer
 8002e30:	2201      	movs	r2, #1
 8002e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e36:	4814      	ldr	r0, [pc, #80]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e38:	f001 fb62 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0); //nieb
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e42:	4811      	ldr	r0, [pc, #68]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e44:	f001 fb5c 	bl	8004500 <HAL_GPIO_WritePin>
		break;
 8002e48:	e019      	b.n	8002e7e <Leds_Control_Blink+0x10a>
	case 4:
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0); //ziel
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e50:	480d      	ldr	r0, [pc, #52]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e52:	f001 fb55 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0); //pom
 8002e56:	2200      	movs	r2, #0
 8002e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e5c:	480a      	ldr	r0, [pc, #40]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e5e:	f001 fb4f 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0); //czer
 8002e62:	2200      	movs	r2, #0
 8002e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e68:	4807      	ldr	r0, [pc, #28]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e6a:	f001 fb49 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1); //nieb
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e74:	4804      	ldr	r0, [pc, #16]	; (8002e88 <Leds_Control_Blink+0x114>)
 8002e76:	f001 fb43 	bl	8004500 <HAL_GPIO_WritePin>
		break;
 8002e7a:	e000      	b.n	8002e7e <Leds_Control_Blink+0x10a>
	default:

		break;
 8002e7c:	bf00      	nop
	}
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000008 	.word	0x20000008
 8002e88:	40020c00 	.word	0x40020c00

08002e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e90:	f000 fcd8 	bl	8003844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e94:	f000 f82e 	bl	8002ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e98:	f7ff fd7c 	bl	8002994 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e9c:	f7ff fd5a 	bl	8002954 <MX_DMA_Init>
  MX_I2C1_Init();
 8002ea0:	f7ff fe5c 	bl	8002b5c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002ea4:	f7ff fe88 	bl	8002bb8 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002ea8:	f000 f894 	bl	8002fd4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002eac:	f000 f8c8 	bl	8003040 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002eb0:	f000 fa66 	bl	8003380 <MX_TIM3_Init>
  MX_UART5_Init();
 8002eb4:	f000 fba8 	bl	8003608 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8002eb8:	f000 fbd0 	bl	800365c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8002ebc:	f000 faba 	bl	8003434 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002ec0:	f000 fadc 	bl	800347c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4808      	ldr	r0, [pc, #32]	; (8002ee8 <main+0x5c>)
 8002ec8:	f7ff fade 	bl	8002488 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim10);
 8002ecc:	4807      	ldr	r0, [pc, #28]	; (8002eec <main+0x60>)
 8002ece:	f004 fcff 	bl	80078d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8002ed2:	4807      	ldr	r0, [pc, #28]	; (8002ef0 <main+0x64>)
 8002ed4:	f004 fcfc 	bl	80078d0 <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8002ed8:	f7fd fb00 	bl	80004dc <ILI9341_Init>
  DisplayMainScreen();
 8002edc:	f7ff fafa 	bl	80024d4 <DisplayMainScreen>

  Si468x_init();
 8002ee0:	f7fe f8e8 	bl	80010b4 <Si468x_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <main+0x58>
 8002ee6:	bf00      	nop
 8002ee8:	080095f8 	.word	0x080095f8
 8002eec:	20001b4c 	.word	0x20001b4c
 8002ef0:	20001b94 	.word	0x20001b94

08002ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b094      	sub	sp, #80	; 0x50
 8002ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002efa:	f107 0320 	add.w	r3, r7, #32
 8002efe:	2230      	movs	r2, #48	; 0x30
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f005 fe76 	bl	8008bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <SystemClock_Config+0xcc>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a27      	ldr	r2, [pc, #156]	; (8002fc0 <SystemClock_Config+0xcc>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <SystemClock_Config+0xcc>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <SystemClock_Config+0xd0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a21      	ldr	r2, [pc, #132]	; (8002fc4 <SystemClock_Config+0xd0>)
 8002f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <SystemClock_Config+0xd0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f64:	2304      	movs	r3, #4
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002f68:	23a0      	movs	r3, #160	; 0xa0
 8002f6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f70:	2304      	movs	r3, #4
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f74:	f107 0320 	add.w	r3, r7, #32
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 f8fb 	bl	8006174 <HAL_RCC_OscConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f84:	f000 f820 	bl	8002fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f88:	230f      	movs	r3, #15
 8002f8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	2105      	movs	r1, #5
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fb5c 	bl	8006664 <HAL_RCC_ClockConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002fb2:	f000 f809 	bl	8002fc8 <Error_Handler>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3750      	adds	r7, #80	; 0x50
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40007000 	.word	0x40007000

08002fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fcc:	b672      	cpsid	i
}
 8002fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <Error_Handler+0x8>
	...

08002fd4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <MX_SPI1_Init+0x64>)
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <MX_SPI1_Init+0x68>)
 8002fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <MX_SPI1_Init+0x64>)
 8002fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <MX_SPI1_Init+0x64>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <MX_SPI1_Init+0x64>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <MX_SPI1_Init+0x64>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <MX_SPI1_Init+0x64>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <MX_SPI1_Init+0x64>)
 8003000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <MX_SPI1_Init+0x64>)
 8003008:	2218      	movs	r2, #24
 800300a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <MX_SPI1_Init+0x64>)
 800300e:	2200      	movs	r2, #0
 8003010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <MX_SPI1_Init+0x64>)
 8003014:	2200      	movs	r2, #0
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <MX_SPI1_Init+0x64>)
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <MX_SPI1_Init+0x64>)
 8003020:	220a      	movs	r2, #10
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <MX_SPI1_Init+0x64>)
 8003026:	f003 fd3d 	bl	8006aa4 <HAL_SPI_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003030:	f7ff ffca 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	200019f4 	.word	0x200019f4
 800303c:	40013000 	.word	0x40013000

08003040 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003044:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <MX_SPI2_Init+0x64>)
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <MX_SPI2_Init+0x68>)
 8003048:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <MX_SPI2_Init+0x64>)
 800304c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003050:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <MX_SPI2_Init+0x64>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <MX_SPI2_Init+0x64>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <MX_SPI2_Init+0x64>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <MX_SPI2_Init+0x64>)
 8003066:	2200      	movs	r2, #0
 8003068:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <MX_SPI2_Init+0x64>)
 800306c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003070:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <MX_SPI2_Init+0x64>)
 8003074:	2200      	movs	r2, #0
 8003076:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <MX_SPI2_Init+0x64>)
 800307a:	2200      	movs	r2, #0
 800307c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <MX_SPI2_Init+0x64>)
 8003080:	2200      	movs	r2, #0
 8003082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <MX_SPI2_Init+0x64>)
 8003086:	2200      	movs	r2, #0
 8003088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <MX_SPI2_Init+0x64>)
 800308c:	220a      	movs	r2, #10
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003090:	4804      	ldr	r0, [pc, #16]	; (80030a4 <MX_SPI2_Init+0x64>)
 8003092:	f003 fd07 	bl	8006aa4 <HAL_SPI_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800309c:	f7ff ff94 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20001a4c 	.word	0x20001a4c
 80030a8:	40003800 	.word	0x40003800

080030ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <HAL_SPI_MspInit+0x154>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d12c      	bne.n	8003128 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <HAL_SPI_MspInit+0x158>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a4b      	ldr	r2, [pc, #300]	; (8003204 <HAL_SPI_MspInit+0x158>)
 80030d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b49      	ldr	r3, [pc, #292]	; (8003204 <HAL_SPI_MspInit+0x158>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	4b45      	ldr	r3, [pc, #276]	; (8003204 <HAL_SPI_MspInit+0x158>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a44      	ldr	r2, [pc, #272]	; (8003204 <HAL_SPI_MspInit+0x158>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b42      	ldr	r3, [pc, #264]	; (8003204 <HAL_SPI_MspInit+0x158>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8003106:	23e0      	movs	r3, #224	; 0xe0
 8003108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003112:	2303      	movs	r3, #3
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003116:	2305      	movs	r3, #5
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 031c 	add.w	r3, r7, #28
 800311e:	4619      	mov	r1, r3
 8003120:	4839      	ldr	r0, [pc, #228]	; (8003208 <HAL_SPI_MspInit+0x15c>)
 8003122:	f001 f851 	bl	80041c8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003126:	e066      	b.n	80031f6 <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a37      	ldr	r2, [pc, #220]	; (800320c <HAL_SPI_MspInit+0x160>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d161      	bne.n	80031f6 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_SPI_MspInit+0x158>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a32      	ldr	r2, [pc, #200]	; (8003204 <HAL_SPI_MspInit+0x158>)
 800313c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_SPI_MspInit+0x158>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <HAL_SPI_MspInit+0x158>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_SPI_MspInit+0x158>)
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_SPI_MspInit+0x158>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800316a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	2303      	movs	r3, #3
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800317c:	2305      	movs	r3, #5
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	4619      	mov	r1, r3
 8003186:	4822      	ldr	r0, [pc, #136]	; (8003210 <HAL_SPI_MspInit+0x164>)
 8003188:	f001 f81e 	bl	80041c8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_SPI_MspInit+0x168>)
 800318e:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_SPI_MspInit+0x16c>)
 8003190:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_SPI_MspInit+0x168>)
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <HAL_SPI_MspInit+0x168>)
 800319a:	2240      	movs	r2, #64	; 0x40
 800319c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031aa:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80031ca:	4812      	ldr	r0, [pc, #72]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031cc:	f000 fce2 	bl	8003b94 <HAL_DMA_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 80031d6:	f7ff fef7 	bl	8002fc8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031de:	649a      	str	r2, [r3, #72]	; 0x48
 80031e0:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <HAL_SPI_MspInit+0x168>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	2024      	movs	r0, #36	; 0x24
 80031ec:	f000 fc9b 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031f0:	2024      	movs	r0, #36	; 0x24
 80031f2:	f000 fcb4 	bl	8003b5e <HAL_NVIC_EnableIRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3730      	adds	r7, #48	; 0x30
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40013000 	.word	0x40013000
 8003204:	40023800 	.word	0x40023800
 8003208:	40020000 	.word	0x40020000
 800320c:	40003800 	.word	0x40003800
 8003210:	40020400 	.word	0x40020400
 8003214:	20001aa4 	.word	0x20001aa4
 8003218:	40026070 	.word	0x40026070

0800321c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_MspInit+0x4c>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_MspInit+0x4c>)
 800322c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_MspInit+0x4c>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	607b      	str	r3, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_MspInit+0x4c>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_MspInit+0x4c>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_MspInit+0x4c>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800

0800326c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003270:	e7fe      	b.n	8003270 <NMI_Handler+0x4>

08003272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003276:	e7fe      	b.n	8003276 <HardFault_Handler+0x4>

08003278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800327c:	e7fe      	b.n	800327c <MemManage_Handler+0x4>

0800327e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003282:	e7fe      	b.n	8003282 <BusFault_Handler+0x4>

08003284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003288:	e7fe      	b.n	8003288 <UsageFault_Handler+0x4>

0800328a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032b8:	f000 fb16 	bl	80038e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}

080032c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80032c4:	4802      	ldr	r0, [pc, #8]	; (80032d0 <DMA1_Stream4_IRQHandler+0x10>)
 80032c6:	f000 fd35 	bl	8003d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20001aa4 	.word	0x20001aa4

080032d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80032d8:	4802      	ldr	r0, [pc, #8]	; (80032e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032da:	f004 fbb8 	bl	8007a4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20001b4c 	.word	0x20001b4c

080032e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80032ee:	f004 fbae 	bl	8007a4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20001b94 	.word	0x20001b94

080032fc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <SPI2_IRQHandler+0x10>)
 8003302:	f004 f847 	bl	8007394 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20001a4c 	.word	0x20001a4c

08003310 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <I2C3_EV_IRQHandler+0x10>)
 8003316:	f001 fa51 	bl	80047bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200019a0 	.word	0x200019a0

08003324 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <I2C3_ER_IRQHandler+0x10>)
 800332a:	f001 fbb8 	bl	8004a9e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200019a0 	.word	0x200019a0

08003338 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM10)
	{
		//DisplayTest();
	}

	if(htim->Instance==TIM11)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Leds_Control_Blink();
 800334a:	f7ff fd13 	bl	8002d74 <Leds_Control_Blink>
//		Si468x_dab_reset_interrupts();
//		Si468x_dab_digrad_status();

	}
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40014800 	.word	0x40014800

0800335c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <SystemInit+0x20>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <SystemInit+0x20>)
 8003368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800336c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003386:	f107 0320 	add.w	r3, r7, #32
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	611a      	str	r2, [r3, #16]
 800339e:	615a      	str	r2, [r3, #20]
 80033a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <MX_TIM3_Init+0xac>)
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <MX_TIM3_Init+0xb0>)
 80033a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033a8:	4b20      	ldr	r3, [pc, #128]	; (800342c <MX_TIM3_Init+0xac>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ae:	4b1f      	ldr	r3, [pc, #124]	; (800342c <MX_TIM3_Init+0xac>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <MX_TIM3_Init+0xac>)
 80033b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <MX_TIM3_Init+0xac>)
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <MX_TIM3_Init+0xac>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033c8:	4818      	ldr	r0, [pc, #96]	; (800342c <MX_TIM3_Init+0xac>)
 80033ca:	f004 faf1 	bl	80079b0 <HAL_TIM_PWM_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80033d4:	f7ff fdf8 	bl	8002fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033e0:	f107 0320 	add.w	r3, r7, #32
 80033e4:	4619      	mov	r1, r3
 80033e6:	4811      	ldr	r0, [pc, #68]	; (800342c <MX_TIM3_Init+0xac>)
 80033e8:	f004 ff74 	bl	80082d4 <HAL_TIMEx_MasterConfigSynchronization>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80033f2:	f7ff fde9 	bl	8002fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033f6:	2360      	movs	r3, #96	; 0x60
 80033f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	2208      	movs	r2, #8
 800340a:	4619      	mov	r1, r3
 800340c:	4807      	ldr	r0, [pc, #28]	; (800342c <MX_TIM3_Init+0xac>)
 800340e:	f004 fc27 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003418:	f7ff fdd6 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800341c:	4803      	ldr	r0, [pc, #12]	; (800342c <MX_TIM3_Init+0xac>)
 800341e:	f000 f8b9 	bl	8003594 <HAL_TIM_MspPostInit>

}
 8003422:	bf00      	nop
 8003424:	3728      	adds	r7, #40	; 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20001b04 	.word	0x20001b04
 8003430:	40000400 	.word	0x40000400

08003434 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <MX_TIM10_Init+0x40>)
 800343a:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <MX_TIM10_Init+0x44>)
 800343c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <MX_TIM10_Init+0x40>)
 8003440:	f643 2297 	movw	r2, #14999	; 0x3a97
 8003444:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <MX_TIM10_Init+0x40>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <MX_TIM10_Init+0x40>)
 800344e:	f240 2257 	movw	r2, #599	; 0x257
 8003452:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003454:	4b07      	ldr	r3, [pc, #28]	; (8003474 <MX_TIM10_Init+0x40>)
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <MX_TIM10_Init+0x40>)
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003460:	4804      	ldr	r0, [pc, #16]	; (8003474 <MX_TIM10_Init+0x40>)
 8003462:	f004 f9e5 	bl	8007830 <HAL_TIM_Base_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800346c:	f7ff fdac 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20001b4c 	.word	0x20001b4c
 8003478:	40014400 	.word	0x40014400

0800347c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <MX_TIM11_Init+0x40>)
 8003482:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <MX_TIM11_Init+0x44>)
 8003484:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <MX_TIM11_Init+0x40>)
 8003488:	f643 2297 	movw	r2, #14999	; 0x3a97
 800348c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <MX_TIM11_Init+0x40>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <MX_TIM11_Init+0x40>)
 8003496:	f240 5213 	movw	r2, #1299	; 0x513
 800349a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <MX_TIM11_Init+0x40>)
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <MX_TIM11_Init+0x40>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80034a8:	4804      	ldr	r0, [pc, #16]	; (80034bc <MX_TIM11_Init+0x40>)
 80034aa:	f004 f9c1 	bl	8007830 <HAL_TIM_Base_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80034b4:	f7ff fd88 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20001b94 	.word	0x20001b94
 80034c0:	40014800 	.word	0x40014800

080034c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <HAL_TIM_PWM_MspInit+0x3c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10d      	bne.n	80034f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_TIM_PWM_MspInit+0x40>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_TIM_PWM_MspInit+0x40>)
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_TIM_PWM_MspInit+0x40>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40000400 	.word	0x40000400
 8003504:	40023800 	.word	0x40023800

08003508 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_TIM_Base_MspInit+0x80>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d116      	bne.n	8003548 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_TIM_Base_MspInit+0x84>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_TIM_Base_MspInit+0x84>)
 8003524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <HAL_TIM_Base_MspInit+0x84>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	2019      	movs	r0, #25
 800353c:	f000 faf3 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003540:	2019      	movs	r0, #25
 8003542:	f000 fb0c 	bl	8003b5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003546:	e01a      	b.n	800357e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a10      	ldr	r2, [pc, #64]	; (8003590 <HAL_TIM_Base_MspInit+0x88>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d115      	bne.n	800357e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_TIM_Base_MspInit+0x84>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a0c      	ldr	r2, [pc, #48]	; (800358c <HAL_TIM_Base_MspInit+0x84>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_TIM_Base_MspInit+0x84>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	201a      	movs	r0, #26
 8003574:	f000 fad7 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003578:	201a      	movs	r0, #26
 800357a:	f000 faf0 	bl	8003b5e <HAL_NVIC_EnableIRQ>
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40014400 	.word	0x40014400
 800358c:	40023800 	.word	0x40023800
 8003590:	40014800 	.word	0x40014800

08003594 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a12      	ldr	r2, [pc, #72]	; (80035fc <HAL_TIM_MspPostInit+0x68>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d11e      	bne.n	80035f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_TIM_MspPostInit+0x6c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_TIM_MspPostInit+0x6c>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_TIM_MspPostInit+0x6c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 80035d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035e4:	2302      	movs	r3, #2
 80035e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	4619      	mov	r1, r3
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <HAL_TIM_MspPostInit+0x70>)
 80035f0:	f000 fdea 	bl	80041c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035f4:	bf00      	nop
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40000400 	.word	0x40000400
 8003600:	40023800 	.word	0x40023800
 8003604:	40020800 	.word	0x40020800

08003608 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <MX_UART5_Init+0x4c>)
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <MX_UART5_Init+0x50>)
 8003610:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <MX_UART5_Init+0x4c>)
 8003614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003618:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800361a:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <MX_UART5_Init+0x4c>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <MX_UART5_Init+0x4c>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <MX_UART5_Init+0x4c>)
 8003628:	2200      	movs	r2, #0
 800362a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <MX_UART5_Init+0x4c>)
 800362e:	220c      	movs	r2, #12
 8003630:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <MX_UART5_Init+0x4c>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <MX_UART5_Init+0x4c>)
 800363a:	2200      	movs	r2, #0
 800363c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800363e:	4805      	ldr	r0, [pc, #20]	; (8003654 <MX_UART5_Init+0x4c>)
 8003640:	f004 fed8 	bl	80083f4 <HAL_UART_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800364a:	f7ff fcbd 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20001bdc 	.word	0x20001bdc
 8003658:	40005000 	.word	0x40005000

0800365c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <MX_USART3_UART_Init+0x50>)
 8003664:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003668:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800366c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003682:	220c      	movs	r2, #12
 8003684:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003694:	f004 feae 	bl	80083f4 <HAL_UART_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800369e:	f7ff fc93 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20001c20 	.word	0x20001c20
 80036ac:	40004800 	.word	0x40004800

080036b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08c      	sub	sp, #48	; 0x30
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a42      	ldr	r2, [pc, #264]	; (80037d8 <HAL_UART_MspInit+0x128>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d14b      	bne.n	800376a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_UART_MspInit+0x12c>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a40      	ldr	r2, [pc, #256]	; (80037dc <HAL_UART_MspInit+0x12c>)
 80036dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b3e      	ldr	r3, [pc, #248]	; (80037dc <HAL_UART_MspInit+0x12c>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <HAL_UART_MspInit+0x12c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a39      	ldr	r2, [pc, #228]	; (80037dc <HAL_UART_MspInit+0x12c>)
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_UART_MspInit+0x12c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	4b33      	ldr	r3, [pc, #204]	; (80037dc <HAL_UART_MspInit+0x12c>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a32      	ldr	r2, [pc, #200]	; (80037dc <HAL_UART_MspInit+0x12c>)
 8003714:	f043 0308 	orr.w	r3, r3, #8
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_UART_MspInit+0x12c>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800372a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	2302      	movs	r3, #2
 800372e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003734:	2303      	movs	r3, #3
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003738:	2308      	movs	r3, #8
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	4619      	mov	r1, r3
 8003742:	4827      	ldr	r0, [pc, #156]	; (80037e0 <HAL_UART_MspInit+0x130>)
 8003744:	f000 fd40 	bl	80041c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003748:	2304      	movs	r3, #4
 800374a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	2302      	movs	r3, #2
 800374e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003754:	2303      	movs	r3, #3
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003758:	2308      	movs	r3, #8
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800375c:	f107 031c 	add.w	r3, r7, #28
 8003760:	4619      	mov	r1, r3
 8003762:	4820      	ldr	r0, [pc, #128]	; (80037e4 <HAL_UART_MspInit+0x134>)
 8003764:	f000 fd30 	bl	80041c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003768:	e031      	b.n	80037ce <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <HAL_UART_MspInit+0x138>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d12c      	bne.n	80037ce <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	4b18      	ldr	r3, [pc, #96]	; (80037dc <HAL_UART_MspInit+0x12c>)
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	4a17      	ldr	r2, [pc, #92]	; (80037dc <HAL_UART_MspInit+0x12c>)
 800377e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003782:	6413      	str	r3, [r2, #64]	; 0x40
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_UART_MspInit+0x12c>)
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_UART_MspInit+0x12c>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	4a10      	ldr	r2, [pc, #64]	; (80037dc <HAL_UART_MspInit+0x12c>)
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	6313      	str	r3, [r2, #48]	; 0x30
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_UART_MspInit+0x12c>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 80037ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037be:	2307      	movs	r3, #7
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f107 031c 	add.w	r3, r7, #28
 80037c6:	4619      	mov	r1, r3
 80037c8:	4808      	ldr	r0, [pc, #32]	; (80037ec <HAL_UART_MspInit+0x13c>)
 80037ca:	f000 fcfd 	bl	80041c8 <HAL_GPIO_Init>
}
 80037ce:	bf00      	nop
 80037d0:	3730      	adds	r7, #48	; 0x30
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40005000 	.word	0x40005000
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020800 	.word	0x40020800
 80037e4:	40020c00 	.word	0x40020c00
 80037e8:	40004800 	.word	0x40004800
 80037ec:	40020400 	.word	0x40020400

080037f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037f4:	480d      	ldr	r0, [pc, #52]	; (800382c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037f6:	490e      	ldr	r1, [pc, #56]	; (8003830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037f8:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037fc:	e002      	b.n	8003804 <LoopCopyDataInit>

080037fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003802:	3304      	adds	r3, #4

08003804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003808:	d3f9      	bcc.n	80037fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800380a:	4a0b      	ldr	r2, [pc, #44]	; (8003838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800380c:	4c0b      	ldr	r4, [pc, #44]	; (800383c <LoopFillZerobss+0x26>)
  movs r3, #0
 800380e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003810:	e001      	b.n	8003816 <LoopFillZerobss>

08003812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003814:	3204      	adds	r2, #4

08003816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003818:	d3fb      	bcc.n	8003812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800381a:	f7ff fd9f 	bl	800335c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800381e:	f005 f9ab 	bl	8008b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003822:	f7ff fb33 	bl	8002e8c <main>
  bx  lr    
 8003826:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800382c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003830:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003834:	0800b5cc 	.word	0x0800b5cc
  ldr r2, =_sbss
 8003838:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800383c:	20001c68 	.word	0x20001c68

08003840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003840:	e7fe      	b.n	8003840 <ADC_IRQHandler>
	...

08003844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <HAL_Init+0x40>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <HAL_Init+0x40>)
 800384e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_Init+0x40>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <HAL_Init+0x40>)
 800385a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800385e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_Init+0x40>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a07      	ldr	r2, [pc, #28]	; (8003884 <HAL_Init+0x40>)
 8003866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800386c:	2003      	movs	r0, #3
 800386e:	f000 f94f 	bl	8003b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003872:	200f      	movs	r0, #15
 8003874:	f000 f808 	bl	8003888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003878:	f7ff fcd0 	bl	800321c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023c00 	.word	0x40023c00

08003888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_InitTick+0x54>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_InitTick+0x58>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800389e:	fbb3 f3f1 	udiv	r3, r3, r1
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f967 	bl	8003b7a <HAL_SYSTICK_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00e      	b.n	80038d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b0f      	cmp	r3, #15
 80038ba:	d80a      	bhi.n	80038d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038bc:	2200      	movs	r2, #0
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	f000 f92f 	bl	8003b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038c8:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <HAL_InitTick+0x5c>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	2000000c 	.word	0x2000000c
 80038e0:	20000014 	.word	0x20000014
 80038e4:	20000010 	.word	0x20000010

080038e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_IncTick+0x20>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_IncTick+0x24>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_IncTick+0x24>)
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000014 	.word	0x20000014
 800390c:	20001c64 	.word	0x20001c64

08003910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return uwTick;
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_GetTick+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20001c64 	.word	0x20001c64

08003928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7ff ffee 	bl	8003910 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d005      	beq.n	800394e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_Delay+0x44>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800394e:	bf00      	nop
 8003950:	f7ff ffde 	bl	8003910 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d8f7      	bhi.n	8003950 <HAL_Delay+0x28>
  {
  }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000014 	.word	0x20000014

08003970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4907      	ldr	r1, [pc, #28]	; (8003a0c <__NVIC_EnableIRQ+0x38>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000e100 	.word	0xe000e100

08003a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	; (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
         );
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	; 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003adc:	d301      	bcc.n	8003ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00f      	b.n	8003b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <SysTick_Config+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aea:	210f      	movs	r1, #15
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f7ff ff8e 	bl	8003a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SysTick_Config+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <SysTick_Config+0x40>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff29 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b38:	f7ff ff3e 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7ff ff8e 	bl	8003a64 <NVIC_EncodePriority>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff5d 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff31 	bl	80039d4 <__NVIC_EnableIRQ>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ffa2 	bl	8003acc <SysTick_Config>
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ba0:	f7ff feb6 	bl	8003910 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e099      	b.n	8003ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd0:	e00f      	b.n	8003bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd2:	f7ff fe9d 	bl	8003910 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d908      	bls.n	8003bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2203      	movs	r2, #3
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e078      	b.n	8003ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e8      	bne.n	8003bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_DMA_Init+0x158>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d107      	bne.n	8003c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4313      	orrs	r3, r2
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0307 	bic.w	r3, r3, #7
 8003c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d117      	bne.n	8003cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00e      	beq.n	8003cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fa19 	bl	80040d0 <DMA_CheckFifoParam>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e016      	b.n	8003ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9d0 	bl	8004064 <DMA_CalcBaseAndBitshift>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	223f      	movs	r2, #63	; 0x3f
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	f010803f 	.word	0xf010803f

08003cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d004      	beq.n	8003d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2280      	movs	r2, #128	; 0x80
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e00c      	b.n	8003d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2205      	movs	r2, #5
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d40:	4b8e      	ldr	r3, [pc, #568]	; (8003f7c <HAL_DMA_IRQHandler+0x248>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a8e      	ldr	r2, [pc, #568]	; (8003f80 <HAL_DMA_IRQHandler+0x24c>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	2208      	movs	r2, #8
 8003d60:	409a      	lsls	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01a      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d013      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0204 	bic.w	r2, r2, #4
 8003d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d98:	f043 0201 	orr.w	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	2201      	movs	r2, #1
 8003da6:	409a      	lsls	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	2204      	movs	r2, #4
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	2204      	movs	r2, #4
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	f043 0204 	orr.w	r2, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	2210      	movs	r2, #16
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d043      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d03c      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	2210      	movs	r2, #16
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d018      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d108      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d024      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	e01f      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01b      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
 8003e74:	e016      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0208 	bic.w	r2, r2, #8
 8003e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 808f 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8087 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	2220      	movs	r2, #32
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d136      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0216 	bic.w	r2, r2, #22
 8003eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_DMA_IRQHandler+0x1da>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0208 	bic.w	r2, r2, #8
 8003f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	223f      	movs	r2, #63	; 0x3f
 8003f24:	409a      	lsls	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d07e      	beq.n	8004040 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
        }
        return;
 8003f4a:	e079      	b.n	8004040 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01d      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10d      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d031      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
 8003f78:	e02c      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x2a0>
 8003f7a:	bf00      	nop
 8003f7c:	2000000c 	.word	0x2000000c
 8003f80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d023      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e01e      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0210 	bic.w	r2, r2, #16
 8003fb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d032      	beq.n	8004042 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d022      	beq.n	800402e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2205      	movs	r2, #5
 8003fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3301      	adds	r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	429a      	cmp	r2, r3
 800400a:	d307      	bcc.n	800401c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f2      	bne.n	8004000 <HAL_DMA_IRQHandler+0x2cc>
 800401a:	e000      	b.n	800401e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800401c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
 800403e:	e000      	b.n	8004042 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004040:	bf00      	nop
    }
  }
}
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004056:	b2db      	uxtb	r3, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	3b10      	subs	r3, #16
 8004074:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <DMA_CalcBaseAndBitshift+0x68>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d909      	bls.n	80040a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	659a      	str	r2, [r3, #88]	; 0x58
 80040a4:	e007      	b.n	80040b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	aaaaaaab 	.word	0xaaaaaaab
 80040cc:	0800b58c 	.word	0x0800b58c

080040d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11f      	bne.n	800412a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d856      	bhi.n	800419e <DMA_CheckFifoParam+0xce>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <DMA_CheckFifoParam+0x28>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	08004109 	.word	0x08004109
 80040fc:	0800411b 	.word	0x0800411b
 8004100:	08004109 	.word	0x08004109
 8004104:	0800419f 	.word	0x0800419f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d046      	beq.n	80041a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004118:	e043      	b.n	80041a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004122:	d140      	bne.n	80041a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004128:	e03d      	b.n	80041a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004132:	d121      	bne.n	8004178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d837      	bhi.n	80041aa <DMA_CheckFifoParam+0xda>
 800413a:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <DMA_CheckFifoParam+0x70>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004151 	.word	0x08004151
 8004144:	08004157 	.word	0x08004157
 8004148:	08004151 	.word	0x08004151
 800414c:	08004169 	.word	0x08004169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e030      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d025      	beq.n	80041ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004166:	e022      	b.n	80041ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004170:	d11f      	bne.n	80041b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004176:	e01c      	b.n	80041b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d903      	bls.n	8004186 <DMA_CheckFifoParam+0xb6>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d003      	beq.n	800418c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004184:	e018      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      break;
 800418a:	e015      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e00b      	b.n	80041b6 <DMA_CheckFifoParam+0xe6>
      break;
 800419e:	bf00      	nop
 80041a0:	e00a      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
 80041a4:	e008      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041a6:	bf00      	nop
 80041a8:	e006      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041aa:	bf00      	nop
 80041ac:	e004      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <DMA_CheckFifoParam+0xe8>
      break;
 80041b6:	bf00      	nop
    }
  } 
  
  return status; 
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e16b      	b.n	80044bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	f040 815a 	bne.w	80044b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d005      	beq.n	800421a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004216:	2b02      	cmp	r3, #2
 8004218:	d130      	bne.n	800427c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	2203      	movs	r2, #3
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004250:	2201      	movs	r2, #1
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 0201 	and.w	r2, r3, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b03      	cmp	r3, #3
 8004286:	d017      	beq.n	80042b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d123      	bne.n	800430c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	08da      	lsrs	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3208      	adds	r2, #8
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0203 	and.w	r2, r3, #3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80b4 	beq.w	80044b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b60      	ldr	r3, [pc, #384]	; (80044d4 <HAL_GPIO_Init+0x30c>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	4a5f      	ldr	r2, [pc, #380]	; (80044d4 <HAL_GPIO_Init+0x30c>)
 8004358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800435c:	6453      	str	r3, [r2, #68]	; 0x44
 800435e:	4b5d      	ldr	r3, [pc, #372]	; (80044d4 <HAL_GPIO_Init+0x30c>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436a:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <HAL_GPIO_Init+0x310>)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	3302      	adds	r3, #2
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a52      	ldr	r2, [pc, #328]	; (80044dc <HAL_GPIO_Init+0x314>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02b      	beq.n	80043ee <HAL_GPIO_Init+0x226>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a51      	ldr	r2, [pc, #324]	; (80044e0 <HAL_GPIO_Init+0x318>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d025      	beq.n	80043ea <HAL_GPIO_Init+0x222>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a50      	ldr	r2, [pc, #320]	; (80044e4 <HAL_GPIO_Init+0x31c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01f      	beq.n	80043e6 <HAL_GPIO_Init+0x21e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4f      	ldr	r2, [pc, #316]	; (80044e8 <HAL_GPIO_Init+0x320>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d019      	beq.n	80043e2 <HAL_GPIO_Init+0x21a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4e      	ldr	r2, [pc, #312]	; (80044ec <HAL_GPIO_Init+0x324>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_GPIO_Init+0x216>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4d      	ldr	r2, [pc, #308]	; (80044f0 <HAL_GPIO_Init+0x328>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00d      	beq.n	80043da <HAL_GPIO_Init+0x212>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4c      	ldr	r2, [pc, #304]	; (80044f4 <HAL_GPIO_Init+0x32c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <HAL_GPIO_Init+0x20e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <HAL_GPIO_Init+0x330>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_GPIO_Init+0x20a>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e00e      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043d2:	2308      	movs	r3, #8
 80043d4:	e00c      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043d6:	2306      	movs	r3, #6
 80043d8:	e00a      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043da:	2305      	movs	r3, #5
 80043dc:	e008      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043de:	2304      	movs	r3, #4
 80043e0:	e006      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043e2:	2303      	movs	r3, #3
 80043e4:	e004      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e002      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043ee:	2300      	movs	r3, #0
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	f002 0203 	and.w	r2, r2, #3
 80043f6:	0092      	lsls	r2, r2, #2
 80043f8:	4093      	lsls	r3, r2
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004400:	4935      	ldr	r1, [pc, #212]	; (80044d8 <HAL_GPIO_Init+0x310>)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	3302      	adds	r3, #2
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_GPIO_Init+0x334>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004432:	4a32      	ldr	r2, [pc, #200]	; (80044fc <HAL_GPIO_Init+0x334>)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004438:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_GPIO_Init+0x334>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800445c:	4a27      	ldr	r2, [pc, #156]	; (80044fc <HAL_GPIO_Init+0x334>)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_GPIO_Init+0x334>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004486:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_GPIO_Init+0x334>)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_GPIO_Init+0x334>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <HAL_GPIO_Init+0x334>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3301      	adds	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	f67f ae90 	bls.w	80041e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3724      	adds	r7, #36	; 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40013800 	.word	0x40013800
 80044dc:	40020000 	.word	0x40020000
 80044e0:	40020400 	.word	0x40020400
 80044e4:	40020800 	.word	0x40020800
 80044e8:	40020c00 	.word	0x40020c00
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40021400 	.word	0x40021400
 80044f4:	40021800 	.word	0x40021800
 80044f8:	40021c00 	.word	0x40021c00
 80044fc:	40013c00 	.word	0x40013c00

08004500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004510:	787b      	ldrb	r3, [r7, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800451c:	e003      	b.n	8004526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	619a      	str	r2, [r3, #24]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e12b      	b.n	800479e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fb5a 	bl	8002c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004598:	f002 fa5c 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 800459c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a81      	ldr	r2, [pc, #516]	; (80047a8 <HAL_I2C_Init+0x274>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d807      	bhi.n	80045b8 <HAL_I2C_Init+0x84>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a80      	ldr	r2, [pc, #512]	; (80047ac <HAL_I2C_Init+0x278>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e006      	b.n	80045c6 <HAL_I2C_Init+0x92>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a7d      	ldr	r2, [pc, #500]	; (80047b0 <HAL_I2C_Init+0x27c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	bf94      	ite	ls
 80045c0:	2301      	movls	r3, #1
 80045c2:	2300      	movhi	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0e7      	b.n	800479e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a78      	ldr	r2, [pc, #480]	; (80047b4 <HAL_I2C_Init+0x280>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	0c9b      	lsrs	r3, r3, #18
 80045d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_I2C_Init+0x274>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d802      	bhi.n	8004608 <HAL_I2C_Init+0xd4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	e009      	b.n	800461c <HAL_I2C_Init+0xe8>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	4a69      	ldr	r2, [pc, #420]	; (80047b8 <HAL_I2C_Init+0x284>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	3301      	adds	r3, #1
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	430b      	orrs	r3, r1
 8004622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800462e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	495c      	ldr	r1, [pc, #368]	; (80047a8 <HAL_I2C_Init+0x274>)
 8004638:	428b      	cmp	r3, r1
 800463a:	d819      	bhi.n	8004670 <HAL_I2C_Init+0x13c>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e59      	subs	r1, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fbb1 f3f3 	udiv	r3, r1, r3
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004650:	400b      	ands	r3, r1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_I2C_Init+0x138>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e59      	subs	r1, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fbb1 f3f3 	udiv	r3, r1, r3
 8004664:	3301      	adds	r3, #1
 8004666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466a:	e051      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 800466c:	2304      	movs	r3, #4
 800466e:	e04f      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d111      	bne.n	800469c <HAL_I2C_Init+0x168>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	440b      	add	r3, r1
 8004686:	fbb0 f3f3 	udiv	r3, r0, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e012      	b.n	80046c2 <HAL_I2C_Init+0x18e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	0099      	lsls	r1, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Init+0x196>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e022      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10e      	bne.n	80046f0 <HAL_I2C_Init+0x1bc>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e58      	subs	r0, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	440b      	add	r3, r1
 80046e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e4:	3301      	adds	r3, #1
 80046e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	e00f      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	0099      	lsls	r1, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6809      	ldr	r1, [r1, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800473e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6911      	ldr	r1, [r2, #16]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68d2      	ldr	r2, [r2, #12]
 800474a:	4311      	orrs	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	430b      	orrs	r3, r1
 8004752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	000186a0 	.word	0x000186a0
 80047ac:	001e847f 	.word	0x001e847f
 80047b0:	003d08ff 	.word	0x003d08ff
 80047b4:	431bde83 	.word	0x431bde83
 80047b8:	10624dd3 	.word	0x10624dd3

080047bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d003      	beq.n	80047f4 <HAL_I2C_EV_IRQHandler+0x38>
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	f040 80c1 	bne.w	8004976 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <HAL_I2C_EV_IRQHandler+0x6e>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004814:	d003      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x62>
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800481c:	d101      	bne.n	8004822 <HAL_I2C_EV_IRQHandler+0x66>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x68>
 8004822:	2300      	movs	r3, #0
 8004824:	2b01      	cmp	r3, #1
 8004826:	f000 8132 	beq.w	8004a8e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00c      	beq.n	800484e <HAL_I2C_EV_IRQHandler+0x92>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	0a5b      	lsrs	r3, r3, #9
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d006      	beq.n	800484e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f001 fc7b 	bl	800613c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fd83 	bl	8005352 <I2C_Master_SB>
 800484c:	e092      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	08db      	lsrs	r3, r3, #3
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_I2C_EV_IRQHandler+0xb2>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	0a5b      	lsrs	r3, r3, #9
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fdf9 	bl	800545e <I2C_Master_ADD10>
 800486c:	e082      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0xd2>
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	0a5b      	lsrs	r3, r3, #9
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fe13 	bl	80054b2 <I2C_Master_ADDR>
 800488c:	e072      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d03b      	beq.n	8004912 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a8:	f000 80f3 	beq.w	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	09db      	lsrs	r3, r3, #7
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00f      	beq.n	80048d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	0a9b      	lsrs	r3, r3, #10
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f9f3 	bl	8004cbc <I2C_MasterTransmit_TXE>
 80048d6:	e04d      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80d6 	beq.w	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	0a5b      	lsrs	r3, r3, #9
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80cf 	beq.w	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048f4:	7bbb      	ldrb	r3, [r7, #14]
 80048f6:	2b21      	cmp	r3, #33	; 0x21
 80048f8:	d103      	bne.n	8004902 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa7a 	bl	8004df4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004900:	e0c7      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	f040 80c4 	bne.w	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fae8 	bl	8004ee0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004910:	e0bf      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004920:	f000 80b7 	beq.w	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	099b      	lsrs	r3, r3, #6
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00f      	beq.n	8004950 <HAL_I2C_EV_IRQHandler+0x194>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	0a9b      	lsrs	r3, r3, #10
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <HAL_I2C_EV_IRQHandler+0x194>
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	089b      	lsrs	r3, r3, #2
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fb5d 	bl	8005008 <I2C_MasterReceive_RXNE>
 800494e:	e011      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 809a 	beq.w	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	0a5b      	lsrs	r3, r3, #9
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8093 	beq.w	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fc06 	bl	800517e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004972:	e08e      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004974:	e08d      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e007      	b.n	8004998 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d012      	beq.n	80049ca <HAL_I2C_EV_IRQHandler+0x20e>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	0a5b      	lsrs	r3, r3, #9
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00c      	beq.n	80049ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 ffc4 	bl	8005950 <I2C_Slave_ADDR>
 80049c8:	e066      	b.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_I2C_EV_IRQHandler+0x22e>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	0a5b      	lsrs	r3, r3, #9
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fffe 	bl	80059e4 <I2C_Slave_STOPF>
 80049e8:	e056      	b.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049ea:	7bbb      	ldrb	r3, [r7, #14]
 80049ec:	2b21      	cmp	r3, #33	; 0x21
 80049ee:	d002      	beq.n	80049f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80049f0:	7bbb      	ldrb	r3, [r7, #14]
 80049f2:	2b29      	cmp	r3, #41	; 0x29
 80049f4:	d125      	bne.n	8004a42 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	09db      	lsrs	r3, r3, #7
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00f      	beq.n	8004a22 <HAL_I2C_EV_IRQHandler+0x266>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	0a9b      	lsrs	r3, r3, #10
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_I2C_EV_IRQHandler+0x266>
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 feda 	bl	80057d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a20:	e039      	b.n	8004a96 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d033      	beq.n	8004a96 <HAL_I2C_EV_IRQHandler+0x2da>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	0a5b      	lsrs	r3, r3, #9
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d02d      	beq.n	8004a96 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 ff07 	bl	800584e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a40:	e029      	b.n	8004a96 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00f      	beq.n	8004a6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	0a9b      	lsrs	r3, r3, #10
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 ff12 	bl	8005890 <I2C_SlaveReceive_RXNE>
 8004a6c:	e014      	b.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00e      	beq.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	0a5b      	lsrs	r3, r3, #9
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 ff40 	bl	800590c <I2C_SlaveReceive_BTF>
 8004a8c:	e004      	b.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004a8e:	bf00      	nop
 8004a90:	e002      	b.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a96:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b08a      	sub	sp, #40	; 0x28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <HAL_I2C_ER_IRQHandler+0x4e>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00e      	beq.n	8004b16 <HAL_I2C_ER_IRQHandler+0x78>
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	f043 0302 	orr.w	r3, r3, #2
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004b14:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	0a9b      	lsrs	r3, r3, #10
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d03f      	beq.n	8004ba2 <HAL_I2C_ER_IRQHandler+0x104>
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d039      	beq.n	8004ba2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004b2e:	7efb      	ldrb	r3, [r7, #27]
 8004b30:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b48:	7ebb      	ldrb	r3, [r7, #26]
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d112      	bne.n	8004b74 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10f      	bne.n	8004b74 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	2b21      	cmp	r3, #33	; 0x21
 8004b58:	d008      	beq.n	8004b6c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b5a:	7cfb      	ldrb	r3, [r7, #19]
 8004b5c:	2b29      	cmp	r3, #41	; 0x29
 8004b5e:	d005      	beq.n	8004b6c <HAL_I2C_ER_IRQHandler+0xce>
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	2b28      	cmp	r3, #40	; 0x28
 8004b64:	d106      	bne.n	8004b74 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b21      	cmp	r3, #33	; 0x21
 8004b6a:	d103      	bne.n	8004b74 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f001 f869 	bl	8005c44 <I2C_Slave_AF>
 8004b72:	e016      	b.n	8004ba2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b7c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	f043 0304 	orr.w	r3, r3, #4
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b86:	7efb      	ldrb	r3, [r7, #27]
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d002      	beq.n	8004b92 <HAL_I2C_ER_IRQHandler+0xf4>
 8004b8c:	7efb      	ldrb	r3, [r7, #27]
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d107      	bne.n	8004ba2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	0adb      	lsrs	r3, r3, #11
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00e      	beq.n	8004bcc <HAL_I2C_ER_IRQHandler+0x12e>
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	f043 0308 	orr.w	r3, r3, #8
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004bca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f001 f8a0 	bl	8005d24 <I2C_ITError>
  }
}
 8004be4:	bf00      	nop
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d150      	bne.n	8004d84 <I2C_MasterTransmit_TXE+0xc8>
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b21      	cmp	r3, #33	; 0x21
 8004ce6:	d14d      	bne.n	8004d84 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d01d      	beq.n	8004d2a <I2C_MasterTransmit_TXE+0x6e>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d01a      	beq.n	8004d2a <I2C_MasterTransmit_TXE+0x6e>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cfa:	d016      	beq.n	8004d2a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d0a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2211      	movs	r2, #17
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff ff62 	bl	8004bec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d28:	e060      	b.n	8004dec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d38:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d48:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b40      	cmp	r3, #64	; 0x40
 8004d62:	d107      	bne.n	8004d74 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff7d 	bl	8004c6c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d72:	e03b      	b.n	8004dec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff35 	bl	8004bec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d82:	e033      	b.n	8004dec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	2b21      	cmp	r3, #33	; 0x21
 8004d88:	d005      	beq.n	8004d96 <I2C_MasterTransmit_TXE+0xda>
 8004d8a:	7bbb      	ldrb	r3, [r7, #14]
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d12d      	bne.n	8004dec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b22      	cmp	r3, #34	; 0x22
 8004d94:	d12a      	bne.n	8004dec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d108      	bne.n	8004db2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004db0:	e01c      	b.n	8004dec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d103      	bne.n	8004dc6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f88e 	bl	8004ee0 <I2C_MemoryTransmit_TXE_BTF>
}
 8004dc4:	e012      	b.n	8004dec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dea:	e7ff      	b.n	8004dec <I2C_MasterTransmit_TXE+0x130>
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b21      	cmp	r3, #33	; 0x21
 8004e0c:	d164      	bne.n	8004ed8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d012      	beq.n	8004e3e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e3c:	e04c      	b.n	8004ed8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d01d      	beq.n	8004e80 <I2C_MasterTransmit_BTF+0x8c>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d01a      	beq.n	8004e80 <I2C_MasterTransmit_BTF+0x8c>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e50:	d016      	beq.n	8004e80 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e60:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2211      	movs	r2, #17
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff feb7 	bl	8004bec <HAL_I2C_MasterTxCpltCallback>
}
 8004e7e:	e02b      	b.n	8004ed8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e8e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d107      	bne.n	8004eca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fed2 	bl	8004c6c <HAL_I2C_MemTxCpltCallback>
}
 8004ec8:	e006      	b.n	8004ed8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fe8a 	bl	8004bec <HAL_I2C_MasterTxCpltCallback>
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11d      	bne.n	8004f34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10b      	bne.n	8004f18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f10:	1c9a      	adds	r2, r3, #2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004f16:	e073      	b.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	121b      	asrs	r3, r3, #8
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f32:	e065      	b.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10b      	bne.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f52:	e055      	b.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d151      	bne.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b22      	cmp	r3, #34	; 0x22
 8004f60:	d10d      	bne.n	8004f7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f7c:	e040      	b.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b21      	cmp	r3, #33	; 0x21
 8004f8c:	d112      	bne.n	8004fb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	781a      	ldrb	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fb2:	e025      	b.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d120      	bne.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b21      	cmp	r3, #33	; 0x21
 8004fc2:	d11d      	bne.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fd2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff fe36 	bl	8004c6c <HAL_I2C_MemTxCpltCallback>
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b22      	cmp	r3, #34	; 0x22
 800501a:	f040 80ac 	bne.w	8005176 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d921      	bls.n	8005070 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b03      	cmp	r3, #3
 800505a:	f040 808c 	bne.w	8005176 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800506e:	e082      	b.n	8005176 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	2b02      	cmp	r3, #2
 8005076:	d075      	beq.n	8005164 <I2C_MasterReceive_RXNE+0x15c>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d002      	beq.n	8005084 <I2C_MasterReceive_RXNE+0x7c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d16f      	bne.n	8005164 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f001 f827 	bl	80060d8 <I2C_WaitOnSTOPRequestThroughIT>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d142      	bne.n	8005116 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d10a      	bne.n	8005100 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff fdc1 	bl	8004c80 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050fe:	e03a      	b.n	8005176 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2212      	movs	r2, #18
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fd76 	bl	8004c00 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005114:	e02f      	b.n	8005176 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005124:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff fd99 	bl	8004c94 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005162:	e008      	b.n	8005176 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005172:	605a      	str	r2, [r3, #4]
}
 8005174:	e7ff      	b.n	8005176 <I2C_MasterReceive_RXNE+0x16e>
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b04      	cmp	r3, #4
 8005194:	d11b      	bne.n	80051ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80051cc:	e0bd      	b.n	800534a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d129      	bne.n	800522c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d00a      	beq.n	8005204 <I2C_MasterReceive_BTF+0x86>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d007      	beq.n	8005204 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005202:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800522a:	e08e      	b.n	800534a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d176      	bne.n	8005324 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d002      	beq.n	8005242 <I2C_MasterReceive_BTF+0xc4>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b10      	cmp	r3, #16
 8005240:	d108      	bne.n	8005254 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e019      	b.n	8005288 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b04      	cmp	r3, #4
 8005258:	d002      	beq.n	8005260 <I2C_MasterReceive_BTF+0xe2>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d108      	bne.n	8005272 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e00a      	b.n	8005288 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b10      	cmp	r3, #16
 8005276:	d007      	beq.n	8005288 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005286:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80052e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d10a      	bne.n	800530e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fcba 	bl	8004c80 <HAL_I2C_MemRxCpltCallback>
}
 800530c:	e01d      	b.n	800534a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2212      	movs	r2, #18
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fc6f 	bl	8004c00 <HAL_I2C_MasterRxCpltCallback>
}
 8005322:	e012      	b.n	800534a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d117      	bne.n	8005396 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800537e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005380:	e067      	b.n	8005452 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	b2da      	uxtb	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]
}
 8005394:	e05d      	b.n	8005452 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539e:	d133      	bne.n	8005408 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b21      	cmp	r3, #33	; 0x21
 80053aa:	d109      	bne.n	80053c0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053bc:	611a      	str	r2, [r3, #16]
 80053be:	e008      	b.n	80053d2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <I2C_Master_SB+0x92>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d108      	bne.n	80053f6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d032      	beq.n	8005452 <I2C_Master_SB+0x100>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d02d      	beq.n	8005452 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005404:	605a      	str	r2, [r3, #4]
}
 8005406:	e024      	b.n	8005452 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10e      	bne.n	800542e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005414:	b29b      	uxth	r3, r3
 8005416:	11db      	asrs	r3, r3, #7
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 0306 	and.w	r3, r3, #6
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f063 030f 	orn	r3, r3, #15
 8005424:	b2da      	uxtb	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	611a      	str	r2, [r3, #16]
}
 800542c:	e011      	b.n	8005452 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10d      	bne.n	8005452 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	b29b      	uxth	r3, r3
 800543c:	11db      	asrs	r3, r3, #7
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f003 0306 	and.w	r3, r3, #6
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f063 030e 	orn	r3, r3, #14
 800544a:	b2da      	uxtb	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	611a      	str	r2, [r3, #16]
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	b2da      	uxtb	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <I2C_Master_ADD10+0x26>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00c      	beq.n	80054a6 <I2C_Master_ADD10+0x48>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a4:	605a      	str	r2, [r3, #4]
  }
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b091      	sub	sp, #68	; 0x44
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b22      	cmp	r3, #34	; 0x22
 80054da:	f040 8169 	bne.w	80057b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <I2C_Master_ADDR+0x54>
 80054e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d10b      	bne.n	8005506 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ee:	2300      	movs	r3, #0
 80054f0:	633b      	str	r3, [r7, #48]	; 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	633b      	str	r3, [r7, #48]	; 0x30
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	e160      	b.n	80057c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11d      	bne.n	800554a <I2C_Master_ADDR+0x98>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005516:	d118      	bne.n	800554a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005518:	2300      	movs	r3, #0
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800553c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	651a      	str	r2, [r3, #80]	; 0x50
 8005548:	e13e      	b.n	80057c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d113      	bne.n	800557c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005554:	2300      	movs	r3, #0
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e115      	b.n	80057a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b01      	cmp	r3, #1
 8005584:	f040 808a 	bne.w	800569c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800558e:	d137      	bne.n	8005600 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ae:	d113      	bne.n	80055d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	e0e7      	b.n	80057a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d8:	2300      	movs	r3, #0
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e0d3      	b.n	80057a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	2b08      	cmp	r3, #8
 8005604:	d02e      	beq.n	8005664 <I2C_Master_ADDR+0x1b2>
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2b20      	cmp	r3, #32
 800560a:	d02b      	beq.n	8005664 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	2b12      	cmp	r3, #18
 8005610:	d102      	bne.n	8005618 <I2C_Master_ADDR+0x166>
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	2b01      	cmp	r3, #1
 8005616:	d125      	bne.n	8005664 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	2b04      	cmp	r3, #4
 800561c:	d00e      	beq.n	800563c <I2C_Master_ADDR+0x18a>
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2b02      	cmp	r3, #2
 8005622:	d00b      	beq.n	800563c <I2C_Master_ADDR+0x18a>
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	2b10      	cmp	r3, #16
 8005628:	d008      	beq.n	800563c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e007      	b.n	800564c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800564a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	e0a1      	b.n	80057a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005672:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005674:	2300      	movs	r3, #0
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e085      	b.n	80057a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d14d      	bne.n	8005742 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d016      	beq.n	80056da <I2C_Master_ADDR+0x228>
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d013      	beq.n	80056da <I2C_Master_ADDR+0x228>
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d010      	beq.n	80056da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e007      	b.n	80056ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f8:	d117      	bne.n	800572a <I2C_Master_ADDR+0x278>
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005700:	d00b      	beq.n	800571a <I2C_Master_ADDR+0x268>
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	2b01      	cmp	r3, #1
 8005706:	d008      	beq.n	800571a <I2C_Master_ADDR+0x268>
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	2b08      	cmp	r3, #8
 800570c:	d005      	beq.n	800571a <I2C_Master_ADDR+0x268>
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	2b10      	cmp	r3, #16
 8005712:	d002      	beq.n	800571a <I2C_Master_ADDR+0x268>
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	2b20      	cmp	r3, #32
 8005718:	d107      	bne.n	800572a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005728:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	e032      	b.n	80057a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005750:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005760:	d117      	bne.n	8005792 <I2C_Master_ADDR+0x2e0>
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005768:	d00b      	beq.n	8005782 <I2C_Master_ADDR+0x2d0>
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	2b01      	cmp	r3, #1
 800576e:	d008      	beq.n	8005782 <I2C_Master_ADDR+0x2d0>
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	2b08      	cmp	r3, #8
 8005774:	d005      	beq.n	8005782 <I2C_Master_ADDR+0x2d0>
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	2b10      	cmp	r3, #16
 800577a:	d002      	beq.n	8005782 <I2C_Master_ADDR+0x2d0>
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	2b20      	cmp	r3, #32
 8005780:	d107      	bne.n	8005792 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005790:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80057ae:	e00b      	b.n	80057c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
}
 80057c6:	e7ff      	b.n	80057c8 <I2C_Master_ADDR+0x316>
 80057c8:	bf00      	nop
 80057ca:	3744      	adds	r7, #68	; 0x44
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d02b      	beq.n	8005846 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	781a      	ldrb	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d114      	bne.n	8005846 <I2C_SlaveTransmit_TXE+0x72>
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	2b29      	cmp	r3, #41	; 0x29
 8005820:	d111      	bne.n	8005846 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005830:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2221      	movs	r2, #33	; 0x21
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2228      	movs	r2, #40	; 0x28
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff f9e7 	bl	8004c14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	781a      	ldrb	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d02c      	beq.n	8005904 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d114      	bne.n	8005904 <I2C_SlaveReceive_RXNE+0x74>
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b2a      	cmp	r3, #42	; 0x2a
 80058de:	d111      	bne.n	8005904 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2222      	movs	r2, #34	; 0x22
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2228      	movs	r2, #40	; 0x28
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff f992 	bl	8004c28 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d012      	beq.n	8005944 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800596a:	2b28      	cmp	r3, #40	; 0x28
 800596c:	d127      	bne.n	80059be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	09db      	lsrs	r3, r3, #7
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	81bb      	strh	r3, [r7, #12]
 80059a0:	e002      	b.n	80059a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80059b0:	89ba      	ldrh	r2, [r7, #12]
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff f940 	bl	8004c3c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80059bc:	e00e      	b.n	80059dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a02:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005a04:	2300      	movs	r3, #0
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a30:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a40:	d172      	bne.n	8005b28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b22      	cmp	r3, #34	; 0x22
 8005a46:	d002      	beq.n	8005a4e <I2C_Slave_STOPF+0x6a>
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a4c:	d135      	bne.n	8005aba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f043 0204 	orr.w	r2, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fade 	bl	8004048 <HAL_DMA_GetState>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d049      	beq.n	8005b26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	4a69      	ldr	r2, [pc, #420]	; (8005c3c <I2C_Slave_STOPF+0x258>)
 8005a98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe f926 	bl	8003cf0 <HAL_DMA_Abort_IT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d03d      	beq.n	8005b26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ab8:	e035      	b.n	8005b26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f043 0204 	orr.w	r2, r3, #4
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe faa8 	bl	8004048 <HAL_DMA_GetState>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d014      	beq.n	8005b28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	4a4e      	ldr	r2, [pc, #312]	; (8005c3c <I2C_Slave_STOPF+0x258>)
 8005b04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe f8f0 	bl	8003cf0 <HAL_DMA_Abort_IT>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
 8005b24:	e000      	b.n	8005b28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d03e      	beq.n	8005bb0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d112      	bne.n	8005b66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d112      	bne.n	8005b9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	f043 0204 	orr.w	r2, r3, #4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8b3 	bl	8005d24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005bbe:	e039      	b.n	8005c34 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc4:	d109      	bne.n	8005bda <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2228      	movs	r2, #40	; 0x28
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff f827 	bl	8004c28 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b28      	cmp	r3, #40	; 0x28
 8005be4:	d111      	bne.n	8005c0a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <I2C_Slave_STOPF+0x25c>)
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff f828 	bl	8004c58 <HAL_I2C_ListenCpltCallback>
}
 8005c08:	e014      	b.n	8005c34 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	2b22      	cmp	r3, #34	; 0x22
 8005c10:	d002      	beq.n	8005c18 <I2C_Slave_STOPF+0x234>
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b22      	cmp	r3, #34	; 0x22
 8005c16:	d10d      	bne.n	8005c34 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fe fffa 	bl	8004c28 <HAL_I2C_SlaveRxCpltCallback>
}
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	08005f89 	.word	0x08005f89
 8005c40:	ffff0000 	.word	0xffff0000

08005c44 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d002      	beq.n	8005c66 <I2C_Slave_AF+0x22>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d129      	bne.n	8005cba <I2C_Slave_AF+0x76>
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	2b28      	cmp	r3, #40	; 0x28
 8005c6a:	d126      	bne.n	8005cba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a2c      	ldr	r2, [pc, #176]	; (8005d20 <I2C_Slave_AF+0xdc>)
 8005c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c80:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c8a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c9a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fe ffd0 	bl	8004c58 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005cb8:	e02e      	b.n	8005d18 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	2b21      	cmp	r3, #33	; 0x21
 8005cbe:	d126      	bne.n	8005d0e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <I2C_Slave_AF+0xdc>)
 8005cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2221      	movs	r2, #33	; 0x21
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cf4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d04:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fe ff84 	bl	8004c14 <HAL_I2C_SlaveTxCpltCallback>
}
 8005d0c:	e004      	b.n	8005d18 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d16:	615a      	str	r2, [r3, #20]
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	ffff0000 	.word	0xffff0000

08005d24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d002      	beq.n	8005d48 <I2C_ITError+0x24>
 8005d42:	7bbb      	ldrb	r3, [r7, #14]
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d10a      	bne.n	8005d5e <I2C_ITError+0x3a>
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	2b22      	cmp	r3, #34	; 0x22
 8005d4c:	d107      	bne.n	8005d5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d64:	2b28      	cmp	r3, #40	; 0x28
 8005d66:	d107      	bne.n	8005d78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2228      	movs	r2, #40	; 0x28
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d76:	e015      	b.n	8005da4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d86:	d00a      	beq.n	8005d9e <I2C_ITError+0x7a>
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	2b60      	cmp	r3, #96	; 0x60
 8005d8c:	d007      	beq.n	8005d9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db2:	d162      	bne.n	8005e7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d020      	beq.n	8005e14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	4a6a      	ldr	r2, [pc, #424]	; (8005f80 <I2C_ITError+0x25c>)
 8005dd8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fd ff86 	bl	8003cf0 <HAL_DMA_Abort_IT>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8089 	beq.w	8005efe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e0e:	4610      	mov	r0, r2
 8005e10:	4798      	blx	r3
 8005e12:	e074      	b.n	8005efe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	4a59      	ldr	r2, [pc, #356]	; (8005f80 <I2C_ITError+0x25c>)
 8005e1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fd ff65 	bl	8003cf0 <HAL_DMA_Abort_IT>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d068      	beq.n	8005efe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d10b      	bne.n	8005e52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0201 	bic.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	e041      	b.n	8005efe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b60      	cmp	r3, #96	; 0x60
 8005e84:	d125      	bne.n	8005ed2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d10b      	bne.n	8005eba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fe feec 	bl	8004ca8 <HAL_I2C_AbortCpltCallback>
 8005ed0:	e015      	b.n	8005efe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d10b      	bne.n	8005ef8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fe fecb 	bl	8004c94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10e      	bne.n	8005f2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d109      	bne.n	8005f2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d104      	bne.n	8005f2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d113      	bne.n	8005f78 <I2C_ITError+0x254>
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b28      	cmp	r3, #40	; 0x28
 8005f54:	d110      	bne.n	8005f78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a0a      	ldr	r2, [pc, #40]	; (8005f84 <I2C_ITError+0x260>)
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fe fe70 	bl	8004c58 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	08005f89 	.word	0x08005f89
 8005f84:	ffff0000 	.word	0xffff0000

08005f88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fa2:	4b4b      	ldr	r3, [pc, #300]	; (80060d0 <I2C_DMAAbort+0x148>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	08db      	lsrs	r3, r3, #3
 8005fa8:	4a4a      	ldr	r2, [pc, #296]	; (80060d4 <I2C_DMAAbort+0x14c>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	0a1a      	lsrs	r2, r3, #8
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	00da      	lsls	r2, r3, #3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005fce:	e00a      	b.n	8005fe6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d0ea      	beq.n	8005fbc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	2200      	movs	r2, #0
 8006004:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006014:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	2200      	movs	r2, #0
 800602a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	2200      	movs	r2, #0
 800603a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b60      	cmp	r3, #96	; 0x60
 8006056:	d10e      	bne.n	8006076 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f7fe fe1a 	bl	8004ca8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006074:	e027      	b.n	80060c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006076:	7cfb      	ldrb	r3, [r7, #19]
 8006078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800607c:	2b28      	cmp	r3, #40	; 0x28
 800607e:	d117      	bne.n	80060b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800609e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2200      	movs	r2, #0
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2228      	movs	r2, #40	; 0x28
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060ae:	e007      	b.n	80060c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80060c0:	6978      	ldr	r0, [r7, #20]
 80060c2:	f7fe fde7 	bl	8004c94 <HAL_I2C_ErrorCallback>
}
 80060c6:	bf00      	nop
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	2000000c 	.word	0x2000000c
 80060d4:	14f8b589 	.word	0x14f8b589

080060d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	4a13      	ldr	r2, [pc, #76]	; (8006138 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	0a1a      	lsrs	r2, r3, #8
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d107      	bne.n	8006116 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e008      	b.n	8006128 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006124:	d0e9      	beq.n	80060fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	2000000c 	.word	0x2000000c
 8006138:	14f8b589 	.word	0x14f8b589

0800613c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800614c:	d103      	bne.n	8006156 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006154:	e007      	b.n	8006166 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800615e:	d102      	bne.n	8006166 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2208      	movs	r2, #8
 8006164:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
	...

08006174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e267      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d075      	beq.n	800627e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006192:	4b88      	ldr	r3, [pc, #544]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b04      	cmp	r3, #4
 800619c:	d00c      	beq.n	80061b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800619e:	4b85      	ldr	r3, [pc, #532]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d112      	bne.n	80061d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061aa:	4b82      	ldr	r3, [pc, #520]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b6:	d10b      	bne.n	80061d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b8:	4b7e      	ldr	r3, [pc, #504]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d05b      	beq.n	800627c <HAL_RCC_OscConfig+0x108>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d157      	bne.n	800627c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e242      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d8:	d106      	bne.n	80061e8 <HAL_RCC_OscConfig+0x74>
 80061da:	4b76      	ldr	r3, [pc, #472]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a75      	ldr	r2, [pc, #468]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e01d      	b.n	8006224 <HAL_RCC_OscConfig+0xb0>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061f0:	d10c      	bne.n	800620c <HAL_RCC_OscConfig+0x98>
 80061f2:	4b70      	ldr	r3, [pc, #448]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a6f      	ldr	r2, [pc, #444]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	4b6d      	ldr	r3, [pc, #436]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6c      	ldr	r2, [pc, #432]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e00b      	b.n	8006224 <HAL_RCC_OscConfig+0xb0>
 800620c:	4b69      	ldr	r3, [pc, #420]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a68      	ldr	r2, [pc, #416]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	4b66      	ldr	r3, [pc, #408]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 800621e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d013      	beq.n	8006254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622c:	f7fd fb70 	bl	8003910 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006234:	f7fd fb6c 	bl	8003910 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b64      	cmp	r3, #100	; 0x64
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e207      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006246:	4b5b      	ldr	r3, [pc, #364]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0xc0>
 8006252:	e014      	b.n	800627e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fd fb5c 	bl	8003910 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800625c:	f7fd fb58 	bl	8003910 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e1f3      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800626e:	4b51      	ldr	r3, [pc, #324]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0xe8>
 800627a:	e000      	b.n	800627e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800627c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d063      	beq.n	8006352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800628a:	4b4a      	ldr	r3, [pc, #296]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006296:	4b47      	ldr	r3, [pc, #284]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d11c      	bne.n	80062dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062a2:	4b44      	ldr	r3, [pc, #272]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d116      	bne.n	80062dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ae:	4b41      	ldr	r3, [pc, #260]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_RCC_OscConfig+0x152>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d001      	beq.n	80062c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e1c7      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c6:	4b3b      	ldr	r3, [pc, #236]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	4937      	ldr	r1, [pc, #220]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062da:	e03a      	b.n	8006352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062e4:	4b34      	ldr	r3, [pc, #208]	; (80063b8 <HAL_RCC_OscConfig+0x244>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ea:	f7fd fb11 	bl	8003910 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062f2:	f7fd fb0d 	bl	8003910 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e1a8      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006304:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006310:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	4925      	ldr	r1, [pc, #148]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006320:	4313      	orrs	r3, r2
 8006322:	600b      	str	r3, [r1, #0]
 8006324:	e015      	b.n	8006352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006326:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <HAL_RCC_OscConfig+0x244>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fd faf0 	bl	8003910 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006334:	f7fd faec 	bl	8003910 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e187      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006346:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d036      	beq.n	80063cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006366:	4b15      	ldr	r3, [pc, #84]	; (80063bc <HAL_RCC_OscConfig+0x248>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fd fad0 	bl	8003910 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006374:	f7fd facc 	bl	8003910 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e167      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x200>
 8006392:	e01b      	b.n	80063cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_OscConfig+0x248>)
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800639a:	f7fd fab9 	bl	8003910 <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a0:	e00e      	b.n	80063c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063a2:	f7fd fab5 	bl	8003910 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d907      	bls.n	80063c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e150      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
 80063b4:	40023800 	.word	0x40023800
 80063b8:	42470000 	.word	0x42470000
 80063bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c0:	4b88      	ldr	r3, [pc, #544]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1ea      	bne.n	80063a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8097 	beq.w	8006508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063da:	2300      	movs	r3, #0
 80063dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063de:	4b81      	ldr	r3, [pc, #516]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	4b7d      	ldr	r3, [pc, #500]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	4a7c      	ldr	r2, [pc, #496]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f8:	6413      	str	r3, [r2, #64]	; 0x40
 80063fa:	4b7a      	ldr	r3, [pc, #488]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640a:	4b77      	ldr	r3, [pc, #476]	; (80065e8 <HAL_RCC_OscConfig+0x474>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d118      	bne.n	8006448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006416:	4b74      	ldr	r3, [pc, #464]	; (80065e8 <HAL_RCC_OscConfig+0x474>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a73      	ldr	r2, [pc, #460]	; (80065e8 <HAL_RCC_OscConfig+0x474>)
 800641c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006422:	f7fd fa75 	bl	8003910 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642a:	f7fd fa71 	bl	8003910 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e10c      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643c:	4b6a      	ldr	r3, [pc, #424]	; (80065e8 <HAL_RCC_OscConfig+0x474>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f0      	beq.n	800642a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d106      	bne.n	800645e <HAL_RCC_OscConfig+0x2ea>
 8006450:	4b64      	ldr	r3, [pc, #400]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006454:	4a63      	ldr	r2, [pc, #396]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	6713      	str	r3, [r2, #112]	; 0x70
 800645c:	e01c      	b.n	8006498 <HAL_RCC_OscConfig+0x324>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b05      	cmp	r3, #5
 8006464:	d10c      	bne.n	8006480 <HAL_RCC_OscConfig+0x30c>
 8006466:	4b5f      	ldr	r3, [pc, #380]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	4a5e      	ldr	r2, [pc, #376]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 800646c:	f043 0304 	orr.w	r3, r3, #4
 8006470:	6713      	str	r3, [r2, #112]	; 0x70
 8006472:	4b5c      	ldr	r3, [pc, #368]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	4a5b      	ldr	r2, [pc, #364]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	6713      	str	r3, [r2, #112]	; 0x70
 800647e:	e00b      	b.n	8006498 <HAL_RCC_OscConfig+0x324>
 8006480:	4b58      	ldr	r3, [pc, #352]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006484:	4a57      	ldr	r2, [pc, #348]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	6713      	str	r3, [r2, #112]	; 0x70
 800648c:	4b55      	ldr	r3, [pc, #340]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	4a54      	ldr	r2, [pc, #336]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006492:	f023 0304 	bic.w	r3, r3, #4
 8006496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d015      	beq.n	80064cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a0:	f7fd fa36 	bl	8003910 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a6:	e00a      	b.n	80064be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064a8:	f7fd fa32 	bl	8003910 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e0cb      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064be:	4b49      	ldr	r3, [pc, #292]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0ee      	beq.n	80064a8 <HAL_RCC_OscConfig+0x334>
 80064ca:	e014      	b.n	80064f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064cc:	f7fd fa20 	bl	8003910 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064d2:	e00a      	b.n	80064ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d4:	f7fd fa1c 	bl	8003910 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e0b5      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064ea:	4b3e      	ldr	r3, [pc, #248]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1ee      	bne.n	80064d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d105      	bne.n	8006508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064fc:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	4a38      	ldr	r2, [pc, #224]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a1 	beq.w	8006654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006512:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 030c 	and.w	r3, r3, #12
 800651a:	2b08      	cmp	r3, #8
 800651c:	d05c      	beq.n	80065d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d141      	bne.n	80065aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006526:	4b31      	ldr	r3, [pc, #196]	; (80065ec <HAL_RCC_OscConfig+0x478>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fd f9f0 	bl	8003910 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006534:	f7fd f9ec 	bl	8003910 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e087      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69da      	ldr	r2, [r3, #28]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	019b      	lsls	r3, r3, #6
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	3b01      	subs	r3, #1
 800656c:	041b      	lsls	r3, r3, #16
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	061b      	lsls	r3, r3, #24
 8006576:	491b      	ldr	r1, [pc, #108]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <HAL_RCC_OscConfig+0x478>)
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006582:	f7fd f9c5 	bl	8003910 <HAL_GetTick>
 8006586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006588:	e008      	b.n	800659c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800658a:	f7fd f9c1 	bl	8003910 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e05c      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800659c:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0f0      	beq.n	800658a <HAL_RCC_OscConfig+0x416>
 80065a8:	e054      	b.n	8006654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <HAL_RCC_OscConfig+0x478>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b0:	f7fd f9ae 	bl	8003910 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b8:	f7fd f9aa 	bl	8003910 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e045      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x444>
 80065d6:	e03d      	b.n	8006654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d107      	bne.n	80065f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e038      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
 80065e4:	40023800 	.word	0x40023800
 80065e8:	40007000 	.word	0x40007000
 80065ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065f0:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <HAL_RCC_OscConfig+0x4ec>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d028      	beq.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006608:	429a      	cmp	r2, r3
 800660a:	d121      	bne.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006616:	429a      	cmp	r2, r3
 8006618:	d11a      	bne.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006620:	4013      	ands	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006628:	4293      	cmp	r3, r2
 800662a:	d111      	bne.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	3b01      	subs	r3, #1
 800663a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d107      	bne.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40023800 	.word	0x40023800

08006664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0cc      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006678:	4b68      	ldr	r3, [pc, #416]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d90c      	bls.n	80066a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006686:	4b65      	ldr	r3, [pc, #404]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800668e:	4b63      	ldr	r3, [pc, #396]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0b8      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d020      	beq.n	80066ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066b8:	4b59      	ldr	r3, [pc, #356]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4a58      	ldr	r2, [pc, #352]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066d0:	4b53      	ldr	r3, [pc, #332]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4a52      	ldr	r2, [pc, #328]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066dc:	4b50      	ldr	r3, [pc, #320]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	494d      	ldr	r1, [pc, #308]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d044      	beq.n	8006784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d107      	bne.n	8006712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006702:	4b47      	ldr	r3, [pc, #284]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d119      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e07f      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d003      	beq.n	8006722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671e:	2b03      	cmp	r3, #3
 8006720:	d107      	bne.n	8006732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006722:	4b3f      	ldr	r3, [pc, #252]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e06f      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006732:	4b3b      	ldr	r3, [pc, #236]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e067      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006742:	4b37      	ldr	r3, [pc, #220]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f023 0203 	bic.w	r2, r3, #3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	4934      	ldr	r1, [pc, #208]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	4313      	orrs	r3, r2
 8006752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006754:	f7fd f8dc 	bl	8003910 <HAL_GetTick>
 8006758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800675a:	e00a      	b.n	8006772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800675c:	f7fd f8d8 	bl	8003910 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f241 3288 	movw	r2, #5000	; 0x1388
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e04f      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006772:	4b2b      	ldr	r3, [pc, #172]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 020c 	and.w	r2, r3, #12
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	429a      	cmp	r2, r3
 8006782:	d1eb      	bne.n	800675c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006784:	4b25      	ldr	r3, [pc, #148]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d20c      	bcs.n	80067ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b22      	ldr	r3, [pc, #136]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800679a:	4b20      	ldr	r3, [pc, #128]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d001      	beq.n	80067ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e032      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067b8:	4b19      	ldr	r3, [pc, #100]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4916      	ldr	r1, [pc, #88]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067d6:	4b12      	ldr	r3, [pc, #72]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	490e      	ldr	r1, [pc, #56]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067ea:	f000 f821 	bl	8006830 <HAL_RCC_GetSysClockFreq>
 80067ee:	4602      	mov	r2, r0
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	490a      	ldr	r1, [pc, #40]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 80067fc:	5ccb      	ldrb	r3, [r1, r3]
 80067fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006802:	4a09      	ldr	r2, [pc, #36]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_RCC_ClockConfig+0x1c8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7fd f83c 	bl	8003888 <HAL_InitTick>

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40023c00 	.word	0x40023c00
 8006820:	40023800 	.word	0x40023800
 8006824:	0800b574 	.word	0x0800b574
 8006828:	2000000c 	.word	0x2000000c
 800682c:	20000010 	.word	0x20000010

08006830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006834:	b094      	sub	sp, #80	; 0x50
 8006836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	647b      	str	r3, [r7, #68]	; 0x44
 800683c:	2300      	movs	r3, #0
 800683e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006840:	2300      	movs	r3, #0
 8006842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006848:	4b79      	ldr	r3, [pc, #484]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	2b08      	cmp	r3, #8
 8006852:	d00d      	beq.n	8006870 <HAL_RCC_GetSysClockFreq+0x40>
 8006854:	2b08      	cmp	r3, #8
 8006856:	f200 80e1 	bhi.w	8006a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0x34>
 800685e:	2b04      	cmp	r3, #4
 8006860:	d003      	beq.n	800686a <HAL_RCC_GetSysClockFreq+0x3a>
 8006862:	e0db      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006864:	4b73      	ldr	r3, [pc, #460]	; (8006a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006866:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006868:	e0db      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800686a:	4b73      	ldr	r3, [pc, #460]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800686c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800686e:	e0d8      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006870:	4b6f      	ldr	r3, [pc, #444]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006878:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800687a:	4b6d      	ldr	r3, [pc, #436]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d063      	beq.n	800694e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006886:	4b6a      	ldr	r3, [pc, #424]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	099b      	lsrs	r3, r3, #6
 800688c:	2200      	movs	r2, #0
 800688e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006898:	633b      	str	r3, [r7, #48]	; 0x30
 800689a:	2300      	movs	r3, #0
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
 800689e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80068a2:	4622      	mov	r2, r4
 80068a4:	462b      	mov	r3, r5
 80068a6:	f04f 0000 	mov.w	r0, #0
 80068aa:	f04f 0100 	mov.w	r1, #0
 80068ae:	0159      	lsls	r1, r3, #5
 80068b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068b4:	0150      	lsls	r0, r2, #5
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4621      	mov	r1, r4
 80068bc:	1a51      	subs	r1, r2, r1
 80068be:	6139      	str	r1, [r7, #16]
 80068c0:	4629      	mov	r1, r5
 80068c2:	eb63 0301 	sbc.w	r3, r3, r1
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068d4:	4659      	mov	r1, fp
 80068d6:	018b      	lsls	r3, r1, #6
 80068d8:	4651      	mov	r1, sl
 80068da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068de:	4651      	mov	r1, sl
 80068e0:	018a      	lsls	r2, r1, #6
 80068e2:	4651      	mov	r1, sl
 80068e4:	ebb2 0801 	subs.w	r8, r2, r1
 80068e8:	4659      	mov	r1, fp
 80068ea:	eb63 0901 	sbc.w	r9, r3, r1
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006902:	4690      	mov	r8, r2
 8006904:	4699      	mov	r9, r3
 8006906:	4623      	mov	r3, r4
 8006908:	eb18 0303 	adds.w	r3, r8, r3
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	462b      	mov	r3, r5
 8006910:	eb49 0303 	adc.w	r3, r9, r3
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006922:	4629      	mov	r1, r5
 8006924:	024b      	lsls	r3, r1, #9
 8006926:	4621      	mov	r1, r4
 8006928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800692c:	4621      	mov	r1, r4
 800692e:	024a      	lsls	r2, r1, #9
 8006930:	4610      	mov	r0, r2
 8006932:	4619      	mov	r1, r3
 8006934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006936:	2200      	movs	r2, #0
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
 800693a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800693c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006940:	f7f9 fc4a 	bl	80001d8 <__aeabi_uldivmod>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4613      	mov	r3, r2
 800694a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800694c:	e058      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800694e:	4b38      	ldr	r3, [pc, #224]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	099b      	lsrs	r3, r3, #6
 8006954:	2200      	movs	r2, #0
 8006956:	4618      	mov	r0, r3
 8006958:	4611      	mov	r1, r2
 800695a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800695e:	623b      	str	r3, [r7, #32]
 8006960:	2300      	movs	r3, #0
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	f04f 0000 	mov.w	r0, #0
 8006970:	f04f 0100 	mov.w	r1, #0
 8006974:	0159      	lsls	r1, r3, #5
 8006976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800697a:	0150      	lsls	r0, r2, #5
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4641      	mov	r1, r8
 8006982:	ebb2 0a01 	subs.w	sl, r2, r1
 8006986:	4649      	mov	r1, r9
 8006988:	eb63 0b01 	sbc.w	fp, r3, r1
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800699c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069a0:	ebb2 040a 	subs.w	r4, r2, sl
 80069a4:	eb63 050b 	sbc.w	r5, r3, fp
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	00eb      	lsls	r3, r5, #3
 80069b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b6:	00e2      	lsls	r2, r4, #3
 80069b8:	4614      	mov	r4, r2
 80069ba:	461d      	mov	r5, r3
 80069bc:	4643      	mov	r3, r8
 80069be:	18e3      	adds	r3, r4, r3
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	464b      	mov	r3, r9
 80069c4:	eb45 0303 	adc.w	r3, r5, r3
 80069c8:	607b      	str	r3, [r7, #4]
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069d6:	4629      	mov	r1, r5
 80069d8:	028b      	lsls	r3, r1, #10
 80069da:	4621      	mov	r1, r4
 80069dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069e0:	4621      	mov	r1, r4
 80069e2:	028a      	lsls	r2, r1, #10
 80069e4:	4610      	mov	r0, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ea:	2200      	movs	r2, #0
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	61fa      	str	r2, [r7, #28]
 80069f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f4:	f7f9 fbf0 	bl	80001d8 <__aeabi_uldivmod>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4613      	mov	r3, r2
 80069fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a1a:	e002      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a1c:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3750      	adds	r7, #80	; 0x50
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023800 	.word	0x40023800
 8006a34:	00f42400 	.word	0x00f42400
 8006a38:	007a1200 	.word	0x007a1200

08006a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a42:	681b      	ldr	r3, [r3, #0]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	2000000c 	.word	0x2000000c

08006a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a58:	f7ff fff0 	bl	8006a3c <HAL_RCC_GetHCLKFreq>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	0a9b      	lsrs	r3, r3, #10
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4903      	ldr	r1, [pc, #12]	; (8006a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a6a:	5ccb      	ldrb	r3, [r1, r3]
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40023800 	.word	0x40023800
 8006a78:	0800b584 	.word	0x0800b584

08006a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a80:	f7ff ffdc 	bl	8006a3c <HAL_RCC_GetHCLKFreq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	0b5b      	lsrs	r3, r3, #13
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	4903      	ldr	r1, [pc, #12]	; (8006aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a92:	5ccb      	ldrb	r3, [r1, r3]
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	0800b584 	.word	0x0800b584

08006aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e07b      	b.n	8006bae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d108      	bne.n	8006ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ac6:	d009      	beq.n	8006adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	61da      	str	r2, [r3, #28]
 8006ace:	e005      	b.n	8006adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fc fad8 	bl	80030ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b60:	ea42 0103 	orr.w	r1, r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	0c1b      	lsrs	r3, r3, #16
 8006b7a:	f003 0104 	and.w	r1, r3, #4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	f003 0210 	and.w	r2, r3, #16
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b088      	sub	sp, #32
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	603b      	str	r3, [r7, #0]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_SPI_Transmit+0x22>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e126      	b.n	8006e26 <HAL_SPI_Transmit+0x270>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006be0:	f7fc fe96 	bl	8003910 <HAL_GetTick>
 8006be4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d002      	beq.n	8006bfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bfa:	e10b      	b.n	8006e14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_SPI_Transmit+0x52>
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c0c:	e102      	b.n	8006e14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2203      	movs	r2, #3
 8006c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	88fa      	ldrh	r2, [r7, #6]
 8006c26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	88fa      	ldrh	r2, [r7, #6]
 8006c2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c54:	d10f      	bne.n	8006c76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d007      	beq.n	8006c94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c9c:	d14b      	bne.n	8006d36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HAL_SPI_Transmit+0xf6>
 8006ca6:	8afb      	ldrh	r3, [r7, #22]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d13e      	bne.n	8006d2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	881a      	ldrh	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	1c9a      	adds	r2, r3, #2
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cd0:	e02b      	b.n	8006d2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d112      	bne.n	8006d06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce4:	881a      	ldrh	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	1c9a      	adds	r2, r3, #2
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d04:	e011      	b.n	8006d2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d06:	f7fc fe03 	bl	8003910 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d803      	bhi.n	8006d1e <HAL_SPI_Transmit+0x168>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d102      	bne.n	8006d24 <HAL_SPI_Transmit+0x16e>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d28:	e074      	b.n	8006e14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1ce      	bne.n	8006cd2 <HAL_SPI_Transmit+0x11c>
 8006d34:	e04c      	b.n	8006dd0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_SPI_Transmit+0x18e>
 8006d3e:	8afb      	ldrh	r3, [r7, #22]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d140      	bne.n	8006dc6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	7812      	ldrb	r2, [r2, #0]
 8006d50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d6a:	e02c      	b.n	8006dc6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d113      	bne.n	8006da2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	330c      	adds	r3, #12
 8006d84:	7812      	ldrb	r2, [r2, #0]
 8006d86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006da0:	e011      	b.n	8006dc6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da2:	f7fc fdb5 	bl	8003910 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d803      	bhi.n	8006dba <HAL_SPI_Transmit+0x204>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d102      	bne.n	8006dc0 <HAL_SPI_Transmit+0x20a>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dc4:	e026      	b.n	8006e14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1cd      	bne.n	8006d6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fce9 	bl	80077ac <SPI_EndRxTxTransaction>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dee:	2300      	movs	r3, #0
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	e000      	b.n	8006e14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3720      	adds	r7, #32
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b088      	sub	sp, #32
 8006e32:	af02      	add	r7, sp, #8
 8006e34:	60f8      	str	r0, [r7, #12]
 8006e36:	60b9      	str	r1, [r7, #8]
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4a:	d112      	bne.n	8006e72 <HAL_SPI_Receive+0x44>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10e      	bne.n	8006e72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2204      	movs	r2, #4
 8006e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e5c:	88fa      	ldrh	r2, [r7, #6]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4613      	mov	r3, r2
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	68b9      	ldr	r1, [r7, #8]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f8f1 	bl	8007050 <HAL_SPI_TransmitReceive>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	e0ea      	b.n	8007048 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_SPI_Receive+0x52>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e0e3      	b.n	8007048 <HAL_SPI_Receive+0x21a>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e88:	f7fc fd42 	bl	8003910 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d002      	beq.n	8006ea0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e9e:	e0ca      	b.n	8007036 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_SPI_Receive+0x7e>
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eb0:	e0c1      	b.n	8007036 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2204      	movs	r2, #4
 8006eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	88fa      	ldrh	r2, [r7, #6]
 8006eca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	88fa      	ldrh	r2, [r7, #6]
 8006ed0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef8:	d10f      	bne.n	8006f1a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d007      	beq.n	8006f38 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d162      	bne.n	8007006 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f40:	e02e      	b.n	8006fa0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d115      	bne.n	8006f7c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f103 020c 	add.w	r2, r3, #12
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	7812      	ldrb	r2, [r2, #0]
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f7a:	e011      	b.n	8006fa0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f7c:	f7fc fcc8 	bl	8003910 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d803      	bhi.n	8006f94 <HAL_SPI_Receive+0x166>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d102      	bne.n	8006f9a <HAL_SPI_Receive+0x16c>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f9e:	e04a      	b.n	8007036 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1cb      	bne.n	8006f42 <HAL_SPI_Receive+0x114>
 8006faa:	e031      	b.n	8007010 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d113      	bne.n	8006fe2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	b292      	uxth	r2, r2
 8006fc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	1c9a      	adds	r2, r3, #2
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fe0:	e011      	b.n	8007006 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fe2:	f7fc fc95 	bl	8003910 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d803      	bhi.n	8006ffa <HAL_SPI_Receive+0x1cc>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d102      	bne.n	8007000 <HAL_SPI_Receive+0x1d2>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007004:	e017      	b.n	8007036 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1cd      	bne.n	8006fac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fb63 	bl	80076e0 <SPI_EndRxTransaction>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	75fb      	strb	r3, [r7, #23]
 8007032:	e000      	b.n	8007036 <HAL_SPI_Receive+0x208>
  }

error :
 8007034:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b08c      	sub	sp, #48	; 0x30
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800705e:	2301      	movs	r3, #1
 8007060:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_SPI_TransmitReceive+0x26>
 8007072:	2302      	movs	r3, #2
 8007074:	e18a      	b.n	800738c <HAL_SPI_TransmitReceive+0x33c>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800707e:	f7fc fc47 	bl	8003910 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800708a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007094:	887b      	ldrh	r3, [r7, #2]
 8007096:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800709c:	2b01      	cmp	r3, #1
 800709e:	d00f      	beq.n	80070c0 <HAL_SPI_TransmitReceive+0x70>
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070a6:	d107      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x68>
 80070b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d003      	beq.n	80070c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070be:	e15b      	b.n	8007378 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <HAL_SPI_TransmitReceive+0x82>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <HAL_SPI_TransmitReceive+0x82>
 80070cc:	887b      	ldrh	r3, [r7, #2]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070d8:	e14e      	b.n	8007378 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d003      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2205      	movs	r2, #5
 80070ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	887a      	ldrh	r2, [r7, #2]
 80070fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	887a      	ldrh	r2, [r7, #2]
 8007104:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	887a      	ldrh	r2, [r7, #2]
 8007110:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	887a      	ldrh	r2, [r7, #2]
 8007116:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d007      	beq.n	8007142 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007140:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714a:	d178      	bne.n	800723e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <HAL_SPI_TransmitReceive+0x10a>
 8007154:	8b7b      	ldrh	r3, [r7, #26]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d166      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	881a      	ldrh	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	1c9a      	adds	r2, r3, #2
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800717e:	e053      	b.n	8007228 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b02      	cmp	r3, #2
 800718c:	d11b      	bne.n	80071c6 <HAL_SPI_TransmitReceive+0x176>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d016      	beq.n	80071c6 <HAL_SPI_TransmitReceive+0x176>
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	2b01      	cmp	r3, #1
 800719c:	d113      	bne.n	80071c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	881a      	ldrh	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	1c9a      	adds	r2, r3, #2
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d119      	bne.n	8007208 <HAL_SPI_TransmitReceive+0x1b8>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d014      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	b292      	uxth	r2, r2
 80071ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	1c9a      	adds	r2, r3, #2
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007204:	2301      	movs	r3, #1
 8007206:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007208:	f7fc fb82 	bl	8003910 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007214:	429a      	cmp	r2, r3
 8007216:	d807      	bhi.n	8007228 <HAL_SPI_TransmitReceive+0x1d8>
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d003      	beq.n	8007228 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007226:	e0a7      	b.n	8007378 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1a6      	bne.n	8007180 <HAL_SPI_TransmitReceive+0x130>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007236:	b29b      	uxth	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1a1      	bne.n	8007180 <HAL_SPI_TransmitReceive+0x130>
 800723c:	e07c      	b.n	8007338 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <HAL_SPI_TransmitReceive+0x1fc>
 8007246:	8b7b      	ldrh	r3, [r7, #26]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d16b      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007272:	e057      	b.n	8007324 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b02      	cmp	r3, #2
 8007280:	d11c      	bne.n	80072bc <HAL_SPI_TransmitReceive+0x26c>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d017      	beq.n	80072bc <HAL_SPI_TransmitReceive+0x26c>
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	2b01      	cmp	r3, #1
 8007290:	d114      	bne.n	80072bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	330c      	adds	r3, #12
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d119      	bne.n	80072fe <HAL_SPI_TransmitReceive+0x2ae>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d014      	beq.n	80072fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072fa:	2301      	movs	r3, #1
 80072fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072fe:	f7fc fb07 	bl	8003910 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800730a:	429a      	cmp	r2, r3
 800730c:	d803      	bhi.n	8007316 <HAL_SPI_TransmitReceive+0x2c6>
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007314:	d102      	bne.n	800731c <HAL_SPI_TransmitReceive+0x2cc>
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2b00      	cmp	r3, #0
 800731a:	d103      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007322:	e029      	b.n	8007378 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1a2      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x224>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d19d      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fa35 	bl	80077ac <SPI_EndRxTxTransaction>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007354:	e010      	b.n	8007378 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	e000      	b.n	8007378 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007376:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007388:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800738c:	4618      	mov	r0, r3
 800738e:	3730      	adds	r7, #48	; 0x30
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	099b      	lsrs	r3, r3, #6
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10f      	bne.n	80073d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	099b      	lsrs	r3, r3, #6
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
    return;
 80073d6:	e0d7      	b.n	8007588 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <HAL_SPI_IRQHandler+0x66>
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	09db      	lsrs	r3, r3, #7
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
    return;
 80073f8:	e0c6      	b.n	8007588 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10c      	bne.n	8007420 <HAL_SPI_IRQHandler+0x8c>
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	099b      	lsrs	r3, r3, #6
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	0a1b      	lsrs	r3, r3, #8
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80b4 	beq.w	8007588 <HAL_SPI_IRQHandler+0x1f4>
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80ad 	beq.w	8007588 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	099b      	lsrs	r3, r3, #6
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d023      	beq.n	8007482 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b03      	cmp	r3, #3
 8007444:	d011      	beq.n	800746a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	f043 0204 	orr.w	r2, r3, #4
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	e00b      	b.n	8007482 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	693b      	ldr	r3, [r7, #16]
        return;
 8007480:	e082      	b.n	8007588 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d014      	beq.n	80074b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007492:	f043 0201 	orr.w	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00c      	beq.n	80074de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	f043 0208 	orr.w	r2, r3, #8
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074d0:	2300      	movs	r3, #0
 80074d2:	60bb      	str	r3, [r7, #8]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	60bb      	str	r3, [r7, #8]
 80074dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d04f      	beq.n	8007586 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d104      	bne.n	8007512 <HAL_SPI_IRQHandler+0x17e>
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d034      	beq.n	800757c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0203 	bic.w	r2, r2, #3
 8007520:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d011      	beq.n	800754e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	4a18      	ldr	r2, [pc, #96]	; (8007590 <HAL_SPI_IRQHandler+0x1fc>)
 8007530:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007536:	4618      	mov	r0, r3
 8007538:	f7fc fbda 	bl	8003cf0 <HAL_DMA_Abort_IT>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007552:	2b00      	cmp	r3, #0
 8007554:	d016      	beq.n	8007584 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755a:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <HAL_SPI_IRQHandler+0x1fc>)
 800755c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	4618      	mov	r0, r3
 8007564:	f7fc fbc4 	bl	8003cf0 <HAL_DMA_Abort_IT>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800757a:	e003      	b.n	8007584 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f809 	bl	8007594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007582:	e000      	b.n	8007586 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007584:	bf00      	nop
    return;
 8007586:	bf00      	nop
  }
}
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	080075a9 	.word	0x080075a9

08007594 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff ffe6 	bl	8007594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075c8:	bf00      	nop
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075e0:	f7fc f996 	bl	8003910 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	1a9b      	subs	r3, r3, r2
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4413      	add	r3, r2
 80075ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075f0:	f7fc f98e 	bl	8003910 <HAL_GetTick>
 80075f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075f6:	4b39      	ldr	r3, [pc, #228]	; (80076dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	015b      	lsls	r3, r3, #5
 80075fc:	0d1b      	lsrs	r3, r3, #20
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	fb02 f303 	mul.w	r3, r2, r3
 8007604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007606:	e054      	b.n	80076b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d050      	beq.n	80076b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007610:	f7fc f97e 	bl	8003910 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	429a      	cmp	r2, r3
 800761e:	d902      	bls.n	8007626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d13d      	bne.n	80076a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800763e:	d111      	bne.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007648:	d004      	beq.n	8007654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007652:	d107      	bne.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800766c:	d10f      	bne.n	800768e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800768c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e017      	b.n	80076d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4013      	ands	r3, r2
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	429a      	cmp	r2, r3
 80076c0:	bf0c      	ite	eq
 80076c2:	2301      	moveq	r3, #1
 80076c4:	2300      	movne	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d19b      	bne.n	8007608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	2000000c 	.word	0x2000000c

080076e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076f4:	d111      	bne.n	800771a <SPI_EndRxTransaction+0x3a>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fe:	d004      	beq.n	800770a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007708:	d107      	bne.n	800771a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007718:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007722:	d12a      	bne.n	800777a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772c:	d012      	beq.n	8007754 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	2180      	movs	r1, #128	; 0x80
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff ff49 	bl	80075d0 <SPI_WaitFlagStateUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d02d      	beq.n	80077a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	f043 0220 	orr.w	r2, r3, #32
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e026      	b.n	80077a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	2101      	movs	r1, #1
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff ff36 	bl	80075d0 <SPI_WaitFlagStateUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01a      	beq.n	80077a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776e:	f043 0220 	orr.w	r2, r3, #32
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e013      	b.n	80077a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2200      	movs	r2, #0
 8007782:	2101      	movs	r1, #1
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7ff ff23 	bl	80075d0 <SPI_WaitFlagStateUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e000      	b.n	80077a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077b8:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <SPI_EndRxTxTransaction+0x7c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1b      	ldr	r2, [pc, #108]	; (800782c <SPI_EndRxTxTransaction+0x80>)
 80077be:	fba2 2303 	umull	r2, r3, r2, r3
 80077c2:	0d5b      	lsrs	r3, r3, #21
 80077c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077c8:	fb02 f303 	mul.w	r3, r2, r3
 80077cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d6:	d112      	bne.n	80077fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	2180      	movs	r1, #128	; 0x80
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f7ff fef4 	bl	80075d0 <SPI_WaitFlagStateUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d016      	beq.n	800781c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	f043 0220 	orr.w	r2, r3, #32
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e00f      	b.n	800781e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	3b01      	subs	r3, #1
 8007808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d0f2      	beq.n	80077fe <SPI_EndRxTxTransaction+0x52>
 8007818:	e000      	b.n	800781c <SPI_EndRxTxTransaction+0x70>
        break;
 800781a:	bf00      	nop
  }

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	2000000c 	.word	0x2000000c
 800782c:	165e9f81 	.word	0x165e9f81

08007830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e041      	b.n	80078c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fb fe56 	bl	8003508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f000 fae0 	bl	8007e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d001      	beq.n	80078e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e04e      	b.n	8007986 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a23      	ldr	r2, [pc, #140]	; (8007994 <HAL_TIM_Base_Start_IT+0xc4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d022      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007912:	d01d      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <HAL_TIM_Base_Start_IT+0xc8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d018      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1e      	ldr	r2, [pc, #120]	; (800799c <HAL_TIM_Base_Start_IT+0xcc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1c      	ldr	r2, [pc, #112]	; (80079a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00e      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1b      	ldr	r2, [pc, #108]	; (80079a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d009      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d004      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a18      	ldr	r2, [pc, #96]	; (80079ac <HAL_TIM_Base_Start_IT+0xdc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d111      	bne.n	8007974 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d010      	beq.n	8007984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0201 	orr.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007972:	e007      	b.n	8007984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40010000 	.word	0x40010000
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40000c00 	.word	0x40000c00
 80079a4:	40010400 	.word	0x40010400
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40001800 	.word	0x40001800

080079b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e041      	b.n	8007a46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fb fd74 	bl	80034c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f000 fa20 	bl	8007e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d122      	bne.n	8007aaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d11b      	bne.n	8007aaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f06f 0202 	mvn.w	r2, #2
 8007a7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	f003 0303 	and.w	r3, r3, #3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f9b1 	bl	8007df8 <HAL_TIM_IC_CaptureCallback>
 8007a96:	e005      	b.n	8007aa4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f9a3 	bl	8007de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f9b4 	bl	8007e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d122      	bne.n	8007afe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d11b      	bne.n	8007afe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f06f 0204 	mvn.w	r2, #4
 8007ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f987 	bl	8007df8 <HAL_TIM_IC_CaptureCallback>
 8007aea:	e005      	b.n	8007af8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f979 	bl	8007de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f98a 	bl	8007e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d122      	bne.n	8007b52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d11b      	bne.n	8007b52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f06f 0208 	mvn.w	r2, #8
 8007b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2204      	movs	r2, #4
 8007b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f95d 	bl	8007df8 <HAL_TIM_IC_CaptureCallback>
 8007b3e:	e005      	b.n	8007b4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f94f 	bl	8007de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f960 	bl	8007e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f003 0310 	and.w	r3, r3, #16
 8007b5c:	2b10      	cmp	r3, #16
 8007b5e:	d122      	bne.n	8007ba6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f003 0310 	and.w	r3, r3, #16
 8007b6a:	2b10      	cmp	r3, #16
 8007b6c:	d11b      	bne.n	8007ba6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f06f 0210 	mvn.w	r2, #16
 8007b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f933 	bl	8007df8 <HAL_TIM_IC_CaptureCallback>
 8007b92:	e005      	b.n	8007ba0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f925 	bl	8007de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f936 	bl	8007e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d10e      	bne.n	8007bd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d107      	bne.n	8007bd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f06f 0201 	mvn.w	r2, #1
 8007bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7fb fbb3 	bl	8003338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bdc:	2b80      	cmp	r3, #128	; 0x80
 8007bde:	d10e      	bne.n	8007bfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bea:	2b80      	cmp	r3, #128	; 0x80
 8007bec:	d107      	bne.n	8007bfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fbf1 	bl	80083e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c08:	2b40      	cmp	r3, #64	; 0x40
 8007c0a:	d10e      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c16:	2b40      	cmp	r3, #64	; 0x40
 8007c18:	d107      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f8fb 	bl	8007e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	d10e      	bne.n	8007c56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	d107      	bne.n	8007c56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f06f 0220 	mvn.w	r2, #32
 8007c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fbbb 	bl	80083cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e0ae      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	f200 809f 	bhi.w	8007dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007dcd 	.word	0x08007dcd
 8007c9c:	08007dcd 	.word	0x08007dcd
 8007ca0:	08007dcd 	.word	0x08007dcd
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007dcd 	.word	0x08007dcd
 8007cac:	08007dcd 	.word	0x08007dcd
 8007cb0:	08007dcd 	.word	0x08007dcd
 8007cb4:	08007d4b 	.word	0x08007d4b
 8007cb8:	08007dcd 	.word	0x08007dcd
 8007cbc:	08007dcd 	.word	0x08007dcd
 8007cc0:	08007dcd 	.word	0x08007dcd
 8007cc4:	08007d8b 	.word	0x08007d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f950 	bl	8007f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0208 	orr.w	r2, r2, #8
 8007ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0204 	bic.w	r2, r2, #4
 8007cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6999      	ldr	r1, [r3, #24]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	619a      	str	r2, [r3, #24]
      break;
 8007d06:	e064      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 f9a0 	bl	8008054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6999      	ldr	r1, [r3, #24]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	021a      	lsls	r2, r3, #8
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	619a      	str	r2, [r3, #24]
      break;
 8007d48:	e043      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f9f5 	bl	8008140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0208 	orr.w	r2, r2, #8
 8007d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0204 	bic.w	r2, r2, #4
 8007d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69d9      	ldr	r1, [r3, #28]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	61da      	str	r2, [r3, #28]
      break;
 8007d88:	e023      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68b9      	ldr	r1, [r7, #8]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fa49 	bl	8008228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69da      	ldr	r2, [r3, #28]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69d9      	ldr	r1, [r3, #28]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	021a      	lsls	r2, r3, #8
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	61da      	str	r2, [r3, #28]
      break;
 8007dca:	e002      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d013      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e52:	d00f      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a3d      	ldr	r2, [pc, #244]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00b      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a3c      	ldr	r2, [pc, #240]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d007      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a3b      	ldr	r2, [pc, #236]	; (8007f54 <TIM_Base_SetConfig+0x120>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a3a      	ldr	r2, [pc, #232]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d108      	bne.n	8007e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2f      	ldr	r2, [pc, #188]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d02b      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e94:	d027      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d023      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a2b      	ldr	r2, [pc, #172]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d01f      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <TIM_Base_SetConfig+0x120>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d01b      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a29      	ldr	r2, [pc, #164]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d017      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a28      	ldr	r2, [pc, #160]	; (8007f5c <TIM_Base_SetConfig+0x128>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <TIM_Base_SetConfig+0x12c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00f      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <TIM_Base_SetConfig+0x130>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00b      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a25      	ldr	r2, [pc, #148]	; (8007f68 <TIM_Base_SetConfig+0x134>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d007      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a24      	ldr	r2, [pc, #144]	; (8007f6c <TIM_Base_SetConfig+0x138>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d003      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a23      	ldr	r2, [pc, #140]	; (8007f70 <TIM_Base_SetConfig+0x13c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d108      	bne.n	8007ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a0a      	ldr	r2, [pc, #40]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a0c      	ldr	r2, [pc, #48]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d103      	bne.n	8007f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	615a      	str	r2, [r3, #20]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800
 8007f68:	40001800 	.word	0x40001800
 8007f6c:	40001c00 	.word	0x40001c00
 8007f70:	40002000 	.word	0x40002000

08007f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	f023 0201 	bic.w	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0303 	bic.w	r3, r3, #3
 8007faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f023 0302 	bic.w	r3, r3, #2
 8007fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a20      	ldr	r2, [pc, #128]	; (800804c <TIM_OC1_SetConfig+0xd8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_OC1_SetConfig+0x64>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <TIM_OC1_SetConfig+0xdc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d10c      	bne.n	8007ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f023 0308 	bic.w	r3, r3, #8
 8007fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f023 0304 	bic.w	r3, r3, #4
 8007ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a15      	ldr	r2, [pc, #84]	; (800804c <TIM_OC1_SetConfig+0xd8>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d003      	beq.n	8008002 <TIM_OC1_SetConfig+0x8e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a14      	ldr	r2, [pc, #80]	; (8008050 <TIM_OC1_SetConfig+0xdc>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d111      	bne.n	8008026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	bf00      	nop
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40010000 	.word	0x40010000
 8008050:	40010400 	.word	0x40010400

08008054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f023 0210 	bic.w	r2, r3, #16
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f023 0320 	bic.w	r3, r3, #32
 800809e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a22      	ldr	r2, [pc, #136]	; (8008138 <TIM_OC2_SetConfig+0xe4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_OC2_SetConfig+0x68>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a21      	ldr	r2, [pc, #132]	; (800813c <TIM_OC2_SetConfig+0xe8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d10d      	bne.n	80080d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a17      	ldr	r2, [pc, #92]	; (8008138 <TIM_OC2_SetConfig+0xe4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d003      	beq.n	80080e8 <TIM_OC2_SetConfig+0x94>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a16      	ldr	r2, [pc, #88]	; (800813c <TIM_OC2_SetConfig+0xe8>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d113      	bne.n	8008110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	621a      	str	r2, [r3, #32]
}
 800812a:	bf00      	nop
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	40010000 	.word	0x40010000
 800813c:	40010400 	.word	0x40010400

08008140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a21      	ldr	r2, [pc, #132]	; (8008220 <TIM_OC3_SetConfig+0xe0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d003      	beq.n	80081a6 <TIM_OC3_SetConfig+0x66>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a20      	ldr	r2, [pc, #128]	; (8008224 <TIM_OC3_SetConfig+0xe4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d10d      	bne.n	80081c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a16      	ldr	r2, [pc, #88]	; (8008220 <TIM_OC3_SetConfig+0xe0>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d003      	beq.n	80081d2 <TIM_OC3_SetConfig+0x92>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a15      	ldr	r2, [pc, #84]	; (8008224 <TIM_OC3_SetConfig+0xe4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d113      	bne.n	80081fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	621a      	str	r2, [r3, #32]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	40010000 	.word	0x40010000
 8008224:	40010400 	.word	0x40010400

08008228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800825e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	031b      	lsls	r3, r3, #12
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a12      	ldr	r2, [pc, #72]	; (80082cc <TIM_OC4_SetConfig+0xa4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_OC4_SetConfig+0x68>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a11      	ldr	r2, [pc, #68]	; (80082d0 <TIM_OC4_SetConfig+0xa8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d109      	bne.n	80082a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	019b      	lsls	r3, r3, #6
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	40010000 	.word	0x40010000
 80082d0:	40010400 	.word	0x40010400

080082d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e05a      	b.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a21      	ldr	r2, [pc, #132]	; (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d022      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008338:	d01d      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a1d      	ldr	r2, [pc, #116]	; (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d018      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d013      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1a      	ldr	r2, [pc, #104]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00e      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a18      	ldr	r2, [pc, #96]	; (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d009      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a17      	ldr	r2, [pc, #92]	; (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d004      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d10c      	bne.n	8008390 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800837c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	4313      	orrs	r3, r2
 8008386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40010000 	.word	0x40010000
 80083b4:	40000400 	.word	0x40000400
 80083b8:	40000800 	.word	0x40000800
 80083bc:	40000c00 	.word	0x40000c00
 80083c0:	40010400 	.word	0x40010400
 80083c4:	40014000 	.word	0x40014000
 80083c8:	40001800 	.word	0x40001800

080083cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e03f      	b.n	8008486 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7fb f948 	bl	80036b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2224      	movs	r2, #36	; 0x24
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f929 	bl	8008690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800844c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695a      	ldr	r2, [r3, #20]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800845c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800846c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b08a      	sub	sp, #40	; 0x28
 8008492:	af02      	add	r7, sp, #8
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	603b      	str	r3, [r7, #0]
 800849a:	4613      	mov	r3, r2
 800849c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d17c      	bne.n	80085a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <HAL_UART_Transmit+0x2c>
 80084b4:	88fb      	ldrh	r3, [r7, #6]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e075      	b.n	80085aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_UART_Transmit+0x3e>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e06e      	b.n	80085aa <HAL_UART_Transmit+0x11c>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2221      	movs	r2, #33	; 0x21
 80084de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084e2:	f7fb fa15 	bl	8003910 <HAL_GetTick>
 80084e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	88fa      	ldrh	r2, [r7, #6]
 80084f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fc:	d108      	bne.n	8008510 <HAL_UART_Transmit+0x82>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	61bb      	str	r3, [r7, #24]
 800850e:	e003      	b.n	8008518 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008520:	e02a      	b.n	8008578 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2200      	movs	r2, #0
 800852a:	2180      	movs	r1, #128	; 0x80
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f840 	bl	80085b2 <UART_WaitOnFlagUntilTimeout>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e036      	b.n	80085aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10b      	bne.n	800855a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	3302      	adds	r3, #2
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	e007      	b.n	800856a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	781a      	ldrb	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	3301      	adds	r3, #1
 8008568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800857c:	b29b      	uxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1cf      	bne.n	8008522 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2200      	movs	r2, #0
 800858a:	2140      	movs	r1, #64	; 0x40
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f810 	bl	80085b2 <UART_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e006      	b.n	80085aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2220      	movs	r2, #32
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e000      	b.n	80085aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085a8:	2302      	movs	r3, #2
  }
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3720      	adds	r7, #32
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b090      	sub	sp, #64	; 0x40
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	603b      	str	r3, [r7, #0]
 80085be:	4613      	mov	r3, r2
 80085c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085c2:	e050      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d04c      	beq.n	8008666 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80085d2:	f7fb f99d 	bl	8003910 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085de:	429a      	cmp	r2, r3
 80085e0:	d241      	bcs.n	8008666 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	330c      	adds	r3, #12
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	330c      	adds	r3, #12
 8008600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008602:	637a      	str	r2, [r7, #52]	; 0x34
 8008604:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3314      	adds	r3, #20
 800861c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	613b      	str	r3, [r7, #16]
   return(result);
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f023 0301 	bic.w	r3, r3, #1
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3314      	adds	r3, #20
 8008634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008636:	623a      	str	r2, [r7, #32]
 8008638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	69f9      	ldr	r1, [r7, #28]
 800863c:	6a3a      	ldr	r2, [r7, #32]
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	61bb      	str	r3, [r7, #24]
   return(result);
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e5      	bne.n	8008616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e00f      	b.n	8008686 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4013      	ands	r3, r2
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	bf0c      	ite	eq
 8008676:	2301      	moveq	r3, #1
 8008678:	2300      	movne	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	461a      	mov	r2, r3
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	429a      	cmp	r2, r3
 8008682:	d09f      	beq.n	80085c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3740      	adds	r7, #64	; 0x40
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008694:	b0c0      	sub	sp, #256	; 0x100
 8008696:	af00      	add	r7, sp, #0
 8008698:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800869c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ac:	68d9      	ldr	r1, [r3, #12]
 80086ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	ea40 0301 	orr.w	r3, r0, r1
 80086b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	431a      	orrs	r2, r3
 80086c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80086e8:	f021 010c 	bic.w	r1, r1, #12
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086f6:	430b      	orrs	r3, r1
 80086f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870a:	6999      	ldr	r1, [r3, #24]
 800870c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	ea40 0301 	orr.w	r3, r0, r1
 8008716:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b8f      	ldr	r3, [pc, #572]	; (800895c <UART_SetConfig+0x2cc>)
 8008720:	429a      	cmp	r2, r3
 8008722:	d005      	beq.n	8008730 <UART_SetConfig+0xa0>
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	4b8d      	ldr	r3, [pc, #564]	; (8008960 <UART_SetConfig+0x2d0>)
 800872c:	429a      	cmp	r2, r3
 800872e:	d104      	bne.n	800873a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008730:	f7fe f9a4 	bl	8006a7c <HAL_RCC_GetPCLK2Freq>
 8008734:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008738:	e003      	b.n	8008742 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800873a:	f7fe f98b 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 800873e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800874c:	f040 810c 	bne.w	8008968 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008754:	2200      	movs	r2, #0
 8008756:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800875a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800875e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008762:	4622      	mov	r2, r4
 8008764:	462b      	mov	r3, r5
 8008766:	1891      	adds	r1, r2, r2
 8008768:	65b9      	str	r1, [r7, #88]	; 0x58
 800876a:	415b      	adcs	r3, r3
 800876c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800876e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008772:	4621      	mov	r1, r4
 8008774:	eb12 0801 	adds.w	r8, r2, r1
 8008778:	4629      	mov	r1, r5
 800877a:	eb43 0901 	adc.w	r9, r3, r1
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	f04f 0300 	mov.w	r3, #0
 8008786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800878a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800878e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008792:	4690      	mov	r8, r2
 8008794:	4699      	mov	r9, r3
 8008796:	4623      	mov	r3, r4
 8008798:	eb18 0303 	adds.w	r3, r8, r3
 800879c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087a0:	462b      	mov	r3, r5
 80087a2:	eb49 0303 	adc.w	r3, r9, r3
 80087a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80087ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087be:	460b      	mov	r3, r1
 80087c0:	18db      	adds	r3, r3, r3
 80087c2:	653b      	str	r3, [r7, #80]	; 0x50
 80087c4:	4613      	mov	r3, r2
 80087c6:	eb42 0303 	adc.w	r3, r2, r3
 80087ca:	657b      	str	r3, [r7, #84]	; 0x54
 80087cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80087d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80087d4:	f7f7 fd00 	bl	80001d8 <__aeabi_uldivmod>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4b61      	ldr	r3, [pc, #388]	; (8008964 <UART_SetConfig+0x2d4>)
 80087de:	fba3 2302 	umull	r2, r3, r3, r2
 80087e2:	095b      	lsrs	r3, r3, #5
 80087e4:	011c      	lsls	r4, r3, #4
 80087e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80087f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80087f8:	4642      	mov	r2, r8
 80087fa:	464b      	mov	r3, r9
 80087fc:	1891      	adds	r1, r2, r2
 80087fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8008800:	415b      	adcs	r3, r3
 8008802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008808:	4641      	mov	r1, r8
 800880a:	eb12 0a01 	adds.w	sl, r2, r1
 800880e:	4649      	mov	r1, r9
 8008810:	eb43 0b01 	adc.w	fp, r3, r1
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008820:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008828:	4692      	mov	sl, r2
 800882a:	469b      	mov	fp, r3
 800882c:	4643      	mov	r3, r8
 800882e:	eb1a 0303 	adds.w	r3, sl, r3
 8008832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008836:	464b      	mov	r3, r9
 8008838:	eb4b 0303 	adc.w	r3, fp, r3
 800883c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800884c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008850:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008854:	460b      	mov	r3, r1
 8008856:	18db      	adds	r3, r3, r3
 8008858:	643b      	str	r3, [r7, #64]	; 0x40
 800885a:	4613      	mov	r3, r2
 800885c:	eb42 0303 	adc.w	r3, r2, r3
 8008860:	647b      	str	r3, [r7, #68]	; 0x44
 8008862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800886a:	f7f7 fcb5 	bl	80001d8 <__aeabi_uldivmod>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4611      	mov	r1, r2
 8008874:	4b3b      	ldr	r3, [pc, #236]	; (8008964 <UART_SetConfig+0x2d4>)
 8008876:	fba3 2301 	umull	r2, r3, r3, r1
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	2264      	movs	r2, #100	; 0x64
 800887e:	fb02 f303 	mul.w	r3, r2, r3
 8008882:	1acb      	subs	r3, r1, r3
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800888a:	4b36      	ldr	r3, [pc, #216]	; (8008964 <UART_SetConfig+0x2d4>)
 800888c:	fba3 2302 	umull	r2, r3, r3, r2
 8008890:	095b      	lsrs	r3, r3, #5
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008898:	441c      	add	r4, r3
 800889a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80088a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80088ac:	4642      	mov	r2, r8
 80088ae:	464b      	mov	r3, r9
 80088b0:	1891      	adds	r1, r2, r2
 80088b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80088b4:	415b      	adcs	r3, r3
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088bc:	4641      	mov	r1, r8
 80088be:	1851      	adds	r1, r2, r1
 80088c0:	6339      	str	r1, [r7, #48]	; 0x30
 80088c2:	4649      	mov	r1, r9
 80088c4:	414b      	adcs	r3, r1
 80088c6:	637b      	str	r3, [r7, #52]	; 0x34
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80088d4:	4659      	mov	r1, fp
 80088d6:	00cb      	lsls	r3, r1, #3
 80088d8:	4651      	mov	r1, sl
 80088da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088de:	4651      	mov	r1, sl
 80088e0:	00ca      	lsls	r2, r1, #3
 80088e2:	4610      	mov	r0, r2
 80088e4:	4619      	mov	r1, r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	4642      	mov	r2, r8
 80088ea:	189b      	adds	r3, r3, r2
 80088ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088f0:	464b      	mov	r3, r9
 80088f2:	460a      	mov	r2, r1
 80088f4:	eb42 0303 	adc.w	r3, r2, r3
 80088f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008908:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800890c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008910:	460b      	mov	r3, r1
 8008912:	18db      	adds	r3, r3, r3
 8008914:	62bb      	str	r3, [r7, #40]	; 0x28
 8008916:	4613      	mov	r3, r2
 8008918:	eb42 0303 	adc.w	r3, r2, r3
 800891c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800891e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008922:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008926:	f7f7 fc57 	bl	80001d8 <__aeabi_uldivmod>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <UART_SetConfig+0x2d4>)
 8008930:	fba3 1302 	umull	r1, r3, r3, r2
 8008934:	095b      	lsrs	r3, r3, #5
 8008936:	2164      	movs	r1, #100	; 0x64
 8008938:	fb01 f303 	mul.w	r3, r1, r3
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	3332      	adds	r3, #50	; 0x32
 8008942:	4a08      	ldr	r2, [pc, #32]	; (8008964 <UART_SetConfig+0x2d4>)
 8008944:	fba2 2303 	umull	r2, r3, r2, r3
 8008948:	095b      	lsrs	r3, r3, #5
 800894a:	f003 0207 	and.w	r2, r3, #7
 800894e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4422      	add	r2, r4
 8008956:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008958:	e105      	b.n	8008b66 <UART_SetConfig+0x4d6>
 800895a:	bf00      	nop
 800895c:	40011000 	.word	0x40011000
 8008960:	40011400 	.word	0x40011400
 8008964:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800896c:	2200      	movs	r2, #0
 800896e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008972:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008976:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800897a:	4642      	mov	r2, r8
 800897c:	464b      	mov	r3, r9
 800897e:	1891      	adds	r1, r2, r2
 8008980:	6239      	str	r1, [r7, #32]
 8008982:	415b      	adcs	r3, r3
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
 8008986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800898a:	4641      	mov	r1, r8
 800898c:	1854      	adds	r4, r2, r1
 800898e:	4649      	mov	r1, r9
 8008990:	eb43 0501 	adc.w	r5, r3, r1
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	00eb      	lsls	r3, r5, #3
 800899e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089a2:	00e2      	lsls	r2, r4, #3
 80089a4:	4614      	mov	r4, r2
 80089a6:	461d      	mov	r5, r3
 80089a8:	4643      	mov	r3, r8
 80089aa:	18e3      	adds	r3, r4, r3
 80089ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089b0:	464b      	mov	r3, r9
 80089b2:	eb45 0303 	adc.w	r3, r5, r3
 80089b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80089d6:	4629      	mov	r1, r5
 80089d8:	008b      	lsls	r3, r1, #2
 80089da:	4621      	mov	r1, r4
 80089dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089e0:	4621      	mov	r1, r4
 80089e2:	008a      	lsls	r2, r1, #2
 80089e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80089e8:	f7f7 fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4b60      	ldr	r3, [pc, #384]	; (8008b74 <UART_SetConfig+0x4e4>)
 80089f2:	fba3 2302 	umull	r2, r3, r3, r2
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	011c      	lsls	r4, r3, #4
 80089fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a0c:	4642      	mov	r2, r8
 8008a0e:	464b      	mov	r3, r9
 8008a10:	1891      	adds	r1, r2, r2
 8008a12:	61b9      	str	r1, [r7, #24]
 8008a14:	415b      	adcs	r3, r3
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	1851      	adds	r1, r2, r1
 8008a20:	6139      	str	r1, [r7, #16]
 8008a22:	4649      	mov	r1, r9
 8008a24:	414b      	adcs	r3, r1
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a34:	4659      	mov	r1, fp
 8008a36:	00cb      	lsls	r3, r1, #3
 8008a38:	4651      	mov	r1, sl
 8008a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a3e:	4651      	mov	r1, sl
 8008a40:	00ca      	lsls	r2, r1, #3
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	4603      	mov	r3, r0
 8008a48:	4642      	mov	r2, r8
 8008a4a:	189b      	adds	r3, r3, r2
 8008a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a50:	464b      	mov	r3, r9
 8008a52:	460a      	mov	r2, r1
 8008a54:	eb42 0303 	adc.w	r3, r2, r3
 8008a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a68:	f04f 0200 	mov.w	r2, #0
 8008a6c:	f04f 0300 	mov.w	r3, #0
 8008a70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a74:	4649      	mov	r1, r9
 8008a76:	008b      	lsls	r3, r1, #2
 8008a78:	4641      	mov	r1, r8
 8008a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a7e:	4641      	mov	r1, r8
 8008a80:	008a      	lsls	r2, r1, #2
 8008a82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a86:	f7f7 fba7 	bl	80001d8 <__aeabi_uldivmod>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4b39      	ldr	r3, [pc, #228]	; (8008b74 <UART_SetConfig+0x4e4>)
 8008a90:	fba3 1302 	umull	r1, r3, r3, r2
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	2164      	movs	r1, #100	; 0x64
 8008a98:	fb01 f303 	mul.w	r3, r1, r3
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	3332      	adds	r3, #50	; 0x32
 8008aa2:	4a34      	ldr	r2, [pc, #208]	; (8008b74 <UART_SetConfig+0x4e4>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aae:	441c      	add	r4, r3
 8008ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ab8:	677a      	str	r2, [r7, #116]	; 0x74
 8008aba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008abe:	4642      	mov	r2, r8
 8008ac0:	464b      	mov	r3, r9
 8008ac2:	1891      	adds	r1, r2, r2
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	415b      	adcs	r3, r3
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ace:	4641      	mov	r1, r8
 8008ad0:	1851      	adds	r1, r2, r1
 8008ad2:	6039      	str	r1, [r7, #0]
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	414b      	adcs	r3, r1
 8008ad8:	607b      	str	r3, [r7, #4]
 8008ada:	f04f 0200 	mov.w	r2, #0
 8008ade:	f04f 0300 	mov.w	r3, #0
 8008ae2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ae6:	4659      	mov	r1, fp
 8008ae8:	00cb      	lsls	r3, r1, #3
 8008aea:	4651      	mov	r1, sl
 8008aec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008af0:	4651      	mov	r1, sl
 8008af2:	00ca      	lsls	r2, r1, #3
 8008af4:	4610      	mov	r0, r2
 8008af6:	4619      	mov	r1, r3
 8008af8:	4603      	mov	r3, r0
 8008afa:	4642      	mov	r2, r8
 8008afc:	189b      	adds	r3, r3, r2
 8008afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b00:	464b      	mov	r3, r9
 8008b02:	460a      	mov	r2, r1
 8008b04:	eb42 0303 	adc.w	r3, r2, r3
 8008b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	663b      	str	r3, [r7, #96]	; 0x60
 8008b14:	667a      	str	r2, [r7, #100]	; 0x64
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b22:	4649      	mov	r1, r9
 8008b24:	008b      	lsls	r3, r1, #2
 8008b26:	4641      	mov	r1, r8
 8008b28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b2c:	4641      	mov	r1, r8
 8008b2e:	008a      	lsls	r2, r1, #2
 8008b30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b34:	f7f7 fb50 	bl	80001d8 <__aeabi_uldivmod>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <UART_SetConfig+0x4e4>)
 8008b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b42:	095b      	lsrs	r3, r3, #5
 8008b44:	2164      	movs	r1, #100	; 0x64
 8008b46:	fb01 f303 	mul.w	r3, r1, r3
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	3332      	adds	r3, #50	; 0x32
 8008b50:	4a08      	ldr	r2, [pc, #32]	; (8008b74 <UART_SetConfig+0x4e4>)
 8008b52:	fba2 2303 	umull	r2, r3, r2, r3
 8008b56:	095b      	lsrs	r3, r3, #5
 8008b58:	f003 020f 	and.w	r2, r3, #15
 8008b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4422      	add	r2, r4
 8008b64:	609a      	str	r2, [r3, #8]
}
 8008b66:	bf00      	nop
 8008b68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b72:	bf00      	nop
 8008b74:	51eb851f 	.word	0x51eb851f

08008b78 <__libc_init_array>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	4d0d      	ldr	r5, [pc, #52]	; (8008bb0 <__libc_init_array+0x38>)
 8008b7c:	4c0d      	ldr	r4, [pc, #52]	; (8008bb4 <__libc_init_array+0x3c>)
 8008b7e:	1b64      	subs	r4, r4, r5
 8008b80:	10a4      	asrs	r4, r4, #2
 8008b82:	2600      	movs	r6, #0
 8008b84:	42a6      	cmp	r6, r4
 8008b86:	d109      	bne.n	8008b9c <__libc_init_array+0x24>
 8008b88:	4d0b      	ldr	r5, [pc, #44]	; (8008bb8 <__libc_init_array+0x40>)
 8008b8a:	4c0c      	ldr	r4, [pc, #48]	; (8008bbc <__libc_init_array+0x44>)
 8008b8c:	f000 f87c 	bl	8008c88 <_init>
 8008b90:	1b64      	subs	r4, r4, r5
 8008b92:	10a4      	asrs	r4, r4, #2
 8008b94:	2600      	movs	r6, #0
 8008b96:	42a6      	cmp	r6, r4
 8008b98:	d105      	bne.n	8008ba6 <__libc_init_array+0x2e>
 8008b9a:	bd70      	pop	{r4, r5, r6, pc}
 8008b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba0:	4798      	blx	r3
 8008ba2:	3601      	adds	r6, #1
 8008ba4:	e7ee      	b.n	8008b84 <__libc_init_array+0xc>
 8008ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008baa:	4798      	blx	r3
 8008bac:	3601      	adds	r6, #1
 8008bae:	e7f2      	b.n	8008b96 <__libc_init_array+0x1e>
 8008bb0:	0800b5c4 	.word	0x0800b5c4
 8008bb4:	0800b5c4 	.word	0x0800b5c4
 8008bb8:	0800b5c4 	.word	0x0800b5c4
 8008bbc:	0800b5c8 	.word	0x0800b5c8

08008bc0 <__itoa>:
 8008bc0:	1e93      	subs	r3, r2, #2
 8008bc2:	2b22      	cmp	r3, #34	; 0x22
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	d904      	bls.n	8008bd4 <__itoa+0x14>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	700b      	strb	r3, [r1, #0]
 8008bce:	461c      	mov	r4, r3
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	bd10      	pop	{r4, pc}
 8008bd4:	2a0a      	cmp	r2, #10
 8008bd6:	d109      	bne.n	8008bec <__itoa+0x2c>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	da07      	bge.n	8008bec <__itoa+0x2c>
 8008bdc:	232d      	movs	r3, #45	; 0x2d
 8008bde:	700b      	strb	r3, [r1, #0]
 8008be0:	4240      	negs	r0, r0
 8008be2:	2101      	movs	r1, #1
 8008be4:	4421      	add	r1, r4
 8008be6:	f000 f80d 	bl	8008c04 <__utoa>
 8008bea:	e7f1      	b.n	8008bd0 <__itoa+0x10>
 8008bec:	2100      	movs	r1, #0
 8008bee:	e7f9      	b.n	8008be4 <__itoa+0x24>

08008bf0 <itoa>:
 8008bf0:	f7ff bfe6 	b.w	8008bc0 <__itoa>

08008bf4 <memset>:
 8008bf4:	4402      	add	r2, r0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d100      	bne.n	8008bfe <memset+0xa>
 8008bfc:	4770      	bx	lr
 8008bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008c02:	e7f9      	b.n	8008bf8 <memset+0x4>

08008c04 <__utoa>:
 8008c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c06:	4c1f      	ldr	r4, [pc, #124]	; (8008c84 <__utoa+0x80>)
 8008c08:	b08b      	sub	sp, #44	; 0x2c
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	466e      	mov	r6, sp
 8008c10:	f104 0c20 	add.w	ip, r4, #32
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	6861      	ldr	r1, [r4, #4]
 8008c18:	4637      	mov	r7, r6
 8008c1a:	c703      	stmia	r7!, {r0, r1}
 8008c1c:	3408      	adds	r4, #8
 8008c1e:	4564      	cmp	r4, ip
 8008c20:	463e      	mov	r6, r7
 8008c22:	d1f7      	bne.n	8008c14 <__utoa+0x10>
 8008c24:	7921      	ldrb	r1, [r4, #4]
 8008c26:	7139      	strb	r1, [r7, #4]
 8008c28:	1e91      	subs	r1, r2, #2
 8008c2a:	6820      	ldr	r0, [r4, #0]
 8008c2c:	6038      	str	r0, [r7, #0]
 8008c2e:	2922      	cmp	r1, #34	; 0x22
 8008c30:	f04f 0100 	mov.w	r1, #0
 8008c34:	d904      	bls.n	8008c40 <__utoa+0x3c>
 8008c36:	7019      	strb	r1, [r3, #0]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	b00b      	add	sp, #44	; 0x2c
 8008c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c40:	1e58      	subs	r0, r3, #1
 8008c42:	4684      	mov	ip, r0
 8008c44:	fbb5 f7f2 	udiv	r7, r5, r2
 8008c48:	fb02 5617 	mls	r6, r2, r7, r5
 8008c4c:	3628      	adds	r6, #40	; 0x28
 8008c4e:	446e      	add	r6, sp
 8008c50:	460c      	mov	r4, r1
 8008c52:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008c56:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008c5a:	462e      	mov	r6, r5
 8008c5c:	42b2      	cmp	r2, r6
 8008c5e:	f101 0101 	add.w	r1, r1, #1
 8008c62:	463d      	mov	r5, r7
 8008c64:	d9ee      	bls.n	8008c44 <__utoa+0x40>
 8008c66:	2200      	movs	r2, #0
 8008c68:	545a      	strb	r2, [r3, r1]
 8008c6a:	1919      	adds	r1, r3, r4
 8008c6c:	1aa5      	subs	r5, r4, r2
 8008c6e:	42aa      	cmp	r2, r5
 8008c70:	dae3      	bge.n	8008c3a <__utoa+0x36>
 8008c72:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008c76:	780e      	ldrb	r6, [r1, #0]
 8008c78:	7006      	strb	r6, [r0, #0]
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	f801 5901 	strb.w	r5, [r1], #-1
 8008c80:	e7f4      	b.n	8008c6c <__utoa+0x68>
 8008c82:	bf00      	nop
 8008c84:	0800b594 	.word	0x0800b594

08008c88 <_init>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr

08008c94 <_fini>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr
