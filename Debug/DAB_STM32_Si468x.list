
DAB_STM32_Si468x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d294  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034c4  0800d41c  0800d41c  0001d41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108e0  080108e0  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  080108e0  080108e0  000208e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108e8  080108e8  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108e8  080108e8  000208e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108ec  080108ec  000208ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080108f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030188  2**0
                  CONTENTS
 10 .bss          00007054  20000188  20000188  00030188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200071dc  200071dc  00030188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019534  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a6  00000000  00000000  000496ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0004d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f8  00000000  00000000  0004e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245f6  00000000  00000000  0004f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce63  00000000  00000000  00073fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ba3  00000000  00000000  00090e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001639dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058ec  00000000  00000000  00163a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d404 	.word	0x0800d404

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800d404 	.word	0x0800d404

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
//static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	//ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 80004f4:	f000 f914 	bl	8000720 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fb97 	bl	8000c2c <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004fe:	20cb      	movs	r0, #203	; 0xcb
 8000500:	f000 fb94 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8000504:	2039      	movs	r0, #57	; 0x39
 8000506:	f000 fba0 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800050a:	202c      	movs	r0, #44	; 0x2c
 800050c:	f000 fb9d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fb9a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8000516:	2034      	movs	r0, #52	; 0x34
 8000518:	f000 fb97 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fb94 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8000522:	20cf      	movs	r0, #207	; 0xcf
 8000524:	f000 fb82 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fb8e 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800052e:	20c1      	movs	r0, #193	; 0xc1
 8000530:	f000 fb8b 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000534:	2030      	movs	r0, #48	; 0x30
 8000536:	f000 fb88 	bl	8000c4a <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800053a:	20e8      	movs	r0, #232	; 0xe8
 800053c:	f000 fb76 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000540:	2085      	movs	r0, #133	; 0x85
 8000542:	f000 fb82 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fb7f 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fb7c 	bl	8000c4a <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8000552:	20ea      	movs	r0, #234	; 0xea
 8000554:	f000 fb6a 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fb76 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fb73 	bl	8000c4a <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000564:	20ed      	movs	r0, #237	; 0xed
 8000566:	f000 fb61 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f000 fb6d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 fb6a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8000576:	2012      	movs	r0, #18
 8000578:	f000 fb67 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 800057c:	2081      	movs	r0, #129	; 0x81
 800057e:	f000 fb64 	bl	8000c4a <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8000582:	20f7      	movs	r0, #247	; 0xf7
 8000584:	f000 fb52 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000588:	2020      	movs	r0, #32
 800058a:	f000 fb5e 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800058e:	20c0      	movs	r0, #192	; 0xc0
 8000590:	f000 fb4c 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000594:	2010      	movs	r0, #16
 8000596:	f000 fb58 	bl	8000c4a <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 800059a:	20c1      	movs	r0, #193	; 0xc1
 800059c:	f000 fb46 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80005a0:	2010      	movs	r0, #16
 80005a2:	f000 fb52 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80005a6:	20c5      	movs	r0, #197	; 0xc5
 80005a8:	f000 fb40 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80005ac:	203e      	movs	r0, #62	; 0x3e
 80005ae:	f000 fb4c 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 fb49 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80005b8:	20c7      	movs	r0, #199	; 0xc7
 80005ba:	f000 fb37 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80005be:	2086      	movs	r0, #134	; 0x86
 80005c0:	f000 fb43 	bl	8000c4a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80005c4:	2036      	movs	r0, #54	; 0x36
 80005c6:	f000 fb31 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80005ca:	2048      	movs	r0, #72	; 0x48
 80005cc:	f000 fb3d 	bl	8000c4a <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80005d0:	203a      	movs	r0, #58	; 0x3a
 80005d2:	f000 fb2b 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005d6:	2055      	movs	r0, #85	; 0x55
 80005d8:	f000 fb37 	bl	8000c4a <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80005dc:	20b1      	movs	r0, #177	; 0xb1
 80005de:	f000 fb25 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fb31 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005e8:	2018      	movs	r0, #24
 80005ea:	f000 fb2e 	bl	8000c4a <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80005ee:	20b6      	movs	r0, #182	; 0xb6
 80005f0:	f000 fb1c 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005f4:	2008      	movs	r0, #8
 80005f6:	f000 fb28 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005fa:	2082      	movs	r0, #130	; 0x82
 80005fc:	f000 fb25 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000600:	2027      	movs	r0, #39	; 0x27
 8000602:	f000 fb22 	bl	8000c4a <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8000606:	20f2      	movs	r0, #242	; 0xf2
 8000608:	f000 fb10 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fb1c 	bl	8000c4a <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8000612:	2026      	movs	r0, #38	; 0x26
 8000614:	f000 fb0a 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fb16 	bl	8000c4a <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800061e:	20e0      	movs	r0, #224	; 0xe0
 8000620:	f000 fb04 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8000624:	200f      	movs	r0, #15
 8000626:	f000 fb10 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800062a:	2031      	movs	r0, #49	; 0x31
 800062c:	f000 fb0d 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000630:	202b      	movs	r0, #43	; 0x2b
 8000632:	f000 fb0a 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8000636:	200c      	movs	r0, #12
 8000638:	f000 fb07 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800063c:	200e      	movs	r0, #14
 800063e:	f000 fb04 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8000642:	2008      	movs	r0, #8
 8000644:	f000 fb01 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000648:	204e      	movs	r0, #78	; 0x4e
 800064a:	f000 fafe 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800064e:	20f1      	movs	r0, #241	; 0xf1
 8000650:	f000 fafb 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000654:	2037      	movs	r0, #55	; 0x37
 8000656:	f000 faf8 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800065a:	2007      	movs	r0, #7
 800065c:	f000 faf5 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000660:	2010      	movs	r0, #16
 8000662:	f000 faf2 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000666:	2003      	movs	r0, #3
 8000668:	f000 faef 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800066c:	200e      	movs	r0, #14
 800066e:	f000 faec 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8000672:	2009      	movs	r0, #9
 8000674:	f000 fae9 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fae6 	bl	8000c4a <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800067e:	20e1      	movs	r0, #225	; 0xe1
 8000680:	f000 fad4 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fae0 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800068a:	200e      	movs	r0, #14
 800068c:	f000 fadd 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8000690:	2014      	movs	r0, #20
 8000692:	f000 fada 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000696:	2003      	movs	r0, #3
 8000698:	f000 fad7 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 800069c:	2011      	movs	r0, #17
 800069e:	f000 fad4 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80006a2:	2007      	movs	r0, #7
 80006a4:	f000 fad1 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006a8:	2031      	movs	r0, #49	; 0x31
 80006aa:	f000 face 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80006ae:	20c1      	movs	r0, #193	; 0xc1
 80006b0:	f000 facb 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80006b4:	2048      	movs	r0, #72	; 0x48
 80006b6:	f000 fac8 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80006ba:	2008      	movs	r0, #8
 80006bc:	f000 fac5 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006c0:	200f      	movs	r0, #15
 80006c2:	f000 fac2 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80006c6:	200c      	movs	r0, #12
 80006c8:	f000 fabf 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006cc:	2031      	movs	r0, #49	; 0x31
 80006ce:	f000 fabc 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006d2:	2036      	movs	r0, #54	; 0x36
 80006d4:	f000 fab9 	bl	8000c4a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006d8:	200f      	movs	r0, #15
 80006da:	f000 fab6 	bl	8000c4a <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f000 faa4 	bl	8000c2c <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80006e4:	2029      	movs	r0, #41	; 0x29
 80006e6:	f000 faa1 	bl	8000c2c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80006ea:	202c      	movs	r0, #44	; 0x2c
 80006ec:	f000 faad 	bl	8000c4a <ILI9341_Send_Data>

	//SET ROTATION
	ILI9341_Set_Rotation(LCD_ROTATION);  // Ustawienie rotacji
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f83d 	bl	8000770 <ILI9341_Set_Rotation>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <ILI9341_SPI_Send>:
	}
}
*/

void ILI9341_SPI_Send(unsigned char data)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 8000706:	1df9      	adds	r1, r7, #7
 8000708:	2301      	movs	r3, #1
 800070a:	2201      	movs	r2, #1
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <ILI9341_SPI_Send+0x20>)
 800070e:	f00a fe10 	bl	800b332 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_IT(&hspi2, &data, 1);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20006f58 	.word	0x20006f58

08000720 <ILI9341_Reset>:
	HAL_SPI_Transmit(&hspi2, &data, size, 10);
//	HAL_SPI_Transmit_IT(&hspi2, &data, size);
//	HAL_SPI_Transmit_DMA(&hspi2, &data, size);
}

void ILI9341_Reset() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	RESET_ON;
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072a:	4810      	ldr	r0, [pc, #64]	; (800076c <ILI9341_Reset+0x4c>)
 800072c:	f007 fc2c 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000730:	2032      	movs	r0, #50	; 0x32
 8000732:	f006 fe25 	bl	8007380 <HAL_Delay>
	RESET_OFF;
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <ILI9341_Reset+0x4c>)
 800073e:	f007 fc23 	bl	8007f88 <HAL_GPIO_WritePin>
	CS_ON;
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <ILI9341_Reset+0x4c>)
 800074a:	f007 fc1d 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f006 fe16 	bl	8007380 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fa69 	bl	8000c2c <ILI9341_Send_Command>
	CS_OFF;
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <ILI9341_Reset+0x4c>)
 8000762:	f007 fc11 	bl	8007f88 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40020c00 	.word	0x40020c00

08000770 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f000 fa56 	bl	8000c2c <ILI9341_Send_Command>
	switch (rotation) {
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d836      	bhi.n	80007f4 <ILI9341_Set_Rotation+0x84>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <ILI9341_Set_Rotation+0x1c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	0800079d 	.word	0x0800079d
 8000790:	080007b3 	.word	0x080007b3
 8000794:	080007c9 	.word	0x080007c9
 8000798:	080007df 	.word	0x080007df
	case 0:
		ILI9341_Send_Data(0x48);
 800079c:	2048      	movs	r0, #72	; 0x48
 800079e:	f000 fa54 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 240;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007a4:	22f0      	movs	r2, #240	; 0xf0
 80007a6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ae:	601a      	str	r2, [r3, #0]
		break;
 80007b0:	e020      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80007b2:	2028      	movs	r0, #40	; 0x28
 80007b4:	f000 fa49 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 320;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007c2:	22f0      	movs	r2, #240	; 0xf0
 80007c4:	601a      	str	r2, [r3, #0]
		break;
 80007c6:	e015      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80007c8:	2088      	movs	r0, #136	; 0x88
 80007ca:	f000 fa3e 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 240;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007d0:	22f0      	movs	r2, #240	; 0xf0
 80007d2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007da:	601a      	str	r2, [r3, #0]
		break;
 80007dc:	e00a      	b.n	80007f4 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80007de:	20e8      	movs	r0, #232	; 0xe8
 80007e0:	f000 fa33 	bl	8000c4a <ILI9341_Send_Data>
		X_SIZE = 320;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <ILI9341_Set_Rotation+0x8c>)
 80007e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ea:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <ILI9341_Set_Rotation+0x90>)
 80007ee:	22f0      	movs	r2, #240	; 0xf0
 80007f0:	601a      	str	r2, [r3, #0]
		break;
 80007f2:	bf00      	nop
	}
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000004 	.word	0x20000004

08000804 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4817      	ldr	r0, [pc, #92]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000818:	f007 fbb6 	bl	8007f88 <HAL_GPIO_WritePin>
	DC_COMMAND;
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000824:	f007 fbb0 	bl	8007f88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff66 	bl	80006fc <ILI9341_SPI_Send>

	DC_DATA;
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <ILI9341_SPI_Send_32+0x70>)
 8000838:	f007 fba6 	bl	8007f88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	0e1b      	lsrs	r3, r3, #24
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff5a 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	0c1b      	lsrs	r3, r3, #16
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff54 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0a1b      	lsrs	r3, r3, #8
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff4e 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff49 	bl	80006fc <ILI9341_SPI_Send>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00

08000878 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	041b      	lsls	r3, r3, #16
 800088e:	617b      	str	r3, [r7, #20]
	t |= x2;
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000898:	6979      	ldr	r1, [r7, #20]
 800089a:	202a      	movs	r0, #42	; 0x2a
 800089c:	f7ff ffb2 	bl	8000804 <ILI9341_SPI_Send_32>
	t = y1;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	041b      	lsls	r3, r3, #16
 80008a8:	617b      	str	r3, [r7, #20]
	t |= y2;
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80008b2:	6979      	ldr	r1, [r7, #20]
 80008b4:	202b      	movs	r0, #43	; 0x2b
 80008b6:	f7ff ffa5 	bl	8000804 <ILI9341_SPI_Send_32>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <ILI9341_Fill_Screen+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <ILI9341_Fill_Screen+0x44>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	2100      	movs	r1, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ffcc 	bl	8000878 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <ILI9341_Fill_Screen+0x40>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	4611      	mov	r1, r2
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <ILI9341_Fill_Screen+0x44>)
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	fb01 f202 	mul.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9b7 	bl	8000c68 <ILI9341_Send_Burst>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004

0800090c <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db31      	blt.n	8000982 <ILI9341_Draw_Pixel+0x76>
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db2e      	blt.n	8000982 <ILI9341_Draw_Pixel+0x76>
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <ILI9341_Draw_Pixel+0x80>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d229      	bcs.n	8000982 <ILI9341_Draw_Pixel+0x76>
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <ILI9341_Draw_Pixel+0x84>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d224      	bcs.n	8000982 <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <ILI9341_Draw_Pixel+0x80>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <ILI9341_Draw_Pixel+0x84>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	f7ff ff96 	bl	8000878 <ILI9341_Set_Address>
	DC_COMMAND;
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <ILI9341_Draw_Pixel+0x88>)
 8000954:	f007 fb18 	bl	8007f88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000958:	202c      	movs	r0, #44	; 0x2c
 800095a:	f7ff fecf 	bl	80006fc <ILI9341_SPI_Send>
	DC_DATA;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <ILI9341_Draw_Pixel+0x88>)
 8000966:	f007 fb0f 	bl	8007f88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fec3 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff febe 	bl	80006fc <ILI9341_SPI_Send>
 8000980:	e000      	b.n	8000984 <ILI9341_Draw_Pixel+0x78>
		return;
 8000982:	bf00      	nop
}
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004
 8000994:	40020c00 	.word	0x40020c00

08000998 <ILI9341_Draw_Filled_Rectangle>:

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f7ff ff63 	bl	8000878 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	b298      	uxth	r0, r3
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	3301      	adds	r3, #1
 80009be:	4619      	mov	r1, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	fb01 f303 	mul.w	r3, r1, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	f000 f94b 	bl	8000c68 <ILI9341_Send_Burst>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <ILI9341_Draw_Line>:
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
}

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b08c      	sub	sp, #48	; 0x30
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 80009e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1acb      	subs	r3, r1, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bfb8      	it	lt
 8000a00:	425b      	neglt	r3, r3
 8000a02:	429a      	cmp	r2, r3
 8000a04:	bfcc      	ite	gt
 8000a06:	2301      	movgt	r3, #1
 8000a08:	2300      	movle	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00d      	beq.n	8000a30 <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a20:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	843b      	strh	r3, [r7, #32]
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d90d      	bls.n	8000a54 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	83fb      	strh	r3, [r7, #30]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a44:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	83bb      	strh	r3, [r7, #28]
 8000a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bfb8      	it	lt
 8000a66:	425b      	neglt	r3, r3
 8000a68:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	0fda      	lsrs	r2, r3, #31
 8000a6e:	4413      	add	r3, r2
 8000a70:	105b      	asrs	r3, r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d202      	bcs.n	8000a82 <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a80:	e023      	b.n	8000aca <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 8000a88:	e01f      	b.n	8000aca <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff38 	bl	800090c <ILI9341_Draw_Pixel>
 8000a9c:	e005      	b.n	8000aaa <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff31 	bl	800090c <ILI9341_Draw_Pixel>
		}
		err -= dy;
 8000aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da05      	bge.n	8000ac4 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
			err = dx;
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d9db      	bls.n	8000a8a <ILI9341_Draw_Line+0xb0>
		}
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
	switch (size)
 8000aea:	7f3b      	ldrb	r3, [r7, #28]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d061      	beq.n	8000bb4 <ILI9341_Draw_String+0xd8>
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	f300 8092 	bgt.w	8000c1a <ILI9341_Draw_String+0x13e>
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d028      	beq.n	8000b4c <ILI9341_Draw_String+0x70>
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d02b      	beq.n	8000b56 <ILI9341_Draw_String+0x7a>
	break;



	}
}
 8000afe:	e08c      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
			if ((x+(size*8))>X_SIZE)
 8000b00:	7f3b      	ldrb	r3, [r7, #28]
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	441a      	add	r2, r3
 8000b0a:	4b46      	ldr	r3, [pc, #280]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d907      	bls.n	8000b22 <ILI9341_Draw_String+0x46>
				x = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b16:	7f3b      	ldrb	r3, [r7, #28]
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	7f3a      	ldrb	r2, [r7, #28]
 8000b2c:	9201      	str	r2, [sp, #4]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	f000 f95a 	bl	8000dec <ILI9341_Draw_Char>
			x += size*8-2;
 8000b38:	7f3b      	ldrb	r3, [r7, #28]
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	3b02      	subs	r3, #2
 8000b44:	60fb      	str	r3, [r7, #12]
			*str++;
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1d5      	bne.n	8000b00 <ILI9341_Draw_String+0x24>
	break;
 8000b54:	e061      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
		hh=1;
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000b5c:	e025      	b.n	8000baa <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8000b5e:	7f3b      	ldrb	r3, [r7, #28]
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	441a      	add	r2, r3
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d907      	bls.n	8000b80 <ILI9341_Draw_String+0xa4>
				x = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000b74:	7f3b      	ldrb	r3, [r7, #28]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	7f3a      	ldrb	r2, [r7, #28]
 8000b8a:	9201      	str	r2, [sp, #4]
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	f000 f92b 	bl	8000dec <ILI9341_Draw_Char>
			x += hh*8;
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
			*str++;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1d5      	bne.n	8000b5e <ILI9341_Draw_String+0x82>
	break;
 8000bb2:	e032      	b.n	8000c1a <ILI9341_Draw_String+0x13e>
		hh=1;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
		while (*str)
 8000bba:	e029      	b.n	8000c10 <ILI9341_Draw_String+0x134>
			if ((x+(size*8))>X_SIZE)
 8000bbc:	7f3b      	ldrb	r3, [r7, #28]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <ILI9341_Draw_String+0x148>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d907      	bls.n	8000bde <ILI9341_Draw_String+0x102>
				x = 1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8000bd2:	7f3b      	ldrb	r3, [r7, #28]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	7f3a      	ldrb	r2, [r7, #28]
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	f000 f8fc 	bl	8000dec <ILI9341_Draw_Char>
			x += hh*10;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <ILI9341_Draw_String+0x14c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
			*str++;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1d1      	bne.n	8000bbc <ILI9341_Draw_String+0xe0>
	break;
 8000c18:	bf00      	nop
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000000 	.word	0x20000000
 8000c28:	200001a4 	.word	0x200001a4

08000c2c <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000c36:	f000 fa09 	bl	800104c <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fd5d 	bl	80006fc <ILI9341_SPI_Send>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000c54:	f000 f9e8 	bl	8001028 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fd4e 	bl	80006fc <ILI9341_SPI_Send>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	4858      	ldr	r0, [pc, #352]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000c88:	f007 f97e 	bl	8007f88 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	4855      	ldr	r0, [pc, #340]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000c94:	f007 f978 	bl	8007f88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000c98:	202c      	movs	r0, #44	; 0x2c
 8000c9a:	f7ff fd2f 	bl	80006fc <ILI9341_SPI_Send>
	DC_DATA;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca4:	4850      	ldr	r0, [pc, #320]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000ca6:	f007 f96f 	bl	8007f88 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000caa:	7b3b      	ldrb	r3, [r7, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd25 	bl	80006fc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000cb2:	7afb      	ldrb	r3, [r7, #11]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd21 	bl	80006fc <ILI9341_SPI_Send>
	len--;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	099b      	lsrs	r3, r3, #6
 8000cc4:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000cc6:	7b3a      	ldrb	r2, [r7, #12]
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d169      	bne.n	8000da2 <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 8000cce:	e027      	b.n	8000d20 <ILI9341_Send_Burst+0xb8>
			i = 16;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd10 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd0c 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd08 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fd04 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cf4:	7afb      	ldrb	r3, [r7, #11]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd00 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fcfc 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fcf8 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fcf4 	bl	80006fc <ILI9341_SPI_Send>
			} while (--i);
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	737b      	strb	r3, [r7, #13]
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1d9      	bne.n	8000cd4 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 8000d20:	89fb      	ldrh	r3, [r7, #14]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	81fa      	strh	r2, [r7, #14]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1d2      	bne.n	8000cd0 <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d32:	737b      	strb	r3, [r7, #13]
 8000d34:	e007      	b.n	8000d46 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcdf 	bl	80006fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fcdb 	bl	80006fc <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	737a      	strb	r2, [r7, #13]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f2      	bne.n	8000d36 <ILI9341_Send_Burst+0xce>
 8000d50:	e03f      	b.n	8000dd2 <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000d52:	2310      	movs	r3, #16
 8000d54:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000d56:	7b3b      	ldrb	r3, [r7, #12]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fccf 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fccb 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d66:	7b3b      	ldrb	r3, [r7, #12]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcc7 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fcc3 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d76:	7b3b      	ldrb	r3, [r7, #12]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fcbf 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fcbb 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000d86:	7b3b      	ldrb	r3, [r7, #12]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fcb7 	bl	80006fc <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fcb3 	bl	80006fc <ILI9341_SPI_Send>
			} while (--i);
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	737b      	strb	r3, [r7, #13]
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1d9      	bne.n	8000d56 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	81fa      	strh	r2, [r7, #14]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1d2      	bne.n	8000d52 <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000db4:	737b      	strb	r3, [r7, #13]
 8000db6:	e007      	b.n	8000dc8 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fc9e 	bl	80006fc <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fc9a 	bl	80006fc <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	1e5a      	subs	r2, r3, #1
 8000dcc:	737a      	strb	r2, [r7, #13]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f2      	bne.n	8000db8 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <ILI9341_Send_Burst+0x180>)
 8000dda:	f007 f8d5 	bl	8007f88 <HAL_GPIO_WritePin>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020c00 	.word	0x40020c00

08000dec <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8000dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f000 80b2 	beq.w	8000f68 <ILI9341_Draw_Char+0x17c>
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	f300 8104 	bgt.w	8001012 <ILI9341_Draw_Char+0x226>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d002      	beq.n	8000e14 <ILI9341_Draw_Char+0x28>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d055      	beq.n	8000ebe <ILI9341_Draw_Char+0xd2>
		break;



	}
}
 8000e12:	e0fe      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3305      	adds	r3, #5
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3308      	adds	r3, #8
 8000e22:	f7ff fd29 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	487b      	ldr	r0, [pc, #492]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000e2e:	f007 f8ab 	bl	8007f88 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000e32:	202c      	movs	r0, #44	; 0x2c
 8000e34:	f7ff fc62 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3e:	4877      	ldr	r0, [pc, #476]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000e40:	f007 f8a2 	bl	8007f88 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	e035      	b.n	8000eb6 <ILI9341_Draw_Char+0xca>
				for(i=2;i<8;i++)
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e02c      	b.n	8000eaa <ILI9341_Draw_Char+0xbe>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8000e50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e54:	3b20      	subs	r3, #32
 8000e56:	4a72      	ldr	r2, [pc, #456]	; (8001020 <ILI9341_Draw_Char+0x234>)
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	441a      	add	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	fa42 f303 	asr.w	r3, r2, r3
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <ILI9341_Draw_Char+0xa2>
						ILI9341_SPI_Send(color>>8);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc3d 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc38 	bl	80006fc <ILI9341_SPI_Send>
 8000e8c:	e00a      	b.n	8000ea4 <ILI9341_Draw_Char+0xb8>
						ILI9341_SPI_Send(phone>>8);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc31 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc2c 	bl	80006fc <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	ddcf      	ble.n	8000e50 <ILI9341_Draw_Char+0x64>
			for(h=0;h<8;h++)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	ddc6      	ble.n	8000e4a <ILI9341_Draw_Char+0x5e>
			break;
 8000ebc:	e0a9      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3310      	adds	r3, #16
 8000ecc:	f7ff fcd4 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	4851      	ldr	r0, [pc, #324]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000ed8:	f007 f856 	bl	8007f88 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000edc:	202c      	movs	r0, #44	; 0x2c
 8000ede:	f7ff fc0d 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	484c      	ldr	r0, [pc, #304]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000eea:	f007 f84d 	bl	8007f88 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e035      	b.n	8000f60 <ILI9341_Draw_Char+0x174>
				for(i=0;i<8;i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e02c      	b.n	8000f54 <ILI9341_Draw_Char+0x168>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000efe:	3b20      	subs	r3, #32
 8000f00:	4a48      	ldr	r2, [pc, #288]	; (8001024 <ILI9341_Draw_Char+0x238>)
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	441a      	add	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f1c3 0307 	rsb	r3, r3, #7
 8000f14:	fa42 f303 	asr.w	r3, r2, r3
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00b      	beq.n	8000f38 <ILI9341_Draw_Char+0x14c>
						ILI9341_SPI_Send(color>>8);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fbe8 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fbe3 	bl	80006fc <ILI9341_SPI_Send>
 8000f36:	e00a      	b.n	8000f4e <ILI9341_Draw_Char+0x162>
						ILI9341_SPI_Send(phone>>8);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbdc 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fbd7 	bl	80006fc <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	ddcf      	ble.n	8000efa <ILI9341_Draw_Char+0x10e>
			for(h=0;h<16;h++)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	ddc6      	ble.n	8000ef4 <ILI9341_Draw_Char+0x108>
		break;
 8000f66:	e054      	b.n	8001012 <ILI9341_Draw_Char+0x226>
			ILI9341_Set_Address(x, y, x+9, y+16);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3309      	adds	r3, #9
 8000f70:	461a      	mov	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3310      	adds	r3, #16
 8000f76:	f7ff fc7f 	bl	8000878 <ILI9341_Set_Address>
			DC_COMMAND;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f80:	4826      	ldr	r0, [pc, #152]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000f82:	f007 f801 	bl	8007f88 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8000f86:	202c      	movs	r0, #44	; 0x2c
 8000f88:	f7ff fbb8 	bl	80006fc <ILI9341_SPI_Send>
			DC_DATA;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4822      	ldr	r0, [pc, #136]	; (800101c <ILI9341_Draw_Char+0x230>)
 8000f94:	f006 fff8 	bl	8007f88 <HAL_GPIO_WritePin>
			for(h=0;h<30;h++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e035      	b.n	800100a <ILI9341_Draw_Char+0x21e>
				for(i=0;i<8;i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e02c      	b.n	8000ffe <ILI9341_Draw_Char+0x212>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8000fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fa8:	3b20      	subs	r3, #32
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <ILI9341_Draw_Char+0x238>)
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	441a      	add	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	fa42 f303 	asr.w	r3, r2, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <ILI9341_Draw_Char+0x1f6>
						ILI9341_SPI_Send(color>>8);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fb93 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fb8e 	bl	80006fc <ILI9341_SPI_Send>
 8000fe0:	e00a      	b.n	8000ff8 <ILI9341_Draw_Char+0x20c>
						ILI9341_SPI_Send(phone>>8);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fb87 	bl	80006fc <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fb82 	bl	80006fc <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b07      	cmp	r3, #7
 8001002:	ddcf      	ble.n	8000fa4 <ILI9341_Draw_Char+0x1b8>
			for(h=0;h<30;h++)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	3301      	adds	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b1d      	cmp	r3, #29
 800100e:	ddc6      	ble.n	8000f9e <ILI9341_Draw_Char+0x1b2>
		break;
 8001010:	bf00      	nop
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020c00 	.word	0x40020c00
 8001020:	0800e92c 	.word	0x0800e92c
 8001024:	0800ec04 	.word	0x0800ec04

08001028 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <Before_Sending_Data+0x20>)
 8001034:	f006 ffa8 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	4802      	ldr	r0, [pc, #8]	; (8001048 <Before_Sending_Data+0x20>)
 8001040:	f006 ffa2 	bl	8007f88 <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40020c00 	.word	0x40020c00

0800104c <Before_Sending_Command>:

static void Before_Sending_Command() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <Before_Sending_Command+0x20>)
 8001058:	f006 ff96 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	4802      	ldr	r0, [pc, #8]	; (800106c <Before_Sending_Command+0x20>)
 8001064:	f006 ff90 	bl	8007f88 <HAL_GPIO_WritePin>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020c00 	.word	0x40020c00

08001070 <Si468x_dab_init>:

static uint8_t slideshow_data[8500];


void Si468x_dab_init()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	send_debug_msg("-----------------------------Si468x DAB Mode init-----------------------------", CRLF_SEND);
 8001074:	2101      	movs	r1, #1
 8001076:	482e      	ldr	r0, [pc, #184]	; (8001130 <Si468x_dab_init+0xc0>)
 8001078:	f002 fc76 	bl	8003968 <send_debug_msg>
	Si468x_reset();
 800107c:	f000 f85a 	bl	8001134 <Si468x_reset>
	Si468x_power_up();
 8001080:	f000 f874 	bl	800116c <Si468x_power_up>
	Si468x_bootloader_load_host();
 8001084:	f000 f8f6 	bl	8001274 <Si468x_bootloader_load_host>
	Si468x_firmware_load_flash(IMAGE_DAB_6_0_9_START_ADDR);
 8001088:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800108c:	f000 f966 	bl	800135c <Si468x_firmware_load_flash>
	Si468x_boot();
 8001090:	f000 fa04 	bl	800149c <Si468x_boot>
	Si468x_get_part_info();
 8001094:	f000 fbbc 	bl	8001810 <Si468x_get_part_info>
	Si468x_get_sys_state();
 8001098:	f000 fb34 	bl	8001704 <Si468x_get_sys_state>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_CFG, 0x01); 						//włączanie lub wyłącznie switcha front-end, prawdopodobnie dla dab dać 0x00, dla FM 0x01
 800109c:	2101      	movs	r1, #1
 800109e:	f241 7012 	movw	r0, #5906	; 0x1712
 80010a2:	f000 fc25 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARM, 0xF8a9); 						//dla DAB 0xF8A9 lub 0xF784, sprawdzic jak lepiej dziala. Dla FM 0xEDB5.
 80010a6:	f64f 01a9 	movw	r1, #63657	; 0xf8a9
 80010aa:	f241 7010 	movw	r0, #5904	; 0x1710
 80010ae:	f000 fc1f 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_TUNE_FE_VARB, 0x01c6); 						//dla DAB 0x01C6 lub 0x01D8, sprawdzic jak lepiej dziala. Dla FM 0x01E3.
 80010b2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010b6:	f241 7011 	movw	r0, #5905	; 0x1711
 80010ba:	f000 fc19 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_THRESHOLD, 0x7); 				//prog RSSI od kiedy łapie kanał, default 12
 80010be:	2107      	movs	r1, #7
 80010c0:	f24b 2001 	movw	r0, #45569	; 0xb201
 80010c4:	f000 fc14 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_RSSI_TIME, 0x30); 					//czas po ktorym na podstawie RSSI jest określany Valid, od 0 do 63 ms, default 30 = 0x1e
 80010c8:	2130      	movs	r1, #48	; 0x30
 80010ca:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80010ce:	f000 fc0f 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_VALID_ACQ_TIME, 0xBB8); 					//czas jaki się czeka na osiągnięcie ACQ, jak nie osiagnie to uznaje ze nie ma sygnalu, od 0 do 4095 ms, default 2000 = 0x7D0
 80010d2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010d6:	f24b 2002 	movw	r0, #45570	; 0xb202
 80010da:	f000 fc09 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_XPAD_ENABLE, 0x4005); 						//określa które featury PAD będą przesyłane do hosta. bylo 0x4005
 80010de:	f244 0105 	movw	r1, #16389	; 0x4005
 80010e2:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 80010e6:	f000 fc03 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD, 0x01); 			//określa co ile będzie aktualizowana lista usług, x100 ms. Bylo 6, testowo 1, zeby lepiej czytac nazwy
 80010ea:	2101      	movs	r1, #1
 80010ec:	f24b 3001 	movw	r0, #45825	; 0xb301
 80010f0:	f000 fbfe 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_EVENT_MIN_SVRLIST_PERIOD_RECONFIG, 0x01); 	//określa co ile będzie aktualizowana lista usług w trakcie rekonfiguracji, x100 ms
 80010f4:	2101      	movs	r1, #1
 80010f6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80010fa:	f000 fbf9 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_ENABLE, 0x01);							//tylko soft mute włączone przy slabym sygnale
 80010fe:	2101      	movs	r1, #1
 8001100:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001104:	f000 fbf4 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_MUTE_SIGLOSS_THRESHOLD, 0x05);			//próg wyciszania audio jak sygnal jest utracony, default 0x06
 8001108:	2105      	movs	r1, #5
 800110a:	f24b 5001 	movw	r0, #46337	; 0xb501
 800110e:	f000 fbef 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DAB_ACF_SOFTMUTE_BER_LIMITS, 0xE2C4); 			//limit BER kiedy soft mute zadziała. Defaultowo 0xE2A6
 8001112:	f24e 21c4 	movw	r1, #58052	; 0xe2c4
 8001116:	f24b 5003 	movw	r0, #46339	; 0xb503
 800111a:	f000 fbe9 	bl	80018f0 <Si468x_set_property>
	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x01);				//Enables the DSRVPCKTINT interrupt of the GET_DIGITAL_SERVICE_DATA command
 800111e:	2101      	movs	r1, #1
 8001120:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8001124:	f000 fbe4 	bl	80018f0 <Si468x_set_property>
//	Si468x_dab_get_freq_list(); 													//odczytujemy z ukladu liste czestotliwosci do tablicy
	Si468x_get_sys_state(); //kontrolnie zeby sprawdzic czy demod dziala
 8001128:	f000 faec 	bl	8001704 <Si468x_get_sys_state>

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	0800d4cc 	.word	0x0800d4cc

08001134 <Si468x_reset>:

void Si468x_reset()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	send_debug_msg("Resetting Si468x...", CRLF_SEND);
 8001138:	2101      	movs	r1, #1
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <Si468x_reset+0x30>)
 800113c:	f002 fc14 	bl	8003968 <send_debug_msg>
	RESET_PIN_LOW;
 8001140:	2200      	movs	r2, #0
 8001142:	2120      	movs	r1, #32
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <Si468x_reset+0x34>)
 8001146:	f006 ff1f 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800114a:	2064      	movs	r0, #100	; 0x64
 800114c:	f006 f918 	bl	8007380 <HAL_Delay>
	RESET_PIN_HIGH;
 8001150:	2201      	movs	r2, #1
 8001152:	2120      	movs	r1, #32
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <Si468x_reset+0x34>)
 8001156:	f006 ff17 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800115a:	20c8      	movs	r0, #200	; 0xc8
 800115c:	f006 f910 	bl	8007380 <HAL_Delay>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800d51c 	.word	0x0800d51c
 8001168:	40020800 	.word	0x40020800

0800116c <Si468x_power_up>:
{
	RESET_PIN_HIGH;
}

void Si468x_power_up()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Si468x Power Up---------------------", CRLF_SEND);
 8001170:	2101      	movs	r1, #1
 8001172:	4826      	ldr	r0, [pc, #152]	; (800120c <Si468x_power_up+0xa0>)
 8001174:	f002 fbf8 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_POWER_UP;	//Power up command code
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <Si468x_power_up+0xa4>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x80;					//Disable toggling host interrupt line = 0x00; enable = 0x80
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <Si468x_power_up+0xa4>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x17;					//Clock mode 1 (crystal mode), TR_SIZE = 0x7 for 19.2MHz crystal
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <Si468x_power_up+0xa4>)
 8001186:	2217      	movs	r2, #23
 8001188:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x50;					//start IBIAS = 800 uA (80 * 10) for 19.2MHz Crystal with 250R startup ESR
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <Si468x_power_up+0xa4>)
 800118c:	2250      	movs	r2, #80	; 0x50
 800118e:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = 0x00;					//crystal frequency in MHz [7:0], 19.2 MHz
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <Si468x_power_up+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = 0xF8;	//F8 standard	//crystal frequency in MHz [15:8], 19.2 MHz
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <Si468x_power_up+0xa4>)
 8001198:	22f8      	movs	r2, #248	; 0xf8
 800119a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = 0x24;					//crystal frequency in MHz [23:16], 19.2 MHz
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <Si468x_power_up+0xa4>)
 800119e:	2224      	movs	r2, #36	; 0x24
 80011a0:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = 0x01;					//crystal frequency in MHz [31:24], 19.2 MHz
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <Si468x_power_up+0xa4>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	71da      	strb	r2, [r3, #7]
	dab_spi_tx_buffer[8]  = 0x00;					//CTUN = 0 (there's no need to add load capacitance)
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <Si468x_power_up+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x10;					//not used - value as in documentation
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <Si468x_power_up+0xa4>)
 80011b0:	2210      	movs	r2, #16
 80011b2:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;					//not used - value as in documentation
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <Si468x_power_up+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;					//not used - value as in documentation
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <Si468x_power_up+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	72da      	strb	r2, [r3, #11]
	dab_spi_tx_buffer[12] = 0x00;					//not used - value as in documentation
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <Si468x_power_up+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	731a      	strb	r2, [r3, #12]
	dab_spi_tx_buffer[13] = 0x28;					//running IBIAS = 400 uA (80 * 10) for 19.2MHz Crystal with 50R running ESR (recommended: start IBIAS = 2 * running IBIAS)
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <Si468x_power_up+0xa4>)
 80011c8:	2228      	movs	r2, #40	; 0x28
 80011ca:	735a      	strb	r2, [r3, #13]
	dab_spi_tx_buffer[14] = 0x00;					//not used - value as in documentation
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <Si468x_power_up+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	739a      	strb	r2, [r3, #14]
	dab_spi_tx_buffer[15] = 0x00;					//not used - value as in documentation
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <Si468x_power_up+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	73da      	strb	r2, [r3, #15]

	status = Si468x_write_command(16, dab_spi_tx_buffer);
 80011d8:	490d      	ldr	r1, [pc, #52]	; (8001210 <Si468x_power_up+0xa4>)
 80011da:	2010      	movs	r0, #16
 80011dc:	f000 fa58 	bl	8001690 <Si468x_write_command>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <Si468x_power_up+0xa8>)
 80011e6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f006 f8c9 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80011ee:	490a      	ldr	r1, [pc, #40]	; (8001218 <Si468x_power_up+0xac>)
 80011f0:	2005      	movs	r0, #5
 80011f2:	f000 fa6f 	bl	80016d4 <Si468x_read_reply>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <Si468x_power_up+0xa8>)
 80011fc:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Si468x powered up successfully!", CRLF_SEND);
 80011fe:	2101      	movs	r1, #1
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <Si468x_power_up+0xb0>)
 8001202:	f002 fbb1 	bl	8003968 <send_debug_msg>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800d530 	.word	0x0800d530
 8001210:	200001a8 	.word	0x200001a8
 8001214:	20003510 	.word	0x20003510
 8001218:	200011a8 	.word	0x200011a8
 800121c:	0800d56c 	.word	0x0800d56c

08001220 <Si468x_load_init>:

void Si468x_load_init()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	send_debug_msg("Si468x load init CMD...", CRLF_SEND);
 8001224:	2101      	movs	r1, #1
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <Si468x_load_init+0x44>)
 8001228:	f002 fb9e 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_LOAD_INIT;	//Load Init command code
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <Si468x_load_init+0x48>)
 800122e:	2206      	movs	r2, #6
 8001230:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;					//Disable toggling host interrupt line
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <Si468x_load_init+0x48>)
 8001234:	2200      	movs	r2, #0
 8001236:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001238:	490b      	ldr	r1, [pc, #44]	; (8001268 <Si468x_load_init+0x48>)
 800123a:	2002      	movs	r0, #2
 800123c:	f000 fa28 	bl	8001690 <Si468x_write_command>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <Si468x_load_init+0x4c>)
 8001246:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f006 f899 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <Si468x_load_init+0x50>)
 8001250:	2005      	movs	r0, #5
 8001252:	f000 fa3f 	bl	80016d4 <Si468x_read_reply>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <Si468x_load_init+0x4c>)
 800125c:	701a      	strb	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	0800d58c 	.word	0x0800d58c
 8001268:	200001a8 	.word	0x200001a8
 800126c:	20003510 	.word	0x20003510
 8001270:	200011a8 	.word	0x200011a8

08001274 <Si468x_bootloader_load_host>:

void Si468x_bootloader_load_host()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	send_debug_msg("---------Loading bootloader to Si468x from Host----------", CRLF_SEND);
 800127a:	2101      	movs	r1, #1
 800127c:	4830      	ldr	r0, [pc, #192]	; (8001340 <Si468x_bootloader_load_host+0xcc>)
 800127e:	f002 fb73 	bl	8003968 <send_debug_msg>
	Si468x_load_init();
 8001282:	f7ff ffcd 	bl	8001220 <Si468x_load_init>
	uint16_t patch_size = sizeof(patch_full);
 8001286:	f241 63a4 	movw	r3, #5796	; 0x16a4
 800128a:	807b      	strh	r3, [r7, #2]

	dab_spi_tx_buffer[0] = SI468X_CMD_HOST_LOAD;
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 800128e:	2204      	movs	r2, #4
 8001290:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 8001294:	2200      	movs	r2, #0
 8001296:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 800129a:	2200      	movs	r2, #0
 800129c:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	70da      	strb	r2, [r3, #3]

	uint16_t i, j;

	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	80fb      	strh	r3, [r7, #6]
 80012a8:	e03e      	b.n	8001328 <Si468x_bootloader_load_host+0xb4>
	{
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	80bb      	strh	r3, [r7, #4]
 80012ae:	e014      	b.n	80012da <Si468x_bootloader_load_host+0x66>
		{
			dab_spi_tx_buffer[4 + j] = patch_full[j + (patch_size / BOOT_WRITE_STEPS) * i];
 80012b0:	88ba      	ldrh	r2, [r7, #4]
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	4924      	ldr	r1, [pc, #144]	; (8001348 <Si468x_bootloader_load_host+0xd4>)
 80012b6:	fba1 1303 	umull	r1, r3, r1, r3
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	441a      	add	r2, r3
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	3304      	adds	r3, #4
 80012cc:	491f      	ldr	r1, [pc, #124]	; (800134c <Si468x_bootloader_load_host+0xd8>)
 80012ce:	5c89      	ldrb	r1, [r1, r2]
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 80012d2:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < patch_size / BOOT_WRITE_STEPS; j++)
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	80bb      	strh	r3, [r7, #4]
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <Si468x_bootloader_load_host+0xd4>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	085b      	lsrs	r3, r3, #1
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	88ba      	ldrh	r2, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3e1      	bcc.n	80012b0 <Si468x_bootloader_load_host+0x3c>
		}
		status = Si468x_write_command(patch_size / BOOT_WRITE_STEPS + 4, dab_spi_tx_buffer);
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4a16      	ldr	r2, [pc, #88]	; (8001348 <Si468x_bootloader_load_host+0xd4>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	085b      	lsrs	r3, r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	3304      	adds	r3, #4
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4911      	ldr	r1, [pc, #68]	; (8001344 <Si468x_bootloader_load_host+0xd0>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f9c6 	bl	8001690 <Si468x_write_command>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <Si468x_bootloader_load_host+0xdc>)
 800130a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f006 f837 	bl	8007380 <HAL_Delay>
		status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001312:	4910      	ldr	r1, [pc, #64]	; (8001354 <Si468x_bootloader_load_host+0xe0>)
 8001314:	2005      	movs	r0, #5
 8001316:	f000 f9dd 	bl	80016d4 <Si468x_read_reply>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <Si468x_bootloader_load_host+0xdc>)
 8001320:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < BOOT_WRITE_STEPS; i++)
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	3301      	adds	r3, #1
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d9bd      	bls.n	80012aa <Si468x_bootloader_load_host+0x36>

	}
	send_debug_msg("Bootloader loaded successfully!", CRLF_SEND);
 800132e:	2101      	movs	r1, #1
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <Si468x_bootloader_load_host+0xe4>)
 8001332:	f002 fb19 	bl	8003968 <send_debug_msg>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	0800d5a4 	.word	0x0800d5a4
 8001344:	200001a8 	.word	0x200001a8
 8001348:	aaaaaaab 	.word	0xaaaaaaab
 800134c:	0800f1f4 	.word	0x0800f1f4
 8001350:	20003510 	.word	0x20003510
 8001354:	200011a8 	.word	0x200011a8
 8001358:	0800d5e0 	.word	0x0800d5e0

0800135c <Si468x_firmware_load_flash>:

void Si468x_firmware_load_flash(uint32_t start_address)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	send_debug_msg("---------Writing image to Si468x from SPI Flash----------", CRLF_SEND);
 8001364:	2101      	movs	r1, #1
 8001366:	4845      	ldr	r0, [pc, #276]	; (800147c <Si468x_firmware_load_flash+0x120>)
 8001368:	f002 fafe 	bl	8003968 <send_debug_msg>
	Si468x_load_init();
 800136c:	f7ff ff58 	bl	8001220 <Si468x_load_init>
	dab_spi_tx_buffer[0]  = SI468X_CMD_FLASH_LOAD;				//Power up command code
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001372:	2205      	movs	r2, #5
 8001374:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;								//not used - value as in documentation
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001378:	2200      	movs	r2, #0
 800137a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2]  = 0x00;								//not used - value as in documentation
 800137c:	4b40      	ldr	r3, [pc, #256]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 800137e:	2200      	movs	r2, #0
 8001380:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3]  = 0x00;								//not used - value as in documentation
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001384:	2200      	movs	r2, #0
 8001386:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4]  = start_address & 0xFF;				//Flash start address [7:0] 0x6000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 800138e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = start_address >> 8;					//Flash start address [15:8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001398:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = start_address >> 16;				//Flash start address [23:16]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b37      	ldr	r3, [pc, #220]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013a2:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = start_address >> 24;				//Flash start address [31:24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0e1b      	lsrs	r3, r3, #24
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013ac:	71da      	strb	r2, [r3, #7]
	send_debug_msg("Start Address: 0x", CRLF_NO_SEND);
 80013ae:	2100      	movs	r1, #0
 80013b0:	4834      	ldr	r0, [pc, #208]	; (8001484 <Si468x_firmware_load_flash+0x128>)
 80013b2:	f002 fad9 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[4], itoa_buffer, 16), CRLF_NO_SEND);
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	2210      	movs	r2, #16
 80013bc:	4932      	ldr	r1, [pc, #200]	; (8001488 <Si468x_firmware_load_flash+0x12c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b ffd4 	bl	800d36c <itoa>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 facd 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[5], itoa_buffer, 16), CRLF_NO_SEND);
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013d0:	795b      	ldrb	r3, [r3, #5]
 80013d2:	2210      	movs	r2, #16
 80013d4:	492c      	ldr	r1, [pc, #176]	; (8001488 <Si468x_firmware_load_flash+0x12c>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00b ffc8 	bl	800d36c <itoa>
 80013dc:	4603      	mov	r3, r0
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fac1 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[6], itoa_buffer, 16), CRLF_NO_SEND);
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 80013e8:	799b      	ldrb	r3, [r3, #6]
 80013ea:	2210      	movs	r2, #16
 80013ec:	4926      	ldr	r1, [pc, #152]	; (8001488 <Si468x_firmware_load_flash+0x12c>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b ffbc 	bl	800d36c <itoa>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fab5 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_tx_buffer[7], itoa_buffer, 16), CRLF_SEND);
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001400:	79db      	ldrb	r3, [r3, #7]
 8001402:	2210      	movs	r2, #16
 8001404:	4920      	ldr	r1, [pc, #128]	; (8001488 <Si468x_firmware_load_flash+0x12c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f00b ffb0 	bl	800d36c <itoa>
 800140c:	4603      	mov	r3, r0
 800140e:	2101      	movs	r1, #1
 8001410:	4618      	mov	r0, r3
 8001412:	f002 faa9 	bl	8003968 <send_debug_msg>

	dab_spi_tx_buffer[8]  = 0x00;								//not used - value as in documentation
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001418:	2200      	movs	r2, #0
 800141a:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = 0x00;								//not used - value as in documentation
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 800141e:	2200      	movs	r2, #0
 8001420:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10] = 0x00;								//not used - value as in documentation
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001424:	2200      	movs	r2, #0
 8001426:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11] = 0x00;								//not used - value as in documentation
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 800142a:	2200      	movs	r2, #0
 800142c:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 800142e:	4914      	ldr	r1, [pc, #80]	; (8001480 <Si468x_firmware_load_flash+0x124>)
 8001430:	200c      	movs	r0, #12
 8001432:	f000 f92d 	bl	8001690 <Si468x_write_command>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <Si468x_firmware_load_flash+0x130>)
 800143c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f005 ff9e 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001444:	4912      	ldr	r1, [pc, #72]	; (8001490 <Si468x_firmware_load_flash+0x134>)
 8001446:	2005      	movs	r0, #5
 8001448:	f000 f944 	bl	80016d4 <Si468x_read_reply>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <Si468x_firmware_load_flash+0x130>)
 8001452:	701a      	strb	r2, [r3, #0]
	if(dab_spi_rx_buffer[0] & 0x40)
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <Si468x_firmware_load_flash+0x134>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <Si468x_firmware_load_flash+0x10e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001460:	2101      	movs	r1, #1
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <Si468x_firmware_load_flash+0x138>)
 8001464:	f002 fa80 	bl	8003968 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
	}
}
 8001468:	e003      	b.n	8001472 <Si468x_firmware_load_flash+0x116>
		send_debug_msg("Image loaded successfully!", CRLF_SEND);
 800146a:	2101      	movs	r1, #1
 800146c:	480a      	ldr	r0, [pc, #40]	; (8001498 <Si468x_firmware_load_flash+0x13c>)
 800146e:	f002 fa7b 	bl	8003968 <send_debug_msg>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800d600 	.word	0x0800d600
 8001480:	200001a8 	.word	0x200001a8
 8001484:	0800d63c 	.word	0x0800d63c
 8001488:	200034d0 	.word	0x200034d0
 800148c:	20003510 	.word	0x20003510
 8001490:	200011a8 	.word	0x200011a8
 8001494:	0800d650 	.word	0x0800d650
 8001498:	0800d660 	.word	0x0800d660

0800149c <Si468x_boot>:

void Si468x_boot()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	send_debug_msg("---------------------Booting Si468x----------------------", CRLF_SEND);
 80014a0:	2101      	movs	r1, #1
 80014a2:	4816      	ldr	r0, [pc, #88]	; (80014fc <Si468x_boot+0x60>)
 80014a4:	f002 fa60 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_BOOT;	//Power up command code
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <Si468x_boot+0x64>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;				//Value as in documentation
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <Si468x_boot+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	705a      	strb	r2, [r3, #1]

	status  = Si468x_write_command(2, dab_spi_tx_buffer);
 80014b4:	4912      	ldr	r1, [pc, #72]	; (8001500 <Si468x_boot+0x64>)
 80014b6:	2002      	movs	r0, #2
 80014b8:	f000 f8ea 	bl	8001690 <Si468x_write_command>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <Si468x_boot+0x68>)
 80014c2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f005 ff5b 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80014ca:	490f      	ldr	r1, [pc, #60]	; (8001508 <Si468x_boot+0x6c>)
 80014cc:	2005      	movs	r0, #5
 80014ce:	f000 f901 	bl	80016d4 <Si468x_read_reply>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <Si468x_boot+0x68>)
 80014d8:	701a      	strb	r2, [r3, #0]
	if((dab_spi_rx_buffer[3] & 0xC0) == 0xC0)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <Si468x_boot+0x6c>)
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014e2:	2bc0      	cmp	r3, #192	; 0xc0
 80014e4:	d104      	bne.n	80014f0 <Si468x_boot+0x54>
	{
		send_debug_msg("Si468x booted successfully!", CRLF_SEND);
 80014e6:	2101      	movs	r1, #1
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <Si468x_boot+0x70>)
 80014ea:	f002 fa3d 	bl	8003968 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Si468x boot error!", CRLF_SEND);
	}
}
 80014ee:	e003      	b.n	80014f8 <Si468x_boot+0x5c>
		send_debug_msg("Si468x boot error!", CRLF_SEND);
 80014f0:	2101      	movs	r1, #1
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <Si468x_boot+0x74>)
 80014f4:	f002 fa38 	bl	8003968 <send_debug_msg>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	0800d67c 	.word	0x0800d67c
 8001500:	200001a8 	.word	0x200001a8
 8001504:	20003510 	.word	0x20003510
 8001508:	200011a8 	.word	0x200011a8
 800150c:	0800d6b8 	.word	0x0800d6b8
 8001510:	0800d6d4 	.word	0x0800d6d4

08001514 <Si468x_write_single_byte>:

void Si468x_write_single_byte(uint8_t byte_to_write)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_write, 1, 100);
 800151e:	1df9      	adds	r1, r7, #7
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	2201      	movs	r2, #1
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <Si468x_write_single_byte+0x20>)
 8001526:	f009 ff04 	bl	800b332 <HAL_SPI_Transmit>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20006f00 	.word	0x20006f00

08001538 <Si468x_read_single_byte>:

uint8_t Si468x_read_single_byte()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	uint8_t data_buffer = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data_buffer, 1, 100);
 8001542:	1df9      	adds	r1, r7, #7
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	2201      	movs	r2, #1
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <Si468x_read_single_byte+0x20>)
 800154a:	f00a f82e 	bl	800b5aa <HAL_SPI_Receive>
	return data_buffer;
 800154e:	79fb      	ldrb	r3, [r7, #7]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20006f00 	.word	0x20006f00

0800155c <Si468x_wait_for_CTS>:

RETURN_CODE Si468x_wait_for_CTS(uint16_t timeout)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < timeout; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	81fb      	strh	r3, [r7, #14]
 800156a:	e01f      	b.n	80015ac <Si468x_wait_for_CTS+0x50>
	{
		Si468x_read_reply(1, dab_spi_rx_buffer);
 800156c:	4916      	ldr	r1, [pc, #88]	; (80015c8 <Si468x_wait_for_CTS+0x6c>)
 800156e:	2001      	movs	r0, #1
 8001570:	f000 f8b0 	bl	80016d4 <Si468x_read_reply>
		if(rd_reply.cts)
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <Si468x_wait_for_CTS+0x70>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00e      	beq.n	80015a0 <Si468x_wait_for_CTS+0x44>
		{
			if(rd_reply.err_cmd)
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <Si468x_wait_for_CTS+0x70>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <Si468x_wait_for_CTS+0x40>
			{
				send_debug_msg("Command Error during waiting for CTS!", CRLF_SEND);
 8001590:	2101      	movs	r1, #1
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <Si468x_wait_for_CTS+0x74>)
 8001594:	f002 f9e8 	bl	8003968 <send_debug_msg>
				return COMMAND_ERROR;
 8001598:	2320      	movs	r3, #32
 800159a:	e010      	b.n	80015be <Si468x_wait_for_CTS+0x62>
			}
			return SUCCESS;
 800159c:	2300      	movs	r3, #0
 800159e:	e00e      	b.n	80015be <Si468x_wait_for_CTS+0x62>
		}
		HAL_Delay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f005 feed 	bl	8007380 <HAL_Delay>
	for(uint16_t i = 0; i < timeout; i++)
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	81fb      	strh	r3, [r7, #14]
 80015ac:	89fa      	ldrh	r2, [r7, #14]
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d3db      	bcc.n	800156c <Si468x_wait_for_CTS+0x10>
	}
	send_debug_msg("Timeout error!", CRLF_SEND);
 80015b4:	2101      	movs	r1, #1
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <Si468x_wait_for_CTS+0x78>)
 80015b8:	f002 f9d6 	bl	8003968 <send_debug_msg>
	return TIMEOUT;
 80015bc:	2308      	movs	r3, #8
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200011a8 	.word	0x200011a8
 80015cc:	200035fc 	.word	0x200035fc
 80015d0:	0800d6e8 	.word	0x0800d6e8
 80015d4:	0800d710 	.word	0x0800d710

080015d8 <Si468x_write_multiple>:

void Si468x_write_multiple(uint16_t len, uint8_t* data_to_write)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	81fb      	strh	r3, [r7, #14]
	CS_PIN_LOW;
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <Si468x_write_multiple+0x4c>)
 80015ee:	f006 fccb 	bl	8007f88 <HAL_GPIO_WritePin>
	while(len--)
 80015f2:	e009      	b.n	8001608 <Si468x_write_multiple+0x30>
	{
		Si468x_write_single_byte(data_to_write[i++]);
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	81fa      	strh	r2, [r7, #14]
 80015fa:	461a      	mov	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff86 	bl	8001514 <Si468x_write_single_byte>
	while(len--)
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	80fa      	strh	r2, [r7, #6]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <Si468x_write_multiple+0x1c>
	}
	CS_PIN_HIGH;
 8001612:	2201      	movs	r2, #1
 8001614:	2110      	movs	r1, #16
 8001616:	4803      	ldr	r0, [pc, #12]	; (8001624 <Si468x_write_multiple+0x4c>)
 8001618:	f006 fcb6 	bl	8007f88 <HAL_GPIO_WritePin>
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40020800 	.word	0x40020800

08001628 <Si468x_read_multiple>:

void Si468x_read_multiple(uint16_t len, uint8_t* read_buffer)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	81fb      	strh	r3, [r7, #14]
	CS_PIN_HIGH;
 8001638:	2201      	movs	r2, #1
 800163a:	2110      	movs	r1, #16
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <Si468x_read_multiple+0x64>)
 800163e:	f006 fca3 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001642:	2003      	movs	r0, #3
 8001644:	f005 fe9c 	bl	8007380 <HAL_Delay>
	CS_PIN_LOW;
 8001648:	2200      	movs	r2, #0
 800164a:	2110      	movs	r1, #16
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <Si468x_read_multiple+0x64>)
 800164e:	f006 fc9b 	bl	8007f88 <HAL_GPIO_WritePin>
	Si468x_write_single_byte(0x00);
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff ff5e 	bl	8001514 <Si468x_write_single_byte>
	while(len--)
 8001658:	e009      	b.n	800166e <Si468x_read_multiple+0x46>
	{
		read_buffer[i++] = Si468x_read_single_byte();
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	81fa      	strh	r2, [r7, #14]
 8001660:	461a      	mov	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	189c      	adds	r4, r3, r2
 8001666:	f7ff ff67 	bl	8001538 <Si468x_read_single_byte>
 800166a:	4603      	mov	r3, r0
 800166c:	7023      	strb	r3, [r4, #0]
	while(len--)
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	80fa      	strh	r2, [r7, #6]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <Si468x_read_multiple+0x32>
	}
	CS_PIN_HIGH;
 8001678:	2201      	movs	r2, #1
 800167a:	2110      	movs	r1, #16
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <Si468x_read_multiple+0x64>)
 800167e:	f006 fc83 	bl	8007f88 <HAL_GPIO_WritePin>
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	bf00      	nop
 800168c:	40020800 	.word	0x40020800

08001690 <Si468x_write_command>:

RETURN_CODE Si468x_write_command(uint16_t length, uint8_t *buffer)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	80fb      	strh	r3, [r7, #6]
	RETURN_CODE ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 800169c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016a0:	f7ff ff5c 	bl	800155c <Si468x_wait_for_CTS>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]

	if((ret == SUCCESS) || (ret == COMMAND_ERROR)) //It is possible that there is a pending command error - we need to be able to send another command to clear out this state
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <Si468x_write_command+0x24>
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d10a      	bne.n	80016ca <Si468x_write_command+0x3a>
	{
		Si468x_write_multiple(length, buffer);
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff8d 	bl	80015d8 <Si468x_write_multiple>

		ret = Si468x_wait_for_CTS(POLL_TIMEOUT_MS);
 80016be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016c2:	f7ff ff4b 	bl	800155c <Si468x_wait_for_CTS>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
	}
//	send_debug_msg("Command Sent Successfully!", CRLF_SEND);
	return ret;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <Si468x_read_reply>:

RETURN_CODE Si468x_read_reply(uint16_t length, uint8_t *buffer)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	80fb      	strh	r3, [r7, #6]
	Si468x_read_multiple(length, buffer);
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff9f 	bl	8001628 <Si468x_read_multiple>
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <Si468x_read_reply+0x28>)
 80016ec:	681b      	ldr	r3, [r3, #0]
	//fill rd_reply struct with received data to get values of flags, both commands are working
//	rd_reply = *((rd_reply_t*)dab_spi_rx_buffer);
	memcpy((uint8_t*)&rd_reply, (uint8_t*)dab_spi_rx_buffer, sizeof(rd_reply_t));
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <Si468x_read_reply+0x2c>)
 80016f0:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200011a8 	.word	0x200011a8
 8001700:	200035fc 	.word	0x200035fc

08001704 <Si468x_get_sys_state>:

void Si468x_get_sys_state()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	send_debug_msg("---------------Getting Si468x system state---------------", CRLF_SEND);
 8001708:	2101      	movs	r1, #1
 800170a:	4833      	ldr	r0, [pc, #204]	; (80017d8 <Si468x_get_sys_state+0xd4>)
 800170c:	f002 f92c 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_SYS_STATE;	//Get Sys State Command Code
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <Si468x_get_sys_state+0xd8>)
 8001712:	2209      	movs	r2, #9
 8001714:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <Si468x_get_sys_state+0xd8>)
 8001718:	2200      	movs	r2, #0
 800171a:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800171c:	492f      	ldr	r1, [pc, #188]	; (80017dc <Si468x_get_sys_state+0xd8>)
 800171e:	2002      	movs	r0, #2
 8001720:	f7ff ffb6 	bl	8001690 <Si468x_write_command>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <Si468x_get_sys_state+0xdc>)
 800172a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800172c:	2001      	movs	r0, #1
 800172e:	f005 fe27 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8001732:	492c      	ldr	r1, [pc, #176]	; (80017e4 <Si468x_get_sys_state+0xe0>)
 8001734:	2005      	movs	r0, #5
 8001736:	f7ff ffcd 	bl	80016d4 <Si468x_read_reply>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <Si468x_get_sys_state+0xdc>)
 8001740:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Status: ", CRLF_NO_SEND);
 8001742:	2100      	movs	r1, #0
 8001744:	4828      	ldr	r0, [pc, #160]	; (80017e8 <Si468x_get_sys_state+0xe4>)
 8001746:	f002 f90f 	bl	8003968 <send_debug_msg>
	switch(dab_spi_rx_buffer[4])
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <Si468x_get_sys_state+0xe0>)
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d83a      	bhi.n	80017c8 <Si468x_get_sys_state+0xc4>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <Si468x_get_sys_state+0x54>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	08001779 	.word	0x08001779
 800175c:	08001783 	.word	0x08001783
 8001760:	0800178d 	.word	0x0800178d
 8001764:	08001797 	.word	0x08001797
 8001768:	080017a1 	.word	0x080017a1
 800176c:	080017ab 	.word	0x080017ab
 8001770:	080017b5 	.word	0x080017b5
 8001774:	080017bf 	.word	0x080017bf
	{
		case 0:
			send_debug_msg("Bootloader is active.", CRLF_SEND);
 8001778:	2101      	movs	r1, #1
 800177a:	481c      	ldr	r0, [pc, #112]	; (80017ec <Si468x_get_sys_state+0xe8>)
 800177c:	f002 f8f4 	bl	8003968 <send_debug_msg>
			break;
 8001780:	e027      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 1:
			send_debug_msg("FM / FMHD is active.", CRLF_SEND);
 8001782:	2101      	movs	r1, #1
 8001784:	481a      	ldr	r0, [pc, #104]	; (80017f0 <Si468x_get_sys_state+0xec>)
 8001786:	f002 f8ef 	bl	8003968 <send_debug_msg>
			break;
 800178a:	e022      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 2:
			send_debug_msg("DAB / DAB+ is active.", CRLF_SEND);
 800178c:	2101      	movs	r1, #1
 800178e:	4819      	ldr	r0, [pc, #100]	; (80017f4 <Si468x_get_sys_state+0xf0>)
 8001790:	f002 f8ea 	bl	8003968 <send_debug_msg>
			break;
 8001794:	e01d      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 3:
			send_debug_msg("TDMB or data only DAB image is active.", CRLF_SEND);
 8001796:	2101      	movs	r1, #1
 8001798:	4817      	ldr	r0, [pc, #92]	; (80017f8 <Si468x_get_sys_state+0xf4>)
 800179a:	f002 f8e5 	bl	8003968 <send_debug_msg>
			break;
 800179e:	e018      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 4:
			send_debug_msg("FM / FMHD Demod is active.", CRLF_SEND);
 80017a0:	2101      	movs	r1, #1
 80017a2:	4816      	ldr	r0, [pc, #88]	; (80017fc <Si468x_get_sys_state+0xf8>)
 80017a4:	f002 f8e0 	bl	8003968 <send_debug_msg>
			break;
 80017a8:	e013      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 5:
			send_debug_msg("AM / AMHD is active.", CRLF_SEND);
 80017aa:	2101      	movs	r1, #1
 80017ac:	4814      	ldr	r0, [pc, #80]	; (8001800 <Si468x_get_sys_state+0xfc>)
 80017ae:	f002 f8db 	bl	8003968 <send_debug_msg>
			break;
 80017b2:	e00e      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 6:
			send_debug_msg("AM / AMHD Demod is active.", CRLF_SEND);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4813      	ldr	r0, [pc, #76]	; (8001804 <Si468x_get_sys_state+0x100>)
 80017b8:	f002 f8d6 	bl	8003968 <send_debug_msg>
			break;
 80017bc:	e009      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		case 7:
			send_debug_msg("DAB Demod is active.", CRLF_SEND);
 80017be:	2101      	movs	r1, #1
 80017c0:	4811      	ldr	r0, [pc, #68]	; (8001808 <Si468x_get_sys_state+0x104>)
 80017c2:	f002 f8d1 	bl	8003968 <send_debug_msg>
			break;
 80017c6:	e004      	b.n	80017d2 <Si468x_get_sys_state+0xce>

		default:
			send_debug_msg("Unrecognized state.", CRLF_SEND);
 80017c8:	2101      	movs	r1, #1
 80017ca:	4810      	ldr	r0, [pc, #64]	; (800180c <Si468x_get_sys_state+0x108>)
 80017cc:	f002 f8cc 	bl	8003968 <send_debug_msg>
			break;
 80017d0:	bf00      	nop
	}
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	0800d720 	.word	0x0800d720
 80017dc:	200001a8 	.word	0x200001a8
 80017e0:	20003510 	.word	0x20003510
 80017e4:	200011a8 	.word	0x200011a8
 80017e8:	0800d75c 	.word	0x0800d75c
 80017ec:	0800d768 	.word	0x0800d768
 80017f0:	0800d780 	.word	0x0800d780
 80017f4:	0800d798 	.word	0x0800d798
 80017f8:	0800d7b0 	.word	0x0800d7b0
 80017fc:	0800d7d8 	.word	0x0800d7d8
 8001800:	0800d7f4 	.word	0x0800d7f4
 8001804:	0800d80c 	.word	0x0800d80c
 8001808:	0800d828 	.word	0x0800d828
 800180c:	0800d840 	.word	0x0800d840

08001810 <Si468x_get_part_info>:

void Si468x_get_part_info()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Getting part info about Si468x-------------", CRLF_SEND);
 8001816:	2101      	movs	r1, #1
 8001818:	482d      	ldr	r0, [pc, #180]	; (80018d0 <Si468x_get_part_info+0xc0>)
 800181a:	f002 f8a5 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0]  = SI468X_CMD_GET_PART_INFO;	//Get Part Info Command Code
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <Si468x_get_part_info+0xc4>)
 8001820:	2208      	movs	r2, #8
 8001822:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1]  = 0x00;						//Value as in documentation
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <Si468x_get_part_info+0xc4>)
 8001826:	2200      	movs	r2, #0
 8001828:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800182a:	492a      	ldr	r1, [pc, #168]	; (80018d4 <Si468x_get_part_info+0xc4>)
 800182c:	2002      	movs	r0, #2
 800182e:	f7ff ff2f 	bl	8001690 <Si468x_write_command>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <Si468x_get_part_info+0xc8>)
 8001838:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f005 fda0 	bl	8007380 <HAL_Delay>
	Si468x_write_single_byte(0x00);
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fe67 	bl	8001514 <Si468x_write_single_byte>
	status = Si468x_read_reply(10, dab_spi_rx_buffer);
 8001846:	4925      	ldr	r1, [pc, #148]	; (80018dc <Si468x_get_part_info+0xcc>)
 8001848:	200a      	movs	r0, #10
 800184a:	f7ff ff43 	bl	80016d4 <Si468x_read_reply>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <Si468x_get_part_info+0xc8>)
 8001854:	701a      	strb	r2, [r3, #0]
	send_debug_msg("Chip revision: ", CRLF_NO_SEND);
 8001856:	2100      	movs	r1, #0
 8001858:	4821      	ldr	r0, [pc, #132]	; (80018e0 <Si468x_get_part_info+0xd0>)
 800185a:	f002 f885 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[4], itoa_buffer, 10), CRLF_SEND);
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <Si468x_get_part_info+0xcc>)
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	220a      	movs	r2, #10
 8001864:	491f      	ldr	r1, [pc, #124]	; (80018e4 <Si468x_get_part_info+0xd4>)
 8001866:	4618      	mov	r0, r3
 8001868:	f00b fd80 	bl	800d36c <itoa>
 800186c:	4603      	mov	r3, r0
 800186e:	2101      	movs	r1, #1
 8001870:	4618      	mov	r0, r3
 8001872:	f002 f879 	bl	8003968 <send_debug_msg>
	send_debug_msg("ROM ID: ", CRLF_NO_SEND);
 8001876:	2100      	movs	r1, #0
 8001878:	481b      	ldr	r0, [pc, #108]	; (80018e8 <Si468x_get_part_info+0xd8>)
 800187a:	f002 f875 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_spi_rx_buffer[5], itoa_buffer, 10), CRLF_SEND);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <Si468x_get_part_info+0xcc>)
 8001880:	795b      	ldrb	r3, [r3, #5]
 8001882:	220a      	movs	r2, #10
 8001884:	4917      	ldr	r1, [pc, #92]	; (80018e4 <Si468x_get_part_info+0xd4>)
 8001886:	4618      	mov	r0, r3
 8001888:	f00b fd70 	bl	800d36c <itoa>
 800188c:	4603      	mov	r3, r0
 800188e:	2101      	movs	r1, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f002 f869 	bl	8003968 <send_debug_msg>
	send_debug_msg("Part Number: ", CRLF_NO_SEND);
 8001896:	2100      	movs	r1, #0
 8001898:	4814      	ldr	r0, [pc, #80]	; (80018ec <Si468x_get_part_info+0xdc>)
 800189a:	f002 f865 	bl	8003968 <send_debug_msg>
	uint16_t part_number = (dab_spi_rx_buffer[9] << 8) + dab_spi_rx_buffer[8];
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <Si468x_get_part_info+0xcc>)
 80018a0:	7a5b      	ldrb	r3, [r3, #9]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <Si468x_get_part_info+0xcc>)
 80018aa:	7a1b      	ldrb	r3, [r3, #8]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	80fb      	strh	r3, [r7, #6]
	send_debug_msg(itoa(part_number, itoa_buffer, 10), CRLF_SEND);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	220a      	movs	r2, #10
 80018b6:	490b      	ldr	r1, [pc, #44]	; (80018e4 <Si468x_get_part_info+0xd4>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00b fd57 	bl	800d36c <itoa>
 80018be:	4603      	mov	r3, r0
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 f850 	bl	8003968 <send_debug_msg>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	0800d854 	.word	0x0800d854
 80018d4:	200001a8 	.word	0x200001a8
 80018d8:	20003510 	.word	0x20003510
 80018dc:	200011a8 	.word	0x200011a8
 80018e0:	0800d890 	.word	0x0800d890
 80018e4:	200034d0 	.word	0x200034d0
 80018e8:	0800d8a0 	.word	0x0800d8a0
 80018ec:	0800d8ac 	.word	0x0800d8ac

080018f0 <Si468x_set_property>:

void Si468x_set_property(uint16_t property_id, uint16_t property_value)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	80fb      	strh	r3, [r7, #6]
 80018fc:	4613      	mov	r3, r2
 80018fe:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-----------------Setting Si468x property value-----------------", CRLF_SEND);
 8001900:	2101      	movs	r1, #1
 8001902:	4832      	ldr	r0, [pc, #200]	; (80019cc <Si468x_set_property+0xdc>)
 8001904:	f002 f830 	bl	8003968 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001908:	2100      	movs	r1, #0
 800190a:	4831      	ldr	r0, [pc, #196]	; (80019d0 <Si468x_set_property+0xe0>)
 800190c:	f002 f82c 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	2210      	movs	r2, #16
 8001914:	492f      	ldr	r1, [pc, #188]	; (80019d4 <Si468x_set_property+0xe4>)
 8001916:	4618      	mov	r0, r3
 8001918:	f00b fd28 	bl	800d36c <itoa>
 800191c:	4603      	mov	r3, r0
 800191e:	2101      	movs	r1, #1
 8001920:	4618      	mov	r0, r3
 8001922:	f002 f821 	bl	8003968 <send_debug_msg>
	send_debug_msg("Property Value to write: ", CRLF_NO_SEND);
 8001926:	2100      	movs	r1, #0
 8001928:	482b      	ldr	r0, [pc, #172]	; (80019d8 <Si468x_set_property+0xe8>)
 800192a:	f002 f81d 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(property_value, itoa_buffer, 16), CRLF_SEND);
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	2210      	movs	r2, #16
 8001932:	4928      	ldr	r1, [pc, #160]	; (80019d4 <Si468x_set_property+0xe4>)
 8001934:	4618      	mov	r0, r3
 8001936:	f00b fd19 	bl	800d36c <itoa>
 800193a:	4603      	mov	r3, r0
 800193c:	2101      	movs	r1, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f002 f812 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_SET_PROPERTY;
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <Si468x_set_property+0xec>)
 8001946:	2213      	movs	r2, #19
 8001948:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <Si468x_set_property+0xec>)
 800194c:	2200      	movs	r2, #0
 800194e:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <Si468x_set_property+0xec>)
 8001956:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <Si468x_set_property+0xec>)
 8001962:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = property_value & 0xFF;
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <Si468x_set_property+0xec>)
 800196a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = property_value >> 8;
 800196c:	88bb      	ldrh	r3, [r7, #4]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	b29b      	uxth	r3, r3
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <Si468x_set_property+0xec>)
 8001976:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001978:	4918      	ldr	r1, [pc, #96]	; (80019dc <Si468x_set_property+0xec>)
 800197a:	2006      	movs	r0, #6
 800197c:	f7ff fe88 	bl	8001690 <Si468x_write_command>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <Si468x_set_property+0xf0>)
 8001986:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f005 fcf9 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 800198e:	4915      	ldr	r1, [pc, #84]	; (80019e4 <Si468x_set_property+0xf4>)
 8001990:	2005      	movs	r0, #5
 8001992:	f7ff fe9f 	bl	80016d4 <Si468x_read_reply>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <Si468x_set_property+0xf0>)
 800199c:	701a      	strb	r2, [r3, #0]
	uint16_t value_temp = Si468x_get_property(property_id);
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f825 	bl	80019f0 <Si468x_get_property>
 80019a6:	4603      	mov	r3, r0
 80019a8:	81fb      	strh	r3, [r7, #14]
	if(value_temp == property_value)
 80019aa:	89fa      	ldrh	r2, [r7, #14]
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d104      	bne.n	80019bc <Si468x_set_property+0xcc>
	{
		send_debug_msg("Property Set Successfully!", CRLF_SEND);
 80019b2:	2101      	movs	r1, #1
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <Si468x_set_property+0xf8>)
 80019b6:	f001 ffd7 	bl	8003968 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Property Setting Error!", CRLF_SEND);
	}
}
 80019ba:	e003      	b.n	80019c4 <Si468x_set_property+0xd4>
		send_debug_msg("Property Setting Error!", CRLF_SEND);
 80019bc:	2101      	movs	r1, #1
 80019be:	480b      	ldr	r0, [pc, #44]	; (80019ec <Si468x_set_property+0xfc>)
 80019c0:	f001 ffd2 	bl	8003968 <send_debug_msg>
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	0800d8bc 	.word	0x0800d8bc
 80019d0:	0800d8fc 	.word	0x0800d8fc
 80019d4:	200034d0 	.word	0x200034d0
 80019d8:	0800d90c 	.word	0x0800d90c
 80019dc:	200001a8 	.word	0x200001a8
 80019e0:	20003510 	.word	0x20003510
 80019e4:	200011a8 	.word	0x200011a8
 80019e8:	0800d928 	.word	0x0800d928
 80019ec:	0800d944 	.word	0x0800d944

080019f0 <Si468x_get_property>:

uint16_t Si468x_get_property(uint16_t property_id)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
	send_debug_msg("--------------Getting Si468x property value--------------", CRLF_SEND);
 80019fa:	2101      	movs	r1, #1
 80019fc:	482b      	ldr	r0, [pc, #172]	; (8001aac <Si468x_get_property+0xbc>)
 80019fe:	f001 ffb3 	bl	8003968 <send_debug_msg>
	send_debug_msg("Property ID: ", CRLF_NO_SEND);
 8001a02:	2100      	movs	r1, #0
 8001a04:	482a      	ldr	r0, [pc, #168]	; (8001ab0 <Si468x_get_property+0xc0>)
 8001a06:	f001 ffaf 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(property_id, itoa_buffer, 16), CRLF_SEND);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <Si468x_get_property+0xc4>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00b fcab 	bl	800d36c <itoa>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 ffa4 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_GET_PROPERTY;
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a22:	2214      	movs	r2, #20
 8001a24:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x01;
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = property_id & 0xFF;
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a32:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = property_id >> 8;
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a3e:	70da      	strb	r2, [r3, #3]

	status = Si468x_write_command(4, dab_spi_tx_buffer);
 8001a40:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <Si468x_get_property+0xc8>)
 8001a42:	2004      	movs	r0, #4
 8001a44:	f7ff fe24 	bl	8001690 <Si468x_write_command>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <Si468x_get_property+0xcc>)
 8001a4e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f005 fc95 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(6, dab_spi_rx_buffer);
 8001a56:	491a      	ldr	r1, [pc, #104]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a58:	2006      	movs	r0, #6
 8001a5a:	f7ff fe3b 	bl	80016d4 <Si468x_read_reply>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <Si468x_get_property+0xcc>)
 8001a64:	701a      	strb	r2, [r3, #0]

	send_debug_msg("Property value: ", CRLF_NO_SEND);
 8001a66:	2100      	movs	r1, #0
 8001a68:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <Si468x_get_property+0xd4>)
 8001a6a:	f001 ff7d 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa((dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4], itoa_buffer, 16), CRLF_SEND);
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a70:	795b      	ldrb	r3, [r3, #5]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a76:	7912      	ldrb	r2, [r2, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <Si468x_get_property+0xc4>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f00b fc74 	bl	800d36c <itoa>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2101      	movs	r1, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 ff6d 	bl	8003968 <send_debug_msg>

	return (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <Si468x_get_property+0xd0>)
 8001a9a:	791b      	ldrb	r3, [r3, #4]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	0800d95c 	.word	0x0800d95c
 8001ab0:	0800d8fc 	.word	0x0800d8fc
 8001ab4:	200034d0 	.word	0x200034d0
 8001ab8:	200001a8 	.word	0x200001a8
 8001abc:	20003510 	.word	0x20003510
 8001ac0:	200011a8 	.word	0x200011a8
 8001ac4:	0800d998 	.word	0x0800d998

08001ac8 <Si468x_dab_tune_freq>:
		}
	}
}

void Si468x_dab_tune_freq(uint8_t channel, uint16_t antcap)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80bb      	strh	r3, [r7, #4]
	send_debug_msg("-------------DAB Tune to selected frequency--------------", CRLF_SEND);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4849      	ldr	r0, [pc, #292]	; (8001c00 <Si468x_dab_tune_freq+0x138>)
 8001adc:	f001 ff44 	bl	8003968 <send_debug_msg>
	send_debug_msg("Frequency: ", CRLF_NO_SEND);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4848      	ldr	r0, [pc, #288]	; (8001c04 <Si468x_dab_tune_freq+0x13c>)
 8001ae4:	f001 ff40 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(freq_table[channel], itoa_buffer, 10), CRLF_NO_SEND);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <Si468x_dab_tune_freq+0x140>)
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	220a      	movs	r2, #10
 8001af2:	4946      	ldr	r1, [pc, #280]	; (8001c0c <Si468x_dab_tune_freq+0x144>)
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00b fc39 	bl	800d36c <itoa>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 ff32 	bl	8003968 <send_debug_msg>
	send_debug_msg(" kHz", CRLF_SEND);
 8001b04:	2101      	movs	r1, #1
 8001b06:	4842      	ldr	r0, [pc, #264]	; (8001c10 <Si468x_dab_tune_freq+0x148>)
 8001b08:	f001 ff2e 	bl	8003968 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_TUNE_FREQ; 	//dab tune freq command code
 8001b0c:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b0e:	22b0      	movs	r2, #176	; 0xb0
 8001b10:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;						//padding - as in documentation
 8001b12:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = channel;						//channel ID from table
 8001b18:	4a3e      	ldr	r2, [pc, #248]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	7093      	strb	r3, [r2, #2]
	dab_spi_tx_buffer[3] = 0x00;						//padding - as in documentation
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	70da      	strb	r2, [r3, #3]
	dab_spi_tx_buffer[4] = antcap & 0xFF;				//antcap [7:0]
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b2a:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5] = antcap >> 8;					//antcap [15:8]
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b36:	715a      	strb	r2, [r3, #5]

	status = Si468x_write_command(6, dab_spi_tx_buffer);
 8001b38:	4936      	ldr	r1, [pc, #216]	; (8001c14 <Si468x_dab_tune_freq+0x14c>)
 8001b3a:	2006      	movs	r0, #6
 8001b3c:	f7ff fda8 	bl	8001690 <Si468x_write_command>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <Si468x_dab_tune_freq+0x150>)
 8001b46:	701a      	strb	r2, [r3, #0]
	status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b48:	4934      	ldr	r1, [pc, #208]	; (8001c1c <Si468x_dab_tune_freq+0x154>)
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff fdc2 	bl	80016d4 <Si468x_read_reply>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <Si468x_dab_tune_freq+0x150>)
 8001b56:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <Si468x_dab_tune_freq+0x158>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <Si468x_dab_tune_freq+0xa6>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001b66:	2101      	movs	r1, #1
 8001b68:	482e      	ldr	r0, [pc, #184]	; (8001c24 <Si468x_dab_tune_freq+0x15c>)
 8001b6a:	f001 fefd 	bl	8003968 <send_debug_msg>
	}

	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	81fb      	strh	r3, [r7, #14]
 8001b72:	e03a      	b.n	8001bea <Si468x_dab_tune_freq+0x122>
	{
		status = Si468x_read_reply(1, dab_spi_rx_buffer);
 8001b74:	4929      	ldr	r1, [pc, #164]	; (8001c1c <Si468x_dab_tune_freq+0x154>)
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fdac 	bl	80016d4 <Si468x_read_reply>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <Si468x_dab_tune_freq+0x150>)
 8001b82:	701a      	strb	r2, [r3, #0]

		if(rd_reply.stc_int)
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <Si468x_dab_tune_freq+0x158>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01c      	beq.n	8001bcc <Si468x_dab_tune_freq+0x104>
		{
			send_debug_msg("Tuned successfully. Time: ", CRLF_NO_SEND);
 8001b92:	2100      	movs	r1, #0
 8001b94:	4824      	ldr	r0, [pc, #144]	; (8001c28 <Si468x_dab_tune_freq+0x160>)
 8001b96:	f001 fee7 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(i ,itoa_buffer, 10), CRLF_NO_SEND);
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	491b      	ldr	r1, [pc, #108]	; (8001c0c <Si468x_dab_tune_freq+0x144>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00b fbe3 	bl	800d36c <itoa>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fedc 	bl	8003968 <send_debug_msg>
			send_debug_msg(" ms.", CRLF_SEND);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	481e      	ldr	r0, [pc, #120]	; (8001c2c <Si468x_dab_tune_freq+0x164>)
 8001bb4:	f001 fed8 	bl	8003968 <send_debug_msg>
			dab_management.actual_freq_id = channel;
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <Si468x_dab_tune_freq+0x168>)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	7313      	strb	r3, [r2, #12]
			dab_management.actual_freq = freq_table[channel];
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <Si468x_dab_tune_freq+0x140>)
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	4a1a      	ldr	r2, [pc, #104]	; (8001c30 <Si468x_dab_tune_freq+0x168>)
 8001bc8:	6093      	str	r3, [r2, #8]
			break;
 8001bca:	e014      	b.n	8001bf6 <Si468x_dab_tune_freq+0x12e>
		}
		if(i == TUNE_TIMEOUT_MS - 1)
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d103      	bne.n	8001bde <Si468x_dab_tune_freq+0x116>
		{
			send_debug_msg("Tune Timeout exceeded!", CRLF_SEND);
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4816      	ldr	r0, [pc, #88]	; (8001c34 <Si468x_dab_tune_freq+0x16c>)
 8001bda:	f001 fec5 	bl	8003968 <send_debug_msg>
		}
		HAL_Delay(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f005 fbce 	bl	8007380 <HAL_Delay>
	for(uint16_t i = 0; i < TUNE_TIMEOUT_MS; i++)
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	3301      	adds	r3, #1
 8001be8:	81fb      	strh	r3, [r7, #14]
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d9bf      	bls.n	8001b74 <Si468x_dab_tune_freq+0xac>
	}
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	0800da50 	.word	0x0800da50
 8001c04:	0800da8c 	.word	0x0800da8c
 8001c08:	20003514 	.word	0x20003514
 8001c0c:	200034d0 	.word	0x200034d0
 8001c10:	0800da0c 	.word	0x0800da0c
 8001c14:	200001a8 	.word	0x200001a8
 8001c18:	20003510 	.word	0x20003510
 8001c1c:	200011a8 	.word	0x200011a8
 8001c20:	200035fc 	.word	0x200035fc
 8001c24:	0800d650 	.word	0x0800d650
 8001c28:	0800da98 	.word	0x0800da98
 8001c2c:	0800dab4 	.word	0x0800dab4
 8001c30:	20004bc4 	.word	0x20004bc4
 8001c34:	0800dabc 	.word	0x0800dabc

08001c38 <Si468x_dab_digrad_status>:
		send_debug_msg("Clear OK.", CRLF_SEND);
	}
}

dab_digrad_status_t Si468x_dab_digrad_status()
{
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
//	send_debug_msg("----------------Getting DAB Digrad Status----------------", CRLF_SEND);

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_DIGRAD_STATUS; 	//DAB DIGRAD Status Command Code
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <Si468x_dab_digrad_status+0x9c>)
 8001c42:	22b2      	movs	r2, #178	; 0xb2
 8001c44:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x1A;							//Enable reset FIC PSEUDO BER and FIB Errors
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <Si468x_dab_digrad_status+0x9c>)
 8001c48:	221a      	movs	r2, #26
 8001c4a:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001c4c:	4921      	ldr	r1, [pc, #132]	; (8001cd4 <Si468x_dab_digrad_status+0x9c>)
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f7ff fd1e 	bl	8001690 <Si468x_write_command>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <Si468x_dab_digrad_status+0xa0>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f005 fb8f 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(40, dab_spi_rx_buffer);
 8001c62:	491e      	ldr	r1, [pc, #120]	; (8001cdc <Si468x_dab_digrad_status+0xa4>)
 8001c64:	2028      	movs	r0, #40	; 0x28
 8001c66:	f7ff fd35 	bl	80016d4 <Si468x_read_reply>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <Si468x_dab_digrad_status+0xa0>)
 8001c70:	701a      	strb	r2, [r3, #0]
	if(rd_reply.stc_int)
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <Si468x_dab_digrad_status+0xa8>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d019      	beq.n	8001cb4 <Si468x_dab_digrad_status+0x7c>
	{
		memcpy((uint8_t*)&dab_digrad_status, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_digrad_status));	//
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <Si468x_dab_digrad_status+0xa4>)
 8001c84:	4615      	mov	r5, r2
 8001c86:	1d1c      	adds	r4, r3, #4
 8001c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c94:	e885 0003 	stmia.w	r5, {r0, r1}
		if(dab_digrad_status.snr > 20)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001c9a:	78db      	ldrb	r3, [r3, #3]
 8001c9c:	2b14      	cmp	r3, #20
 8001c9e:	d902      	bls.n	8001ca6 <Si468x_dab_digrad_status+0x6e>
		{
			dab_digrad_status.snr = 0; //snr powyzej 20 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	70da      	strb	r2, [r3, #3]
		}
		if(dab_digrad_status.cnr > 54)
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001ca8:	795b      	ldrb	r3, [r3, #5]
 8001caa:	2b36      	cmp	r3, #54	; 0x36
 8001cac:	d902      	bls.n	8001cb4 <Si468x_dab_digrad_status+0x7c>
		{
			dab_digrad_status.cnr = 0; //cnr powyzej 54 nie wystapi, a skrajnie duza wartosc podczas skanowania jest przeklamana
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	715a      	strb	r2, [r3, #5]
		}

	}
	return dab_digrad_status;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <Si468x_dab_digrad_status+0xac>)
 8001cb8:	461c      	mov	r4, r3
 8001cba:	4615      	mov	r5, r2
 8001cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd4:	200001a8 	.word	0x200001a8
 8001cd8:	20003510 	.word	0x20003510
 8001cdc:	200011a8 	.word	0x200011a8
 8001ce0:	200035fc 	.word	0x200035fc
 8001ce4:	200035d4 	.word	0x200035d4

08001ce8 <Si468x_dab_get_digital_service_list>:

void Si468x_dab_get_digital_service_list()
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
	//List management variables
	uint16_t list_size = 0;				//size of ensemble information list
 8001cee:	2300      	movs	r3, #0
 8001cf0:	82fb      	strh	r3, [r7, #22]
	uint8_t number_of_services = 0;		//quantity of services found in ensemble
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	77fb      	strb	r3, [r7, #31]
	uint8_t services_count = 0;			//quantity of services in list up to this point, it is necessary to correct data parsing
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	77bb      	strb	r3, [r7, #30]
	uint8_t components_count = 0;		//quantity of components in list up to this point, it is necessary to correct data parsing
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	777b      	strb	r3, [r7, #29]

	#define LIST_READ_OFFSET 4 			//Offset to make parsing easier, it comes from some padding data before list

	dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_LIST; 	//Command Code Start Digital Service
 8001cfe:	4ba2      	ldr	r3, [pc, #648]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;									//for DAB always 0 - as in documentation
 8001d04:	4ba0      	ldr	r3, [pc, #640]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8001d0a:	499f      	ldr	r1, [pc, #636]	; (8001f88 <Si468x_dab_get_digital_service_list+0x2a0>)
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f7ff fcbf 	bl	8001690 <Si468x_write_command>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b9d      	ldr	r3, [pc, #628]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d18:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f005 fb30 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(500, dab_spi_rx_buffer);
 8001d20:	499b      	ldr	r1, [pc, #620]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d26:	f7ff fcd5 	bl	80016d4 <Si468x_read_reply>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b97      	ldr	r3, [pc, #604]	; (8001f8c <Si468x_dab_get_digital_service_list+0x2a4>)
 8001d30:	701a      	strb	r2, [r3, #0]

	send_debug_msg("--------------DAB Get Digital Service List---------------", CRLF_SEND);
 8001d32:	2101      	movs	r1, #1
 8001d34:	4897      	ldr	r0, [pc, #604]	; (8001f94 <Si468x_dab_get_digital_service_list+0x2ac>)
 8001d36:	f001 fe17 	bl	8003968 <send_debug_msg>

	if(rd_reply.err_cmd)
 8001d3a:	4b97      	ldr	r3, [pc, #604]	; (8001f98 <Si468x_dab_get_digital_service_list+0x2b0>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <Si468x_dab_get_digital_service_list+0x68>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4894      	ldr	r0, [pc, #592]	; (8001f9c <Si468x_dab_get_digital_service_list+0x2b4>)
 8001d4c:	f001 fe0c 	bl	8003968 <send_debug_msg>
	}

	list_size = dab_spi_rx_buffer[0 + LIST_READ_OFFSET] + (dab_spi_rx_buffer[1 + LIST_READ_OFFSET] << 8);
 8001d50:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d52:	791b      	ldrb	r3, [r3, #4]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d58:	795b      	ldrb	r3, [r3, #5]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	82fb      	strh	r3, [r7, #22]
	number_of_services = dab_spi_rx_buffer[4 + LIST_READ_OFFSET];
 8001d64:	4b8a      	ldr	r3, [pc, #552]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001d66:	7a1b      	ldrb	r3, [r3, #8]
 8001d68:	77fb      	strb	r3, [r7, #31]

	//-----read services info---------------------------------------------------------------------------------------------------------------
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	773b      	strb	r3, [r7, #28]
 8001d6e:	e250      	b.n	8002212 <Si468x_dab_get_digital_service_list+0x52a>
	{
		services_list[service_index + dab_management.actual_services].freq = dab_management.actual_freq;
 8001d70:	7f3b      	ldrb	r3, [r7, #28]
 8001d72:	4a8b      	ldr	r2, [pc, #556]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d74:	7892      	ldrb	r2, [r2, #2]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a89      	ldr	r2, [pc, #548]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d7a:	6892      	ldr	r2, [r2, #8]
 8001d7c:	4989      	ldr	r1, [pc, #548]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d7e:	2034      	movs	r0, #52	; 0x34
 8001d80:	fb00 f303 	mul.w	r3, r0, r3
 8001d84:	440b      	add	r3, r1
 8001d86:	3324      	adds	r3, #36	; 0x24
 8001d88:	601a      	str	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].freq_id = dab_management.actual_freq_id;
 8001d8a:	7f3b      	ldrb	r3, [r7, #28]
 8001d8c:	4a84      	ldr	r2, [pc, #528]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d8e:	7892      	ldrb	r2, [r2, #2]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a83      	ldr	r2, [pc, #524]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001d94:	7b10      	ldrb	r0, [r2, #12]
 8001d96:	4a83      	ldr	r2, [pc, #524]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001d98:	2134      	movs	r1, #52	; 0x34
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3328      	adds	r3, #40	; 0x28
 8001da2:	4602      	mov	r2, r0
 8001da4:	701a      	strb	r2, [r3, #0]

		services_list[service_index + dab_management.actual_services].pd_flag = dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x01;
 8001da6:	7fba      	ldrb	r2, [r7, #30]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	f103 0210 	add.w	r2, r3, #16
 8001db4:	7f7b      	ldrb	r3, [r7, #29]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001dbc:	5cd2      	ldrb	r2, [r2, r3]
 8001dbe:	7f3b      	ldrb	r3, [r7, #28]
 8001dc0:	4977      	ldr	r1, [pc, #476]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001dc2:	7889      	ldrb	r1, [r1, #2]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f002 0201 	and.w	r2, r2, #1
 8001dca:	b2d0      	uxtb	r0, r2
 8001dcc:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001dce:	2134      	movs	r1, #52	; 0x34
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	4602      	mov	r2, r0
 8001dda:	701a      	strb	r2, [r3, #0]
		services_list[service_index + dab_management.actual_services].number_of_components = dab_spi_rx_buffer[13 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F;
 8001ddc:	7fba      	ldrb	r2, [r7, #30]
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	f103 0211 	add.w	r2, r3, #17
 8001dea:	7f7b      	ldrb	r3, [r7, #29]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	4a67      	ldr	r2, [pc, #412]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001df2:	5cd2      	ldrb	r2, [r2, r3]
 8001df4:	7f3b      	ldrb	r3, [r7, #28]
 8001df6:	496a      	ldr	r1, [pc, #424]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001df8:	7889      	ldrb	r1, [r1, #2]
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f002 020f 	and.w	r2, r2, #15
 8001e00:	b2d0      	uxtb	r0, r2
 8001e02:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e04:	2134      	movs	r1, #52	; 0x34
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3329      	adds	r3, #41	; 0x29
 8001e0e:	4602      	mov	r2, r0
 8001e10:	701a      	strb	r2, [r3, #0]

		//ignore service with PD Flag = 1 - it's data service, not audio service
		if(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e12:	7f3b      	ldrb	r3, [r7, #28]
 8001e14:	4a62      	ldr	r2, [pc, #392]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e16:	7892      	ldrb	r2, [r2, #2]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a62      	ldr	r2, [pc, #392]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e1c:	2134      	movs	r1, #52	; 0x34
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3314      	adds	r3, #20
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d017      	beq.n	8001e5c <Si468x_dab_get_digital_service_list+0x174>
		{
			services_count++;
 8001e2c:	7fbb      	ldrb	r3, [r7, #30]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	77bb      	strb	r3, [r7, #30]
			components_count += services_list[service_index + dab_management.actual_services].number_of_components;
 8001e32:	7f3b      	ldrb	r3, [r7, #28]
 8001e34:	4a5a      	ldr	r2, [pc, #360]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e36:	7892      	ldrb	r2, [r2, #2]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e3c:	2134      	movs	r1, #52	; 0x34
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3329      	adds	r3, #41	; 0x29
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	7f7b      	ldrb	r3, [r7, #29]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	777b      	strb	r3, [r7, #29]
			service_index--;
 8001e4e:	7f3b      	ldrb	r3, [r7, #28]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	773b      	strb	r3, [r7, #28]
			number_of_services--;
 8001e54:	7ffb      	ldrb	r3, [r7, #31]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	77fb      	strb	r3, [r7, #31]
			continue;
 8001e5a:	e1d7      	b.n	800220c <Si468x_dab_get_digital_service_list+0x524>
		}

		services_list[service_index + dab_management.actual_services].p_ty = (dab_spi_rx_buffer[12 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3E) >> 1;
 8001e5c:	7fba      	ldrb	r2, [r7, #30]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	f103 0210 	add.w	r2, r3, #16
 8001e6a:	7f7b      	ldrb	r3, [r7, #29]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	105b      	asrs	r3, r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	7f3b      	ldrb	r3, [r7, #28]
 8001e7a:	4949      	ldr	r1, [pc, #292]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e7c:	7889      	ldrb	r1, [r1, #2]
 8001e7e:	440b      	add	r3, r1
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	b2d0      	uxtb	r0, r2
 8001e86:	4a47      	ldr	r2, [pc, #284]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001e88:	2134      	movs	r1, #52	; 0x34
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3315      	adds	r3, #21
 8001e92:	4602      	mov	r2, r0
 8001e94:	701a      	strb	r2, [r3, #0]

		//it's not necessary to check pd flag because stations with pd_flag = 1 are ignored now, but it's for future purposes
		switch(services_list[service_index + dab_management.actual_services].pd_flag)
 8001e96:	7f3b      	ldrb	r3, [r7, #28]
 8001e98:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001e9a:	7892      	ldrb	r2, [r2, #2]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a41      	ldr	r2, [pc, #260]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001ea0:	2134      	movs	r1, #52	; 0x34
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <Si468x_dab_get_digital_service_list+0x1ce>
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d079      	beq.n	8001fa8 <Si468x_dab_get_digital_service_list+0x2c0>
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
				break;

			default:
				break;
 8001eb4:	e0ee      	b.n	8002094 <Si468x_dab_get_digital_service_list+0x3ac>
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + ((dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 8);
 8001eb6:	7fba      	ldrb	r2, [r7, #30]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	f103 020c 	add.w	r2, r3, #12
 8001ec4:	7f7b      	ldrb	r3, [r7, #29]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	7fba      	ldrb	r2, [r7, #30]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	f103 020d 	add.w	r2, r3, #13
 8001ede:	7f7b      	ldrb	r3, [r7, #29]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001eee:	4419      	add	r1, r3
 8001ef0:	7f3b      	ldrb	r3, [r7, #28]
 8001ef2:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001ef4:	7892      	ldrb	r2, [r2, #2]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001efc:	2134      	movs	r1, #52	; 0x34
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	3318      	adds	r3, #24
 8001f06:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8001f08:	7fba      	ldrb	r2, [r7, #30]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	f103 020d 	add.w	r2, r3, #13
 8001f16:	7f7b      	ldrb	r3, [r7, #29]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <Si468x_dab_get_digital_service_list+0x2a8>)
 8001f1e:	5cd2      	ldrb	r2, [r2, r3]
 8001f20:	7f3b      	ldrb	r3, [r7, #28]
 8001f22:	491f      	ldr	r1, [pc, #124]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f24:	7889      	ldrb	r1, [r1, #2]
 8001f26:	440b      	add	r3, r1
 8001f28:	0912      	lsrs	r2, r2, #4
 8001f2a:	b2d0      	uxtb	r0, r2
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f2e:	2134      	movs	r1, #52	; 0x34
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	331c      	adds	r3, #28
 8001f38:	4602      	mov	r2, r0
 8001f3a:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 12) + services_list[service_index + dab_management.actual_services].srv_ref;
 8001f3c:	7f3b      	ldrb	r3, [r7, #28]
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f40:	7892      	ldrb	r2, [r2, #2]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f46:	2134      	movs	r1, #52	; 0x34
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	331c      	adds	r3, #28
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	031b      	lsls	r3, r3, #12
 8001f54:	4618      	mov	r0, r3
 8001f56:	7f3b      	ldrb	r3, [r7, #28]
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f5a:	7892      	ldrb	r2, [r2, #2]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a11      	ldr	r2, [pc, #68]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f60:	2134      	movs	r1, #52	; 0x34
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	3318      	adds	r3, #24
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	7f3b      	ldrb	r3, [r7, #28]
 8001f6e:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <Si468x_dab_get_digital_service_list+0x2b8>)
 8001f70:	7889      	ldrb	r1, [r1, #2]
 8001f72:	440b      	add	r3, r1
 8001f74:	4402      	add	r2, r0
 8001f76:	490b      	ldr	r1, [pc, #44]	; (8001fa4 <Si468x_dab_get_digital_service_list+0x2bc>)
 8001f78:	2034      	movs	r0, #52	; 0x34
 8001f7a:	fb00 f303 	mul.w	r3, r0, r3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3320      	adds	r3, #32
 8001f82:	601a      	str	r2, [r3, #0]
				break;
 8001f84:	e086      	b.n	8002094 <Si468x_dab_get_digital_service_list+0x3ac>
 8001f86:	bf00      	nop
 8001f88:	200001a8 	.word	0x200001a8
 8001f8c:	20003510 	.word	0x20003510
 8001f90:	200011a8 	.word	0x200011a8
 8001f94:	0800db1c 	.word	0x0800db1c
 8001f98:	200035fc 	.word	0x200035fc
 8001f9c:	0800d650 	.word	0x0800d650
 8001fa0:	20004bc4 	.word	0x20004bc4
 8001fa4:	20003774 	.word	0x20003774
				services_list[service_index + dab_management.actual_services].srv_ref = dab_spi_rx_buffer[8 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] + (dab_spi_rx_buffer[9 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] << 8) + ((dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x0F) << 16);
 8001fa8:	7fba      	ldrb	r2, [r7, #30]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	f103 020c 	add.w	r2, r3, #12
 8001fb6:	7f7b      	ldrb	r3, [r7, #29]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	4aa0      	ldr	r2, [pc, #640]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	7fba      	ldrb	r2, [r7, #30]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	f103 020d 	add.w	r2, r3, #13
 8001fd0:	7f7b      	ldrb	r3, [r7, #29]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a9a      	ldr	r2, [pc, #616]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	4419      	add	r1, r3
 8001fde:	7fba      	ldrb	r2, [r7, #30]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f103 020e 	add.w	r2, r3, #14
 8001fec:	7f7b      	ldrb	r3, [r7, #29]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a93      	ldr	r2, [pc, #588]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ffc:	4419      	add	r1, r3
 8001ffe:	7f3b      	ldrb	r3, [r7, #28]
 8002000:	4a90      	ldr	r2, [pc, #576]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002002:	7892      	ldrb	r2, [r2, #2]
 8002004:	4413      	add	r3, r2
 8002006:	4608      	mov	r0, r1
 8002008:	4a8f      	ldr	r2, [pc, #572]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 800200a:	2134      	movs	r1, #52	; 0x34
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3318      	adds	r3, #24
 8002014:	6018      	str	r0, [r3, #0]
				services_list[service_index + dab_management.actual_services].country_id = (dab_spi_rx_buffer[10 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0xF0) >> 4;
 8002016:	7fba      	ldrb	r2, [r7, #30]
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	f103 020e 	add.w	r2, r3, #14
 8002024:	7f7b      	ldrb	r3, [r7, #29]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	4a85      	ldr	r2, [pc, #532]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 800202c:	5cd2      	ldrb	r2, [r2, r3]
 800202e:	7f3b      	ldrb	r3, [r7, #28]
 8002030:	4984      	ldr	r1, [pc, #528]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002032:	7889      	ldrb	r1, [r1, #2]
 8002034:	440b      	add	r3, r1
 8002036:	0912      	lsrs	r2, r2, #4
 8002038:	b2d0      	uxtb	r0, r2
 800203a:	4a83      	ldr	r2, [pc, #524]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 800203c:	2134      	movs	r1, #52	; 0x34
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	331c      	adds	r3, #28
 8002046:	4602      	mov	r2, r0
 8002048:	701a      	strb	r2, [r3, #0]
				services_list[service_index + dab_management.actual_services].service_id = (services_list[service_index + dab_management.actual_services].country_id << 20) + services_list[service_index + dab_management.actual_services].srv_ref;
 800204a:	7f3b      	ldrb	r3, [r7, #28]
 800204c:	4a7d      	ldr	r2, [pc, #500]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800204e:	7892      	ldrb	r2, [r2, #2]
 8002050:	4413      	add	r3, r2
 8002052:	4a7d      	ldr	r2, [pc, #500]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002054:	2134      	movs	r1, #52	; 0x34
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	331c      	adds	r3, #28
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	051b      	lsls	r3, r3, #20
 8002062:	4618      	mov	r0, r3
 8002064:	7f3b      	ldrb	r3, [r7, #28]
 8002066:	4a77      	ldr	r2, [pc, #476]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002068:	7892      	ldrb	r2, [r2, #2]
 800206a:	4413      	add	r3, r2
 800206c:	4a76      	ldr	r2, [pc, #472]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 800206e:	2134      	movs	r1, #52	; 0x34
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3318      	adds	r3, #24
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	7f3b      	ldrb	r3, [r7, #28]
 800207c:	4971      	ldr	r1, [pc, #452]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800207e:	7889      	ldrb	r1, [r1, #2]
 8002080:	440b      	add	r3, r1
 8002082:	4402      	add	r2, r0
 8002084:	4970      	ldr	r1, [pc, #448]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002086:	2034      	movs	r0, #52	; 0x34
 8002088:	fb00 f303 	mul.w	r3, r0, r3
 800208c:	440b      	add	r3, r1
 800208e:	3320      	adds	r3, #32
 8002090:	601a      	str	r2, [r3, #0]
				break;
 8002092:	bf00      	nop
		}


		if(dab_spi_rx_buffer[16 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count]) //check if name is valid by checking first char of name, it shouldn't be 0
 8002094:	7fba      	ldrb	r2, [r7, #30]
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	f103 0214 	add.w	r2, r3, #20
 80020a2:	7f7b      	ldrb	r3, [r7, #29]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03f      	beq.n	8002130 <Si468x_dab_get_digital_service_list+0x448>
		{
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	76fb      	strb	r3, [r7, #27]
 80020b4:	e038      	b.n	8002128 <Si468x_dab_get_digital_service_list+0x440>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = dab_spi_rx_buffer[16 + name_index + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count];
 80020b6:	7efb      	ldrb	r3, [r7, #27]
 80020b8:	f103 0114 	add.w	r1, r3, #20
 80020bc:	7fba      	ldrb	r2, [r7, #30]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	18ca      	adds	r2, r1, r3
 80020c8:	7f7b      	ldrb	r3, [r7, #29]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	18d1      	adds	r1, r2, r3
 80020ce:	7f3b      	ldrb	r3, [r7, #28]
 80020d0:	4a5c      	ldr	r2, [pc, #368]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 80020d2:	7892      	ldrb	r2, [r2, #2]
 80020d4:	441a      	add	r2, r3
 80020d6:	7efb      	ldrb	r3, [r7, #27]
 80020d8:	4859      	ldr	r0, [pc, #356]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 80020da:	5c44      	ldrb	r4, [r0, r1]
 80020dc:	495a      	ldr	r1, [pc, #360]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 80020de:	2034      	movs	r0, #52	; 0x34
 80020e0:	fb00 f202 	mul.w	r2, r0, r2
 80020e4:	440a      	add	r2, r1
 80020e6:	4413      	add	r3, r2
 80020e8:	4622      	mov	r2, r4
 80020ea:	701a      	strb	r2, [r3, #0]
				if(services_list[service_index + dab_management.actual_services].name[name_index] == 0x86)	//Correct "ó" coding: 0x86 -> 0xF3, ó as o: 0x86 -> 0x6F
 80020ec:	7f3b      	ldrb	r3, [r7, #28]
 80020ee:	4a55      	ldr	r2, [pc, #340]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 80020f0:	7892      	ldrb	r2, [r2, #2]
 80020f2:	441a      	add	r2, r3
 80020f4:	7efb      	ldrb	r3, [r7, #27]
 80020f6:	4954      	ldr	r1, [pc, #336]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 80020f8:	2034      	movs	r0, #52	; 0x34
 80020fa:	fb00 f202 	mul.w	r2, r0, r2
 80020fe:	440a      	add	r2, r1
 8002100:	4413      	add	r3, r2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b86      	cmp	r3, #134	; 0x86
 8002106:	d10c      	bne.n	8002122 <Si468x_dab_get_digital_service_list+0x43a>
				{
					services_list[service_index + dab_management.actual_services].name[name_index] = 0x6F;
 8002108:	7f3b      	ldrb	r3, [r7, #28]
 800210a:	4a4e      	ldr	r2, [pc, #312]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800210c:	7892      	ldrb	r2, [r2, #2]
 800210e:	441a      	add	r2, r3
 8002110:	7efb      	ldrb	r3, [r7, #27]
 8002112:	494d      	ldr	r1, [pc, #308]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002114:	2034      	movs	r0, #52	; 0x34
 8002116:	fb00 f202 	mul.w	r2, r0, r2
 800211a:	440a      	add	r2, r1
 800211c:	4413      	add	r3, r2
 800211e:	226f      	movs	r2, #111	; 0x6f
 8002120:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002122:	7efb      	ldrb	r3, [r7, #27]
 8002124:	3301      	adds	r3, #1
 8002126:	76fb      	strb	r3, [r7, #27]
 8002128:	7efb      	ldrb	r3, [r7, #27]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	d9c3      	bls.n	80020b6 <Si468x_dab_get_digital_service_list+0x3ce>
 800212e:	e026      	b.n	800217e <Si468x_dab_get_digital_service_list+0x496>
			}
		}

		else
		{
			char empty_name[20] = "Unknown Name    ";
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <Si468x_dab_get_digital_service_list+0x564>)
 8002132:	463c      	mov	r4, r7
 8002134:	461d      	mov	r5, r3
 8002136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	7023      	strb	r3, [r4, #0]
 800213e:	f107 0311 	add.w	r3, r7, #17
 8002142:	2200      	movs	r2, #0
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	709a      	strb	r2, [r3, #2]

			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002148:	2300      	movs	r3, #0
 800214a:	76bb      	strb	r3, [r7, #26]
 800214c:	e014      	b.n	8002178 <Si468x_dab_get_digital_service_list+0x490>
			{
				services_list[service_index + dab_management.actual_services].name[name_index] = empty_name[name_index];
 800214e:	7eb9      	ldrb	r1, [r7, #26]
 8002150:	7f3b      	ldrb	r3, [r7, #28]
 8002152:	4a3c      	ldr	r2, [pc, #240]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002154:	7892      	ldrb	r2, [r2, #2]
 8002156:	441a      	add	r2, r3
 8002158:	7ebb      	ldrb	r3, [r7, #26]
 800215a:	3120      	adds	r1, #32
 800215c:	4439      	add	r1, r7
 800215e:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8002162:	4939      	ldr	r1, [pc, #228]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002164:	2034      	movs	r0, #52	; 0x34
 8002166:	fb00 f202 	mul.w	r2, r0, r2
 800216a:	440a      	add	r2, r1
 800216c:	4413      	add	r3, r2
 800216e:	4622      	mov	r2, r4
 8002170:	701a      	strb	r2, [r3, #0]
			for(uint8_t name_index = 0; name_index <= 15; name_index++)
 8002172:	7ebb      	ldrb	r3, [r7, #26]
 8002174:	3301      	adds	r3, #1
 8002176:	76bb      	strb	r3, [r7, #26]
 8002178:	7ebb      	ldrb	r3, [r7, #26]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	d9e7      	bls.n	800214e <Si468x_dab_get_digital_service_list+0x466>
		}



		//----read component info---------------------------------------------------------------------------------------------
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 800217e:	2300      	movs	r3, #0
 8002180:	767b      	strb	r3, [r7, #25]
 8002182:	e032      	b.n	80021ea <Si468x_dab_get_digital_service_list+0x502>
		{
			services_list[service_index + dab_management.actual_services].components[component_index].tm_id = (dab_spi_rx_buffer[33 + LIST_READ_OFFSET  + 24 * services_count + 4 * components_count] & 0xC0) >> 14;
 8002184:	7f3b      	ldrb	r3, [r7, #28]
 8002186:	4a2f      	ldr	r2, [pc, #188]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002188:	7892      	ldrb	r2, [r2, #2]
 800218a:	441a      	add	r2, r3
 800218c:	7e7b      	ldrb	r3, [r7, #25]
 800218e:	492e      	ldr	r1, [pc, #184]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 8002190:	201a      	movs	r0, #26
 8002192:	fb00 f202 	mul.w	r2, r0, r2
 8002196:	4413      	add	r3, r2
 8002198:	3314      	adds	r3, #20
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	440b      	add	r3, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	70da      	strb	r2, [r3, #3]
			services_list[service_index + dab_management.actual_services].components[component_index].subchannel_id = dab_spi_rx_buffer[32 + LIST_READ_OFFSET + 24 * services_count + 4 * components_count] & 0x3F;
 80021a2:	7fba      	ldrb	r2, [r7, #30]
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80021b0:	7f7b      	ldrb	r3, [r7, #29]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <Si468x_dab_get_digital_service_list+0x558>)
 80021b8:	5cd1      	ldrb	r1, [r2, r3]
 80021ba:	7f3b      	ldrb	r3, [r7, #28]
 80021bc:	4a21      	ldr	r2, [pc, #132]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 80021be:	7892      	ldrb	r2, [r2, #2]
 80021c0:	441a      	add	r2, r3
 80021c2:	7e7b      	ldrb	r3, [r7, #25]
 80021c4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021c8:	b2cc      	uxtb	r4, r1
 80021ca:	491f      	ldr	r1, [pc, #124]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 80021cc:	201a      	movs	r0, #26
 80021ce:	fb00 f202 	mul.w	r2, r0, r2
 80021d2:	4413      	add	r3, r2
 80021d4:	3314      	adds	r3, #20
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	440b      	add	r3, r1
 80021da:	4622      	mov	r2, r4
 80021dc:	709a      	strb	r2, [r3, #2]
			components_count++;
 80021de:	7f7b      	ldrb	r3, [r7, #29]
 80021e0:	3301      	adds	r3, #1
 80021e2:	777b      	strb	r3, [r7, #29]
		for(uint8_t component_index = 0; component_index < services_list[service_index + dab_management.actual_services].number_of_components; component_index++)
 80021e4:	7e7b      	ldrb	r3, [r7, #25]
 80021e6:	3301      	adds	r3, #1
 80021e8:	767b      	strb	r3, [r7, #25]
 80021ea:	7f3b      	ldrb	r3, [r7, #28]
 80021ec:	4a15      	ldr	r2, [pc, #84]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 80021ee:	7892      	ldrb	r2, [r2, #2]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <Si468x_dab_get_digital_service_list+0x560>)
 80021f4:	2134      	movs	r1, #52	; 0x34
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3329      	adds	r3, #41	; 0x29
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	7e7a      	ldrb	r2, [r7, #25]
 8002202:	429a      	cmp	r2, r3
 8002204:	d3be      	bcc.n	8002184 <Si468x_dab_get_digital_service_list+0x49c>
		}
		services_count++;
 8002206:	7fbb      	ldrb	r3, [r7, #30]
 8002208:	3301      	adds	r3, #1
 800220a:	77bb      	strb	r3, [r7, #30]
	for(uint8_t service_index = 0; service_index < number_of_services; service_index++)
 800220c:	7f3b      	ldrb	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	773b      	strb	r3, [r7, #28]
 8002212:	7f3a      	ldrb	r2, [r7, #28]
 8002214:	7ffb      	ldrb	r3, [r7, #31]
 8002216:	429a      	cmp	r2, r3
 8002218:	f4ff adaa 	bcc.w	8001d70 <Si468x_dab_get_digital_service_list+0x88>
	}

	dab_management.total_services += number_of_services;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	4413      	add	r3, r2
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002228:	701a      	strb	r2, [r3, #0]
	dab_management.actual_services += number_of_services;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 800222c:	789a      	ldrb	r2, [r3, #2]
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	4413      	add	r3, r2
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <Si468x_dab_get_digital_service_list+0x55c>)
 8002236:	709a      	strb	r2, [r3, #2]
}
 8002238:	bf00      	nop
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bdb0      	pop	{r4, r5, r7, pc}
 8002240:	200011a8 	.word	0x200011a8
 8002244:	20004bc4 	.word	0x20004bc4
 8002248:	20003774 	.word	0x20003774
 800224c:	0800db58 	.word	0x0800db58

08002250 <Si468x_dab_start_digital_service>:

void Si468x_dab_start_digital_service(uint32_t service_id, uint32_t component_id)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
	send_debug_msg("----------------DAB Start Digital Service----------------", CRLF_SEND);
 800225a:	2101      	movs	r1, #1
 800225c:	482d      	ldr	r0, [pc, #180]	; (8002314 <Si468x_dab_start_digital_service+0xc4>)
 800225e:	f001 fb83 	bl	8003968 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_START_DIGITAL_SERVICE; 	//Command Code Start Digital Service
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002264:	2281      	movs	r2, #129	; 0x81
 8002266:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 800226a:	2200      	movs	r2, #0
 800226c:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;								//always 0 - as in documentation
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002270:	2200      	movs	r2, #0
 8002272:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;								//always 0 - as in documentation
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002276:	2200      	movs	r2, #0
 8002278:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002280:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 800228a:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 8002294:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0e1b      	lsrs	r3, r3, #24
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 800229e:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022a6:	721a      	strb	r2, [r3, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022b0:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022ba:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	0e1b      	lsrs	r3, r3, #24
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022c4:	72da      	strb	r2, [r3, #11]

	status = Si468x_write_command(12, dab_spi_tx_buffer);
 80022c6:	4914      	ldr	r1, [pc, #80]	; (8002318 <Si468x_dab_start_digital_service+0xc8>)
 80022c8:	200c      	movs	r0, #12
 80022ca:	f7ff f9e1 	bl	8001690 <Si468x_write_command>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <Si468x_dab_start_digital_service+0xcc>)
 80022d4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f005 f852 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 80022dc:	4910      	ldr	r1, [pc, #64]	; (8002320 <Si468x_dab_start_digital_service+0xd0>)
 80022de:	2005      	movs	r0, #5
 80022e0:	f7ff f9f8 	bl	80016d4 <Si468x_read_reply>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <Si468x_dab_start_digital_service+0xcc>)
 80022ea:	701a      	strb	r2, [r3, #0]
	if(rd_reply.err_cmd)
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <Si468x_dab_start_digital_service+0xd4>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <Si468x_dab_start_digital_service+0xb4>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80022fa:	2101      	movs	r1, #1
 80022fc:	480a      	ldr	r0, [pc, #40]	; (8002328 <Si468x_dab_start_digital_service+0xd8>)
 80022fe:	f001 fb33 	bl	8003968 <send_debug_msg>
	}
	else
	{
		send_debug_msg("Service started successfully!", CRLF_SEND);
	}
}
 8002302:	e003      	b.n	800230c <Si468x_dab_start_digital_service+0xbc>
		send_debug_msg("Service started successfully!", CRLF_SEND);
 8002304:	2101      	movs	r1, #1
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <Si468x_dab_start_digital_service+0xdc>)
 8002308:	f001 fb2e 	bl	8003968 <send_debug_msg>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	0800db6c 	.word	0x0800db6c
 8002318:	200001a8 	.word	0x200001a8
 800231c:	20003510 	.word	0x20003510
 8002320:	200011a8 	.word	0x200011a8
 8002324:	200035fc 	.word	0x200035fc
 8002328:	0800d650 	.word	0x0800d650
 800232c:	0800dba8 	.word	0x0800dba8

08002330 <Si468x_dab_get_ensemble_info>:

uint8_t Si468x_dab_get_ensemble_info()
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
	uint32_t ensemble_id_temp = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
	send_debug_msg("------------------DAB Get Ensemble Info------------------", CRLF_SEND);
 800233a:	2101      	movs	r1, #1
 800233c:	484a      	ldr	r0, [pc, #296]	; (8002468 <Si468x_dab_get_ensemble_info+0x138>)
 800233e:	f001 fb13 	bl	8003968 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_ENSEMBLE_INFO; 	//Command Code DAB Get Ensemble Info
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <Si468x_dab_get_ensemble_info+0x13c>)
 8002344:	22b4      	movs	r2, #180	; 0xb4
 8002346:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;								//always 0 - as in documentation
 8002348:	4b48      	ldr	r3, [pc, #288]	; (800246c <Si468x_dab_get_ensemble_info+0x13c>)
 800234a:	2200      	movs	r2, #0
 800234c:	705a      	strb	r2, [r3, #1]
	status = Si468x_write_command(2, dab_spi_tx_buffer);
 800234e:	4947      	ldr	r1, [pc, #284]	; (800246c <Si468x_dab_get_ensemble_info+0x13c>)
 8002350:	2002      	movs	r0, #2
 8002352:	f7ff f99d 	bl	8001690 <Si468x_write_command>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <Si468x_dab_get_ensemble_info+0x140>)
 800235c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800235e:	2002      	movs	r0, #2
 8002360:	f005 f80e 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(21, dab_spi_rx_buffer);
 8002364:	4943      	ldr	r1, [pc, #268]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 8002366:	2015      	movs	r0, #21
 8002368:	f7ff f9b4 	bl	80016d4 <Si468x_read_reply>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <Si468x_dab_get_ensemble_info+0x140>)
 8002372:	701a      	strb	r2, [r3, #0]

	//wait for good ensemble name
	while(!dab_spi_rx_buffer[6])
 8002374:	e012      	b.n	800239c <Si468x_dab_get_ensemble_info+0x6c>
	{
		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002376:	493d      	ldr	r1, [pc, #244]	; (800246c <Si468x_dab_get_ensemble_info+0x13c>)
 8002378:	2002      	movs	r0, #2
 800237a:	f7ff f989 	bl	8001690 <Si468x_write_command>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <Si468x_dab_get_ensemble_info+0x140>)
 8002384:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8002386:	2002      	movs	r0, #2
 8002388:	f004 fffa 	bl	8007380 <HAL_Delay>
		status = Si468x_read_reply(21, dab_spi_rx_buffer);
 800238c:	4939      	ldr	r1, [pc, #228]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 800238e:	2015      	movs	r0, #21
 8002390:	f7ff f9a0 	bl	80016d4 <Si468x_read_reply>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	4b35      	ldr	r3, [pc, #212]	; (8002470 <Si468x_dab_get_ensemble_info+0x140>)
 800239a:	701a      	strb	r2, [r3, #0]
	while(!dab_spi_rx_buffer[6])
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 800239e:	799b      	ldrb	r3, [r3, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0e8      	beq.n	8002376 <Si468x_dab_get_ensemble_info+0x46>
	}

	if(rd_reply.err_cmd)
 80023a4:	4b34      	ldr	r3, [pc, #208]	; (8002478 <Si468x_dab_get_ensemble_info+0x148>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <Si468x_dab_get_ensemble_info+0x8e>
	{
		send_debug_msg("Command Error!", CRLF_SEND);
 80023b2:	2101      	movs	r1, #1
 80023b4:	4831      	ldr	r0, [pc, #196]	; (800247c <Si468x_dab_get_ensemble_info+0x14c>)
 80023b6:	f001 fad7 	bl	8003968 <send_debug_msg>
		return 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e050      	b.n	8002460 <Si468x_dab_get_ensemble_info+0x130>
	}
	else
	{
		ensemble_id_temp = (dab_spi_rx_buffer[5] << 8) + dab_spi_rx_buffer[4];
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 80023c0:	795b      	ldrb	r3, [r3, #5]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 80023c6:	7912      	ldrb	r2, [r2, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	603b      	str	r3, [r7, #0]

		if(ensemble_id_temp)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d041      	beq.n	8002456 <Si468x_dab_get_ensemble_info+0x126>
		{
			send_debug_msg("Ensemble found.", CRLF_SEND);
 80023d2:	2101      	movs	r1, #1
 80023d4:	482a      	ldr	r0, [pc, #168]	; (8002480 <Si468x_dab_get_ensemble_info+0x150>)
 80023d6:	f001 fac7 	bl	8003968 <send_debug_msg>
			ensembles_list[dab_management.total_ensembles].id = ensemble_id_temp;
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	b291      	uxth	r1, r2
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <Si468x_dab_get_ensemble_info+0x158>)
 80023e4:	015b      	lsls	r3, r3, #5
 80023e6:	4413      	add	r3, r2
 80023e8:	460a      	mov	r2, r1
 80023ea:	801a      	strh	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq = dab_management.actual_freq;
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	4618      	mov	r0, r3
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	4924      	ldr	r1, [pc, #144]	; (8002488 <Si468x_dab_get_ensemble_info+0x158>)
 80023f8:	0143      	lsls	r3, r0, #5
 80023fa:	440b      	add	r3, r1
 80023fc:	3318      	adds	r3, #24
 80023fe:	601a      	str	r2, [r3, #0]
			ensembles_list[dab_management.total_ensembles].freq_id  = dab_management.actual_freq_id;
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	4618      	mov	r0, r3
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002408:	7b19      	ldrb	r1, [r3, #12]
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <Si468x_dab_get_ensemble_info+0x158>)
 800240c:	0143      	lsls	r3, r0, #5
 800240e:	4413      	add	r3, r2
 8002410:	331c      	adds	r3, #28
 8002412:	460a      	mov	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 16; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]
 800241a:	e011      	b.n	8002440 <Si468x_dab_get_ensemble_info+0x110>
			{
				ensembles_list[dab_management.total_ensembles].label[i] = dab_spi_rx_buffer[6 + i];
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	1d9a      	adds	r2, r3, #6
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	461c      	mov	r4, r3
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4912      	ldr	r1, [pc, #72]	; (8002474 <Si468x_dab_get_ensemble_info+0x144>)
 800242a:	5c88      	ldrb	r0, [r1, r2]
 800242c:	4916      	ldr	r1, [pc, #88]	; (8002488 <Si468x_dab_get_ensemble_info+0x158>)
 800242e:	0162      	lsls	r2, r4, #5
 8002430:	440a      	add	r2, r1
 8002432:	4413      	add	r3, r2
 8002434:	3302      	adds	r3, #2
 8002436:	4602      	mov	r2, r0
 8002438:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	3301      	adds	r3, #1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d9ea      	bls.n	800241c <Si468x_dab_get_ensemble_info+0xec>
			}

			dab_management.total_ensembles++;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	3301      	adds	r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <Si468x_dab_get_ensemble_info+0x154>)
 8002450:	705a      	strb	r2, [r3, #1]
			return 1;
 8002452:	2301      	movs	r3, #1
 8002454:	e004      	b.n	8002460 <Si468x_dab_get_ensemble_info+0x130>
		}
		else
		{
			send_debug_msg("Ensemble not found.", CRLF_SEND);
 8002456:	2101      	movs	r1, #1
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <Si468x_dab_get_ensemble_info+0x15c>)
 800245a:	f001 fa85 	bl	8003968 <send_debug_msg>
			return 0;
 800245e:	2300      	movs	r3, #0
		}
	}
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}
 8002468:	0800dbc8 	.word	0x0800dbc8
 800246c:	200001a8 	.word	0x200001a8
 8002470:	20003510 	.word	0x20003510
 8002474:	200011a8 	.word	0x200011a8
 8002478:	200035fc 	.word	0x200035fc
 800247c:	0800d650 	.word	0x0800d650
 8002480:	0800dc04 	.word	0x0800dc04
 8002484:	20004bc4 	.word	0x20004bc4
 8002488:	20003634 	.word	0x20003634
 800248c:	0800dc14 	.word	0x0800dc14

08002490 <Si468x_dab_full_scan>:

uint8_t Si468x_dab_full_scan()
{
 8002490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002492:	b099      	sub	sp, #100	; 0x64
 8002494:	af0a      	add	r7, sp, #40	; 0x28
	send_debug_msg("----------------------DAB Full Scan----------------------", CRLF_SEND);
 8002496:	2101      	movs	r1, #1
 8002498:	4887      	ldr	r0, [pc, #540]	; (80026b8 <Si468x_dab_full_scan+0x228>)
 800249a:	f001 fa65 	bl	8003968 <send_debug_msg>
	dab_management.total_services = 0;
 800249e:	4b87      	ldr	r3, [pc, #540]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
	dab_management.total_ensembles = 0;
 80024a4:	4b85      	ldr	r3, [pc, #532]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	705a      	strb	r2, [r3, #1]
	dab_management.actual_services = 0;
 80024aa:	4b84      	ldr	r3, [pc, #528]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	709a      	strb	r2, [r3, #2]

	uint8_t valid_timeout = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t fic_q_timeout = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t _scan_cancel_flag = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	touch_coordinates_t _touch_coordinates;

	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024c8:	e09e      	b.n	8002608 <Si468x_dab_full_scan+0x178>
	{
		_touch_coordinates = Touch_read();
 80024ca:	f004 fbb1 	bl	8006c30 <Touch_read>
 80024ce:	4603      	mov	r3, r0
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
//		_scan_cancel_flag = get_scan_cancel_flag();

		//handle cancel button
		if(_touch_coordinates.x >  5 && _touch_coordinates.x < 315 && _touch_coordinates.y > 195 && _touch_coordinates.y < 235)
 80024d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d90c      	bls.n	80024f2 <Si468x_dab_full_scan+0x62>
 80024d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024da:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80024de:	d808      	bhi.n	80024f2 <Si468x_dab_full_scan+0x62>
 80024e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024e2:	2bc3      	cmp	r3, #195	; 0xc3
 80024e4:	d905      	bls.n	80024f2 <Si468x_dab_full_scan+0x62>
 80024e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024e8:	2bea      	cmp	r3, #234	; 0xea
 80024ea:	d802      	bhi.n	80024f2 <Si468x_dab_full_scan+0x62>
		{
			_scan_cancel_flag = 1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}

		if(_scan_cancel_flag)
 80024f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 808e 	bne.w	8002618 <Si468x_dab_full_scan+0x188>

//		dab_digrad_status.valid = 0;
//		dab_digrad_status.acq = 0;
//		dab_digrad_status.fic_quality = 0;

		valid_timeout = VALID_TIMEOUT;
 80024fc:	2306      	movs	r3, #6
 80024fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		fic_q_timeout = FIC_Q_TIMEOUT;
 8002502:	2396      	movs	r3, #150	; 0x96
 8002504:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		Si468x_dab_tune_freq(freq_index, 0);
 8002508:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fada 	bl	8001ac8 <Si468x_dab_tune_freq>

		do
		{
			Si468x_dab_digrad_status();
 8002514:	463b      	mov	r3, r7
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fb8e 	bl	8001c38 <Si468x_dab_digrad_status>
			valid_timeout--;
 800251c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002520:	3b01      	subs	r3, #1
 8002522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(!valid_timeout)
 8002526:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800252a:	2b00      	cmp	r3, #0
 800252c:	d104      	bne.n	8002538 <Si468x_dab_full_scan+0xa8>
			{
				send_debug_msg("Ensemble not found.", CRLF_SEND);
 800252e:	2101      	movs	r1, #1
 8002530:	4863      	ldr	r0, [pc, #396]	; (80026c0 <Si468x_dab_full_scan+0x230>)
 8002532:	f001 fa19 	bl	8003968 <send_debug_msg>
				break;
 8002536:	e010      	b.n	800255a <Si468x_dab_full_scan+0xca>
			}
			HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002538:	2032      	movs	r0, #50	; 0x32
 800253a:	f004 ff21 	bl	8007380 <HAL_Delay>
		}while(!dab_digrad_status.valid || !dab_digrad_status.acq);
 800253e:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <Si468x_dab_full_scan+0x234>)
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0e3      	beq.n	8002514 <Si468x_dab_full_scan+0x84>
 800254c:	4b5d      	ldr	r3, [pc, #372]	; (80026c4 <Si468x_dab_full_scan+0x234>)
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0dc      	beq.n	8002514 <Si468x_dab_full_scan+0x84>

		if(valid_timeout)
 800255a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800255e:	2b00      	cmp	r3, #0
 8002560:	d018      	beq.n	8002594 <Si468x_dab_full_scan+0x104>
		{
			do
			{
				Si468x_dab_digrad_status();
 8002562:	463b      	mov	r3, r7
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb67 	bl	8001c38 <Si468x_dab_digrad_status>
				fic_q_timeout--;
 800256a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800256e:	3b01      	subs	r3, #1
 8002570:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(!fic_q_timeout)
 8002574:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <Si468x_dab_full_scan+0xf6>
				{
					send_debug_msg("Ensemble not found.", CRLF_SEND);
 800257c:	2101      	movs	r1, #1
 800257e:	4850      	ldr	r0, [pc, #320]	; (80026c0 <Si468x_dab_full_scan+0x230>)
 8002580:	f001 f9f2 	bl	8003968 <send_debug_msg>
					break;
 8002584:	e006      	b.n	8002594 <Si468x_dab_full_scan+0x104>
				}
				HAL_Delay(SIGNAL_CHECK_INTERVAL);
 8002586:	2032      	movs	r0, #50	; 0x32
 8002588:	f004 fefa 	bl	8007380 <HAL_Delay>
			}while(dab_digrad_status.fic_quality < 50);
 800258c:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <Si468x_dab_full_scan+0x234>)
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	2b31      	cmp	r3, #49	; 0x31
 8002592:	d9e6      	bls.n	8002562 <Si468x_dab_full_scan+0xd2>
		}

		if(valid_timeout && fic_q_timeout)
 8002594:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01d      	beq.n	80025d8 <Si468x_dab_full_scan+0x148>
 800259c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d019      	beq.n	80025d8 <Si468x_dab_full_scan+0x148>
		{
			do
			{
				Si468x_dab_get_event_status();
 80025a4:	f000 fb12 	bl	8002bcc <Si468x_dab_get_event_status>
				HAL_Delay(10);
 80025a8:	200a      	movs	r0, #10
 80025aa:	f004 fee9 	bl	8007380 <HAL_Delay>
			}while(!dab_events.srv_list || dab_events.srv_list_int);
 80025ae:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <Si468x_dab_full_scan+0x238>)
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f3      	beq.n	80025a4 <Si468x_dab_full_scan+0x114>
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <Si468x_dab_full_scan+0x238>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ec      	bne.n	80025a4 <Si468x_dab_full_scan+0x114>

			if(Si468x_dab_get_ensemble_info())
 80025ca:	f7ff feb1 	bl	8002330 <Si468x_dab_get_ensemble_info>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <Si468x_dab_full_scan+0x148>
			{
				Si468x_dab_get_digital_service_list();
 80025d4:	f7ff fb88 	bl	8001ce8 <Si468x_dab_get_digital_service_list>
			}
		}
		Display_scanning_screen_data(dab_digrad_status, dab_management);
 80025d8:	4e3a      	ldr	r6, [pc, #232]	; (80026c4 <Si468x_dab_full_scan+0x234>)
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 80025dc:	ac06      	add	r4, sp, #24
 80025de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025e4:	466d      	mov	r5, sp
 80025e6:	f106 0410 	add.w	r4, r6, #16
 80025ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025fa:	f002 f827 	bl	800464c <Display_scanning_screen_data>
	for(uint8_t freq_index = 0; freq_index < dab_management.freq_cnt; freq_index++)
 80025fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002602:	3301      	adds	r3, #1
 8002604:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002608:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 800260a:	7b5b      	ldrb	r3, [r3, #13]
 800260c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002610:	429a      	cmp	r2, r3
 8002612:	f4ff af5a 	bcc.w	80024ca <Si468x_dab_full_scan+0x3a>
 8002616:	e000      	b.n	800261a <Si468x_dab_full_scan+0x18a>
			break;
 8002618:	bf00      	nop
	}

	if(_scan_cancel_flag)
 800261a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <Si468x_dab_full_scan+0x1a2>
	{
		send_debug_msg("Scanning cancelled.", CRLF_SEND);
 8002622:	2101      	movs	r1, #1
 8002624:	4829      	ldr	r0, [pc, #164]	; (80026cc <Si468x_dab_full_scan+0x23c>)
 8002626:	f001 f99f 	bl	8003968 <send_debug_msg>
		restore_from_eeprom();
 800262a:	f000 fe37 	bl	800329c <restore_from_eeprom>
		return 0;
 800262e:	2300      	movs	r3, #0
 8002630:	e1e9      	b.n	8002a06 <Si468x_dab_full_scan+0x576>
	}

	else
	{
		eeprom_clear_scanning_data();
 8002632:	f003 f86f 	bl	8005714 <eeprom_clear_scanning_data>

		if(dab_management.total_services)
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <Si468x_dab_full_scan+0x1d6>
		{
			eeprom_save_scanning_data(services_list, dab_management.total_services, ensembles_list, dab_management.total_ensembles);
 800263e:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002640:	7819      	ldrb	r1, [r3, #0]
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <Si468x_dab_full_scan+0x240>)
 8002648:	4822      	ldr	r0, [pc, #136]	; (80026d4 <Si468x_dab_full_scan+0x244>)
 800264a:	f003 f8bf 	bl	80057cc <eeprom_save_scanning_data>
			dab_management.actual_station = 0;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002650:	2200      	movs	r2, #0
 8002652:	70da      	strb	r2, [r3, #3]
			dab_management.last_station_index = 0;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002656:	2200      	movs	r2, #0
 8002658:	711a      	strb	r2, [r3, #4]
			eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 800265a:	2201      	movs	r2, #1
 800265c:	491e      	ldr	r1, [pc, #120]	; (80026d8 <Si468x_dab_full_scan+0x248>)
 800265e:	f240 1007 	movw	r0, #263	; 0x107
 8002662:	f003 f82f 	bl	80056c4 <eeprom_write>
		}

		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 8002666:	2100      	movs	r1, #0
 8002668:	481c      	ldr	r0, [pc, #112]	; (80026dc <Si468x_dab_full_scan+0x24c>)
 800266a:	f001 f97d 	bl	8003968 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <Si468x_dab_full_scan+0x22c>)
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	220a      	movs	r2, #10
 8002674:	491a      	ldr	r1, [pc, #104]	; (80026e0 <Si468x_dab_full_scan+0x250>)
 8002676:	4618      	mov	r0, r3
 8002678:	f00a fe78 	bl	800d36c <itoa>
 800267c:	4603      	mov	r3, r0
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f001 f971 	bl	8003968 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8002686:	2101      	movs	r1, #1
 8002688:	4816      	ldr	r0, [pc, #88]	; (80026e4 <Si468x_dab_full_scan+0x254>)
 800268a:	f001 f96d 	bl	8003968 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 800268e:	2100      	movs	r1, #0
 8002690:	4815      	ldr	r0, [pc, #84]	; (80026e8 <Si468x_dab_full_scan+0x258>)
 8002692:	f001 f969 	bl	8003968 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 8002696:	2100      	movs	r1, #0
 8002698:	4814      	ldr	r0, [pc, #80]	; (80026ec <Si468x_dab_full_scan+0x25c>)
 800269a:	f001 f965 	bl	8003968 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 800269e:	2100      	movs	r1, #0
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <Si468x_dab_full_scan+0x260>)
 80026a2:	f001 f961 	bl	8003968 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 80026a6:	2101      	movs	r1, #1
 80026a8:	4812      	ldr	r0, [pc, #72]	; (80026f4 <Si468x_dab_full_scan+0x264>)
 80026aa:	f001 f95d 	bl	8003968 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80026b4:	e07d      	b.n	80027b2 <Si468x_dab_full_scan+0x322>
 80026b6:	bf00      	nop
 80026b8:	0800dc28 	.word	0x0800dc28
 80026bc:	20004bc4 	.word	0x20004bc4
 80026c0:	0800dc14 	.word	0x0800dc14
 80026c4:	200035d4 	.word	0x200035d4
 80026c8:	20003600 	.word	0x20003600
 80026cc:	0800dc64 	.word	0x0800dc64
 80026d0:	20003634 	.word	0x20003634
 80026d4:	20003774 	.word	0x20003774
 80026d8:	20004bc8 	.word	0x20004bc8
 80026dc:	0800dc78 	.word	0x0800dc78
 80026e0:	200034d0 	.word	0x200034d0
 80026e4:	0800dc8c 	.word	0x0800dc8c
 80026e8:	0800dcc0 	.word	0x0800dcc0
 80026ec:	0800dccc 	.word	0x0800dccc
 80026f0:	0800dce0 	.word	0x0800dce0
 80026f4:	0800dcf0 	.word	0x0800dcf0
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 80026f8:	2100      	movs	r1, #0
 80026fa:	48c5      	ldr	r0, [pc, #788]	; (8002a10 <Si468x_dab_full_scan+0x580>)
 80026fc:	f001 f934 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8002700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002704:	3301      	adds	r3, #1
 8002706:	220a      	movs	r2, #10
 8002708:	49c2      	ldr	r1, [pc, #776]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 800270a:	4618      	mov	r0, r3
 800270c:	f00a fe2e 	bl	800d36c <itoa>
 8002710:	4603      	mov	r3, r0
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f001 f927 	bl	8003968 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 800271a:	2100      	movs	r1, #0
 800271c:	48be      	ldr	r0, [pc, #760]	; (8002a18 <Si468x_dab_full_scan+0x588>)
 800271e:	f001 f923 	bl	8003968 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8002722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	4abc      	ldr	r2, [pc, #752]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 800272a:	4413      	add	r3, r2
 800272c:	3302      	adds	r3, #2
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f001 f919 	bl	8003968 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 8002736:	2100      	movs	r1, #0
 8002738:	48b5      	ldr	r0, [pc, #724]	; (8002a10 <Si468x_dab_full_scan+0x580>)
 800273a:	f001 f915 	bl	8003968 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 800273e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002742:	4ab6      	ldr	r2, [pc, #728]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 8002744:	015b      	lsls	r3, r3, #5
 8002746:	4413      	add	r3, r2
 8002748:	3318      	adds	r3, #24
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	220a      	movs	r2, #10
 800274e:	49b1      	ldr	r1, [pc, #708]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 8002750:	4618      	mov	r0, r3
 8002752:	f00a fe0b 	bl	800d36c <itoa>
 8002756:	4603      	mov	r3, r0
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f904 	bl	8003968 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 8002760:	2100      	movs	r1, #0
 8002762:	48af      	ldr	r0, [pc, #700]	; (8002a20 <Si468x_dab_full_scan+0x590>)
 8002764:	f001 f900 	bl	8003968 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 8002768:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800276c:	4aab      	ldr	r2, [pc, #684]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 800276e:	015b      	lsls	r3, r3, #5
 8002770:	4413      	add	r3, r2
 8002772:	331c      	adds	r3, #28
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4baa      	ldr	r3, [pc, #680]	; (8002a24 <Si468x_dab_full_scan+0x594>)
 800277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f001 f8f1 	bl	8003968 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 8002786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800278a:	4aa4      	ldr	r2, [pc, #656]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 800278c:	015b      	lsls	r3, r3, #5
 800278e:	4413      	add	r3, r2
 8002790:	331c      	adds	r3, #28
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b13      	cmp	r3, #19
 8002796:	d803      	bhi.n	80027a0 <Si468x_dab_full_scan+0x310>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002798:	2100      	movs	r1, #0
 800279a:	48a3      	ldr	r0, [pc, #652]	; (8002a28 <Si468x_dab_full_scan+0x598>)
 800279c:	f001 f8e4 	bl	8003968 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 80027a0:	2101      	movs	r1, #1
 80027a2:	48a2      	ldr	r0, [pc, #648]	; (8002a2c <Si468x_dab_full_scan+0x59c>)
 80027a4:	f001 f8e0 	bl	8003968 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80027a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027ac:	3301      	adds	r3, #1
 80027ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80027b2:	4b9f      	ldr	r3, [pc, #636]	; (8002a30 <Si468x_dab_full_scan+0x5a0>)
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d39c      	bcc.n	80026f8 <Si468x_dab_full_scan+0x268>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80027be:	2101      	movs	r1, #1
 80027c0:	489c      	ldr	r0, [pc, #624]	; (8002a34 <Si468x_dab_full_scan+0x5a4>)
 80027c2:	f001 f8d1 	bl	8003968 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 80027c6:	2100      	movs	r1, #0
 80027c8:	489b      	ldr	r0, [pc, #620]	; (8002a38 <Si468x_dab_full_scan+0x5a8>)
 80027ca:	f001 f8cd 	bl	8003968 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 80027ce:	4b98      	ldr	r3, [pc, #608]	; (8002a30 <Si468x_dab_full_scan+0x5a0>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	220a      	movs	r2, #10
 80027d4:	498f      	ldr	r1, [pc, #572]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a fdc8 	bl	800d36c <itoa>
 80027dc:	4603      	mov	r3, r0
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 f8c1 	bl	8003968 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80027e6:	2101      	movs	r1, #1
 80027e8:	4894      	ldr	r0, [pc, #592]	; (8002a3c <Si468x_dab_full_scan+0x5ac>)
 80027ea:	f001 f8bd 	bl	8003968 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 80027ee:	2101      	movs	r1, #1
 80027f0:	4893      	ldr	r0, [pc, #588]	; (8002a40 <Si468x_dab_full_scan+0x5b0>)
 80027f2:	f001 f8b9 	bl	8003968 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80027fc:	e0f7      	b.n	80029ee <Si468x_dab_full_scan+0x55e>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 80027fe:	2100      	movs	r1, #0
 8002800:	4883      	ldr	r0, [pc, #524]	; (8002a10 <Si468x_dab_full_scan+0x580>)
 8002802:	f001 f8b1 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8002806:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800280a:	3301      	adds	r3, #1
 800280c:	220a      	movs	r2, #10
 800280e:	4981      	ldr	r1, [pc, #516]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 8002810:	4618      	mov	r0, r3
 8002812:	f00a fdab 	bl	800d36c <itoa>
 8002816:	4603      	mov	r3, r0
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f001 f8a4 	bl	8003968 <send_debug_msg>
			if((services_index + 1) < 10)
 8002820:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002824:	2b08      	cmp	r3, #8
 8002826:	d803      	bhi.n	8002830 <Si468x_dab_full_scan+0x3a0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002828:	2100      	movs	r1, #0
 800282a:	487f      	ldr	r0, [pc, #508]	; (8002a28 <Si468x_dab_full_scan+0x598>)
 800282c:	f001 f89c 	bl	8003968 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002830:	2100      	movs	r1, #0
 8002832:	4884      	ldr	r0, [pc, #528]	; (8002a44 <Si468x_dab_full_scan+0x5b4>)
 8002834:	f001 f898 	bl	8003968 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 8002838:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800283c:	2234      	movs	r2, #52	; 0x34
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	4a81      	ldr	r2, [pc, #516]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002844:	4413      	add	r3, r2
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f001 f88d 	bl	8003968 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800284e:	2100      	movs	r1, #0
 8002850:	487e      	ldr	r0, [pc, #504]	; (8002a4c <Si468x_dab_full_scan+0x5bc>)
 8002852:	f001 f889 	bl	8003968 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002856:	2300      	movs	r3, #0
 8002858:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800285c:	e021      	b.n	80028a2 <Si468x_dab_full_scan+0x412>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800285e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	4413      	add	r3, r2
 8002868:	331c      	adds	r3, #28
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002870:	4975      	ldr	r1, [pc, #468]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002872:	2034      	movs	r0, #52	; 0x34
 8002874:	fb00 f303 	mul.w	r3, r0, r3
 8002878:	440b      	add	r3, r1
 800287a:	3328      	adds	r3, #40	; 0x28
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d10a      	bne.n	8002898 <Si468x_dab_full_scan+0x408>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 8002882:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002886:	015b      	lsls	r3, r3, #5
 8002888:	4a64      	ldr	r2, [pc, #400]	; (8002a1c <Si468x_dab_full_scan+0x58c>)
 800288a:	4413      	add	r3, r2
 800288c:	3302      	adds	r3, #2
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f001 f869 	bl	8003968 <send_debug_msg>
					break;
 8002896:	e00a      	b.n	80028ae <Si468x_dab_full_scan+0x41e>
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8002898:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800289c:	3301      	adds	r3, #1
 800289e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <Si468x_dab_full_scan+0x5a0>)
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d3d7      	bcc.n	800285e <Si468x_dab_full_scan+0x3ce>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 80028ae:	2100      	movs	r1, #0
 80028b0:	4866      	ldr	r0, [pc, #408]	; (8002a4c <Si468x_dab_full_scan+0x5bc>)
 80028b2:	f001 f859 	bl	8003968 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 80028b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028ba:	4a63      	ldr	r2, [pc, #396]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 80028bc:	2134      	movs	r1, #52	; 0x34
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3324      	adds	r3, #36	; 0x24
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	220a      	movs	r2, #10
 80028ca:	4952      	ldr	r1, [pc, #328]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 80028cc:	4618      	mov	r0, r3
 80028ce:	f00a fd4d 	bl	800d36c <itoa>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 f846 	bl	8003968 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80028dc:	2100      	movs	r1, #0
 80028de:	4850      	ldr	r0, [pc, #320]	; (8002a20 <Si468x_dab_full_scan+0x590>)
 80028e0:	f001 f842 	bl	8003968 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 80028e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 80028ea:	2134      	movs	r1, #52	; 0x34
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3328      	adds	r3, #40	; 0x28
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <Si468x_dab_full_scan+0x594>)
 80028fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f001 f831 	bl	8003968 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8002906:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800290a:	4a4f      	ldr	r2, [pc, #316]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 800290c:	2134      	movs	r1, #52	; 0x34
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3328      	adds	r3, #40	; 0x28
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b13      	cmp	r3, #19
 800291a:	d803      	bhi.n	8002924 <Si468x_dab_full_scan+0x494>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800291c:	2100      	movs	r1, #0
 800291e:	4842      	ldr	r0, [pc, #264]	; (8002a28 <Si468x_dab_full_scan+0x598>)
 8002920:	f001 f822 	bl	8003968 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8002924:	2100      	movs	r1, #0
 8002926:	4847      	ldr	r0, [pc, #284]	; (8002a44 <Si468x_dab_full_scan+0x5b4>)
 8002928:	f001 f81e 	bl	8003968 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 800292c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002930:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002932:	2134      	movs	r1, #52	; 0x34
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3315      	adds	r3, #21
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	220a      	movs	r2, #10
 8002940:	4934      	ldr	r1, [pc, #208]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 8002942:	4618      	mov	r0, r3
 8002944:	f00a fd12 	bl	800d36c <itoa>
 8002948:	4603      	mov	r3, r0
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f001 f80b 	bl	8003968 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 8002952:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002956:	4a3c      	ldr	r2, [pc, #240]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002958:	2134      	movs	r1, #52	; 0x34
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3315      	adds	r3, #21
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b09      	cmp	r3, #9
 8002966:	d803      	bhi.n	8002970 <Si468x_dab_full_scan+0x4e0>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8002968:	2100      	movs	r1, #0
 800296a:	482f      	ldr	r0, [pc, #188]	; (8002a28 <Si468x_dab_full_scan+0x598>)
 800296c:	f000 fffc 	bl	8003968 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 8002970:	2100      	movs	r1, #0
 8002972:	4837      	ldr	r0, [pc, #220]	; (8002a50 <Si468x_dab_full_scan+0x5c0>)
 8002974:	f000 fff8 	bl	8003968 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8002978:	2100      	movs	r1, #0
 800297a:	4836      	ldr	r0, [pc, #216]	; (8002a54 <Si468x_dab_full_scan+0x5c4>)
 800297c:	f000 fff4 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 8002980:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002984:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 8002986:	2134      	movs	r1, #52	; 0x34
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3320      	adds	r3, #32
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	491f      	ldr	r1, [pc, #124]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 8002996:	4618      	mov	r0, r3
 8002998:	f00a fce8 	bl	800d36c <itoa>
 800299c:	4603      	mov	r3, r0
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 ffe1 	bl	8003968 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 80029a6:	2100      	movs	r1, #0
 80029a8:	4826      	ldr	r0, [pc, #152]	; (8002a44 <Si468x_dab_full_scan+0x5b4>)
 80029aa:	f000 ffdd 	bl	8003968 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80029ae:	2100      	movs	r1, #0
 80029b0:	4828      	ldr	r0, [pc, #160]	; (8002a54 <Si468x_dab_full_scan+0x5c4>)
 80029b2:	f000 ffd9 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 80029b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <Si468x_dab_full_scan+0x5b8>)
 80029bc:	2134      	movs	r1, #52	; 0x34
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	332a      	adds	r3, #42	; 0x2a
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4912      	ldr	r1, [pc, #72]	; (8002a14 <Si468x_dab_full_scan+0x584>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00a fccd 	bl	800d36c <itoa>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 ffc6 	bl	8003968 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 80029dc:	2101      	movs	r1, #1
 80029de:	481e      	ldr	r0, [pc, #120]	; (8002a58 <Si468x_dab_full_scan+0x5c8>)
 80029e0:	f000 ffc2 	bl	8003968 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 80029e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80029e8:	3301      	adds	r3, #1
 80029ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <Si468x_dab_full_scan+0x5a0>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80029f6:	429a      	cmp	r2, r3
 80029f8:	f4ff af01 	bcc.w	80027fe <Si468x_dab_full_scan+0x36e>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 80029fc:	2101      	movs	r1, #1
 80029fe:	480f      	ldr	r0, [pc, #60]	; (8002a3c <Si468x_dab_full_scan+0x5ac>)
 8002a00:	f000 ffb2 	bl	8003968 <send_debug_msg>

		//to check if everything is ok in eeprom
		//  eeprom_show();
		return 1;
 8002a04:	2301      	movs	r3, #1
	}
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	373c      	adds	r7, #60	; 0x3c
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0800dd00 	.word	0x0800dd00
 8002a14:	200034d0 	.word	0x200034d0
 8002a18:	0800dd04 	.word	0x0800dd04
 8002a1c:	20003634 	.word	0x20003634
 8002a20:	0800dd10 	.word	0x0800dd10
 8002a24:	20000008 	.word	0x20000008
 8002a28:	0800dd18 	.word	0x0800dd18
 8002a2c:	0800dd1c 	.word	0x0800dd1c
 8002a30:	20004bc4 	.word	0x20004bc4
 8002a34:	0800dc8c 	.word	0x0800dc8c
 8002a38:	0800dd24 	.word	0x0800dd24
 8002a3c:	0800dd38 	.word	0x0800dd38
 8002a40:	0800dda4 	.word	0x0800dda4
 8002a44:	0800de10 	.word	0x0800de10
 8002a48:	20003774 	.word	0x20003774
 8002a4c:	0800de18 	.word	0x0800de18
 8002a50:	0800de1c 	.word	0x0800de1c
 8002a54:	0800de24 	.word	0x0800de24
 8002a58:	0800de28 	.word	0x0800de28

08002a5c <Si468x_dab_get_audio_info>:

dab_audio_info_t Si468x_dab_get_audio_info()
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	send_debug_msg("--------------Getting audio info from Si468x-------------", CRLF_SEND);
 8002a64:	2101      	movs	r1, #1
 8002a66:	484d      	ldr	r0, [pc, #308]	; (8002b9c <Si468x_dab_get_audio_info+0x140>)
 8002a68:	f000 ff7e 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_AUDIO_INFO;
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <Si468x_dab_get_audio_info+0x144>)
 8002a6e:	22bd      	movs	r2, #189	; 0xbd
 8002a70:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03; 	//	ber_option: 1 = long_term, 0 = short_term, ber_ack: 2 = reset counters, 0 = don't reset counters
 8002a72:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <Si468x_dab_get_audio_info+0x144>)
 8002a74:	2203      	movs	r2, #3
 8002a76:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002a78:	4949      	ldr	r1, [pc, #292]	; (8002ba0 <Si468x_dab_get_audio_info+0x144>)
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7fe fe08 	bl	8001690 <Si468x_write_command>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <Si468x_dab_get_audio_info+0x148>)
 8002a86:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f004 fc79 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(20, dab_spi_rx_buffer);
 8002a8e:	4946      	ldr	r1, [pc, #280]	; (8002ba8 <Si468x_dab_get_audio_info+0x14c>)
 8002a90:	2014      	movs	r0, #20
 8002a92:	f7fe fe1f 	bl	80016d4 <Si468x_read_reply>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <Si468x_dab_get_audio_info+0x148>)
 8002a9c:	701a      	strb	r2, [r3, #0]

	memcpy((uint8_t*)&dab_audio_info, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_audio_info));
 8002a9e:	4a43      	ldr	r2, [pc, #268]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002aa0:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <Si468x_dab_get_audio_info+0x14c>)
 8002aa2:	4614      	mov	r4, r2
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	send_debug_msg("Bitrate: ", CRLF_NO_SEND);
 8002aac:	2100      	movs	r1, #0
 8002aae:	4840      	ldr	r0, [pc, #256]	; (8002bb0 <Si468x_dab_get_audio_info+0x154>)
 8002ab0:	f000 ff5a 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_bit_rate, itoa_buffer, 10), CRLF_SEND);
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	220a      	movs	r2, #10
 8002aba:	493e      	ldr	r1, [pc, #248]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00a fc55 	bl	800d36c <itoa>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 ff4e 	bl	8003968 <send_debug_msg>

	send_debug_msg("Sample rate: ", CRLF_NO_SEND);
 8002acc:	2100      	movs	r1, #0
 8002ace:	483a      	ldr	r0, [pc, #232]	; (8002bb8 <Si468x_dab_get_audio_info+0x15c>)
 8002ad0:	f000 ff4a 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sample_rate, itoa_buffer, 10), CRLF_SEND);
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002ad6:	885b      	ldrh	r3, [r3, #2]
 8002ad8:	220a      	movs	r2, #10
 8002ada:	4936      	ldr	r1, [pc, #216]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00a fc45 	bl	800d36c <itoa>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ff3e 	bl	8003968 <send_debug_msg>

	send_debug_msg("XPAD Indicator: ", CRLF_NO_SEND);
 8002aec:	2100      	movs	r1, #0
 8002aee:	4833      	ldr	r0, [pc, #204]	; (8002bbc <Si468x_dab_get_audio_info+0x160>)
 8002af0:	f000 ff3a 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_xpad_ind, itoa_buffer, 10), CRLF_SEND);
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002af6:	791b      	ldrb	r3, [r3, #4]
 8002af8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	220a      	movs	r2, #10
 8002b00:	492c      	ldr	r1, [pc, #176]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f00a fc32 	bl	800d36c <itoa>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 ff2b 	bl	8003968 <send_debug_msg>

	send_debug_msg("PS Flag: ", CRLF_NO_SEND);
 8002b12:	2100      	movs	r1, #0
 8002b14:	482a      	ldr	r0, [pc, #168]	; (8002bc0 <Si468x_dab_get_audio_info+0x164>)
 8002b16:	f000 ff27 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_ps_flag, itoa_buffer, 10), CRLF_SEND);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	220a      	movs	r2, #10
 8002b26:	4923      	ldr	r1, [pc, #140]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f00a fc1f 	bl	800d36c <itoa>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2101      	movs	r1, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 ff18 	bl	8003968 <send_debug_msg>

	send_debug_msg("SBR Flag: ", CRLF_NO_SEND);
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4822      	ldr	r0, [pc, #136]	; (8002bc4 <Si468x_dab_get_audio_info+0x168>)
 8002b3c:	f000 ff14 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_sbr, itoa_buffer, 10), CRLF_SEND);
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002b42:	791b      	ldrb	r3, [r3, #4]
 8002b44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	220a      	movs	r2, #10
 8002b4c:	4919      	ldr	r1, [pc, #100]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f00a fc0c 	bl	800d36c <itoa>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2101      	movs	r1, #1
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 ff05 	bl	8003968 <send_debug_msg>

	send_debug_msg("Audio Mode: ", CRLF_NO_SEND);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4819      	ldr	r0, [pc, #100]	; (8002bc8 <Si468x_dab_get_audio_info+0x16c>)
 8002b62:	f000 ff01 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_audio_info.audio_mode, itoa_buffer, 10), CRLF_SEND);
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	220a      	movs	r2, #10
 8002b72:	4910      	ldr	r1, [pc, #64]	; (8002bb4 <Si468x_dab_get_audio_info+0x158>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f00a fbf9 	bl	800d36c <itoa>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fef2 	bl	8003968 <send_debug_msg>

	return dab_audio_info;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <Si468x_dab_get_audio_info+0x150>)
 8002b88:	461c      	mov	r4, r3
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	0800de34 	.word	0x0800de34
 8002ba0:	200001a8 	.word	0x200001a8
 8002ba4:	20003510 	.word	0x20003510
 8002ba8:	200011a8 	.word	0x200011a8
 8002bac:	20003610 	.word	0x20003610
 8002bb0:	0800de70 	.word	0x0800de70
 8002bb4:	200034d0 	.word	0x200034d0
 8002bb8:	0800de7c 	.word	0x0800de7c
 8002bbc:	0800de8c 	.word	0x0800de8c
 8002bc0:	0800dea0 	.word	0x0800dea0
 8002bc4:	0800deac 	.word	0x0800deac
 8002bc8:	0800deb8 	.word	0x0800deb8

08002bcc <Si468x_dab_get_event_status>:

void Si468x_dab_get_event_status()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	send_debug_msg("-----------Getting DAB Event Status from Si468x-------------", CRLF_SEND);
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4811      	ldr	r0, [pc, #68]	; (8002c18 <Si468x_dab_get_event_status+0x4c>)
 8002bd4:	f000 fec8 	bl	8003968 <send_debug_msg>
	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_EVENT_STATUS;
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <Si468x_dab_get_event_status+0x50>)
 8002bda:	22b3      	movs	r2, #179	; 0xb3
 8002bdc:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x03;	//+2 = Clears the AUDIO_STATUS error indicators BLK_ERROR and BLK_LOSS of this command, +1 = Clears all pending DAB event interrupt bits
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <Si468x_dab_get_event_status+0x50>)
 8002be0:	2203      	movs	r2, #3
 8002be2:	705a      	strb	r2, [r3, #1]

	status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002be4:	490d      	ldr	r1, [pc, #52]	; (8002c1c <Si468x_dab_get_event_status+0x50>)
 8002be6:	2002      	movs	r0, #2
 8002be8:	f7fe fd52 	bl	8001690 <Si468x_write_command>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <Si468x_dab_get_event_status+0x54>)
 8002bf2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f004 fbc3 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(9, dab_spi_rx_buffer);
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <Si468x_dab_get_event_status+0x58>)
 8002bfc:	2009      	movs	r0, #9
 8002bfe:	f7fe fd69 	bl	80016d4 <Si468x_read_reply>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <Si468x_dab_get_event_status+0x54>)
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <Si468x_dab_get_event_status+0x58>)
 8002c0c:	685b      	ldr	r3, [r3, #4]

	memcpy((uint8_t*)&dab_events, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(rd_reply_t));
 8002c0e:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <Si468x_dab_get_event_status+0x5c>)
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	0800dec8 	.word	0x0800dec8
 8002c1c:	200001a8 	.word	0x200001a8
 8002c20:	20003510 	.word	0x20003510
 8002c24:	200011a8 	.word	0x200011a8
 8002c28:	20003600 	.word	0x20003600

08002c2c <Si468x_dab_get_component_info>:

void Si468x_dab_get_component_info(uint32_t service_id, uint8_t component_id)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
	send_debug_msg("-----------Getting DAB Component Info-------------", CRLF_SEND);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	484a      	ldr	r0, [pc, #296]	; (8002d64 <Si468x_dab_get_component_info+0x138>)
 8002c3c:	f000 fe94 	bl	8003968 <send_debug_msg>

	dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_COMPONENT_INFO;
 8002c40:	4b49      	ldr	r3, [pc, #292]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c42:	22bb      	movs	r2, #187	; 0xbb
 8002c44:	701a      	strb	r2, [r3, #0]
	dab_spi_tx_buffer[1] = 0x00;	//always 0 as in documentation
 8002c46:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	705a      	strb	r2, [r3, #1]
	dab_spi_tx_buffer[2] = 0x00;	//always 0 as in documentation
 8002c4c:	4b46      	ldr	r3, [pc, #280]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	709a      	strb	r2, [r3, #2]
	dab_spi_tx_buffer[3] = 0x00;	//always 0 as in documentation
 8002c52:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	70da      	strb	r2, [r3, #3]

	dab_spi_tx_buffer[4]  = service_id & 0xFF;					//Service ID [7:0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c5e:	711a      	strb	r2, [r3, #4]
	dab_spi_tx_buffer[5]  = service_id >> 8;					//Service ID [15:8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c68:	715a      	strb	r2, [r3, #5]
	dab_spi_tx_buffer[6]  = service_id >> 16;					//Service ID [23:16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c72:	719a      	strb	r2, [r3, #6]
	dab_spi_tx_buffer[7]  = service_id >> 24;					//Service ID [31:24]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	0e1b      	lsrs	r3, r3, #24
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c7c:	71da      	strb	r2, [r3, #7]

	dab_spi_tx_buffer[8]  = component_id & 0xFF;				//Component ID [7:0]
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	7213      	strb	r3, [r2, #8]
	dab_spi_tx_buffer[9]  = component_id >> 8;					//Component ID [15:8]
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	121b      	asrs	r3, r3, #8
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c8c:	725a      	strb	r2, [r3, #9]
	dab_spi_tx_buffer[10]  = component_id >> 16;				//Component ID [23:16]
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	141b      	asrs	r3, r3, #16
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002c96:	729a      	strb	r2, [r3, #10]
	dab_spi_tx_buffer[11]  = component_id >> 24;				//Component ID [31:24]
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	161b      	asrs	r3, r3, #24
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002ca0:	72da      	strb	r2, [r3, #11]


	status = Si468x_write_command(12, dab_spi_tx_buffer);
 8002ca2:	4931      	ldr	r1, [pc, #196]	; (8002d68 <Si468x_dab_get_component_info+0x13c>)
 8002ca4:	200c      	movs	r0, #12
 8002ca6:	f7fe fcf3 	bl	8001690 <Si468x_write_command>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <Si468x_dab_get_component_info+0x140>)
 8002cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002cb2:	2005      	movs	r0, #5
 8002cb4:	f004 fb64 	bl	8007380 <HAL_Delay>
	status = Si468x_read_reply(26, dab_spi_rx_buffer);
 8002cb8:	492d      	ldr	r1, [pc, #180]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002cba:	201a      	movs	r0, #26
 8002cbc:	f7fe fd0a 	bl	80016d4 <Si468x_read_reply>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <Si468x_dab_get_component_info+0x140>)
 8002cc6:	701a      	strb	r2, [r3, #0]
	uint8_t global_id;
	uint8_t language;
	uint8_t label[16];
	uint16_t char_abbrev;

	language = dab_spi_rx_buffer[6] & 0x3F;
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002cca:	799b      	ldrb	r3, [r3, #6]
 8002ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd0:	77bb      	strb	r3, [r7, #30]

	for(uint8_t idx = 0; idx < 16; idx++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	77fb      	strb	r3, [r7, #31]
 8002cd6:	e00c      	b.n	8002cf2 <Si468x_dab_get_component_info+0xc6>
	{
		label[idx] = dab_spi_rx_buffer[8 + idx];
 8002cd8:	7ffb      	ldrb	r3, [r7, #31]
 8002cda:	f103 0208 	add.w	r2, r3, #8
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	4923      	ldr	r1, [pc, #140]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002ce2:	5c8a      	ldrb	r2, [r1, r2]
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t idx = 0; idx < 16; idx++)
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d9ef      	bls.n	8002cd8 <Si468x_dab_get_component_info+0xac>
	}

	char_abbrev = dab_spi_rx_buffer[24] + (dab_spi_rx_buffer[25] << 8);
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002cfa:	7e1b      	ldrb	r3, [r3, #24]
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <Si468x_dab_get_component_info+0x144>)
 8002d00:	7e5b      	ldrb	r3, [r3, #25]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	83bb      	strh	r3, [r7, #28]

	send_debug_msg("Language: ", CRLF_NO_SEND);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4819      	ldr	r0, [pc, #100]	; (8002d74 <Si468x_dab_get_component_info+0x148>)
 8002d10:	f000 fe2a 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(language, itoa_buffer, 10), CRLF_SEND);
 8002d14:	7fbb      	ldrb	r3, [r7, #30]
 8002d16:	220a      	movs	r2, #10
 8002d18:	4917      	ldr	r1, [pc, #92]	; (8002d78 <Si468x_dab_get_component_info+0x14c>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00a fb26 	bl	800d36c <itoa>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2101      	movs	r1, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fe1f 	bl	8003968 <send_debug_msg>

	send_debug_msg("Label:            ", CRLF_NO_SEND);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4813      	ldr	r0, [pc, #76]	; (8002d7c <Si468x_dab_get_component_info+0x150>)
 8002d2e:	f000 fe1b 	bl	8003968 <send_debug_msg>
	send_debug_msg((char*)label, CRLF_SEND);
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fe15 	bl	8003968 <send_debug_msg>

	send_debug_msg("Char abbrev mask: ", CRLF_NO_SEND);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	480f      	ldr	r0, [pc, #60]	; (8002d80 <Si468x_dab_get_component_info+0x154>)
 8002d42:	f000 fe11 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(char_abbrev, itoa_buffer, 2), CRLF_SEND);
 8002d46:	8bbb      	ldrh	r3, [r7, #28]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	490b      	ldr	r1, [pc, #44]	; (8002d78 <Si468x_dab_get_component_info+0x14c>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f00a fb0d 	bl	800d36c <itoa>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fe06 	bl	8003968 <send_debug_msg>

}
 8002d5c:	bf00      	nop
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	0800df08 	.word	0x0800df08
 8002d68:	200001a8 	.word	0x200001a8
 8002d6c:	20003510 	.word	0x20003510
 8002d70:	200011a8 	.word	0x200011a8
 8002d74:	0800df3c 	.word	0x0800df3c
 8002d78:	200034d0 	.word	0x200034d0
 8002d7c:	0800df48 	.word	0x0800df48
 8002d80:	0800df5c 	.word	0x0800df5c

08002d84 <Si468x_dab_get_digital_service_data>:

void Si468x_dab_get_digital_service_data()
{
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
	status = Si468x_read_reply(5, dab_spi_rx_buffer);
 8002d8a:	49ab      	ldr	r1, [pc, #684]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002d8c:	2005      	movs	r0, #5
 8002d8e:	f7fe fca1 	bl	80016d4 <Si468x_read_reply>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4ba9      	ldr	r3, [pc, #676]	; (800303c <Si468x_dab_get_digital_service_data+0x2b8>)
 8002d98:	701a      	strb	r2, [r3, #0]

	if(rd_reply.d_srv_int)
 8002d9a:	4ba9      	ldr	r3, [pc, #676]	; (8003040 <Si468x_dab_get_digital_service_data+0x2bc>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8142 	beq.w	800302e <Si468x_dab_get_digital_service_data+0x2aa>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_GET_DIGITAL_SERVICE_DATA;
 8002daa:	4ba6      	ldr	r3, [pc, #664]	; (8003044 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002dac:	2284      	movs	r2, #132	; 0x84
 8002dae:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x01;	//+1 = ACK, +16 = STATUS_ONLY
 8002db0:	4ba4      	ldr	r3, [pc, #656]	; (8003044 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 8002db6:	49a3      	ldr	r1, [pc, #652]	; (8003044 <Si468x_dab_get_digital_service_data+0x2c0>)
 8002db8:	2002      	movs	r0, #2
 8002dba:	f7fe fc69 	bl	8001690 <Si468x_write_command>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b9e      	ldr	r3, [pc, #632]	; (800303c <Si468x_dab_get_digital_service_data+0x2b8>)
 8002dc4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8002dc6:	2005      	movs	r0, #5
 8002dc8:	f004 fada 	bl	8007380 <HAL_Delay>

		//first read only header to obtain payload data size
		status = Si468x_read_reply(30, dab_spi_rx_buffer);
 8002dcc:	499a      	ldr	r1, [pc, #616]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002dce:	201e      	movs	r0, #30
 8002dd0:	f7fe fc80 	bl	80016d4 <Si468x_read_reply>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b98      	ldr	r3, [pc, #608]	; (800303c <Si468x_dab_get_digital_service_data+0x2b8>)
 8002dda:	701a      	strb	r2, [r3, #0]
		memcpy((uint8_t*)&dab_service_data_reply_header, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(dab_service_data_reply_header));
 8002ddc:	4a9a      	ldr	r2, [pc, #616]	; (8003048 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002dde:	4b96      	ldr	r3, [pc, #600]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002de0:	4615      	mov	r5, r2
 8002de2:	1d1c      	adds	r4, r3, #4
 8002de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	602b      	str	r3, [r5, #0]


//		if(dab_service_data_reply_header.buff_count)
		{
			send_debug_msg("-----------Getting DAB Service Data-------------", CRLF_SEND);
 8002dec:	2101      	movs	r1, #1
 8002dee:	4897      	ldr	r0, [pc, #604]	; (800304c <Si468x_dab_get_digital_service_data+0x2c8>)
 8002df0:	f000 fdba 	bl	8003968 <send_debug_msg>
//			send_debug_msg(itoa(dab_service_data_reply_header.num_segs, itoa_buffer, 10), CRLF_SEND);


			//second read full data when we know data length

			if(!dab_service_data_reply_header.dsrv_ovfl_int)
 8002df4:	4b94      	ldr	r3, [pc, #592]	; (8003048 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 8115 	bne.w	800302e <Si468x_dab_get_digital_service_data+0x2aa>
			{
				status = Si468x_read_reply(24 + dab_service_data_reply_header.byte_count, dab_spi_rx_buffer);
 8002e04:	4b90      	ldr	r3, [pc, #576]	; (8003048 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e06:	89db      	ldrh	r3, [r3, #14]
 8002e08:	3318      	adds	r3, #24
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	498a      	ldr	r1, [pc, #552]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fc60 	bl	80016d4 <Si468x_read_reply>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b88      	ldr	r3, [pc, #544]	; (800303c <Si468x_dab_get_digital_service_data+0x2b8>)
 8002e1a:	701a      	strb	r2, [r3, #0]

				if(dab_service_data_reply_header.dsc_ty == 60)
 8002e1c:	4b8a      	ldr	r3, [pc, #552]	; (8003048 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002e1e:	78db      	ldrb	r3, [r3, #3]
 8002e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b3c      	cmp	r3, #60	; 0x3c
 8002e28:	f040 80a7 	bne.w	8002f7a <Si468x_dab_get_digital_service_data+0x1f6>
				{
					send_debug_msg("Slideshow Data: ", CRLF_SEND);
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4888      	ldr	r0, [pc, #544]	; (8003050 <Si468x_dab_get_digital_service_data+0x2cc>)
 8002e30:	f000 fd9a 	bl	8003968 <send_debug_msg>
					uint32_t body_size;
					uint16_t header_size;
					uint8_t content_type;
					uint16_t content_sub_type;

					body_size = (dab_spi_rx_buffer[24 + 0] << 20) + (dab_spi_rx_buffer[24 + 1] << 12) + (dab_spi_rx_buffer[24 + 2] << 4) + ((dab_spi_rx_buffer[24 + 3] && 0xF0) >> 4);
 8002e34:	4b80      	ldr	r3, [pc, #512]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e36:	7e1b      	ldrb	r3, [r3, #24]
 8002e38:	051a      	lsls	r2, r3, #20
 8002e3a:	4b7f      	ldr	r3, [pc, #508]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e3c:	7e5b      	ldrb	r3, [r3, #25]
 8002e3e:	031b      	lsls	r3, r3, #12
 8002e40:	441a      	add	r2, r3
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e44:	7e9b      	ldrb	r3, [r3, #26]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	4413      	add	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]

					header_size = ((dab_spi_rx_buffer[24 + 3] && 0x0F) << 9) + (dab_spi_rx_buffer[24 + 4] << 1) + ((dab_spi_rx_buffer[24 + 5] && 0x80) >> 7);
 8002e4c:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e4e:	7edb      	ldrb	r3, [r3, #27]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <Si468x_dab_get_digital_service_data+0xd6>
 8002e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e58:	e000      	b.n	8002e5c <Si468x_dab_get_digital_service_data+0xd8>
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4b76      	ldr	r3, [pc, #472]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e5e:	7f1b      	ldrb	r3, [r3, #28]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	80fb      	strh	r3, [r7, #6]

					content_type = (dab_spi_rx_buffer[24 + 5] && 0x7E) >> 1;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	717b      	strb	r3, [r7, #5]

					content_sub_type = ((dab_spi_rx_buffer[24 + 5] && 0x01) << 8) + (dab_spi_rx_buffer[24 + 6]);
 8002e6e:	4b72      	ldr	r3, [pc, #456]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e70:	7f5b      	ldrb	r3, [r3, #29]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <Si468x_dab_get_digital_service_data+0xf8>
 8002e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7a:	e000      	b.n	8002e7e <Si468x_dab_get_digital_service_data+0xfa>
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002e80:	7f9b      	ldrb	r3, [r3, #30]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	807b      	strh	r3, [r7, #2]

					for(uint16_t i = 0; i < 4096; i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	82fb      	strh	r3, [r7, #22]
 8002e8c:	e006      	b.n	8002e9c <Si468x_dab_get_digital_service_data+0x118>
					{
						slideshow_data[i] = 0;
 8002e8e:	8afb      	ldrh	r3, [r7, #22]
 8002e90:	4a70      	ldr	r2, [pc, #448]	; (8003054 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002e92:	2100      	movs	r1, #0
 8002e94:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < 4096; i++)
 8002e96:	8afb      	ldrh	r3, [r7, #22]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	82fb      	strh	r3, [r7, #22]
 8002e9c:	8afb      	ldrh	r3, [r7, #22]
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	d3f4      	bcc.n	8002e8e <Si468x_dab_get_digital_service_data+0x10a>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	82bb      	strh	r3, [r7, #20]
 8002ea8:	e00a      	b.n	8002ec0 <Si468x_dab_get_digital_service_data+0x13c>
					{
						slideshow_data[i] = dab_spi_rx_buffer[24 + i];
 8002eaa:	8abb      	ldrh	r3, [r7, #20]
 8002eac:	f103 0218 	add.w	r2, r3, #24
 8002eb0:	8abb      	ldrh	r3, [r7, #20]
 8002eb2:	4961      	ldr	r1, [pc, #388]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002eb4:	5c89      	ldrb	r1, [r1, r2]
 8002eb6:	4a67      	ldr	r2, [pc, #412]	; (8003054 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002eb8:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002eba:	8abb      	ldrh	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	82bb      	strh	r3, [r7, #20]
 8002ec0:	4b61      	ldr	r3, [pc, #388]	; (8003048 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002ec2:	89db      	ldrh	r3, [r3, #14]
 8002ec4:	8aba      	ldrh	r2, [r7, #20]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d3ef      	bcc.n	8002eaa <Si468x_dab_get_digital_service_data+0x126>
					}

					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	827b      	strh	r3, [r7, #18]
 8002ece:	e00f      	b.n	8002ef0 <Si468x_dab_get_digital_service_data+0x16c>
					{
//						send_debug_msg(slideshow_data[i]);
						send_debug_msg(itoa(slideshow_data[i], itoa_buffer, 10), CRLF_SEND);
 8002ed0:	8a7b      	ldrh	r3, [r7, #18]
 8002ed2:	4a60      	ldr	r2, [pc, #384]	; (8003054 <Si468x_dab_get_digital_service_data+0x2d0>)
 8002ed4:	5cd3      	ldrb	r3, [r2, r3]
 8002ed6:	220a      	movs	r2, #10
 8002ed8:	495f      	ldr	r1, [pc, #380]	; (8003058 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002eda:	4618      	mov	r0, r3
 8002edc:	f00a fa46 	bl	800d36c <itoa>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fd3f 	bl	8003968 <send_debug_msg>
					for(uint16_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002eea:	8a7b      	ldrh	r3, [r7, #18]
 8002eec:	3301      	adds	r3, #1
 8002eee:	827b      	strh	r3, [r7, #18]
 8002ef0:	4b55      	ldr	r3, [pc, #340]	; (8003048 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002ef2:	89db      	ldrh	r3, [r3, #14]
 8002ef4:	8a7a      	ldrh	r2, [r7, #18]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3ea      	bcc.n	8002ed0 <Si468x_dab_get_digital_service_data+0x14c>
					}
//					send_debug_msg("", CRLF_SEND);
					send_debug_msg("end", CRLF_SEND);
 8002efa:	2101      	movs	r1, #1
 8002efc:	4857      	ldr	r0, [pc, #348]	; (800305c <Si468x_dab_get_digital_service_data+0x2d8>)
 8002efe:	f000 fd33 	bl	8003968 <send_debug_msg>
					send_debug_msg("Body Size: ", CRLF_NO_SEND);
 8002f02:	2100      	movs	r1, #0
 8002f04:	4856      	ldr	r0, [pc, #344]	; (8003060 <Si468x_dab_get_digital_service_data+0x2dc>)
 8002f06:	f000 fd2f 	bl	8003968 <send_debug_msg>
					send_debug_msg(itoa(body_size, itoa_buffer, 10), CRLF_SEND);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	4952      	ldr	r1, [pc, #328]	; (8003058 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f00a fa2b 	bl	800d36c <itoa>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fd24 	bl	8003968 <send_debug_msg>
					send_debug_msg("Header Size: ", CRLF_NO_SEND);
 8002f20:	2100      	movs	r1, #0
 8002f22:	4850      	ldr	r0, [pc, #320]	; (8003064 <Si468x_dab_get_digital_service_data+0x2e0>)
 8002f24:	f000 fd20 	bl	8003968 <send_debug_msg>
					send_debug_msg(itoa(header_size, itoa_buffer, 10), CRLF_SEND);
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	220a      	movs	r2, #10
 8002f2c:	494a      	ldr	r1, [pc, #296]	; (8003058 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f00a fa1c 	bl	800d36c <itoa>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fd15 	bl	8003968 <send_debug_msg>
					send_debug_msg("Content Type: ", CRLF_NO_SEND);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4849      	ldr	r0, [pc, #292]	; (8003068 <Si468x_dab_get_digital_service_data+0x2e4>)
 8002f42:	f000 fd11 	bl	8003968 <send_debug_msg>
					send_debug_msg(itoa(content_type, itoa_buffer, 10), CRLF_SEND);
 8002f46:	797b      	ldrb	r3, [r7, #5]
 8002f48:	220a      	movs	r2, #10
 8002f4a:	4943      	ldr	r1, [pc, #268]	; (8003058 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f00a fa0d 	bl	800d36c <itoa>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fd06 	bl	8003968 <send_debug_msg>
					send_debug_msg("Content SubType: ", CRLF_NO_SEND);
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4843      	ldr	r0, [pc, #268]	; (800306c <Si468x_dab_get_digital_service_data+0x2e8>)
 8002f60:	f000 fd02 	bl	8003968 <send_debug_msg>
					send_debug_msg(itoa(content_sub_type, itoa_buffer, 10), CRLF_SEND);
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	220a      	movs	r2, #10
 8002f68:	493b      	ldr	r1, [pc, #236]	; (8003058 <Si468x_dab_get_digital_service_data+0x2d4>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f00a f9fe 	bl	800d36c <itoa>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fcf7 	bl	8003968 <send_debug_msg>

				}

				if(dab_service_data_reply_header.data_src == 2)
 8002f7a:	4b33      	ldr	r3, [pc, #204]	; (8003048 <Si468x_dab_get_digital_service_data+0x2c4>)
 8002f7c:	78db      	ldrb	r3, [r3, #3]
 8002f7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d152      	bne.n	800302e <Si468x_dab_get_digital_service_data+0x2aa>
				{
					send_debug_msg("Dynamic Label Data: ", CRLF_SEND);
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4839      	ldr	r0, [pc, #228]	; (8003070 <Si468x_dab_get_digital_service_data+0x2ec>)
 8002f8c:	f000 fcec 	bl	8003968 <send_debug_msg>

					for(uint8_t i = 0; i < 128; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	747b      	strb	r3, [r7, #17]
 8002f94:	e006      	b.n	8002fa4 <Si468x_dab_get_digital_service_data+0x220>
					{
						dls_label[i] = 0;
 8002f96:	7c7b      	ldrb	r3, [r7, #17]
 8002f98:	4a36      	ldr	r2, [pc, #216]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < 128; i++)
 8002f9e:	7c7b      	ldrb	r3, [r7, #17]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	747b      	strb	r3, [r7, #17]
 8002fa4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	daf4      	bge.n	8002f96 <Si468x_dab_get_digital_service_data+0x212>
					}

					uint8_t label_pos = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e031      	b.n	800301a <Si468x_dab_get_digital_service_data+0x296>
					{
						dls_label[label_pos] = dab_spi_rx_buffer[24 + 2 + i];
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	f103 021a 	add.w	r2, r3, #26
 8002fbc:	7c3b      	ldrb	r3, [r7, #16]
 8002fbe:	491e      	ldr	r1, [pc, #120]	; (8003038 <Si468x_dab_get_digital_service_data+0x2b4>)
 8002fc0:	5c89      	ldrb	r1, [r1, r2]
 8002fc2:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fc4:	54d1      	strb	r1, [r2, r3]
//						send_debug_msg(itoa(dab_spi_rx_buffer[24 + 2 + i], itoa_buffer, 10), CRLF_SEND);

						//polish symbols convert
						//ó
						if(dls_label[label_pos] == 195)
 8002fc6:	7c3b      	ldrb	r3, [r7, #16]
 8002fc8:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	2bc3      	cmp	r3, #195	; 0xc3
 8002fce:	d106      	bne.n	8002fde <Si468x_dab_get_digital_service_data+0x25a>
						{
							dls_label[label_pos] = 111;//lub 243
 8002fd0:	7c3b      	ldrb	r3, [r7, #16]
 8002fd2:	4a28      	ldr	r2, [pc, #160]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fd4:	216f      	movs	r1, #111	; 0x6f
 8002fd6:	54d1      	strb	r1, [r2, r3]
							i++;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 234)
						{

						}
						//ć to c
						if(dls_label[label_pos] == 196)
 8002fde:	7c3b      	ldrb	r3, [r7, #16]
 8002fe0:	4a24      	ldr	r2, [pc, #144]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	2bc4      	cmp	r3, #196	; 0xc4
 8002fe6:	d106      	bne.n	8002ff6 <Si468x_dab_get_digital_service_data+0x272>
						{
							dls_label[label_pos] = 99; //lub 230
 8002fe8:	7c3b      	ldrb	r3, [r7, #16]
 8002fea:	4a22      	ldr	r2, [pc, #136]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002fec:	2163      	movs	r1, #99	; 0x63
 8002fee:	54d1      	strb	r1, [r2, r3]
							i++;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 182)
						{

						}
						//ł to l
						if(dls_label[label_pos] == 197)
 8002ff6:	7c3b      	ldrb	r3, [r7, #16]
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	2bc5      	cmp	r3, #197	; 0xc5
 8002ffe:	d106      	bne.n	800300e <Si468x_dab_get_digital_service_data+0x28a>
						{
							dls_label[label_pos] = 108; //lub 179
 8003000:	7c3b      	ldrb	r3, [r7, #16]
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 8003004:	216c      	movs	r1, #108	; 0x6c
 8003006:	54d1      	strb	r1, [r2, r3]
							i++;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	3301      	adds	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
						if(dls_label[label_pos] == 243)
						{

						}

						label_pos++;
 800300e:	7c3b      	ldrb	r3, [r7, #16]
 8003010:	3301      	adds	r3, #1
 8003012:	743b      	strb	r3, [r7, #16]
					for(uint8_t i = 0; i < dab_service_data_reply_header.byte_count; i++)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	3301      	adds	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <Si468x_dab_get_digital_service_data+0x2c4>)
 8003020:	89db      	ldrh	r3, [r3, #14]
 8003022:	429a      	cmp	r2, r3
 8003024:	d3c7      	bcc.n	8002fb6 <Si468x_dab_get_digital_service_data+0x232>
					}
					send_debug_msg(dls_label, CRLF_SEND);
 8003026:	2101      	movs	r1, #1
 8003028:	4812      	ldr	r0, [pc, #72]	; (8003074 <Si468x_dab_get_digital_service_data+0x2f0>)
 800302a:	f000 fc9d 	bl	8003968 <send_debug_msg>
				}
			}
		}
	}
}
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bdb0      	pop	{r4, r5, r7, pc}
 8003036:	bf00      	nop
 8003038:	200011a8 	.word	0x200011a8
 800303c:	20003510 	.word	0x20003510
 8003040:	200035fc 	.word	0x200035fc
 8003044:	200001a8 	.word	0x200001a8
 8003048:	20003620 	.word	0x20003620
 800304c:	0800df70 	.word	0x0800df70
 8003050:	0800dfa4 	.word	0x0800dfa4
 8003054:	20004c58 	.word	0x20004c58
 8003058:	200034d0 	.word	0x200034d0
 800305c:	0800dfb8 	.word	0x0800dfb8
 8003060:	0800dfbc 	.word	0x0800dfbc
 8003064:	0800dfc8 	.word	0x0800dfc8
 8003068:	0800dfd8 	.word	0x0800dfd8
 800306c:	0800dfe8 	.word	0x0800dfe8
 8003070:	0800dffc 	.word	0x0800dffc
 8003074:	20004bd4 	.word	0x20004bd4

08003078 <Si468x_dab_get_time>:

		DisplayDabStatus(dab_digrad_status);
}

void Si468x_dab_get_time()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
//	{
//		Si468x_dab_get_event_status();
//		HAL_Delay(10);
//	}while(!dab_events.srv_list || dab_events.srv_list_int);

	if(dab_digrad_status.acq && dab_digrad_status.valid && dab_digrad_status.fic_quality > 90)
 800307c:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <Si468x_dab_get_time+0x78>)
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d02f      	beq.n	80030ea <Si468x_dab_get_time+0x72>
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <Si468x_dab_get_time+0x78>)
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d028      	beq.n	80030ea <Si468x_dab_get_time+0x72>
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <Si468x_dab_get_time+0x78>)
 800309a:	791b      	ldrb	r3, [r3, #4]
 800309c:	2b5a      	cmp	r3, #90	; 0x5a
 800309e:	d924      	bls.n	80030ea <Si468x_dab_get_time+0x72>
	{
		dab_spi_tx_buffer[0] = SI468X_CMD_DAB_GET_TIME;
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <Si468x_dab_get_time+0x7c>)
 80030a2:	22bc      	movs	r2, #188	; 0xbc
 80030a4:	701a      	strb	r2, [r3, #0]
		dab_spi_tx_buffer[1] = 0x00; 	//0 - local time, 1 - UTC
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <Si468x_dab_get_time+0x7c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	705a      	strb	r2, [r3, #1]

		status = Si468x_write_command(2, dab_spi_tx_buffer);
 80030ac:	4911      	ldr	r1, [pc, #68]	; (80030f4 <Si468x_dab_get_time+0x7c>)
 80030ae:	2002      	movs	r0, #2
 80030b0:	f7fe faee 	bl	8001690 <Si468x_write_command>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <Si468x_dab_get_time+0x80>)
 80030ba:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80030bc:	2001      	movs	r0, #1
 80030be:	f004 f95f 	bl	8007380 <HAL_Delay>
		status = Si468x_read_reply(11, dab_spi_rx_buffer);
 80030c2:	490e      	ldr	r1, [pc, #56]	; (80030fc <Si468x_dab_get_time+0x84>)
 80030c4:	200b      	movs	r0, #11
 80030c6:	f7fe fb05 	bl	80016d4 <Si468x_read_reply>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <Si468x_dab_get_time+0x80>)
 80030d0:	701a      	strb	r2, [r3, #0]

		memcpy((uint8_t*)&time, (uint8_t*)&dab_spi_rx_buffer[4], sizeof(time));
 80030d2:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <Si468x_dab_get_time+0x88>)
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <Si468x_dab_get_time+0x84>)
 80030d6:	3304      	adds	r3, #4
 80030d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030dc:	e882 0003 	stmia.w	r2, {r0, r1}

		Display_time(time);
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <Si468x_dab_get_time+0x88>)
 80030e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030e6:	f002 fa15 	bl	8005514 <Display_time>
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.month, itoa_buffer, 10), CRLF_NO_SEND);
//		send_debug_msg(".", CRLF_NO_SEND);
//		send_debug_msg(itoa(time.year, itoa_buffer, 10), CRLF_SEND);
	}
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200035d4 	.word	0x200035d4
 80030f4:	200001a8 	.word	0x200001a8
 80030f8:	20003510 	.word	0x20003510
 80030fc:	200011a8 	.word	0x200011a8
 8003100:	20003608 	.word	0x20003608

08003104 <Si468x_set_audio_volume>:

void Si468x_set_audio_volume(uint8_t _volume)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
	Si468x_set_property(SI468x_PROP_AUDIO_ANALOG_VOLUME, _volume);
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	b29b      	uxth	r3, r3
 8003112:	4619      	mov	r1, r3
 8003114:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003118:	f7fe fbea 	bl	80018f0 <Si468x_set_property>
	dab_management.audio_volume = _volume;
 800311c:	79fa      	ldrb	r2, [r7, #7]
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <Si468x_set_audio_volume+0x5c>)
 8003120:	739a      	strb	r2, [r3, #14]
	send_debug_msg("Volume: ", CRLF_NO_SEND);
 8003122:	2100      	movs	r1, #0
 8003124:	480f      	ldr	r0, [pc, #60]	; (8003164 <Si468x_set_audio_volume+0x60>)
 8003126:	f000 fc1f 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_management.audio_volume, itoa_buffer, 10), CRLF_NO_SEND);
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <Si468x_set_audio_volume+0x5c>)
 800312c:	7b9b      	ldrb	r3, [r3, #14]
 800312e:	220a      	movs	r2, #10
 8003130:	490d      	ldr	r1, [pc, #52]	; (8003168 <Si468x_set_audio_volume+0x64>)
 8003132:	4618      	mov	r0, r3
 8003134:	f00a f91a 	bl	800d36c <itoa>
 8003138:	4603      	mov	r3, r0
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fc13 	bl	8003968 <send_debug_msg>
	send_debug_msg("/63", CRLF_SEND);
 8003142:	2101      	movs	r1, #1
 8003144:	4809      	ldr	r0, [pc, #36]	; (800316c <Si468x_set_audio_volume+0x68>)
 8003146:	f000 fc0f 	bl	8003968 <send_debug_msg>
	eeprom_write(LAST_VOLUME_ADDR, &_volume, sizeof(_volume));
 800314a:	1dfb      	adds	r3, r7, #7
 800314c:	2201      	movs	r2, #1
 800314e:	4619      	mov	r1, r3
 8003150:	200b      	movs	r0, #11
 8003152:	f002 fab7 	bl	80056c4 <eeprom_write>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20004bc4 	.word	0x20004bc4
 8003164:	0800e050 	.word	0x0800e050
 8003168:	200034d0 	.word	0x200034d0
 800316c:	0800e05c 	.word	0x0800e05c

08003170 <play_station>:

void play_station(uint8_t station_id)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dab_management.actual_station = station_id;
 800317c:	4a40      	ldr	r2, [pc, #256]	; (8003280 <play_station+0x110>)
 800317e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003182:	70d3      	strb	r3, [r2, #3]
	dab_management.last_station_index = dab_management.actual_station;
 8003184:	4b3e      	ldr	r3, [pc, #248]	; (8003280 <play_station+0x110>)
 8003186:	78da      	ldrb	r2, [r3, #3]
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <play_station+0x110>)
 800318a:	711a      	strb	r2, [r3, #4]

	eeprom_write(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 800318c:	2201      	movs	r2, #1
 800318e:	493d      	ldr	r1, [pc, #244]	; (8003284 <play_station+0x114>)
 8003190:	f240 1007 	movw	r0, #263	; 0x107
 8003194:	f002 fa96 	bl	80056c4 <eeprom_write>

	send_debug_msg("---------------------------------", CRLF_SEND);
 8003198:	2101      	movs	r1, #1
 800319a:	483b      	ldr	r0, [pc, #236]	; (8003288 <play_station+0x118>)
 800319c:	f000 fbe4 	bl	8003968 <send_debug_msg>
	send_debug_msg("Playing Station ", CRLF_NO_SEND);
 80031a0:	2100      	movs	r1, #0
 80031a2:	483a      	ldr	r0, [pc, #232]	; (800328c <play_station+0x11c>)
 80031a4:	f000 fbe0 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_management.actual_station + 1, itoa_buffer, 10), CRLF_SEND);
 80031a8:	4b35      	ldr	r3, [pc, #212]	; (8003280 <play_station+0x110>)
 80031aa:	78db      	ldrb	r3, [r3, #3]
 80031ac:	3301      	adds	r3, #1
 80031ae:	220a      	movs	r2, #10
 80031b0:	4937      	ldr	r1, [pc, #220]	; (8003290 <play_station+0x120>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f00a f8da 	bl	800d36c <itoa>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fbd3 	bl	8003968 <send_debug_msg>
	send_debug_msg("Name: ", CRLF_NO_SEND);
 80031c2:	2100      	movs	r1, #0
 80031c4:	4833      	ldr	r0, [pc, #204]	; (8003294 <play_station+0x124>)
 80031c6:	f000 fbcf 	bl	8003968 <send_debug_msg>
	send_debug_msg(services_list[dab_management.actual_station].name, CRLF_SEND);
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <play_station+0x110>)
 80031cc:	78db      	ldrb	r3, [r3, #3]
 80031ce:	461a      	mov	r2, r3
 80031d0:	2334      	movs	r3, #52	; 0x34
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	4a30      	ldr	r2, [pc, #192]	; (8003298 <play_station+0x128>)
 80031d8:	4413      	add	r3, r2
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fbc3 	bl	8003968 <send_debug_msg>
	Si468x_dab_tune_freq(services_list[dab_management.actual_station].freq_id, 0); //CH_11B - PR Kraków, CH_9C - DABCOM Tarnów, CH_10D - PR Kielce,
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <play_station+0x110>)
 80031e4:	78db      	ldrb	r3, [r3, #3]
 80031e6:	4619      	mov	r1, r3
 80031e8:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <play_station+0x128>)
 80031ea:	2334      	movs	r3, #52	; 0x34
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3328      	adds	r3, #40	; 0x28
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fc65 	bl	8001ac8 <Si468x_dab_tune_freq>
	Si468x_dab_get_component_info(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <play_station+0x110>)
 8003200:	78db      	ldrb	r3, [r3, #3]
 8003202:	4619      	mov	r1, r3
 8003204:	4a24      	ldr	r2, [pc, #144]	; (8003298 <play_station+0x128>)
 8003206:	2334      	movs	r3, #52	; 0x34
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3320      	adds	r3, #32
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <play_station+0x110>)
 8003214:	78db      	ldrb	r3, [r3, #3]
 8003216:	4618      	mov	r0, r3
 8003218:	491f      	ldr	r1, [pc, #124]	; (8003298 <play_station+0x128>)
 800321a:	2334      	movs	r3, #52	; 0x34
 800321c:	fb00 f303 	mul.w	r3, r0, r3
 8003220:	440b      	add	r3, r1
 8003222:	332a      	adds	r3, #42	; 0x2a
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f7ff fcff 	bl	8002c2c <Si468x_dab_get_component_info>
	Si468x_dab_start_digital_service(services_list[dab_management.actual_station].service_id, services_list[dab_management.actual_station].components[0].subchannel_id);
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <play_station+0x110>)
 8003230:	78db      	ldrb	r3, [r3, #3]
 8003232:	4619      	mov	r1, r3
 8003234:	4a18      	ldr	r2, [pc, #96]	; (8003298 <play_station+0x128>)
 8003236:	2334      	movs	r3, #52	; 0x34
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3320      	adds	r3, #32
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <play_station+0x110>)
 8003244:	78db      	ldrb	r3, [r3, #3]
 8003246:	4618      	mov	r0, r3
 8003248:	4913      	ldr	r1, [pc, #76]	; (8003298 <play_station+0x128>)
 800324a:	2334      	movs	r3, #52	; 0x34
 800324c:	fb00 f303 	mul.w	r3, r0, r3
 8003250:	440b      	add	r3, r1
 8003252:	332a      	adds	r3, #42	; 0x2a
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7fe fff9 	bl	8002250 <Si468x_dab_start_digital_service>
	Si468x_dab_digrad_status();
 800325e:	463b      	mov	r3, r7
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fce9 	bl	8001c38 <Si468x_dab_digrad_status>
	Si468x_dab_get_audio_info();
 8003266:	463b      	mov	r3, r7
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fbf7 	bl	8002a5c <Si468x_dab_get_audio_info>

	Si468x_set_property(SI468x_PROP_DIGITAL_SERVICE_INT_SOURCE, 0x03);	//enable both service interrupts
 800326e:	2103      	movs	r1, #3
 8003270:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8003274:	f7fe fb3c 	bl	80018f0 <Si468x_set_property>
}
 8003278:	bf00      	nop
 800327a:	3730      	adds	r7, #48	; 0x30
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20004bc4 	.word	0x20004bc4
 8003284:	20004bc8 	.word	0x20004bc8
 8003288:	0800e060 	.word	0x0800e060
 800328c:	0800e084 	.word	0x0800e084
 8003290:	200034d0 	.word	0x200034d0
 8003294:	0800e098 	.word	0x0800e098
 8003298:	20003774 	.word	0x20003774

0800329c <restore_from_eeprom>:

void restore_from_eeprom()
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
	send_debug_msg("--------------Restore from EEPROM memory-------------------", CRLF_SEND);
 80032a2:	2101      	movs	r1, #1
 80032a4:	4895      	ldr	r0, [pc, #596]	; (80034fc <restore_from_eeprom+0x260>)
 80032a6:	f000 fb5f 	bl	8003968 <send_debug_msg>

	//restore frequency table
	eeprom_read(FREQ_TABLE_SIZE_ADDR, &dab_management.freq_cnt, sizeof(dab_management.freq_cnt));
 80032aa:	2201      	movs	r2, #1
 80032ac:	4994      	ldr	r1, [pc, #592]	; (8003500 <restore_from_eeprom+0x264>)
 80032ae:	203f      	movs	r0, #63	; 0x3f
 80032b0:	f002 f9ea 	bl	8005688 <eeprom_read>
	for (uint8_t i = 0; i < 3; i++)
 80032b4:	2300      	movs	r3, #0
 80032b6:	75fb      	strb	r3, [r7, #23]
 80032b8:	e012      	b.n	80032e0 <restore_from_eeprom+0x44>
	{
		eeprom_read(FREQ_TABLE_START_ADDR + PAGE_SIZE * i, &freq_table[i * PAGE_SIZE / 4], PAGE_SIZE);
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	3301      	adds	r3, #1
 80032be:	019b      	lsls	r3, r3, #6
 80032c0:	4618      	mov	r0, r3
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4a8e      	ldr	r2, [pc, #568]	; (8003504 <restore_from_eeprom+0x268>)
 80032ca:	4413      	add	r3, r2
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	4619      	mov	r1, r3
 80032d0:	f002 f9da 	bl	8005688 <eeprom_read>
		HAL_Delay(5);
 80032d4:	2005      	movs	r0, #5
 80032d6:	f004 f853 	bl	8007380 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++)
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	3301      	adds	r3, #1
 80032de:	75fb      	strb	r3, [r7, #23]
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d9e9      	bls.n	80032ba <restore_from_eeprom+0x1e>
	}
	//display freq table - check if everything is ok
	send_debug_msg("Found ", CRLF_NO_SEND);
 80032e6:	2100      	movs	r1, #0
 80032e8:	4887      	ldr	r0, [pc, #540]	; (8003508 <restore_from_eeprom+0x26c>)
 80032ea:	f000 fb3d 	bl	8003968 <send_debug_msg>
	send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 80032ee:	4b87      	ldr	r3, [pc, #540]	; (800350c <restore_from_eeprom+0x270>)
 80032f0:	7b5b      	ldrb	r3, [r3, #13]
 80032f2:	220a      	movs	r2, #10
 80032f4:	4986      	ldr	r1, [pc, #536]	; (8003510 <restore_from_eeprom+0x274>)
 80032f6:	4618      	mov	r0, r3
 80032f8:	f00a f838 	bl	800d36c <itoa>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fb31 	bl	8003968 <send_debug_msg>
	send_debug_msg(" frequencies in list.", CRLF_SEND);
 8003306:	2101      	movs	r1, #1
 8003308:	4882      	ldr	r0, [pc, #520]	; (8003514 <restore_from_eeprom+0x278>)
 800330a:	f000 fb2d 	bl	8003968 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	e022      	b.n	800335a <restore_from_eeprom+0xbe>
	{
		send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 8003314:	220a      	movs	r2, #10
 8003316:	497e      	ldr	r1, [pc, #504]	; (8003510 <restore_from_eeprom+0x274>)
 8003318:	6938      	ldr	r0, [r7, #16]
 800331a:	f00a f827 	bl	800d36c <itoa>
 800331e:	4603      	mov	r3, r0
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fb20 	bl	8003968 <send_debug_msg>
		send_debug_msg(": ", CRLF_NO_SEND);
 8003328:	2100      	movs	r1, #0
 800332a:	487b      	ldr	r0, [pc, #492]	; (8003518 <restore_from_eeprom+0x27c>)
 800332c:	f000 fb1c 	bl	8003968 <send_debug_msg>
		send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003330:	4a74      	ldr	r2, [pc, #464]	; (8003504 <restore_from_eeprom+0x268>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003338:	220a      	movs	r2, #10
 800333a:	4975      	ldr	r1, [pc, #468]	; (8003510 <restore_from_eeprom+0x274>)
 800333c:	4618      	mov	r0, r3
 800333e:	f00a f815 	bl	800d36c <itoa>
 8003342:	4603      	mov	r3, r0
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fb0e 	bl	8003968 <send_debug_msg>
		send_debug_msg(" kHz", CRLF_SEND);
 800334c:	2101      	movs	r1, #1
 800334e:	4873      	ldr	r0, [pc, #460]	; (800351c <restore_from_eeprom+0x280>)
 8003350:	f000 fb0a 	bl	8003968 <send_debug_msg>
	for(int i = 0; i < dab_management.freq_cnt; i++)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	3301      	adds	r3, #1
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b6c      	ldr	r3, [pc, #432]	; (800350c <restore_from_eeprom+0x270>)
 800335c:	7b5b      	ldrb	r3, [r3, #13]
 800335e:	461a      	mov	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4293      	cmp	r3, r2
 8003364:	dbd6      	blt.n	8003314 <restore_from_eeprom+0x78>
	}

	//restore scanning data
	eeprom_read(TOTAL_ENSEMBLES_ADDR, &dab_management.total_ensembles, sizeof(dab_management.total_ensembles));
 8003366:	2201      	movs	r2, #1
 8003368:	496d      	ldr	r1, [pc, #436]	; (8003520 <restore_from_eeprom+0x284>)
 800336a:	f240 1005 	movw	r0, #261	; 0x105
 800336e:	f002 f98b 	bl	8005688 <eeprom_read>
	eeprom_read(TOTAL_SERVICES_ADDR, &dab_management.total_services, sizeof(dab_management.total_services));
 8003372:	2201      	movs	r2, #1
 8003374:	4965      	ldr	r1, [pc, #404]	; (800350c <restore_from_eeprom+0x270>)
 8003376:	f44f 7083 	mov.w	r0, #262	; 0x106
 800337a:	f002 f985 	bl	8005688 <eeprom_read>

	if(dab_management.total_services != 0xFF && dab_management.total_ensembles != 0xFF)
 800337e:	4b63      	ldr	r3, [pc, #396]	; (800350c <restore_from_eeprom+0x270>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2bff      	cmp	r3, #255	; 0xff
 8003384:	f000 828b 	beq.w	800389e <restore_from_eeprom+0x602>
 8003388:	4b60      	ldr	r3, [pc, #384]	; (800350c <restore_from_eeprom+0x270>)
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	2bff      	cmp	r3, #255	; 0xff
 800338e:	f000 8286 	beq.w	800389e <restore_from_eeprom+0x602>
	{
		eeprom_read(LAST_FREQUENCY_ADDR, &dab_management.actual_freq, sizeof(dab_management.actual_freq));
 8003392:	2204      	movs	r2, #4
 8003394:	4963      	ldr	r1, [pc, #396]	; (8003524 <restore_from_eeprom+0x288>)
 8003396:	f44f 7080 	mov.w	r0, #256	; 0x100
 800339a:	f002 f975 	bl	8005688 <eeprom_read>
		eeprom_read(LAST_FREQ_ID_ADDR, &dab_management.actual_freq_id, sizeof(dab_management.actual_freq_id));
 800339e:	2201      	movs	r2, #1
 80033a0:	4961      	ldr	r1, [pc, #388]	; (8003528 <restore_from_eeprom+0x28c>)
 80033a2:	f44f 7082 	mov.w	r0, #260	; 0x104
 80033a6:	f002 f96f 	bl	8005688 <eeprom_read>

		eeprom_read(LAST_STATION_INDEX_ADDR, &dab_management.last_station_index, sizeof(dab_management.last_station_index));
 80033aa:	2201      	movs	r2, #1
 80033ac:	495f      	ldr	r1, [pc, #380]	; (800352c <restore_from_eeprom+0x290>)
 80033ae:	f240 1007 	movw	r0, #263	; 0x107
 80033b2:	f002 f969 	bl	8005688 <eeprom_read>
		if(dab_management.last_station_index == 0xFF)
 80033b6:	4b55      	ldr	r3, [pc, #340]	; (800350c <restore_from_eeprom+0x270>)
 80033b8:	791b      	ldrb	r3, [r3, #4]
 80033ba:	2bff      	cmp	r3, #255	; 0xff
 80033bc:	d102      	bne.n	80033c4 <restore_from_eeprom+0x128>
		{
			dab_management.last_station_index = 0;
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <restore_from_eeprom+0x270>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	711a      	strb	r2, [r3, #4]
		}
		dab_management.actual_station = dab_management.last_station_index;
 80033c4:	4b51      	ldr	r3, [pc, #324]	; (800350c <restore_from_eeprom+0x270>)
 80033c6:	791a      	ldrb	r2, [r3, #4]
 80033c8:	4b50      	ldr	r3, [pc, #320]	; (800350c <restore_from_eeprom+0x270>)
 80033ca:	70da      	strb	r2, [r3, #3]

		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e00e      	b.n	80033f0 <restore_from_eeprom+0x154>
		{
			eeprom_read(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &ensembles_list[i], sizeof(dab_ensemble_t));
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	3305      	adds	r3, #5
 80033d6:	019b      	lsls	r3, r3, #6
 80033d8:	4618      	mov	r0, r3
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	015b      	lsls	r3, r3, #5
 80033de:	4a54      	ldr	r2, [pc, #336]	; (8003530 <restore_from_eeprom+0x294>)
 80033e0:	4413      	add	r3, r2
 80033e2:	2220      	movs	r2, #32
 80033e4:	4619      	mov	r1, r3
 80033e6:	f002 f94f 	bl	8005688 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	3301      	adds	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	4b46      	ldr	r3, [pc, #280]	; (800350c <restore_from_eeprom+0x270>)
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3eb      	bcc.n	80033d2 <restore_from_eeprom+0x136>
		}

		for(uint8_t i = 0; i < dab_management.total_services; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	73bb      	strb	r3, [r7, #14]
 80033fe:	e010      	b.n	8003422 <restore_from_eeprom+0x186>
		{
			eeprom_read(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &services_list[i], sizeof(dab_service_t));
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	330f      	adds	r3, #15
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	4618      	mov	r0, r3
 8003408:	7bbb      	ldrb	r3, [r7, #14]
 800340a:	2234      	movs	r2, #52	; 0x34
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	4a48      	ldr	r2, [pc, #288]	; (8003534 <restore_from_eeprom+0x298>)
 8003412:	4413      	add	r3, r2
 8003414:	2234      	movs	r2, #52	; 0x34
 8003416:	4619      	mov	r1, r3
 8003418:	f002 f936 	bl	8005688 <eeprom_read>
		for(uint8_t i = 0; i < dab_management.total_services; i++)
 800341c:	7bbb      	ldrb	r3, [r7, #14]
 800341e:	3301      	adds	r3, #1
 8003420:	73bb      	strb	r3, [r7, #14]
 8003422:	4b3a      	ldr	r3, [pc, #232]	; (800350c <restore_from_eeprom+0x270>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	7bba      	ldrb	r2, [r7, #14]
 8003428:	429a      	cmp	r2, r3
 800342a:	d3e9      	bcc.n	8003400 <restore_from_eeprom+0x164>
		}

		//check if everything is ok

		//display freq table
		send_debug_msg("Found ", CRLF_NO_SEND);
 800342c:	2100      	movs	r1, #0
 800342e:	4836      	ldr	r0, [pc, #216]	; (8003508 <restore_from_eeprom+0x26c>)
 8003430:	f000 fa9a 	bl	8003968 <send_debug_msg>
		send_debug_msg(itoa(dab_management.freq_cnt, itoa_buffer, 10), CRLF_NO_SEND);
 8003434:	4b35      	ldr	r3, [pc, #212]	; (800350c <restore_from_eeprom+0x270>)
 8003436:	7b5b      	ldrb	r3, [r3, #13]
 8003438:	220a      	movs	r2, #10
 800343a:	4935      	ldr	r1, [pc, #212]	; (8003510 <restore_from_eeprom+0x274>)
 800343c:	4618      	mov	r0, r3
 800343e:	f009 ff95 	bl	800d36c <itoa>
 8003442:	4603      	mov	r3, r0
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa8e 	bl	8003968 <send_debug_msg>
		send_debug_msg(" frequencies in list.", CRLF_SEND);
 800344c:	2101      	movs	r1, #1
 800344e:	4831      	ldr	r0, [pc, #196]	; (8003514 <restore_from_eeprom+0x278>)
 8003450:	f000 fa8a 	bl	8003968 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	e022      	b.n	80034a0 <restore_from_eeprom+0x204>
		{
			send_debug_msg(itoa(i, itoa_buffer, 10), CRLF_NO_SEND);
 800345a:	220a      	movs	r2, #10
 800345c:	492c      	ldr	r1, [pc, #176]	; (8003510 <restore_from_eeprom+0x274>)
 800345e:	68b8      	ldr	r0, [r7, #8]
 8003460:	f009 ff84 	bl	800d36c <itoa>
 8003464:	4603      	mov	r3, r0
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fa7d 	bl	8003968 <send_debug_msg>
			send_debug_msg(": ", CRLF_NO_SEND);
 800346e:	2100      	movs	r1, #0
 8003470:	4829      	ldr	r0, [pc, #164]	; (8003518 <restore_from_eeprom+0x27c>)
 8003472:	f000 fa79 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(freq_table[i], itoa_buffer, 10), CRLF_NO_SEND);
 8003476:	4a23      	ldr	r2, [pc, #140]	; (8003504 <restore_from_eeprom+0x268>)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347e:	220a      	movs	r2, #10
 8003480:	4923      	ldr	r1, [pc, #140]	; (8003510 <restore_from_eeprom+0x274>)
 8003482:	4618      	mov	r0, r3
 8003484:	f009 ff72 	bl	800d36c <itoa>
 8003488:	4603      	mov	r3, r0
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fa6b 	bl	8003968 <send_debug_msg>
			send_debug_msg(" kHz", CRLF_SEND);
 8003492:	2101      	movs	r1, #1
 8003494:	4821      	ldr	r0, [pc, #132]	; (800351c <restore_from_eeprom+0x280>)
 8003496:	f000 fa67 	bl	8003968 <send_debug_msg>
		for(int i = 0; i < dab_management.freq_cnt; i++)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3301      	adds	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <restore_from_eeprom+0x270>)
 80034a2:	7b5b      	ldrb	r3, [r3, #13]
 80034a4:	461a      	mov	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4293      	cmp	r3, r2
 80034aa:	dbd6      	blt.n	800345a <restore_from_eeprom+0x1be>
		}


		//display info about  ensembles
		send_debug_msg("Ensembles found: ", CRLF_NO_SEND);
 80034ac:	2100      	movs	r1, #0
 80034ae:	4822      	ldr	r0, [pc, #136]	; (8003538 <restore_from_eeprom+0x29c>)
 80034b0:	f000 fa5a 	bl	8003968 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_ensembles, itoa_buffer, 10), CRLF_SEND);
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <restore_from_eeprom+0x270>)
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	220a      	movs	r2, #10
 80034ba:	4915      	ldr	r1, [pc, #84]	; (8003510 <restore_from_eeprom+0x274>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f009 ff55 	bl	800d36c <itoa>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fa4e 	bl	8003968 <send_debug_msg>

		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 80034cc:	2101      	movs	r1, #1
 80034ce:	481b      	ldr	r0, [pc, #108]	; (800353c <restore_from_eeprom+0x2a0>)
 80034d0:	f000 fa4a 	bl	8003968 <send_debug_msg>
		send_debug_msg("| Number", CRLF_NO_SEND);
 80034d4:	2100      	movs	r1, #0
 80034d6:	481a      	ldr	r0, [pc, #104]	; (8003540 <restore_from_eeprom+0x2a4>)
 80034d8:	f000 fa46 	bl	8003968 <send_debug_msg>
		send_debug_msg(" | Label          ", CRLF_NO_SEND);
 80034dc:	2100      	movs	r1, #0
 80034de:	4819      	ldr	r0, [pc, #100]	; (8003544 <restore_from_eeprom+0x2a8>)
 80034e0:	f000 fa42 	bl	8003968 <send_debug_msg>
		send_debug_msg("| Frequency ", CRLF_NO_SEND);
 80034e4:	2100      	movs	r1, #0
 80034e6:	4818      	ldr	r0, [pc, #96]	; (8003548 <restore_from_eeprom+0x2ac>)
 80034e8:	f000 fa3e 	bl	8003968 <send_debug_msg>
		send_debug_msg(" | Channel |", CRLF_SEND);
 80034ec:	2101      	movs	r1, #1
 80034ee:	4817      	ldr	r0, [pc, #92]	; (800354c <restore_from_eeprom+0x2b0>)
 80034f0:	f000 fa3a 	bl	8003968 <send_debug_msg>

		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	71fb      	strb	r3, [r7, #7]
 80034f8:	e080      	b.n	80035fc <restore_from_eeprom+0x360>
 80034fa:	bf00      	nop
 80034fc:	0800e0a0 	.word	0x0800e0a0
 8003500:	20004bd1 	.word	0x20004bd1
 8003504:	20003514 	.word	0x20003514
 8003508:	0800d9e8 	.word	0x0800d9e8
 800350c:	20004bc4 	.word	0x20004bc4
 8003510:	200034d0 	.word	0x200034d0
 8003514:	0800d9f0 	.word	0x0800d9f0
 8003518:	0800da08 	.word	0x0800da08
 800351c:	0800da0c 	.word	0x0800da0c
 8003520:	20004bc5 	.word	0x20004bc5
 8003524:	20004bcc 	.word	0x20004bcc
 8003528:	20004bd0 	.word	0x20004bd0
 800352c:	20004bc8 	.word	0x20004bc8
 8003530:	20003634 	.word	0x20003634
 8003534:	20003774 	.word	0x20003774
 8003538:	0800dc78 	.word	0x0800dc78
 800353c:	0800dc8c 	.word	0x0800dc8c
 8003540:	0800dcc0 	.word	0x0800dcc0
 8003544:	0800dccc 	.word	0x0800dccc
 8003548:	0800dce0 	.word	0x0800dce0
 800354c:	0800dcf0 	.word	0x0800dcf0
		{
			send_debug_msg("| ", CRLF_NO_SEND);
 8003550:	2100      	movs	r1, #0
 8003552:	485f      	ldr	r0, [pc, #380]	; (80036d0 <restore_from_eeprom+0x434>)
 8003554:	f000 fa08 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(ensembles_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	3301      	adds	r3, #1
 800355c:	220a      	movs	r2, #10
 800355e:	495d      	ldr	r1, [pc, #372]	; (80036d4 <restore_from_eeprom+0x438>)
 8003560:	4618      	mov	r0, r3
 8003562:	f009 ff03 	bl	800d36c <itoa>
 8003566:	4603      	mov	r3, r0
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f9fc 	bl	8003968 <send_debug_msg>
			send_debug_msg("      | ", CRLF_NO_SEND);
 8003570:	2100      	movs	r1, #0
 8003572:	4859      	ldr	r0, [pc, #356]	; (80036d8 <restore_from_eeprom+0x43c>)
 8003574:	f000 f9f8 	bl	8003968 <send_debug_msg>

			send_debug_msg(ensembles_list[ensembles_index].label, CRLF_NO_SEND);
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	015b      	lsls	r3, r3, #5
 800357c:	4a57      	ldr	r2, [pc, #348]	; (80036dc <restore_from_eeprom+0x440>)
 800357e:	4413      	add	r3, r2
 8003580:	3302      	adds	r3, #2
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f9ef 	bl	8003968 <send_debug_msg>
			send_debug_msg("| ", CRLF_NO_SEND);
 800358a:	2100      	movs	r1, #0
 800358c:	4850      	ldr	r0, [pc, #320]	; (80036d0 <restore_from_eeprom+0x434>)
 800358e:	f000 f9eb 	bl	8003968 <send_debug_msg>

			send_debug_msg(itoa(ensembles_list[ensembles_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	4a51      	ldr	r2, [pc, #324]	; (80036dc <restore_from_eeprom+0x440>)
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	4413      	add	r3, r2
 800359a:	3318      	adds	r3, #24
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	220a      	movs	r2, #10
 80035a0:	494c      	ldr	r1, [pc, #304]	; (80036d4 <restore_from_eeprom+0x438>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f009 fee2 	bl	800d36c <itoa>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f9db 	bl	8003968 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 80035b2:	2100      	movs	r1, #0
 80035b4:	484a      	ldr	r0, [pc, #296]	; (80036e0 <restore_from_eeprom+0x444>)
 80035b6:	f000 f9d7 	bl	8003968 <send_debug_msg>

			send_debug_msg(dab_channels_names[ensembles_list[ensembles_index].freq_id], CRLF_NO_SEND);
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	4a47      	ldr	r2, [pc, #284]	; (80036dc <restore_from_eeprom+0x440>)
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	4413      	add	r3, r2
 80035c2:	331c      	adds	r3, #28
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <restore_from_eeprom+0x448>)
 80035ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f9c9 	bl	8003968 <send_debug_msg>
			if(ensembles_list[ensembles_index].freq_id < 20)
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	4a40      	ldr	r2, [pc, #256]	; (80036dc <restore_from_eeprom+0x440>)
 80035da:	015b      	lsls	r3, r3, #5
 80035dc:	4413      	add	r3, r2
 80035de:	331c      	adds	r3, #28
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b13      	cmp	r3, #19
 80035e4:	d803      	bhi.n	80035ee <restore_from_eeprom+0x352>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80035e6:	2100      	movs	r1, #0
 80035e8:	483f      	ldr	r0, [pc, #252]	; (80036e8 <restore_from_eeprom+0x44c>)
 80035ea:	f000 f9bd 	bl	8003968 <send_debug_msg>
			}
			send_debug_msg("     |", CRLF_SEND);
 80035ee:	2101      	movs	r1, #1
 80035f0:	483e      	ldr	r0, [pc, #248]	; (80036ec <restore_from_eeprom+0x450>)
 80035f2:	f000 f9b9 	bl	8003968 <send_debug_msg>
		for(uint8_t ensembles_index = 0; ensembles_index < dab_management.total_ensembles; ensembles_index++)
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	3301      	adds	r3, #1
 80035fa:	71fb      	strb	r3, [r7, #7]
 80035fc:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <restore_from_eeprom+0x454>)
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	79fa      	ldrb	r2, [r7, #7]
 8003602:	429a      	cmp	r2, r3
 8003604:	d3a4      	bcc.n	8003550 <restore_from_eeprom+0x2b4>
		}
		send_debug_msg("--------------------------------------------------", CRLF_SEND);
 8003606:	2101      	movs	r1, #1
 8003608:	483a      	ldr	r0, [pc, #232]	; (80036f4 <restore_from_eeprom+0x458>)
 800360a:	f000 f9ad 	bl	8003968 <send_debug_msg>

		//display info about services
		send_debug_msg("Services found: ", CRLF_NO_SEND);
 800360e:	2100      	movs	r1, #0
 8003610:	4839      	ldr	r0, [pc, #228]	; (80036f8 <restore_from_eeprom+0x45c>)
 8003612:	f000 f9a9 	bl	8003968 <send_debug_msg>
		send_debug_msg(itoa(dab_management.total_services, itoa_buffer, 10), CRLF_SEND);
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <restore_from_eeprom+0x454>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	220a      	movs	r2, #10
 800361c:	492d      	ldr	r1, [pc, #180]	; (80036d4 <restore_from_eeprom+0x438>)
 800361e:	4618      	mov	r0, r3
 8003620:	f009 fea4 	bl	800d36c <itoa>
 8003624:	4603      	mov	r3, r0
 8003626:	2101      	movs	r1, #1
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f99d 	bl	8003968 <send_debug_msg>

		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800362e:	2101      	movs	r1, #1
 8003630:	4832      	ldr	r0, [pc, #200]	; (80036fc <restore_from_eeprom+0x460>)
 8003632:	f000 f999 	bl	8003968 <send_debug_msg>
		send_debug_msg("| Number | Name             | Ensemble Name   | Frequency  | Channel | PTY | Service ID | Component ID |", CRLF_SEND);
 8003636:	2101      	movs	r1, #1
 8003638:	4831      	ldr	r0, [pc, #196]	; (8003700 <restore_from_eeprom+0x464>)
 800363a:	f000 f995 	bl	8003968 <send_debug_msg>

		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 800363e:	2300      	movs	r3, #0
 8003640:	71bb      	strb	r3, [r7, #6]
 8003642:	e104      	b.n	800384e <restore_from_eeprom+0x5b2>
		{
			//Number
			send_debug_msg("| ", CRLF_NO_SEND);
 8003644:	2100      	movs	r1, #0
 8003646:	4822      	ldr	r0, [pc, #136]	; (80036d0 <restore_from_eeprom+0x434>)
 8003648:	f000 f98e 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(services_index + 1, itoa_buffer, 10), CRLF_NO_SEND);
 800364c:	79bb      	ldrb	r3, [r7, #6]
 800364e:	3301      	adds	r3, #1
 8003650:	220a      	movs	r2, #10
 8003652:	4920      	ldr	r1, [pc, #128]	; (80036d4 <restore_from_eeprom+0x438>)
 8003654:	4618      	mov	r0, r3
 8003656:	f009 fe89 	bl	800d36c <itoa>
 800365a:	4603      	mov	r3, r0
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f982 	bl	8003968 <send_debug_msg>
			if((services_index +1) < 10)
 8003664:	79bb      	ldrb	r3, [r7, #6]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d803      	bhi.n	8003672 <restore_from_eeprom+0x3d6>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 800366a:	2100      	movs	r1, #0
 800366c:	481e      	ldr	r0, [pc, #120]	; (80036e8 <restore_from_eeprom+0x44c>)
 800366e:	f000 f97b 	bl	8003968 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003672:	2100      	movs	r1, #0
 8003674:	4823      	ldr	r0, [pc, #140]	; (8003704 <restore_from_eeprom+0x468>)
 8003676:	f000 f977 	bl	8003968 <send_debug_msg>

			//Name
			send_debug_msg(services_list[services_index].name, CRLF_NO_SEND);
 800367a:	79bb      	ldrb	r3, [r7, #6]
 800367c:	2234      	movs	r2, #52	; 0x34
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <restore_from_eeprom+0x46c>)
 8003684:	4413      	add	r3, r2
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f96d 	bl	8003968 <send_debug_msg>
			send_debug_msg(" | ", CRLF_NO_SEND);
 800368e:	2100      	movs	r1, #0
 8003690:	481e      	ldr	r0, [pc, #120]	; (800370c <restore_from_eeprom+0x470>)
 8003692:	f000 f969 	bl	8003968 <send_debug_msg>

			//Ensemble Name
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	717b      	strb	r3, [r7, #5]
 800369a:	e03c      	b.n	8003716 <restore_from_eeprom+0x47a>
			{
				if(ensembles_list[i].freq_id == services_list[services_index].freq_id)
 800369c:	797b      	ldrb	r3, [r7, #5]
 800369e:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <restore_from_eeprom+0x440>)
 80036a0:	015b      	lsls	r3, r3, #5
 80036a2:	4413      	add	r3, r2
 80036a4:	331c      	adds	r3, #28
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	79bb      	ldrb	r3, [r7, #6]
 80036aa:	4917      	ldr	r1, [pc, #92]	; (8003708 <restore_from_eeprom+0x46c>)
 80036ac:	2034      	movs	r0, #52	; 0x34
 80036ae:	fb00 f303 	mul.w	r3, r0, r3
 80036b2:	440b      	add	r3, r1
 80036b4:	3328      	adds	r3, #40	; 0x28
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d129      	bne.n	8003710 <restore_from_eeprom+0x474>
				{
					send_debug_msg(ensembles_list[i].label, CRLF_NO_SEND);
 80036bc:	797b      	ldrb	r3, [r7, #5]
 80036be:	015b      	lsls	r3, r3, #5
 80036c0:	4a06      	ldr	r2, [pc, #24]	; (80036dc <restore_from_eeprom+0x440>)
 80036c2:	4413      	add	r3, r2
 80036c4:	3302      	adds	r3, #2
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f94d 	bl	8003968 <send_debug_msg>
					break;
 80036ce:	e027      	b.n	8003720 <restore_from_eeprom+0x484>
 80036d0:	0800dd00 	.word	0x0800dd00
 80036d4:	200034d0 	.word	0x200034d0
 80036d8:	0800dd04 	.word	0x0800dd04
 80036dc:	20003634 	.word	0x20003634
 80036e0:	0800dd10 	.word	0x0800dd10
 80036e4:	20000008 	.word	0x20000008
 80036e8:	0800dd18 	.word	0x0800dd18
 80036ec:	0800dd1c 	.word	0x0800dd1c
 80036f0:	20004bc4 	.word	0x20004bc4
 80036f4:	0800dc8c 	.word	0x0800dc8c
 80036f8:	0800dd24 	.word	0x0800dd24
 80036fc:	0800dd38 	.word	0x0800dd38
 8003700:	0800dda4 	.word	0x0800dda4
 8003704:	0800de10 	.word	0x0800de10
 8003708:	20003774 	.word	0x20003774
 800370c:	0800de18 	.word	0x0800de18
			for(uint8_t i = 0; i < dab_management.total_ensembles; i++)
 8003710:	797b      	ldrb	r3, [r7, #5]
 8003712:	3301      	adds	r3, #1
 8003714:	717b      	strb	r3, [r7, #5]
 8003716:	4b6e      	ldr	r3, [pc, #440]	; (80038d0 <restore_from_eeprom+0x634>)
 8003718:	785b      	ldrb	r3, [r3, #1]
 800371a:	797a      	ldrb	r2, [r7, #5]
 800371c:	429a      	cmp	r2, r3
 800371e:	d3bd      	bcc.n	800369c <restore_from_eeprom+0x400>
				}
			}
			send_debug_msg(" | ", CRLF_NO_SEND);
 8003720:	2100      	movs	r1, #0
 8003722:	486c      	ldr	r0, [pc, #432]	; (80038d4 <restore_from_eeprom+0x638>)
 8003724:	f000 f920 	bl	8003968 <send_debug_msg>

			//Frequency
			send_debug_msg(itoa(services_list[services_index].freq, itoa_buffer, 10), CRLF_NO_SEND);
 8003728:	79bb      	ldrb	r3, [r7, #6]
 800372a:	4a6b      	ldr	r2, [pc, #428]	; (80038d8 <restore_from_eeprom+0x63c>)
 800372c:	2134      	movs	r1, #52	; 0x34
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3324      	adds	r3, #36	; 0x24
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	220a      	movs	r2, #10
 800373a:	4968      	ldr	r1, [pc, #416]	; (80038dc <restore_from_eeprom+0x640>)
 800373c:	4618      	mov	r0, r3
 800373e:	f009 fe15 	bl	800d36c <itoa>
 8003742:	4603      	mov	r3, r0
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f90e 	bl	8003968 <send_debug_msg>
			send_debug_msg(" kHz | ", CRLF_NO_SEND);
 800374c:	2100      	movs	r1, #0
 800374e:	4864      	ldr	r0, [pc, #400]	; (80038e0 <restore_from_eeprom+0x644>)
 8003750:	f000 f90a 	bl	8003968 <send_debug_msg>

			//Channel
			send_debug_msg(dab_channels_names[services_list[services_index].freq_id], CRLF_NO_SEND);
 8003754:	79bb      	ldrb	r3, [r7, #6]
 8003756:	4a60      	ldr	r2, [pc, #384]	; (80038d8 <restore_from_eeprom+0x63c>)
 8003758:	2134      	movs	r1, #52	; 0x34
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3328      	adds	r3, #40	; 0x28
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <restore_from_eeprom+0x648>)
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f8fa 	bl	8003968 <send_debug_msg>
			if(services_list[services_index].freq_id < 20)
 8003774:	79bb      	ldrb	r3, [r7, #6]
 8003776:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <restore_from_eeprom+0x63c>)
 8003778:	2134      	movs	r1, #52	; 0x34
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3328      	adds	r3, #40	; 0x28
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b13      	cmp	r3, #19
 8003786:	d803      	bhi.n	8003790 <restore_from_eeprom+0x4f4>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 8003788:	2100      	movs	r1, #0
 800378a:	4857      	ldr	r0, [pc, #348]	; (80038e8 <restore_from_eeprom+0x64c>)
 800378c:	f000 f8ec 	bl	8003968 <send_debug_msg>
			}
			send_debug_msg("     | ", CRLF_NO_SEND);
 8003790:	2100      	movs	r1, #0
 8003792:	4856      	ldr	r0, [pc, #344]	; (80038ec <restore_from_eeprom+0x650>)
 8003794:	f000 f8e8 	bl	8003968 <send_debug_msg>

			//PTY
			send_debug_msg(itoa(services_list[services_index].p_ty, itoa_buffer, 10), CRLF_NO_SEND);
 8003798:	79bb      	ldrb	r3, [r7, #6]
 800379a:	4a4f      	ldr	r2, [pc, #316]	; (80038d8 <restore_from_eeprom+0x63c>)
 800379c:	2134      	movs	r1, #52	; 0x34
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	4413      	add	r3, r2
 80037a4:	3315      	adds	r3, #21
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	220a      	movs	r2, #10
 80037aa:	494c      	ldr	r1, [pc, #304]	; (80038dc <restore_from_eeprom+0x640>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f009 fddd 	bl	800d36c <itoa>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f8d6 	bl	8003968 <send_debug_msg>
			if(services_list[services_index].p_ty < 10)
 80037bc:	79bb      	ldrb	r3, [r7, #6]
 80037be:	4a46      	ldr	r2, [pc, #280]	; (80038d8 <restore_from_eeprom+0x63c>)
 80037c0:	2134      	movs	r1, #52	; 0x34
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	3315      	adds	r3, #21
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	d803      	bhi.n	80037d8 <restore_from_eeprom+0x53c>
			{
				send_debug_msg(" ", CRLF_NO_SEND);
 80037d0:	2100      	movs	r1, #0
 80037d2:	4845      	ldr	r0, [pc, #276]	; (80038e8 <restore_from_eeprom+0x64c>)
 80037d4:	f000 f8c8 	bl	8003968 <send_debug_msg>
			}
			send_debug_msg("  | ", CRLF_NO_SEND);
 80037d8:	2100      	movs	r1, #0
 80037da:	4845      	ldr	r0, [pc, #276]	; (80038f0 <restore_from_eeprom+0x654>)
 80037dc:	f000 f8c4 	bl	8003968 <send_debug_msg>

			//Service ID
			send_debug_msg("0x", CRLF_NO_SEND);
 80037e0:	2100      	movs	r1, #0
 80037e2:	4844      	ldr	r0, [pc, #272]	; (80038f4 <restore_from_eeprom+0x658>)
 80037e4:	f000 f8c0 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].service_id, itoa_buffer, 16), CRLF_NO_SEND);
 80037e8:	79bb      	ldrb	r3, [r7, #6]
 80037ea:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <restore_from_eeprom+0x63c>)
 80037ec:	2134      	movs	r1, #52	; 0x34
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	3320      	adds	r3, #32
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2210      	movs	r2, #16
 80037fa:	4938      	ldr	r1, [pc, #224]	; (80038dc <restore_from_eeprom+0x640>)
 80037fc:	4618      	mov	r0, r3
 80037fe:	f009 fdb5 	bl	800d36c <itoa>
 8003802:	4603      	mov	r3, r0
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f8ae 	bl	8003968 <send_debug_msg>
			send_debug_msg("     | ", CRLF_NO_SEND);
 800380c:	2100      	movs	r1, #0
 800380e:	4837      	ldr	r0, [pc, #220]	; (80038ec <restore_from_eeprom+0x650>)
 8003810:	f000 f8aa 	bl	8003968 <send_debug_msg>

			//Component ID
			send_debug_msg("0x", CRLF_NO_SEND);
 8003814:	2100      	movs	r1, #0
 8003816:	4837      	ldr	r0, [pc, #220]	; (80038f4 <restore_from_eeprom+0x658>)
 8003818:	f000 f8a6 	bl	8003968 <send_debug_msg>
			send_debug_msg(itoa(services_list[services_index].components[0].subchannel_id, itoa_buffer, 16), CRLF_NO_SEND);
 800381c:	79bb      	ldrb	r3, [r7, #6]
 800381e:	4a2e      	ldr	r2, [pc, #184]	; (80038d8 <restore_from_eeprom+0x63c>)
 8003820:	2134      	movs	r1, #52	; 0x34
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	332a      	adds	r3, #42	; 0x2a
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2210      	movs	r2, #16
 800382e:	492b      	ldr	r1, [pc, #172]	; (80038dc <restore_from_eeprom+0x640>)
 8003830:	4618      	mov	r0, r3
 8003832:	f009 fd9b 	bl	800d36c <itoa>
 8003836:	4603      	mov	r3, r0
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f894 	bl	8003968 <send_debug_msg>
			send_debug_msg("          |", CRLF_SEND);
 8003840:	2101      	movs	r1, #1
 8003842:	482d      	ldr	r0, [pc, #180]	; (80038f8 <restore_from_eeprom+0x65c>)
 8003844:	f000 f890 	bl	8003968 <send_debug_msg>
		for(uint8_t services_index = 0; services_index < dab_management.total_services; services_index++)
 8003848:	79bb      	ldrb	r3, [r7, #6]
 800384a:	3301      	adds	r3, #1
 800384c:	71bb      	strb	r3, [r7, #6]
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <restore_from_eeprom+0x634>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	79ba      	ldrb	r2, [r7, #6]
 8003854:	429a      	cmp	r2, r3
 8003856:	f4ff aef5 	bcc.w	8003644 <restore_from_eeprom+0x3a8>
		}
		send_debug_msg("--------------------------------------------------------------------------------------------------------", CRLF_SEND);
 800385a:	2101      	movs	r1, #1
 800385c:	4827      	ldr	r0, [pc, #156]	; (80038fc <restore_from_eeprom+0x660>)
 800385e:	f000 f883 	bl	8003968 <send_debug_msg>

		//restore volume level
		eeprom_read(LAST_VOLUME_ADDR, &dab_management.audio_volume, sizeof(dab_management.audio_volume));
 8003862:	2201      	movs	r2, #1
 8003864:	4926      	ldr	r1, [pc, #152]	; (8003900 <restore_from_eeprom+0x664>)
 8003866:	200b      	movs	r0, #11
 8003868:	f001 ff0e 	bl	8005688 <eeprom_read>
		Si468x_set_audio_volume(dab_management.audio_volume);
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <restore_from_eeprom+0x634>)
 800386e:	7b9b      	ldrb	r3, [r3, #14]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fc47 	bl	8003104 <Si468x_set_audio_volume>

		//play last played station
		Si468x_dab_tune_freq(services_list[dab_management.last_station_index].freq_id, 0);
 8003876:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <restore_from_eeprom+0x634>)
 8003878:	791b      	ldrb	r3, [r3, #4]
 800387a:	4619      	mov	r1, r3
 800387c:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <restore_from_eeprom+0x63c>)
 800387e:	2334      	movs	r3, #52	; 0x34
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3328      	adds	r3, #40	; 0x28
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe f91b 	bl	8001ac8 <Si468x_dab_tune_freq>
		play_station(dab_management.last_station_index);
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <restore_from_eeprom+0x634>)
 8003894:	791b      	ldrb	r3, [r3, #4]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fc6a 	bl	8003170 <play_station>
 800389c:	e013      	b.n	80038c6 <restore_from_eeprom+0x62a>

	}
	else
	{
		send_debug_msg("Service list is empty!", CRLF_SEND);
 800389e:	2101      	movs	r1, #1
 80038a0:	4818      	ldr	r0, [pc, #96]	; (8003904 <restore_from_eeprom+0x668>)
 80038a2:	f000 f861 	bl	8003968 <send_debug_msg>
		dab_management.actual_freq = 0;
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <restore_from_eeprom+0x634>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
		dab_management.actual_freq_id = 0;
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <restore_from_eeprom+0x634>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	731a      	strb	r2, [r3, #12]
		dab_management.total_ensembles = 0;
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <restore_from_eeprom+0x634>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	705a      	strb	r2, [r3, #1]
		dab_management.total_services = 0;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <restore_from_eeprom+0x634>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
		dab_management.actual_station = 0;
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <restore_from_eeprom+0x634>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	70da      	strb	r2, [r3, #3]
	}
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20004bc4 	.word	0x20004bc4
 80038d4:	0800de18 	.word	0x0800de18
 80038d8:	20003774 	.word	0x20003774
 80038dc:	200034d0 	.word	0x200034d0
 80038e0:	0800dd10 	.word	0x0800dd10
 80038e4:	20000008 	.word	0x20000008
 80038e8:	0800dd18 	.word	0x0800dd18
 80038ec:	0800de10 	.word	0x0800de10
 80038f0:	0800de1c 	.word	0x0800de1c
 80038f4:	0800de24 	.word	0x0800de24
 80038f8:	0800de28 	.word	0x0800de28
 80038fc:	0800dd38 	.word	0x0800dd38
 8003900:	20004bd2 	.word	0x20004bd2
 8003904:	0800e0dc 	.word	0x0800e0dc

08003908 <get_dab_service_list>:
{
	return dab_digrad_status;
}

dab_service_t* get_dab_service_list()
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
	return services_list;
 800390c:	4b02      	ldr	r3, [pc, #8]	; (8003918 <get_dab_service_list+0x10>)
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	20003774 	.word	0x20003774

0800391c <get_dab_ensemble_list>:

dab_ensemble_t* get_dab_ensemble_list()
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
	return ensembles_list;
 8003920:	4b02      	ldr	r3, [pc, #8]	; (800392c <get_dab_ensemble_list+0x10>)
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	20003634 	.word	0x20003634

08003930 <get_dab_management>:

dab_management_t get_dab_management()
{
 8003930:	b490      	push	{r4, r7}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	return dab_management;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <get_dab_management+0x20>)
 800393c:	461c      	mov	r4, r3
 800393e:	4613      	mov	r3, r2
 8003940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bc90      	pop	{r4, r7}
 800394e:	4770      	bx	lr
 8003950:	20004bc4 	.word	0x20004bc4

08003954 <get_dls_label>:

char* get_dls_label()
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
	return dls_label;
 8003958:	4b02      	ldr	r3, [pc, #8]	; (8003964 <get_dls_label+0x10>)
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	20004bd4 	.word	0x20004bd4

08003968 <send_debug_msg>:
#include "debug_uart.h"
#include <string.h>


void send_debug_msg(char* msg, uint8_t is_crlf)//void send_debug_msg(char msg[], uint8_t is_crlf)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
	uint8_t msg_size = strlen(msg);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fc fc31 	bl	80001dc <strlen>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_size, 100);
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	b29a      	uxth	r2, r3
 8003982:	2364      	movs	r3, #100	; 0x64
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	480a      	ldr	r0, [pc, #40]	; (80039b0 <send_debug_msg+0x48>)
 8003988:	f009 f93f 	bl	800cc0a <HAL_UART_Transmit>

	if(is_crlf)
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <send_debug_msg+0x3e>
	{
		uint8_t crlf[] = {13, 10};
 8003992:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003996:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, crlf, 2, 100);
 8003998:	f107 010c 	add.w	r1, r7, #12
 800399c:	2364      	movs	r3, #100	; 0x64
 800399e:	2202      	movs	r2, #2
 80039a0:	4803      	ldr	r0, [pc, #12]	; (80039b0 <send_debug_msg+0x48>)
 80039a2:	f009 f932 	bl	800cc0a <HAL_UART_Transmit>
	}
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20007194 	.word	0x20007194

080039b4 <Display_clear_screen>:
static uint8_t display_freeze = 0;

uint8_t last_dls[129];

void Display_clear_screen()
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80039ba:	2000      	movs	r0, #0
 80039bc:	f7fc ff82 	bl	80008c4 <ILI9341_Fill_Screen>
	ILI9341_Draw_Line(YELLOW, 0, 17, 320, 17);
 80039c0:	2311      	movs	r3, #17
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80039c8:	2211      	movs	r2, #17
 80039ca:	2100      	movs	r1, #0
 80039cc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80039d0:	f7fd f803 	bl	80009da <ILI9341_Draw_Line>
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <Display_booting_screen>:

void Display_booting_screen()
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLACK);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fc ff6e 	bl	80008c4 <ILI9341_Fill_Screen>
	ILI9341_Draw_String(95, 40, WHITE, BLACK, "MASTER'S THESIS", 2);
 80039e8:	2302      	movs	r3, #2
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <Display_booting_screen+0xc4>)
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2300      	movs	r3, #0
 80039f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039f6:	2128      	movs	r1, #40	; 0x28
 80039f8:	205f      	movs	r0, #95	; 0x5f
 80039fa:	f7fd f86f 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(70, 60, WHITE, BLACK, "DAB+ DEVELOPMENT BOARD", 2);
 80039fe:	2302      	movs	r3, #2
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <Display_booting_screen+0xc8>)
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0c:	213c      	movs	r1, #60	; 0x3c
 8003a0e:	2046      	movs	r0, #70	; 0x46
 8003a10:	f7fd f864 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(130, 80, WHITE, BLACK, "AUTHOR:", 2);
 8003a14:	2302      	movs	r3, #2
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <Display_booting_screen+0xcc>)
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a22:	2150      	movs	r1, #80	; 0x50
 8003a24:	2082      	movs	r0, #130	; 0x82
 8003a26:	f7fd f859 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(100, 100, WHITE, BLACK, "MARCIN GOSTEK", 2);
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <Display_booting_screen+0xd0>)
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2300      	movs	r3, #0
 8003a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a38:	2164      	movs	r1, #100	; 0x64
 8003a3a:	2064      	movs	r0, #100	; 0x64
 8003a3c:	f7fd f84e 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 120, WHITE, BLACK, "THESIS SUPERVISOR:", 2);
 8003a40:	2302      	movs	r3, #2
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <Display_booting_screen+0xd4>)
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4e:	2178      	movs	r1, #120	; 0x78
 8003a50:	205a      	movs	r0, #90	; 0x5a
 8003a52:	f7fd f843 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(50, 140, WHITE, BLACK, "JACEK KOLODZIEJ, Beng, PhD", 2);
 8003a56:	2302      	movs	r3, #2
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <Display_booting_screen+0xd8>)
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a64:	218c      	movs	r1, #140	; 0x8c
 8003a66:	2032      	movs	r0, #50	; 0x32
 8003a68:	f7fd f838 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 160, WHITE, BLACK, "AGH KRAKOW, 2022", 2);
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <Display_booting_screen+0xdc>)
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2300      	movs	r3, #0
 8003a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7a:	21a0      	movs	r1, #160	; 0xa0
 8003a7c:	205a      	movs	r0, #90	; 0x5a
 8003a7e:	f7fd f82d 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 180, WHITE, BLACK, "Booting...", 2);
 8003a82:	2302      	movs	r3, #2
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <Display_booting_screen+0xe0>)
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a90:	21b4      	movs	r1, #180	; 0xb4
 8003a92:	2078      	movs	r0, #120	; 0x78
 8003a94:	f7fd f822 	bl	8000adc <ILI9341_Draw_String>
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	0800e1a4 	.word	0x0800e1a4
 8003aa4:	0800e1b4 	.word	0x0800e1b4
 8003aa8:	0800e1cc 	.word	0x0800e1cc
 8003aac:	0800e1d4 	.word	0x0800e1d4
 8003ab0:	0800e1e4 	.word	0x0800e1e4
 8003ab4:	0800e1f8 	.word	0x0800e1f8
 8003ab8:	0800e214 	.word	0x0800e214
 8003abc:	0800e228 	.word	0x0800e228

08003ac0 <Display_main_screen_background>:

void Display_main_screen_background()
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003ac6:	f7ff ff75 	bl	80039b4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVER", 2); //Naglowek
 8003aca:	2302      	movs	r3, #2
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	4b40      	ldr	r3, [pc, #256]	; (8003bd0 <Display_main_screen_background+0x110>)
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad8:	2101      	movs	r1, #1
 8003ada:	2005      	movs	r0, #5
 8003adc:	f7fc fffe 	bl	8000adc <ILI9341_Draw_String>

	//Station name background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 140, 40);
 8003ae0:	2328      	movs	r3, #40	; 0x28
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	238c      	movs	r3, #140	; 0x8c
 8003ae6:	2214      	movs	r2, #20
 8003ae8:	2105      	movs	r1, #5
 8003aea:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003aee:	f7fc ff53 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Bar1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 140, 65);
 8003af2:	2341      	movs	r3, #65	; 0x41
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	238c      	movs	r3, #140	; 0x8c
 8003af8:	222d      	movs	r2, #45	; 0x2d
 8003afa:	2105      	movs	r1, #5
 8003afc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b00:	f7fc ff4a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Bar2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 140, 90);
 8003b04:	235a      	movs	r3, #90	; 0x5a
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	238c      	movs	r3, #140	; 0x8c
 8003b0a:	2246      	movs	r2, #70	; 0x46
 8003b0c:	2105      	movs	r1, #5
 8003b0e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b12:	f7fc ff41 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 140, 115);
 8003b16:	2373      	movs	r3, #115	; 0x73
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	238c      	movs	r3, #140	; 0x8c
 8003b1c:	225f      	movs	r2, #95	; 0x5f
 8003b1e:	2105      	movs	r1, #5
 8003b20:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b24:	f7fc ff38 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 140, 140);
 8003b28:	238c      	movs	r3, #140	; 0x8c
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	238c      	movs	r3, #140	; 0x8c
 8003b2e:	2278      	movs	r2, #120	; 0x78
 8003b30:	2105      	movs	r1, #5
 8003b32:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b36:	f7fc ff2f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 140, 165);
 8003b3a:	23a5      	movs	r3, #165	; 0xa5
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	238c      	movs	r3, #140	; 0x8c
 8003b40:	2291      	movs	r2, #145	; 0x91
 8003b42:	2105      	movs	r1, #5
 8003b44:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b48:	f7fc ff26 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//BAr6 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 140, 190);
 8003b4c:	23be      	movs	r3, #190	; 0xbe
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	238c      	movs	r3, #140	; 0x8c
 8003b52:	22aa      	movs	r2, #170	; 0xaa
 8003b54:	2105      	movs	r1, #5
 8003b56:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b5a:	f7fc ff1d 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Station picture background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 145, 20, 315, 190);
 8003b5e:	23be      	movs	r3, #190	; 0xbe
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	f240 133b 	movw	r3, #315	; 0x13b
 8003b66:	2214      	movs	r2, #20
 8003b68:	2191      	movs	r1, #145	; 0x91
 8003b6a:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003b6e:	f7fc ff13 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8003b72:	23eb      	movs	r3, #235	; 0xeb
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	239d      	movs	r3, #157	; 0x9d
 8003b78:	22c3      	movs	r2, #195	; 0xc3
 8003b7a:	2105      	movs	r1, #5
 8003b7c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003b80:	f7fc ff0a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8003b84:	23eb      	movs	r3, #235	; 0xeb
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f240 133b 	movw	r3, #315	; 0x13b
 8003b8c:	22c3      	movs	r2, #195	; 0xc3
 8003b8e:	21a3      	movs	r1, #163	; 0xa3
 8003b90:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003b94:	f7fc ff00 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(50, 207, WHITE, ORANGE, "SETTINGS", 2);
 8003b98:	2302      	movs	r3, #2
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <Display_main_screen_background+0x114>)
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ba8:	21cf      	movs	r1, #207	; 0xcf
 8003baa:	2032      	movs	r0, #50	; 0x32
 8003bac:	f7fc ff96 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(192, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <Display_main_screen_background+0x118>)
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc0:	21cf      	movs	r1, #207	; 0xcf
 8003bc2:	20c0      	movs	r0, #192	; 0xc0
 8003bc4:	f7fc ff8a 	bl	8000adc <ILI9341_Draw_String>
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	0800e234 	.word	0x0800e234
 8003bd4:	0800e244 	.word	0x0800e244
 8003bd8:	0800e250 	.word	0x0800e250

08003bdc <Display_main_screen_data>:

void Display_main_screen_data(dab_service_t* _services_list, dab_ensemble_t* _ensembles_list, dab_management_t _dab_management, dab_audio_info_t _dab_audio_info)
{
 8003bdc:	b082      	sub	sp, #8
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af02      	add	r7, sp, #8
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
 8003be8:	f107 0118 	add.w	r1, r7, #24
 8003bec:	e881 000c 	stmia.w	r1, {r2, r3}
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, _services_list[_dab_management.actual_station].name, 2);
 8003bf0:	7efb      	ldrb	r3, [r7, #27]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2334      	movs	r3, #52	; 0x34
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2302      	movs	r3, #2
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	9200      	str	r2, [sp, #0]
 8003c06:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0e:	2117      	movs	r1, #23
 8003c10:	2008      	movs	r0, #8
 8003c12:	f7fc ff63 	bl	8000adc <ILI9341_Draw_String>
	//Bar1
//	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);


	//Bar2
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "", 2);
 8003c16:	2302      	movs	r3, #2
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	4b90      	ldr	r3, [pc, #576]	; (8003e5c <Display_main_screen_data+0x280>)
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c26:	2149      	movs	r1, #73	; 0x49
 8003c28:	2008      	movs	r0, #8
 8003c2a:	f7fc ff57 	bl	8000adc <ILI9341_Draw_String>

	//BAr3
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "", 2);
 8003c2e:	2302      	movs	r3, #2
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	4b8a      	ldr	r3, [pc, #552]	; (8003e5c <Display_main_screen_data+0x280>)
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c3e:	2162      	movs	r1, #98	; 0x62
 8003c40:	2008      	movs	r0, #8
 8003c42:	f7fc ff4b 	bl	8000adc <ILI9341_Draw_String>

	//BAr4 (bitrate, sample rate)
	if(_dab_audio_info.audio_bit_rate < 100)
 8003c46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c48:	2b63      	cmp	r3, #99	; 0x63
 8003c4a:	d81e      	bhi.n	8003c8a <Display_main_screen_data+0xae>
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, " ", 2);
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	4b83      	ldr	r3, [pc, #524]	; (8003e60 <Display_main_screen_data+0x284>)
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c5c:	217b      	movs	r1, #123	; 0x7b
 8003c5e:	2008      	movs	r0, #8
 8003c60:	f7fc ff3c 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(17, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003c64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c66:	220a      	movs	r2, #10
 8003c68:	497e      	ldr	r1, [pc, #504]	; (8003e64 <Display_main_screen_data+0x288>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f009 fb7e 	bl	800d36c <itoa>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2202      	movs	r2, #2
 8003c74:	9201      	str	r2, [sp, #4]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c80:	217b      	movs	r1, #123	; 0x7b
 8003c82:	2011      	movs	r0, #17
 8003c84:	f7fc ff2a 	bl	8000adc <ILI9341_Draw_String>
 8003c88:	e011      	b.n	8003cae <Display_main_screen_data+0xd2>
	}
	else
	{
		ILI9341_Draw_String(8, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_bit_rate, itoa_buffer, 10), 2);
 8003c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c8c:	220a      	movs	r2, #10
 8003c8e:	4975      	ldr	r1, [pc, #468]	; (8003e64 <Display_main_screen_data+0x288>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f009 fb6b 	bl	800d36c <itoa>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2202      	movs	r2, #2
 8003c9a:	9201      	str	r2, [sp, #4]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca6:	217b      	movs	r1, #123	; 0x7b
 8003ca8:	2008      	movs	r0, #8
 8003caa:	f7fc ff17 	bl	8000adc <ILI9341_Draw_String>
	}
	ILI9341_Draw_String(36, 123, WHITE, DARKGREY, "kbps", 2);
 8003cae:	2302      	movs	r3, #2
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	; (8003e68 <Display_main_screen_data+0x28c>)
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cbe:	217b      	movs	r1, #123	; 0x7b
 8003cc0:	2024      	movs	r0, #36	; 0x24
 8003cc2:	f7fc ff0b 	bl	8000adc <ILI9341_Draw_String>


	ILI9341_Draw_String(78, 123, WHITE, DARKGREY, itoa(_dab_audio_info.audio_sample_rate, itoa_buffer, 10), 2);
 8003cc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cc8:	220a      	movs	r2, #10
 8003cca:	4966      	ldr	r1, [pc, #408]	; (8003e64 <Display_main_screen_data+0x288>)
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f009 fb4d 	bl	800d36c <itoa>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	9201      	str	r2, [sp, #4]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce2:	217b      	movs	r1, #123	; 0x7b
 8003ce4:	204e      	movs	r0, #78	; 0x4e
 8003ce6:	f7fc fef9 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(122, 123, WHITE, DARKGREY, "Hz", 2);
 8003cea:	2302      	movs	r3, #2
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	4b5f      	ldr	r3, [pc, #380]	; (8003e6c <Display_main_screen_data+0x290>)
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cfa:	217b      	movs	r1, #123	; 0x7b
 8003cfc:	207a      	movs	r0, #122	; 0x7a
 8003cfe:	f7fc feed 	bl	8000adc <ILI9341_Draw_String>

	//BAr5 (Ensemble Name)
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e022      	b.n	8003d4e <Display_main_screen_data+0x172>
	{
		if(_ensembles_list[i].freq_id == _services_list[_dab_management.actual_station].freq_id)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	015b      	lsls	r3, r3, #5
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	7f1a      	ldrb	r2, [r3, #28]
 8003d12:	7efb      	ldrb	r3, [r7, #27]
 8003d14:	4619      	mov	r1, r3
 8003d16:	2334      	movs	r3, #52	; 0x34
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	440b      	add	r3, r1
 8003d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d10f      	bne.n	8003d48 <Display_main_screen_data+0x16c>
		{
			ILI9341_Draw_String(8, 148, WHITE, DARKGREY, _ensembles_list[i].label, 2);
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	015b      	lsls	r3, r3, #5
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	3302      	adds	r3, #2
 8003d32:	2202      	movs	r2, #2
 8003d34:	9201      	str	r2, [sp, #4]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d40:	2194      	movs	r1, #148	; 0x94
 8003d42:	2008      	movs	r0, #8
 8003d44:	f7fc feca 	bl	8000adc <ILI9341_Draw_String>
	for(uint8_t i = 0; i < _dab_management.total_ensembles; i++)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	7e7b      	ldrb	r3, [r7, #25]
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d3d8      	bcc.n	8003d08 <Display_main_screen_data+0x12c>
		}
	}

	//BAr6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq / 1000, itoa_buffer, 10), 2);
 8003d56:	7efb      	ldrb	r3, [r7, #27]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2334      	movs	r3, #52	; 0x34
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <Display_main_screen_data+0x294>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	220a      	movs	r2, #10
 8003d70:	493c      	ldr	r1, [pc, #240]	; (8003e64 <Display_main_screen_data+0x288>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f009 fafa 	bl	800d36c <itoa>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	9201      	str	r2, [sp, #4]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d88:	21ad      	movs	r1, #173	; 0xad
 8003d8a:	2008      	movs	r0, #8
 8003d8c:	f7fc fea6 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(31, 173, WHITE, DARKGREY, ".", 2);
 8003d90:	2302      	movs	r3, #2
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	4b37      	ldr	r3, [pc, #220]	; (8003e74 <Display_main_screen_data+0x298>)
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da0:	21ad      	movs	r1, #173	; 0xad
 8003da2:	201f      	movs	r0, #31
 8003da4:	f7fc fe9a 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(38, 173, WHITE, DARKGREY, itoa(_services_list[_dab_management.actual_station].freq % 1000 ,itoa_buffer, 10), 2);
 8003da8:	7efb      	ldrb	r3, [r7, #27]
 8003daa:	461a      	mov	r2, r3
 8003dac:	2334      	movs	r3, #52	; 0x34
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db8:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <Display_main_screen_data+0x294>)
 8003dba:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbe:	099b      	lsrs	r3, r3, #6
 8003dc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	220a      	movs	r2, #10
 8003dcc:	4925      	ldr	r1, [pc, #148]	; (8003e64 <Display_main_screen_data+0x288>)
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f009 facc 	bl	800d36c <itoa>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	9201      	str	r2, [sp, #4]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de4:	21ad      	movs	r1, #173	; 0xad
 8003de6:	2026      	movs	r0, #38	; 0x26
 8003de8:	f7fc fe78 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(65, 173, WHITE, DARKGREY, "MHz", 2);
 8003dec:	2302      	movs	r3, #2
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <Display_main_screen_data+0x29c>)
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dfc:	21ad      	movs	r1, #173	; 0xad
 8003dfe:	2041      	movs	r0, #65	; 0x41
 8003e00:	f7fc fe6c 	bl	8000adc <ILI9341_Draw_String>

	ILI9341_Draw_String(95, 173, WHITE, DARKGREY, "CH", 2);
 8003e04:	2302      	movs	r3, #2
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <Display_main_screen_data+0x2a0>)
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e14:	21ad      	movs	r1, #173	; 0xad
 8003e16:	205f      	movs	r0, #95	; 0x5f
 8003e18:	f7fc fe60 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(115, 173, WHITE, DARKGREY, dab_channels_names[_services_list[_dab_management.actual_station].freq_id], 2);
 8003e1c:	7efb      	ldrb	r3, [r7, #27]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2334      	movs	r3, #52	; 0x34
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <Display_main_screen_data+0x2a4>)
 8003e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e36:	2202      	movs	r2, #2
 8003e38:	9201      	str	r2, [sp, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e44:	21ad      	movs	r1, #173	; 0xad
 8003e46:	2073      	movs	r0, #115	; 0x73
 8003e48:	f7fc fe48 	bl	8000adc <ILI9341_Draw_String>

	//Station picture

}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e56:	b002      	add	sp, #8
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	0800e260 	.word	0x0800e260
 8003e60:	0800e264 	.word	0x0800e264
 8003e64:	20006d8c 	.word	0x20006d8c
 8003e68:	0800e268 	.word	0x0800e268
 8003e6c:	0800e270 	.word	0x0800e270
 8003e70:	10624dd3 	.word	0x10624dd3
 8003e74:	0800e274 	.word	0x0800e274
 8003e78:	0800e278 	.word	0x0800e278
 8003e7c:	0800e27c 	.word	0x0800e27c
 8003e80:	200000ac 	.word	0x200000ac

08003e84 <Display_main_screen_dls>:

void Display_main_screen_dls(uint8_t* _dls_label)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	6078      	str	r0, [r7, #4]
	//check if new dls equals last dls, if new dls is different - display it on screen
	if(strcmp(_dls_label, last_dls))
 8003e8c:	4919      	ldr	r1, [pc, #100]	; (8003ef4 <Display_main_screen_dls+0x70>)
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fc f99a 	bl	80001c8 <strcmp>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d027      	beq.n	8003eea <Display_main_screen_dls+0x66>
	{
		//clear DLS Label
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "                                                                                                                               ", 2);
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <Display_main_screen_dls+0x74>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eaa:	2130      	movs	r1, #48	; 0x30
 8003eac:	2008      	movs	r0, #8
 8003eae:	f7fc fe15 	bl	8000adc <ILI9341_Draw_String>
		//show new label on the screen
		ILI9341_Draw_String(8, 48, WHITE, DARKGREY, _dls_label, 2);
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ec2:	2130      	movs	r1, #48	; 0x30
 8003ec4:	2008      	movs	r0, #8
 8003ec6:	f7fc fe09 	bl	8000adc <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 129; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e009      	b.n	8003ee4 <Display_main_screen_dls+0x60>
		{
			last_dls[i] = _dls_label[i];
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	441a      	add	r2, r3
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	7811      	ldrb	r1, [r2, #0]
 8003eda:	4a06      	ldr	r2, [pc, #24]	; (8003ef4 <Display_main_screen_dls+0x70>)
 8003edc:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 129; i++)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d9f2      	bls.n	8003ed0 <Display_main_screen_dls+0x4c>
		}
	}
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20006dd0 	.word	0x20006dd0
 8003ef8:	0800e280 	.word	0x0800e280

08003efc <Display_main_screen_empty>:


void Display_main_screen_empty()
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af02      	add	r7, sp, #8
	//service Name
	ILI9341_Draw_String(8, 23, WHITE, DARKGREY, "No service      ", 2);
 8003f02:	2302      	movs	r3, #2
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <Display_main_screen_empty+0xb4>)
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f12:	2117      	movs	r1, #23
 8003f14:	2008      	movs	r0, #8
 8003f16:	f7fc fde1 	bl	8000adc <ILI9341_Draw_String>

	//Bar1
	ILI9341_Draw_String(8, 48, WHITE, DARKGREY, "is playing!     ", 2);
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <Display_main_screen_empty+0xb8>)
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2a:	2130      	movs	r1, #48	; 0x30
 8003f2c:	2008      	movs	r0, #8
 8003f2e:	f7fc fdd5 	bl	8000adc <ILI9341_Draw_String>

	//Bar2
	ILI9341_Draw_String(8, 73, WHITE, DARKGREY, "Select service  ", 2);
 8003f32:	2302      	movs	r3, #2
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <Display_main_screen_empty+0xbc>)
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f42:	2149      	movs	r1, #73	; 0x49
 8003f44:	2008      	movs	r0, #8
 8003f46:	f7fc fdc9 	bl	8000adc <ILI9341_Draw_String>

	//BAr3
	ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from service list", 2);
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <Display_main_screen_empty+0xc0>)
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f5a:	2162      	movs	r1, #98	; 0x62
 8003f5c:	2008      	movs	r0, #8
 8003f5e:	f7fc fdbd 	bl	8000adc <ILI9341_Draw_String>

	//BAr4
	ILI9341_Draw_String(8, 123, WHITE, DARKGREY, "to play.        ", 2);
 8003f62:	2302      	movs	r3, #2
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <Display_main_screen_empty+0xc4>)
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f72:	217b      	movs	r1, #123	; 0x7b
 8003f74:	2008      	movs	r0, #8
 8003f76:	f7fc fdb1 	bl	8000adc <ILI9341_Draw_String>

	//BAr5 (Ensemble Name)

	ILI9341_Draw_String(8, 148, WHITE, DARKGREY, "                ", 2);
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <Display_main_screen_empty+0xc8>)
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f8a:	2194      	movs	r1, #148	; 0x94
 8003f8c:	2008      	movs	r0, #8
 8003f8e:	f7fc fda5 	bl	8000adc <ILI9341_Draw_String>

	//BAr6 (Freq, Channel)
	ILI9341_Draw_String(8, 173, WHITE, DARKGREY, "                ", 2);
 8003f92:	2302      	movs	r3, #2
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <Display_main_screen_empty+0xc8>)
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fa2:	21ad      	movs	r1, #173	; 0xad
 8003fa4:	2008      	movs	r0, #8
 8003fa6:	f7fc fd99 	bl	8000adc <ILI9341_Draw_String>

	//Station picture

}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	0800e300 	.word	0x0800e300
 8003fb4:	0800e314 	.word	0x0800e314
 8003fb8:	0800e328 	.word	0x0800e328
 8003fbc:	0800e33c 	.word	0x0800e33c
 8003fc0:	0800e350 	.word	0x0800e350
 8003fc4:	0800e364 	.word	0x0800e364

08003fc8 <Display_stations_list_background>:


void Display_stations_list_background()
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af02      	add	r7, sp, #8
	Display_clear_screen();
 8003fce:	f7ff fcf1 	bl	80039b4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SERVICE LIST", 2); //Naglowek
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	4b59      	ldr	r3, [pc, #356]	; (800413c <Display_stations_list_background+0x174>)
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	2005      	movs	r0, #5
 8003fe4:	f7fc fd7a 	bl	8000adc <ILI9341_Draw_String>

	//SERVICE 1 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 285, 50);
 8003fe8:	2332      	movs	r3, #50	; 0x32
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	f240 131d 	movw	r3, #285	; 0x11d
 8003ff0:	2214      	movs	r2, #20
 8003ff2:	2105      	movs	r1, #5
 8003ff4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8003ff8:	f7fc fcce 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 2 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 55, 285, 85);
 8003ffc:	2355      	movs	r3, #85	; 0x55
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	f240 131d 	movw	r3, #285	; 0x11d
 8004004:	2237      	movs	r2, #55	; 0x37
 8004006:	2105      	movs	r1, #5
 8004008:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800400c:	f7fc fcc4 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 3 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 90, 285, 120);
 8004010:	2378      	movs	r3, #120	; 0x78
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f240 131d 	movw	r3, #285	; 0x11d
 8004018:	225a      	movs	r2, #90	; 0x5a
 800401a:	2105      	movs	r1, #5
 800401c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004020:	f7fc fcba 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 4 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 125, 285, 155);
 8004024:	239b      	movs	r3, #155	; 0x9b
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	f240 131d 	movw	r3, #285	; 0x11d
 800402c:	227d      	movs	r2, #125	; 0x7d
 800402e:	2105      	movs	r1, #5
 8004030:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004034:	f7fc fcb0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//SERVICE 5 background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 160, 285, 190);
 8004038:	23be      	movs	r3, #190	; 0xbe
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	f240 131d 	movw	r3, #285	; 0x11d
 8004040:	22a0      	movs	r2, #160	; 0xa0
 8004042:	2105      	movs	r1, #5
 8004044:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004048:	f7fc fca6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//up button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 20, 315, 102);
 800404c:	2366      	movs	r3, #102	; 0x66
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	f240 133b 	movw	r3, #315	; 0x13b
 8004054:	2214      	movs	r2, #20
 8004056:	f44f 7191 	mov.w	r1, #290	; 0x122
 800405a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800405e:	f7fc fc9b 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 56, WHITE, ORANGE, "/", 2);
 8004062:	2302      	movs	r3, #2
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <Display_stations_list_background+0x178>)
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800406e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004072:	2138      	movs	r1, #56	; 0x38
 8004074:	f240 1027 	movw	r0, #295	; 0x127
 8004078:	f7fc fd30 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 56, WHITE, ORANGE, "\\", 2);
 800407c:	2302      	movs	r3, #2
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <Display_stations_list_background+0x17c>)
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800408c:	2138      	movs	r1, #56	; 0x38
 800408e:	f44f 7097 	mov.w	r0, #302	; 0x12e
 8004092:	f7fc fd23 	bl	8000adc <ILI9341_Draw_String>
	//down button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 290, 108, 315, 190);
 8004096:	23be      	movs	r3, #190	; 0xbe
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	f240 133b 	movw	r3, #315	; 0x13b
 800409e:	226c      	movs	r2, #108	; 0x6c
 80040a0:	f44f 7191 	mov.w	r1, #290	; 0x122
 80040a4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80040a8:	f7fc fc76 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(295, 146, WHITE, ORANGE, "\\", 2);
 80040ac:	2302      	movs	r3, #2
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	4b24      	ldr	r3, [pc, #144]	; (8004144 <Display_stations_list_background+0x17c>)
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040bc:	2192      	movs	r1, #146	; 0x92
 80040be:	f240 1027 	movw	r0, #295	; 0x127
 80040c2:	f7fc fd0b 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(302, 146, WHITE, ORANGE, "/", 2);
 80040c6:	2302      	movs	r3, #2
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <Display_stations_list_background+0x178>)
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d6:	2192      	movs	r1, #146	; 0x92
 80040d8:	f44f 7097 	mov.w	r0, #302	; 0x12e
 80040dc:	f7fc fcfe 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 80040e0:	23eb      	movs	r3, #235	; 0xeb
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	239d      	movs	r3, #157	; 0x9d
 80040e6:	22c3      	movs	r2, #195	; 0xc3
 80040e8:	2105      	movs	r1, #5
 80040ea:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80040ee:	f7fc fc53 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 80040f2:	23eb      	movs	r3, #235	; 0xeb
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	f240 133b 	movw	r3, #315	; 0x13b
 80040fa:	22c3      	movs	r2, #195	; 0xc3
 80040fc:	21a3      	movs	r1, #163	; 0xa3
 80040fe:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004102:	f7fc fc49 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8004106:	2302      	movs	r3, #2
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <Display_stations_list_background+0x180>)
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004116:	21cf      	movs	r1, #207	; 0xcf
 8004118:	2025      	movs	r0, #37	; 0x25
 800411a:	f7fc fcdf 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 800411e:	2302      	movs	r3, #2
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <Display_stations_list_background+0x184>)
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800412a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800412e:	21cf      	movs	r1, #207	; 0xcf
 8004130:	20c3      	movs	r0, #195	; 0xc3
 8004132:	f7fc fcd3 	bl	8000adc <ILI9341_Draw_String>

}
 8004136:	bf00      	nop
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	0800e378 	.word	0x0800e378
 8004140:	0800e38c 	.word	0x0800e38c
 8004144:	0800e390 	.word	0x0800e390
 8004148:	0800e394 	.word	0x0800e394
 800414c:	0800e3a0 	.word	0x0800e3a0

08004150 <Display_stations_list_data>:

void Display_stations_list_data(int start_station_index, dab_management_t _dab_management, dab_service_t* _dab_service_list)
{
 8004150:	b084      	sub	sp, #16
 8004152:	b590      	push	{r4, r7, lr}
 8004154:	b087      	sub	sp, #28
 8004156:	af02      	add	r7, sp, #8
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800415e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(_dab_management.total_services)
 8004162:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8133 	beq.w	80043d2 <Display_stations_list_data+0x282>
	{
		for(uint8_t i = 0; i < 5; i++)
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e12a      	b.n	80043c8 <Display_stations_list_data+0x278>
		{
			if((i + start_station_index) > (_dab_management.total_services - 1))
 8004172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004176:	4619      	mov	r1, r3
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	4299      	cmp	r1, r3
 8004180:	dc02      	bgt.n	8004188 <Display_stations_list_data+0x38>
			{
				start_station_index = 0 - i;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	425b      	negs	r3, r3
 8004186:	607b      	str	r3, [r7, #4]
			}

			if((i + start_station_index + 1) < 10)
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	2b08      	cmp	r3, #8
 8004190:	dc30      	bgt.n	80041f4 <Display_stations_list_data+0xa4>
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, " ", 2);
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	00da      	lsls	r2, r3, #3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	331c      	adds	r3, #28
 80041a0:	4619      	mov	r1, r3
 80041a2:	2302      	movs	r3, #2
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	4bac      	ldr	r3, [pc, #688]	; (8004458 <Display_stations_list_data+0x308>)
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041b2:	2008      	movs	r0, #8
 80041b4:	f7fc fc92 	bl	8000adc <ILI9341_Draw_String>
				ILI9341_Draw_String(17, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80041b8:	7bfa      	ldrb	r2, [r7, #15]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	00da      	lsls	r2, r3, #3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	331c      	adds	r3, #28
 80041c6:	461c      	mov	r4, r3
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	3301      	adds	r3, #1
 80041d0:	220a      	movs	r2, #10
 80041d2:	49a2      	ldr	r1, [pc, #648]	; (800445c <Display_stations_list_data+0x30c>)
 80041d4:	4618      	mov	r0, r3
 80041d6:	f009 f8c9 	bl	800d36c <itoa>
 80041da:	4603      	mov	r3, r0
 80041dc:	2202      	movs	r2, #2
 80041de:	9201      	str	r2, [sp, #4]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80041e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ea:	4621      	mov	r1, r4
 80041ec:	2011      	movs	r0, #17
 80041ee:	f7fc fc75 	bl	8000adc <ILI9341_Draw_String>
 80041f2:	e01c      	b.n	800422e <Display_stations_list_data+0xde>
			}
			else
			{
				ILI9341_Draw_String(8, 28 + 35 * i, WHITE, DARKGREY, itoa(i + start_station_index + 1, itoa_buffer, 10), 2);
 80041f4:	7bfa      	ldrb	r2, [r7, #15]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	00da      	lsls	r2, r3, #3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	331c      	adds	r3, #28
 8004202:	461c      	mov	r4, r3
 8004204:	7bfa      	ldrb	r2, [r7, #15]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	3301      	adds	r3, #1
 800420c:	220a      	movs	r2, #10
 800420e:	4993      	ldr	r1, [pc, #588]	; (800445c <Display_stations_list_data+0x30c>)
 8004210:	4618      	mov	r0, r3
 8004212:	f009 f8ab 	bl	800d36c <itoa>
 8004216:	4603      	mov	r3, r0
 8004218:	2202      	movs	r2, #2
 800421a:	9201      	str	r2, [sp, #4]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004226:	4621      	mov	r1, r4
 8004228:	2008      	movs	r0, #8
 800422a:	f7fc fc57 	bl	8000adc <ILI9341_Draw_String>
			}

			ILI9341_Draw_String(24, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00da      	lsls	r2, r3, #3
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	331c      	adds	r3, #28
 800423c:	4619      	mov	r1, r3
 800423e:	2302      	movs	r3, #2
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	4b87      	ldr	r3, [pc, #540]	; (8004460 <Display_stations_list_data+0x310>)
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800424a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424e:	2018      	movs	r0, #24
 8004250:	f7fc fc44 	bl	8000adc <ILI9341_Draw_String>

			ILI9341_Draw_String(34, 28 + 35 * i, WHITE, DARKGREY, _dab_service_list[i + start_station_index].name, 2);
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	00da      	lsls	r2, r3, #3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	331c      	adds	r3, #28
 8004262:	4619      	mov	r1, r3
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	461a      	mov	r2, r3
 800426c:	2334      	movs	r3, #52	; 0x34
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004274:	4413      	add	r3, r2
 8004276:	461a      	mov	r2, r3
 8004278:	2302      	movs	r3, #2
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	9200      	str	r2, [sp, #0]
 800427e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004286:	2022      	movs	r0, #34	; 0x22
 8004288:	f7fc fc28 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(171, 28 + 35 * i, WHITE, DARKGREY, dab_channels_names[_dab_service_list[i + start_station_index].freq_id], 2);
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	00da      	lsls	r2, r3, #3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	331c      	adds	r3, #28
 800429a:	4619      	mov	r1, r3
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	461a      	mov	r2, r3
 80042a4:	2334      	movs	r3, #52	; 0x34
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ac:	4413      	add	r3, r2
 80042ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b6b      	ldr	r3, [pc, #428]	; (8004464 <Display_stations_list_data+0x314>)
 80042b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ba:	2202      	movs	r2, #2
 80042bc:	9201      	str	r2, [sp, #4]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80042c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042c8:	20ab      	movs	r0, #171	; 0xab
 80042ca:	f7fc fc07 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(202, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq / 1000, itoa_buffer, 10), 2);
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00da      	lsls	r2, r3, #3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	331c      	adds	r3, #28
 80042dc:	461c      	mov	r4, r3
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	461a      	mov	r2, r3
 80042e6:	2334      	movs	r3, #52	; 0x34
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
 80042ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ee:	4413      	add	r3, r2
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	4a5d      	ldr	r2, [pc, #372]	; (8004468 <Display_stations_list_data+0x318>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	099b      	lsrs	r3, r3, #6
 80042fa:	220a      	movs	r2, #10
 80042fc:	4957      	ldr	r1, [pc, #348]	; (800445c <Display_stations_list_data+0x30c>)
 80042fe:	4618      	mov	r0, r3
 8004300:	f009 f834 	bl	800d36c <itoa>
 8004304:	4603      	mov	r3, r0
 8004306:	2202      	movs	r2, #2
 8004308:	9201      	str	r2, [sp, #4]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004314:	4621      	mov	r1, r4
 8004316:	20ca      	movs	r0, #202	; 0xca
 8004318:	f7fc fbe0 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(225, 28 + 35 * i, WHITE, DARKGREY, ".", 2);
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	00da      	lsls	r2, r3, #3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	331c      	adds	r3, #28
 800432a:	4619      	mov	r1, r3
 800432c:	2302      	movs	r3, #2
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	4b4b      	ldr	r3, [pc, #300]	; (8004460 <Display_stations_list_data+0x310>)
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800433c:	20e1      	movs	r0, #225	; 0xe1
 800433e:	f7fc fbcd 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(232, 28 + 35 * i, WHITE, DARKGREY, itoa(_dab_service_list[i + start_station_index].freq % 1000, itoa_buffer, 10), 2);
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00da      	lsls	r2, r3, #3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	331c      	adds	r3, #28
 8004350:	461c      	mov	r4, r3
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	461a      	mov	r2, r3
 800435a:	2334      	movs	r3, #52	; 0x34
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004362:	4413      	add	r3, r2
 8004364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004366:	4b40      	ldr	r3, [pc, #256]	; (8004468 <Display_stations_list_data+0x318>)
 8004368:	fba3 1302 	umull	r1, r3, r3, r2
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	220a      	movs	r2, #10
 800437a:	4938      	ldr	r1, [pc, #224]	; (800445c <Display_stations_list_data+0x30c>)
 800437c:	4618      	mov	r0, r3
 800437e:	f008 fff5 	bl	800d36c <itoa>
 8004382:	4603      	mov	r3, r0
 8004384:	2202      	movs	r2, #2
 8004386:	9201      	str	r2, [sp, #4]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800438e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004392:	4621      	mov	r1, r4
 8004394:	20e8      	movs	r0, #232	; 0xe8
 8004396:	f7fc fba1 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(259, 28 + 35 * i, WHITE, DARKGREY, "MHz", 2);
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00da      	lsls	r2, r3, #3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	331c      	adds	r3, #28
 80043a8:	4619      	mov	r1, r3
 80043aa:	2302      	movs	r3, #2
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	4b2f      	ldr	r3, [pc, #188]	; (800446c <Display_stations_list_data+0x31c>)
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ba:	f240 1003 	movw	r0, #259	; 0x103
 80043be:	f7fc fb8d 	bl	8000adc <ILI9341_Draw_String>
		for(uint8_t i = 0; i < 5; i++)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	3301      	adds	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	f67f aed1 	bls.w	8004172 <Display_stations_list_data+0x22>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
	}

}
 80043d0:	e03b      	b.n	800444a <Display_stations_list_data+0x2fa>
		ILI9341_Draw_String(8, 28, WHITE, DARKGREY, "Service list is empty!", 2);
 80043d2:	2302      	movs	r3, #2
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	4b26      	ldr	r3, [pc, #152]	; (8004470 <Display_stations_list_data+0x320>)
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e2:	211c      	movs	r1, #28
 80043e4:	2008      	movs	r0, #8
 80043e6:	f7fc fb79 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 63, WHITE, DARKGREY, "Select DAB BAND SCAN", 2);
 80043ea:	2302      	movs	r3, #2
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <Display_stations_list_data+0x324>)
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80043f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043fa:	213f      	movs	r1, #63	; 0x3f
 80043fc:	2008      	movs	r0, #8
 80043fe:	f7fc fb6d 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 98, WHITE, DARKGREY, "from SETTINGS screen", 2);
 8004402:	2302      	movs	r3, #2
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <Display_stations_list_data+0x328>)
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800440e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004412:	2162      	movs	r1, #98	; 0x62
 8004414:	2008      	movs	r0, #8
 8004416:	f7fc fb61 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 133, WHITE, DARKGREY, "to find services available", 2);
 800441a:	2302      	movs	r3, #2
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	4b17      	ldr	r3, [pc, #92]	; (800447c <Display_stations_list_data+0x32c>)
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800442a:	2185      	movs	r1, #133	; 0x85
 800442c:	2008      	movs	r0, #8
 800442e:	f7fc fb55 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(8, 168, WHITE, DARKGREY, "in your localization.", 2);
 8004432:	2302      	movs	r3, #2
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <Display_stations_list_data+0x330>)
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800443e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004442:	21a8      	movs	r1, #168	; 0xa8
 8004444:	2008      	movs	r0, #8
 8004446:	f7fc fb49 	bl	8000adc <ILI9341_Draw_String>
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004454:	b004      	add	sp, #16
 8004456:	4770      	bx	lr
 8004458:	0800e264 	.word	0x0800e264
 800445c:	20006d8c 	.word	0x20006d8c
 8004460:	0800e274 	.word	0x0800e274
 8004464:	200000ac 	.word	0x200000ac
 8004468:	10624dd3 	.word	0x10624dd3
 800446c:	0800e278 	.word	0x0800e278
 8004470:	0800e3ac 	.word	0x0800e3ac
 8004474:	0800e3c4 	.word	0x0800e3c4
 8004478:	0800e3dc 	.word	0x0800e3dc
 800447c:	0800e3f4 	.word	0x0800e3f4
 8004480:	0800e410 	.word	0x0800e410

08004484 <Display_scanning_screen_background>:

void Display_scanning_screen_background()
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af02      	add	r7, sp, #8
	Display_clear_screen();
 800448a:	f7ff fa93 	bl	80039b4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB SCANNING", 2); //Naglowek
 800448e:	2302      	movs	r3, #2
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	4b64      	ldr	r3, [pc, #400]	; (8004624 <Display_scanning_screen_background+0x1a0>)
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2300      	movs	r3, #0
 8004498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800449c:	2101      	movs	r1, #1
 800449e:	2005      	movs	r0, #5
 80044a0:	f7fc fb1c 	bl	8000adc <ILI9341_Draw_String>

	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 80044a4:	2328      	movs	r3, #40	; 0x28
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	f240 133b 	movw	r3, #315	; 0x13b
 80044ac:	2214      	movs	r2, #20
 80044ae:	2105      	movs	r1, #5
 80044b0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044b4:	f7fc fa70 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning DAB Band...", 2);
 80044b8:	2302      	movs	r3, #2
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	4b5a      	ldr	r3, [pc, #360]	; (8004628 <Display_scanning_screen_background+0x1a4>)
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80044c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c8:	2117      	movs	r1, #23
 80044ca:	2050      	movs	r0, #80	; 0x50
 80044cc:	f7fc fb06 	bl	8000adc <ILI9341_Draw_String>

	//Scanning status bar background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80044d0:	2341      	movs	r3, #65	; 0x41
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	f240 133b 	movw	r3, #315	; 0x13b
 80044d8:	222d      	movs	r2, #45	; 0x2d
 80044da:	2105      	movs	r1, #5
 80044dc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044e0:	f7fc fa5a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 80044e4:	235a      	movs	r3, #90	; 0x5a
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	f240 133b 	movw	r3, #315	; 0x13b
 80044ec:	2246      	movs	r2, #70	; 0x46
 80044ee:	2105      	movs	r1, #5
 80044f0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80044f4:	f7fc fa50 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "Ensembles found:", 2);
 80044f8:	2302      	movs	r3, #2
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	4b4b      	ldr	r3, [pc, #300]	; (800462c <Display_scanning_screen_background+0x1a8>)
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004508:	2149      	movs	r1, #73	; 0x49
 800450a:	200a      	movs	r0, #10
 800450c:	f7fc fae6 	bl	8000adc <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004510:	2373      	movs	r3, #115	; 0x73
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	f240 133b 	movw	r3, #315	; 0x13b
 8004518:	225f      	movs	r2, #95	; 0x5f
 800451a:	2105      	movs	r1, #5
 800451c:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004520:	f7fc fa3a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "Services found:", 2);
 8004524:	2302      	movs	r3, #2
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	4b41      	ldr	r3, [pc, #260]	; (8004630 <Display_scanning_screen_background+0x1ac>)
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004534:	2162      	movs	r1, #98	; 0x62
 8004536:	200a      	movs	r0, #10
 8004538:	f7fc fad0 	bl	8000adc <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 800453c:	238c      	movs	r3, #140	; 0x8c
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	f240 133b 	movw	r3, #315	; 0x13b
 8004544:	2278      	movs	r2, #120	; 0x78
 8004546:	2105      	movs	r1, #5
 8004548:	f647 30ef 	movw	r0, #31727	; 0x7bef
 800454c:	f7fc fa24 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "Frequency ID:", 2);
 8004550:	2302      	movs	r3, #2
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	4b37      	ldr	r3, [pc, #220]	; (8004634 <Display_scanning_screen_background+0x1b0>)
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800455c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004560:	217b      	movs	r1, #123	; 0x7b
 8004562:	200a      	movs	r0, #10
 8004564:	f7fc faba 	bl	8000adc <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 8004568:	23a5      	movs	r3, #165	; 0xa5
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	f240 133b 	movw	r3, #315	; 0x13b
 8004570:	2291      	movs	r2, #145	; 0x91
 8004572:	2105      	movs	r1, #5
 8004574:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004578:	f7fc fa0e 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "Frequency:", 2);
 800457c:	2302      	movs	r3, #2
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <Display_scanning_screen_background+0x1b4>)
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800458c:	2194      	movs	r1, #148	; 0x94
 800458e:	200a      	movs	r0, #10
 8004590:	f7fc faa4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(120, 148, WHITE, DARKGREY, ".", 2);
 8004594:	2302      	movs	r3, #2
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	4b28      	ldr	r3, [pc, #160]	; (800463c <Display_scanning_screen_background+0x1b8>)
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a4:	2194      	movs	r1, #148	; 0x94
 80045a6:	2078      	movs	r0, #120	; 0x78
 80045a8:	f7fc fa98 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(158, 148, WHITE, DARKGREY, "MHz", 2);
 80045ac:	2302      	movs	r3, #2
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	4b23      	ldr	r3, [pc, #140]	; (8004640 <Display_scanning_screen_background+0x1bc>)
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045bc:	2194      	movs	r1, #148	; 0x94
 80045be:	209e      	movs	r0, #158	; 0x9e
 80045c0:	f7fc fa8c 	bl	8000adc <ILI9341_Draw_String>


	//channel name
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 80045c4:	23be      	movs	r3, #190	; 0xbe
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	f240 133b 	movw	r3, #315	; 0x13b
 80045cc:	22aa      	movs	r2, #170	; 0xaa
 80045ce:	2105      	movs	r1, #5
 80045d0:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80045d4:	f7fc f9e0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "Channel:", 2);
 80045d8:	2302      	movs	r3, #2
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <Display_scanning_screen_background+0x1c0>)
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80045e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045e8:	21ad      	movs	r1, #173	; 0xad
 80045ea:	200a      	movs	r0, #10
 80045ec:	f7fc fa76 	bl	8000adc <ILI9341_Draw_String>

	//Cancel Button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 80045f0:	23eb      	movs	r3, #235	; 0xeb
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	f240 133b 	movw	r3, #315	; 0x13b
 80045f8:	22c3      	movs	r2, #195	; 0xc3
 80045fa:	2105      	movs	r1, #5
 80045fc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004600:	f7fc f9ca 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "CANCEL", 2);
 8004604:	2302      	movs	r3, #2
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <Display_scanning_screen_background+0x1c4>)
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004614:	21cf      	movs	r1, #207	; 0xcf
 8004616:	2082      	movs	r0, #130	; 0x82
 8004618:	f7fc fa60 	bl	8000adc <ILI9341_Draw_String>

}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	0800e428 	.word	0x0800e428
 8004628:	0800e438 	.word	0x0800e438
 800462c:	0800e450 	.word	0x0800e450
 8004630:	0800e464 	.word	0x0800e464
 8004634:	0800e474 	.word	0x0800e474
 8004638:	0800e484 	.word	0x0800e484
 800463c:	0800e274 	.word	0x0800e274
 8004640:	0800e278 	.word	0x0800e278
 8004644:	0800e490 	.word	0x0800e490
 8004648:	0800e49c 	.word	0x0800e49c

0800464c <Display_scanning_screen_data>:

void Display_scanning_screen_data(dab_digrad_status_t _digrad_status, dab_management_t _dab_management)
{
 800464c:	b084      	sub	sp, #16
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af02      	add	r7, sp, #8
 8004654:	f107 0c08 	add.w	ip, r7, #8
 8004658:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Scanning status bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 10, 50, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 60);
 800465c:	7d3b      	ldrb	r3, [r7, #20]
 800465e:	3301      	adds	r3, #1
 8004660:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800466c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004670:	330a      	adds	r3, #10
 8004672:	461a      	mov	r2, r3
 8004674:	233c      	movs	r3, #60	; 0x3c
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	2232      	movs	r2, #50	; 0x32
 800467c:	210a      	movs	r1, #10
 800467e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004682:	f7fc f989 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(WHITE, 10 + (300 * (_digrad_status.tune_index + 1)) / _dab_management.freq_cnt, 50, 310, 60);
 8004686:	7d3b      	ldrb	r3, [r7, #20]
 8004688:	3301      	adds	r3, #1
 800468a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004696:	fb93 f3f2 	sdiv	r3, r3, r2
 800469a:	330a      	adds	r3, #10
 800469c:	4619      	mov	r1, r3
 800469e:	233c      	movs	r3, #60	; 0x3c
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	f44f 739b 	mov.w	r3, #310	; 0x136
 80046a6:	2232      	movs	r2, #50	; 0x32
 80046a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80046ac:	f7fc f974 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//Found ensembles background
	ILI9341_Draw_String(145, 73, WHITE, DARKGREY, itoa(_dab_management.total_ensembles, itoa_buffer, 10), 2);
 80046b0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80046b4:	220a      	movs	r2, #10
 80046b6:	4954      	ldr	r1, [pc, #336]	; (8004808 <Display_scanning_screen_data+0x1bc>)
 80046b8:	4618      	mov	r0, r3
 80046ba:	f008 fe57 	bl	800d36c <itoa>
 80046be:	4603      	mov	r3, r0
 80046c0:	2202      	movs	r2, #2
 80046c2:	9201      	str	r2, [sp, #4]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ce:	2149      	movs	r1, #73	; 0x49
 80046d0:	2091      	movs	r0, #145	; 0x91
 80046d2:	f7fc fa03 	bl	8000adc <ILI9341_Draw_String>

	//Found stations background
	ILI9341_Draw_String(135, 98, WHITE, DARKGREY, itoa(_dab_management.total_services, itoa_buffer, 10), 2);
 80046d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80046da:	220a      	movs	r2, #10
 80046dc:	494a      	ldr	r1, [pc, #296]	; (8004808 <Display_scanning_screen_data+0x1bc>)
 80046de:	4618      	mov	r0, r3
 80046e0:	f008 fe44 	bl	800d36c <itoa>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2202      	movs	r2, #2
 80046e8:	9201      	str	r2, [sp, #4]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80046f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f4:	2162      	movs	r1, #98	; 0x62
 80046f6:	2087      	movs	r0, #135	; 0x87
 80046f8:	f7fc f9f0 	bl	8000adc <ILI9341_Draw_String>

	//Actual freq ID
	ILI9341_Draw_String(118, 123, WHITE, DARKGREY, itoa(_digrad_status.tune_index + 1, itoa_buffer, 10), 2);
 80046fc:	7d3b      	ldrb	r3, [r7, #20]
 80046fe:	3301      	adds	r3, #1
 8004700:	220a      	movs	r2, #10
 8004702:	4941      	ldr	r1, [pc, #260]	; (8004808 <Display_scanning_screen_data+0x1bc>)
 8004704:	4618      	mov	r0, r3
 8004706:	f008 fe31 	bl	800d36c <itoa>
 800470a:	4603      	mov	r3, r0
 800470c:	2202      	movs	r2, #2
 800470e:	9201      	str	r2, [sp, #4]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471a:	217b      	movs	r1, #123	; 0x7b
 800471c:	2076      	movs	r0, #118	; 0x76
 800471e:	f7fc f9dd 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(137, 123, WHITE, DARKGREY, "/", 2);
 8004722:	2302      	movs	r3, #2
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	4b39      	ldr	r3, [pc, #228]	; (800480c <Display_scanning_screen_data+0x1c0>)
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800472e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004732:	217b      	movs	r1, #123	; 0x7b
 8004734:	2089      	movs	r0, #137	; 0x89
 8004736:	f7fc f9d1 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(147, 123, WHITE, DARKGREY, itoa(_dab_management.freq_cnt, itoa_buffer, 10), 2);
 800473a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800473e:	220a      	movs	r2, #10
 8004740:	4931      	ldr	r1, [pc, #196]	; (8004808 <Display_scanning_screen_data+0x1bc>)
 8004742:	4618      	mov	r0, r3
 8004744:	f008 fe12 	bl	800d36c <itoa>
 8004748:	4603      	mov	r3, r0
 800474a:	2202      	movs	r2, #2
 800474c:	9201      	str	r2, [sp, #4]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004758:	217b      	movs	r1, #123	; 0x7b
 800475a:	2093      	movs	r0, #147	; 0x93
 800475c:	f7fc f9be 	bl	8000adc <ILI9341_Draw_String>

	//Freq value
	ILI9341_Draw_String(95, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <Display_scanning_screen_data+0x1c4>)
 8004764:	fba2 2303 	umull	r2, r3, r2, r3
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	220a      	movs	r2, #10
 800476c:	4926      	ldr	r1, [pc, #152]	; (8004808 <Display_scanning_screen_data+0x1bc>)
 800476e:	4618      	mov	r0, r3
 8004770:	f008 fdfc 	bl	800d36c <itoa>
 8004774:	4603      	mov	r3, r0
 8004776:	2202      	movs	r2, #2
 8004778:	9201      	str	r2, [sp, #4]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004784:	2194      	movs	r1, #148	; 0x94
 8004786:	205f      	movs	r0, #95	; 0x5f
 8004788:	f7fc f9a8 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(129, 148, WHITE, DARKGREY, itoa(_digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4b20      	ldr	r3, [pc, #128]	; (8004810 <Display_scanning_screen_data+0x1c4>)
 8004790:	fba3 1302 	umull	r1, r3, r3, r2
 8004794:	099b      	lsrs	r3, r3, #6
 8004796:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	220a      	movs	r2, #10
 80047a2:	4919      	ldr	r1, [pc, #100]	; (8004808 <Display_scanning_screen_data+0x1bc>)
 80047a4:	4618      	mov	r0, r3
 80047a6:	f008 fde1 	bl	800d36c <itoa>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2202      	movs	r2, #2
 80047ae:	9201      	str	r2, [sp, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ba:	2194      	movs	r1, #148	; 0x94
 80047bc:	2081      	movs	r0, #129	; 0x81
 80047be:	f7fc f98d 	bl	8000adc <ILI9341_Draw_String>

	//channel name
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, "       ", 2);
 80047c2:	2302      	movs	r3, #2
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	4b13      	ldr	r3, [pc, #76]	; (8004814 <Display_scanning_screen_data+0x1c8>)
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047d2:	21ad      	movs	r1, #173	; 0xad
 80047d4:	2050      	movs	r0, #80	; 0x50
 80047d6:	f7fc f981 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(80, 173, WHITE, DARKGREY, dab_channels_names[_digrad_status.tune_index], 2);
 80047da:	7d3b      	ldrb	r3, [r7, #20]
 80047dc:	461a      	mov	r2, r3
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <Display_scanning_screen_data+0x1cc>)
 80047e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e4:	2202      	movs	r2, #2
 80047e6:	9201      	str	r2, [sp, #4]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80047ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047f2:	21ad      	movs	r1, #173	; 0xad
 80047f4:	2050      	movs	r0, #80	; 0x50
 80047f6:	f7fc f971 	bl	8000adc <ILI9341_Draw_String>


}
 80047fa:	bf00      	nop
 80047fc:	46bd      	mov	sp, r7
 80047fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004802:	b004      	add	sp, #16
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20006d8c 	.word	0x20006d8c
 800480c:	0800e38c 	.word	0x0800e38c
 8004810:	10624dd3 	.word	0x10624dd3
 8004814:	0800e4a4 	.word	0x0800e4a4
 8004818:	200000ac 	.word	0x200000ac

0800481c <Display_scanning_screen_complete>:

void Display_scanning_screen_complete()
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af02      	add	r7, sp, #8
	//SCANNING DAB STRING background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 40);
 8004822:	2328      	movs	r3, #40	; 0x28
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	f240 133b 	movw	r3, #315	; 0x13b
 800482a:	2214      	movs	r2, #20
 800482c:	2105      	movs	r1, #5
 800482e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004832:	f7fc f8b1 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(80, 23, WHITE, DARKGREY, "Scanning complete!     ", 2);
 8004836:	2302      	movs	r3, #2
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <Display_scanning_screen_complete+0x64>)
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004846:	2117      	movs	r1, #23
 8004848:	2050      	movs	r0, #80	; 0x50
 800484a:	f7fc f947 	bl	8000adc <ILI9341_Draw_String>

	//Cancel Button switches to OK button
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 315, 235);
 800484e:	23eb      	movs	r3, #235	; 0xeb
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	f240 133b 	movw	r3, #315	; 0x13b
 8004856:	22c3      	movs	r2, #195	; 0xc3
 8004858:	2105      	movs	r1, #5
 800485a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800485e:	f7fc f89b 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(130, 207, WHITE, ORANGE, "  OK  ", 2);
 8004862:	2302      	movs	r3, #2
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <Display_scanning_screen_complete+0x68>)
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800486e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004872:	21cf      	movs	r1, #207	; 0xcf
 8004874:	2082      	movs	r0, #130	; 0x82
 8004876:	f7fc f931 	bl	8000adc <ILI9341_Draw_String>

}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	0800e4ac 	.word	0x0800e4ac
 8004884:	0800e4c4 	.word	0x0800e4c4

08004888 <Display_dab_digrad_status_background>:

void Display_dab_digrad_status_background()
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af02      	add	r7, sp, #8
	Display_clear_screen();
 800488e:	f7ff f891 	bl	80039b4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "DAB RECEIVE STATUS", 2); //Naglowek
 8004892:	2302      	movs	r3, #2
 8004894:	9301      	str	r3, [sp, #4]
 8004896:	4bb4      	ldr	r3, [pc, #720]	; (8004b68 <Display_dab_digrad_status_background+0x2e0>)
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a0:	2101      	movs	r1, #1
 80048a2:	2005      	movs	r0, #5
 80048a4:	f7fc f91a 	bl	8000adc <ILI9341_Draw_String>

	//Valid Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 105, 40);
 80048a8:	2328      	movs	r3, #40	; 0x28
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2369      	movs	r3, #105	; 0x69
 80048ae:	2214      	movs	r2, #20
 80048b0:	2105      	movs	r1, #5
 80048b2:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048b6:	f7fc f86f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//Acquire Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 110, 20, 210, 40);
 80048ba:	2328      	movs	r3, #40	; 0x28
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	23d2      	movs	r3, #210	; 0xd2
 80048c0:	2214      	movs	r2, #20
 80048c2:	216e      	movs	r1, #110	; 0x6e
 80048c4:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048c8:	f7fc f866 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//FIC Error Flag Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 215, 20, 315, 40);
 80048cc:	2328      	movs	r3, #40	; 0x28
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	f240 133b 	movw	r3, #315	; 0x13b
 80048d4:	2214      	movs	r2, #20
 80048d6:	21d7      	movs	r1, #215	; 0xd7
 80048d8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048dc:	f7fc f85c 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	//RSSI Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 45, 315, 65);
 80048e0:	2341      	movs	r3, #65	; 0x41
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	f240 133b 	movw	r3, #315	; 0x13b
 80048e8:	222d      	movs	r2, #45	; 0x2d
 80048ea:	2105      	movs	r1, #5
 80048ec:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80048f0:	f7fc f852 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 48, WHITE, DARKGREY, "RSSI", 2);
 80048f4:	2302      	movs	r3, #2
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	4b9c      	ldr	r3, [pc, #624]	; (8004b6c <Display_dab_digrad_status_background+0x2e4>)
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004904:	2130      	movs	r1, #48	; 0x30
 8004906:	200a      	movs	r0, #10
 8004908:	f7fc f8e8 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(90, 48, WHITE, DARKGREY, "dBuV", 2);
 800490c:	2302      	movs	r3, #2
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	4b97      	ldr	r3, [pc, #604]	; (8004b70 <Display_dab_digrad_status_background+0x2e8>)
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800491c:	2130      	movs	r1, #48	; 0x30
 800491e:	205a      	movs	r0, #90	; 0x5a
 8004920:	f7fc f8dc 	bl	8000adc <ILI9341_Draw_String>
	//SNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 70, 315, 90);
 8004924:	235a      	movs	r3, #90	; 0x5a
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	f240 133b 	movw	r3, #315	; 0x13b
 800492c:	2246      	movs	r2, #70	; 0x46
 800492e:	2105      	movs	r1, #5
 8004930:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004934:	f7fc f830 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 73, WHITE, DARKGREY, "SNR", 2);
 8004938:	2302      	movs	r3, #2
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	4b8d      	ldr	r3, [pc, #564]	; (8004b74 <Display_dab_digrad_status_background+0x2ec>)
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004948:	2149      	movs	r1, #73	; 0x49
 800494a:	200a      	movs	r0, #10
 800494c:	f7fc f8c6 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 73, WHITE, DARKGREY, "dB", 2);
 8004950:	2302      	movs	r3, #2
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	4b88      	ldr	r3, [pc, #544]	; (8004b78 <Display_dab_digrad_status_background+0x2f0>)
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800495c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004960:	2149      	movs	r1, #73	; 0x49
 8004962:	2069      	movs	r0, #105	; 0x69
 8004964:	f7fc f8ba 	bl	8000adc <ILI9341_Draw_String>
	//CNR Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 95, 315, 115);
 8004968:	2373      	movs	r3, #115	; 0x73
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	f240 133b 	movw	r3, #315	; 0x13b
 8004970:	225f      	movs	r2, #95	; 0x5f
 8004972:	2105      	movs	r1, #5
 8004974:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004978:	f7fc f80e 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 98, WHITE, DARKGREY, "CNR", 2);
 800497c:	2302      	movs	r3, #2
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	4b7e      	ldr	r3, [pc, #504]	; (8004b7c <Display_dab_digrad_status_background+0x2f4>)
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800498c:	2162      	movs	r1, #98	; 0x62
 800498e:	200a      	movs	r0, #10
 8004990:	f7fc f8a4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(105, 98, WHITE, DARKGREY, "dB", 2);
 8004994:	2302      	movs	r3, #2
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	4b77      	ldr	r3, [pc, #476]	; (8004b78 <Display_dab_digrad_status_background+0x2f0>)
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049a4:	2162      	movs	r1, #98	; 0x62
 80049a6:	2069      	movs	r0, #105	; 0x69
 80049a8:	f7fc f898 	bl	8000adc <ILI9341_Draw_String>
	//FIC Quality Background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 120, 315, 140);
 80049ac:	238c      	movs	r3, #140	; 0x8c
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	f240 133b 	movw	r3, #315	; 0x13b
 80049b4:	2278      	movs	r2, #120	; 0x78
 80049b6:	2105      	movs	r1, #5
 80049b8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80049bc:	f7fb ffec 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 123, WHITE, DARKGREY, "QUALITY", 2);
 80049c0:	2302      	movs	r3, #2
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	4b6e      	ldr	r3, [pc, #440]	; (8004b80 <Display_dab_digrad_status_background+0x2f8>)
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049d0:	217b      	movs	r1, #123	; 0x7b
 80049d2:	200a      	movs	r0, #10
 80049d4:	f7fc f882 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(110, 123, WHITE, DARKGREY, "%", 2);
 80049d8:	2302      	movs	r3, #2
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <Display_dab_digrad_status_background+0x2fc>)
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80049e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049e8:	217b      	movs	r1, #123	; 0x7b
 80049ea:	206e      	movs	r0, #110	; 0x6e
 80049ec:	f7fc f876 	bl	8000adc <ILI9341_Draw_String>
	//Frequency info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 145, 315, 165);
 80049f0:	23a5      	movs	r3, #165	; 0xa5
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	f240 133b 	movw	r3, #315	; 0x13b
 80049f8:	2291      	movs	r2, #145	; 0x91
 80049fa:	2105      	movs	r1, #5
 80049fc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004a00:	f7fb ffca 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 148, WHITE, DARKGREY, "FREQUENCY", 2);
 8004a04:	2302      	movs	r3, #2
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	4b5f      	ldr	r3, [pc, #380]	; (8004b88 <Display_dab_digrad_status_background+0x300>)
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a14:	2194      	movs	r1, #148	; 0x94
 8004a16:	200a      	movs	r0, #10
 8004a18:	f7fc f860 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(113, 148, WHITE, DARKGREY, ".", 2);
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	4b5a      	ldr	r3, [pc, #360]	; (8004b8c <Display_dab_digrad_status_background+0x304>)
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a2c:	2194      	movs	r1, #148	; 0x94
 8004a2e:	2071      	movs	r0, #113	; 0x71
 8004a30:	f7fc f854 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(148, 148, WHITE, DARKGREY, "MHz", 2);
 8004a34:	2302      	movs	r3, #2
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	4b55      	ldr	r3, [pc, #340]	; (8004b90 <Display_dab_digrad_status_background+0x308>)
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a44:	2194      	movs	r1, #148	; 0x94
 8004a46:	2094      	movs	r0, #148	; 0x94
 8004a48:	f7fc f848 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(183, 148, WHITE, DARKGREY, "FREQ", 2);
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <Display_dab_digrad_status_background+0x30c>)
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a5c:	2194      	movs	r1, #148	; 0x94
 8004a5e:	20b7      	movs	r0, #183	; 0xb7
 8004a60:	f7fc f83c 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(219, 148, WHITE, DARKGREY, "INDEX", 2);
 8004a64:	2302      	movs	r3, #2
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	4b4b      	ldr	r3, [pc, #300]	; (8004b98 <Display_dab_digrad_status_background+0x310>)
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a74:	2194      	movs	r1, #148	; 0x94
 8004a76:	20db      	movs	r0, #219	; 0xdb
 8004a78:	f7fc f830 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(283, 148, WHITE, DARKGREY, "/", 2);
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	4b46      	ldr	r3, [pc, #280]	; (8004b9c <Display_dab_digrad_status_background+0x314>)
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a8c:	2194      	movs	r1, #148	; 0x94
 8004a8e:	f240 101b 	movw	r0, #283	; 0x11b
 8004a92:	f7fc f823 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(293, 148, WHITE, DARKGREY, "40", 2);
 8004a96:	2302      	movs	r3, #2
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <Display_dab_digrad_status_background+0x318>)
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aa6:	2194      	movs	r1, #148	; 0x94
 8004aa8:	f240 1025 	movw	r0, #293	; 0x125
 8004aac:	f7fc f816 	bl	8000adc <ILI9341_Draw_String>
	//Other info background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 170, 315, 190);
 8004ab0:	23be      	movs	r3, #190	; 0xbe
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	f240 133b 	movw	r3, #315	; 0x13b
 8004ab8:	22aa      	movs	r2, #170	; 0xaa
 8004aba:	2105      	movs	r1, #5
 8004abc:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8004ac0:	f7fb ff6a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(10, 173, WHITE, DARKGREY, "TRIM CAP", 2);
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <Display_dab_digrad_status_background+0x31c>)
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ad4:	21ad      	movs	r1, #173	; 0xad
 8004ad6:	200a      	movs	r0, #10
 8004ad8:	f7fc f800 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(125, 173, WHITE, DARKGREY, "pF", 2);
 8004adc:	2302      	movs	r3, #2
 8004ade:	9301      	str	r3, [sp, #4]
 8004ae0:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <Display_dab_digrad_status_background+0x320>)
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aec:	21ad      	movs	r1, #173	; 0xad
 8004aee:	207d      	movs	r0, #125	; 0x7d
 8004af0:	f7fb fff4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(180, 173, WHITE, DARKGREY, "BER", 2);
 8004af4:	2302      	movs	r3, #2
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	4b2c      	ldr	r3, [pc, #176]	; (8004bac <Display_dab_digrad_status_background+0x324>)
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b04:	21ad      	movs	r1, #173	; 0xad
 8004b06:	20b4      	movs	r0, #180	; 0xb4
 8004b08:	f7fb ffe8 	bl	8000adc <ILI9341_Draw_String>
	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8004b0c:	23eb      	movs	r3, #235	; 0xeb
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	239d      	movs	r3, #157	; 0x9d
 8004b12:	22c3      	movs	r2, #195	; 0xc3
 8004b14:	2105      	movs	r1, #5
 8004b16:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b1a:	f7fb ff3d 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8004b1e:	23eb      	movs	r3, #235	; 0xeb
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	f240 133b 	movw	r3, #315	; 0x13b
 8004b26:	22c3      	movs	r2, #195	; 0xc3
 8004b28:	21a3      	movs	r1, #163	; 0xa3
 8004b2a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8004b2e:	f7fb ff33 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 207, WHITE, ORANGE, "SERVICE LIST", 2);
 8004b32:	2302      	movs	r3, #2
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <Display_dab_digrad_status_background+0x328>)
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b42:	21cf      	movs	r1, #207	; 0xcf
 8004b44:	2023      	movs	r0, #35	; 0x23
 8004b46:	f7fb ffc9 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(205, 207, WHITE, ORANGE, "SETTINGS", 2);
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <Display_dab_digrad_status_background+0x32c>)
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b5a:	21cf      	movs	r1, #207	; 0xcf
 8004b5c:	20cd      	movs	r0, #205	; 0xcd
 8004b5e:	f7fb ffbd 	bl	8000adc <ILI9341_Draw_String>
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	0800e4cc 	.word	0x0800e4cc
 8004b6c:	0800e4e0 	.word	0x0800e4e0
 8004b70:	0800e4e8 	.word	0x0800e4e8
 8004b74:	0800e4f0 	.word	0x0800e4f0
 8004b78:	0800e4f4 	.word	0x0800e4f4
 8004b7c:	0800e4f8 	.word	0x0800e4f8
 8004b80:	0800e4fc 	.word	0x0800e4fc
 8004b84:	0800e504 	.word	0x0800e504
 8004b88:	0800e508 	.word	0x0800e508
 8004b8c:	0800e274 	.word	0x0800e274
 8004b90:	0800e278 	.word	0x0800e278
 8004b94:	0800e514 	.word	0x0800e514
 8004b98:	0800e51c 	.word	0x0800e51c
 8004b9c:	0800e38c 	.word	0x0800e38c
 8004ba0:	0800e524 	.word	0x0800e524
 8004ba4:	0800e528 	.word	0x0800e528
 8004ba8:	0800e534 	.word	0x0800e534
 8004bac:	0800e538 	.word	0x0800e538
 8004bb0:	0800e250 	.word	0x0800e250
 8004bb4:	0800e244 	.word	0x0800e244

08004bb8 <Display_dab_digrad_status_data>:

void Display_dab_digrad_status_data(dab_digrad_status_t digrad_status)
{
 8004bb8:	b084      	sub	sp, #16
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af02      	add	r7, sp, #8
 8004bc0:	f107 0c18 	add.w	ip, r7, #24
 8004bc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t color;
	uint32_t cap_val_ff = digrad_status.read_ant_cap * 250;
 8004bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bca:	461a      	mov	r2, r3
 8004bcc:	23fa      	movs	r3, #250	; 0xfa
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	60bb      	str	r3, [r7, #8]
	uint8_t cap_val_pf_int = cap_val_ff / 1000;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4a33      	ldr	r2, [pc, #204]	; (8004ca4 <Display_dab_digrad_status_data+0xec>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	099b      	lsrs	r3, r3, #6
 8004bde:	71fb      	strb	r3, [r7, #7]
	uint16_t cap_val_pf_frac = cap_val_ff % 1000;
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <Display_dab_digrad_status_data+0xec>)
 8004be4:	fba3 1302 	umull	r1, r3, r3, r2
 8004be8:	099b      	lsrs	r3, r3, #6
 8004bea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	80bb      	strh	r3, [r7, #4]

	if(!display_freeze)
 8004bf6:	4b2c      	ldr	r3, [pc, #176]	; (8004ca8 <Display_dab_digrad_status_data+0xf0>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8331 	bne.w	8005262 <Display_dab_digrad_status_data+0x6aa>
	{

		//Valid
		if(digrad_status.valid)
 8004c00:	7e7b      	ldrb	r3, [r7, #25]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <Display_dab_digrad_status_data+0x6e>
		{
			ILI9341_Draw_String(35, 23, GREEN, DARKGREY, "VALID", 2);
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <Display_dab_digrad_status_data+0xf4>)
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c18:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c1c:	2117      	movs	r1, #23
 8004c1e:	2023      	movs	r0, #35	; 0x23
 8004c20:	f7fb ff5c 	bl	8000adc <ILI9341_Draw_String>
 8004c24:	e00b      	b.n	8004c3e <Display_dab_digrad_status_data+0x86>
		}
		else ILI9341_Draw_String(35, 23, RED, DARKGREY, "VALID", 2);
 8004c26:	2302      	movs	r3, #2
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	4b20      	ldr	r3, [pc, #128]	; (8004cac <Display_dab_digrad_status_data+0xf4>)
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c32:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c36:	2117      	movs	r1, #23
 8004c38:	2023      	movs	r0, #35	; 0x23
 8004c3a:	f7fb ff4f 	bl	8000adc <ILI9341_Draw_String>
		//ACQ
		if(digrad_status.acq)
 8004c3e:	7e7b      	ldrb	r3, [r7, #25]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00c      	beq.n	8004c64 <Display_dab_digrad_status_data+0xac>
		{
			ILI9341_Draw_String(133, 23, GREEN, DARKGREY, "ACQUIRE", 2);
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <Display_dab_digrad_status_data+0xf8>)
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c56:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c5a:	2117      	movs	r1, #23
 8004c5c:	2085      	movs	r0, #133	; 0x85
 8004c5e:	f7fb ff3d 	bl	8000adc <ILI9341_Draw_String>
 8004c62:	e00b      	b.n	8004c7c <Display_dab_digrad_status_data+0xc4>
		}
		else ILI9341_Draw_String(133, 23, RED, DARKGREY, "ACQUIRE", 2);
 8004c64:	2302      	movs	r3, #2
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <Display_dab_digrad_status_data+0xf8>)
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c70:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c74:	2117      	movs	r1, #23
 8004c76:	2085      	movs	r0, #133	; 0x85
 8004c78:	f7fb ff30 	bl	8000adc <ILI9341_Draw_String>
		//FIC_ERROR
		if(digrad_status.fic_err)
 8004c7c:	7e7b      	ldrb	r3, [r7, #25]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d017      	beq.n	8004cb8 <Display_dab_digrad_status_data+0x100>
		{
			ILI9341_Draw_String(228, 23, RED, DARKGREY, "FIC ERROR", 2);
 8004c88:	2302      	movs	r3, #2
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <Display_dab_digrad_status_data+0xfc>)
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004c94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c98:	2117      	movs	r1, #23
 8004c9a:	20e4      	movs	r0, #228	; 0xe4
 8004c9c:	f7fb ff1e 	bl	8000adc <ILI9341_Draw_String>
 8004ca0:	e016      	b.n	8004cd0 <Display_dab_digrad_status_data+0x118>
 8004ca2:	bf00      	nop
 8004ca4:	10624dd3 	.word	0x10624dd3
 8004ca8:	20006dcc 	.word	0x20006dcc
 8004cac:	0800e53c 	.word	0x0800e53c
 8004cb0:	0800e544 	.word	0x0800e544
 8004cb4:	0800e54c 	.word	0x0800e54c
		}
		else ILI9341_Draw_String(228, 23, GREEN, DARKGREY, "FIC ERROR", 2);
 8004cb8:	2302      	movs	r3, #2
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	4bb6      	ldr	r3, [pc, #728]	; (8004f98 <Display_dab_digrad_status_data+0x3e0>)
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004cc4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004cc8:	2117      	movs	r1, #23
 8004cca:	20e4      	movs	r0, #228	; 0xe4
 8004ccc:	f7fb ff06 	bl	8000adc <ILI9341_Draw_String>


		//RSSI
		if(digrad_status.rssi <= 13) 								color = RED;
 8004cd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cd4:	2b0d      	cmp	r3, #13
 8004cd6:	dc02      	bgt.n	8004cde <Display_dab_digrad_status_data+0x126>
 8004cd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004cdc:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 26) && (digrad_status.rssi > 13)) color = ORANGE;
 8004cde:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004ce2:	2b1a      	cmp	r3, #26
 8004ce4:	dc06      	bgt.n	8004cf4 <Display_dab_digrad_status_data+0x13c>
 8004ce6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cea:	2b0d      	cmp	r3, #13
 8004cec:	dd02      	ble.n	8004cf4 <Display_dab_digrad_status_data+0x13c>
 8004cee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004cf2:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 39) && (digrad_status.rssi > 26)) color = YELLOW;
 8004cf4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cf8:	2b27      	cmp	r3, #39	; 0x27
 8004cfa:	dc06      	bgt.n	8004d0a <Display_dab_digrad_status_data+0x152>
 8004cfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d00:	2b1a      	cmp	r3, #26
 8004d02:	dd02      	ble.n	8004d0a <Display_dab_digrad_status_data+0x152>
 8004d04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d08:	60fb      	str	r3, [r7, #12]
		if((digrad_status.rssi <= 52) && (digrad_status.rssi > 39)) color = GREENYELLOW;
 8004d0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d0e:	2b34      	cmp	r3, #52	; 0x34
 8004d10:	dc06      	bgt.n	8004d20 <Display_dab_digrad_status_data+0x168>
 8004d12:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d16:	2b27      	cmp	r3, #39	; 0x27
 8004d18:	dd02      	ble.n	8004d20 <Display_dab_digrad_status_data+0x168>
 8004d1a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d1e:	60fb      	str	r3, [r7, #12]
		if(digrad_status.rssi > 52) 								color = GREEN;
 8004d20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d24:	2b34      	cmp	r3, #52	; 0x34
 8004d26:	dd02      	ble.n	8004d2e <Display_dab_digrad_status_data+0x176>
 8004d28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d2c:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, "   ", 2);
 8004d2e:	2302      	movs	r3, #2
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	4b9a      	ldr	r3, [pc, #616]	; (8004f9c <Display_dab_digrad_status_data+0x3e4>)
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d3e:	2130      	movs	r1, #48	; 0x30
 8004d40:	2032      	movs	r0, #50	; 0x32
 8004d42:	f7fb fecb 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 48, WHITE, DARKGREY, itoa(digrad_status.rssi, itoa_buffer, 10), 2);
 8004d46:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d4a:	220a      	movs	r2, #10
 8004d4c:	4994      	ldr	r1, [pc, #592]	; (8004fa0 <Display_dab_digrad_status_data+0x3e8>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f008 fb0c 	bl	800d36c <itoa>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2202      	movs	r2, #2
 8004d58:	9201      	str	r2, [sp, #4]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d64:	2130      	movs	r1, #48	; 0x30
 8004d66:	2032      	movs	r0, #50	; 0x32
 8004d68:	f7fb feb8 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 50, 130 + (digrad_status.rssi * 180)/64, 60);
 8004d6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d70:	461a      	mov	r2, r3
 8004d72:	23b4      	movs	r3, #180	; 0xb4
 8004d74:	fb02 f303 	mul.w	r3, r2, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	da00      	bge.n	8004d7e <Display_dab_digrad_status_data+0x1c6>
 8004d7c:	333f      	adds	r3, #63	; 0x3f
 8004d7e:	119b      	asrs	r3, r3, #6
 8004d80:	3382      	adds	r3, #130	; 0x82
 8004d82:	461a      	mov	r2, r3
 8004d84:	233c      	movs	r3, #60	; 0x3c
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	2232      	movs	r2, #50	; 0x32
 8004d8c:	2182      	movs	r1, #130	; 0x82
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7fb fe02 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.rssi * 180)/64, 50, 310, 60);
 8004d94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	23b4      	movs	r3, #180	; 0xb4
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	da00      	bge.n	8004da6 <Display_dab_digrad_status_data+0x1ee>
 8004da4:	333f      	adds	r3, #63	; 0x3f
 8004da6:	119b      	asrs	r3, r3, #6
 8004da8:	3382      	adds	r3, #130	; 0x82
 8004daa:	4619      	mov	r1, r3
 8004dac:	233c      	movs	r3, #60	; 0x3c
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004db4:	2232      	movs	r2, #50	; 0x32
 8004db6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004dba:	f7fb fded 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//SNR
		if(digrad_status.snr <= 4) 									color = RED;
 8004dbe:	7efb      	ldrb	r3, [r7, #27]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d802      	bhi.n	8004dca <Display_dab_digrad_status_data+0x212>
 8004dc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dc8:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 8) && (digrad_status.snr > 4)) 	color = ORANGE;
 8004dca:	7efb      	ldrb	r3, [r7, #27]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d805      	bhi.n	8004ddc <Display_dab_digrad_status_data+0x224>
 8004dd0:	7efb      	ldrb	r3, [r7, #27]
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d902      	bls.n	8004ddc <Display_dab_digrad_status_data+0x224>
 8004dd6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004dda:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 12) && (digrad_status.snr > 8)) 	color = YELLOW;
 8004ddc:	7efb      	ldrb	r3, [r7, #27]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d805      	bhi.n	8004dee <Display_dab_digrad_status_data+0x236>
 8004de2:	7efb      	ldrb	r3, [r7, #27]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d902      	bls.n	8004dee <Display_dab_digrad_status_data+0x236>
 8004de8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004dec:	60fb      	str	r3, [r7, #12]
		if((digrad_status.snr <= 16) && (digrad_status.snr > 12)) 	color = GREENYELLOW;
 8004dee:	7efb      	ldrb	r3, [r7, #27]
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d805      	bhi.n	8004e00 <Display_dab_digrad_status_data+0x248>
 8004df4:	7efb      	ldrb	r3, [r7, #27]
 8004df6:	2b0c      	cmp	r3, #12
 8004df8:	d902      	bls.n	8004e00 <Display_dab_digrad_status_data+0x248>
 8004dfa:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004dfe:	60fb      	str	r3, [r7, #12]
		if(digrad_status.snr > 16) 									color = GREEN;
 8004e00:	7efb      	ldrb	r3, [r7, #27]
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d902      	bls.n	8004e0c <Display_dab_digrad_status_data+0x254>
 8004e06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e0a:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, "   ", 2);
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	4b62      	ldr	r3, [pc, #392]	; (8004f9c <Display_dab_digrad_status_data+0x3e4>)
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e1c:	2149      	movs	r1, #73	; 0x49
 8004e1e:	2032      	movs	r0, #50	; 0x32
 8004e20:	f7fb fe5c 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 73, WHITE, DARKGREY, itoa(digrad_status.snr, itoa_buffer, 10), 2);
 8004e24:	7efb      	ldrb	r3, [r7, #27]
 8004e26:	220a      	movs	r2, #10
 8004e28:	495d      	ldr	r1, [pc, #372]	; (8004fa0 <Display_dab_digrad_status_data+0x3e8>)
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f008 fa9e 	bl	800d36c <itoa>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2202      	movs	r2, #2
 8004e34:	9201      	str	r2, [sp, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e40:	2149      	movs	r1, #73	; 0x49
 8004e42:	2032      	movs	r0, #50	; 0x32
 8004e44:	f7fb fe4a 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 75, 130 + (digrad_status.snr * 180)/20, 85);
 8004e48:	7efb      	ldrb	r3, [r7, #27]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	3382      	adds	r3, #130	; 0x82
 8004e54:	461a      	mov	r2, r3
 8004e56:	2355      	movs	r3, #85	; 0x55
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	224b      	movs	r2, #75	; 0x4b
 8004e5e:	2182      	movs	r1, #130	; 0x82
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7fb fd99 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.snr * 180)/20, 75, 310, 85);
 8004e66:	7efb      	ldrb	r3, [r7, #27]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3382      	adds	r3, #130	; 0x82
 8004e72:	4619      	mov	r1, r3
 8004e74:	2355      	movs	r3, #85	; 0x55
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004e7c:	224b      	movs	r2, #75	; 0x4b
 8004e7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e82:	f7fb fd89 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//CNR
		if(digrad_status.cnr <= 11) 								color = RED;
 8004e86:	7f7b      	ldrb	r3, [r7, #29]
 8004e88:	2b0b      	cmp	r3, #11
 8004e8a:	d802      	bhi.n	8004e92 <Display_dab_digrad_status_data+0x2da>
 8004e8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e90:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 22) && (digrad_status.cnr > 11)) 	color = ORANGE;
 8004e92:	7f7b      	ldrb	r3, [r7, #29]
 8004e94:	2b16      	cmp	r3, #22
 8004e96:	d805      	bhi.n	8004ea4 <Display_dab_digrad_status_data+0x2ec>
 8004e98:	7f7b      	ldrb	r3, [r7, #29]
 8004e9a:	2b0b      	cmp	r3, #11
 8004e9c:	d902      	bls.n	8004ea4 <Display_dab_digrad_status_data+0x2ec>
 8004e9e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ea2:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 33) && (digrad_status.cnr > 22)) 	color = YELLOW;
 8004ea4:	7f7b      	ldrb	r3, [r7, #29]
 8004ea6:	2b21      	cmp	r3, #33	; 0x21
 8004ea8:	d805      	bhi.n	8004eb6 <Display_dab_digrad_status_data+0x2fe>
 8004eaa:	7f7b      	ldrb	r3, [r7, #29]
 8004eac:	2b16      	cmp	r3, #22
 8004eae:	d902      	bls.n	8004eb6 <Display_dab_digrad_status_data+0x2fe>
 8004eb0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004eb4:	60fb      	str	r3, [r7, #12]
		if((digrad_status.cnr <= 44) && (digrad_status.cnr > 33)) 	color = GREENYELLOW;
 8004eb6:	7f7b      	ldrb	r3, [r7, #29]
 8004eb8:	2b2c      	cmp	r3, #44	; 0x2c
 8004eba:	d805      	bhi.n	8004ec8 <Display_dab_digrad_status_data+0x310>
 8004ebc:	7f7b      	ldrb	r3, [r7, #29]
 8004ebe:	2b21      	cmp	r3, #33	; 0x21
 8004ec0:	d902      	bls.n	8004ec8 <Display_dab_digrad_status_data+0x310>
 8004ec2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ec6:	60fb      	str	r3, [r7, #12]
		if(digrad_status.cnr > 44) 									color = GREEN;
 8004ec8:	7f7b      	ldrb	r3, [r7, #29]
 8004eca:	2b2c      	cmp	r3, #44	; 0x2c
 8004ecc:	d902      	bls.n	8004ed4 <Display_dab_digrad_status_data+0x31c>
 8004ece:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ed2:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, "   ", 2);
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <Display_dab_digrad_status_data+0x3e4>)
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ee4:	2162      	movs	r1, #98	; 0x62
 8004ee6:	2032      	movs	r0, #50	; 0x32
 8004ee8:	f7fb fdf8 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(50, 98, WHITE, DARKGREY, itoa(digrad_status.cnr, itoa_buffer, 10), 2);
 8004eec:	7f7b      	ldrb	r3, [r7, #29]
 8004eee:	220a      	movs	r2, #10
 8004ef0:	492b      	ldr	r1, [pc, #172]	; (8004fa0 <Display_dab_digrad_status_data+0x3e8>)
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f008 fa3a 	bl	800d36c <itoa>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2202      	movs	r2, #2
 8004efc:	9201      	str	r2, [sp, #4]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f08:	2162      	movs	r1, #98	; 0x62
 8004f0a:	2032      	movs	r0, #50	; 0x32
 8004f0c:	f7fb fde6 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 100, 130 + (digrad_status.cnr * 180)/54, 110);
 8004f10:	7f7b      	ldrb	r3, [r7, #29]
 8004f12:	461a      	mov	r2, r3
 8004f14:	23b4      	movs	r3, #180	; 0xb4
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	4a22      	ldr	r2, [pc, #136]	; (8004fa4 <Display_dab_digrad_status_data+0x3ec>)
 8004f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f20:	1112      	asrs	r2, r2, #4
 8004f22:	17db      	asrs	r3, r3, #31
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	3382      	adds	r3, #130	; 0x82
 8004f28:	461a      	mov	r2, r3
 8004f2a:	236e      	movs	r3, #110	; 0x6e
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	2264      	movs	r2, #100	; 0x64
 8004f32:	2182      	movs	r1, #130	; 0x82
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7fb fd2f 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.cnr * 180)/54, 100, 310, 110);
 8004f3a:	7f7b      	ldrb	r3, [r7, #29]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	23b4      	movs	r3, #180	; 0xb4
 8004f40:	fb02 f303 	mul.w	r3, r2, r3
 8004f44:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <Display_dab_digrad_status_data+0x3ec>)
 8004f46:	fb82 1203 	smull	r1, r2, r2, r3
 8004f4a:	1112      	asrs	r2, r2, #4
 8004f4c:	17db      	asrs	r3, r3, #31
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	3382      	adds	r3, #130	; 0x82
 8004f52:	4619      	mov	r1, r3
 8004f54:	236e      	movs	r3, #110	; 0x6e
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004f5c:	2264      	movs	r2, #100	; 0x64
 8004f5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004f62:	f7fb fd19 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//FIC QUALITY
		if(digrad_status.fic_quality <= 20) 										color = RED;
 8004f66:	7f3b      	ldrb	r3, [r7, #28]
 8004f68:	2b14      	cmp	r3, #20
 8004f6a:	d802      	bhi.n	8004f72 <Display_dab_digrad_status_data+0x3ba>
 8004f6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f70:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 40) && (digrad_status.fic_quality > 20)) 	color = ORANGE;
 8004f72:	7f3b      	ldrb	r3, [r7, #28]
 8004f74:	2b28      	cmp	r3, #40	; 0x28
 8004f76:	d805      	bhi.n	8004f84 <Display_dab_digrad_status_data+0x3cc>
 8004f78:	7f3b      	ldrb	r3, [r7, #28]
 8004f7a:	2b14      	cmp	r3, #20
 8004f7c:	d902      	bls.n	8004f84 <Display_dab_digrad_status_data+0x3cc>
 8004f7e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f82:	60fb      	str	r3, [r7, #12]
		if((digrad_status.fic_quality <= 60) && (digrad_status.fic_quality > 40)) 	color = YELLOW;
 8004f84:	7f3b      	ldrb	r3, [r7, #28]
 8004f86:	2b3c      	cmp	r3, #60	; 0x3c
 8004f88:	d80e      	bhi.n	8004fa8 <Display_dab_digrad_status_data+0x3f0>
 8004f8a:	7f3b      	ldrb	r3, [r7, #28]
 8004f8c:	2b28      	cmp	r3, #40	; 0x28
 8004f8e:	d90b      	bls.n	8004fa8 <Display_dab_digrad_status_data+0x3f0>
 8004f90:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e007      	b.n	8004fa8 <Display_dab_digrad_status_data+0x3f0>
 8004f98:	0800e54c 	.word	0x0800e54c
 8004f9c:	0800e558 	.word	0x0800e558
 8004fa0:	20006d8c 	.word	0x20006d8c
 8004fa4:	4bda12f7 	.word	0x4bda12f7
		if((digrad_status.fic_quality <= 80) && (digrad_status.fic_quality > 60)) 	color = GREENYELLOW;
 8004fa8:	7f3b      	ldrb	r3, [r7, #28]
 8004faa:	2b50      	cmp	r3, #80	; 0x50
 8004fac:	d805      	bhi.n	8004fba <Display_dab_digrad_status_data+0x402>
 8004fae:	7f3b      	ldrb	r3, [r7, #28]
 8004fb0:	2b3c      	cmp	r3, #60	; 0x3c
 8004fb2:	d902      	bls.n	8004fba <Display_dab_digrad_status_data+0x402>
 8004fb4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004fb8:	60fb      	str	r3, [r7, #12]
		if(digrad_status.fic_quality > 80) 											color = GREEN;
 8004fba:	7f3b      	ldrb	r3, [r7, #28]
 8004fbc:	2b50      	cmp	r3, #80	; 0x50
 8004fbe:	d902      	bls.n	8004fc6 <Display_dab_digrad_status_data+0x40e>
 8004fc0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fc4:	60fb      	str	r3, [r7, #12]
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, "   ", 2);
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	4ba9      	ldr	r3, [pc, #676]	; (8005270 <Display_dab_digrad_status_data+0x6b8>)
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fd6:	217b      	movs	r1, #123	; 0x7b
 8004fd8:	204b      	movs	r0, #75	; 0x4b
 8004fda:	f7fb fd7f 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(75, 123, WHITE, DARKGREY, itoa(digrad_status.fic_quality, itoa_buffer, 10), 2);
 8004fde:	7f3b      	ldrb	r3, [r7, #28]
 8004fe0:	220a      	movs	r2, #10
 8004fe2:	49a4      	ldr	r1, [pc, #656]	; (8005274 <Display_dab_digrad_status_data+0x6bc>)
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f008 f9c1 	bl	800d36c <itoa>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2202      	movs	r2, #2
 8004fee:	9201      	str	r2, [sp, #4]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ffa:	217b      	movs	r1, #123	; 0x7b
 8004ffc:	204b      	movs	r0, #75	; 0x4b
 8004ffe:	f7fb fd6d 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_Filled_Rectangle(color, 130, 125, 130 + (digrad_status.fic_quality * 180)/100, 135);
 8005002:	7f3b      	ldrb	r3, [r7, #28]
 8005004:	461a      	mov	r2, r3
 8005006:	23b4      	movs	r3, #180	; 0xb4
 8005008:	fb02 f303 	mul.w	r3, r2, r3
 800500c:	4a9a      	ldr	r2, [pc, #616]	; (8005278 <Display_dab_digrad_status_data+0x6c0>)
 800500e:	fb82 1203 	smull	r1, r2, r2, r3
 8005012:	1152      	asrs	r2, r2, #5
 8005014:	17db      	asrs	r3, r3, #31
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	3382      	adds	r3, #130	; 0x82
 800501a:	461a      	mov	r2, r3
 800501c:	2387      	movs	r3, #135	; 0x87
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	227d      	movs	r2, #125	; 0x7d
 8005024:	2182      	movs	r1, #130	; 0x82
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7fb fcb6 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
		ILI9341_Draw_Filled_Rectangle(WHITE, 130 + (digrad_status.fic_quality * 180)/100, 125, 310, 135);
 800502c:	7f3b      	ldrb	r3, [r7, #28]
 800502e:	461a      	mov	r2, r3
 8005030:	23b4      	movs	r3, #180	; 0xb4
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	4a90      	ldr	r2, [pc, #576]	; (8005278 <Display_dab_digrad_status_data+0x6c0>)
 8005038:	fb82 1203 	smull	r1, r2, r2, r3
 800503c:	1152      	asrs	r2, r2, #5
 800503e:	17db      	asrs	r3, r3, #31
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	3382      	adds	r3, #130	; 0x82
 8005044:	4619      	mov	r1, r3
 8005046:	2387      	movs	r3, #135	; 0x87
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800504e:	227d      	movs	r2, #125	; 0x7d
 8005050:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005054:	f7fb fca0 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

		//TUNE FREQ
		ILI9341_Draw_String(91, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq / 1000, itoa_buffer, 10), 2);
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	4a88      	ldr	r2, [pc, #544]	; (800527c <Display_dab_digrad_status_data+0x6c4>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	099b      	lsrs	r3, r3, #6
 8005062:	220a      	movs	r2, #10
 8005064:	4983      	ldr	r1, [pc, #524]	; (8005274 <Display_dab_digrad_status_data+0x6bc>)
 8005066:	4618      	mov	r0, r3
 8005068:	f008 f980 	bl	800d36c <itoa>
 800506c:	4603      	mov	r3, r0
 800506e:	2202      	movs	r2, #2
 8005070:	9201      	str	r2, [sp, #4]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800507c:	2194      	movs	r1, #148	; 0x94
 800507e:	205b      	movs	r0, #91	; 0x5b
 8005080:	f7fb fd2c 	bl	8000adc <ILI9341_Draw_String>
		ILI9341_Draw_String(120, 148, WHITE, DARKGREY, itoa(digrad_status.tune_freq % 1000, itoa_buffer, 10), 2);
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	4b7d      	ldr	r3, [pc, #500]	; (800527c <Display_dab_digrad_status_data+0x6c4>)
 8005088:	fba3 1302 	umull	r1, r3, r3, r2
 800508c:	099b      	lsrs	r3, r3, #6
 800508e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	220a      	movs	r2, #10
 800509a:	4976      	ldr	r1, [pc, #472]	; (8005274 <Display_dab_digrad_status_data+0x6bc>)
 800509c:	4618      	mov	r0, r3
 800509e:	f008 f965 	bl	800d36c <itoa>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2202      	movs	r2, #2
 80050a6:	9201      	str	r2, [sp, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b2:	2194      	movs	r1, #148	; 0x94
 80050b4:	2078      	movs	r0, #120	; 0x78
 80050b6:	f7fb fd11 	bl	8000adc <ILI9341_Draw_String>

		//TUNE INDEX
		if(digrad_status.tune_index < 10)
 80050ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050be:	2b09      	cmp	r3, #9
 80050c0:	d821      	bhi.n	8005106 <Display_dab_digrad_status_data+0x54e>
		{
			ILI9341_Draw_String(264, 148, WHITE, DARKGREY, "0", 2);
 80050c2:	2302      	movs	r3, #2
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	4b6e      	ldr	r3, [pc, #440]	; (8005280 <Display_dab_digrad_status_data+0x6c8>)
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d2:	2194      	movs	r1, #148	; 0x94
 80050d4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80050d8:	f7fb fd00 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(273, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 80050dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050e0:	220a      	movs	r2, #10
 80050e2:	4964      	ldr	r1, [pc, #400]	; (8005274 <Display_dab_digrad_status_data+0x6bc>)
 80050e4:	4618      	mov	r0, r3
 80050e6:	f008 f941 	bl	800d36c <itoa>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2202      	movs	r2, #2
 80050ee:	9201      	str	r2, [sp, #4]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80050f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050fa:	2194      	movs	r1, #148	; 0x94
 80050fc:	f240 1011 	movw	r0, #273	; 0x111
 8005100:	f7fb fcec 	bl	8000adc <ILI9341_Draw_String>
 8005104:	e013      	b.n	800512e <Display_dab_digrad_status_data+0x576>
		}
		else ILI9341_Draw_String(264, 148, WHITE, DARKGREY, itoa(digrad_status.tune_index, itoa_buffer, 10), 2);
 8005106:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800510a:	220a      	movs	r2, #10
 800510c:	4959      	ldr	r1, [pc, #356]	; (8005274 <Display_dab_digrad_status_data+0x6bc>)
 800510e:	4618      	mov	r0, r3
 8005110:	f008 f92c 	bl	800d36c <itoa>
 8005114:	4603      	mov	r3, r0
 8005116:	2202      	movs	r2, #2
 8005118:	9201      	str	r2, [sp, #4]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005124:	2194      	movs	r1, #148	; 0x94
 8005126:	f44f 7084 	mov.w	r0, #264	; 0x108
 800512a:	f7fb fcd7 	bl	8000adc <ILI9341_Draw_String>

		//ANT CAP TRIM
		if(cap_val_pf_int < 10)
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	2b09      	cmp	r3, #9
 8005132:	d81d      	bhi.n	8005170 <Display_dab_digrad_status_data+0x5b8>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, " ", 2);
 8005134:	2302      	movs	r3, #2
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	4b52      	ldr	r3, [pc, #328]	; (8005284 <Display_dab_digrad_status_data+0x6cc>)
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005144:	21ad      	movs	r1, #173	; 0xad
 8005146:	204f      	movs	r0, #79	; 0x4f
 8005148:	f7fb fcc8 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(87, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	220a      	movs	r2, #10
 8005150:	4948      	ldr	r1, [pc, #288]	; (8005274 <Display_dab_digrad_status_data+0x6bc>)
 8005152:	4618      	mov	r0, r3
 8005154:	f008 f90a 	bl	800d36c <itoa>
 8005158:	4603      	mov	r3, r0
 800515a:	2202      	movs	r2, #2
 800515c:	9201      	str	r2, [sp, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005168:	21ad      	movs	r1, #173	; 0xad
 800516a:	2057      	movs	r0, #87	; 0x57
 800516c:	f7fb fcb6 	bl	8000adc <ILI9341_Draw_String>
		}
		if(cap_val_pf_int >= 10)
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	2b09      	cmp	r3, #9
 8005174:	d911      	bls.n	800519a <Display_dab_digrad_status_data+0x5e2>
		{
			ILI9341_Draw_String(79, 173, WHITE, DARKGREY, itoa(cap_val_pf_int, itoa_buffer, 10), 2);
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	220a      	movs	r2, #10
 800517a:	493e      	ldr	r1, [pc, #248]	; (8005274 <Display_dab_digrad_status_data+0x6bc>)
 800517c:	4618      	mov	r0, r3
 800517e:	f008 f8f5 	bl	800d36c <itoa>
 8005182:	4603      	mov	r3, r0
 8005184:	2202      	movs	r2, #2
 8005186:	9201      	str	r2, [sp, #4]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800518e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005192:	21ad      	movs	r1, #173	; 0xad
 8005194:	204f      	movs	r0, #79	; 0x4f
 8005196:	f7fb fca1 	bl	8000adc <ILI9341_Draw_String>
		}
		ILI9341_Draw_String(95, 173, WHITE, DARKGREY, ".", 2);
 800519a:	2302      	movs	r3, #2
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	4b3a      	ldr	r3, [pc, #232]	; (8005288 <Display_dab_digrad_status_data+0x6d0>)
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051aa:	21ad      	movs	r1, #173	; 0xad
 80051ac:	205f      	movs	r0, #95	; 0x5f
 80051ae:	f7fb fc95 	bl	8000adc <ILI9341_Draw_String>
		switch(cap_val_pf_frac)
 80051b2:	88bb      	ldrh	r3, [r7, #4]
 80051b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d023      	beq.n	8005204 <Display_dab_digrad_status_data+0x64c>
 80051bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80051c0:	4293      	cmp	r3, r2
 80051c2:	dc2c      	bgt.n	800521e <Display_dab_digrad_status_data+0x666>
 80051c4:	2bfa      	cmp	r3, #250	; 0xfa
 80051c6:	d003      	beq.n	80051d0 <Display_dab_digrad_status_data+0x618>
 80051c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051cc:	d00d      	beq.n	80051ea <Display_dab_digrad_status_data+0x632>
 80051ce:	e026      	b.n	800521e <Display_dab_digrad_status_data+0x666>
		{
		case 250:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "25", 2);
 80051d0:	2302      	movs	r3, #2
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	4b2d      	ldr	r3, [pc, #180]	; (800528c <Display_dab_digrad_status_data+0x6d4>)
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051e0:	21ad      	movs	r1, #173	; 0xad
 80051e2:	2067      	movs	r0, #103	; 0x67
 80051e4:	f7fb fc7a 	bl	8000adc <ILI9341_Draw_String>
			break;
 80051e8:	e026      	b.n	8005238 <Display_dab_digrad_status_data+0x680>
		case 500:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "50", 2);
 80051ea:	2302      	movs	r3, #2
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	4b28      	ldr	r3, [pc, #160]	; (8005290 <Display_dab_digrad_status_data+0x6d8>)
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80051f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051fa:	21ad      	movs	r1, #173	; 0xad
 80051fc:	2067      	movs	r0, #103	; 0x67
 80051fe:	f7fb fc6d 	bl	8000adc <ILI9341_Draw_String>
			break;
 8005202:	e019      	b.n	8005238 <Display_dab_digrad_status_data+0x680>
		case 750:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "75", 2);
 8005204:	2302      	movs	r3, #2
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	4b22      	ldr	r3, [pc, #136]	; (8005294 <Display_dab_digrad_status_data+0x6dc>)
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005214:	21ad      	movs	r1, #173	; 0xad
 8005216:	2067      	movs	r0, #103	; 0x67
 8005218:	f7fb fc60 	bl	8000adc <ILI9341_Draw_String>
			break;
 800521c:	e00c      	b.n	8005238 <Display_dab_digrad_status_data+0x680>
		default:
			ILI9341_Draw_String(103, 173, WHITE, DARKGREY, "00", 2);
 800521e:	2302      	movs	r3, #2
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <Display_dab_digrad_status_data+0x6e0>)
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800522a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522e:	21ad      	movs	r1, #173	; 0xad
 8005230:	2067      	movs	r0, #103	; 0x67
 8005232:	f7fb fc53 	bl	8000adc <ILI9341_Draw_String>
			break;
 8005236:	bf00      	nop
		}

		//BER
		ILI9341_Draw_String(215, 173, WHITE, DARKGREY, itoa((digrad_status.fic_err_cnt / digrad_status.fic_bit_cnt), itoa_buffer, 10), 2);
 8005238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	220a      	movs	r2, #10
 8005242:	490c      	ldr	r1, [pc, #48]	; (8005274 <Display_dab_digrad_status_data+0x6bc>)
 8005244:	4618      	mov	r0, r3
 8005246:	f008 f891 	bl	800d36c <itoa>
 800524a:	4603      	mov	r3, r0
 800524c:	2202      	movs	r2, #2
 800524e:	9201      	str	r2, [sp, #4]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800525a:	21ad      	movs	r1, #173	; 0xad
 800525c:	20d7      	movs	r0, #215	; 0xd7
 800525e:	f7fb fc3d 	bl	8000adc <ILI9341_Draw_String>
	}
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800526c:	b004      	add	sp, #16
 800526e:	4770      	bx	lr
 8005270:	0800e558 	.word	0x0800e558
 8005274:	20006d8c 	.word	0x20006d8c
 8005278:	51eb851f 	.word	0x51eb851f
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	0800e55c 	.word	0x0800e55c
 8005284:	0800e264 	.word	0x0800e264
 8005288:	0800e274 	.word	0x0800e274
 800528c:	0800e560 	.word	0x0800e560
 8005290:	0800e564 	.word	0x0800e564
 8005294:	0800e568 	.word	0x0800e568
 8005298:	0800e56c 	.word	0x0800e56c

0800529c <Display_settings_screen_background>:

void Display_settings_screen_background()
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af02      	add	r7, sp, #8
	Display_clear_screen();
 80052a2:	f7fe fb87 	bl	80039b4 <Display_clear_screen>

	ILI9341_Draw_String(5, 1, WHITE, BLACK, "SYSTEM SETTINGS", 2); //Naglowek
 80052a6:	2302      	movs	r3, #2
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	4b6d      	ldr	r3, [pc, #436]	; (8005460 <Display_settings_screen_background+0x1c4>)
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052b4:	2101      	movs	r1, #1
 80052b6:	2005      	movs	r0, #5
 80052b8:	f7fb fc10 	bl	8000adc <ILI9341_Draw_String>

	//actual vol & backlight background
	ILI9341_Draw_Filled_Rectangle(DARKGREY, 5, 20, 315, 55);
 80052bc:	2337      	movs	r3, #55	; 0x37
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	f240 133b 	movw	r3, #315	; 0x13b
 80052c4:	2214      	movs	r2, #20
 80052c6:	2105      	movs	r1, #5
 80052c8:	f647 30ef 	movw	r0, #31727	; 0x7bef
 80052cc:	f7fb fb64 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(55, 22, WHITE, DARKGREY, "VOLUME", 2);
 80052d0:	2302      	movs	r3, #2
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	4b63      	ldr	r3, [pc, #396]	; (8005464 <Display_settings_screen_background+0x1c8>)
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80052dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052e0:	2116      	movs	r1, #22
 80052e2:	2037      	movs	r0, #55	; 0x37
 80052e4:	f7fb fbfa 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(206, 22, WHITE, DARKGREY, "BACKLIGHT", 2);
 80052e8:	2302      	movs	r3, #2
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	4b5e      	ldr	r3, [pc, #376]	; (8005468 <Display_settings_screen_background+0x1cc>)
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80052f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f8:	2116      	movs	r1, #22
 80052fa:	20ce      	movs	r0, #206	; 0xce
 80052fc:	f7fb fbee 	bl	8000adc <ILI9341_Draw_String>

	//Volume UP/DOWN buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 60, 157, 100);
 8005300:	2364      	movs	r3, #100	; 0x64
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	239d      	movs	r3, #157	; 0x9d
 8005306:	223c      	movs	r2, #60	; 0x3c
 8005308:	2105      	movs	r1, #5
 800530a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800530e:	f7fb fb43 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 60, 315, 100);
 8005312:	2364      	movs	r3, #100	; 0x64
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	f240 133b 	movw	r3, #315	; 0x13b
 800531a:	223c      	movs	r2, #60	; 0x3c
 800531c:	21a3      	movs	r1, #163	; 0xa3
 800531e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005322:	f7fb fb39 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(54, 72, WHITE, ORANGE, "VOLUME -", 2);
 8005326:	2302      	movs	r3, #2
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	4b50      	ldr	r3, [pc, #320]	; (800546c <Display_settings_screen_background+0x1d0>)
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005336:	2148      	movs	r1, #72	; 0x48
 8005338:	2036      	movs	r0, #54	; 0x36
 800533a:	f7fb fbcf 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(211, 72, WHITE, ORANGE, "VOLUME +", 2);
 800533e:	2302      	movs	r3, #2
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	4b4b      	ldr	r3, [pc, #300]	; (8005470 <Display_settings_screen_background+0x1d4>)
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800534a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800534e:	2148      	movs	r1, #72	; 0x48
 8005350:	20d3      	movs	r0, #211	; 0xd3
 8005352:	f7fb fbc3 	bl	8000adc <ILI9341_Draw_String>

	//BACKLIGHT +/- buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 105, 157, 145);
 8005356:	2391      	movs	r3, #145	; 0x91
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	239d      	movs	r3, #157	; 0x9d
 800535c:	2269      	movs	r2, #105	; 0x69
 800535e:	2105      	movs	r1, #5
 8005360:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005364:	f7fb fb18 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 105, 315, 145);
 8005368:	2391      	movs	r3, #145	; 0x91
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	f240 133b 	movw	r3, #315	; 0x13b
 8005370:	2269      	movs	r2, #105	; 0x69
 8005372:	21a3      	movs	r1, #163	; 0xa3
 8005374:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005378:	f7fb fb0e 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(35, 117, WHITE, ORANGE, "BACKLIGHT -", 2);
 800537c:	2302      	movs	r3, #2
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	4b3c      	ldr	r3, [pc, #240]	; (8005474 <Display_settings_screen_background+0x1d8>)
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800538c:	2175      	movs	r1, #117	; 0x75
 800538e:	2023      	movs	r0, #35	; 0x23
 8005390:	f7fb fba4 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(193, 117, WHITE, ORANGE, "BACKLIGHT +", 2);
 8005394:	2302      	movs	r3, #2
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	4b37      	ldr	r3, [pc, #220]	; (8005478 <Display_settings_screen_background+0x1dc>)
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053a4:	2175      	movs	r1, #117	; 0x75
 80053a6:	20c1      	movs	r0, #193	; 0xc1
 80053a8:	f7fb fb98 	bl	8000adc <ILI9341_Draw_String>

	//scan & touch calibrate buttons
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 150, 157, 190);
 80053ac:	23be      	movs	r3, #190	; 0xbe
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	239d      	movs	r3, #157	; 0x9d
 80053b2:	2296      	movs	r2, #150	; 0x96
 80053b4:	2105      	movs	r1, #5
 80053b6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053ba:	f7fb faed 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 150, 315, 190);
 80053be:	23be      	movs	r3, #190	; 0xbe
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	f240 133b 	movw	r3, #315	; 0x13b
 80053c6:	2296      	movs	r2, #150	; 0x96
 80053c8:	21a3      	movs	r1, #163	; 0xa3
 80053ca:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80053ce:	f7fb fae3 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(32, 162, WHITE, ORANGE, "SCAN DAB BAND", 2);
 80053d2:	2302      	movs	r3, #2
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	4b29      	ldr	r3, [pc, #164]	; (800547c <Display_settings_screen_background+0x1e0>)
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053e2:	21a2      	movs	r1, #162	; 0xa2
 80053e4:	2020      	movs	r0, #32
 80053e6:	f7fb fb79 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(168, 162, WHITE, ORANGE, "TOUCH CALIBRATION", 2);
 80053ea:	2302      	movs	r3, #2
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	4b24      	ldr	r3, [pc, #144]	; (8005480 <Display_settings_screen_background+0x1e4>)
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053fa:	21a2      	movs	r1, #162	; 0xa2
 80053fc:	20a8      	movs	r0, #168	; 0xa8
 80053fe:	f7fb fb6d 	bl	8000adc <ILI9341_Draw_String>

	//buttons to other menus
	ILI9341_Draw_Filled_Rectangle(ORANGE, 5, 195, 157, 235);
 8005402:	23eb      	movs	r3, #235	; 0xeb
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	239d      	movs	r3, #157	; 0x9d
 8005408:	22c3      	movs	r2, #195	; 0xc3
 800540a:	2105      	movs	r1, #5
 800540c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005410:	f7fb fac2 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(ORANGE, 163, 195, 315, 235);
 8005414:	23eb      	movs	r3, #235	; 0xeb
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	f240 133b 	movw	r3, #315	; 0x13b
 800541c:	22c3      	movs	r2, #195	; 0xc3
 800541e:	21a3      	movs	r1, #163	; 0xa3
 8005420:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8005424:	f7fb fab8 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_String(37, 207, WHITE, ORANGE, "SIGNAL INFO", 2);
 8005428:	2302      	movs	r3, #2
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	4b15      	ldr	r3, [pc, #84]	; (8005484 <Display_settings_screen_background+0x1e8>)
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005438:	21cf      	movs	r1, #207	; 0xcf
 800543a:	2025      	movs	r0, #37	; 0x25
 800543c:	f7fb fb4e 	bl	8000adc <ILI9341_Draw_String>
	ILI9341_Draw_String(195, 207, WHITE, ORANGE, "MAIN SCREEN", 2);
 8005440:	2302      	movs	r3, #2
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <Display_settings_screen_background+0x1ec>)
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800544c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005450:	21cf      	movs	r1, #207	; 0xcf
 8005452:	20c3      	movs	r0, #195	; 0xc3
 8005454:	f7fb fb42 	bl	8000adc <ILI9341_Draw_String>

}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	0800e570 	.word	0x0800e570
 8005464:	0800e580 	.word	0x0800e580
 8005468:	0800e588 	.word	0x0800e588
 800546c:	0800e594 	.word	0x0800e594
 8005470:	0800e5a0 	.word	0x0800e5a0
 8005474:	0800e5ac 	.word	0x0800e5ac
 8005478:	0800e5b8 	.word	0x0800e5b8
 800547c:	0800e5c4 	.word	0x0800e5c4
 8005480:	0800e5d4 	.word	0x0800e5d4
 8005484:	0800e3a0 	.word	0x0800e3a0
 8005488:	0800e394 	.word	0x0800e394

0800548c <Display_settings_screen_data>:

void Display_settings_screen_data(dab_management_t _dab_management)
{
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b087      	sub	sp, #28
 8005490:	af02      	add	r7, sp, #8
 8005492:	463c      	mov	r4, r7
 8005494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//volume bar
	ILI9341_Draw_Filled_Rectangle(WHITE, 12 + (_dab_management.audio_volume * 140) / 63, 40, 152, 50);
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	461a      	mov	r2, r3
 800549c:	238c      	movs	r3, #140	; 0x8c
 800549e:	fb02 f303 	mul.w	r3, r2, r3
 80054a2:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <Display_settings_screen_data+0x84>)
 80054a4:	fb82 1203 	smull	r1, r2, r2, r3
 80054a8:	441a      	add	r2, r3
 80054aa:	1152      	asrs	r2, r2, #5
 80054ac:	17db      	asrs	r3, r3, #31
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	330c      	adds	r3, #12
 80054b2:	4619      	mov	r1, r3
 80054b4:	2332      	movs	r3, #50	; 0x32
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2398      	movs	r3, #152	; 0x98
 80054ba:	2228      	movs	r2, #40	; 0x28
 80054bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80054c0:	f7fb fa6a 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
	ILI9341_Draw_Filled_Rectangle(GREEN, 12, 40, 12 + (_dab_management.audio_volume * 140) / 63, 50);
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	461a      	mov	r2, r3
 80054c8:	238c      	movs	r3, #140	; 0x8c
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	4a10      	ldr	r2, [pc, #64]	; (8005510 <Display_settings_screen_data+0x84>)
 80054d0:	fb82 1203 	smull	r1, r2, r2, r3
 80054d4:	441a      	add	r2, r3
 80054d6:	1152      	asrs	r2, r2, #5
 80054d8:	17db      	asrs	r3, r3, #31
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	330c      	adds	r3, #12
 80054de:	461a      	mov	r2, r3
 80054e0:	2332      	movs	r3, #50	; 0x32
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	2228      	movs	r2, #40	; 0x28
 80054e8:	210c      	movs	r1, #12
 80054ea:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80054ee:	f7fb fa53 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>

	//backlight bar
	ILI9341_Draw_Filled_Rectangle(GREEN, 168, 40, 308, 50);
 80054f2:	2332      	movs	r3, #50	; 0x32
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	f44f 739a 	mov.w	r3, #308	; 0x134
 80054fa:	2228      	movs	r2, #40	; 0x28
 80054fc:	21a8      	movs	r1, #168	; 0xa8
 80054fe:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8005502:	f7fb fa49 	bl	8000998 <ILI9341_Draw_Filled_Rectangle>
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bd90      	pop	{r4, r7, pc}
 800550e:	bf00      	nop
 8005510:	82082083 	.word	0x82082083

08005514 <Display_time>:

void Display_time(time_t time_val)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af02      	add	r7, sp, #8
 800551a:	463b      	mov	r3, r7
 800551c:	e883 0003 	stmia.w	r3, {r0, r1}
	//hour and minute
	if(time_val.year && time_val.month)
 8005520:	883b      	ldrh	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d076      	beq.n	8005614 <Display_time+0x100>
 8005526:	78bb      	ldrb	r3, [r7, #2]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d073      	beq.n	8005614 <Display_time+0x100>
	{
		if(time_val.hour < 10)
 800552c:	793b      	ldrb	r3, [r7, #4]
 800552e:	2b09      	cmp	r3, #9
 8005530:	d81e      	bhi.n	8005570 <Display_time+0x5c>
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, "0", 2);
 8005532:	2302      	movs	r3, #2
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <Display_time+0x108>)
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	2300      	movs	r3, #0
 800553c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005540:	2101      	movs	r1, #1
 8005542:	f240 100f 	movw	r0, #271	; 0x10f
 8005546:	f7fb fac9 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(280, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 800554a:	793b      	ldrb	r3, [r7, #4]
 800554c:	220a      	movs	r2, #10
 800554e:	4934      	ldr	r1, [pc, #208]	; (8005620 <Display_time+0x10c>)
 8005550:	4618      	mov	r0, r3
 8005552:	f007 ff0b 	bl	800d36c <itoa>
 8005556:	4603      	mov	r3, r0
 8005558:	2202      	movs	r2, #2
 800555a:	9201      	str	r2, [sp, #4]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	2300      	movs	r3, #0
 8005560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005564:	2101      	movs	r1, #1
 8005566:	f44f 708c 	mov.w	r0, #280	; 0x118
 800556a:	f7fb fab7 	bl	8000adc <ILI9341_Draw_String>
 800556e:	e011      	b.n	8005594 <Display_time+0x80>
		}
		else
		{
			ILI9341_Draw_String(271, 1, WHITE, BLACK, itoa(time_val.hour, itoa_buffer, 10), 2);
 8005570:	793b      	ldrb	r3, [r7, #4]
 8005572:	220a      	movs	r2, #10
 8005574:	492a      	ldr	r1, [pc, #168]	; (8005620 <Display_time+0x10c>)
 8005576:	4618      	mov	r0, r3
 8005578:	f007 fef8 	bl	800d36c <itoa>
 800557c:	4603      	mov	r3, r0
 800557e:	2202      	movs	r2, #2
 8005580:	9201      	str	r2, [sp, #4]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800558a:	2101      	movs	r1, #1
 800558c:	f240 100f 	movw	r0, #271	; 0x10f
 8005590:	f7fb faa4 	bl	8000adc <ILI9341_Draw_String>
		}

		ILI9341_Draw_String(287, 1, WHITE, BLACK, ":", 2);
 8005594:	2302      	movs	r3, #2
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	4b22      	ldr	r3, [pc, #136]	; (8005624 <Display_time+0x110>)
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055a2:	2101      	movs	r1, #1
 80055a4:	f240 101f 	movw	r0, #287	; 0x11f
 80055a8:	f7fb fa98 	bl	8000adc <ILI9341_Draw_String>

		if(time_val.minute < 10)
 80055ac:	797b      	ldrb	r3, [r7, #5]
 80055ae:	2b09      	cmp	r3, #9
 80055b0:	d81e      	bhi.n	80055f0 <Display_time+0xdc>
		{
			ILI9341_Draw_String(295, 1, WHITE, BLACK, "0", 2);
 80055b2:	2302      	movs	r3, #2
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	4b19      	ldr	r3, [pc, #100]	; (800561c <Display_time+0x108>)
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055c0:	2101      	movs	r1, #1
 80055c2:	f240 1027 	movw	r0, #295	; 0x127
 80055c6:	f7fb fa89 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(304, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 80055ca:	797b      	ldrb	r3, [r7, #5]
 80055cc:	220a      	movs	r2, #10
 80055ce:	4914      	ldr	r1, [pc, #80]	; (8005620 <Display_time+0x10c>)
 80055d0:	4618      	mov	r0, r3
 80055d2:	f007 fecb 	bl	800d36c <itoa>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2202      	movs	r2, #2
 80055da:	9201      	str	r2, [sp, #4]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	2300      	movs	r3, #0
 80055e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e4:	2101      	movs	r1, #1
 80055e6:	f44f 7098 	mov.w	r0, #304	; 0x130
 80055ea:	f7fb fa77 	bl	8000adc <ILI9341_Draw_String>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
		}
	}
	//date
	//todo
}
 80055ee:	e011      	b.n	8005614 <Display_time+0x100>
			ILI9341_Draw_String(295, 1, WHITE, BLACK, itoa(time_val.minute, itoa_buffer, 10), 2);
 80055f0:	797b      	ldrb	r3, [r7, #5]
 80055f2:	220a      	movs	r2, #10
 80055f4:	490a      	ldr	r1, [pc, #40]	; (8005620 <Display_time+0x10c>)
 80055f6:	4618      	mov	r0, r3
 80055f8:	f007 feb8 	bl	800d36c <itoa>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2202      	movs	r2, #2
 8005600:	9201      	str	r2, [sp, #4]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800560a:	2101      	movs	r1, #1
 800560c:	f240 1027 	movw	r0, #295	; 0x127
 8005610:	f7fb fa64 	bl	8000adc <ILI9341_Draw_String>
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	0800e55c 	.word	0x0800e55c
 8005620:	20006d8c 	.word	0x20006d8c
 8005624:	0800e5e8 	.word	0x0800e5e8

08005628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800562e:	2300      	movs	r3, #0
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <MX_DMA_Init+0x3c>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	4a0b      	ldr	r2, [pc, #44]	; (8005664 <MX_DMA_Init+0x3c>)
 8005638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800563c:	6313      	str	r3, [r2, #48]	; 0x30
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <MX_DMA_Init+0x3c>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800564a:	2200      	movs	r2, #0
 800564c:	2100      	movs	r1, #0
 800564e:	200f      	movs	r0, #15
 8005650:	f001 ff95 	bl	800757e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005654:	200f      	movs	r0, #15
 8005656:	f001 ffae 	bl	80075b6 <HAL_NVIC_EnableIRQ>

}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40023800 	.word	0x40023800

08005668 <eeprom_wait>:
#define ADDR_SIZE 2	//dla 24c08 chodzi na 1, dla 24c256 na 2 bo wieksza pamiec i trzeba 2 bajty na adres

static uint32_t last_write;

void eeprom_wait(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT);
 800566c:	bf00      	nop
 800566e:	f001 fe7b 	bl	8007368 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <eeprom_wait+0x1c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b14      	cmp	r3, #20
 800567c:	d9f7      	bls.n	800566e <eeprom_wait+0x6>
}
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20006e54 	.word	0x20006e54

08005688 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af04      	add	r7, sp, #16
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8005694:	f7ff ffe8 	bl	8005668 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, addr, 2, data, size, 500);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80056a4:	9102      	str	r1, [sp, #8]
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	2302      	movs	r3, #2
 80056ae:	21a0      	movs	r1, #160	; 0xa0
 80056b0:	4803      	ldr	r0, [pc, #12]	; (80056c0 <eeprom_read+0x38>)
 80056b2:	f002 fec1 	bl	8008438 <HAL_I2C_Mem_Read>
 80056b6:	4603      	mov	r3, r0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20006e58 	.word	0x20006e58

080056c4 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) //max 64B naraz z uwagi na stronicowanie (dla AT24C256)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	; 0x28
 80056c8:	af04      	add	r7, sp, #16
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 80056d0:	f7ff ffca 	bl	8005668 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, addr, 2, (void*)data, size, 500);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80056e0:	9102      	str	r1, [sp, #8]
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2302      	movs	r3, #2
 80056ea:	21a0      	movs	r1, #160	; 0xa0
 80056ec:	4807      	ldr	r0, [pc, #28]	; (800570c <eeprom_write+0x48>)
 80056ee:	f002 fda9 	bl	8008244 <HAL_I2C_Mem_Write>
 80056f2:	4603      	mov	r3, r0
 80056f4:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 80056f6:	f001 fe37 	bl	8007368 <HAL_GetTick>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4a04      	ldr	r2, [pc, #16]	; (8005710 <eeprom_write+0x4c>)
 80056fe:	6013      	str	r3, [r2, #0]

    return rc;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20006e58 	.word	0x20006e58
 8005710:	20006e54 	.word	0x20006e54

08005714 <eeprom_clear_scanning_data>:

void eeprom_clear_scanning_data()
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b092      	sub	sp, #72	; 0x48
 8005718:	af00      	add	r7, sp, #0
	send_debug_msg("Clear scan data from EEPROM...", CRLF_SEND);
 800571a:	2101      	movs	r1, #1
 800571c:	4829      	ldr	r0, [pc, #164]	; (80057c4 <eeprom_clear_scanning_data+0xb0>)
 800571e:	f7fe f923 	bl	8003968 <send_debug_msg>

	 uint8_t clear_page_sequence[64];

	 for (uint8_t i = 0; i < 64; i++)
 8005722:	2300      	movs	r3, #0
 8005724:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005728:	e00b      	b.n	8005742 <eeprom_clear_scanning_data+0x2e>
	 {
		 clear_page_sequence[i] = 0xFF;
 800572a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800572e:	3348      	adds	r3, #72	; 0x48
 8005730:	443b      	add	r3, r7
 8005732:	22ff      	movs	r2, #255	; 0xff
 8005734:	f803 2c44 	strb.w	r2, [r3, #-68]
	 for (uint8_t i = 0; i < 64; i++)
 8005738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800573c:	3301      	adds	r3, #1
 800573e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005742:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005746:	2b3f      	cmp	r3, #63	; 0x3f
 8005748:	d9ef      	bls.n	800572a <eeprom_clear_scanning_data+0x16>
	 }

	//clear various data connected with scanning

	eeprom_write(PAGE_SIZE * SCAN_RELATED_DATA_PAGE, &clear_page_sequence, sizeof(clear_page_sequence));
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	4619      	mov	r1, r3
 8005750:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005754:	f7ff ffb6 	bl	80056c4 <eeprom_write>


	//clear ensembles list
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800575e:	e00e      	b.n	800577e <eeprom_clear_scanning_data+0x6a>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 8005760:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005764:	3305      	adds	r3, #5
 8005766:	019b      	lsls	r3, r3, #6
 8005768:	4618      	mov	r0, r3
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	2240      	movs	r2, #64	; 0x40
 800576e:	4619      	mov	r1, r3
 8005770:	f7ff ffa8 	bl	80056c4 <eeprom_write>
	for(uint8_t i = 0; i < MAX_ENSEMBLES; i++)
 8005774:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005778:	3301      	adds	r3, #1
 800577a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800577e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005782:	2b09      	cmp	r3, #9
 8005784:	d9ec      	bls.n	8005760 <eeprom_clear_scanning_data+0x4c>
	}

	//clear services list
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 8005786:	2300      	movs	r3, #0
 8005788:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800578c:	e00e      	b.n	80057ac <eeprom_clear_scanning_data+0x98>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + PAGE_SIZE * i, &clear_page_sequence, sizeof(clear_page_sequence));
 800578e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005792:	330f      	adds	r3, #15
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	4618      	mov	r0, r3
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	2240      	movs	r2, #64	; 0x40
 800579c:	4619      	mov	r1, r3
 800579e:	f7ff ff91 	bl	80056c4 <eeprom_write>
	for(uint8_t i = 0; i < MAX_SERVICES; i++)
 80057a2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80057a6:	3301      	adds	r3, #1
 80057a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80057ac:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80057b0:	2b63      	cmp	r3, #99	; 0x63
 80057b2:	d9ec      	bls.n	800578e <eeprom_clear_scanning_data+0x7a>
	}
	send_debug_msg("Cleared OK.", CRLF_SEND);
 80057b4:	2101      	movs	r1, #1
 80057b6:	4804      	ldr	r0, [pc, #16]	; (80057c8 <eeprom_clear_scanning_data+0xb4>)
 80057b8:	f7fe f8d6 	bl	8003968 <send_debug_msg>
}
 80057bc:	bf00      	nop
 80057be:	3748      	adds	r7, #72	; 0x48
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	0800e6ac 	.word	0x0800e6ac
 80057c8:	0800e6cc 	.word	0x0800e6cc

080057cc <eeprom_save_scanning_data>:

void eeprom_save_scanning_data(dab_service_t _services_list[], uint8_t _total_services, dab_ensemble_t _ensembles_list[], uint8_t _total_ensembles)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	461a      	mov	r2, r3
 80057d8:	460b      	mov	r3, r1
 80057da:	72fb      	strb	r3, [r7, #11]
 80057dc:	4613      	mov	r3, r2
 80057de:	72bb      	strb	r3, [r7, #10]
	send_debug_msg("Save scan data to EEPROM...", CRLF_SEND);
 80057e0:	2101      	movs	r1, #1
 80057e2:	4824      	ldr	r0, [pc, #144]	; (8005874 <eeprom_save_scanning_data+0xa8>)
 80057e4:	f7fe f8c0 	bl	8003968 <send_debug_msg>
	//save total ensembles & total services values
	eeprom_write(TOTAL_ENSEMBLES_ADDR, &_total_ensembles, sizeof(_total_ensembles));
 80057e8:	f107 030a 	add.w	r3, r7, #10
 80057ec:	2201      	movs	r2, #1
 80057ee:	4619      	mov	r1, r3
 80057f0:	f240 1005 	movw	r0, #261	; 0x105
 80057f4:	f7ff ff66 	bl	80056c4 <eeprom_write>
	eeprom_write(TOTAL_SERVICES_ADDR, &_total_services, sizeof(_total_services));
 80057f8:	f107 030b 	add.w	r3, r7, #11
 80057fc:	2201      	movs	r2, #1
 80057fe:	4619      	mov	r1, r3
 8005800:	f44f 7083 	mov.w	r0, #262	; 0x106
 8005804:	f7ff ff5e 	bl	80056c4 <eeprom_write>

	//save ensembles
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005808:	2300      	movs	r3, #0
 800580a:	75fb      	strb	r3, [r7, #23]
 800580c:	e00e      	b.n	800582c <eeprom_save_scanning_data+0x60>
	{
		eeprom_write(ENSEMBLES_TABLE_START_ADDR + ensembles_index * PAGE_SIZE, &_ensembles_list[ensembles_index], sizeof(dab_ensemble_t));
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	3305      	adds	r3, #5
 8005812:	019b      	lsls	r3, r3, #6
 8005814:	4618      	mov	r0, r3
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	015b      	lsls	r3, r3, #5
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	2220      	movs	r2, #32
 8005820:	4619      	mov	r1, r3
 8005822:	f7ff ff4f 	bl	80056c4 <eeprom_write>
	for(uint8_t ensembles_index = 0; ensembles_index < _total_ensembles; ensembles_index++)
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	3301      	adds	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
 800582c:	7abb      	ldrb	r3, [r7, #10]
 800582e:	7dfa      	ldrb	r2, [r7, #23]
 8005830:	429a      	cmp	r2, r3
 8005832:	d3ec      	bcc.n	800580e <eeprom_save_scanning_data+0x42>
	}

	//save services
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8005834:	2300      	movs	r3, #0
 8005836:	75bb      	strb	r3, [r7, #22]
 8005838:	e010      	b.n	800585c <eeprom_save_scanning_data+0x90>
	{
		eeprom_write(SERVICES_TABLE_START_ADDR + services_index * PAGE_SIZE, &_services_list[services_index], sizeof(dab_service_t));
 800583a:	7dbb      	ldrb	r3, [r7, #22]
 800583c:	330f      	adds	r3, #15
 800583e:	019b      	lsls	r3, r3, #6
 8005840:	4618      	mov	r0, r3
 8005842:	7dbb      	ldrb	r3, [r7, #22]
 8005844:	2234      	movs	r2, #52	; 0x34
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	2234      	movs	r2, #52	; 0x34
 8005850:	4619      	mov	r1, r3
 8005852:	f7ff ff37 	bl	80056c4 <eeprom_write>
	for(uint8_t services_index = 0; services_index < _total_services; services_index++)
 8005856:	7dbb      	ldrb	r3, [r7, #22]
 8005858:	3301      	adds	r3, #1
 800585a:	75bb      	strb	r3, [r7, #22]
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	7dba      	ldrb	r2, [r7, #22]
 8005860:	429a      	cmp	r2, r3
 8005862:	d3ea      	bcc.n	800583a <eeprom_save_scanning_data+0x6e>
	}

	send_debug_msg("Saved OK.", CRLF_SEND);
 8005864:	2101      	movs	r1, #1
 8005866:	4804      	ldr	r0, [pc, #16]	; (8005878 <eeprom_save_scanning_data+0xac>)
 8005868:	f7fe f87e 	bl	8003968 <send_debug_msg>
}
 800586c:	bf00      	nop
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	0800e6d8 	.word	0x0800e6d8
 8005878:	0800e6f4 	.word	0x0800e6f4

0800587c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08c      	sub	sp, #48	; 0x30
 8005880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005882:	f107 031c 	add.w	r3, r7, #28
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	4b6c      	ldr	r3, [pc, #432]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	4a6b      	ldr	r2, [pc, #428]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 800589c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a0:	6313      	str	r3, [r2, #48]	; 0x30
 80058a2:	4b69      	ldr	r3, [pc, #420]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	4b65      	ldr	r3, [pc, #404]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a64      	ldr	r2, [pc, #400]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30
 80058be:	4b62      	ldr	r3, [pc, #392]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	4b5e      	ldr	r3, [pc, #376]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	4a5d      	ldr	r2, [pc, #372]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058d4:	f043 0304 	orr.w	r3, r3, #4
 80058d8:	6313      	str	r3, [r2, #48]	; 0x30
 80058da:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	4b57      	ldr	r3, [pc, #348]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4a56      	ldr	r2, [pc, #344]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30
 80058f6:	4b54      	ldr	r3, [pc, #336]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005902:	2300      	movs	r3, #0
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	4b50      	ldr	r3, [pc, #320]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	4a4f      	ldr	r2, [pc, #316]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 800590c:	f043 0310 	orr.w	r3, r3, #16
 8005910:	6313      	str	r3, [r2, #48]	; 0x30
 8005912:	4b4d      	ldr	r3, [pc, #308]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	4b49      	ldr	r3, [pc, #292]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	4a48      	ldr	r2, [pc, #288]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 8005928:	f043 0308 	orr.w	r3, r3, #8
 800592c:	6313      	str	r3, [r2, #48]	; 0x30
 800592e:	4b46      	ldr	r3, [pc, #280]	; (8005a48 <MX_GPIO_Init+0x1cc>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin, GPIO_PIN_RESET);
 800593a:	2200      	movs	r2, #0
 800593c:	2130      	movs	r1, #48	; 0x30
 800593e:	4843      	ldr	r0, [pc, #268]	; (8005a4c <MX_GPIO_Init+0x1d0>)
 8005940:	f002 fb22 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8005944:	2200      	movs	r2, #0
 8005946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800594a:	4841      	ldr	r0, [pc, #260]	; (8005a50 <MX_GPIO_Init+0x1d4>)
 800594c:	f002 fb1c 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|LED_GREEN_Pin
 8005950:	2200      	movs	r2, #0
 8005952:	f24f 7180 	movw	r1, #63360	; 0xf780
 8005956:	483f      	ldr	r0, [pc, #252]	; (8005a54 <MX_GPIO_Init+0x1d8>)
 8005958:	f002 fb16 	bl	8007f88 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CLK_Pin|TOUCH_DIN_Pin, GPIO_PIN_RESET);
 800595c:	2200      	movs	r2, #0
 800595e:	2128      	movs	r1, #40	; 0x28
 8005960:	483d      	ldr	r0, [pc, #244]	; (8005a58 <MX_GPIO_Init+0x1dc>)
 8005962:	f002 fb11 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAB_GPIO_INTB_Pin;
 8005966:	2310      	movs	r3, #16
 8005968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800596a:	2300      	movs	r3, #0
 800596c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596e:	2300      	movs	r3, #0
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DAB_GPIO_INTB_GPIO_Port, &GPIO_InitStruct);
 8005972:	f107 031c 	add.w	r3, r7, #28
 8005976:	4619      	mov	r1, r3
 8005978:	4838      	ldr	r0, [pc, #224]	; (8005a5c <MX_GPIO_Init+0x1e0>)
 800597a:	f002 f951 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAB_GPIO_CS_Pin|DAB_GPIO_RESET_Pin;
 800597e:	2330      	movs	r3, #48	; 0x30
 8005980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005982:	2301      	movs	r3, #1
 8005984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800598a:	2302      	movs	r3, #2
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800598e:	f107 031c 	add.w	r3, r7, #28
 8005992:	4619      	mov	r1, r3
 8005994:	482d      	ldr	r0, [pc, #180]	; (8005a4c <MX_GPIO_Init+0x1d0>)
 8005996:	f002 f943 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|TOUCH_DO_Pin;
 800599a:	2311      	movs	r3, #17
 800599c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800599e:	2300      	movs	r3, #0
 80059a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059a6:	f107 031c 	add.w	r3, r7, #28
 80059aa:	4619      	mov	r1, r3
 80059ac:	482a      	ldr	r0, [pc, #168]	; (8005a58 <MX_GPIO_Init+0x1dc>)
 80059ae:	f002 f937 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80059b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059b8:	2301      	movs	r3, #1
 80059ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80059c4:	f107 031c 	add.w	r3, r7, #28
 80059c8:	4619      	mov	r1, r3
 80059ca:	4821      	ldr	r0, [pc, #132]	; (8005a50 <MX_GPIO_Init+0x1d4>)
 80059cc:	f002 f928 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
 80059d0:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80059d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059d6:	2301      	movs	r3, #1
 80059d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059de:	2302      	movs	r3, #2
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059e2:	f107 031c 	add.w	r3, r7, #28
 80059e6:	4619      	mov	r1, r3
 80059e8:	481a      	ldr	r0, [pc, #104]	; (8005a54 <MX_GPIO_Init+0x1d8>)
 80059ea:	f002 f919 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80059ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80059f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059f4:	2301      	movs	r3, #1
 80059f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a00:	f107 031c 	add.w	r3, r7, #28
 8005a04:	4619      	mov	r1, r3
 8005a06:	4813      	ldr	r0, [pc, #76]	; (8005a54 <MX_GPIO_Init+0x1d8>)
 8005a08:	f002 f90a 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005a0c:	2340      	movs	r3, #64	; 0x40
 8005a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a10:	2300      	movs	r3, #0
 8005a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005a18:	f107 031c 	add.w	r3, r7, #28
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	480d      	ldr	r0, [pc, #52]	; (8005a54 <MX_GPIO_Init+0x1d8>)
 8005a20:	f002 f8fe 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_DIN_Pin;
 8005a24:	2328      	movs	r3, #40	; 0x28
 8005a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a30:	2302      	movs	r3, #2
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a34:	f107 031c 	add.w	r3, r7, #28
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4807      	ldr	r0, [pc, #28]	; (8005a58 <MX_GPIO_Init+0x1dc>)
 8005a3c:	f002 f8f0 	bl	8007c20 <HAL_GPIO_Init>

}
 8005a40:	bf00      	nop
 8005a42:	3730      	adds	r7, #48	; 0x30
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40020800 	.word	0x40020800
 8005a50:	40021000 	.word	0x40021000
 8005a54:	40020c00 	.word	0x40020c00
 8005a58:	40020400 	.word	0x40020400
 8005a5c:	40020000 	.word	0x40020000

08005a60 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005a64:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a66:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <MX_I2C1_Init+0x54>)
 8005a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a6c:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <MX_I2C1_Init+0x58>)
 8005a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005a76:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a9c:	4804      	ldr	r0, [pc, #16]	; (8005ab0 <MX_I2C1_Init+0x50>)
 8005a9e:	f002 fa8d 	bl	8007fbc <HAL_I2C_Init>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005aa8:	f000 f982 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005aac:	bf00      	nop
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20006e58 	.word	0x20006e58
 8005ab4:	40005400 	.word	0x40005400
 8005ab8:	000186a0 	.word	0x000186a0

08005abc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005ac0:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005ac2:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <MX_I2C3_Init+0x54>)
 8005ac4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005ac8:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <MX_I2C3_Init+0x58>)
 8005aca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ade:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005ae6:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005aec:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005af8:	4804      	ldr	r0, [pc, #16]	; (8005b0c <MX_I2C3_Init+0x50>)
 8005afa:	f002 fa5f 	bl	8007fbc <HAL_I2C_Init>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005b04:	f000 f954 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005b08:	bf00      	nop
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20006eac 	.word	0x20006eac
 8005b10:	40005c00 	.word	0x40005c00
 8005b14:	000186a0 	.word	0x000186a0

08005b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08c      	sub	sp, #48	; 0x30
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b20:	f107 031c 	add.w	r3, r7, #28
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a4a      	ldr	r2, [pc, #296]	; (8005c60 <HAL_I2C_MspInit+0x148>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d12c      	bne.n	8005b94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	4b49      	ldr	r3, [pc, #292]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	4a48      	ldr	r2, [pc, #288]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	6313      	str	r3, [r2, #48]	; 0x30
 8005b4a:	4b46      	ldr	r3, [pc, #280]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005b56:	23c0      	movs	r3, #192	; 0xc0
 8005b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b5a:	2312      	movs	r3, #18
 8005b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b62:	2303      	movs	r3, #3
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b66:	2304      	movs	r3, #4
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b6a:	f107 031c 	add.w	r3, r7, #28
 8005b6e:	4619      	mov	r1, r3
 8005b70:	483d      	ldr	r0, [pc, #244]	; (8005c68 <HAL_I2C_MspInit+0x150>)
 8005b72:	f002 f855 	bl	8007c20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	4b3a      	ldr	r3, [pc, #232]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	4a39      	ldr	r2, [pc, #228]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b84:	6413      	str	r3, [r2, #64]	; 0x40
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005b92:	e060      	b.n	8005c56 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a34      	ldr	r2, [pc, #208]	; (8005c6c <HAL_I2C_MspInit+0x154>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d15b      	bne.n	8005c56 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	4b30      	ldr	r3, [pc, #192]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	4a2f      	ldr	r2, [pc, #188]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005ba8:	f043 0304 	orr.w	r3, r3, #4
 8005bac:	6313      	str	r3, [r2, #48]	; 0x30
 8005bae:	4b2d      	ldr	r3, [pc, #180]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	4a28      	ldr	r2, [pc, #160]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bca:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAB_GPIO_SDA_Pin;
 8005bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bdc:	2312      	movs	r3, #18
 8005bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be4:	2303      	movs	r3, #3
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005be8:	2304      	movs	r3, #4
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8005bec:	f107 031c 	add.w	r3, r7, #28
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	481f      	ldr	r0, [pc, #124]	; (8005c70 <HAL_I2C_MspInit+0x158>)
 8005bf4:	f002 f814 	bl	8007c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAB_GPIO_SCL_Pin;
 8005bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bfe:	2312      	movs	r3, #18
 8005c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c06:	2303      	movs	r3, #3
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005c0a:	2304      	movs	r3, #4
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAB_GPIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8005c0e:	f107 031c 	add.w	r3, r7, #28
 8005c12:	4619      	mov	r1, r3
 8005c14:	4817      	ldr	r0, [pc, #92]	; (8005c74 <HAL_I2C_MspInit+0x15c>)
 8005c16:	f002 f803 	bl	8007c20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	4a10      	ldr	r2, [pc, #64]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c28:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2a:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <HAL_I2C_MspInit+0x14c>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8005c36:	2200      	movs	r2, #0
 8005c38:	2100      	movs	r1, #0
 8005c3a:	2048      	movs	r0, #72	; 0x48
 8005c3c:	f001 fc9f 	bl	800757e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005c40:	2048      	movs	r0, #72	; 0x48
 8005c42:	f001 fcb8 	bl	80075b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8005c46:	2200      	movs	r2, #0
 8005c48:	2100      	movs	r1, #0
 8005c4a:	2049      	movs	r0, #73	; 0x49
 8005c4c:	f001 fc97 	bl	800757e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005c50:	2049      	movs	r0, #73	; 0x49
 8005c52:	f001 fcb0 	bl	80075b6 <HAL_NVIC_EnableIRQ>
}
 8005c56:	bf00      	nop
 8005c58:	3730      	adds	r7, #48	; 0x30
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40005400 	.word	0x40005400
 8005c64:	40023800 	.word	0x40023800
 8005c68:	40020400 	.word	0x40020400
 8005c6c:	40005c00 	.word	0x40005c00
 8005c70:	40020800 	.word	0x40020800
 8005c74:	40020000 	.word	0x40020000

08005c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c7c:	f001 fb0e 	bl	800729c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c80:	f000 f82c 	bl	8005cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c84:	f7ff fdfa 	bl	800587c <MX_GPIO_Init>
  MX_DMA_Init();
 8005c88:	f7ff fcce 	bl	8005628 <MX_DMA_Init>
  MX_I2C1_Init();
 8005c8c:	f7ff fee8 	bl	8005a60 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005c90:	f7ff ff14 	bl	8005abc <MX_I2C3_Init>
  MX_SPI1_Init();
 8005c94:	f000 f892 	bl	8005dbc <MX_SPI1_Init>
  MX_SPI2_Init();
 8005c98:	f000 f8c6 	bl	8005e28 <MX_SPI2_Init>
  MX_TIM3_Init();
 8005c9c:	f000 fe84 	bl	80069a8 <MX_TIM3_Init>
  MX_UART5_Init();
 8005ca0:	f001 f9de 	bl	8007060 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8005ca4:	f001 fa06 	bl	80070b4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8005ca8:	f000 fed8 	bl	8006a5c <MX_TIM10_Init>
  MX_TIM11_Init();
 8005cac:	f000 fefa 	bl	8006aa4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  send_debug_msg("STM32 is ready.", CRLF_SEND);
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4808      	ldr	r0, [pc, #32]	; (8005cd4 <main+0x5c>)
 8005cb4:	f7fd fe58 	bl	8003968 <send_debug_msg>

  HAL_TIM_Base_Start_IT(&htim11);
 8005cb8:	4807      	ldr	r0, [pc, #28]	; (8005cd8 <main+0x60>)
 8005cba:	f006 f9c7 	bl	800c04c <HAL_TIM_Base_Start_IT>

  ILI9341_Init();
 8005cbe:	f7fa fc17 	bl	80004f0 <ILI9341_Init>

  Display_booting_screen();
 8005cc2:	f7fd fe8b 	bl	80039dc <Display_booting_screen>


  Si468x_dab_init();
 8005cc6:	f7fb f9d3 	bl	8001070 <Si468x_dab_init>
  restore_from_eeprom();
 8005cca:	f7fd fae7 	bl	800329c <restore_from_eeprom>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine();
 8005cce:	f000 f999 	bl	8006004 <state_machine>
 8005cd2:	e7fc      	b.n	8005cce <main+0x56>
 8005cd4:	0800e91c 	.word	0x0800e91c
 8005cd8:	20007104 	.word	0x20007104

08005cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b094      	sub	sp, #80	; 0x50
 8005ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ce2:	f107 0320 	add.w	r3, r7, #32
 8005ce6:	2230      	movs	r2, #48	; 0x30
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f007 fb40 	bl	800d370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cf0:	f107 030c 	add.w	r3, r7, #12
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
 8005cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d00:	2300      	movs	r3, #0
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <SystemClock_Config+0xcc>)
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	4a27      	ldr	r2, [pc, #156]	; (8005da8 <SystemClock_Config+0xcc>)
 8005d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <SystemClock_Config+0xcc>)
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d18:	60bb      	str	r3, [r7, #8]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	607b      	str	r3, [r7, #4]
 8005d20:	4b22      	ldr	r3, [pc, #136]	; (8005dac <SystemClock_Config+0xd0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a21      	ldr	r2, [pc, #132]	; (8005dac <SystemClock_Config+0xd0>)
 8005d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <SystemClock_Config+0xd0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d42:	2302      	movs	r3, #2
 8005d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 8005d50:	23f0      	movs	r3, #240	; 0xf0
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d54:	2302      	movs	r3, #2
 8005d56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005d58:	2304      	movs	r3, #4
 8005d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d5c:	f107 0320 	add.w	r3, r7, #32
 8005d60:	4618      	mov	r0, r3
 8005d62:	f004 fdc5 	bl	800a8f0 <HAL_RCC_OscConfig>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005d6c:	f000 f820 	bl	8005db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d70:	230f      	movs	r3, #15
 8005d72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d74:	2302      	movs	r3, #2
 8005d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d88:	f107 030c 	add.w	r3, r7, #12
 8005d8c:	2105      	movs	r1, #5
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f005 f826 	bl	800ade0 <HAL_RCC_ClockConfig>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005d9a:	f000 f809 	bl	8005db0 <Error_Handler>
  }
}
 8005d9e:	bf00      	nop
 8005da0:	3750      	adds	r7, #80	; 0x50
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40023800 	.word	0x40023800
 8005dac:	40007000 	.word	0x40007000

08005db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005db4:	b672      	cpsid	i
}
 8005db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005db8:	e7fe      	b.n	8005db8 <Error_Handler+0x8>
	...

08005dbc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005dc0:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005dc2:	4a18      	ldr	r2, [pc, #96]	; (8005e24 <MX_SPI1_Init+0x68>)
 8005dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005dc6:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005dce:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005dd4:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dda:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005de0:	4b0f      	ldr	r3, [pc, #60]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005de6:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005df0:	2220      	movs	r2, #32
 8005df2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005df4:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005e08:	220a      	movs	r2, #10
 8005e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005e0c:	4804      	ldr	r0, [pc, #16]	; (8005e20 <MX_SPI1_Init+0x64>)
 8005e0e:	f005 fa07 	bl	800b220 <HAL_SPI_Init>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005e18:	f7ff ffca 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005e1c:	bf00      	nop
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20006f00 	.word	0x20006f00
 8005e24:	40013000 	.word	0x40013000

08005e28 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005e2c:	4b17      	ldr	r3, [pc, #92]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e2e:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <MX_SPI2_Init+0x68>)
 8005e30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005e32:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005e3a:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e46:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005e52:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e5a:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e66:	4b09      	ldr	r3, [pc, #36]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6c:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e74:	220a      	movs	r2, #10
 8005e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005e78:	4804      	ldr	r0, [pc, #16]	; (8005e8c <MX_SPI2_Init+0x64>)
 8005e7a:	f005 f9d1 	bl	800b220 <HAL_SPI_Init>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005e84:	f7ff ff94 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005e88:	bf00      	nop
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20006f58 	.word	0x20006f58
 8005e90:	40003800 	.word	0x40003800

08005e94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08c      	sub	sp, #48	; 0x30
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e9c:	f107 031c 	add.w	r3, r7, #28
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a4d      	ldr	r2, [pc, #308]	; (8005fe8 <HAL_SPI_MspInit+0x154>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d12c      	bne.n	8005f10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	4b4c      	ldr	r3, [pc, #304]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	4a4b      	ldr	r2, [pc, #300]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ec6:	4b49      	ldr	r3, [pc, #292]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	4b45      	ldr	r3, [pc, #276]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	4a44      	ldr	r2, [pc, #272]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee2:	4b42      	ldr	r3, [pc, #264]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DAB_GPIO_SCK_Pin|DAB_GPIO_MISO_Pin|DAB_GPIO_MOSI_Pin;
 8005eee:	23e0      	movs	r3, #224	; 0xe0
 8005ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005efa:	2303      	movs	r3, #3
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005efe:	2305      	movs	r3, #5
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f02:	f107 031c 	add.w	r3, r7, #28
 8005f06:	4619      	mov	r1, r3
 8005f08:	4839      	ldr	r0, [pc, #228]	; (8005ff0 <HAL_SPI_MspInit+0x15c>)
 8005f0a:	f001 fe89 	bl	8007c20 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005f0e:	e066      	b.n	8005fde <HAL_SPI_MspInit+0x14a>
  else if(spiHandle->Instance==SPI2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a37      	ldr	r2, [pc, #220]	; (8005ff4 <HAL_SPI_MspInit+0x160>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d161      	bne.n	8005fde <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	4b33      	ldr	r3, [pc, #204]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	4a32      	ldr	r2, [pc, #200]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f28:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2a:	4b30      	ldr	r3, [pc, #192]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	4a2b      	ldr	r2, [pc, #172]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005f40:	f043 0302 	orr.w	r3, r3, #2
 8005f44:	6313      	str	r3, [r2, #48]	; 0x30
 8005f46:	4b29      	ldr	r3, [pc, #164]	; (8005fec <HAL_SPI_MspInit+0x158>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8005f52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f60:	2303      	movs	r3, #3
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005f64:	2305      	movs	r3, #5
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f68:	f107 031c 	add.w	r3, r7, #28
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4822      	ldr	r0, [pc, #136]	; (8005ff8 <HAL_SPI_MspInit+0x164>)
 8005f70:	f001 fe56 	bl	8007c20 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005f74:	4b21      	ldr	r3, [pc, #132]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005f76:	4a22      	ldr	r2, [pc, #136]	; (8006000 <HAL_SPI_MspInit+0x16c>)
 8005f78:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005f7a:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f80:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005f82:	2240      	movs	r2, #64	; 0x40
 8005f84:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f8c:	4b1b      	ldr	r3, [pc, #108]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f92:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f94:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f9a:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005fa0:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005fa6:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fac:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005fb2:	4812      	ldr	r0, [pc, #72]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005fb4:	f001 fb1a 	bl	80075ec <HAL_DMA_Init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8005fbe:	f7ff fef7 	bl	8005db0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005fc6:	649a      	str	r2, [r3, #72]	; 0x48
 8005fc8:	4a0c      	ldr	r2, [pc, #48]	; (8005ffc <HAL_SPI_MspInit+0x168>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	2024      	movs	r0, #36	; 0x24
 8005fd4:	f001 fad3 	bl	800757e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005fd8:	2024      	movs	r0, #36	; 0x24
 8005fda:	f001 faec 	bl	80075b6 <HAL_NVIC_EnableIRQ>
}
 8005fde:	bf00      	nop
 8005fe0:	3730      	adds	r7, #48	; 0x30
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40013000 	.word	0x40013000
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	40020000 	.word	0x40020000
 8005ff4:	40003800 	.word	0x40003800
 8005ff8:	40020400 	.word	0x40020400
 8005ffc:	20006fb0 	.word	0x20006fb0
 8006000:	40026070 	.word	0x40026070

08006004 <state_machine>:
uint8_t scan_complete_flag = 0;

uint16_t audio_info_timeout;

void state_machine()
{
 8006004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006006:	b097      	sub	sp, #92	; 0x5c
 8006008:	af06      	add	r7, sp, #24
	if(state_change_done)
 800600a:	4b64      	ldr	r3, [pc, #400]	; (800619c <state_machine+0x198>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <state_machine+0x1a>
	{
		touch_coordinates = Touch_read();
 8006012:	f000 fe0d 	bl	8006c30 <Touch_read>
 8006016:	4603      	mov	r3, r0
 8006018:	4a61      	ldr	r2, [pc, #388]	; (80061a0 <state_machine+0x19c>)
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e005      	b.n	800602a <state_machine+0x26>
	}
	else
	{
		touch_coordinates.x = 0;
 800601e:	4b60      	ldr	r3, [pc, #384]	; (80061a0 <state_machine+0x19c>)
 8006020:	2200      	movs	r2, #0
 8006022:	801a      	strh	r2, [r3, #0]
		touch_coordinates.y = 0;
 8006024:	4b5e      	ldr	r3, [pc, #376]	; (80061a0 <state_machine+0x19c>)
 8006026:	2200      	movs	r2, #0
 8006028:	805a      	strh	r2, [r3, #2]
	}

	dab_management_to_display = get_dab_management();
 800602a:	4c5e      	ldr	r4, [pc, #376]	; (80061a4 <state_machine+0x1a0>)
 800602c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006030:	4618      	mov	r0, r3
 8006032:	f7fd fc7d 	bl	8003930 <get_dab_management>
 8006036:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800603a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800603c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dls_label_to_display = get_dls_label();
 8006040:	f7fd fc88 	bl	8003954 <get_dls_label>
 8006044:	4603      	mov	r3, r0
 8006046:	4a58      	ldr	r2, [pc, #352]	; (80061a8 <state_machine+0x1a4>)
 8006048:	6013      	str	r3, [r2, #0]
	Si468x_dab_get_time();
 800604a:	f7fd f815 	bl	8003078 <Si468x_dab_get_time>


	switch(system_state)
 800604e:	4b57      	ldr	r3, [pc, #348]	; (80061ac <state_machine+0x1a8>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b04      	cmp	r3, #4
 8006054:	f200 83e0 	bhi.w	8006818 <state_machine+0x814>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <state_machine+0x5c>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006075 	.word	0x08006075
 8006064:	080061c5 	.word	0x080061c5
 8006068:	0800662d 	.word	0x0800662d
 800606c:	0800655d 	.word	0x0800655d
 8006070:	080066a1 	.word	0x080066a1
	{
	case main_screen:

		if(!state_change_done)
 8006074:	4b49      	ldr	r3, [pc, #292]	; (800619c <state_machine+0x198>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d14e      	bne.n	800611a <state_machine+0x116>
		{
			if(!dab_management_to_display.total_services)
 800607c:	4b49      	ldr	r3, [pc, #292]	; (80061a4 <state_machine+0x1a0>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <state_machine+0x88>
			{
				playing_state = not_playing;
 8006084:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <state_machine+0x1ac>)
 8006086:	2200      	movs	r2, #0
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	e028      	b.n	80060de <state_machine+0xda>
			}

			else
			{
				services_list_to_display = get_dab_service_list();
 800608c:	f7fd fc3c 	bl	8003908 <get_dab_service_list>
 8006090:	4603      	mov	r3, r0
 8006092:	4a48      	ldr	r2, [pc, #288]	; (80061b4 <state_machine+0x1b0>)
 8006094:	6013      	str	r3, [r2, #0]
				ensembles_list_to_display = get_dab_ensemble_list();
 8006096:	f7fd fc41 	bl	800391c <get_dab_ensemble_list>
 800609a:	4603      	mov	r3, r0
 800609c:	4a46      	ldr	r2, [pc, #280]	; (80061b8 <state_machine+0x1b4>)
 800609e:	6013      	str	r3, [r2, #0]

				audio_info_timeout = 50;
 80060a0:	4b46      	ldr	r3, [pc, #280]	; (80061bc <state_machine+0x1b8>)
 80060a2:	2232      	movs	r2, #50	; 0x32
 80060a4:	801a      	strh	r2, [r3, #0]
				while(!dab_audio_info_to_display.audio_sample_rate)
 80060a6:	e014      	b.n	80060d2 <state_machine+0xce>
				{
					dab_audio_info_to_display = Si468x_dab_get_audio_info();
 80060a8:	4c45      	ldr	r4, [pc, #276]	; (80061c0 <state_machine+0x1bc>)
 80060aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fc fcd4 	bl	8002a5c <Si468x_dab_get_audio_info>
 80060b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					audio_info_timeout--;
 80060be:	4b3f      	ldr	r3, [pc, #252]	; (80061bc <state_machine+0x1b8>)
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	4b3d      	ldr	r3, [pc, #244]	; (80061bc <state_machine+0x1b8>)
 80060c8:	801a      	strh	r2, [r3, #0]
					if(!audio_info_timeout)
 80060ca:	4b3c      	ldr	r3, [pc, #240]	; (80061bc <state_machine+0x1b8>)
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <state_machine+0xd8>
				while(!dab_audio_info_to_display.audio_sample_rate)
 80060d2:	4b3b      	ldr	r3, [pc, #236]	; (80061c0 <state_machine+0x1bc>)
 80060d4:	885b      	ldrh	r3, [r3, #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0e6      	beq.n	80060a8 <state_machine+0xa4>
 80060da:	e000      	b.n	80060de <state_machine+0xda>
					{
						break;
 80060dc:	bf00      	nop
					}
				}
			}

			Display_main_screen_background();
 80060de:	f7fd fcef 	bl	8003ac0 <Display_main_screen_background>
			Display_main_screen_data(services_list_to_display, ensembles_list_to_display, dab_management_to_display, dab_audio_info_to_display);
 80060e2:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <state_machine+0x1b0>)
 80060e4:	681e      	ldr	r6, [r3, #0]
 80060e6:	4b34      	ldr	r3, [pc, #208]	; (80061b8 <state_machine+0x1b4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	607b      	str	r3, [r7, #4]
 80060ec:	4c2d      	ldr	r4, [pc, #180]	; (80061a4 <state_machine+0x1a0>)
 80060ee:	4b34      	ldr	r3, [pc, #208]	; (80061c0 <state_machine+0x1bc>)
 80060f0:	ad02      	add	r5, sp, #8
 80060f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80060f8:	466a      	mov	r2, sp
 80060fa:	f104 0308 	add.w	r3, r4, #8
 80060fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006102:	e882 0003 	stmia.w	r2, {r0, r1}
 8006106:	e894 000c 	ldmia.w	r4, {r2, r3}
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4630      	mov	r0, r6
 800610e:	f7fd fd65 	bl	8003bdc <Display_main_screen_data>
			state_change_done = 1;
 8006112:	4b22      	ldr	r3, [pc, #136]	; (800619c <state_machine+0x198>)
 8006114:	2201      	movs	r2, #1
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e00d      	b.n	8006136 <state_machine+0x132>
		}

		else
		{
			if(playing_state == playing)
 800611a:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <state_machine+0x1ac>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d107      	bne.n	8006132 <state_machine+0x12e>
			{
				Si468x_dab_get_digital_service_data();
 8006122:	f7fc fe2f 	bl	8002d84 <Si468x_dab_get_digital_service_data>
				Display_main_screen_dls(dls_label_to_display);
 8006126:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <state_machine+0x1a4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f7fd feaa 	bl	8003e84 <Display_main_screen_dls>
 8006130:	e001      	b.n	8006136 <state_machine+0x132>
			}
			else
			{
				Display_main_screen_empty();
 8006132:	f7fd fee3 	bl	8003efc <Display_main_screen_empty>
			}
		}

		//left button handling (settings)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006136:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <state_machine+0x19c>)
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	2b05      	cmp	r3, #5
 800613c:	d911      	bls.n	8006162 <state_machine+0x15e>
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <state_machine+0x19c>)
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	2b9c      	cmp	r3, #156	; 0x9c
 8006144:	d80d      	bhi.n	8006162 <state_machine+0x15e>
 8006146:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <state_machine+0x19c>)
 8006148:	885b      	ldrh	r3, [r3, #2]
 800614a:	2bc3      	cmp	r3, #195	; 0xc3
 800614c:	d909      	bls.n	8006162 <state_machine+0x15e>
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <state_machine+0x19c>)
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	2bea      	cmp	r3, #234	; 0xea
 8006154:	d805      	bhi.n	8006162 <state_machine+0x15e>
		{
			state_change_done = 0;
 8006156:	4b11      	ldr	r3, [pc, #68]	; (800619c <state_machine+0x198>)
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <state_machine+0x1a8>)
 800615e:	2204      	movs	r2, #4
 8006160:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (service list)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006162:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <state_machine+0x19c>)
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	2ba3      	cmp	r3, #163	; 0xa3
 8006168:	f240 8358 	bls.w	800681c <state_machine+0x818>
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <state_machine+0x19c>)
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006174:	f200 8352 	bhi.w	800681c <state_machine+0x818>
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <state_machine+0x19c>)
 800617a:	885b      	ldrh	r3, [r3, #2]
 800617c:	2bc3      	cmp	r3, #195	; 0xc3
 800617e:	f240 834d 	bls.w	800681c <state_machine+0x818>
 8006182:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <state_machine+0x19c>)
 8006184:	885b      	ldrh	r3, [r3, #2]
 8006186:	2bea      	cmp	r3, #234	; 0xea
 8006188:	f200 8348 	bhi.w	800681c <state_machine+0x818>
		{
			state_change_done = 0;
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <state_machine+0x198>)
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <state_machine+0x1a8>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006198:	e340      	b.n	800681c <state_machine+0x818>
 800619a:	bf00      	nop
 800619c:	20007011 	.word	0x20007011
 80061a0:	20007018 	.word	0x20007018
 80061a4:	20007044 	.word	0x20007044
 80061a8:	2000706c 	.word	0x2000706c
 80061ac:	20007010 	.word	0x20007010
 80061b0:	20000150 	.word	0x20000150
 80061b4:	20007054 	.word	0x20007054
 80061b8:	20007058 	.word	0x20007058
 80061bc:	20007072 	.word	0x20007072
 80061c0:	2000705c 	.word	0x2000705c

	case services_list_screen:
		if(!state_change_done)
 80061c4:	4b7d      	ldr	r3, [pc, #500]	; (80063bc <state_machine+0x3b8>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d114      	bne.n	80061f6 <state_machine+0x1f2>
		{
			services_list_to_display = get_dab_service_list();
 80061cc:	f7fd fb9c 	bl	8003908 <get_dab_service_list>
 80061d0:	4603      	mov	r3, r0
 80061d2:	4a7b      	ldr	r2, [pc, #492]	; (80063c0 <state_machine+0x3bc>)
 80061d4:	6013      	str	r3, [r2, #0]
//			srv_list_start_index = 0;
			Display_stations_list_background();
 80061d6:	f7fd fef7 	bl	8003fc8 <Display_stations_list_background>
			Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80061da:	4b7a      	ldr	r3, [pc, #488]	; (80063c4 <state_machine+0x3c0>)
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	4b78      	ldr	r3, [pc, #480]	; (80063c0 <state_machine+0x3bc>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b79      	ldr	r3, [pc, #484]	; (80063c8 <state_machine+0x3c4>)
 80061e4:	9201      	str	r2, [sp, #4]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	9200      	str	r2, [sp, #0]
 80061ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061ec:	f7fd ffb0 	bl	8004150 <Display_stations_list_data>
			state_change_done = 1;
 80061f0:	4b72      	ldr	r3, [pc, #456]	; (80063bc <state_machine+0x3b8>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
		}

		//left button handling (main)
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80061f6:	4b75      	ldr	r3, [pc, #468]	; (80063cc <state_machine+0x3c8>)
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	2b05      	cmp	r3, #5
 80061fc:	d911      	bls.n	8006222 <state_machine+0x21e>
 80061fe:	4b73      	ldr	r3, [pc, #460]	; (80063cc <state_machine+0x3c8>)
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	2b9c      	cmp	r3, #156	; 0x9c
 8006204:	d80d      	bhi.n	8006222 <state_machine+0x21e>
 8006206:	4b71      	ldr	r3, [pc, #452]	; (80063cc <state_machine+0x3c8>)
 8006208:	885b      	ldrh	r3, [r3, #2]
 800620a:	2bc3      	cmp	r3, #195	; 0xc3
 800620c:	d909      	bls.n	8006222 <state_machine+0x21e>
 800620e:	4b6f      	ldr	r3, [pc, #444]	; (80063cc <state_machine+0x3c8>)
 8006210:	885b      	ldrh	r3, [r3, #2]
 8006212:	2bea      	cmp	r3, #234	; 0xea
 8006214:	d805      	bhi.n	8006222 <state_machine+0x21e>
		{
			state_change_done = 0;
 8006216:	4b69      	ldr	r3, [pc, #420]	; (80063bc <state_machine+0x3b8>)
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 800621c:	4b6c      	ldr	r3, [pc, #432]	; (80063d0 <state_machine+0x3cc>)
 800621e:	2200      	movs	r2, #0
 8006220:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (signal info)
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006222:	4b6a      	ldr	r3, [pc, #424]	; (80063cc <state_machine+0x3c8>)
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	2ba3      	cmp	r3, #163	; 0xa3
 8006228:	d912      	bls.n	8006250 <state_machine+0x24c>
 800622a:	4b68      	ldr	r3, [pc, #416]	; (80063cc <state_machine+0x3c8>)
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006232:	d80d      	bhi.n	8006250 <state_machine+0x24c>
 8006234:	4b65      	ldr	r3, [pc, #404]	; (80063cc <state_machine+0x3c8>)
 8006236:	885b      	ldrh	r3, [r3, #2]
 8006238:	2bc3      	cmp	r3, #195	; 0xc3
 800623a:	d909      	bls.n	8006250 <state_machine+0x24c>
 800623c:	4b63      	ldr	r3, [pc, #396]	; (80063cc <state_machine+0x3c8>)
 800623e:	885b      	ldrh	r3, [r3, #2]
 8006240:	2bea      	cmp	r3, #234	; 0xea
 8006242:	d805      	bhi.n	8006250 <state_machine+0x24c>
		{
			state_change_done = 0;
 8006244:	4b5d      	ldr	r3, [pc, #372]	; (80063bc <state_machine+0x3b8>)
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 800624a:	4b61      	ldr	r3, [pc, #388]	; (80063d0 <state_machine+0x3cc>)
 800624c:	2203      	movs	r2, #3
 800624e:	701a      	strb	r2, [r3, #0]
		}

		//up button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 20 && touch_coordinates.y < 102)
 8006250:	4b5e      	ldr	r3, [pc, #376]	; (80063cc <state_machine+0x3c8>)
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8006258:	d930      	bls.n	80062bc <state_machine+0x2b8>
 800625a:	4b5c      	ldr	r3, [pc, #368]	; (80063cc <state_machine+0x3c8>)
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006262:	d82b      	bhi.n	80062bc <state_machine+0x2b8>
 8006264:	4b59      	ldr	r3, [pc, #356]	; (80063cc <state_machine+0x3c8>)
 8006266:	885b      	ldrh	r3, [r3, #2]
 8006268:	2b14      	cmp	r3, #20
 800626a:	d927      	bls.n	80062bc <state_machine+0x2b8>
 800626c:	4b57      	ldr	r3, [pc, #348]	; (80063cc <state_machine+0x3c8>)
 800626e:	885b      	ldrh	r3, [r3, #2]
 8006270:	2b65      	cmp	r3, #101	; 0x65
 8006272:	d823      	bhi.n	80062bc <state_machine+0x2b8>
		{
			if(dab_management_to_display.total_services)
 8006274:	4b54      	ldr	r3, [pc, #336]	; (80063c8 <state_machine+0x3c4>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01f      	beq.n	80062bc <state_machine+0x2b8>
			{
				srv_list_start_index--;
 800627c:	4b51      	ldr	r3, [pc, #324]	; (80063c4 <state_machine+0x3c0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3b01      	subs	r3, #1
 8006282:	4a50      	ldr	r2, [pc, #320]	; (80063c4 <state_machine+0x3c0>)
 8006284:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index > dab_management_to_display.total_services || srv_list_start_index < 0)
 8006286:	4b50      	ldr	r3, [pc, #320]	; (80063c8 <state_machine+0x3c4>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	4b4d      	ldr	r3, [pc, #308]	; (80063c4 <state_machine+0x3c0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	db03      	blt.n	800629c <state_machine+0x298>
 8006294:	4b4b      	ldr	r3, [pc, #300]	; (80063c4 <state_machine+0x3c0>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	da04      	bge.n	80062a6 <state_machine+0x2a2>
				{
					srv_list_start_index = dab_management_to_display.total_services - 1;
 800629c:	4b4a      	ldr	r3, [pc, #296]	; (80063c8 <state_machine+0x3c4>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	4a48      	ldr	r2, [pc, #288]	; (80063c4 <state_machine+0x3c0>)
 80062a4:	6013      	str	r3, [r2, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 80062a6:	4b47      	ldr	r3, [pc, #284]	; (80063c4 <state_machine+0x3c0>)
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	4b45      	ldr	r3, [pc, #276]	; (80063c0 <state_machine+0x3bc>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b46      	ldr	r3, [pc, #280]	; (80063c8 <state_machine+0x3c4>)
 80062b0:	9201      	str	r2, [sp, #4]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	9200      	str	r2, [sp, #0]
 80062b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062b8:	f7fd ff4a 	bl	8004150 <Display_stations_list_data>
			}
		}

		//down button handling
		if(touch_coordinates.x > 290 && touch_coordinates.x < 315 && touch_coordinates.y > 108 && touch_coordinates.y < 190)
 80062bc:	4b43      	ldr	r3, [pc, #268]	; (80063cc <state_machine+0x3c8>)
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80062c4:	d92a      	bls.n	800631c <state_machine+0x318>
 80062c6:	4b41      	ldr	r3, [pc, #260]	; (80063cc <state_machine+0x3c8>)
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80062ce:	d825      	bhi.n	800631c <state_machine+0x318>
 80062d0:	4b3e      	ldr	r3, [pc, #248]	; (80063cc <state_machine+0x3c8>)
 80062d2:	885b      	ldrh	r3, [r3, #2]
 80062d4:	2b6c      	cmp	r3, #108	; 0x6c
 80062d6:	d921      	bls.n	800631c <state_machine+0x318>
 80062d8:	4b3c      	ldr	r3, [pc, #240]	; (80063cc <state_machine+0x3c8>)
 80062da:	885b      	ldrh	r3, [r3, #2]
 80062dc:	2bbd      	cmp	r3, #189	; 0xbd
 80062de:	d81d      	bhi.n	800631c <state_machine+0x318>
		{
			if(dab_management_to_display.total_services)
 80062e0:	4b39      	ldr	r3, [pc, #228]	; (80063c8 <state_machine+0x3c4>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d019      	beq.n	800631c <state_machine+0x318>
			{
				srv_list_start_index++;
 80062e8:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <state_machine+0x3c0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3301      	adds	r3, #1
 80062ee:	4a35      	ldr	r2, [pc, #212]	; (80063c4 <state_machine+0x3c0>)
 80062f0:	6013      	str	r3, [r2, #0]
				if(srv_list_start_index >= dab_management_to_display.total_services)
 80062f2:	4b35      	ldr	r3, [pc, #212]	; (80063c8 <state_machine+0x3c4>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	4b32      	ldr	r3, [pc, #200]	; (80063c4 <state_machine+0x3c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	dc02      	bgt.n	8006306 <state_machine+0x302>
				{
					srv_list_start_index = 0;
 8006300:	4b30      	ldr	r3, [pc, #192]	; (80063c4 <state_machine+0x3c0>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
				}
				Display_stations_list_data(srv_list_start_index, dab_management_to_display, services_list_to_display);
 8006306:	4b2f      	ldr	r3, [pc, #188]	; (80063c4 <state_machine+0x3c0>)
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <state_machine+0x3bc>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b2e      	ldr	r3, [pc, #184]	; (80063c8 <state_machine+0x3c4>)
 8006310:	9201      	str	r2, [sp, #4]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	9200      	str	r2, [sp, #0]
 8006316:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006318:	f7fd ff1a 	bl	8004150 <Display_stations_list_data>
			}
		}

		//Service 1 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 20 && touch_coordinates.y < 50)
 800631c:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <state_machine+0x3c8>)
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	2b05      	cmp	r3, #5
 8006322:	d91f      	bls.n	8006364 <state_machine+0x360>
 8006324:	4b29      	ldr	r3, [pc, #164]	; (80063cc <state_machine+0x3c8>)
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800632c:	d81a      	bhi.n	8006364 <state_machine+0x360>
 800632e:	4b27      	ldr	r3, [pc, #156]	; (80063cc <state_machine+0x3c8>)
 8006330:	885b      	ldrh	r3, [r3, #2]
 8006332:	2b14      	cmp	r3, #20
 8006334:	d916      	bls.n	8006364 <state_machine+0x360>
 8006336:	4b25      	ldr	r3, [pc, #148]	; (80063cc <state_machine+0x3c8>)
 8006338:	885b      	ldrh	r3, [r3, #2]
 800633a:	2b31      	cmp	r3, #49	; 0x31
 800633c:	d812      	bhi.n	8006364 <state_machine+0x360>
		{
			if(dab_management_to_display.total_services)
 800633e:	4b22      	ldr	r3, [pc, #136]	; (80063c8 <state_machine+0x3c4>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00e      	beq.n	8006364 <state_machine+0x360>
			{
				state_change_done = 0;
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <state_machine+0x3b8>)
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
				play_station(srv_list_start_index);
 800634c:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <state_machine+0x3c0>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	4618      	mov	r0, r3
 8006354:	f7fc ff0c 	bl	8003170 <play_station>
				playing_state = playing;
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <state_machine+0x3d0>)
 800635a:	2201      	movs	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 800635e:	4b1c      	ldr	r3, [pc, #112]	; (80063d0 <state_machine+0x3cc>)
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 2 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 55 && touch_coordinates.y < 85)
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <state_machine+0x3c8>)
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	2b05      	cmp	r3, #5
 800636a:	d943      	bls.n	80063f4 <state_machine+0x3f0>
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <state_machine+0x3c8>)
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006374:	d83e      	bhi.n	80063f4 <state_machine+0x3f0>
 8006376:	4b15      	ldr	r3, [pc, #84]	; (80063cc <state_machine+0x3c8>)
 8006378:	885b      	ldrh	r3, [r3, #2]
 800637a:	2b37      	cmp	r3, #55	; 0x37
 800637c:	d93a      	bls.n	80063f4 <state_machine+0x3f0>
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <state_machine+0x3c8>)
 8006380:	885b      	ldrh	r3, [r3, #2]
 8006382:	2b54      	cmp	r3, #84	; 0x54
 8006384:	d836      	bhi.n	80063f4 <state_machine+0x3f0>
		{
			if(dab_management_to_display.total_services)
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <state_machine+0x3c4>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d032      	beq.n	80063f4 <state_machine+0x3f0>
			{
				state_change_done = 0;
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <state_machine+0x3b8>)
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 1 >= dab_management_to_display.total_services)
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <state_machine+0x3c0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <state_machine+0x3c4>)
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	4293      	cmp	r3, r2
 80063a0:	db1a      	blt.n	80063d8 <state_machine+0x3d4>
				{
					play_station(srv_list_start_index + 1 - dab_management_to_display.total_services);
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <state_machine+0x3c0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <state_machine+0x3c4>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	3301      	adds	r3, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fc fedb 	bl	8003170 <play_station>
 80063ba:	e015      	b.n	80063e8 <state_machine+0x3e4>
 80063bc:	20007011 	.word	0x20007011
 80063c0:	20007054 	.word	0x20007054
 80063c4:	20007014 	.word	0x20007014
 80063c8:	20007044 	.word	0x20007044
 80063cc:	20007018 	.word	0x20007018
 80063d0:	20007010 	.word	0x20007010
 80063d4:	20000150 	.word	0x20000150
				}
				else
				{
					play_station(srv_list_start_index + 1);
 80063d8:	4b8d      	ldr	r3, [pc, #564]	; (8006610 <state_machine+0x60c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	3301      	adds	r3, #1
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fc fec4 	bl	8003170 <play_station>
				}

				playing_state = playing;
 80063e8:	4b8a      	ldr	r3, [pc, #552]	; (8006614 <state_machine+0x610>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80063ee:	4b8a      	ldr	r3, [pc, #552]	; (8006618 <state_machine+0x614>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 3 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 90 && touch_coordinates.y < 120)
 80063f4:	4b89      	ldr	r3, [pc, #548]	; (800661c <state_machine+0x618>)
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	2b05      	cmp	r3, #5
 80063fa:	d935      	bls.n	8006468 <state_machine+0x464>
 80063fc:	4b87      	ldr	r3, [pc, #540]	; (800661c <state_machine+0x618>)
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006404:	d830      	bhi.n	8006468 <state_machine+0x464>
 8006406:	4b85      	ldr	r3, [pc, #532]	; (800661c <state_machine+0x618>)
 8006408:	885b      	ldrh	r3, [r3, #2]
 800640a:	2b5a      	cmp	r3, #90	; 0x5a
 800640c:	d92c      	bls.n	8006468 <state_machine+0x464>
 800640e:	4b83      	ldr	r3, [pc, #524]	; (800661c <state_machine+0x618>)
 8006410:	885b      	ldrh	r3, [r3, #2]
 8006412:	2b77      	cmp	r3, #119	; 0x77
 8006414:	d828      	bhi.n	8006468 <state_machine+0x464>
		{
			if(dab_management_to_display.total_services)
 8006416:	4b82      	ldr	r3, [pc, #520]	; (8006620 <state_machine+0x61c>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d024      	beq.n	8006468 <state_machine+0x464>
			{
				state_change_done = 0;
 800641e:	4b81      	ldr	r3, [pc, #516]	; (8006624 <state_machine+0x620>)
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 2 >= dab_management_to_display.total_services)
 8006424:	4b7a      	ldr	r3, [pc, #488]	; (8006610 <state_machine+0x60c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3302      	adds	r3, #2
 800642a:	4a7d      	ldr	r2, [pc, #500]	; (8006620 <state_machine+0x61c>)
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	4293      	cmp	r3, r2
 8006430:	db0c      	blt.n	800644c <state_machine+0x448>
				{
					play_station(srv_list_start_index + 2 - dab_management_to_display.total_services);
 8006432:	4b77      	ldr	r3, [pc, #476]	; (8006610 <state_machine+0x60c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	4b79      	ldr	r3, [pc, #484]	; (8006620 <state_machine+0x61c>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	b2db      	uxtb	r3, r3
 8006440:	3302      	adds	r3, #2
 8006442:	b2db      	uxtb	r3, r3
 8006444:	4618      	mov	r0, r3
 8006446:	f7fc fe93 	bl	8003170 <play_station>
 800644a:	e007      	b.n	800645c <state_machine+0x458>
				}
				else
				{
					play_station(srv_list_start_index + 2);
 800644c:	4b70      	ldr	r3, [pc, #448]	; (8006610 <state_machine+0x60c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	3302      	adds	r3, #2
 8006454:	b2db      	uxtb	r3, r3
 8006456:	4618      	mov	r0, r3
 8006458:	f7fc fe8a 	bl	8003170 <play_station>
				}

				playing_state = playing;
 800645c:	4b6d      	ldr	r3, [pc, #436]	; (8006614 <state_machine+0x610>)
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006462:	4b6d      	ldr	r3, [pc, #436]	; (8006618 <state_machine+0x614>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 4 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 125 && touch_coordinates.y < 155)
 8006468:	4b6c      	ldr	r3, [pc, #432]	; (800661c <state_machine+0x618>)
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	2b05      	cmp	r3, #5
 800646e:	d935      	bls.n	80064dc <state_machine+0x4d8>
 8006470:	4b6a      	ldr	r3, [pc, #424]	; (800661c <state_machine+0x618>)
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006478:	d830      	bhi.n	80064dc <state_machine+0x4d8>
 800647a:	4b68      	ldr	r3, [pc, #416]	; (800661c <state_machine+0x618>)
 800647c:	885b      	ldrh	r3, [r3, #2]
 800647e:	2b7d      	cmp	r3, #125	; 0x7d
 8006480:	d92c      	bls.n	80064dc <state_machine+0x4d8>
 8006482:	4b66      	ldr	r3, [pc, #408]	; (800661c <state_machine+0x618>)
 8006484:	885b      	ldrh	r3, [r3, #2]
 8006486:	2b9a      	cmp	r3, #154	; 0x9a
 8006488:	d828      	bhi.n	80064dc <state_machine+0x4d8>
		{
			if(dab_management_to_display.total_services)
 800648a:	4b65      	ldr	r3, [pc, #404]	; (8006620 <state_machine+0x61c>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d024      	beq.n	80064dc <state_machine+0x4d8>
			{
				state_change_done = 0;
 8006492:	4b64      	ldr	r3, [pc, #400]	; (8006624 <state_machine+0x620>)
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 3 >= dab_management_to_display.total_services)
 8006498:	4b5d      	ldr	r3, [pc, #372]	; (8006610 <state_machine+0x60c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3303      	adds	r3, #3
 800649e:	4a60      	ldr	r2, [pc, #384]	; (8006620 <state_machine+0x61c>)
 80064a0:	7812      	ldrb	r2, [r2, #0]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	db0c      	blt.n	80064c0 <state_machine+0x4bc>
				{
					play_station(srv_list_start_index + 3 - dab_management_to_display.total_services);
 80064a6:	4b5a      	ldr	r3, [pc, #360]	; (8006610 <state_machine+0x60c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	4b5c      	ldr	r3, [pc, #368]	; (8006620 <state_machine+0x61c>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	3303      	adds	r3, #3
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fc fe59 	bl	8003170 <play_station>
 80064be:	e007      	b.n	80064d0 <state_machine+0x4cc>
				}
				else
				{
					play_station(srv_list_start_index + 3);
 80064c0:	4b53      	ldr	r3, [pc, #332]	; (8006610 <state_machine+0x60c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	3303      	adds	r3, #3
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc fe50 	bl	8003170 <play_station>
				}

				playing_state = playing;
 80064d0:	4b50      	ldr	r3, [pc, #320]	; (8006614 <state_machine+0x610>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 80064d6:	4b50      	ldr	r3, [pc, #320]	; (8006618 <state_machine+0x614>)
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
			}
		}

		//Service 5 button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 285 && touch_coordinates.y > 160 && touch_coordinates.y < 190)
 80064dc:	4b4f      	ldr	r3, [pc, #316]	; (800661c <state_machine+0x618>)
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	2b05      	cmp	r3, #5
 80064e2:	f240 819d 	bls.w	8006820 <state_machine+0x81c>
 80064e6:	4b4d      	ldr	r3, [pc, #308]	; (800661c <state_machine+0x618>)
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80064ee:	f200 8197 	bhi.w	8006820 <state_machine+0x81c>
 80064f2:	4b4a      	ldr	r3, [pc, #296]	; (800661c <state_machine+0x618>)
 80064f4:	885b      	ldrh	r3, [r3, #2]
 80064f6:	2ba0      	cmp	r3, #160	; 0xa0
 80064f8:	f240 8192 	bls.w	8006820 <state_machine+0x81c>
 80064fc:	4b47      	ldr	r3, [pc, #284]	; (800661c <state_machine+0x618>)
 80064fe:	885b      	ldrh	r3, [r3, #2]
 8006500:	2bbd      	cmp	r3, #189	; 0xbd
 8006502:	f200 818d 	bhi.w	8006820 <state_machine+0x81c>
		{
			if(dab_management_to_display.total_services)
 8006506:	4b46      	ldr	r3, [pc, #280]	; (8006620 <state_machine+0x61c>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8188 	beq.w	8006820 <state_machine+0x81c>
			{
				state_change_done = 0;
 8006510:	4b44      	ldr	r3, [pc, #272]	; (8006624 <state_machine+0x620>)
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]

				if(srv_list_start_index + 4 >= dab_management_to_display.total_services)
 8006516:	4b3e      	ldr	r3, [pc, #248]	; (8006610 <state_machine+0x60c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3304      	adds	r3, #4
 800651c:	4a40      	ldr	r2, [pc, #256]	; (8006620 <state_machine+0x61c>)
 800651e:	7812      	ldrb	r2, [r2, #0]
 8006520:	4293      	cmp	r3, r2
 8006522:	db0c      	blt.n	800653e <state_machine+0x53a>
				{
					play_station(srv_list_start_index + 4 - dab_management_to_display.total_services);
 8006524:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <state_machine+0x60c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	4b3d      	ldr	r3, [pc, #244]	; (8006620 <state_machine+0x61c>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	b2db      	uxtb	r3, r3
 8006532:	3304      	adds	r3, #4
 8006534:	b2db      	uxtb	r3, r3
 8006536:	4618      	mov	r0, r3
 8006538:	f7fc fe1a 	bl	8003170 <play_station>
 800653c:	e007      	b.n	800654e <state_machine+0x54a>
				}
				else
				{
					play_station(srv_list_start_index + 4);
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <state_machine+0x60c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	3304      	adds	r3, #4
 8006546:	b2db      	uxtb	r3, r3
 8006548:	4618      	mov	r0, r3
 800654a:	f7fc fe11 	bl	8003170 <play_station>
				}

				playing_state = playing;
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <state_machine+0x610>)
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
				system_state = main_screen;
 8006554:	4b30      	ldr	r3, [pc, #192]	; (8006618 <state_machine+0x614>)
 8006556:	2200      	movs	r2, #0
 8006558:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800655a:	e161      	b.n	8006820 <state_machine+0x81c>

	case signal_info:
		if(!state_change_done)
 800655c:	4b31      	ldr	r3, [pc, #196]	; (8006624 <state_machine+0x620>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <state_machine+0x56a>
		{
			Display_dab_digrad_status_background();
 8006564:	f7fe f990 	bl	8004888 <Display_dab_digrad_status_background>
			state_change_done = 1;
 8006568:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <state_machine+0x620>)
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
		}
		dab_digrad_status_to_display = Si468x_dab_digrad_status();
 800656e:	4c2e      	ldr	r4, [pc, #184]	; (8006628 <state_machine+0x624>)
 8006570:	f107 0308 	add.w	r3, r7, #8
 8006574:	4618      	mov	r0, r3
 8006576:	f7fb fb5f 	bl	8001c38 <Si468x_dab_digrad_status>
 800657a:	4625      	mov	r5, r4
 800657c:	f107 0408 	add.w	r4, r7, #8
 8006580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006588:	e894 0003 	ldmia.w	r4, {r0, r1}
 800658c:	e885 0003 	stmia.w	r5, {r0, r1}
		Display_dab_digrad_status_data(dab_digrad_status_to_display);
 8006590:	4e25      	ldr	r6, [pc, #148]	; (8006628 <state_machine+0x624>)
 8006592:	466d      	mov	r5, sp
 8006594:	f106 0410 	add.w	r4, r6, #16
 8006598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800659a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800659c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80065a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80065a8:	f7fe fb06 	bl	8004bb8 <Display_dab_digrad_status_data>

		//left button handling (services list)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80065ac:	4b1b      	ldr	r3, [pc, #108]	; (800661c <state_machine+0x618>)
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	2b05      	cmp	r3, #5
 80065b2:	d911      	bls.n	80065d8 <state_machine+0x5d4>
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <state_machine+0x618>)
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	2b9c      	cmp	r3, #156	; 0x9c
 80065ba:	d80d      	bhi.n	80065d8 <state_machine+0x5d4>
 80065bc:	4b17      	ldr	r3, [pc, #92]	; (800661c <state_machine+0x618>)
 80065be:	885b      	ldrh	r3, [r3, #2]
 80065c0:	2bc3      	cmp	r3, #195	; 0xc3
 80065c2:	d909      	bls.n	80065d8 <state_machine+0x5d4>
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <state_machine+0x618>)
 80065c6:	885b      	ldrh	r3, [r3, #2]
 80065c8:	2bea      	cmp	r3, #234	; 0xea
 80065ca:	d805      	bhi.n	80065d8 <state_machine+0x5d4>
		{
			state_change_done = 0;
 80065cc:	4b15      	ldr	r3, [pc, #84]	; (8006624 <state_machine+0x620>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
			system_state = services_list_screen;
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <state_machine+0x614>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (settings)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80065d8:	4b10      	ldr	r3, [pc, #64]	; (800661c <state_machine+0x618>)
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	2ba3      	cmp	r3, #163	; 0xa3
 80065de:	f240 8121 	bls.w	8006824 <state_machine+0x820>
 80065e2:	4b0e      	ldr	r3, [pc, #56]	; (800661c <state_machine+0x618>)
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80065ea:	f200 811b 	bhi.w	8006824 <state_machine+0x820>
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <state_machine+0x618>)
 80065f0:	885b      	ldrh	r3, [r3, #2]
 80065f2:	2bc3      	cmp	r3, #195	; 0xc3
 80065f4:	f240 8116 	bls.w	8006824 <state_machine+0x820>
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <state_machine+0x618>)
 80065fa:	885b      	ldrh	r3, [r3, #2]
 80065fc:	2bea      	cmp	r3, #234	; 0xea
 80065fe:	f200 8111 	bhi.w	8006824 <state_machine+0x820>
		{
			state_change_done = 0;
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <state_machine+0x620>)
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006608:	4b03      	ldr	r3, [pc, #12]	; (8006618 <state_machine+0x614>)
 800660a:	2204      	movs	r2, #4
 800660c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800660e:	e109      	b.n	8006824 <state_machine+0x820>
 8006610:	20007014 	.word	0x20007014
 8006614:	20000150 	.word	0x20000150
 8006618:	20007010 	.word	0x20007010
 800661c:	20007018 	.word	0x20007018
 8006620:	20007044 	.word	0x20007044
 8006624:	20007011 	.word	0x20007011
 8006628:	2000701c 	.word	0x2000701c

	case scanning:
		if(!state_change_done)
 800662c:	4b82      	ldr	r3, [pc, #520]	; (8006838 <state_machine+0x834>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d116      	bne.n	8006662 <state_machine+0x65e>
		{
			playing_state = not_playing;
 8006634:	4b81      	ldr	r3, [pc, #516]	; (800683c <state_machine+0x838>)
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
			Display_scanning_screen_background();
 800663a:	f7fd ff23 	bl	8004484 <Display_scanning_screen_background>
			state_change_done = 1;
 800663e:	4b7e      	ldr	r3, [pc, #504]	; (8006838 <state_machine+0x834>)
 8006640:	2201      	movs	r2, #1
 8006642:	701a      	strb	r2, [r3, #0]
			scan_complete_flag = Si468x_dab_full_scan();
 8006644:	f7fb ff24 	bl	8002490 <Si468x_dab_full_scan>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	4b7c      	ldr	r3, [pc, #496]	; (8006840 <state_machine+0x83c>)
 800664e:	701a      	strb	r2, [r3, #0]
			if(scan_complete_flag)
 8006650:	4b7b      	ldr	r3, [pc, #492]	; (8006840 <state_machine+0x83c>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d004      	beq.n	8006662 <state_machine+0x65e>
			{
//				dab_management_to_display = get_dab_management();
//				Display_scanning_screen_data(dab_digrad_status_to_display, dab_management_to_display);
				Display_scanning_screen_complete();
 8006658:	f7fe f8e0 	bl	800481c <Display_scanning_screen_complete>
				scan_complete_flag = 0;
 800665c:	4b78      	ldr	r3, [pc, #480]	; (8006840 <state_machine+0x83c>)
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
		}
//		dab_digrad_status_to_display = Si468x_dab_digrad_status();
//		Display_scanning_screen_data(dab_digrad_status_to_display);

		//cancel button handling
		if(touch_coordinates.x >  5 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 8006662:	4b78      	ldr	r3, [pc, #480]	; (8006844 <state_machine+0x840>)
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	2b05      	cmp	r3, #5
 8006668:	f240 80de 	bls.w	8006828 <state_machine+0x824>
 800666c:	4b75      	ldr	r3, [pc, #468]	; (8006844 <state_machine+0x840>)
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006674:	f200 80d8 	bhi.w	8006828 <state_machine+0x824>
 8006678:	4b72      	ldr	r3, [pc, #456]	; (8006844 <state_machine+0x840>)
 800667a:	885b      	ldrh	r3, [r3, #2]
 800667c:	2bc3      	cmp	r3, #195	; 0xc3
 800667e:	f240 80d3 	bls.w	8006828 <state_machine+0x824>
 8006682:	4b70      	ldr	r3, [pc, #448]	; (8006844 <state_machine+0x840>)
 8006684:	885b      	ldrh	r3, [r3, #2]
 8006686:	2bea      	cmp	r3, #234	; 0xea
 8006688:	f200 80ce 	bhi.w	8006828 <state_machine+0x824>
		{
			scan_cancel_flag = 1;
 800668c:	4b6e      	ldr	r3, [pc, #440]	; (8006848 <state_machine+0x844>)
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
			state_change_done = 0;
 8006692:	4b69      	ldr	r3, [pc, #420]	; (8006838 <state_machine+0x834>)
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
			system_state = settings;
 8006698:	4b6c      	ldr	r3, [pc, #432]	; (800684c <state_machine+0x848>)
 800669a:	2204      	movs	r2, #4
 800669c:	701a      	strb	r2, [r3, #0]
		}

		break;
 800669e:	e0c3      	b.n	8006828 <state_machine+0x824>

	case settings:
		if(!state_change_done)
 80066a0:	4b65      	ldr	r3, [pc, #404]	; (8006838 <state_machine+0x834>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d107      	bne.n	80066b8 <state_machine+0x6b4>
		{
			Display_settings_screen_background();
 80066a8:	f7fe fdf8 	bl	800529c <Display_settings_screen_background>
			scan_cancel_flag = 0;
 80066ac:	4b66      	ldr	r3, [pc, #408]	; (8006848 <state_machine+0x844>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]
			state_change_done = 1;
 80066b2:	4b61      	ldr	r3, [pc, #388]	; (8006838 <state_machine+0x834>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
		}

		Display_settings_screen_data(dab_management_to_display);
 80066b8:	4b65      	ldr	r3, [pc, #404]	; (8006850 <state_machine+0x84c>)
 80066ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066bc:	f7fe fee6 	bl	800548c <Display_settings_screen_data>

		//vol+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 80066c0:	4b60      	ldr	r3, [pc, #384]	; (8006844 <state_machine+0x840>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2ba3      	cmp	r3, #163	; 0xa3
 80066c6:	d91e      	bls.n	8006706 <state_machine+0x702>
 80066c8:	4b5e      	ldr	r3, [pc, #376]	; (8006844 <state_machine+0x840>)
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80066d0:	d819      	bhi.n	8006706 <state_machine+0x702>
 80066d2:	4b5c      	ldr	r3, [pc, #368]	; (8006844 <state_machine+0x840>)
 80066d4:	885b      	ldrh	r3, [r3, #2]
 80066d6:	2b3c      	cmp	r3, #60	; 0x3c
 80066d8:	d915      	bls.n	8006706 <state_machine+0x702>
 80066da:	4b5a      	ldr	r3, [pc, #360]	; (8006844 <state_machine+0x840>)
 80066dc:	885b      	ldrh	r3, [r3, #2]
 80066de:	2b63      	cmp	r3, #99	; 0x63
 80066e0:	d811      	bhi.n	8006706 <state_machine+0x702>
		{
			dab_management_to_display.audio_volume += 2;
 80066e2:	4b5b      	ldr	r3, [pc, #364]	; (8006850 <state_machine+0x84c>)
 80066e4:	7b9b      	ldrb	r3, [r3, #14]
 80066e6:	3302      	adds	r3, #2
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	4b59      	ldr	r3, [pc, #356]	; (8006850 <state_machine+0x84c>)
 80066ec:	739a      	strb	r2, [r3, #14]
			if(dab_management_to_display.audio_volume > 63)
 80066ee:	4b58      	ldr	r3, [pc, #352]	; (8006850 <state_machine+0x84c>)
 80066f0:	7b9b      	ldrb	r3, [r3, #14]
 80066f2:	2b3f      	cmp	r3, #63	; 0x3f
 80066f4:	d902      	bls.n	80066fc <state_machine+0x6f8>
			{
				dab_management_to_display.audio_volume = 63;
 80066f6:	4b56      	ldr	r3, [pc, #344]	; (8006850 <state_machine+0x84c>)
 80066f8:	223f      	movs	r2, #63	; 0x3f
 80066fa:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 80066fc:	4b54      	ldr	r3, [pc, #336]	; (8006850 <state_machine+0x84c>)
 80066fe:	7b9b      	ldrb	r3, [r3, #14]
 8006700:	4618      	mov	r0, r3
 8006702:	f7fc fcff 	bl	8003104 <Si468x_set_audio_volume>
		}

		//vol- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 60 && touch_coordinates.y < 100)
 8006706:	4b4f      	ldr	r3, [pc, #316]	; (8006844 <state_machine+0x840>)
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	2b05      	cmp	r3, #5
 800670c:	d91d      	bls.n	800674a <state_machine+0x746>
 800670e:	4b4d      	ldr	r3, [pc, #308]	; (8006844 <state_machine+0x840>)
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	2b9c      	cmp	r3, #156	; 0x9c
 8006714:	d819      	bhi.n	800674a <state_machine+0x746>
 8006716:	4b4b      	ldr	r3, [pc, #300]	; (8006844 <state_machine+0x840>)
 8006718:	885b      	ldrh	r3, [r3, #2]
 800671a:	2b3c      	cmp	r3, #60	; 0x3c
 800671c:	d915      	bls.n	800674a <state_machine+0x746>
 800671e:	4b49      	ldr	r3, [pc, #292]	; (8006844 <state_machine+0x840>)
 8006720:	885b      	ldrh	r3, [r3, #2]
 8006722:	2b63      	cmp	r3, #99	; 0x63
 8006724:	d811      	bhi.n	800674a <state_machine+0x746>
		{
			dab_management_to_display.audio_volume -= 2;
 8006726:	4b4a      	ldr	r3, [pc, #296]	; (8006850 <state_machine+0x84c>)
 8006728:	7b9b      	ldrb	r3, [r3, #14]
 800672a:	3b02      	subs	r3, #2
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4b48      	ldr	r3, [pc, #288]	; (8006850 <state_machine+0x84c>)
 8006730:	739a      	strb	r2, [r3, #14]
			if((dab_management_to_display.audio_volume < 0) || (dab_management_to_display.audio_volume > 63))
 8006732:	4b47      	ldr	r3, [pc, #284]	; (8006850 <state_machine+0x84c>)
 8006734:	7b9b      	ldrb	r3, [r3, #14]
 8006736:	2b3f      	cmp	r3, #63	; 0x3f
 8006738:	d902      	bls.n	8006740 <state_machine+0x73c>
			{
				dab_management_to_display.audio_volume = 0;
 800673a:	4b45      	ldr	r3, [pc, #276]	; (8006850 <state_machine+0x84c>)
 800673c:	2200      	movs	r2, #0
 800673e:	739a      	strb	r2, [r3, #14]
			}
			Si468x_set_audio_volume(dab_management_to_display.audio_volume);
 8006740:	4b43      	ldr	r3, [pc, #268]	; (8006850 <state_machine+0x84c>)
 8006742:	7b9b      	ldrb	r3, [r3, #14]
 8006744:	4618      	mov	r0, r3
 8006746:	f7fc fcdd 	bl	8003104 <Si468x_set_audio_volume>
		}

		//backlight+ button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 800674a:	4b3e      	ldr	r3, [pc, #248]	; (8006844 <state_machine+0x840>)
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	2ba3      	cmp	r3, #163	; 0xa3
 8006750:	d907      	bls.n	8006762 <state_machine+0x75e>
 8006752:	4b3c      	ldr	r3, [pc, #240]	; (8006844 <state_machine+0x840>)
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800675a:	d802      	bhi.n	8006762 <state_machine+0x75e>
 800675c:	4b39      	ldr	r3, [pc, #228]	; (8006844 <state_machine+0x840>)
 800675e:	885b      	ldrh	r3, [r3, #2]
 8006760:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//backlight- button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 105 && touch_coordinates.y < 145)
 8006762:	4b38      	ldr	r3, [pc, #224]	; (8006844 <state_machine+0x840>)
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	2b05      	cmp	r3, #5
 8006768:	d906      	bls.n	8006778 <state_machine+0x774>
 800676a:	4b36      	ldr	r3, [pc, #216]	; (8006844 <state_machine+0x840>)
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	2b9c      	cmp	r3, #156	; 0x9c
 8006770:	d802      	bhi.n	8006778 <state_machine+0x774>
 8006772:	4b34      	ldr	r3, [pc, #208]	; (8006844 <state_machine+0x840>)
 8006774:	885b      	ldrh	r3, [r3, #2]
 8006776:	2b69      	cmp	r3, #105	; 0x69
		{

		}

		//scanning button handling
		if(touch_coordinates.x > 5 && touch_coordinates.x < 157 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 8006778:	4b32      	ldr	r3, [pc, #200]	; (8006844 <state_machine+0x840>)
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	2b05      	cmp	r3, #5
 800677e:	d911      	bls.n	80067a4 <state_machine+0x7a0>
 8006780:	4b30      	ldr	r3, [pc, #192]	; (8006844 <state_machine+0x840>)
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	2b9c      	cmp	r3, #156	; 0x9c
 8006786:	d80d      	bhi.n	80067a4 <state_machine+0x7a0>
 8006788:	4b2e      	ldr	r3, [pc, #184]	; (8006844 <state_machine+0x840>)
 800678a:	885b      	ldrh	r3, [r3, #2]
 800678c:	2b96      	cmp	r3, #150	; 0x96
 800678e:	d909      	bls.n	80067a4 <state_machine+0x7a0>
 8006790:	4b2c      	ldr	r3, [pc, #176]	; (8006844 <state_machine+0x840>)
 8006792:	885b      	ldrh	r3, [r3, #2]
 8006794:	2bbd      	cmp	r3, #189	; 0xbd
 8006796:	d805      	bhi.n	80067a4 <state_machine+0x7a0>
		{
			state_change_done = 0;
 8006798:	4b27      	ldr	r3, [pc, #156]	; (8006838 <state_machine+0x834>)
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
			system_state = scanning;
 800679e:	4b2b      	ldr	r3, [pc, #172]	; (800684c <state_machine+0x848>)
 80067a0:	2202      	movs	r2, #2
 80067a2:	701a      	strb	r2, [r3, #0]
		}

		//touch calibration button handling
		if(touch_coordinates.x > 163 && touch_coordinates.x < 315 && touch_coordinates.y > 150 && touch_coordinates.y < 190)
 80067a4:	4b27      	ldr	r3, [pc, #156]	; (8006844 <state_machine+0x840>)
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	2ba3      	cmp	r3, #163	; 0xa3
 80067aa:	d907      	bls.n	80067bc <state_machine+0x7b8>
 80067ac:	4b25      	ldr	r3, [pc, #148]	; (8006844 <state_machine+0x840>)
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80067b4:	d802      	bhi.n	80067bc <state_machine+0x7b8>
 80067b6:	4b23      	ldr	r3, [pc, #140]	; (8006844 <state_machine+0x840>)
 80067b8:	885b      	ldrh	r3, [r3, #2]
 80067ba:	2b96      	cmp	r3, #150	; 0x96
		{

		}

		//left button handling (signal info)
		if(touch_coordinates.x >  5 && touch_coordinates.x < 157 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80067bc:	4b21      	ldr	r3, [pc, #132]	; (8006844 <state_machine+0x840>)
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	2b05      	cmp	r3, #5
 80067c2:	d911      	bls.n	80067e8 <state_machine+0x7e4>
 80067c4:	4b1f      	ldr	r3, [pc, #124]	; (8006844 <state_machine+0x840>)
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	2b9c      	cmp	r3, #156	; 0x9c
 80067ca:	d80d      	bhi.n	80067e8 <state_machine+0x7e4>
 80067cc:	4b1d      	ldr	r3, [pc, #116]	; (8006844 <state_machine+0x840>)
 80067ce:	885b      	ldrh	r3, [r3, #2]
 80067d0:	2bc3      	cmp	r3, #195	; 0xc3
 80067d2:	d909      	bls.n	80067e8 <state_machine+0x7e4>
 80067d4:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <state_machine+0x840>)
 80067d6:	885b      	ldrh	r3, [r3, #2]
 80067d8:	2bea      	cmp	r3, #234	; 0xea
 80067da:	d805      	bhi.n	80067e8 <state_machine+0x7e4>
		{
			state_change_done = 0;
 80067dc:	4b16      	ldr	r3, [pc, #88]	; (8006838 <state_machine+0x834>)
 80067de:	2200      	movs	r2, #0
 80067e0:	701a      	strb	r2, [r3, #0]
			system_state = signal_info;
 80067e2:	4b1a      	ldr	r3, [pc, #104]	; (800684c <state_machine+0x848>)
 80067e4:	2203      	movs	r2, #3
 80067e6:	701a      	strb	r2, [r3, #0]
		}

		//right button handling (main screen)
		if(touch_coordinates.x >  163 && touch_coordinates.x < 315 && touch_coordinates.y > 195 && touch_coordinates.y < 235)
 80067e8:	4b16      	ldr	r3, [pc, #88]	; (8006844 <state_machine+0x840>)
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	2ba3      	cmp	r3, #163	; 0xa3
 80067ee:	d91d      	bls.n	800682c <state_machine+0x828>
 80067f0:	4b14      	ldr	r3, [pc, #80]	; (8006844 <state_machine+0x840>)
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80067f8:	d818      	bhi.n	800682c <state_machine+0x828>
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <state_machine+0x840>)
 80067fc:	885b      	ldrh	r3, [r3, #2]
 80067fe:	2bc3      	cmp	r3, #195	; 0xc3
 8006800:	d914      	bls.n	800682c <state_machine+0x828>
 8006802:	4b10      	ldr	r3, [pc, #64]	; (8006844 <state_machine+0x840>)
 8006804:	885b      	ldrh	r3, [r3, #2]
 8006806:	2bea      	cmp	r3, #234	; 0xea
 8006808:	d810      	bhi.n	800682c <state_machine+0x828>
		{
			state_change_done = 0;
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <state_machine+0x834>)
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]
			system_state = main_screen;
 8006810:	4b0e      	ldr	r3, [pc, #56]	; (800684c <state_machine+0x848>)
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
		}


		break;
 8006816:	e009      	b.n	800682c <state_machine+0x828>

	default:
		break;
 8006818:	bf00      	nop
 800681a:	e008      	b.n	800682e <state_machine+0x82a>
		break;
 800681c:	bf00      	nop
 800681e:	e006      	b.n	800682e <state_machine+0x82a>
		break;
 8006820:	bf00      	nop
 8006822:	e004      	b.n	800682e <state_machine+0x82a>
		break;
 8006824:	bf00      	nop
 8006826:	e002      	b.n	800682e <state_machine+0x82a>
		break;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <state_machine+0x82a>
		break;
 800682c:	bf00      	nop
	}
}
 800682e:	bf00      	nop
 8006830:	3744      	adds	r7, #68	; 0x44
 8006832:	46bd      	mov	sp, r7
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006836:	bf00      	nop
 8006838:	20007011 	.word	0x20007011
 800683c:	20000150 	.word	0x20000150
 8006840:	20007071 	.word	0x20007071
 8006844:	20007018 	.word	0x20007018
 8006848:	20007070 	.word	0x20007070
 800684c:	20007010 	.word	0x20007010
 8006850:	20007044 	.word	0x20007044

08006854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <HAL_MspInit+0x4c>)
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <HAL_MspInit+0x4c>)
 8006864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006868:	6453      	str	r3, [r2, #68]	; 0x44
 800686a:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <HAL_MspInit+0x4c>)
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <HAL_MspInit+0x4c>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	4a08      	ldr	r2, [pc, #32]	; (80068a0 <HAL_MspInit+0x4c>)
 8006880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006884:	6413      	str	r3, [r2, #64]	; 0x40
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <HAL_MspInit+0x4c>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40023800 	.word	0x40023800

080068a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80068a8:	e7fe      	b.n	80068a8 <NMI_Handler+0x4>

080068aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068aa:	b480      	push	{r7}
 80068ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068ae:	e7fe      	b.n	80068ae <HardFault_Handler+0x4>

080068b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068b4:	e7fe      	b.n	80068b4 <MemManage_Handler+0x4>

080068b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068b6:	b480      	push	{r7}
 80068b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068ba:	e7fe      	b.n	80068ba <BusFault_Handler+0x4>

080068bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068c0:	e7fe      	b.n	80068c0 <UsageFault_Handler+0x4>

080068c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068c2:	b480      	push	{r7}
 80068c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068de:	b480      	push	{r7}
 80068e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068e2:	bf00      	nop
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068f0:	f000 fd26 	bl	8007340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80068fc:	4802      	ldr	r0, [pc, #8]	; (8006908 <DMA1_Stream4_IRQHandler+0x10>)
 80068fe:	f000 ff45 	bl	800778c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20006fb0 	.word	0x20006fb0

0800690c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006910:	4802      	ldr	r0, [pc, #8]	; (800691c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006912:	f005 fc5a 	bl	800c1ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006916:	bf00      	nop
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	200070bc 	.word	0x200070bc

08006920 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006924:	4802      	ldr	r0, [pc, #8]	; (8006930 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006926:	f005 fc50 	bl	800c1ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800692a:	bf00      	nop
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20007104 	.word	0x20007104

08006934 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006938:	4802      	ldr	r0, [pc, #8]	; (8006944 <SPI2_IRQHandler+0x10>)
 800693a:	f005 f8e9 	bl	800bb10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800693e:	bf00      	nop
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20006f58 	.word	0x20006f58

08006948 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800694c:	4802      	ldr	r0, [pc, #8]	; (8006958 <I2C3_EV_IRQHandler+0x10>)
 800694e:	f001 ff99 	bl	8008884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8006952:	bf00      	nop
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20006eac 	.word	0x20006eac

0800695c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8006960:	4802      	ldr	r0, [pc, #8]	; (800696c <I2C3_ER_IRQHandler+0x10>)
 8006962:	f002 f900 	bl	8008b66 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8006966:	bf00      	nop
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20006eac 	.word	0x20006eac

08006970 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM11)
	{
//		Leds_Control_Blink();

	}
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <SystemInit+0x20>)
 800698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698e:	4a05      	ldr	r2, [pc, #20]	; (80069a4 <SystemInit+0x20>)
 8006990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	e000ed00 	.word	0xe000ed00

080069a8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069ae:	f107 0320 	add.w	r3, r7, #32
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	605a      	str	r2, [r3, #4]
 80069c0:	609a      	str	r2, [r3, #8]
 80069c2:	60da      	str	r2, [r3, #12]
 80069c4:	611a      	str	r2, [r3, #16]
 80069c6:	615a      	str	r2, [r3, #20]
 80069c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80069ca:	4b22      	ldr	r3, [pc, #136]	; (8006a54 <MX_TIM3_Init+0xac>)
 80069cc:	4a22      	ldr	r2, [pc, #136]	; (8006a58 <MX_TIM3_Init+0xb0>)
 80069ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80069d0:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <MX_TIM3_Init+0xac>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069d6:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <MX_TIM3_Init+0xac>)
 80069d8:	2200      	movs	r2, #0
 80069da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80069dc:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <MX_TIM3_Init+0xac>)
 80069de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069e4:	4b1b      	ldr	r3, [pc, #108]	; (8006a54 <MX_TIM3_Init+0xac>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069ea:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <MX_TIM3_Init+0xac>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80069f0:	4818      	ldr	r0, [pc, #96]	; (8006a54 <MX_TIM3_Init+0xac>)
 80069f2:	f005 fb9b 	bl	800c12c <HAL_TIM_PWM_Init>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80069fc:	f7ff f9d8 	bl	8005db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a00:	2300      	movs	r3, #0
 8006a02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006a08:	f107 0320 	add.w	r3, r7, #32
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4811      	ldr	r0, [pc, #68]	; (8006a54 <MX_TIM3_Init+0xac>)
 8006a10:	f006 f81e 	bl	800ca50 <HAL_TIMEx_MasterConfigSynchronization>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006a1a:	f7ff f9c9 	bl	8005db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a1e:	2360      	movs	r3, #96	; 0x60
 8006a20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006a2e:	1d3b      	adds	r3, r7, #4
 8006a30:	2208      	movs	r2, #8
 8006a32:	4619      	mov	r1, r3
 8006a34:	4807      	ldr	r0, [pc, #28]	; (8006a54 <MX_TIM3_Init+0xac>)
 8006a36:	f005 fcd1 	bl	800c3dc <HAL_TIM_PWM_ConfigChannel>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006a40:	f7ff f9b6 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006a44:	4803      	ldr	r0, [pc, #12]	; (8006a54 <MX_TIM3_Init+0xac>)
 8006a46:	f000 f8b9 	bl	8006bbc <HAL_TIM_MspPostInit>

}
 8006a4a:	bf00      	nop
 8006a4c:	3728      	adds	r7, #40	; 0x28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20007074 	.word	0x20007074
 8006a58:	40000400 	.word	0x40000400

08006a5c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006a60:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <MX_TIM10_Init+0x40>)
 8006a62:	4a0f      	ldr	r2, [pc, #60]	; (8006aa0 <MX_TIM10_Init+0x44>)
 8006a64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 14999;
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <MX_TIM10_Init+0x40>)
 8006a68:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006a6c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <MX_TIM10_Init+0x40>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 599;
 8006a74:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <MX_TIM10_Init+0x40>)
 8006a76:	f240 2257 	movw	r2, #599	; 0x257
 8006a7a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a7c:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <MX_TIM10_Init+0x40>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <MX_TIM10_Init+0x40>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006a88:	4804      	ldr	r0, [pc, #16]	; (8006a9c <MX_TIM10_Init+0x40>)
 8006a8a:	f005 fa8f 	bl	800bfac <HAL_TIM_Base_Init>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006a94:	f7ff f98c 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006a98:	bf00      	nop
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200070bc 	.word	0x200070bc
 8006aa0:	40014400 	.word	0x40014400

08006aa4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <MX_TIM11_Init+0x40>)
 8006aaa:	4a0f      	ldr	r2, [pc, #60]	; (8006ae8 <MX_TIM11_Init+0x44>)
 8006aac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8006aae:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <MX_TIM11_Init+0x40>)
 8006ab0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006ab4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <MX_TIM11_Init+0x40>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1299;
 8006abc:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <MX_TIM11_Init+0x40>)
 8006abe:	f240 5213 	movw	r2, #1299	; 0x513
 8006ac2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <MX_TIM11_Init+0x40>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aca:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <MX_TIM11_Init+0x40>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006ad0:	4804      	ldr	r0, [pc, #16]	; (8006ae4 <MX_TIM11_Init+0x40>)
 8006ad2:	f005 fa6b 	bl	800bfac <HAL_TIM_Base_Init>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8006adc:	f7ff f968 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006ae0:	bf00      	nop
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20007104 	.word	0x20007104
 8006ae8:	40014800 	.word	0x40014800

08006aec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a0b      	ldr	r2, [pc, #44]	; (8006b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d10d      	bne.n	8006b1a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <HAL_TIM_PWM_MspInit+0x40>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <HAL_TIM_PWM_MspInit+0x40>)
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <HAL_TIM_PWM_MspInit+0x40>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40023800 	.word	0x40023800

08006b30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <HAL_TIM_Base_MspInit+0x80>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d116      	bne.n	8006b70 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <HAL_TIM_Base_MspInit+0x84>)
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <HAL_TIM_Base_MspInit+0x84>)
 8006b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b50:	6453      	str	r3, [r2, #68]	; 0x44
 8006b52:	4b18      	ldr	r3, [pc, #96]	; (8006bb4 <HAL_TIM_Base_MspInit+0x84>)
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	2019      	movs	r0, #25
 8006b64:	f000 fd0b 	bl	800757e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006b68:	2019      	movs	r0, #25
 8006b6a:	f000 fd24 	bl	80075b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006b6e:	e01a      	b.n	8006ba6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a10      	ldr	r2, [pc, #64]	; (8006bb8 <HAL_TIM_Base_MspInit+0x88>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d115      	bne.n	8006ba6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <HAL_TIM_Base_MspInit+0x84>)
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	4a0c      	ldr	r2, [pc, #48]	; (8006bb4 <HAL_TIM_Base_MspInit+0x84>)
 8006b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b88:	6453      	str	r3, [r2, #68]	; 0x44
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <HAL_TIM_Base_MspInit+0x84>)
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b92:	60bb      	str	r3, [r7, #8]
 8006b94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006b96:	2200      	movs	r2, #0
 8006b98:	2100      	movs	r1, #0
 8006b9a:	201a      	movs	r0, #26
 8006b9c:	f000 fcef 	bl	800757e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006ba0:	201a      	movs	r0, #26
 8006ba2:	f000 fd08 	bl	80075b6 <HAL_NVIC_EnableIRQ>
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	40014800 	.word	0x40014800

08006bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	605a      	str	r2, [r3, #4]
 8006bce:	609a      	str	r2, [r3, #8]
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <HAL_TIM_MspPostInit+0x68>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d11e      	bne.n	8006c1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bde:	2300      	movs	r3, #0
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <HAL_TIM_MspPostInit+0x6c>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	4a10      	ldr	r2, [pc, #64]	; (8006c28 <HAL_TIM_MspPostInit+0x6c>)
 8006be8:	f043 0304 	orr.w	r3, r3, #4
 8006bec:	6313      	str	r3, [r2, #48]	; 0x30
 8006bee:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <HAL_TIM_MspPostInit+0x6c>)
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = BACKLIGHT_PWM_OUT_Pin;
 8006bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c00:	2302      	movs	r3, #2
 8006c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BACKLIGHT_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006c10:	f107 030c 	add.w	r3, r7, #12
 8006c14:	4619      	mov	r1, r3
 8006c16:	4805      	ldr	r0, [pc, #20]	; (8006c2c <HAL_TIM_MspPostInit+0x70>)
 8006c18:	f001 f802 	bl	8007c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006c1c:	bf00      	nop
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	40020800 	.word	0x40020800

08006c30 <Touch_read>:

uint16_t xtemp, ytemp;
//uint16_t x_pixel_val, y_pixel_val;

touch_coordinates_t Touch_read()
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates;

	tp_dev.scan(0);
 8006c36:	4b26      	ldr	r3, [pc, #152]	; (8006cd0 <Touch_read+0xa0>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	4798      	blx	r3

	if(tp_dev.sta & TP_PRES_DOWN)
 8006c3e:	4b24      	ldr	r3, [pc, #144]	; (8006cd0 <Touch_read+0xa0>)
 8006c40:	7c1b      	ldrb	r3, [r3, #16]
 8006c42:	b25b      	sxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	da32      	bge.n	8006cae <Touch_read+0x7e>
	{
		xtemp = TP_Read_XOY(0xD0);
 8006c48:	20d0      	movs	r0, #208	; 0xd0
 8006c4a:	f000 f8e9 	bl	8006e20 <TP_Read_XOY>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	461a      	mov	r2, r3
 8006c52:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <Touch_read+0xa4>)
 8006c54:	801a      	strh	r2, [r3, #0]
		ytemp = TP_Read_XOY(0x90);
 8006c56:	2090      	movs	r0, #144	; 0x90
 8006c58:	f000 f8e2 	bl	8006e20 <TP_Read_XOY>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <Touch_read+0xa8>)
 8006c62:	801a      	strh	r2, [r3, #0]

		touch_coordinates.x = 320 - 320 * (ytemp - 350) / (3900-350);
 8006c64:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <Touch_read+0xa8>)
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	f5a3 72af 	sub.w	r2, r3, #350	; 0x15e
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	019b      	lsls	r3, r3, #6
 8006c74:	4a19      	ldr	r2, [pc, #100]	; (8006cdc <Touch_read+0xac>)
 8006c76:	fb82 1203 	smull	r1, r2, r2, r3
 8006c7a:	441a      	add	r2, r3
 8006c7c:	12d2      	asrs	r2, r2, #11
 8006c7e:	17db      	asrs	r3, r3, #31
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 240 - 230 * (xtemp - 240) / (3800-230);
 8006c8c:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <Touch_read+0xa4>)
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	3bf0      	subs	r3, #240	; 0xf0
 8006c92:	22e6      	movs	r2, #230	; 0xe6
 8006c94:	fb02 f303 	mul.w	r3, r2, r3
 8006c98:	4a11      	ldr	r2, [pc, #68]	; (8006ce0 <Touch_read+0xb0>)
 8006c9a:	fb82 1203 	smull	r1, r2, r2, r3
 8006c9e:	1252      	asrs	r2, r2, #9
 8006ca0:	17db      	asrs	r3, r3, #31
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	33f0      	adds	r3, #240	; 0xf0
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	807b      	strh	r3, [r7, #2]
 8006cac:	e003      	b.n	8006cb6 <Touch_read+0x86>

	}

	else
	{
		touch_coordinates.x = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	803b      	strh	r3, [r7, #0]
		touch_coordinates.y = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	807b      	strh	r3, [r7, #2]
	}

	return touch_coordinates;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	88ba      	ldrh	r2, [r7, #4]
 8006cbe:	f362 030f 	bfi	r3, r2, #0, #16
 8006cc2:	88fa      	ldrh	r2, [r7, #6]
 8006cc4:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000158 	.word	0x20000158
 8006cd4:	2000714c 	.word	0x2000714c
 8006cd8:	2000714e 	.word	0x2000714e
 8006cdc:	93afcf8b 	.word	0x93afcf8b
 8006ce0:	24b70025 	.word	0x24b70025

08006ce4 <TP_Write_Byte>:
 * @function   :Write a byte data to the touch screen IC with SPI bus
 * @parameters :num:Data to be written
 * @retvalue   :None
******************************************************************************/
void TP_Write_Byte(uint8_t num)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
	for(count = 0; count < 8; count++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	e021      	b.n	8006d3c <TP_Write_Byte+0x58>
	{
		if(num & 0x80)
 8006cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	da05      	bge.n	8006d0c <TP_Write_Byte+0x28>
			T_DIN_ON;
 8006d00:	2201      	movs	r2, #1
 8006d02:	2120      	movs	r1, #32
 8006d04:	4811      	ldr	r0, [pc, #68]	; (8006d4c <TP_Write_Byte+0x68>)
 8006d06:	f001 f93f 	bl	8007f88 <HAL_GPIO_WritePin>
 8006d0a:	e004      	b.n	8006d16 <TP_Write_Byte+0x32>
		else
			T_DIN_OFF;
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2120      	movs	r1, #32
 8006d10:	480e      	ldr	r0, [pc, #56]	; (8006d4c <TP_Write_Byte+0x68>)
 8006d12:	f001 f939 	bl	8007f88 <HAL_GPIO_WritePin>

		num <<= 1;
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	71fb      	strb	r3, [r7, #7]
		T_CLK_OFF;
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2108      	movs	r1, #8
 8006d20:	480a      	ldr	r0, [pc, #40]	; (8006d4c <TP_Write_Byte+0x68>)
 8006d22:	f001 f931 	bl	8007f88 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006d26:	2001      	movs	r0, #1
 8006d28:	f000 fb2a 	bl	8007380 <HAL_Delay>
		T_CLK_ON;
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	2108      	movs	r1, #8
 8006d30:	4806      	ldr	r0, [pc, #24]	; (8006d4c <TP_Write_Byte+0x68>)
 8006d32:	f001 f929 	bl	8007f88 <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b07      	cmp	r3, #7
 8006d40:	d9da      	bls.n	8006cf8 <TP_Write_Byte+0x14>
	}
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40020400 	.word	0x40020400

08006d50 <TP_Read_AD>:
	return(Num);

}
*/
uint16_t TP_Read_AD(uint8_t CMD)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
	uint16_t Num = 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	81bb      	strh	r3, [r7, #12]
	T_CLK_OFF;
 8006d62:	2200      	movs	r2, #0
 8006d64:	2108      	movs	r1, #8
 8006d66:	482c      	ldr	r0, [pc, #176]	; (8006e18 <TP_Read_AD+0xc8>)
 8006d68:	f001 f90e 	bl	8007f88 <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2120      	movs	r1, #32
 8006d70:	4829      	ldr	r0, [pc, #164]	; (8006e18 <TP_Read_AD+0xc8>)
 8006d72:	f001 f909 	bl	8007f88 <HAL_GPIO_WritePin>
	T_CS_OFF;
 8006d76:	2200      	movs	r2, #0
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	4828      	ldr	r0, [pc, #160]	; (8006e1c <TP_Read_AD+0xcc>)
 8006d7c:	f001 f904 	bl	8007f88 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff ffae 	bl	8006ce4 <TP_Write_Byte>
	HAL_Delay(1);
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f000 faf9 	bl	8007380 <HAL_Delay>
	T_CLK_OFF;
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2108      	movs	r1, #8
 8006d92:	4821      	ldr	r0, [pc, #132]	; (8006e18 <TP_Read_AD+0xc8>)
 8006d94:	f001 f8f8 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006d98:	2001      	movs	r0, #1
 8006d9a:	f000 faf1 	bl	8007380 <HAL_Delay>
	T_CLK_ON;
 8006d9e:	2201      	movs	r2, #1
 8006da0:	2108      	movs	r1, #8
 8006da2:	481d      	ldr	r0, [pc, #116]	; (8006e18 <TP_Read_AD+0xc8>)
 8006da4:	f001 f8f0 	bl	8007f88 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006da8:	2001      	movs	r0, #1
 8006daa:	f000 fae9 	bl	8007380 <HAL_Delay>
	T_CLK_OFF;
 8006dae:	2200      	movs	r2, #0
 8006db0:	2108      	movs	r1, #8
 8006db2:	4819      	ldr	r0, [pc, #100]	; (8006e18 <TP_Read_AD+0xc8>)
 8006db4:	f001 f8e8 	bl	8007f88 <HAL_GPIO_WritePin>
	for(count = 0; count < 16; count++)
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	e01c      	b.n	8006df8 <TP_Read_AD+0xa8>
	{
		Num <<= 1;
 8006dbe:	89bb      	ldrh	r3, [r7, #12]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	81bb      	strh	r3, [r7, #12]
		T_CLK_OFF;
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2108      	movs	r1, #8
 8006dc8:	4813      	ldr	r0, [pc, #76]	; (8006e18 <TP_Read_AD+0xc8>)
 8006dca:	f001 f8dd 	bl	8007f88 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006dce:	2001      	movs	r0, #1
 8006dd0:	f000 fad6 	bl	8007380 <HAL_Delay>
		T_CLK_ON;
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	2108      	movs	r1, #8
 8006dd8:	480f      	ldr	r0, [pc, #60]	; (8006e18 <TP_Read_AD+0xc8>)
 8006dda:	f001 f8d5 	bl	8007f88 <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 8006dde:	2110      	movs	r1, #16
 8006de0:	480d      	ldr	r0, [pc, #52]	; (8006e18 <TP_Read_AD+0xc8>)
 8006de2:	f001 f8b9 	bl	8007f58 <HAL_GPIO_ReadPin>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <TP_Read_AD+0xa2>
 8006dec:	89bb      	ldrh	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	81bb      	strh	r3, [r7, #12]
	for(count = 0; count < 16; count++)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	3301      	adds	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	2b0f      	cmp	r3, #15
 8006dfc:	d9df      	bls.n	8006dbe <TP_Read_AD+0x6e>
	}
	Num >>= 4;
 8006dfe:	89bb      	ldrh	r3, [r7, #12]
 8006e00:	091b      	lsrs	r3, r3, #4
 8006e02:	81bb      	strh	r3, [r7, #12]
	T_CS_ON;
 8006e04:	2201      	movs	r2, #1
 8006e06:	2180      	movs	r1, #128	; 0x80
 8006e08:	4804      	ldr	r0, [pc, #16]	; (8006e1c <TP_Read_AD+0xcc>)
 8006e0a:	f001 f8bd 	bl	8007f88 <HAL_GPIO_WritePin>
	return(Num);
 8006e0e:	89bb      	ldrh	r3, [r7, #12]

}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40020400 	.word	0x40020400
 8006e1c:	40020c00 	.word	0x40020c00

08006e20 <TP_Read_XOY>:
								and take the average
 * @parameters :xy:Read command(CMD_RDX/CMD_RDY)
 * @retvalue   :Read data
******************************************************************************/
uint16_t TP_Read_XOY(uint8_t xy)
{/*
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	71fb      	strb	r3, [r7, #7]
	}
	sum = 0;
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
	temp = sum / (READ_TIMES - 0 * LOST_VAL);
	return temp;*/
	TP_Read_AD(xy);
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff ff8f 	bl	8006d50 <TP_Read_AD>
}
 8006e32:	bf00      	nop
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <TP_Read_XY>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <TP_Read_XY+0x3c>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff ffe8 	bl	8006e20 <TP_Read_XOY>
 8006e50:	4603      	mov	r3, r0
 8006e52:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8006e54:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <TP_Read_XY+0x40>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff ffe1 	bl	8006e20 <TP_Read_XOY>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	81bb      	strh	r3, [r7, #12]

	*x = xtemp;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	89fa      	ldrh	r2, [r7, #14]
 8006e66:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	89ba      	ldrh	r2, [r7, #12]
 8006e6c:	801a      	strh	r2, [r3, #0]
	return 1;
 8006e6e:	2301      	movs	r3, #1
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	2000017c 	.word	0x2000017c
 8006e7c:	2000017d 	.word	0x2000017d

08006e80 <TP_Read_XY2>:
 * @parameters :x:Read x coordinate of the touch screen
								y:Read y coordinate of the touch screen
 * @retvalue   :0-fail,1-success
******************************************************************************/
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag = TP_Read_XY(&x1 ,&y1);
 8006e8a:	f107 0212 	add.w	r2, r7, #18
 8006e8e:	f107 0314 	add.w	r3, r7, #20
 8006e92:	4611      	mov	r1, r2
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ffd1 	bl	8006e3c <TP_Read_XY>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <TP_Read_XY2+0x28>
    	return(0);
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e049      	b.n	8006f3c <TP_Read_XY2+0xbc>
    flag = TP_Read_XY(&x2, &y2);
 8006ea8:	f107 020e 	add.w	r2, r7, #14
 8006eac:	f107 0310 	add.w	r3, r7, #16
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff ffc2 	bl	8006e3c <TP_Read_XY>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]
    if(flag == 0)
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <TP_Read_XY2+0x46>
    	return(0);
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e03a      	b.n	8006f3c <TP_Read_XY2+0xbc>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 8006ec6:	8a3a      	ldrh	r2, [r7, #16]
 8006ec8:	8abb      	ldrh	r3, [r7, #20]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d804      	bhi.n	8006ed8 <TP_Read_XY2+0x58>
 8006ece:	8a3b      	ldrh	r3, [r7, #16]
 8006ed0:	3331      	adds	r3, #49	; 0x31
 8006ed2:	8aba      	ldrh	r2, [r7, #20]
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	da08      	bge.n	8006eea <TP_Read_XY2+0x6a>
 8006ed8:	8aba      	ldrh	r2, [r7, #20]
 8006eda:	8a3b      	ldrh	r3, [r7, #16]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d82c      	bhi.n	8006f3a <TP_Read_XY2+0xba>
 8006ee0:	8abb      	ldrh	r3, [r7, #20]
 8006ee2:	3331      	adds	r3, #49	; 0x31
 8006ee4:	8a3a      	ldrh	r2, [r7, #16]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	db27      	blt.n	8006f3a <TP_Read_XY2+0xba>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 8006eea:	89fa      	ldrh	r2, [r7, #14]
 8006eec:	8a7b      	ldrh	r3, [r7, #18]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d804      	bhi.n	8006efc <TP_Read_XY2+0x7c>
 8006ef2:	89fb      	ldrh	r3, [r7, #14]
 8006ef4:	3331      	adds	r3, #49	; 0x31
 8006ef6:	8a7a      	ldrh	r2, [r7, #18]
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	da08      	bge.n	8006f0e <TP_Read_XY2+0x8e>
 8006efc:	8a7a      	ldrh	r2, [r7, #18]
 8006efe:	89fb      	ldrh	r3, [r7, #14]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d81a      	bhi.n	8006f3a <TP_Read_XY2+0xba>
 8006f04:	8a7b      	ldrh	r3, [r7, #18]
 8006f06:	3331      	adds	r3, #49	; 0x31
 8006f08:	89fa      	ldrh	r2, [r7, #14]
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	db15      	blt.n	8006f3a <TP_Read_XY2+0xba>
    {
        *x = (x1 + x2) / 2;
 8006f0e:	8abb      	ldrh	r3, [r7, #20]
 8006f10:	461a      	mov	r2, r3
 8006f12:	8a3b      	ldrh	r3, [r7, #16]
 8006f14:	4413      	add	r3, r2
 8006f16:	0fda      	lsrs	r2, r3, #31
 8006f18:	4413      	add	r3, r2
 8006f1a:	105b      	asrs	r3, r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	801a      	strh	r2, [r3, #0]
        *y = (y1 + y2) / 2;
 8006f22:	8a7b      	ldrh	r3, [r7, #18]
 8006f24:	461a      	mov	r2, r3
 8006f26:	89fb      	ldrh	r3, [r7, #14]
 8006f28:	4413      	add	r3, r2
 8006f2a:	0fda      	lsrs	r2, r3, #31
 8006f2c:	4413      	add	r3, r2
 8006f2e:	105b      	asrs	r3, r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	801a      	strh	r2, [r3, #0]
        return 1;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <TP_Read_XY2+0xbc>
    }
    else
    	return 0;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <TP_Scan>:
 * @retvalue   :Current touch screen status,
								0-no touch
								1-touch
******************************************************************************/
uint8_t TP_Scan(uint8_t tp)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	71fb      	strb	r3, [r7, #7]
	if(T_IRQ == 0)
 8006f4e:	2140      	movs	r1, #64	; 0x40
 8006f50:	483f      	ldr	r0, [pc, #252]	; (8007050 <TP_Scan+0x10c>)
 8006f52:	f001 f801 	bl	8007f58 <HAL_GPIO_ReadPin>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d155      	bne.n	8007008 <TP_Scan+0xc4>
	{
		if(tp)
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <TP_Scan+0x28>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 8006f62:	493c      	ldr	r1, [pc, #240]	; (8007054 <TP_Scan+0x110>)
 8006f64:	483c      	ldr	r0, [pc, #240]	; (8007058 <TP_Scan+0x114>)
 8006f66:	f7ff ff8b 	bl	8006e80 <TP_Read_XY2>
 8006f6a:	e03c      	b.n	8006fe6 <TP_Scan+0xa2>
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 8006f6c:	4939      	ldr	r1, [pc, #228]	; (8007054 <TP_Scan+0x110>)
 8006f6e:	483a      	ldr	r0, [pc, #232]	; (8007058 <TP_Scan+0x114>)
 8006f70:	f7ff ff86 	bl	8006e80 <TP_Read_XY2>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d035      	beq.n	8006fe6 <TP_Scan+0xa2>
		{
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 8006f7a:	4b38      	ldr	r3, [pc, #224]	; (800705c <TP_Scan+0x118>)
 8006f7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f80:	4b36      	ldr	r3, [pc, #216]	; (800705c <TP_Scan+0x118>)
 8006f82:	899b      	ldrh	r3, [r3, #12]
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f90:	4b32      	ldr	r3, [pc, #200]	; (800705c <TP_Scan+0x118>)
 8006f92:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa6:	ee17 3a90 	vmov	r3, s15
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	4b2b      	ldr	r3, [pc, #172]	; (800705c <TP_Scan+0x118>)
 8006fae:	819a      	strh	r2, [r3, #12]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 8006fb0:	4b2a      	ldr	r3, [pc, #168]	; (800705c <TP_Scan+0x118>)
 8006fb2:	ed93 7a06 	vldr	s14, [r3, #24]
 8006fb6:	4b29      	ldr	r3, [pc, #164]	; (800705c <TP_Scan+0x118>)
 8006fb8:	89db      	ldrh	r3, [r3, #14]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fc6:	4b25      	ldr	r3, [pc, #148]	; (800705c <TP_Scan+0x118>)
 8006fc8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fdc:	ee17 3a90 	vmov	r3, s15
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	4b1e      	ldr	r3, [pc, #120]	; (800705c <TP_Scan+0x118>)
 8006fe4:	81da      	strh	r2, [r3, #14]
	 	}
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	; (800705c <TP_Scan+0x118>)
 8006fe8:	7c1b      	ldrb	r3, [r3, #16]
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	db26      	blt.n	800703e <TP_Scan+0xfa>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	; (800705c <TP_Scan+0x118>)
 8006ff2:	22c0      	movs	r2, #192	; 0xc0
 8006ff4:	741a      	strb	r2, [r3, #16]
			tp_dev.x0 = tp_dev.x;
 8006ff6:	4b19      	ldr	r3, [pc, #100]	; (800705c <TP_Scan+0x118>)
 8006ff8:	899a      	ldrh	r2, [r3, #12]
 8006ffa:	4b18      	ldr	r3, [pc, #96]	; (800705c <TP_Scan+0x118>)
 8006ffc:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 = tp_dev.y;
 8006ffe:	4b17      	ldr	r3, [pc, #92]	; (800705c <TP_Scan+0x118>)
 8007000:	89da      	ldrh	r2, [r3, #14]
 8007002:	4b16      	ldr	r3, [pc, #88]	; (800705c <TP_Scan+0x118>)
 8007004:	815a      	strh	r2, [r3, #10]
 8007006:	e01a      	b.n	800703e <TP_Scan+0xfa>
		}
	}
	else
	{
		if(tp_dev.sta & TP_PRES_DOWN)
 8007008:	4b14      	ldr	r3, [pc, #80]	; (800705c <TP_Scan+0x118>)
 800700a:	7c1b      	ldrb	r3, [r3, #16]
 800700c:	b25b      	sxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	da07      	bge.n	8007022 <TP_Scan+0xde>
		{
			tp_dev.sta&=~(1<<7);
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <TP_Scan+0x118>)
 8007014:	7c1b      	ldrb	r3, [r3, #16]
 8007016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701a:	b2da      	uxtb	r2, r3
 800701c:	4b0f      	ldr	r3, [pc, #60]	; (800705c <TP_Scan+0x118>)
 800701e:	741a      	strb	r2, [r3, #16]
 8007020:	e00d      	b.n	800703e <TP_Scan+0xfa>
		}
		else
		{
			tp_dev.x0 	= 0;
 8007022:	4b0e      	ldr	r3, [pc, #56]	; (800705c <TP_Scan+0x118>)
 8007024:	2200      	movs	r2, #0
 8007026:	811a      	strh	r2, [r3, #8]
			tp_dev.y0 	= 0;
 8007028:	4b0c      	ldr	r3, [pc, #48]	; (800705c <TP_Scan+0x118>)
 800702a:	2200      	movs	r2, #0
 800702c:	815a      	strh	r2, [r3, #10]
			tp_dev.x  	= 0xffff;
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <TP_Scan+0x118>)
 8007030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007034:	819a      	strh	r2, [r3, #12]
			tp_dev.y 	= 0xffff;
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <TP_Scan+0x118>)
 8007038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800703c:	81da      	strh	r2, [r3, #14]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN;
 800703e:	4b07      	ldr	r3, [pc, #28]	; (800705c <TP_Scan+0x118>)
 8007040:	7c1b      	ldrb	r3, [r3, #16]
 8007042:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007046:	b2db      	uxtb	r3, r3
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40020c00 	.word	0x40020c00
 8007054:	20000166 	.word	0x20000166
 8007058:	20000164 	.word	0x20000164
 800705c:	20000158 	.word	0x20000158

08007060 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007064:	4b11      	ldr	r3, [pc, #68]	; (80070ac <MX_UART5_Init+0x4c>)
 8007066:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <MX_UART5_Init+0x50>)
 8007068:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800706a:	4b10      	ldr	r3, [pc, #64]	; (80070ac <MX_UART5_Init+0x4c>)
 800706c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007070:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007072:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <MX_UART5_Init+0x4c>)
 8007074:	2200      	movs	r2, #0
 8007076:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007078:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <MX_UART5_Init+0x4c>)
 800707a:	2200      	movs	r2, #0
 800707c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800707e:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <MX_UART5_Init+0x4c>)
 8007080:	2200      	movs	r2, #0
 8007082:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007084:	4b09      	ldr	r3, [pc, #36]	; (80070ac <MX_UART5_Init+0x4c>)
 8007086:	220c      	movs	r2, #12
 8007088:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <MX_UART5_Init+0x4c>)
 800708c:	2200      	movs	r2, #0
 800708e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <MX_UART5_Init+0x4c>)
 8007092:	2200      	movs	r2, #0
 8007094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007096:	4805      	ldr	r0, [pc, #20]	; (80070ac <MX_UART5_Init+0x4c>)
 8007098:	f005 fd6a 	bl	800cb70 <HAL_UART_Init>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80070a2:	f7fe fe85 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20007150 	.word	0x20007150
 80070b0:	40005000 	.word	0x40005000

080070b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80070b8:	4b11      	ldr	r3, [pc, #68]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070ba:	4a12      	ldr	r2, [pc, #72]	; (8007104 <MX_USART3_UART_Init+0x50>)
 80070bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80070be:	4b10      	ldr	r3, [pc, #64]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80070c6:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80070cc:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80070d8:	4b09      	ldr	r3, [pc, #36]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070da:	220c      	movs	r2, #12
 80070dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070de:	4b08      	ldr	r3, [pc, #32]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80070ea:	4805      	ldr	r0, [pc, #20]	; (8007100 <MX_USART3_UART_Init+0x4c>)
 80070ec:	f005 fd40 	bl	800cb70 <HAL_UART_Init>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80070f6:	f7fe fe5b 	bl	8005db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20007194 	.word	0x20007194
 8007104:	40004800 	.word	0x40004800

08007108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08c      	sub	sp, #48	; 0x30
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007110:	f107 031c 	add.w	r3, r7, #28
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	609a      	str	r2, [r3, #8]
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a42      	ldr	r2, [pc, #264]	; (8007230 <HAL_UART_MspInit+0x128>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d14b      	bne.n	80071c2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800712a:	2300      	movs	r3, #0
 800712c:	61bb      	str	r3, [r7, #24]
 800712e:	4b41      	ldr	r3, [pc, #260]	; (8007234 <HAL_UART_MspInit+0x12c>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	4a40      	ldr	r2, [pc, #256]	; (8007234 <HAL_UART_MspInit+0x12c>)
 8007134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007138:	6413      	str	r3, [r2, #64]	; 0x40
 800713a:	4b3e      	ldr	r3, [pc, #248]	; (8007234 <HAL_UART_MspInit+0x12c>)
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	4b3a      	ldr	r3, [pc, #232]	; (8007234 <HAL_UART_MspInit+0x12c>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	4a39      	ldr	r2, [pc, #228]	; (8007234 <HAL_UART_MspInit+0x12c>)
 8007150:	f043 0304 	orr.w	r3, r3, #4
 8007154:	6313      	str	r3, [r2, #48]	; 0x30
 8007156:	4b37      	ldr	r3, [pc, #220]	; (8007234 <HAL_UART_MspInit+0x12c>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	4b33      	ldr	r3, [pc, #204]	; (8007234 <HAL_UART_MspInit+0x12c>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	4a32      	ldr	r2, [pc, #200]	; (8007234 <HAL_UART_MspInit+0x12c>)
 800716c:	f043 0308 	orr.w	r3, r3, #8
 8007170:	6313      	str	r3, [r2, #48]	; 0x30
 8007172:	4b30      	ldr	r3, [pc, #192]	; (8007234 <HAL_UART_MspInit+0x12c>)
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800717e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007184:	2302      	movs	r3, #2
 8007186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007188:	2300      	movs	r3, #0
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800718c:	2303      	movs	r3, #3
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007190:	2308      	movs	r3, #8
 8007192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007194:	f107 031c 	add.w	r3, r7, #28
 8007198:	4619      	mov	r1, r3
 800719a:	4827      	ldr	r0, [pc, #156]	; (8007238 <HAL_UART_MspInit+0x130>)
 800719c:	f000 fd40 	bl	8007c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071a0:	2304      	movs	r3, #4
 80071a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a4:	2302      	movs	r3, #2
 80071a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ac:	2303      	movs	r3, #3
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80071b0:	2308      	movs	r3, #8
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071b4:	f107 031c 	add.w	r3, r7, #28
 80071b8:	4619      	mov	r1, r3
 80071ba:	4820      	ldr	r0, [pc, #128]	; (800723c <HAL_UART_MspInit+0x134>)
 80071bc:	f000 fd30 	bl	8007c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80071c0:	e031      	b.n	8007226 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART3)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1e      	ldr	r2, [pc, #120]	; (8007240 <HAL_UART_MspInit+0x138>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d12c      	bne.n	8007226 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	4b18      	ldr	r3, [pc, #96]	; (8007234 <HAL_UART_MspInit+0x12c>)
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	4a17      	ldr	r2, [pc, #92]	; (8007234 <HAL_UART_MspInit+0x12c>)
 80071d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071da:	6413      	str	r3, [r2, #64]	; 0x40
 80071dc:	4b15      	ldr	r3, [pc, #84]	; (8007234 <HAL_UART_MspInit+0x12c>)
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071e8:	2300      	movs	r3, #0
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	4b11      	ldr	r3, [pc, #68]	; (8007234 <HAL_UART_MspInit+0x12c>)
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	4a10      	ldr	r2, [pc, #64]	; (8007234 <HAL_UART_MspInit+0x12c>)
 80071f2:	f043 0302 	orr.w	r3, r3, #2
 80071f6:	6313      	str	r3, [r2, #48]	; 0x30
 80071f8:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <HAL_UART_MspInit+0x12c>)
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_UART_TX_Pin|PC_UART_RX_Pin;
 8007204:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800720a:	2302      	movs	r3, #2
 800720c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800720e:	2300      	movs	r3, #0
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007212:	2303      	movs	r3, #3
 8007214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007216:	2307      	movs	r3, #7
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800721a:	f107 031c 	add.w	r3, r7, #28
 800721e:	4619      	mov	r1, r3
 8007220:	4808      	ldr	r0, [pc, #32]	; (8007244 <HAL_UART_MspInit+0x13c>)
 8007222:	f000 fcfd 	bl	8007c20 <HAL_GPIO_Init>
}
 8007226:	bf00      	nop
 8007228:	3730      	adds	r7, #48	; 0x30
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	40005000 	.word	0x40005000
 8007234:	40023800 	.word	0x40023800
 8007238:	40020800 	.word	0x40020800
 800723c:	40020c00 	.word	0x40020c00
 8007240:	40004800 	.word	0x40004800
 8007244:	40020400 	.word	0x40020400

08007248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800724c:	480d      	ldr	r0, [pc, #52]	; (8007284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800724e:	490e      	ldr	r1, [pc, #56]	; (8007288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007250:	4a0e      	ldr	r2, [pc, #56]	; (800728c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007254:	e002      	b.n	800725c <LoopCopyDataInit>

08007256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800725a:	3304      	adds	r3, #4

0800725c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800725c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800725e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007260:	d3f9      	bcc.n	8007256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007262:	4a0b      	ldr	r2, [pc, #44]	; (8007290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007264:	4c0b      	ldr	r4, [pc, #44]	; (8007294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007268:	e001      	b.n	800726e <LoopFillZerobss>

0800726a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800726a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800726c:	3204      	adds	r2, #4

0800726e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800726e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007270:	d3fb      	bcc.n	800726a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007272:	f7ff fb87 	bl	8006984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007276:	f006 f83d 	bl	800d2f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800727a:	f7fe fcfd 	bl	8005c78 <main>
  bx  lr    
 800727e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007288:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800728c:	080108f0 	.word	0x080108f0
  ldr r2, =_sbss
 8007290:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8007294:	200071dc 	.word	0x200071dc

08007298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007298:	e7fe      	b.n	8007298 <ADC_IRQHandler>
	...

0800729c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072a0:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <HAL_Init+0x40>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a0d      	ldr	r2, [pc, #52]	; (80072dc <HAL_Init+0x40>)
 80072a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_Init+0x40>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <HAL_Init+0x40>)
 80072b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <HAL_Init+0x40>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a07      	ldr	r2, [pc, #28]	; (80072dc <HAL_Init+0x40>)
 80072be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072c4:	2003      	movs	r0, #3
 80072c6:	f000 f94f 	bl	8007568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072ca:	200f      	movs	r0, #15
 80072cc:	f000 f808 	bl	80072e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072d0:	f7ff fac0 	bl	8006854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40023c00 	.word	0x40023c00

080072e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072e8:	4b12      	ldr	r3, [pc, #72]	; (8007334 <HAL_InitTick+0x54>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	4b12      	ldr	r3, [pc, #72]	; (8007338 <HAL_InitTick+0x58>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	4619      	mov	r1, r3
 80072f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80072fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 f967 	bl	80075d2 <HAL_SYSTICK_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e00e      	b.n	800732c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b0f      	cmp	r3, #15
 8007312:	d80a      	bhi.n	800732a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007314:	2200      	movs	r2, #0
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	f04f 30ff 	mov.w	r0, #4294967295
 800731c:	f000 f92f 	bl	800757e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007320:	4a06      	ldr	r2, [pc, #24]	; (800733c <HAL_InitTick+0x5c>)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	e000      	b.n	800732c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000154 	.word	0x20000154
 8007338:	20000184 	.word	0x20000184
 800733c:	20000180 	.word	0x20000180

08007340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <HAL_IncTick+0x20>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	4b06      	ldr	r3, [pc, #24]	; (8007364 <HAL_IncTick+0x24>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4413      	add	r3, r2
 8007350:	4a04      	ldr	r2, [pc, #16]	; (8007364 <HAL_IncTick+0x24>)
 8007352:	6013      	str	r3, [r2, #0]
}
 8007354:	bf00      	nop
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000184 	.word	0x20000184
 8007364:	200071d8 	.word	0x200071d8

08007368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  return uwTick;
 800736c:	4b03      	ldr	r3, [pc, #12]	; (800737c <HAL_GetTick+0x14>)
 800736e:	681b      	ldr	r3, [r3, #0]
}
 8007370:	4618      	mov	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	200071d8 	.word	0x200071d8

08007380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007388:	f7ff ffee 	bl	8007368 <HAL_GetTick>
 800738c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d005      	beq.n	80073a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800739a:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <HAL_Delay+0x44>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80073a6:	bf00      	nop
 80073a8:	f7ff ffde 	bl	8007368 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d8f7      	bhi.n	80073a8 <HAL_Delay+0x28>
  {
  }
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000184 	.word	0x20000184

080073c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <__NVIC_SetPriorityGrouping+0x44>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073e4:	4013      	ands	r3, r2
 80073e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073fa:	4a04      	ldr	r2, [pc, #16]	; (800740c <__NVIC_SetPriorityGrouping+0x44>)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	60d3      	str	r3, [r2, #12]
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	e000ed00 	.word	0xe000ed00

08007410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007414:	4b04      	ldr	r3, [pc, #16]	; (8007428 <__NVIC_GetPriorityGrouping+0x18>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	f003 0307 	and.w	r3, r3, #7
}
 800741e:	4618      	mov	r0, r3
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	e000ed00 	.word	0xe000ed00

0800742c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800743a:	2b00      	cmp	r3, #0
 800743c:	db0b      	blt.n	8007456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	f003 021f 	and.w	r2, r3, #31
 8007444:	4907      	ldr	r1, [pc, #28]	; (8007464 <__NVIC_EnableIRQ+0x38>)
 8007446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	2001      	movs	r0, #1
 800744e:	fa00 f202 	lsl.w	r2, r0, r2
 8007452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	e000e100 	.word	0xe000e100

08007468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007478:	2b00      	cmp	r3, #0
 800747a:	db0a      	blt.n	8007492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	490c      	ldr	r1, [pc, #48]	; (80074b4 <__NVIC_SetPriority+0x4c>)
 8007482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007486:	0112      	lsls	r2, r2, #4
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	440b      	add	r3, r1
 800748c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007490:	e00a      	b.n	80074a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	4908      	ldr	r1, [pc, #32]	; (80074b8 <__NVIC_SetPriority+0x50>)
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	3b04      	subs	r3, #4
 80074a0:	0112      	lsls	r2, r2, #4
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	440b      	add	r3, r1
 80074a6:	761a      	strb	r2, [r3, #24]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	e000e100 	.word	0xe000e100
 80074b8:	e000ed00 	.word	0xe000ed00

080074bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074bc:	b480      	push	{r7}
 80074be:	b089      	sub	sp, #36	; 0x24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f1c3 0307 	rsb	r3, r3, #7
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	bf28      	it	cs
 80074da:	2304      	movcs	r3, #4
 80074dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	3304      	adds	r3, #4
 80074e2:	2b06      	cmp	r3, #6
 80074e4:	d902      	bls.n	80074ec <NVIC_EncodePriority+0x30>
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	3b03      	subs	r3, #3
 80074ea:	e000      	b.n	80074ee <NVIC_EncodePriority+0x32>
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f0:	f04f 32ff 	mov.w	r2, #4294967295
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	43da      	mvns	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	401a      	ands	r2, r3
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007504:	f04f 31ff 	mov.w	r1, #4294967295
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	fa01 f303 	lsl.w	r3, r1, r3
 800750e:	43d9      	mvns	r1, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007514:	4313      	orrs	r3, r2
         );
}
 8007516:	4618      	mov	r0, r3
 8007518:	3724      	adds	r7, #36	; 0x24
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3b01      	subs	r3, #1
 8007530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007534:	d301      	bcc.n	800753a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007536:	2301      	movs	r3, #1
 8007538:	e00f      	b.n	800755a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800753a:	4a0a      	ldr	r2, [pc, #40]	; (8007564 <SysTick_Config+0x40>)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3b01      	subs	r3, #1
 8007540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007542:	210f      	movs	r1, #15
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	f7ff ff8e 	bl	8007468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <SysTick_Config+0x40>)
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007552:	4b04      	ldr	r3, [pc, #16]	; (8007564 <SysTick_Config+0x40>)
 8007554:	2207      	movs	r2, #7
 8007556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	e000e010 	.word	0xe000e010

08007568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff ff29 	bl	80073c8 <__NVIC_SetPriorityGrouping>
}
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	4603      	mov	r3, r0
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007590:	f7ff ff3e 	bl	8007410 <__NVIC_GetPriorityGrouping>
 8007594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	6978      	ldr	r0, [r7, #20]
 800759c:	f7ff ff8e 	bl	80074bc <NVIC_EncodePriority>
 80075a0:	4602      	mov	r2, r0
 80075a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff ff5d 	bl	8007468 <__NVIC_SetPriority>
}
 80075ae:	bf00      	nop
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	4603      	mov	r3, r0
 80075be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff ff31 	bl	800742c <__NVIC_EnableIRQ>
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff ffa2 	bl	8007524 <SysTick_Config>
 80075e0:	4603      	mov	r3, r0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80075f8:	f7ff feb6 	bl	8007368 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e099      	b.n	800773c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0201 	bic.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007628:	e00f      	b.n	800764a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800762a:	f7ff fe9d 	bl	8007368 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b05      	cmp	r3, #5
 8007636:	d908      	bls.n	800764a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2203      	movs	r2, #3
 8007642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e078      	b.n	800773c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e8      	bne.n	800762a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	4b38      	ldr	r3, [pc, #224]	; (8007744 <HAL_DMA_Init+0x158>)
 8007664:	4013      	ands	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800768e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d107      	bne.n	80076b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	4313      	orrs	r3, r2
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0307 	bic.w	r3, r3, #7
 80076ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d117      	bne.n	800770e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fa19 	bl	8007b28 <DMA_CheckFifoParam>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d008      	beq.n	800770e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2240      	movs	r2, #64	; 0x40
 8007700:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800770a:	2301      	movs	r3, #1
 800770c:	e016      	b.n	800773c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9d0 	bl	8007abc <DMA_CalcBaseAndBitshift>
 800771c:	4603      	mov	r3, r0
 800771e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007724:	223f      	movs	r2, #63	; 0x3f
 8007726:	409a      	lsls	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	f010803f 	.word	0xf010803f

08007748 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d004      	beq.n	8007766 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2280      	movs	r2, #128	; 0x80
 8007760:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e00c      	b.n	8007780 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2205      	movs	r2, #5
 800776a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007798:	4b8e      	ldr	r3, [pc, #568]	; (80079d4 <HAL_DMA_IRQHandler+0x248>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a8e      	ldr	r2, [pc, #568]	; (80079d8 <HAL_DMA_IRQHandler+0x24c>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	0a9b      	lsrs	r3, r3, #10
 80077a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b6:	2208      	movs	r2, #8
 80077b8:	409a      	lsls	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d013      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0204 	bic.w	r2, r2, #4
 80077de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e4:	2208      	movs	r2, #8
 80077e6:	409a      	lsls	r2, r3
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f0:	f043 0201 	orr.w	r2, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fc:	2201      	movs	r2, #1
 80077fe:	409a      	lsls	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4013      	ands	r3, r2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d012      	beq.n	800782e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00b      	beq.n	800782e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781a:	2201      	movs	r2, #1
 800781c:	409a      	lsls	r2, r3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	f043 0202 	orr.w	r2, r3, #2
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007832:	2204      	movs	r2, #4
 8007834:	409a      	lsls	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d012      	beq.n	8007864 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007850:	2204      	movs	r2, #4
 8007852:	409a      	lsls	r2, r3
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785c:	f043 0204 	orr.w	r2, r3, #4
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007868:	2210      	movs	r2, #16
 800786a:	409a      	lsls	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d043      	beq.n	80078fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d03c      	beq.n	80078fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007886:	2210      	movs	r2, #16
 8007888:	409a      	lsls	r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d018      	beq.n	80078ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d108      	bne.n	80078bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d024      	beq.n	80078fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
 80078ba:	e01f      	b.n	80078fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01b      	beq.n	80078fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
 80078cc:	e016      	b.n	80078fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0208 	bic.w	r2, r2, #8
 80078ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007900:	2220      	movs	r2, #32
 8007902:	409a      	lsls	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4013      	ands	r3, r2
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 808f 	beq.w	8007a2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8087 	beq.w	8007a2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007922:	2220      	movs	r2, #32
 8007924:	409a      	lsls	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b05      	cmp	r3, #5
 8007934:	d136      	bne.n	80079a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0216 	bic.w	r2, r2, #22
 8007944:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	695a      	ldr	r2, [r3, #20]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007954:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <HAL_DMA_IRQHandler+0x1da>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0208 	bic.w	r2, r2, #8
 8007974:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797a:	223f      	movs	r2, #63	; 0x3f
 800797c:	409a      	lsls	r2, r3
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007996:	2b00      	cmp	r3, #0
 8007998:	d07e      	beq.n	8007a98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
        }
        return;
 80079a2:	e079      	b.n	8007a98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d01d      	beq.n	80079ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10d      	bne.n	80079dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d031      	beq.n	8007a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	e02c      	b.n	8007a2c <HAL_DMA_IRQHandler+0x2a0>
 80079d2:	bf00      	nop
 80079d4:	20000154 	.word	0x20000154
 80079d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d023      	beq.n	8007a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	4798      	blx	r3
 80079ec:	e01e      	b.n	8007a2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10f      	bne.n	8007a1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0210 	bic.w	r2, r2, #16
 8007a0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d032      	beq.n	8007a9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d022      	beq.n	8007a86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2205      	movs	r2, #5
 8007a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0201 	bic.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60bb      	str	r3, [r7, #8]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d307      	bcc.n	8007a74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f2      	bne.n	8007a58 <HAL_DMA_IRQHandler+0x2cc>
 8007a72:	e000      	b.n	8007a76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007a74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
 8007a96:	e000      	b.n	8007a9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007a98:	bf00      	nop
    }
  }
}
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aae:	b2db      	uxtb	r3, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	3b10      	subs	r3, #16
 8007acc:	4a14      	ldr	r2, [pc, #80]	; (8007b20 <DMA_CalcBaseAndBitshift+0x64>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	091b      	lsrs	r3, r3, #4
 8007ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007ad6:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <DMA_CalcBaseAndBitshift+0x68>)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d909      	bls.n	8007afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007af2:	f023 0303 	bic.w	r3, r3, #3
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	659a      	str	r2, [r3, #88]	; 0x58
 8007afc:	e007      	b.n	8007b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b06:	f023 0303 	bic.w	r3, r3, #3
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	aaaaaaab 	.word	0xaaaaaaab
 8007b24:	080108b0 	.word	0x080108b0

08007b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d11f      	bne.n	8007b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d856      	bhi.n	8007bf6 <DMA_CheckFifoParam+0xce>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <DMA_CheckFifoParam+0x28>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b61 	.word	0x08007b61
 8007b54:	08007b73 	.word	0x08007b73
 8007b58:	08007b61 	.word	0x08007b61
 8007b5c:	08007bf7 	.word	0x08007bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d046      	beq.n	8007bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b70:	e043      	b.n	8007bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b7a:	d140      	bne.n	8007bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b80:	e03d      	b.n	8007bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b8a:	d121      	bne.n	8007bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d837      	bhi.n	8007c02 <DMA_CheckFifoParam+0xda>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <DMA_CheckFifoParam+0x70>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007ba9 	.word	0x08007ba9
 8007b9c:	08007baf 	.word	0x08007baf
 8007ba0:	08007ba9 	.word	0x08007ba9
 8007ba4:	08007bc1 	.word	0x08007bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bac:	e030      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d025      	beq.n	8007c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bbe:	e022      	b.n	8007c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bc8:	d11f      	bne.n	8007c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007bce:	e01c      	b.n	8007c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d903      	bls.n	8007bde <DMA_CheckFifoParam+0xb6>
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d003      	beq.n	8007be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007bdc:	e018      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
      break;
 8007be2:	e015      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00e      	beq.n	8007c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf4:	e00b      	b.n	8007c0e <DMA_CheckFifoParam+0xe6>
      break;
 8007bf6:	bf00      	nop
 8007bf8:	e00a      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
      break;
 8007bfa:	bf00      	nop
 8007bfc:	e008      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
      break;
 8007bfe:	bf00      	nop
 8007c00:	e006      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
      break;
 8007c02:	bf00      	nop
 8007c04:	e004      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
      break;
 8007c06:	bf00      	nop
 8007c08:	e002      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8007c0a:	bf00      	nop
 8007c0c:	e000      	b.n	8007c10 <DMA_CheckFifoParam+0xe8>
      break;
 8007c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop

08007c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b089      	sub	sp, #36	; 0x24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c36:	2300      	movs	r3, #0
 8007c38:	61fb      	str	r3, [r7, #28]
 8007c3a:	e16b      	b.n	8007f14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	f040 815a 	bne.w	8007f0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d005      	beq.n	8007c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d130      	bne.n	8007cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43db      	mvns	r3, r3
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4013      	ands	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ca8:	2201      	movs	r2, #1
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	43db      	mvns	r3, r3
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	f003 0201 	and.w	r2, r3, #1
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d017      	beq.n	8007d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	2203      	movs	r2, #3
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	fa02 f303 	lsl.w	r3, r2, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d123      	bne.n	8007d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	08da      	lsrs	r2, r3, #3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3208      	adds	r2, #8
 8007d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	220f      	movs	r2, #15
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	08da      	lsrs	r2, r3, #3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3208      	adds	r2, #8
 8007d5e:	69b9      	ldr	r1, [r7, #24]
 8007d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	2203      	movs	r2, #3
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	43db      	mvns	r3, r3
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f003 0203 	and.w	r2, r3, #3
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80b4 	beq.w	8007f0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	4b60      	ldr	r3, [pc, #384]	; (8007f2c <HAL_GPIO_Init+0x30c>)
 8007dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dae:	4a5f      	ldr	r2, [pc, #380]	; (8007f2c <HAL_GPIO_Init+0x30c>)
 8007db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007db4:	6453      	str	r3, [r2, #68]	; 0x44
 8007db6:	4b5d      	ldr	r3, [pc, #372]	; (8007f2c <HAL_GPIO_Init+0x30c>)
 8007db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007dc2:	4a5b      	ldr	r2, [pc, #364]	; (8007f30 <HAL_GPIO_Init+0x310>)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	089b      	lsrs	r3, r3, #2
 8007dc8:	3302      	adds	r3, #2
 8007dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	220f      	movs	r2, #15
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43db      	mvns	r3, r3
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4013      	ands	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a52      	ldr	r2, [pc, #328]	; (8007f34 <HAL_GPIO_Init+0x314>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d02b      	beq.n	8007e46 <HAL_GPIO_Init+0x226>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a51      	ldr	r2, [pc, #324]	; (8007f38 <HAL_GPIO_Init+0x318>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d025      	beq.n	8007e42 <HAL_GPIO_Init+0x222>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a50      	ldr	r2, [pc, #320]	; (8007f3c <HAL_GPIO_Init+0x31c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d01f      	beq.n	8007e3e <HAL_GPIO_Init+0x21e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a4f      	ldr	r2, [pc, #316]	; (8007f40 <HAL_GPIO_Init+0x320>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d019      	beq.n	8007e3a <HAL_GPIO_Init+0x21a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a4e      	ldr	r2, [pc, #312]	; (8007f44 <HAL_GPIO_Init+0x324>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d013      	beq.n	8007e36 <HAL_GPIO_Init+0x216>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a4d      	ldr	r2, [pc, #308]	; (8007f48 <HAL_GPIO_Init+0x328>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00d      	beq.n	8007e32 <HAL_GPIO_Init+0x212>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a4c      	ldr	r2, [pc, #304]	; (8007f4c <HAL_GPIO_Init+0x32c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d007      	beq.n	8007e2e <HAL_GPIO_Init+0x20e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a4b      	ldr	r2, [pc, #300]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d101      	bne.n	8007e2a <HAL_GPIO_Init+0x20a>
 8007e26:	2307      	movs	r3, #7
 8007e28:	e00e      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	e00c      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e2e:	2306      	movs	r3, #6
 8007e30:	e00a      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e32:	2305      	movs	r3, #5
 8007e34:	e008      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e36:	2304      	movs	r3, #4
 8007e38:	e006      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e004      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e002      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e46:	2300      	movs	r3, #0
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	f002 0203 	and.w	r2, r2, #3
 8007e4e:	0092      	lsls	r2, r2, #2
 8007e50:	4093      	lsls	r3, r2
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e58:	4935      	ldr	r1, [pc, #212]	; (8007f30 <HAL_GPIO_Init+0x310>)
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	089b      	lsrs	r3, r3, #2
 8007e5e:	3302      	adds	r3, #2
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e66:	4b3b      	ldr	r3, [pc, #236]	; (8007f54 <HAL_GPIO_Init+0x334>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	4013      	ands	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e8a:	4a32      	ldr	r2, [pc, #200]	; (8007f54 <HAL_GPIO_Init+0x334>)
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e90:	4b30      	ldr	r3, [pc, #192]	; (8007f54 <HAL_GPIO_Init+0x334>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007eb4:	4a27      	ldr	r2, [pc, #156]	; (8007f54 <HAL_GPIO_Init+0x334>)
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007eba:	4b26      	ldr	r3, [pc, #152]	; (8007f54 <HAL_GPIO_Init+0x334>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ede:	4a1d      	ldr	r2, [pc, #116]	; (8007f54 <HAL_GPIO_Init+0x334>)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ee4:	4b1b      	ldr	r3, [pc, #108]	; (8007f54 <HAL_GPIO_Init+0x334>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	43db      	mvns	r3, r3
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f08:	4a12      	ldr	r2, [pc, #72]	; (8007f54 <HAL_GPIO_Init+0x334>)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	3301      	adds	r3, #1
 8007f12:	61fb      	str	r3, [r7, #28]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	2b0f      	cmp	r3, #15
 8007f18:	f67f ae90 	bls.w	8007c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	3724      	adds	r7, #36	; 0x24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	40013800 	.word	0x40013800
 8007f34:	40020000 	.word	0x40020000
 8007f38:	40020400 	.word	0x40020400
 8007f3c:	40020800 	.word	0x40020800
 8007f40:	40020c00 	.word	0x40020c00
 8007f44:	40021000 	.word	0x40021000
 8007f48:	40021400 	.word	0x40021400
 8007f4c:	40021800 	.word	0x40021800
 8007f50:	40021c00 	.word	0x40021c00
 8007f54:	40013c00 	.word	0x40013c00

08007f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	887b      	ldrh	r3, [r7, #2]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
 8007f74:	e001      	b.n	8007f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	807b      	strh	r3, [r7, #2]
 8007f94:	4613      	mov	r3, r2
 8007f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f98:	787b      	ldrb	r3, [r7, #1]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f9e:	887a      	ldrh	r2, [r7, #2]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fa4:	e003      	b.n	8007fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fa6:	887b      	ldrh	r3, [r7, #2]
 8007fa8:	041a      	lsls	r2, r3, #16
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	619a      	str	r2, [r3, #24]
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e12b      	b.n	8008226 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7fd fd98 	bl	8005b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2224      	movs	r2, #36	; 0x24
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0201 	bic.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800800e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800801e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008020:	f003 f8d6 	bl	800b1d0 <HAL_RCC_GetPCLK1Freq>
 8008024:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	4a81      	ldr	r2, [pc, #516]	; (8008230 <HAL_I2C_Init+0x274>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d807      	bhi.n	8008040 <HAL_I2C_Init+0x84>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4a80      	ldr	r2, [pc, #512]	; (8008234 <HAL_I2C_Init+0x278>)
 8008034:	4293      	cmp	r3, r2
 8008036:	bf94      	ite	ls
 8008038:	2301      	movls	r3, #1
 800803a:	2300      	movhi	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	e006      	b.n	800804e <HAL_I2C_Init+0x92>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a7d      	ldr	r2, [pc, #500]	; (8008238 <HAL_I2C_Init+0x27c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	bf94      	ite	ls
 8008048:	2301      	movls	r3, #1
 800804a:	2300      	movhi	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e0e7      	b.n	8008226 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4a78      	ldr	r2, [pc, #480]	; (800823c <HAL_I2C_Init+0x280>)
 800805a:	fba2 2303 	umull	r2, r3, r2, r3
 800805e:	0c9b      	lsrs	r3, r3, #18
 8008060:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	430a      	orrs	r2, r1
 8008074:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	4a6a      	ldr	r2, [pc, #424]	; (8008230 <HAL_I2C_Init+0x274>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d802      	bhi.n	8008090 <HAL_I2C_Init+0xd4>
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	3301      	adds	r3, #1
 800808e:	e009      	b.n	80080a4 <HAL_I2C_Init+0xe8>
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	4a69      	ldr	r2, [pc, #420]	; (8008240 <HAL_I2C_Init+0x284>)
 800809c:	fba2 2303 	umull	r2, r3, r2, r3
 80080a0:	099b      	lsrs	r3, r3, #6
 80080a2:	3301      	adds	r3, #1
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6812      	ldr	r2, [r2, #0]
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80080b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	495c      	ldr	r1, [pc, #368]	; (8008230 <HAL_I2C_Init+0x274>)
 80080c0:	428b      	cmp	r3, r1
 80080c2:	d819      	bhi.n	80080f8 <HAL_I2C_Init+0x13c>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	1e59      	subs	r1, r3, #1
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80080d2:	1c59      	adds	r1, r3, #1
 80080d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080d8:	400b      	ands	r3, r1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_I2C_Init+0x138>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1e59      	subs	r1, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80080ec:	3301      	adds	r3, #1
 80080ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f2:	e051      	b.n	8008198 <HAL_I2C_Init+0x1dc>
 80080f4:	2304      	movs	r3, #4
 80080f6:	e04f      	b.n	8008198 <HAL_I2C_Init+0x1dc>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d111      	bne.n	8008124 <HAL_I2C_Init+0x168>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	1e58      	subs	r0, r3, #1
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6859      	ldr	r1, [r3, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	440b      	add	r3, r1
 800810e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008112:	3301      	adds	r3, #1
 8008114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008118:	2b00      	cmp	r3, #0
 800811a:	bf0c      	ite	eq
 800811c:	2301      	moveq	r3, #1
 800811e:	2300      	movne	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	e012      	b.n	800814a <HAL_I2C_Init+0x18e>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	1e58      	subs	r0, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6859      	ldr	r1, [r3, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	0099      	lsls	r1, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	fbb0 f3f3 	udiv	r3, r0, r3
 800813a:	3301      	adds	r3, #1
 800813c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf0c      	ite	eq
 8008144:	2301      	moveq	r3, #1
 8008146:	2300      	movne	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <HAL_I2C_Init+0x196>
 800814e:	2301      	movs	r3, #1
 8008150:	e022      	b.n	8008198 <HAL_I2C_Init+0x1dc>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10e      	bne.n	8008178 <HAL_I2C_Init+0x1bc>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	1e58      	subs	r0, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6859      	ldr	r1, [r3, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	440b      	add	r3, r1
 8008168:	fbb0 f3f3 	udiv	r3, r0, r3
 800816c:	3301      	adds	r3, #1
 800816e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008176:	e00f      	b.n	8008198 <HAL_I2C_Init+0x1dc>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	1e58      	subs	r0, r3, #1
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6859      	ldr	r1, [r3, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	0099      	lsls	r1, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	fbb0 f3f3 	udiv	r3, r0, r3
 800818e:	3301      	adds	r3, #1
 8008190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	6809      	ldr	r1, [r1, #0]
 800819c:	4313      	orrs	r3, r2
 800819e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69da      	ldr	r2, [r3, #28]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	431a      	orrs	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6911      	ldr	r1, [r2, #16]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68d2      	ldr	r2, [r2, #12]
 80081d2:	4311      	orrs	r1, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	430b      	orrs	r3, r1
 80081da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695a      	ldr	r2, [r3, #20]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	000186a0 	.word	0x000186a0
 8008234:	001e847f 	.word	0x001e847f
 8008238:	003d08ff 	.word	0x003d08ff
 800823c:	431bde83 	.word	0x431bde83
 8008240:	10624dd3 	.word	0x10624dd3

08008244 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	4608      	mov	r0, r1
 800824e:	4611      	mov	r1, r2
 8008250:	461a      	mov	r2, r3
 8008252:	4603      	mov	r3, r0
 8008254:	817b      	strh	r3, [r7, #10]
 8008256:	460b      	mov	r3, r1
 8008258:	813b      	strh	r3, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800825e:	f7ff f883 	bl	8007368 <HAL_GetTick>
 8008262:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b20      	cmp	r3, #32
 800826e:	f040 80d9 	bne.w	8008424 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	2319      	movs	r3, #25
 8008278:	2201      	movs	r2, #1
 800827a:	496d      	ldr	r1, [pc, #436]	; (8008430 <HAL_I2C_Mem_Write+0x1ec>)
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f002 f90d 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
 800828a:	e0cc      	b.n	8008426 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008292:	2b01      	cmp	r3, #1
 8008294:	d101      	bne.n	800829a <HAL_I2C_Mem_Write+0x56>
 8008296:	2302      	movs	r3, #2
 8008298:	e0c5      	b.n	8008426 <HAL_I2C_Mem_Write+0x1e2>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d007      	beq.n	80082c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0201 	orr.w	r2, r2, #1
 80082be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2221      	movs	r2, #33	; 0x21
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2240      	movs	r2, #64	; 0x40
 80082dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4a4d      	ldr	r2, [pc, #308]	; (8008434 <HAL_I2C_Mem_Write+0x1f0>)
 8008300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008302:	88f8      	ldrh	r0, [r7, #6]
 8008304:	893a      	ldrh	r2, [r7, #8]
 8008306:	8979      	ldrh	r1, [r7, #10]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4603      	mov	r3, r0
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f001 fe9c 	bl	800a050 <I2C_RequestMemoryWrite>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d052      	beq.n	80083c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e081      	b.n	8008426 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f002 f98e 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00d      	beq.n	800834e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	2b04      	cmp	r3, #4
 8008338:	d107      	bne.n	800834a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e06b      	b.n	8008426 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b04      	cmp	r3, #4
 800838a:	d11b      	bne.n	80083c4 <HAL_I2C_Mem_Write+0x180>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008390:	2b00      	cmp	r3, #0
 8008392:	d017      	beq.n	80083c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1aa      	bne.n	8008322 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f002 f97a 	bl	800a6ca <I2C_WaitOnBTFFlagUntilTimeout>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00d      	beq.n	80083f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d107      	bne.n	80083f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e016      	b.n	8008426 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2220      	movs	r2, #32
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	e000      	b.n	8008426 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008424:	2302      	movs	r3, #2
  }
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	00100002 	.word	0x00100002
 8008434:	ffff0000 	.word	0xffff0000

08008438 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b08c      	sub	sp, #48	; 0x30
 800843c:	af02      	add	r7, sp, #8
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	4608      	mov	r0, r1
 8008442:	4611      	mov	r1, r2
 8008444:	461a      	mov	r2, r3
 8008446:	4603      	mov	r3, r0
 8008448:	817b      	strh	r3, [r7, #10]
 800844a:	460b      	mov	r3, r1
 800844c:	813b      	strh	r3, [r7, #8]
 800844e:	4613      	mov	r3, r2
 8008450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008452:	f7fe ff89 	bl	8007368 <HAL_GetTick>
 8008456:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b20      	cmp	r3, #32
 8008462:	f040 8208 	bne.w	8008876 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	2319      	movs	r3, #25
 800846c:	2201      	movs	r2, #1
 800846e:	497b      	ldr	r1, [pc, #492]	; (800865c <HAL_I2C_Mem_Read+0x224>)
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f002 f813 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800847c:	2302      	movs	r3, #2
 800847e:	e1fb      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_I2C_Mem_Read+0x56>
 800848a:	2302      	movs	r3, #2
 800848c:	e1f4      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d007      	beq.n	80084b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2222      	movs	r2, #34	; 0x22
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2240      	movs	r2, #64	; 0x40
 80084d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80084e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4a5b      	ldr	r2, [pc, #364]	; (8008660 <HAL_I2C_Mem_Read+0x228>)
 80084f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084f6:	88f8      	ldrh	r0, [r7, #6]
 80084f8:	893a      	ldrh	r2, [r7, #8]
 80084fa:	8979      	ldrh	r1, [r7, #10]
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4603      	mov	r3, r0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f001 fe38 	bl	800a17c <I2C_RequestMemoryRead>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e1b0      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851a:	2b00      	cmp	r3, #0
 800851c:	d113      	bne.n	8008546 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800851e:	2300      	movs	r3, #0
 8008520:	623b      	str	r3, [r7, #32]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	623b      	str	r3, [r7, #32]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	623b      	str	r3, [r7, #32]
 8008532:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e184      	b.n	8008850 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800854a:	2b01      	cmp	r3, #1
 800854c:	d11b      	bne.n	8008586 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800855c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800855e:	2300      	movs	r3, #0
 8008560:	61fb      	str	r3, [r7, #28]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	61fb      	str	r3, [r7, #28]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	61fb      	str	r3, [r7, #28]
 8008572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	e164      	b.n	8008850 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800858a:	2b02      	cmp	r3, #2
 800858c:	d11b      	bne.n	80085c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800859c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ae:	2300      	movs	r3, #0
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	61bb      	str	r3, [r7, #24]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	61bb      	str	r3, [r7, #24]
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	e144      	b.n	8008850 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80085dc:	e138      	b.n	8008850 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	f200 80f1 	bhi.w	80087ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d123      	bne.n	8008638 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f002 f8db 	bl	800a7b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e139      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691a      	ldr	r2, [r3, #16]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008636:	e10b      	b.n	8008850 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863c:	2b02      	cmp	r3, #2
 800863e:	d14e      	bne.n	80086de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	2200      	movs	r2, #0
 8008648:	4906      	ldr	r1, [pc, #24]	; (8008664 <HAL_I2C_Mem_Read+0x22c>)
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f001 ff26 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d008      	beq.n	8008668 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e10e      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
 800865a:	bf00      	nop
 800865c:	00100002 	.word	0x00100002
 8008660:	ffff0000 	.word	0xffff0000
 8008664:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008694:	3b01      	subs	r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	3b01      	subs	r3, #1
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086dc:	e0b8      	b.n	8008850 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	2200      	movs	r2, #0
 80086e6:	4966      	ldr	r1, [pc, #408]	; (8008880 <HAL_I2C_Mem_Read+0x448>)
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f001 fed7 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e0bf      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b01      	subs	r3, #1
 8008734:	b29a      	uxth	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	2200      	movs	r2, #0
 8008742:	494f      	ldr	r1, [pc, #316]	; (8008880 <HAL_I2C_Mem_Read+0x448>)
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f001 fea9 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e091      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	b2d2      	uxtb	r2, r2
 8008770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008780:	3b01      	subs	r3, #1
 8008782:	b29a      	uxth	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800878c:	b29b      	uxth	r3, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	691a      	ldr	r2, [r3, #16]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	b2d2      	uxtb	r2, r2
 80087a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087c8:	e042      	b.n	8008850 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f001 ffee 	bl	800a7b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e04c      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	b2d2      	uxtb	r2, r2
 80087ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008806:	b29b      	uxth	r3, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	b29a      	uxth	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b04      	cmp	r3, #4
 800881c:	d118      	bne.n	8008850 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800883a:	3b01      	subs	r3, #1
 800883c:	b29a      	uxth	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008846:	b29b      	uxth	r3, r3
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008854:	2b00      	cmp	r3, #0
 8008856:	f47f aec2 	bne.w	80085de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2220      	movs	r2, #32
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	e000      	b.n	8008878 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008876:	2302      	movs	r3, #2
  }
}
 8008878:	4618      	mov	r0, r3
 800887a:	3728      	adds	r7, #40	; 0x28
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	00010004 	.word	0x00010004

08008884 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d003      	beq.n	80088bc <HAL_I2C_EV_IRQHandler+0x38>
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	2b40      	cmp	r3, #64	; 0x40
 80088b8:	f040 80c1 	bne.w	8008a3e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10d      	bne.n	80088f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80088dc:	d003      	beq.n	80088e6 <HAL_I2C_EV_IRQHandler+0x62>
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80088e4:	d101      	bne.n	80088ea <HAL_I2C_EV_IRQHandler+0x66>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <HAL_I2C_EV_IRQHandler+0x68>
 80088ea:	2300      	movs	r3, #0
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	f000 8132 	beq.w	8008b56 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00c      	beq.n	8008916 <HAL_I2C_EV_IRQHandler+0x92>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	0a5b      	lsrs	r3, r3, #9
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d006      	beq.n	8008916 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 ffd6 	bl	800a8ba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fd83 	bl	800941a <I2C_Master_SB>
 8008914:	e092      	b.n	8008a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	08db      	lsrs	r3, r3, #3
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d009      	beq.n	8008936 <HAL_I2C_EV_IRQHandler+0xb2>
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	0a5b      	lsrs	r3, r3, #9
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fdf9 	bl	8009526 <I2C_Master_ADD10>
 8008934:	e082      	b.n	8008a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <HAL_I2C_EV_IRQHandler+0xd2>
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	0a5b      	lsrs	r3, r3, #9
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fe13 	bl	800957a <I2C_Master_ADDR>
 8008954:	e072      	b.n	8008a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	089b      	lsrs	r3, r3, #2
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d03b      	beq.n	80089da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800896c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008970:	f000 80f3 	beq.w	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	09db      	lsrs	r3, r3, #7
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00f      	beq.n	80089a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	0a9b      	lsrs	r3, r3, #10
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	089b      	lsrs	r3, r3, #2
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d103      	bne.n	80089a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f9f3 	bl	8008d84 <I2C_MasterTransmit_TXE>
 800899e:	e04d      	b.n	8008a3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	089b      	lsrs	r3, r3, #2
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 80d6 	beq.w	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	0a5b      	lsrs	r3, r3, #9
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 80cf 	beq.w	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	2b21      	cmp	r3, #33	; 0x21
 80089c0:	d103      	bne.n	80089ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa7a 	bl	8008ebc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089c8:	e0c7      	b.n	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b40      	cmp	r3, #64	; 0x40
 80089ce:	f040 80c4 	bne.w	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fae8 	bl	8008fa8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089d8:	e0bf      	b.n	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e8:	f000 80b7 	beq.w	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	099b      	lsrs	r3, r3, #6
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00f      	beq.n	8008a18 <HAL_I2C_EV_IRQHandler+0x194>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	0a9b      	lsrs	r3, r3, #10
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d009      	beq.n	8008a18 <HAL_I2C_EV_IRQHandler+0x194>
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	089b      	lsrs	r3, r3, #2
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d103      	bne.n	8008a18 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fb5d 	bl	80090d0 <I2C_MasterReceive_RXNE>
 8008a16:	e011      	b.n	8008a3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	089b      	lsrs	r3, r3, #2
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 809a 	beq.w	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	0a5b      	lsrs	r3, r3, #9
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 8093 	beq.w	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fc06 	bl	8009246 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a3a:	e08e      	b.n	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008a3c:	e08d      	b.n	8008b5a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	61fb      	str	r3, [r7, #28]
 8008a4e:	e007      	b.n	8008a60 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	085b      	lsrs	r3, r3, #1
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d012      	beq.n	8008a92 <HAL_I2C_EV_IRQHandler+0x20e>
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	0a5b      	lsrs	r3, r3, #9
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00c      	beq.n	8008a92 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008a88:	69b9      	ldr	r1, [r7, #24]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 ffc4 	bl	8009a18 <I2C_Slave_ADDR>
 8008a90:	e066      	b.n	8008b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	091b      	lsrs	r3, r3, #4
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <HAL_I2C_EV_IRQHandler+0x22e>
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	0a5b      	lsrs	r3, r3, #9
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fffe 	bl	8009aac <I2C_Slave_STOPF>
 8008ab0:	e056      	b.n	8008b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b21      	cmp	r3, #33	; 0x21
 8008ab6:	d002      	beq.n	8008abe <HAL_I2C_EV_IRQHandler+0x23a>
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b29      	cmp	r3, #41	; 0x29
 8008abc:	d125      	bne.n	8008b0a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	09db      	lsrs	r3, r3, #7
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00f      	beq.n	8008aea <HAL_I2C_EV_IRQHandler+0x266>
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	0a9b      	lsrs	r3, r3, #10
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d009      	beq.n	8008aea <HAL_I2C_EV_IRQHandler+0x266>
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	089b      	lsrs	r3, r3, #2
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d103      	bne.n	8008aea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 feda 	bl	800989c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ae8:	e039      	b.n	8008b5e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	089b      	lsrs	r3, r3, #2
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d033      	beq.n	8008b5e <HAL_I2C_EV_IRQHandler+0x2da>
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	0a5b      	lsrs	r3, r3, #9
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d02d      	beq.n	8008b5e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 ff07 	bl	8009916 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b08:	e029      	b.n	8008b5e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	099b      	lsrs	r3, r3, #6
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00f      	beq.n	8008b36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	0a9b      	lsrs	r3, r3, #10
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d009      	beq.n	8008b36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	089b      	lsrs	r3, r3, #2
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d103      	bne.n	8008b36 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 ff12 	bl	8009958 <I2C_SlaveReceive_RXNE>
 8008b34:	e014      	b.n	8008b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	089b      	lsrs	r3, r3, #2
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00e      	beq.n	8008b60 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	0a5b      	lsrs	r3, r3, #9
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d008      	beq.n	8008b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 ff40 	bl	80099d4 <I2C_SlaveReceive_BTF>
 8008b54:	e004      	b.n	8008b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008b56:	bf00      	nop
 8008b58:	e002      	b.n	8008b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b5a:	bf00      	nop
 8008b5c:	e000      	b.n	8008b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b5e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b08a      	sub	sp, #40	; 0x28
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b88:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00e      	beq.n	8008bb4 <HAL_I2C_ER_IRQHandler+0x4e>
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	0a1b      	lsrs	r3, r3, #8
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d008      	beq.n	8008bb4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	f043 0301 	orr.w	r3, r3, #1
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bb2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	0a5b      	lsrs	r3, r3, #9
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00e      	beq.n	8008bde <HAL_I2C_ER_IRQHandler+0x78>
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d008      	beq.n	8008bde <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	f043 0302 	orr.w	r3, r3, #2
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008bdc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	0a9b      	lsrs	r3, r3, #10
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d03f      	beq.n	8008c6a <HAL_I2C_ER_IRQHandler+0x104>
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d039      	beq.n	8008c6a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008bf6:	7efb      	ldrb	r3, [r7, #27]
 8008bf8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c08:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008c10:	7ebb      	ldrb	r3, [r7, #26]
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	d112      	bne.n	8008c3c <HAL_I2C_ER_IRQHandler+0xd6>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10f      	bne.n	8008c3c <HAL_I2C_ER_IRQHandler+0xd6>
 8008c1c:	7cfb      	ldrb	r3, [r7, #19]
 8008c1e:	2b21      	cmp	r3, #33	; 0x21
 8008c20:	d008      	beq.n	8008c34 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008c22:	7cfb      	ldrb	r3, [r7, #19]
 8008c24:	2b29      	cmp	r3, #41	; 0x29
 8008c26:	d005      	beq.n	8008c34 <HAL_I2C_ER_IRQHandler+0xce>
 8008c28:	7cfb      	ldrb	r3, [r7, #19]
 8008c2a:	2b28      	cmp	r3, #40	; 0x28
 8008c2c:	d106      	bne.n	8008c3c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b21      	cmp	r3, #33	; 0x21
 8008c32:	d103      	bne.n	8008c3c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 f869 	bl	8009d0c <I2C_Slave_AF>
 8008c3a:	e016      	b.n	8008c6a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c44:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	f043 0304 	orr.w	r3, r3, #4
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008c4e:	7efb      	ldrb	r3, [r7, #27]
 8008c50:	2b10      	cmp	r3, #16
 8008c52:	d002      	beq.n	8008c5a <HAL_I2C_ER_IRQHandler+0xf4>
 8008c54:	7efb      	ldrb	r3, [r7, #27]
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	d107      	bne.n	8008c6a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c68:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	0adb      	lsrs	r3, r3, #11
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <HAL_I2C_ER_IRQHandler+0x12e>
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	0a1b      	lsrs	r3, r3, #8
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d008      	beq.n	8008c94 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	f043 0308 	orr.w	r3, r3, #8
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008c92:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d008      	beq.n	8008cac <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 f8a0 	bl	8009dec <I2C_ITError>
  }
}
 8008cac:	bf00      	nop
 8008cae:	3728      	adds	r7, #40	; 0x28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
 8008d10:	4613      	mov	r3, r2
 8008d12:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d150      	bne.n	8008e4c <I2C_MasterTransmit_TXE+0xc8>
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	2b21      	cmp	r3, #33	; 0x21
 8008dae:	d14d      	bne.n	8008e4c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b08      	cmp	r3, #8
 8008db4:	d01d      	beq.n	8008df2 <I2C_MasterTransmit_TXE+0x6e>
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	d01a      	beq.n	8008df2 <I2C_MasterTransmit_TXE+0x6e>
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008dc2:	d016      	beq.n	8008df2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dd2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2211      	movs	r2, #17
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff ff62 	bl	8008cb4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008df0:	e060      	b.n	8008eb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e00:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e10:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b40      	cmp	r3, #64	; 0x40
 8008e2a:	d107      	bne.n	8008e3c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ff7d 	bl	8008d34 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e3a:	e03b      	b.n	8008eb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ff35 	bl	8008cb4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e4a:	e033      	b.n	8008eb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	2b21      	cmp	r3, #33	; 0x21
 8008e50:	d005      	beq.n	8008e5e <I2C_MasterTransmit_TXE+0xda>
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	2b40      	cmp	r3, #64	; 0x40
 8008e56:	d12d      	bne.n	8008eb4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b22      	cmp	r3, #34	; 0x22
 8008e5c:	d12a      	bne.n	8008eb4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d108      	bne.n	8008e7a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e76:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008e78:	e01c      	b.n	8008eb4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b40      	cmp	r3, #64	; 0x40
 8008e84:	d103      	bne.n	8008e8e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f88e 	bl	8008fa8 <I2C_MemoryTransmit_TXE_BTF>
}
 8008e8c:	e012      	b.n	8008eb4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008eb2:	e7ff      	b.n	8008eb4 <I2C_MasterTransmit_TXE+0x130>
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b21      	cmp	r3, #33	; 0x21
 8008ed4:	d164      	bne.n	8008fa0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d012      	beq.n	8008f06 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	781a      	ldrb	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008f04:	e04c      	b.n	8008fa0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d01d      	beq.n	8008f48 <I2C_MasterTransmit_BTF+0x8c>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d01a      	beq.n	8008f48 <I2C_MasterTransmit_BTF+0x8c>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f18:	d016      	beq.n	8008f48 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f28:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2211      	movs	r2, #17
 8008f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff feb7 	bl	8008cb4 <HAL_I2C_MasterTxCpltCallback>
}
 8008f46:	e02b      	b.n	8008fa0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f56:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f66:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	d107      	bne.n	8008f92 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fed2 	bl	8008d34 <HAL_I2C_MemTxCpltCallback>
}
 8008f90:	e006      	b.n	8008fa0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff fe8a 	bl	8008cb4 <HAL_I2C_MasterTxCpltCallback>
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fb6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d11d      	bne.n	8008ffc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d10b      	bne.n	8008fe0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd8:	1c9a      	adds	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008fde:	e073      	b.n	80090c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	121b      	asrs	r3, r3, #8
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008ffa:	e065      	b.n	80090c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009000:	2b01      	cmp	r3, #1
 8009002:	d10b      	bne.n	800901c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009008:	b2da      	uxtb	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	651a      	str	r2, [r3, #80]	; 0x50
}
 800901a:	e055      	b.n	80090c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009020:	2b02      	cmp	r3, #2
 8009022:	d151      	bne.n	80090c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	2b22      	cmp	r3, #34	; 0x22
 8009028:	d10d      	bne.n	8009046 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009038:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009044:	e040      	b.n	80090c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800904a:	b29b      	uxth	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d015      	beq.n	800907c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	2b21      	cmp	r3, #33	; 0x21
 8009054:	d112      	bne.n	800907c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009070:	b29b      	uxth	r3, r3
 8009072:	3b01      	subs	r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800907a:	e025      	b.n	80090c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d120      	bne.n	80090c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	2b21      	cmp	r3, #33	; 0x21
 800908a:	d11d      	bne.n	80090c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800909a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2220      	movs	r2, #32
 80090b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff fe36 	bl	8008d34 <HAL_I2C_MemTxCpltCallback>
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b22      	cmp	r3, #34	; 0x22
 80090e2:	f040 80ac 	bne.w	800923e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d921      	bls.n	8009138 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691a      	ldr	r2, [r3, #16]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	b29a      	uxth	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911e:	b29b      	uxth	r3, r3
 8009120:	2b03      	cmp	r3, #3
 8009122:	f040 808c 	bne.w	800923e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009134:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009136:	e082      	b.n	800923e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	2b02      	cmp	r3, #2
 800913e:	d075      	beq.n	800922c <I2C_MasterReceive_RXNE+0x15c>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d002      	beq.n	800914c <I2C_MasterReceive_RXNE+0x7c>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d16f      	bne.n	800922c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 fafd 	bl	800a74c <I2C_WaitOnSTOPRequestThroughIT>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d142      	bne.n	80091de <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009166:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009176:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	691a      	ldr	r2, [r3, #16]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b40      	cmp	r3, #64	; 0x40
 80091b0:	d10a      	bne.n	80091c8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff fdc1 	bl	8008d48 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091c6:	e03a      	b.n	800923e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2212      	movs	r2, #18
 80091d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff fd76 	bl	8008cc8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091dc:	e02f      	b.n	800923e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	691a      	ldr	r2, [r3, #16]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	b2d2      	uxtb	r2, r2
 80091fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800920a:	b29b      	uxth	r3, r3
 800920c:	3b01      	subs	r3, #1
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff fd99 	bl	8008d5c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800922a:	e008      	b.n	800923e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800923a:	605a      	str	r2, [r3, #4]
}
 800923c:	e7ff      	b.n	800923e <I2C_MasterReceive_RXNE+0x16e>
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009258:	b29b      	uxth	r3, r3
 800925a:	2b04      	cmp	r3, #4
 800925c:	d11b      	bne.n	8009296 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800926c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928a:	b29b      	uxth	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009294:	e0bd      	b.n	8009412 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800929a:	b29b      	uxth	r3, r3
 800929c:	2b03      	cmp	r3, #3
 800929e:	d129      	bne.n	80092f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d00a      	beq.n	80092cc <I2C_MasterReceive_BTF+0x86>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d007      	beq.n	80092cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80092f2:	e08e      	b.n	8009412 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d176      	bne.n	80093ec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d002      	beq.n	800930a <I2C_MasterReceive_BTF+0xc4>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b10      	cmp	r3, #16
 8009308:	d108      	bne.n	800931c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	e019      	b.n	8009350 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b04      	cmp	r3, #4
 8009320:	d002      	beq.n	8009328 <I2C_MasterReceive_BTF+0xe2>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b02      	cmp	r3, #2
 8009326:	d108      	bne.n	800933a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	e00a      	b.n	8009350 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b10      	cmp	r3, #16
 800933e:	d007      	beq.n	8009350 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800934e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691a      	ldr	r2, [r3, #16]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936c:	b29b      	uxth	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	b2d2      	uxtb	r2, r2
 8009382:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009392:	b29b      	uxth	r3, r3
 8009394:	3b01      	subs	r3, #1
 8009396:	b29a      	uxth	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80093aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2220      	movs	r2, #32
 80093b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b40      	cmp	r3, #64	; 0x40
 80093be:	d10a      	bne.n	80093d6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff fcba 	bl	8008d48 <HAL_I2C_MemRxCpltCallback>
}
 80093d4:	e01d      	b.n	8009412 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2212      	movs	r2, #18
 80093e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff fc6f 	bl	8008cc8 <HAL_I2C_MasterRxCpltCallback>
}
 80093ea:	e012      	b.n	8009412 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	d117      	bne.n	800945e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009432:	2b00      	cmp	r3, #0
 8009434:	d109      	bne.n	800944a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943a:	b2db      	uxtb	r3, r3
 800943c:	461a      	mov	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009446:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009448:	e067      	b.n	800951a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	b2da      	uxtb	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	611a      	str	r2, [r3, #16]
}
 800945c:	e05d      	b.n	800951a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009466:	d133      	bne.n	80094d0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b21      	cmp	r3, #33	; 0x21
 8009472:	d109      	bne.n	8009488 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009478:	b2db      	uxtb	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009484:	611a      	str	r2, [r3, #16]
 8009486:	e008      	b.n	800949a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948c:	b2db      	uxtb	r3, r3
 800948e:	f043 0301 	orr.w	r3, r3, #1
 8009492:	b2da      	uxtb	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d004      	beq.n	80094ac <I2C_Master_SB+0x92>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d108      	bne.n	80094be <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d032      	beq.n	800951a <I2C_Master_SB+0x100>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d02d      	beq.n	800951a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094cc:	605a      	str	r2, [r3, #4]
}
 80094ce:	e024      	b.n	800951a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10e      	bne.n	80094f6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094dc:	b29b      	uxth	r3, r3
 80094de:	11db      	asrs	r3, r3, #7
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 0306 	and.w	r3, r3, #6
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f063 030f 	orn	r3, r3, #15
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	611a      	str	r2, [r3, #16]
}
 80094f4:	e011      	b.n	800951a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d10d      	bne.n	800951a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009502:	b29b      	uxth	r3, r3
 8009504:	11db      	asrs	r3, r3, #7
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 0306 	and.w	r3, r3, #6
 800950c:	b2db      	uxtb	r3, r3
 800950e:	f063 030e 	orn	r3, r3, #14
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	611a      	str	r2, [r3, #16]
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009532:	b2da      	uxtb	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953e:	2b00      	cmp	r3, #0
 8009540:	d004      	beq.n	800954c <I2C_Master_ADD10+0x26>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d108      	bne.n	800955e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00c      	beq.n	800956e <I2C_Master_ADD10+0x48>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955a:	2b00      	cmp	r3, #0
 800955c:	d007      	beq.n	800956e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800956c:	605a      	str	r2, [r3, #4]
  }
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800957a:	b480      	push	{r7}
 800957c:	b091      	sub	sp, #68	; 0x44
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b22      	cmp	r3, #34	; 0x22
 80095a2:	f040 8169 	bne.w	8009878 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10f      	bne.n	80095ce <I2C_Master_ADDR+0x54>
 80095ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	d10b      	bne.n	80095ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095b6:	2300      	movs	r3, #0
 80095b8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	633b      	str	r3, [r7, #48]	; 0x30
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	e160      	b.n	8009890 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d11d      	bne.n	8009612 <I2C_Master_ADDR+0x98>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80095de:	d118      	bne.n	8009612 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095e0:	2300      	movs	r3, #0
 80095e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009604:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	651a      	str	r2, [r3, #80]	; 0x50
 8009610:	e13e      	b.n	8009890 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d113      	bne.n	8009644 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800961c:	2300      	movs	r3, #0
 800961e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	62bb      	str	r3, [r7, #40]	; 0x28
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	e115      	b.n	8009870 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b01      	cmp	r3, #1
 800964c:	f040 808a 	bne.w	8009764 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009656:	d137      	bne.n	80096c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009666:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009676:	d113      	bne.n	80096a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009686:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009688:	2300      	movs	r3, #0
 800968a:	627b      	str	r3, [r7, #36]	; 0x24
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	627b      	str	r3, [r7, #36]	; 0x24
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	e0e7      	b.n	8009870 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096a0:	2300      	movs	r3, #0
 80096a2:	623b      	str	r3, [r7, #32]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	623b      	str	r3, [r7, #32]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	623b      	str	r3, [r7, #32]
 80096b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	e0d3      	b.n	8009870 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	2b08      	cmp	r3, #8
 80096cc:	d02e      	beq.n	800972c <I2C_Master_ADDR+0x1b2>
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	2b20      	cmp	r3, #32
 80096d2:	d02b      	beq.n	800972c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80096d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d6:	2b12      	cmp	r3, #18
 80096d8:	d102      	bne.n	80096e0 <I2C_Master_ADDR+0x166>
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d125      	bne.n	800972c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d00e      	beq.n	8009704 <I2C_Master_ADDR+0x18a>
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d00b      	beq.n	8009704 <I2C_Master_ADDR+0x18a>
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	2b10      	cmp	r3, #16
 80096f0:	d008      	beq.n	8009704 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	e007      	b.n	8009714 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009712:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009714:	2300      	movs	r3, #0
 8009716:	61fb      	str	r3, [r7, #28]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	61fb      	str	r3, [r7, #28]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	e0a1      	b.n	8009870 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800973a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800973c:	2300      	movs	r3, #0
 800973e:	61bb      	str	r3, [r7, #24]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	61bb      	str	r3, [r7, #24]
 8009750:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e085      	b.n	8009870 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009768:	b29b      	uxth	r3, r3
 800976a:	2b02      	cmp	r3, #2
 800976c:	d14d      	bne.n	800980a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	2b04      	cmp	r3, #4
 8009772:	d016      	beq.n	80097a2 <I2C_Master_ADDR+0x228>
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	2b02      	cmp	r3, #2
 8009778:	d013      	beq.n	80097a2 <I2C_Master_ADDR+0x228>
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	2b10      	cmp	r3, #16
 800977e:	d010      	beq.n	80097a2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800978e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	e007      	b.n	80097b2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097b0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c0:	d117      	bne.n	80097f2 <I2C_Master_ADDR+0x278>
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097c8:	d00b      	beq.n	80097e2 <I2C_Master_ADDR+0x268>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d008      	beq.n	80097e2 <I2C_Master_ADDR+0x268>
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	d005      	beq.n	80097e2 <I2C_Master_ADDR+0x268>
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	2b10      	cmp	r3, #16
 80097da:	d002      	beq.n	80097e2 <I2C_Master_ADDR+0x268>
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	2b20      	cmp	r3, #32
 80097e0:	d107      	bne.n	80097f2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097f2:	2300      	movs	r3, #0
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	e032      	b.n	8009870 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009818:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009828:	d117      	bne.n	800985a <I2C_Master_ADDR+0x2e0>
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009830:	d00b      	beq.n	800984a <I2C_Master_ADDR+0x2d0>
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	2b01      	cmp	r3, #1
 8009836:	d008      	beq.n	800984a <I2C_Master_ADDR+0x2d0>
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	2b08      	cmp	r3, #8
 800983c:	d005      	beq.n	800984a <I2C_Master_ADDR+0x2d0>
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	2b10      	cmp	r3, #16
 8009842:	d002      	beq.n	800984a <I2C_Master_ADDR+0x2d0>
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	2b20      	cmp	r3, #32
 8009848:	d107      	bne.n	800985a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009858:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800985a:	2300      	movs	r3, #0
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	613b      	str	r3, [r7, #16]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009876:	e00b      	b.n	8009890 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	68fb      	ldr	r3, [r7, #12]
}
 800988e:	e7ff      	b.n	8009890 <I2C_Master_ADDR+0x316>
 8009890:	bf00      	nop
 8009892:	3744      	adds	r7, #68	; 0x44
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d02b      	beq.n	800990e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d114      	bne.n	800990e <I2C_SlaveTransmit_TXE+0x72>
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	2b29      	cmp	r3, #41	; 0x29
 80098e8:	d111      	bne.n	800990e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2221      	movs	r2, #33	; 0x21
 80098fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2228      	movs	r2, #40	; 0x28
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff f9e7 	bl	8008cdc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009922:	b29b      	uxth	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	d011      	beq.n	800994c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009966:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d02c      	beq.n	80099cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	b2d2      	uxtb	r2, r2
 800997e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800999c:	b29b      	uxth	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d114      	bne.n	80099cc <I2C_SlaveReceive_RXNE+0x74>
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	2b2a      	cmp	r3, #42	; 0x2a
 80099a6:	d111      	bne.n	80099cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2222      	movs	r2, #34	; 0x22
 80099bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2228      	movs	r2, #40	; 0x28
 80099c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff f992 	bl	8008cf0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80099cc:	bf00      	nop
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d012      	beq.n	8009a0c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	691a      	ldr	r2, [r3, #16]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	3b01      	subs	r3, #1
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a32:	2b28      	cmp	r3, #40	; 0x28
 8009a34:	d127      	bne.n	8009a86 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a44:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	089b      	lsrs	r3, r3, #2
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009a52:	2301      	movs	r3, #1
 8009a54:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	09db      	lsrs	r3, r3, #7
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d103      	bne.n	8009a6a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	81bb      	strh	r3, [r7, #12]
 8009a68:	e002      	b.n	8009a70 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009a78:	89ba      	ldrh	r2, [r7, #12]
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff f940 	bl	8008d04 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009a84:	e00e      	b.n	8009aa4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a86:	2300      	movs	r3, #0
 8009a88:	60bb      	str	r3, [r7, #8]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	60bb      	str	r3, [r7, #8]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	60bb      	str	r3, [r7, #8]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009aa4:	bf00      	nop
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009aca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009acc:	2300      	movs	r3, #0
 8009ace:	60bb      	str	r3, [r7, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	60bb      	str	r3, [r7, #8]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0201 	orr.w	r2, r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009af8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b08:	d172      	bne.n	8009bf0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	2b22      	cmp	r3, #34	; 0x22
 8009b0e:	d002      	beq.n	8009b16 <I2C_Slave_STOPF+0x6a>
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	2b2a      	cmp	r3, #42	; 0x2a
 8009b14:	d135      	bne.n	8009b82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d005      	beq.n	8009b3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	f043 0204 	orr.w	r2, r3, #4
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fd ffa6 	bl	8007aa0 <HAL_DMA_GetState>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d049      	beq.n	8009bee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5e:	4a69      	ldr	r2, [pc, #420]	; (8009d04 <I2C_Slave_STOPF+0x258>)
 8009b60:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fd fdee 	bl	8007748 <HAL_DMA_Abort_IT>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d03d      	beq.n	8009bee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b80:	e035      	b.n	8009bee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d005      	beq.n	8009ba6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	f043 0204 	orr.w	r2, r3, #4
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fd ff70 	bl	8007aa0 <HAL_DMA_GetState>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d014      	beq.n	8009bf0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bca:	4a4e      	ldr	r2, [pc, #312]	; (8009d04 <I2C_Slave_STOPF+0x258>)
 8009bcc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fd fdb8 	bl	8007748 <HAL_DMA_Abort_IT>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d008      	beq.n	8009bf0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	e000      	b.n	8009bf0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009bee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d03e      	beq.n	8009c78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d112      	bne.n	8009c2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	691a      	ldr	r2, [r3, #16]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	b2d2      	uxtb	r2, r2
 8009c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c38:	2b40      	cmp	r3, #64	; 0x40
 8009c3a:	d112      	bne.n	8009c62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691a      	ldr	r2, [r3, #16]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d005      	beq.n	8009c78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	f043 0204 	orr.w	r2, r3, #4
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f8b3 	bl	8009dec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009c86:	e039      	b.n	8009cfc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c8c:	d109      	bne.n	8009ca2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2228      	movs	r2, #40	; 0x28
 8009c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff f827 	bl	8008cf0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b28      	cmp	r3, #40	; 0x28
 8009cac:	d111      	bne.n	8009cd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a15      	ldr	r2, [pc, #84]	; (8009d08 <I2C_Slave_STOPF+0x25c>)
 8009cb2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff f828 	bl	8008d20 <HAL_I2C_ListenCpltCallback>
}
 8009cd0:	e014      	b.n	8009cfc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd6:	2b22      	cmp	r3, #34	; 0x22
 8009cd8:	d002      	beq.n	8009ce0 <I2C_Slave_STOPF+0x234>
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b22      	cmp	r3, #34	; 0x22
 8009cde:	d10d      	bne.n	8009cfc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7fe fffa 	bl	8008cf0 <HAL_I2C_SlaveRxCpltCallback>
}
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	0800a34d 	.word	0x0800a34d
 8009d08:	ffff0000 	.word	0xffff0000

08009d0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d002      	beq.n	8009d2e <I2C_Slave_AF+0x22>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b20      	cmp	r3, #32
 8009d2c:	d129      	bne.n	8009d82 <I2C_Slave_AF+0x76>
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	2b28      	cmp	r3, #40	; 0x28
 8009d32:	d126      	bne.n	8009d82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a2c      	ldr	r2, [pc, #176]	; (8009de8 <I2C_Slave_AF+0xdc>)
 8009d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7fe ffd0 	bl	8008d20 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009d80:	e02e      	b.n	8009de0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	2b21      	cmp	r3, #33	; 0x21
 8009d86:	d126      	bne.n	8009dd6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a17      	ldr	r2, [pc, #92]	; (8009de8 <I2C_Slave_AF+0xdc>)
 8009d8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2221      	movs	r2, #33	; 0x21
 8009d92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009db2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009dbc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dcc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7fe ff84 	bl	8008cdc <HAL_I2C_SlaveTxCpltCallback>
}
 8009dd4:	e004      	b.n	8009de0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009dde:	615a      	str	r2, [r3, #20]
}
 8009de0:	bf00      	nop
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	ffff0000 	.word	0xffff0000

08009dec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dfa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	2b10      	cmp	r3, #16
 8009e08:	d002      	beq.n	8009e10 <I2C_ITError+0x24>
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	2b40      	cmp	r3, #64	; 0x40
 8009e0e:	d10a      	bne.n	8009e26 <I2C_ITError+0x3a>
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	2b22      	cmp	r3, #34	; 0x22
 8009e14:	d107      	bne.n	8009e26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009e2c:	2b28      	cmp	r3, #40	; 0x28
 8009e2e:	d107      	bne.n	8009e40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2228      	movs	r2, #40	; 0x28
 8009e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e3e:	e015      	b.n	8009e6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e4e:	d00a      	beq.n	8009e66 <I2C_ITError+0x7a>
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
 8009e52:	2b60      	cmp	r3, #96	; 0x60
 8009e54:	d007      	beq.n	8009e66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e7a:	d162      	bne.n	8009f42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d020      	beq.n	8009edc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9e:	4a6a      	ldr	r2, [pc, #424]	; (800a048 <I2C_ITError+0x25c>)
 8009ea0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fd fc4e 	bl	8007748 <HAL_DMA_Abort_IT>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 8089 	beq.w	8009fc6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0201 	bic.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	4798      	blx	r3
 8009eda:	e074      	b.n	8009fc6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee0:	4a59      	ldr	r2, [pc, #356]	; (800a048 <I2C_ITError+0x25c>)
 8009ee2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fd fc2d 	bl	8007748 <HAL_DMA_Abort_IT>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d068      	beq.n	8009fc6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efe:	2b40      	cmp	r3, #64	; 0x40
 8009f00:	d10b      	bne.n	8009f1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691a      	ldr	r2, [r3, #16]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	b2d2      	uxtb	r2, r2
 8009f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0201 	bic.w	r2, r2, #1
 8009f28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4798      	blx	r3
 8009f40:	e041      	b.n	8009fc6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b60      	cmp	r3, #96	; 0x60
 8009f4c:	d125      	bne.n	8009f9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2220      	movs	r2, #32
 8009f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f66:	2b40      	cmp	r3, #64	; 0x40
 8009f68:	d10b      	bne.n	8009f82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	691a      	ldr	r2, [r3, #16]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	b2d2      	uxtb	r2, r2
 8009f76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0201 	bic.w	r2, r2, #1
 8009f90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7fe feec 	bl	8008d70 <HAL_I2C_AbortCpltCallback>
 8009f98:	e015      	b.n	8009fc6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d10b      	bne.n	8009fc0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691a      	ldr	r2, [r3, #16]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	b2d2      	uxtb	r2, r2
 8009fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7fe fecb 	bl	8008d5c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10e      	bne.n	8009ff4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d109      	bne.n	8009ff4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d104      	bne.n	8009ff4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d007      	beq.n	800a004 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a002:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a00a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b04      	cmp	r3, #4
 800a016:	d113      	bne.n	800a040 <I2C_ITError+0x254>
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	2b28      	cmp	r3, #40	; 0x28
 800a01c:	d110      	bne.n	800a040 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <I2C_ITError+0x260>)
 800a022:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7fe fe70 	bl	8008d20 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	0800a34d 	.word	0x0800a34d
 800a04c:	ffff0000 	.word	0xffff0000

0800a050 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af02      	add	r7, sp, #8
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	4608      	mov	r0, r1
 800a05a:	4611      	mov	r1, r2
 800a05c:	461a      	mov	r2, r3
 800a05e:	4603      	mov	r3, r0
 800a060:	817b      	strh	r3, [r7, #10]
 800a062:	460b      	mov	r3, r1
 800a064:	813b      	strh	r3, [r7, #8]
 800a066:	4613      	mov	r3, r2
 800a068:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a078:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	2200      	movs	r2, #0
 800a082:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 fa08 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00d      	beq.n	800a0ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a0:	d103      	bne.n	800a0aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e05f      	b.n	800a16e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0ae:	897b      	ldrh	r3, [r7, #10]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	6a3a      	ldr	r2, [r7, #32]
 800a0c2:	492d      	ldr	r1, [pc, #180]	; (800a178 <I2C_RequestMemoryWrite+0x128>)
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 fa40 	bl	800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e04c      	b.n	800a16e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ec:	6a39      	ldr	r1, [r7, #32]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 faaa 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00d      	beq.n	800a116 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d107      	bne.n	800a112 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e02b      	b.n	800a16e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d105      	bne.n	800a128 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a11c:	893b      	ldrh	r3, [r7, #8]
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	611a      	str	r2, [r3, #16]
 800a126:	e021      	b.n	800a16c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a128:	893b      	ldrh	r3, [r7, #8]
 800a12a:	0a1b      	lsrs	r3, r3, #8
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a138:	6a39      	ldr	r1, [r7, #32]
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 fa84 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00d      	beq.n	800a162 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d107      	bne.n	800a15e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a15c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e005      	b.n	800a16e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a162:	893b      	ldrh	r3, [r7, #8]
 800a164:	b2da      	uxtb	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	00010002 	.word	0x00010002

0800a17c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af02      	add	r7, sp, #8
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	4608      	mov	r0, r1
 800a186:	4611      	mov	r1, r2
 800a188:	461a      	mov	r2, r3
 800a18a:	4603      	mov	r3, r0
 800a18c:	817b      	strh	r3, [r7, #10]
 800a18e:	460b      	mov	r3, r1
 800a190:	813b      	strh	r3, [r7, #8]
 800a192:	4613      	mov	r3, r2
 800a194:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f96a 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00d      	beq.n	800a1ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1dc:	d103      	bne.n	800a1e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e0aa      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1ea:	897b      	ldrh	r3, [r7, #10]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	6a3a      	ldr	r2, [r7, #32]
 800a1fe:	4952      	ldr	r1, [pc, #328]	; (800a348 <I2C_RequestMemoryRead+0x1cc>)
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f9a2 	bl	800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e097      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	617b      	str	r3, [r7, #20]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a228:	6a39      	ldr	r1, [r7, #32]
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 fa0c 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00d      	beq.n	800a252 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d107      	bne.n	800a24e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a24c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e076      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d105      	bne.n	800a264 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a258:	893b      	ldrh	r3, [r7, #8]
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	611a      	str	r2, [r3, #16]
 800a262:	e021      	b.n	800a2a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a264:	893b      	ldrh	r3, [r7, #8]
 800a266:	0a1b      	lsrs	r3, r3, #8
 800a268:	b29b      	uxth	r3, r3
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a274:	6a39      	ldr	r1, [r7, #32]
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f9e6 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00d      	beq.n	800a29e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	2b04      	cmp	r3, #4
 800a288:	d107      	bne.n	800a29a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e050      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a29e:	893b      	ldrh	r3, [r7, #8]
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2aa:	6a39      	ldr	r1, [r7, #32]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f9cb 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00d      	beq.n	800a2d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2bc:	2b04      	cmp	r3, #4
 800a2be:	d107      	bne.n	800a2d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e035      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 f8d3 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00d      	beq.n	800a318 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a30a:	d103      	bne.n	800a314 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e013      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a318:	897b      	ldrh	r3, [r7, #10]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f043 0301 	orr.w	r3, r3, #1
 800a320:	b2da      	uxtb	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	6a3a      	ldr	r2, [r7, #32]
 800a32c:	4906      	ldr	r1, [pc, #24]	; (800a348 <I2C_RequestMemoryRead+0x1cc>)
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 f90b 	bl	800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	00010002 	.word	0x00010002

0800a34c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a364:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a366:	4b4b      	ldr	r3, [pc, #300]	; (800a494 <I2C_DMAAbort+0x148>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	08db      	lsrs	r3, r3, #3
 800a36c:	4a4a      	ldr	r2, [pc, #296]	; (800a498 <I2C_DMAAbort+0x14c>)
 800a36e:	fba2 2303 	umull	r2, r3, r2, r3
 800a372:	0a1a      	lsrs	r2, r3, #8
 800a374:	4613      	mov	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	00da      	lsls	r2, r3, #3
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38a:	f043 0220 	orr.w	r2, r3, #32
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a392:	e00a      	b.n	800a3aa <I2C_DMAAbort+0x5e>
    }
    count--;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3b01      	subs	r3, #1
 800a398:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3a8:	d0ea      	beq.n	800a380 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d003      	beq.n	800a400 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0201 	bic.w	r2, r2, #1
 800a40e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b60      	cmp	r3, #96	; 0x60
 800a41a:	d10e      	bne.n	800a43a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2220      	movs	r2, #32
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	2200      	movs	r2, #0
 800a430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a432:	6978      	ldr	r0, [r7, #20]
 800a434:	f7fe fc9c 	bl	8008d70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a438:	e027      	b.n	800a48a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a43a:	7cfb      	ldrb	r3, [r7, #19]
 800a43c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a440:	2b28      	cmp	r3, #40	; 0x28
 800a442:	d117      	bne.n	800a474 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f042 0201 	orr.w	r2, r2, #1
 800a452:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a462:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2200      	movs	r2, #0
 800a468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2228      	movs	r2, #40	; 0x28
 800a46e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a472:	e007      	b.n	800a484 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2220      	movs	r2, #32
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a484:	6978      	ldr	r0, [r7, #20]
 800a486:	f7fe fc69 	bl	8008d5c <HAL_I2C_ErrorCallback>
}
 800a48a:	bf00      	nop
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	20000154 	.word	0x20000154
 800a498:	14f8b589 	.word	0x14f8b589

0800a49c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4ac:	e025      	b.n	800a4fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b4:	d021      	beq.n	800a4fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b6:	f7fc ff57 	bl	8007368 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d302      	bcc.n	800a4cc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d116      	bne.n	800a4fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	f043 0220 	orr.w	r2, r3, #32
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e023      	b.n	800a542 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	0c1b      	lsrs	r3, r3, #16
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b01      	cmp	r3, #1
 800a502:	d10d      	bne.n	800a520 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	43da      	mvns	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4013      	ands	r3, r2
 800a510:	b29b      	uxth	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	bf0c      	ite	eq
 800a516:	2301      	moveq	r3, #1
 800a518:	2300      	movne	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	e00c      	b.n	800a53a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	43da      	mvns	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4013      	ands	r3, r2
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf0c      	ite	eq
 800a532:	2301      	moveq	r3, #1
 800a534:	2300      	movne	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	461a      	mov	r2, r3
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d0b6      	beq.n	800a4ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a558:	e051      	b.n	800a5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a568:	d123      	bne.n	800a5b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a578:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a582:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59e:	f043 0204 	orr.w	r2, r3, #4
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e046      	b.n	800a640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d021      	beq.n	800a5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ba:	f7fc fed5 	bl	8007368 <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d302      	bcc.n	800a5d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d116      	bne.n	800a5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ea:	f043 0220 	orr.w	r2, r3, #32
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e020      	b.n	800a640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	0c1b      	lsrs	r3, r3, #16
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b01      	cmp	r3, #1
 800a606:	d10c      	bne.n	800a622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	43da      	mvns	r2, r3
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	4013      	ands	r3, r2
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	bf14      	ite	ne
 800a61a:	2301      	movne	r3, #1
 800a61c:	2300      	moveq	r3, #0
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	e00b      	b.n	800a63a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	43da      	mvns	r2, r3
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	4013      	ands	r3, r2
 800a62e:	b29b      	uxth	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	bf14      	ite	ne
 800a634:	2301      	movne	r3, #1
 800a636:	2300      	moveq	r3, #0
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d18d      	bne.n	800a55a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a654:	e02d      	b.n	800a6b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f900 	bl	800a85c <I2C_IsAcknowledgeFailed>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e02d      	b.n	800a6c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66c:	d021      	beq.n	800a6b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a66e:	f7fc fe7b 	bl	8007368 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d302      	bcc.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d116      	bne.n	800a6b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	f043 0220 	orr.w	r2, r3, #32
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e007      	b.n	800a6c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6bc:	2b80      	cmp	r3, #128	; 0x80
 800a6be:	d1ca      	bne.n	800a656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6d6:	e02d      	b.n	800a734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f8bf 	bl	800a85c <I2C_IsAcknowledgeFailed>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e02d      	b.n	800a744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ee:	d021      	beq.n	800a734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6f0:	f7fc fe3a 	bl	8007368 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d302      	bcc.n	800a706 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d116      	bne.n	800a734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2220      	movs	r2, #32
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a720:	f043 0220 	orr.w	r2, r3, #32
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e007      	b.n	800a744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	f003 0304 	and.w	r3, r3, #4
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d1ca      	bne.n	800a6d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a758:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	08db      	lsrs	r3, r3, #3
 800a75e:	4a13      	ldr	r2, [pc, #76]	; (800a7ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a760:	fba2 2303 	umull	r2, r3, r2, r3
 800a764:	0a1a      	lsrs	r2, r3, #8
 800a766:	4613      	mov	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4413      	add	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3b01      	subs	r3, #1
 800a772:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d107      	bne.n	800a78a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	f043 0220 	orr.w	r2, r3, #32
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e008      	b.n	800a79c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a798:	d0e9      	beq.n	800a76e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	20000154 	.word	0x20000154
 800a7ac:	14f8b589 	.word	0x14f8b589

0800a7b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7bc:	e042      	b.n	800a844 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	f003 0310 	and.w	r3, r3, #16
 800a7c8:	2b10      	cmp	r3, #16
 800a7ca:	d119      	bne.n	800a800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f06f 0210 	mvn.w	r2, #16
 800a7d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e029      	b.n	800a854 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a800:	f7fc fdb2 	bl	8007368 <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d302      	bcc.n	800a816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d116      	bne.n	800a844 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2220      	movs	r2, #32
 800a820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	f043 0220 	orr.w	r2, r3, #32
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e007      	b.n	800a854 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a84e:	2b40      	cmp	r3, #64	; 0x40
 800a850:	d1b5      	bne.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a86e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a872:	d11b      	bne.n	800a8ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a87c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a898:	f043 0204 	orr.w	r2, r3, #4
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e000      	b.n	800a8ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a8ca:	d103      	bne.n	800a8d4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a8d2:	e007      	b.n	800a8e4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a8dc:	d102      	bne.n	800a8e4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e267      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d075      	beq.n	800a9fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a90e:	4b88      	ldr	r3, [pc, #544]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f003 030c 	and.w	r3, r3, #12
 800a916:	2b04      	cmp	r3, #4
 800a918:	d00c      	beq.n	800a934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a91a:	4b85      	ldr	r3, [pc, #532]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a922:	2b08      	cmp	r3, #8
 800a924:	d112      	bne.n	800a94c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a926:	4b82      	ldr	r3, [pc, #520]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a92e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a932:	d10b      	bne.n	800a94c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a934:	4b7e      	ldr	r3, [pc, #504]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d05b      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x108>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d157      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e242      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a954:	d106      	bne.n	800a964 <HAL_RCC_OscConfig+0x74>
 800a956:	4b76      	ldr	r3, [pc, #472]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a75      	ldr	r2, [pc, #468]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a95c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	e01d      	b.n	800a9a0 <HAL_RCC_OscConfig+0xb0>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a96c:	d10c      	bne.n	800a988 <HAL_RCC_OscConfig+0x98>
 800a96e:	4b70      	ldr	r3, [pc, #448]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a6f      	ldr	r2, [pc, #444]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	4b6d      	ldr	r3, [pc, #436]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a6c      	ldr	r2, [pc, #432]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	e00b      	b.n	800a9a0 <HAL_RCC_OscConfig+0xb0>
 800a988:	4b69      	ldr	r3, [pc, #420]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a68      	ldr	r2, [pc, #416]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a98e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	4b66      	ldr	r3, [pc, #408]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a65      	ldr	r2, [pc, #404]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a99a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a99e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d013      	beq.n	800a9d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9a8:	f7fc fcde 	bl	8007368 <HAL_GetTick>
 800a9ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9ae:	e008      	b.n	800a9c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9b0:	f7fc fcda 	bl	8007368 <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	2b64      	cmp	r3, #100	; 0x64
 800a9bc:	d901      	bls.n	800a9c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e207      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9c2:	4b5b      	ldr	r3, [pc, #364]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d0f0      	beq.n	800a9b0 <HAL_RCC_OscConfig+0xc0>
 800a9ce:	e014      	b.n	800a9fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9d0:	f7fc fcca 	bl	8007368 <HAL_GetTick>
 800a9d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9d8:	f7fc fcc6 	bl	8007368 <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b64      	cmp	r3, #100	; 0x64
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e1f3      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9ea:	4b51      	ldr	r3, [pc, #324]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1f0      	bne.n	800a9d8 <HAL_RCC_OscConfig+0xe8>
 800a9f6:	e000      	b.n	800a9fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0302 	and.w	r3, r3, #2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d063      	beq.n	800aace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa06:	4b4a      	ldr	r3, [pc, #296]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f003 030c 	and.w	r3, r3, #12
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00b      	beq.n	800aa2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa12:	4b47      	ldr	r3, [pc, #284]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa1a:	2b08      	cmp	r3, #8
 800aa1c:	d11c      	bne.n	800aa58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa1e:	4b44      	ldr	r3, [pc, #272]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d116      	bne.n	800aa58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa2a:	4b41      	ldr	r3, [pc, #260]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d005      	beq.n	800aa42 <HAL_RCC_OscConfig+0x152>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d001      	beq.n	800aa42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e1c7      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa42:	4b3b      	ldr	r3, [pc, #236]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	00db      	lsls	r3, r3, #3
 800aa50:	4937      	ldr	r1, [pc, #220]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa52:	4313      	orrs	r3, r2
 800aa54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa56:	e03a      	b.n	800aace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d020      	beq.n	800aaa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa60:	4b34      	ldr	r3, [pc, #208]	; (800ab34 <HAL_RCC_OscConfig+0x244>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa66:	f7fc fc7f 	bl	8007368 <HAL_GetTick>
 800aa6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa6c:	e008      	b.n	800aa80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa6e:	f7fc fc7b 	bl	8007368 <HAL_GetTick>
 800aa72:	4602      	mov	r2, r0
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d901      	bls.n	800aa80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e1a8      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa80:	4b2b      	ldr	r3, [pc, #172]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0302 	and.w	r3, r3, #2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d0f0      	beq.n	800aa6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa8c:	4b28      	ldr	r3, [pc, #160]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	4925      	ldr	r1, [pc, #148]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	600b      	str	r3, [r1, #0]
 800aaa0:	e015      	b.n	800aace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aaa2:	4b24      	ldr	r3, [pc, #144]	; (800ab34 <HAL_RCC_OscConfig+0x244>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaa8:	f7fc fc5e 	bl	8007368 <HAL_GetTick>
 800aaac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aaae:	e008      	b.n	800aac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aab0:	f7fc fc5a 	bl	8007368 <HAL_GetTick>
 800aab4:	4602      	mov	r2, r0
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d901      	bls.n	800aac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e187      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aac2:	4b1b      	ldr	r3, [pc, #108]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1f0      	bne.n	800aab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0308 	and.w	r3, r3, #8
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d036      	beq.n	800ab48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d016      	beq.n	800ab10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aae2:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <HAL_RCC_OscConfig+0x248>)
 800aae4:	2201      	movs	r2, #1
 800aae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aae8:	f7fc fc3e 	bl	8007368 <HAL_GetTick>
 800aaec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaee:	e008      	b.n	800ab02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aaf0:	f7fc fc3a 	bl	8007368 <HAL_GetTick>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d901      	bls.n	800ab02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e167      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab02:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <HAL_RCC_OscConfig+0x240>)
 800ab04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0f0      	beq.n	800aaf0 <HAL_RCC_OscConfig+0x200>
 800ab0e:	e01b      	b.n	800ab48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab10:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <HAL_RCC_OscConfig+0x248>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab16:	f7fc fc27 	bl	8007368 <HAL_GetTick>
 800ab1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab1c:	e00e      	b.n	800ab3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab1e:	f7fc fc23 	bl	8007368 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d907      	bls.n	800ab3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e150      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
 800ab30:	40023800 	.word	0x40023800
 800ab34:	42470000 	.word	0x42470000
 800ab38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab3c:	4b88      	ldr	r3, [pc, #544]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ab3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1ea      	bne.n	800ab1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0304 	and.w	r3, r3, #4
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 8097 	beq.w	800ac84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab56:	2300      	movs	r3, #0
 800ab58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab5a:	4b81      	ldr	r3, [pc, #516]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10f      	bne.n	800ab86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab66:	2300      	movs	r3, #0
 800ab68:	60bb      	str	r3, [r7, #8]
 800ab6a:	4b7d      	ldr	r3, [pc, #500]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	4a7c      	ldr	r2, [pc, #496]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ab70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab74:	6413      	str	r3, [r2, #64]	; 0x40
 800ab76:	4b7a      	ldr	r3, [pc, #488]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab7e:	60bb      	str	r3, [r7, #8]
 800ab80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab82:	2301      	movs	r3, #1
 800ab84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab86:	4b77      	ldr	r3, [pc, #476]	; (800ad64 <HAL_RCC_OscConfig+0x474>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d118      	bne.n	800abc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab92:	4b74      	ldr	r3, [pc, #464]	; (800ad64 <HAL_RCC_OscConfig+0x474>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a73      	ldr	r2, [pc, #460]	; (800ad64 <HAL_RCC_OscConfig+0x474>)
 800ab98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab9e:	f7fc fbe3 	bl	8007368 <HAL_GetTick>
 800aba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aba4:	e008      	b.n	800abb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aba6:	f7fc fbdf 	bl	8007368 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d901      	bls.n	800abb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e10c      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abb8:	4b6a      	ldr	r3, [pc, #424]	; (800ad64 <HAL_RCC_OscConfig+0x474>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d0f0      	beq.n	800aba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d106      	bne.n	800abda <HAL_RCC_OscConfig+0x2ea>
 800abcc:	4b64      	ldr	r3, [pc, #400]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800abce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd0:	4a63      	ldr	r2, [pc, #396]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800abd2:	f043 0301 	orr.w	r3, r3, #1
 800abd6:	6713      	str	r3, [r2, #112]	; 0x70
 800abd8:	e01c      	b.n	800ac14 <HAL_RCC_OscConfig+0x324>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	2b05      	cmp	r3, #5
 800abe0:	d10c      	bne.n	800abfc <HAL_RCC_OscConfig+0x30c>
 800abe2:	4b5f      	ldr	r3, [pc, #380]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800abe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe6:	4a5e      	ldr	r2, [pc, #376]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800abe8:	f043 0304 	orr.w	r3, r3, #4
 800abec:	6713      	str	r3, [r2, #112]	; 0x70
 800abee:	4b5c      	ldr	r3, [pc, #368]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800abf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf2:	4a5b      	ldr	r2, [pc, #364]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800abf4:	f043 0301 	orr.w	r3, r3, #1
 800abf8:	6713      	str	r3, [r2, #112]	; 0x70
 800abfa:	e00b      	b.n	800ac14 <HAL_RCC_OscConfig+0x324>
 800abfc:	4b58      	ldr	r3, [pc, #352]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800abfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac00:	4a57      	ldr	r2, [pc, #348]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ac02:	f023 0301 	bic.w	r3, r3, #1
 800ac06:	6713      	str	r3, [r2, #112]	; 0x70
 800ac08:	4b55      	ldr	r3, [pc, #340]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ac0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0c:	4a54      	ldr	r2, [pc, #336]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ac0e:	f023 0304 	bic.w	r3, r3, #4
 800ac12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d015      	beq.n	800ac48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac1c:	f7fc fba4 	bl	8007368 <HAL_GetTick>
 800ac20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac22:	e00a      	b.n	800ac3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac24:	f7fc fba0 	bl	8007368 <HAL_GetTick>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d901      	bls.n	800ac3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e0cb      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac3a:	4b49      	ldr	r3, [pc, #292]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ac3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0ee      	beq.n	800ac24 <HAL_RCC_OscConfig+0x334>
 800ac46:	e014      	b.n	800ac72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac48:	f7fc fb8e 	bl	8007368 <HAL_GetTick>
 800ac4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac4e:	e00a      	b.n	800ac66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac50:	f7fc fb8a 	bl	8007368 <HAL_GetTick>
 800ac54:	4602      	mov	r2, r0
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d901      	bls.n	800ac66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e0b5      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac66:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ac68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1ee      	bne.n	800ac50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d105      	bne.n	800ac84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac78:	4b39      	ldr	r3, [pc, #228]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7c:	4a38      	ldr	r2, [pc, #224]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ac7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 80a1 	beq.w	800add0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ac8e:	4b34      	ldr	r3, [pc, #208]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f003 030c 	and.w	r3, r3, #12
 800ac96:	2b08      	cmp	r3, #8
 800ac98:	d05c      	beq.n	800ad54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d141      	bne.n	800ad26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aca2:	4b31      	ldr	r3, [pc, #196]	; (800ad68 <HAL_RCC_OscConfig+0x478>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aca8:	f7fc fb5e 	bl	8007368 <HAL_GetTick>
 800acac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acae:	e008      	b.n	800acc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acb0:	f7fc fb5a 	bl	8007368 <HAL_GetTick>
 800acb4:	4602      	mov	r2, r0
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d901      	bls.n	800acc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e087      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acc2:	4b27      	ldr	r3, [pc, #156]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1f0      	bne.n	800acb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	69da      	ldr	r2, [r3, #28]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	431a      	orrs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	019b      	lsls	r3, r3, #6
 800acde:	431a      	orrs	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	085b      	lsrs	r3, r3, #1
 800ace6:	3b01      	subs	r3, #1
 800ace8:	041b      	lsls	r3, r3, #16
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf0:	061b      	lsls	r3, r3, #24
 800acf2:	491b      	ldr	r1, [pc, #108]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800acf4:	4313      	orrs	r3, r2
 800acf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acf8:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <HAL_RCC_OscConfig+0x478>)
 800acfa:	2201      	movs	r2, #1
 800acfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acfe:	f7fc fb33 	bl	8007368 <HAL_GetTick>
 800ad02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad04:	e008      	b.n	800ad18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad06:	f7fc fb2f 	bl	8007368 <HAL_GetTick>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d901      	bls.n	800ad18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	e05c      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad18:	4b11      	ldr	r3, [pc, #68]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0f0      	beq.n	800ad06 <HAL_RCC_OscConfig+0x416>
 800ad24:	e054      	b.n	800add0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad26:	4b10      	ldr	r3, [pc, #64]	; (800ad68 <HAL_RCC_OscConfig+0x478>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad2c:	f7fc fb1c 	bl	8007368 <HAL_GetTick>
 800ad30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad32:	e008      	b.n	800ad46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad34:	f7fc fb18 	bl	8007368 <HAL_GetTick>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d901      	bls.n	800ad46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	e045      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad46:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <HAL_RCC_OscConfig+0x470>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1f0      	bne.n	800ad34 <HAL_RCC_OscConfig+0x444>
 800ad52:	e03d      	b.n	800add0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d107      	bne.n	800ad6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e038      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
 800ad60:	40023800 	.word	0x40023800
 800ad64:	40007000 	.word	0x40007000
 800ad68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ad6c:	4b1b      	ldr	r3, [pc, #108]	; (800addc <HAL_RCC_OscConfig+0x4ec>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d028      	beq.n	800adcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d121      	bne.n	800adcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d11a      	bne.n	800adcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ada2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d111      	bne.n	800adcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb2:	085b      	lsrs	r3, r3, #1
 800adb4:	3b01      	subs	r3, #1
 800adb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800adb8:	429a      	cmp	r2, r3
 800adba:	d107      	bne.n	800adcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800adc8:	429a      	cmp	r2, r3
 800adca:	d001      	beq.n	800add0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e000      	b.n	800add2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	40023800 	.word	0x40023800

0800ade0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e0cc      	b.n	800af8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800adf4:	4b68      	ldr	r3, [pc, #416]	; (800af98 <HAL_RCC_ClockConfig+0x1b8>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d90c      	bls.n	800ae1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae02:	4b65      	ldr	r3, [pc, #404]	; (800af98 <HAL_RCC_ClockConfig+0x1b8>)
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae0a:	4b63      	ldr	r3, [pc, #396]	; (800af98 <HAL_RCC_ClockConfig+0x1b8>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d001      	beq.n	800ae1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e0b8      	b.n	800af8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d020      	beq.n	800ae6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae34:	4b59      	ldr	r3, [pc, #356]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	4a58      	ldr	r2, [pc, #352]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800ae3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0308 	and.w	r3, r3, #8
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae4c:	4b53      	ldr	r3, [pc, #332]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	4a52      	ldr	r2, [pc, #328]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800ae52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae58:	4b50      	ldr	r3, [pc, #320]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	494d      	ldr	r1, [pc, #308]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d044      	beq.n	800af00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d107      	bne.n	800ae8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae7e:	4b47      	ldr	r3, [pc, #284]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d119      	bne.n	800aebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e07f      	b.n	800af8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d003      	beq.n	800ae9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d107      	bne.n	800aeae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae9e:	4b3f      	ldr	r3, [pc, #252]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d109      	bne.n	800aebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e06f      	b.n	800af8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeae:	4b3b      	ldr	r3, [pc, #236]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e067      	b.n	800af8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aebe:	4b37      	ldr	r3, [pc, #220]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f023 0203 	bic.w	r2, r3, #3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	4934      	ldr	r1, [pc, #208]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800aecc:	4313      	orrs	r3, r2
 800aece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aed0:	f7fc fa4a 	bl	8007368 <HAL_GetTick>
 800aed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aed6:	e00a      	b.n	800aeee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aed8:	f7fc fa46 	bl	8007368 <HAL_GetTick>
 800aedc:	4602      	mov	r2, r0
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d901      	bls.n	800aeee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e04f      	b.n	800af8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeee:	4b2b      	ldr	r3, [pc, #172]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	f003 020c 	and.w	r2, r3, #12
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d1eb      	bne.n	800aed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af00:	4b25      	ldr	r3, [pc, #148]	; (800af98 <HAL_RCC_ClockConfig+0x1b8>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0307 	and.w	r3, r3, #7
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d20c      	bcs.n	800af28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af0e:	4b22      	ldr	r3, [pc, #136]	; (800af98 <HAL_RCC_ClockConfig+0x1b8>)
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	b2d2      	uxtb	r2, r2
 800af14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af16:	4b20      	ldr	r3, [pc, #128]	; (800af98 <HAL_RCC_ClockConfig+0x1b8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0307 	and.w	r3, r3, #7
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d001      	beq.n	800af28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e032      	b.n	800af8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0304 	and.w	r3, r3, #4
 800af30:	2b00      	cmp	r3, #0
 800af32:	d008      	beq.n	800af46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af34:	4b19      	ldr	r3, [pc, #100]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	4916      	ldr	r1, [pc, #88]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800af42:	4313      	orrs	r3, r2
 800af44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 0308 	and.w	r3, r3, #8
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d009      	beq.n	800af66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af52:	4b12      	ldr	r3, [pc, #72]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	490e      	ldr	r1, [pc, #56]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800af62:	4313      	orrs	r3, r2
 800af64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af66:	f000 f821 	bl	800afac <HAL_RCC_GetSysClockFreq>
 800af6a:	4602      	mov	r2, r0
 800af6c:	4b0b      	ldr	r3, [pc, #44]	; (800af9c <HAL_RCC_ClockConfig+0x1bc>)
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	091b      	lsrs	r3, r3, #4
 800af72:	f003 030f 	and.w	r3, r3, #15
 800af76:	490a      	ldr	r1, [pc, #40]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800af78:	5ccb      	ldrb	r3, [r1, r3]
 800af7a:	fa22 f303 	lsr.w	r3, r2, r3
 800af7e:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800af80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800af82:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <HAL_RCC_ClockConfig+0x1c8>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4618      	mov	r0, r3
 800af88:	f7fc f9aa 	bl	80072e0 <HAL_InitTick>

  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	40023c00 	.word	0x40023c00
 800af9c:	40023800 	.word	0x40023800
 800afa0:	08010898 	.word	0x08010898
 800afa4:	20000154 	.word	0x20000154
 800afa8:	20000180 	.word	0x20000180

0800afac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afb0:	b094      	sub	sp, #80	; 0x50
 800afb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	647b      	str	r3, [r7, #68]	; 0x44
 800afb8:	2300      	movs	r3, #0
 800afba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afbc:	2300      	movs	r3, #0
 800afbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afc4:	4b79      	ldr	r3, [pc, #484]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x200>)
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f003 030c 	and.w	r3, r3, #12
 800afcc:	2b08      	cmp	r3, #8
 800afce:	d00d      	beq.n	800afec <HAL_RCC_GetSysClockFreq+0x40>
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	f200 80e1 	bhi.w	800b198 <HAL_RCC_GetSysClockFreq+0x1ec>
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <HAL_RCC_GetSysClockFreq+0x34>
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d003      	beq.n	800afe6 <HAL_RCC_GetSysClockFreq+0x3a>
 800afde:	e0db      	b.n	800b198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800afe0:	4b73      	ldr	r3, [pc, #460]	; (800b1b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800afe2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800afe4:	e0db      	b.n	800b19e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800afe6:	4b73      	ldr	r3, [pc, #460]	; (800b1b4 <HAL_RCC_GetSysClockFreq+0x208>)
 800afe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800afea:	e0d8      	b.n	800b19e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800afec:	4b6f      	ldr	r3, [pc, #444]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x200>)
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aff4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aff6:	4b6d      	ldr	r3, [pc, #436]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x200>)
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d063      	beq.n	800b0ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b002:	4b6a      	ldr	r3, [pc, #424]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	099b      	lsrs	r3, r3, #6
 800b008:	2200      	movs	r2, #0
 800b00a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b00c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b014:	633b      	str	r3, [r7, #48]	; 0x30
 800b016:	2300      	movs	r3, #0
 800b018:	637b      	str	r3, [r7, #52]	; 0x34
 800b01a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b01e:	4622      	mov	r2, r4
 800b020:	462b      	mov	r3, r5
 800b022:	f04f 0000 	mov.w	r0, #0
 800b026:	f04f 0100 	mov.w	r1, #0
 800b02a:	0159      	lsls	r1, r3, #5
 800b02c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b030:	0150      	lsls	r0, r2, #5
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4621      	mov	r1, r4
 800b038:	1a51      	subs	r1, r2, r1
 800b03a:	6139      	str	r1, [r7, #16]
 800b03c:	4629      	mov	r1, r5
 800b03e:	eb63 0301 	sbc.w	r3, r3, r1
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	f04f 0200 	mov.w	r2, #0
 800b048:	f04f 0300 	mov.w	r3, #0
 800b04c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b050:	4659      	mov	r1, fp
 800b052:	018b      	lsls	r3, r1, #6
 800b054:	4651      	mov	r1, sl
 800b056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b05a:	4651      	mov	r1, sl
 800b05c:	018a      	lsls	r2, r1, #6
 800b05e:	4651      	mov	r1, sl
 800b060:	ebb2 0801 	subs.w	r8, r2, r1
 800b064:	4659      	mov	r1, fp
 800b066:	eb63 0901 	sbc.w	r9, r3, r1
 800b06a:	f04f 0200 	mov.w	r2, #0
 800b06e:	f04f 0300 	mov.w	r3, #0
 800b072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b07a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b07e:	4690      	mov	r8, r2
 800b080:	4699      	mov	r9, r3
 800b082:	4623      	mov	r3, r4
 800b084:	eb18 0303 	adds.w	r3, r8, r3
 800b088:	60bb      	str	r3, [r7, #8]
 800b08a:	462b      	mov	r3, r5
 800b08c:	eb49 0303 	adc.w	r3, r9, r3
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	f04f 0200 	mov.w	r2, #0
 800b096:	f04f 0300 	mov.w	r3, #0
 800b09a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b09e:	4629      	mov	r1, r5
 800b0a0:	024b      	lsls	r3, r1, #9
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	024a      	lsls	r2, r1, #9
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0bc:	f7f5 f896 	bl	80001ec <__aeabi_uldivmod>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0c8:	e058      	b.n	800b17c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0ca:	4b38      	ldr	r3, [pc, #224]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	099b      	lsrs	r3, r3, #6
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b0da:	623b      	str	r3, [r7, #32]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b0e4:	4642      	mov	r2, r8
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	f04f 0000 	mov.w	r0, #0
 800b0ec:	f04f 0100 	mov.w	r1, #0
 800b0f0:	0159      	lsls	r1, r3, #5
 800b0f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b0f6:	0150      	lsls	r0, r2, #5
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4641      	mov	r1, r8
 800b0fe:	ebb2 0a01 	subs.w	sl, r2, r1
 800b102:	4649      	mov	r1, r9
 800b104:	eb63 0b01 	sbc.w	fp, r3, r1
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f04f 0300 	mov.w	r3, #0
 800b110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b11c:	ebb2 040a 	subs.w	r4, r2, sl
 800b120:	eb63 050b 	sbc.w	r5, r3, fp
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	f04f 0300 	mov.w	r3, #0
 800b12c:	00eb      	lsls	r3, r5, #3
 800b12e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b132:	00e2      	lsls	r2, r4, #3
 800b134:	4614      	mov	r4, r2
 800b136:	461d      	mov	r5, r3
 800b138:	4643      	mov	r3, r8
 800b13a:	18e3      	adds	r3, r4, r3
 800b13c:	603b      	str	r3, [r7, #0]
 800b13e:	464b      	mov	r3, r9
 800b140:	eb45 0303 	adc.w	r3, r5, r3
 800b144:	607b      	str	r3, [r7, #4]
 800b146:	f04f 0200 	mov.w	r2, #0
 800b14a:	f04f 0300 	mov.w	r3, #0
 800b14e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b152:	4629      	mov	r1, r5
 800b154:	028b      	lsls	r3, r1, #10
 800b156:	4621      	mov	r1, r4
 800b158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b15c:	4621      	mov	r1, r4
 800b15e:	028a      	lsls	r2, r1, #10
 800b160:	4610      	mov	r0, r2
 800b162:	4619      	mov	r1, r3
 800b164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b166:	2200      	movs	r2, #0
 800b168:	61bb      	str	r3, [r7, #24]
 800b16a:	61fa      	str	r2, [r7, #28]
 800b16c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b170:	f7f5 f83c 	bl	80001ec <__aeabi_uldivmod>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4613      	mov	r3, r2
 800b17a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b17c:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <HAL_RCC_GetSysClockFreq+0x200>)
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	0c1b      	lsrs	r3, r3, #16
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	3301      	adds	r3, #1
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b18c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b190:	fbb2 f3f3 	udiv	r3, r2, r3
 800b194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b196:	e002      	b.n	800b19e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b198:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800b19a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b19c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b19e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3750      	adds	r7, #80	; 0x50
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40023800 	.word	0x40023800
 800b1b0:	00f42400 	.word	0x00f42400
 800b1b4:	007a1200 	.word	0x007a1200

0800b1b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b1bc:	4b03      	ldr	r3, [pc, #12]	; (800b1cc <HAL_RCC_GetHCLKFreq+0x14>)
 800b1be:	681b      	ldr	r3, [r3, #0]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	20000154 	.word	0x20000154

0800b1d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b1d4:	f7ff fff0 	bl	800b1b8 <HAL_RCC_GetHCLKFreq>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	0a9b      	lsrs	r3, r3, #10
 800b1e0:	f003 0307 	and.w	r3, r3, #7
 800b1e4:	4903      	ldr	r1, [pc, #12]	; (800b1f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1e6:	5ccb      	ldrb	r3, [r1, r3]
 800b1e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	40023800 	.word	0x40023800
 800b1f4:	080108a8 	.word	0x080108a8

0800b1f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b1fc:	f7ff ffdc 	bl	800b1b8 <HAL_RCC_GetHCLKFreq>
 800b200:	4602      	mov	r2, r0
 800b202:	4b05      	ldr	r3, [pc, #20]	; (800b218 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	0b5b      	lsrs	r3, r3, #13
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	4903      	ldr	r1, [pc, #12]	; (800b21c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b20e:	5ccb      	ldrb	r3, [r1, r3]
 800b210:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b214:	4618      	mov	r0, r3
 800b216:	bd80      	pop	{r7, pc}
 800b218:	40023800 	.word	0x40023800
 800b21c:	080108a8 	.word	0x080108a8

0800b220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e07b      	b.n	800b32a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	2b00      	cmp	r3, #0
 800b238:	d108      	bne.n	800b24c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b242:	d009      	beq.n	800b258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	61da      	str	r2, [r3, #28]
 800b24a:	e005      	b.n	800b258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7fa fe0e 	bl	8005e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b28e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2aa:	431a      	orrs	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	f003 0302 	and.w	r3, r3, #2
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a1b      	ldr	r3, [r3, #32]
 800b2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2dc:	ea42 0103 	orr.w	r1, r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	0c1b      	lsrs	r3, r3, #16
 800b2f6:	f003 0104 	and.w	r1, r3, #4
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fe:	f003 0210 	and.w	r2, r3, #16
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	69da      	ldr	r2, [r3, #28]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b318:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b088      	sub	sp, #32
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	603b      	str	r3, [r7, #0]
 800b33e:	4613      	mov	r3, r2
 800b340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d101      	bne.n	800b354 <HAL_SPI_Transmit+0x22>
 800b350:	2302      	movs	r3, #2
 800b352:	e126      	b.n	800b5a2 <HAL_SPI_Transmit+0x270>
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b35c:	f7fc f804 	bl	8007368 <HAL_GetTick>
 800b360:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d002      	beq.n	800b378 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b372:	2302      	movs	r3, #2
 800b374:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b376:	e10b      	b.n	800b590 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <HAL_SPI_Transmit+0x52>
 800b37e:	88fb      	ldrh	r3, [r7, #6]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b388:	e102      	b.n	800b590 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2203      	movs	r2, #3
 800b38e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	88fa      	ldrh	r2, [r7, #6]
 800b3a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	88fa      	ldrh	r2, [r7, #6]
 800b3a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3d0:	d10f      	bne.n	800b3f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fc:	2b40      	cmp	r3, #64	; 0x40
 800b3fe:	d007      	beq.n	800b410 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b40e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b418:	d14b      	bne.n	800b4b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <HAL_SPI_Transmit+0xf6>
 800b422:	8afb      	ldrh	r3, [r7, #22]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d13e      	bne.n	800b4a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	881a      	ldrh	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b438:	1c9a      	adds	r2, r3, #2
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b442:	b29b      	uxth	r3, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	b29a      	uxth	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b44c:	e02b      	b.n	800b4a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f003 0302 	and.w	r3, r3, #2
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d112      	bne.n	800b482 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b460:	881a      	ldrh	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46c:	1c9a      	adds	r2, r3, #2
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b476:	b29b      	uxth	r3, r3
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b480:	e011      	b.n	800b4a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b482:	f7fb ff71 	bl	8007368 <HAL_GetTick>
 800b486:	4602      	mov	r2, r0
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d803      	bhi.n	800b49a <HAL_SPI_Transmit+0x168>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b498:	d102      	bne.n	800b4a0 <HAL_SPI_Transmit+0x16e>
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d102      	bne.n	800b4a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b4a4:	e074      	b.n	800b590 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1ce      	bne.n	800b44e <HAL_SPI_Transmit+0x11c>
 800b4b0:	e04c      	b.n	800b54c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <HAL_SPI_Transmit+0x18e>
 800b4ba:	8afb      	ldrh	r3, [r7, #22]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d140      	bne.n	800b542 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	330c      	adds	r3, #12
 800b4ca:	7812      	ldrb	r2, [r2, #0]
 800b4cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b4e6:	e02c      	b.n	800b542 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	f003 0302 	and.w	r3, r3, #2
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d113      	bne.n	800b51e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	330c      	adds	r3, #12
 800b500:	7812      	ldrb	r2, [r2, #0]
 800b502:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b508:	1c5a      	adds	r2, r3, #1
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b512:	b29b      	uxth	r3, r3
 800b514:	3b01      	subs	r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	86da      	strh	r2, [r3, #54]	; 0x36
 800b51c:	e011      	b.n	800b542 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b51e:	f7fb ff23 	bl	8007368 <HAL_GetTick>
 800b522:	4602      	mov	r2, r0
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d803      	bhi.n	800b536 <HAL_SPI_Transmit+0x204>
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b534:	d102      	bne.n	800b53c <HAL_SPI_Transmit+0x20a>
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b540:	e026      	b.n	800b590 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b546:	b29b      	uxth	r3, r3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1cd      	bne.n	800b4e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f000 fce9 	bl	800bf28 <SPI_EndRxTxTransaction>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2220      	movs	r2, #32
 800b560:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10a      	bne.n	800b580 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b56a:	2300      	movs	r3, #0
 800b56c:	613b      	str	r3, [r7, #16]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	613b      	str	r3, [r7, #16]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	613b      	str	r3, [r7, #16]
 800b57e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	77fb      	strb	r3, [r7, #31]
 800b58c:	e000      	b.n	800b590 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b58e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b5a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3720      	adds	r7, #32
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b088      	sub	sp, #32
 800b5ae:	af02      	add	r7, sp, #8
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	603b      	str	r3, [r7, #0]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5c6:	d112      	bne.n	800b5ee <HAL_SPI_Receive+0x44>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10e      	bne.n	800b5ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b5d8:	88fa      	ldrh	r2, [r7, #6]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f8f1 	bl	800b7cc <HAL_SPI_TransmitReceive>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	e0ea      	b.n	800b7c4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d101      	bne.n	800b5fc <HAL_SPI_Receive+0x52>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e0e3      	b.n	800b7c4 <HAL_SPI_Receive+0x21a>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b604:	f7fb feb0 	bl	8007368 <HAL_GetTick>
 800b608:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b01      	cmp	r3, #1
 800b614:	d002      	beq.n	800b61c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b616:	2302      	movs	r3, #2
 800b618:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b61a:	e0ca      	b.n	800b7b2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <HAL_SPI_Receive+0x7e>
 800b622:	88fb      	ldrh	r3, [r7, #6]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d102      	bne.n	800b62e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b62c:	e0c1      	b.n	800b7b2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2204      	movs	r2, #4
 800b632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	88fa      	ldrh	r2, [r7, #6]
 800b646:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	88fa      	ldrh	r2, [r7, #6]
 800b64c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b674:	d10f      	bne.n	800b696 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b684:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b694:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a0:	2b40      	cmp	r3, #64	; 0x40
 800b6a2:	d007      	beq.n	800b6b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d162      	bne.n	800b782 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b6bc:	e02e      	b.n	800b71c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d115      	bne.n	800b6f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f103 020c 	add.w	r2, r3, #12
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d8:	7812      	ldrb	r2, [r2, #0]
 800b6da:	b2d2      	uxtb	r2, r2
 800b6dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b6f6:	e011      	b.n	800b71c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6f8:	f7fb fe36 	bl	8007368 <HAL_GetTick>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d803      	bhi.n	800b710 <HAL_SPI_Receive+0x166>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70e:	d102      	bne.n	800b716 <HAL_SPI_Receive+0x16c>
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d102      	bne.n	800b71c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b71a:	e04a      	b.n	800b7b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b720:	b29b      	uxth	r3, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1cb      	bne.n	800b6be <HAL_SPI_Receive+0x114>
 800b726:	e031      	b.n	800b78c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b01      	cmp	r3, #1
 800b734:	d113      	bne.n	800b75e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68da      	ldr	r2, [r3, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b740:	b292      	uxth	r2, r2
 800b742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b748:	1c9a      	adds	r2, r3, #2
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b752:	b29b      	uxth	r3, r3
 800b754:	3b01      	subs	r3, #1
 800b756:	b29a      	uxth	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b75c:	e011      	b.n	800b782 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b75e:	f7fb fe03 	bl	8007368 <HAL_GetTick>
 800b762:	4602      	mov	r2, r0
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d803      	bhi.n	800b776 <HAL_SPI_Receive+0x1cc>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b774:	d102      	bne.n	800b77c <HAL_SPI_Receive+0x1d2>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d102      	bne.n	800b782 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b780:	e017      	b.n	800b7b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b786:	b29b      	uxth	r3, r3
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1cd      	bne.n	800b728 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 fb63 	bl	800be5c <SPI_EndRxTransaction>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	75fb      	strb	r3, [r7, #23]
 800b7ae:	e000      	b.n	800b7b2 <HAL_SPI_Receive+0x208>
  }

error :
 800b7b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3718      	adds	r7, #24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08c      	sub	sp, #48	; 0x30
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d101      	bne.n	800b7f2 <HAL_SPI_TransmitReceive+0x26>
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	e18a      	b.n	800bb08 <HAL_SPI_TransmitReceive+0x33c>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7fa:	f7fb fdb5 	bl	8007368 <HAL_GetTick>
 800b7fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b810:	887b      	ldrh	r3, [r7, #2]
 800b812:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d00f      	beq.n	800b83c <HAL_SPI_TransmitReceive+0x70>
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b822:	d107      	bne.n	800b834 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d103      	bne.n	800b834 <HAL_SPI_TransmitReceive+0x68>
 800b82c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b830:	2b04      	cmp	r3, #4
 800b832:	d003      	beq.n	800b83c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b834:	2302      	movs	r3, #2
 800b836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b83a:	e15b      	b.n	800baf4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d005      	beq.n	800b84e <HAL_SPI_TransmitReceive+0x82>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <HAL_SPI_TransmitReceive+0x82>
 800b848:	887b      	ldrh	r3, [r7, #2]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d103      	bne.n	800b856 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b854:	e14e      	b.n	800baf4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d003      	beq.n	800b86a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2205      	movs	r2, #5
 800b866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	887a      	ldrh	r2, [r7, #2]
 800b87a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	887a      	ldrh	r2, [r7, #2]
 800b880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	887a      	ldrh	r2, [r7, #2]
 800b88c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	887a      	ldrh	r2, [r7, #2]
 800b892:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8aa:	2b40      	cmp	r3, #64	; 0x40
 800b8ac:	d007      	beq.n	800b8be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8c6:	d178      	bne.n	800b9ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <HAL_SPI_TransmitReceive+0x10a>
 800b8d0:	8b7b      	ldrh	r3, [r7, #26]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d166      	bne.n	800b9a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8da:	881a      	ldrh	r2, [r3, #0]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e6:	1c9a      	adds	r2, r3, #2
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8fa:	e053      	b.n	800b9a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f003 0302 	and.w	r3, r3, #2
 800b906:	2b02      	cmp	r3, #2
 800b908:	d11b      	bne.n	800b942 <HAL_SPI_TransmitReceive+0x176>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b90e:	b29b      	uxth	r3, r3
 800b910:	2b00      	cmp	r3, #0
 800b912:	d016      	beq.n	800b942 <HAL_SPI_TransmitReceive+0x176>
 800b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b916:	2b01      	cmp	r3, #1
 800b918:	d113      	bne.n	800b942 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b91e:	881a      	ldrh	r2, [r3, #0]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92a:	1c9a      	adds	r2, r3, #2
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b934:	b29b      	uxth	r3, r3
 800b936:	3b01      	subs	r3, #1
 800b938:	b29a      	uxth	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b93e:	2300      	movs	r3, #0
 800b940:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d119      	bne.n	800b984 <HAL_SPI_TransmitReceive+0x1b8>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b954:	b29b      	uxth	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d014      	beq.n	800b984 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68da      	ldr	r2, [r3, #12]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b964:	b292      	uxth	r2, r2
 800b966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96c:	1c9a      	adds	r2, r3, #2
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b976:	b29b      	uxth	r3, r3
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b980:	2301      	movs	r3, #1
 800b982:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b984:	f7fb fcf0 	bl	8007368 <HAL_GetTick>
 800b988:	4602      	mov	r2, r0
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b990:	429a      	cmp	r2, r3
 800b992:	d807      	bhi.n	800b9a4 <HAL_SPI_TransmitReceive+0x1d8>
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99a:	d003      	beq.n	800b9a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b9a2:	e0a7      	b.n	800baf4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1a6      	bne.n	800b8fc <HAL_SPI_TransmitReceive+0x130>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d1a1      	bne.n	800b8fc <HAL_SPI_TransmitReceive+0x130>
 800b9b8:	e07c      	b.n	800bab4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d002      	beq.n	800b9c8 <HAL_SPI_TransmitReceive+0x1fc>
 800b9c2:	8b7b      	ldrh	r3, [r7, #26]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d16b      	bne.n	800baa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	330c      	adds	r3, #12
 800b9d2:	7812      	ldrb	r2, [r2, #0]
 800b9d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9ee:	e057      	b.n	800baa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f003 0302 	and.w	r3, r3, #2
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d11c      	bne.n	800ba38 <HAL_SPI_TransmitReceive+0x26c>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d017      	beq.n	800ba38 <HAL_SPI_TransmitReceive+0x26c>
 800ba08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d114      	bne.n	800ba38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	330c      	adds	r3, #12
 800ba18:	7812      	ldrb	r2, [r2, #0]
 800ba1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba34:	2300      	movs	r3, #0
 800ba36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d119      	bne.n	800ba7a <HAL_SPI_TransmitReceive+0x2ae>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d014      	beq.n	800ba7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68da      	ldr	r2, [r3, #12]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5a:	b2d2      	uxtb	r2, r2
 800ba5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba76:	2301      	movs	r3, #1
 800ba78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ba7a:	f7fb fc75 	bl	8007368 <HAL_GetTick>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d803      	bhi.n	800ba92 <HAL_SPI_TransmitReceive+0x2c6>
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba90:	d102      	bne.n	800ba98 <HAL_SPI_TransmitReceive+0x2cc>
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d103      	bne.n	800baa0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba9e:	e029      	b.n	800baf4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1a2      	bne.n	800b9f0 <HAL_SPI_TransmitReceive+0x224>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baae:	b29b      	uxth	r3, r3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d19d      	bne.n	800b9f0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 fa35 	bl	800bf28 <SPI_EndRxTxTransaction>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d006      	beq.n	800bad2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2220      	movs	r2, #32
 800bace:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bad0:	e010      	b.n	800baf4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10b      	bne.n	800baf2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bada:	2300      	movs	r3, #0
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	617b      	str	r3, [r7, #20]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	617b      	str	r3, [r7, #20]
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	e000      	b.n	800baf4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800baf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3730      	adds	r7, #48	; 0x30
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b088      	sub	sp, #32
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	099b      	lsrs	r3, r3, #6
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10f      	bne.n	800bb54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	099b      	lsrs	r3, r3, #6
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d004      	beq.n	800bb54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	4798      	blx	r3
    return;
 800bb52:	e0d7      	b.n	800bd04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	085b      	lsrs	r3, r3, #1
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00a      	beq.n	800bb76 <HAL_SPI_IRQHandler+0x66>
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	09db      	lsrs	r3, r3, #7
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	4798      	blx	r3
    return;
 800bb74:	e0c6      	b.n	800bd04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	095b      	lsrs	r3, r3, #5
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10c      	bne.n	800bb9c <HAL_SPI_IRQHandler+0x8c>
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	099b      	lsrs	r3, r3, #6
 800bb86:	f003 0301 	and.w	r3, r3, #1
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d106      	bne.n	800bb9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	0a1b      	lsrs	r3, r3, #8
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 80b4 	beq.w	800bd04 <HAL_SPI_IRQHandler+0x1f4>
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	095b      	lsrs	r3, r3, #5
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 80ad 	beq.w	800bd04 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	099b      	lsrs	r3, r3, #6
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d023      	beq.n	800bbfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	2b03      	cmp	r3, #3
 800bbc0:	d011      	beq.n	800bbe6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc6:	f043 0204 	orr.w	r2, r3, #4
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbce:	2300      	movs	r3, #0
 800bbd0:	617b      	str	r3, [r7, #20]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	e00b      	b.n	800bbfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	613b      	str	r3, [r7, #16]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	613b      	str	r3, [r7, #16]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	613b      	str	r3, [r7, #16]
 800bbfa:	693b      	ldr	r3, [r7, #16]
        return;
 800bbfc:	e082      	b.n	800bd04 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	095b      	lsrs	r3, r3, #5
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d014      	beq.n	800bc34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0e:	f043 0201 	orr.w	r2, r3, #1
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	0a1b      	lsrs	r3, r3, #8
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00c      	beq.n	800bc5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc44:	f043 0208 	orr.w	r2, r3, #8
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60bb      	str	r3, [r7, #8]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	60bb      	str	r3, [r7, #8]
 800bc58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d04f      	beq.n	800bd02 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	f003 0302 	and.w	r3, r3, #2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d104      	bne.n	800bc8e <HAL_SPI_IRQHandler+0x17e>
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d034      	beq.n	800bcf8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f022 0203 	bic.w	r2, r2, #3
 800bc9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d011      	beq.n	800bcca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcaa:	4a18      	ldr	r2, [pc, #96]	; (800bd0c <HAL_SPI_IRQHandler+0x1fc>)
 800bcac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fb fd48 	bl	8007748 <HAL_DMA_Abort_IT>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d005      	beq.n	800bcca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d016      	beq.n	800bd00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd6:	4a0d      	ldr	r2, [pc, #52]	; (800bd0c <HAL_SPI_IRQHandler+0x1fc>)
 800bcd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fb fd32 	bl	8007748 <HAL_DMA_Abort_IT>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00a      	beq.n	800bd00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bcf6:	e003      	b.n	800bd00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f809 	bl	800bd10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bcfe:	e000      	b.n	800bd02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bd00:	bf00      	nop
    return;
 800bd02:	bf00      	nop
  }
}
 800bd04:	3720      	adds	r7, #32
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	0800bd25 	.word	0x0800bd25

0800bd10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f7ff ffe6 	bl	800bd10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd44:	bf00      	nop
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b088      	sub	sp, #32
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bd5c:	f7fb fb04 	bl	8007368 <HAL_GetTick>
 800bd60:	4602      	mov	r2, r0
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	1a9b      	subs	r3, r3, r2
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	4413      	add	r3, r2
 800bd6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bd6c:	f7fb fafc 	bl	8007368 <HAL_GetTick>
 800bd70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd72:	4b39      	ldr	r3, [pc, #228]	; (800be58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	015b      	lsls	r3, r3, #5
 800bd78:	0d1b      	lsrs	r3, r3, #20
 800bd7a:	69fa      	ldr	r2, [r7, #28]
 800bd7c:	fb02 f303 	mul.w	r3, r2, r3
 800bd80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd82:	e054      	b.n	800be2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8a:	d050      	beq.n	800be2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd8c:	f7fb faec 	bl	8007368 <HAL_GetTick>
 800bd90:	4602      	mov	r2, r0
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	69fa      	ldr	r2, [r7, #28]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d902      	bls.n	800bda2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d13d      	bne.n	800be1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bdb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdba:	d111      	bne.n	800bde0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdc4:	d004      	beq.n	800bdd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdce:	d107      	bne.n	800bde0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bde8:	d10f      	bne.n	800be0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bdf8:	601a      	str	r2, [r3, #0]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e017      	b.n	800be4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800be24:	2300      	movs	r3, #0
 800be26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	3b01      	subs	r3, #1
 800be2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	689a      	ldr	r2, [r3, #8]
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	4013      	ands	r3, r2
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	bf0c      	ite	eq
 800be3e:	2301      	moveq	r3, #1
 800be40:	2300      	movne	r3, #0
 800be42:	b2db      	uxtb	r3, r3
 800be44:	461a      	mov	r2, r3
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d19b      	bne.n	800bd84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3720      	adds	r7, #32
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20000154 	.word	0x20000154

0800be5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be70:	d111      	bne.n	800be96 <SPI_EndRxTransaction+0x3a>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be7a:	d004      	beq.n	800be86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be84:	d107      	bne.n	800be96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be9e:	d12a      	bne.n	800bef6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bea8:	d012      	beq.n	800bed0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2200      	movs	r2, #0
 800beb2:	2180      	movs	r1, #128	; 0x80
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f7ff ff49 	bl	800bd4c <SPI_WaitFlagStateUntilTimeout>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d02d      	beq.n	800bf1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec4:	f043 0220 	orr.w	r2, r3, #32
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800becc:	2303      	movs	r3, #3
 800bece:	e026      	b.n	800bf1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2200      	movs	r2, #0
 800bed8:	2101      	movs	r1, #1
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f7ff ff36 	bl	800bd4c <SPI_WaitFlagStateUntilTimeout>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d01a      	beq.n	800bf1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beea:	f043 0220 	orr.w	r2, r3, #32
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	e013      	b.n	800bf1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2200      	movs	r2, #0
 800befe:	2101      	movs	r1, #1
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f7ff ff23 	bl	800bd4c <SPI_WaitFlagStateUntilTimeout>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf10:	f043 0220 	orr.w	r2, r3, #32
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e000      	b.n	800bf1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
	...

0800bf28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b088      	sub	sp, #32
 800bf2c:	af02      	add	r7, sp, #8
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bf34:	4b1b      	ldr	r3, [pc, #108]	; (800bfa4 <SPI_EndRxTxTransaction+0x7c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a1b      	ldr	r2, [pc, #108]	; (800bfa8 <SPI_EndRxTxTransaction+0x80>)
 800bf3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf3e:	0d5b      	lsrs	r3, r3, #21
 800bf40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf44:	fb02 f303 	mul.w	r3, r2, r3
 800bf48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf52:	d112      	bne.n	800bf7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	2180      	movs	r1, #128	; 0x80
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7ff fef4 	bl	800bd4c <SPI_WaitFlagStateUntilTimeout>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d016      	beq.n	800bf98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6e:	f043 0220 	orr.w	r2, r3, #32
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e00f      	b.n	800bf9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00a      	beq.n	800bf96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	3b01      	subs	r3, #1
 800bf84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf90:	2b80      	cmp	r3, #128	; 0x80
 800bf92:	d0f2      	beq.n	800bf7a <SPI_EndRxTxTransaction+0x52>
 800bf94:	e000      	b.n	800bf98 <SPI_EndRxTxTransaction+0x70>
        break;
 800bf96:	bf00      	nop
  }

  return HAL_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20000154 	.word	0x20000154
 800bfa8:	165e9f81 	.word	0x165e9f81

0800bfac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e041      	b.n	800c042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d106      	bne.n	800bfd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7fa fdac 	bl	8006b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3304      	adds	r3, #4
 800bfe8:	4619      	mov	r1, r3
 800bfea:	4610      	mov	r0, r2
 800bfec:	f000 fae0 	bl	800c5b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
	...

0800c04c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d001      	beq.n	800c064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e04e      	b.n	800c102 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2202      	movs	r2, #2
 800c068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f042 0201 	orr.w	r2, r2, #1
 800c07a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a23      	ldr	r2, [pc, #140]	; (800c110 <HAL_TIM_Base_Start_IT+0xc4>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d022      	beq.n	800c0cc <HAL_TIM_Base_Start_IT+0x80>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c08e:	d01d      	beq.n	800c0cc <HAL_TIM_Base_Start_IT+0x80>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a1f      	ldr	r2, [pc, #124]	; (800c114 <HAL_TIM_Base_Start_IT+0xc8>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d018      	beq.n	800c0cc <HAL_TIM_Base_Start_IT+0x80>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a1e      	ldr	r2, [pc, #120]	; (800c118 <HAL_TIM_Base_Start_IT+0xcc>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d013      	beq.n	800c0cc <HAL_TIM_Base_Start_IT+0x80>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a1c      	ldr	r2, [pc, #112]	; (800c11c <HAL_TIM_Base_Start_IT+0xd0>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d00e      	beq.n	800c0cc <HAL_TIM_Base_Start_IT+0x80>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a1b      	ldr	r2, [pc, #108]	; (800c120 <HAL_TIM_Base_Start_IT+0xd4>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d009      	beq.n	800c0cc <HAL_TIM_Base_Start_IT+0x80>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a19      	ldr	r2, [pc, #100]	; (800c124 <HAL_TIM_Base_Start_IT+0xd8>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d004      	beq.n	800c0cc <HAL_TIM_Base_Start_IT+0x80>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a18      	ldr	r2, [pc, #96]	; (800c128 <HAL_TIM_Base_Start_IT+0xdc>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d111      	bne.n	800c0f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f003 0307 	and.w	r3, r3, #7
 800c0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b06      	cmp	r3, #6
 800c0dc:	d010      	beq.n	800c100 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f042 0201 	orr.w	r2, r2, #1
 800c0ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ee:	e007      	b.n	800c100 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f042 0201 	orr.w	r2, r2, #1
 800c0fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	40010000 	.word	0x40010000
 800c114:	40000400 	.word	0x40000400
 800c118:	40000800 	.word	0x40000800
 800c11c:	40000c00 	.word	0x40000c00
 800c120:	40010400 	.word	0x40010400
 800c124:	40014000 	.word	0x40014000
 800c128:	40001800 	.word	0x40001800

0800c12c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	e041      	b.n	800c1c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c144:	b2db      	uxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d106      	bne.n	800c158 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7fa fcca 	bl	8006aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2202      	movs	r2, #2
 800c15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	3304      	adds	r3, #4
 800c168:	4619      	mov	r1, r3
 800c16a:	4610      	mov	r0, r2
 800c16c:	f000 fa20 	bl	800c5b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	f003 0302 	and.w	r3, r3, #2
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d122      	bne.n	800c226 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	f003 0302 	and.w	r3, r3, #2
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d11b      	bne.n	800c226 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f06f 0202 	mvn.w	r2, #2
 800c1f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	f003 0303 	and.w	r3, r3, #3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f9b1 	bl	800c574 <HAL_TIM_IC_CaptureCallback>
 800c212:	e005      	b.n	800c220 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f9a3 	bl	800c560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f9b4 	bl	800c588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	f003 0304 	and.w	r3, r3, #4
 800c230:	2b04      	cmp	r3, #4
 800c232:	d122      	bne.n	800c27a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	f003 0304 	and.w	r3, r3, #4
 800c23e:	2b04      	cmp	r3, #4
 800c240:	d11b      	bne.n	800c27a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f06f 0204 	mvn.w	r2, #4
 800c24a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2202      	movs	r2, #2
 800c250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	699b      	ldr	r3, [r3, #24]
 800c258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d003      	beq.n	800c268 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f987 	bl	800c574 <HAL_TIM_IC_CaptureCallback>
 800c266:	e005      	b.n	800c274 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f979 	bl	800c560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f98a 	bl	800c588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	f003 0308 	and.w	r3, r3, #8
 800c284:	2b08      	cmp	r3, #8
 800c286:	d122      	bne.n	800c2ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	f003 0308 	and.w	r3, r3, #8
 800c292:	2b08      	cmp	r3, #8
 800c294:	d11b      	bne.n	800c2ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f06f 0208 	mvn.w	r2, #8
 800c29e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2204      	movs	r2, #4
 800c2a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	69db      	ldr	r3, [r3, #28]
 800c2ac:	f003 0303 	and.w	r3, r3, #3
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d003      	beq.n	800c2bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f95d 	bl	800c574 <HAL_TIM_IC_CaptureCallback>
 800c2ba:	e005      	b.n	800c2c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f94f 	bl	800c560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f960 	bl	800c588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	f003 0310 	and.w	r3, r3, #16
 800c2d8:	2b10      	cmp	r3, #16
 800c2da:	d122      	bne.n	800c322 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	f003 0310 	and.w	r3, r3, #16
 800c2e6:	2b10      	cmp	r3, #16
 800c2e8:	d11b      	bne.n	800c322 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f06f 0210 	mvn.w	r2, #16
 800c2f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2208      	movs	r2, #8
 800c2f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c304:	2b00      	cmp	r3, #0
 800c306:	d003      	beq.n	800c310 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f933 	bl	800c574 <HAL_TIM_IC_CaptureCallback>
 800c30e:	e005      	b.n	800c31c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f925 	bl	800c560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f936 	bl	800c588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	f003 0301 	and.w	r3, r3, #1
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d10e      	bne.n	800c34e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d107      	bne.n	800c34e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f06f 0201 	mvn.w	r2, #1
 800c346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7fa fb11 	bl	8006970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	691b      	ldr	r3, [r3, #16]
 800c354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c358:	2b80      	cmp	r3, #128	; 0x80
 800c35a:	d10e      	bne.n	800c37a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c366:	2b80      	cmp	r3, #128	; 0x80
 800c368:	d107      	bne.n	800c37a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fbf1 	bl	800cb5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c384:	2b40      	cmp	r3, #64	; 0x40
 800c386:	d10e      	bne.n	800c3a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c392:	2b40      	cmp	r3, #64	; 0x40
 800c394:	d107      	bne.n	800c3a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 f8fb 	bl	800c59c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	f003 0320 	and.w	r3, r3, #32
 800c3b0:	2b20      	cmp	r3, #32
 800c3b2:	d10e      	bne.n	800c3d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	f003 0320 	and.w	r3, r3, #32
 800c3be:	2b20      	cmp	r3, #32
 800c3c0:	d107      	bne.n	800c3d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f06f 0220 	mvn.w	r2, #32
 800c3ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fbbb 	bl	800cb48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3d2:	bf00      	nop
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
	...

0800c3dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d101      	bne.n	800c3fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	e0ae      	b.n	800c558 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b0c      	cmp	r3, #12
 800c406:	f200 809f 	bhi.w	800c548 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c40a:	a201      	add	r2, pc, #4	; (adr r2, 800c410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c410:	0800c445 	.word	0x0800c445
 800c414:	0800c549 	.word	0x0800c549
 800c418:	0800c549 	.word	0x0800c549
 800c41c:	0800c549 	.word	0x0800c549
 800c420:	0800c485 	.word	0x0800c485
 800c424:	0800c549 	.word	0x0800c549
 800c428:	0800c549 	.word	0x0800c549
 800c42c:	0800c549 	.word	0x0800c549
 800c430:	0800c4c7 	.word	0x0800c4c7
 800c434:	0800c549 	.word	0x0800c549
 800c438:	0800c549 	.word	0x0800c549
 800c43c:	0800c549 	.word	0x0800c549
 800c440:	0800c507 	.word	0x0800c507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68b9      	ldr	r1, [r7, #8]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 f950 	bl	800c6f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	699a      	ldr	r2, [r3, #24]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f042 0208 	orr.w	r2, r2, #8
 800c45e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	699a      	ldr	r2, [r3, #24]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f022 0204 	bic.w	r2, r2, #4
 800c46e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6999      	ldr	r1, [r3, #24]
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	691a      	ldr	r2, [r3, #16]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	430a      	orrs	r2, r1
 800c480:	619a      	str	r2, [r3, #24]
      break;
 800c482:	e064      	b.n	800c54e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68b9      	ldr	r1, [r7, #8]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 f9a0 	bl	800c7d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	699a      	ldr	r2, [r3, #24]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c49e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	699a      	ldr	r2, [r3, #24]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6999      	ldr	r1, [r3, #24]
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	021a      	lsls	r2, r3, #8
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	430a      	orrs	r2, r1
 800c4c2:	619a      	str	r2, [r3, #24]
      break;
 800c4c4:	e043      	b.n	800c54e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68b9      	ldr	r1, [r7, #8]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 f9f5 	bl	800c8bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	69da      	ldr	r2, [r3, #28]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f042 0208 	orr.w	r2, r2, #8
 800c4e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	69da      	ldr	r2, [r3, #28]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f022 0204 	bic.w	r2, r2, #4
 800c4f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	69d9      	ldr	r1, [r3, #28]
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	691a      	ldr	r2, [r3, #16]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	430a      	orrs	r2, r1
 800c502:	61da      	str	r2, [r3, #28]
      break;
 800c504:	e023      	b.n	800c54e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68b9      	ldr	r1, [r7, #8]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 fa49 	bl	800c9a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	69da      	ldr	r2, [r3, #28]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	69da      	ldr	r2, [r3, #28]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	69d9      	ldr	r1, [r3, #28]
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	021a      	lsls	r2, r3, #8
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	430a      	orrs	r2, r1
 800c544:	61da      	str	r2, [r3, #28]
      break;
 800c546:	e002      	b.n	800c54e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	75fb      	strb	r3, [r7, #23]
      break;
 800c54c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c556:	7dfb      	ldrb	r3, [r7, #23]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3718      	adds	r7, #24
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c568:	bf00      	nop
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a40      	ldr	r2, [pc, #256]	; (800c6c4 <TIM_Base_SetConfig+0x114>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d013      	beq.n	800c5f0 <TIM_Base_SetConfig+0x40>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5ce:	d00f      	beq.n	800c5f0 <TIM_Base_SetConfig+0x40>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a3d      	ldr	r2, [pc, #244]	; (800c6c8 <TIM_Base_SetConfig+0x118>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d00b      	beq.n	800c5f0 <TIM_Base_SetConfig+0x40>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a3c      	ldr	r2, [pc, #240]	; (800c6cc <TIM_Base_SetConfig+0x11c>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d007      	beq.n	800c5f0 <TIM_Base_SetConfig+0x40>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a3b      	ldr	r2, [pc, #236]	; (800c6d0 <TIM_Base_SetConfig+0x120>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d003      	beq.n	800c5f0 <TIM_Base_SetConfig+0x40>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a3a      	ldr	r2, [pc, #232]	; (800c6d4 <TIM_Base_SetConfig+0x124>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d108      	bne.n	800c602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4a2f      	ldr	r2, [pc, #188]	; (800c6c4 <TIM_Base_SetConfig+0x114>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d02b      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c610:	d027      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a2c      	ldr	r2, [pc, #176]	; (800c6c8 <TIM_Base_SetConfig+0x118>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d023      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4a2b      	ldr	r2, [pc, #172]	; (800c6cc <TIM_Base_SetConfig+0x11c>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d01f      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a2a      	ldr	r2, [pc, #168]	; (800c6d0 <TIM_Base_SetConfig+0x120>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d01b      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a29      	ldr	r2, [pc, #164]	; (800c6d4 <TIM_Base_SetConfig+0x124>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d017      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a28      	ldr	r2, [pc, #160]	; (800c6d8 <TIM_Base_SetConfig+0x128>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d013      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a27      	ldr	r2, [pc, #156]	; (800c6dc <TIM_Base_SetConfig+0x12c>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d00f      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a26      	ldr	r2, [pc, #152]	; (800c6e0 <TIM_Base_SetConfig+0x130>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d00b      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a25      	ldr	r2, [pc, #148]	; (800c6e4 <TIM_Base_SetConfig+0x134>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d007      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a24      	ldr	r2, [pc, #144]	; (800c6e8 <TIM_Base_SetConfig+0x138>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d003      	beq.n	800c662 <TIM_Base_SetConfig+0xb2>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a23      	ldr	r2, [pc, #140]	; (800c6ec <TIM_Base_SetConfig+0x13c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d108      	bne.n	800c674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	4313      	orrs	r3, r2
 800c672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	695b      	ldr	r3, [r3, #20]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	689a      	ldr	r2, [r3, #8]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a0a      	ldr	r2, [pc, #40]	; (800c6c4 <TIM_Base_SetConfig+0x114>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d003      	beq.n	800c6a8 <TIM_Base_SetConfig+0xf8>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a0c      	ldr	r2, [pc, #48]	; (800c6d4 <TIM_Base_SetConfig+0x124>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d103      	bne.n	800c6b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	691a      	ldr	r2, [r3, #16]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	615a      	str	r2, [r3, #20]
}
 800c6b6:	bf00      	nop
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	40010000 	.word	0x40010000
 800c6c8:	40000400 	.word	0x40000400
 800c6cc:	40000800 	.word	0x40000800
 800c6d0:	40000c00 	.word	0x40000c00
 800c6d4:	40010400 	.word	0x40010400
 800c6d8:	40014000 	.word	0x40014000
 800c6dc:	40014400 	.word	0x40014400
 800c6e0:	40014800 	.word	0x40014800
 800c6e4:	40001800 	.word	0x40001800
 800c6e8:	40001c00 	.word	0x40001c00
 800c6ec:	40002000 	.word	0x40002000

0800c6f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b087      	sub	sp, #28
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	f023 0201 	bic.w	r2, r3, #1
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f023 0303 	bic.w	r3, r3, #3
 800c726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	4313      	orrs	r3, r2
 800c730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	f023 0302 	bic.w	r3, r3, #2
 800c738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	697a      	ldr	r2, [r7, #20]
 800c740:	4313      	orrs	r3, r2
 800c742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a20      	ldr	r2, [pc, #128]	; (800c7c8 <TIM_OC1_SetConfig+0xd8>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d003      	beq.n	800c754 <TIM_OC1_SetConfig+0x64>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a1f      	ldr	r2, [pc, #124]	; (800c7cc <TIM_OC1_SetConfig+0xdc>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d10c      	bne.n	800c76e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f023 0308 	bic.w	r3, r3, #8
 800c75a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	697a      	ldr	r2, [r7, #20]
 800c762:	4313      	orrs	r3, r2
 800c764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f023 0304 	bic.w	r3, r3, #4
 800c76c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a15      	ldr	r2, [pc, #84]	; (800c7c8 <TIM_OC1_SetConfig+0xd8>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d003      	beq.n	800c77e <TIM_OC1_SetConfig+0x8e>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4a14      	ldr	r2, [pc, #80]	; (800c7cc <TIM_OC1_SetConfig+0xdc>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d111      	bne.n	800c7a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c78c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	4313      	orrs	r3, r2
 800c796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	697a      	ldr	r2, [r7, #20]
 800c7ba:	621a      	str	r2, [r3, #32]
}
 800c7bc:	bf00      	nop
 800c7be:	371c      	adds	r7, #28
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr
 800c7c8:	40010000 	.word	0x40010000
 800c7cc:	40010400 	.word	0x40010400

0800c7d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b087      	sub	sp, #28
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	f023 0210 	bic.w	r2, r3, #16
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	021b      	lsls	r3, r3, #8
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	4313      	orrs	r3, r2
 800c812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	f023 0320 	bic.w	r3, r3, #32
 800c81a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	011b      	lsls	r3, r3, #4
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	4313      	orrs	r3, r2
 800c826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a22      	ldr	r2, [pc, #136]	; (800c8b4 <TIM_OC2_SetConfig+0xe4>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d003      	beq.n	800c838 <TIM_OC2_SetConfig+0x68>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a21      	ldr	r2, [pc, #132]	; (800c8b8 <TIM_OC2_SetConfig+0xe8>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d10d      	bne.n	800c854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c83e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	011b      	lsls	r3, r3, #4
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	4313      	orrs	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a17      	ldr	r2, [pc, #92]	; (800c8b4 <TIM_OC2_SetConfig+0xe4>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d003      	beq.n	800c864 <TIM_OC2_SetConfig+0x94>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a16      	ldr	r2, [pc, #88]	; (800c8b8 <TIM_OC2_SetConfig+0xe8>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d113      	bne.n	800c88c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c86a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	4313      	orrs	r3, r2
 800c88a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	621a      	str	r2, [r3, #32]
}
 800c8a6:	bf00      	nop
 800c8a8:	371c      	adds	r7, #28
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	40010000 	.word	0x40010000
 800c8b8:	40010400 	.word	0x40010400

0800c8bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	69db      	ldr	r3, [r3, #28]
 800c8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f023 0303 	bic.w	r3, r3, #3
 800c8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	021b      	lsls	r3, r3, #8
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	4313      	orrs	r3, r2
 800c910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4a21      	ldr	r2, [pc, #132]	; (800c99c <TIM_OC3_SetConfig+0xe0>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d003      	beq.n	800c922 <TIM_OC3_SetConfig+0x66>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4a20      	ldr	r2, [pc, #128]	; (800c9a0 <TIM_OC3_SetConfig+0xe4>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d10d      	bne.n	800c93e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	4313      	orrs	r3, r2
 800c934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c93c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a16      	ldr	r2, [pc, #88]	; (800c99c <TIM_OC3_SetConfig+0xe0>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d003      	beq.n	800c94e <TIM_OC3_SetConfig+0x92>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a15      	ldr	r2, [pc, #84]	; (800c9a0 <TIM_OC3_SetConfig+0xe4>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d113      	bne.n	800c976 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c95c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	011b      	lsls	r3, r3, #4
 800c964:	693a      	ldr	r2, [r7, #16]
 800c966:	4313      	orrs	r3, r2
 800c968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	699b      	ldr	r3, [r3, #24]
 800c96e:	011b      	lsls	r3, r3, #4
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	4313      	orrs	r3, r2
 800c974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	693a      	ldr	r2, [r7, #16]
 800c97a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	697a      	ldr	r2, [r7, #20]
 800c98e:	621a      	str	r2, [r3, #32]
}
 800c990:	bf00      	nop
 800c992:	371c      	adds	r7, #28
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	40010000 	.word	0x40010000
 800c9a0:	40010400 	.word	0x40010400

0800c9a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b087      	sub	sp, #28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a1b      	ldr	r3, [r3, #32]
 800c9b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	69db      	ldr	r3, [r3, #28]
 800c9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	021b      	lsls	r3, r3, #8
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	031b      	lsls	r3, r3, #12
 800c9f6:	693a      	ldr	r2, [r7, #16]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a12      	ldr	r2, [pc, #72]	; (800ca48 <TIM_OC4_SetConfig+0xa4>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d003      	beq.n	800ca0c <TIM_OC4_SetConfig+0x68>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a11      	ldr	r2, [pc, #68]	; (800ca4c <TIM_OC4_SetConfig+0xa8>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d109      	bne.n	800ca20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	695b      	ldr	r3, [r3, #20]
 800ca18:	019b      	lsls	r3, r3, #6
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	621a      	str	r2, [r3, #32]
}
 800ca3a:	bf00      	nop
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	40010000 	.word	0x40010000
 800ca4c:	40010400 	.word	0x40010400

0800ca50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d101      	bne.n	800ca68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca64:	2302      	movs	r3, #2
 800ca66:	e05a      	b.n	800cb1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a21      	ldr	r2, [pc, #132]	; (800cb2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d022      	beq.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cab4:	d01d      	beq.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a1d      	ldr	r2, [pc, #116]	; (800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d018      	beq.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a1b      	ldr	r2, [pc, #108]	; (800cb34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d013      	beq.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a1a      	ldr	r2, [pc, #104]	; (800cb38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d00e      	beq.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a18      	ldr	r2, [pc, #96]	; (800cb3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d009      	beq.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a17      	ldr	r2, [pc, #92]	; (800cb40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d004      	beq.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a15      	ldr	r2, [pc, #84]	; (800cb44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d10c      	bne.n	800cb0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	40010000 	.word	0x40010000
 800cb30:	40000400 	.word	0x40000400
 800cb34:	40000800 	.word	0x40000800
 800cb38:	40000c00 	.word	0x40000c00
 800cb3c:	40010400 	.word	0x40010400
 800cb40:	40014000 	.word	0x40014000
 800cb44:	40001800 	.word	0x40001800

0800cb48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e03f      	b.n	800cc02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d106      	bne.n	800cb9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7fa fab6 	bl	8007108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2224      	movs	r2, #36	; 0x24
 800cba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68da      	ldr	r2, [r3, #12]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f929 	bl	800ce0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	691a      	ldr	r2, [r3, #16]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	695a      	ldr	r2, [r3, #20]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68da      	ldr	r2, [r3, #12]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2220      	movs	r2, #32
 800cbfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cc00:	2300      	movs	r3, #0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b08a      	sub	sp, #40	; 0x28
 800cc0e:	af02      	add	r7, sp, #8
 800cc10:	60f8      	str	r0, [r7, #12]
 800cc12:	60b9      	str	r1, [r7, #8]
 800cc14:	603b      	str	r3, [r7, #0]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	2b20      	cmp	r3, #32
 800cc28:	d17c      	bne.n	800cd24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d002      	beq.n	800cc36 <HAL_UART_Transmit+0x2c>
 800cc30:	88fb      	ldrh	r3, [r7, #6]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d101      	bne.n	800cc3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e075      	b.n	800cd26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d101      	bne.n	800cc48 <HAL_UART_Transmit+0x3e>
 800cc44:	2302      	movs	r3, #2
 800cc46:	e06e      	b.n	800cd26 <HAL_UART_Transmit+0x11c>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2221      	movs	r2, #33	; 0x21
 800cc5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc5e:	f7fa fb83 	bl	8007368 <HAL_GetTick>
 800cc62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	88fa      	ldrh	r2, [r7, #6]
 800cc68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	88fa      	ldrh	r2, [r7, #6]
 800cc6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc78:	d108      	bne.n	800cc8c <HAL_UART_Transmit+0x82>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	691b      	ldr	r3, [r3, #16]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d104      	bne.n	800cc8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	61bb      	str	r3, [r7, #24]
 800cc8a:	e003      	b.n	800cc94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc90:	2300      	movs	r3, #0
 800cc92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cc9c:	e02a      	b.n	800ccf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2200      	movs	r2, #0
 800cca6:	2180      	movs	r1, #128	; 0x80
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f000 f840 	bl	800cd2e <UART_WaitOnFlagUntilTimeout>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e036      	b.n	800cd26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10b      	bne.n	800ccd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	3302      	adds	r3, #2
 800ccd2:	61bb      	str	r3, [r7, #24]
 800ccd4:	e007      	b.n	800cce6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	781a      	ldrb	r2, [r3, #0]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	3301      	adds	r3, #1
 800cce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	3b01      	subs	r3, #1
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1cf      	bne.n	800cc9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	2200      	movs	r2, #0
 800cd06:	2140      	movs	r1, #64	; 0x40
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f000 f810 	bl	800cd2e <UART_WaitOnFlagUntilTimeout>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cd14:	2303      	movs	r3, #3
 800cd16:	e006      	b.n	800cd26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	e000      	b.n	800cd26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cd24:	2302      	movs	r3, #2
  }
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3720      	adds	r7, #32
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b090      	sub	sp, #64	; 0x40
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	60f8      	str	r0, [r7, #12]
 800cd36:	60b9      	str	r1, [r7, #8]
 800cd38:	603b      	str	r3, [r7, #0]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd3e:	e050      	b.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd46:	d04c      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d007      	beq.n	800cd5e <UART_WaitOnFlagUntilTimeout+0x30>
 800cd4e:	f7fa fb0b 	bl	8007368 <HAL_GetTick>
 800cd52:	4602      	mov	r2, r0
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d241      	bcs.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	330c      	adds	r3, #12
 800cd64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd68:	e853 3f00 	ldrex	r3, [r3]
 800cd6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	330c      	adds	r3, #12
 800cd7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd7e:	637a      	str	r2, [r7, #52]	; 0x34
 800cd80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd86:	e841 2300 	strex	r3, r2, [r1]
 800cd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1e5      	bne.n	800cd5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	3314      	adds	r3, #20
 800cd98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	e853 3f00 	ldrex	r3, [r3]
 800cda0:	613b      	str	r3, [r7, #16]
   return(result);
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	f023 0301 	bic.w	r3, r3, #1
 800cda8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	3314      	adds	r3, #20
 800cdb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdb2:	623a      	str	r2, [r7, #32]
 800cdb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb6:	69f9      	ldr	r1, [r7, #28]
 800cdb8:	6a3a      	ldr	r2, [r7, #32]
 800cdba:	e841 2300 	strex	r3, r2, [r1]
 800cdbe:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1e5      	bne.n	800cd92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2220      	movs	r2, #32
 800cdca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e00f      	b.n	800ce02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	4013      	ands	r3, r2
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	bf0c      	ite	eq
 800cdf2:	2301      	moveq	r3, #1
 800cdf4:	2300      	movne	r3, #0
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	79fb      	ldrb	r3, [r7, #7]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d09f      	beq.n	800cd40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3740      	adds	r7, #64	; 0x40
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce10:	b0c0      	sub	sp, #256	; 0x100
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce28:	68d9      	ldr	r1, [r3, #12]
 800ce2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	ea40 0301 	orr.w	r3, r0, r1
 800ce34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce3a:	689a      	ldr	r2, [r3, #8]
 800ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce48:	695b      	ldr	r3, [r3, #20]
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce50:	69db      	ldr	r3, [r3, #28]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce64:	f021 010c 	bic.w	r1, r1, #12
 800ce68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce72:	430b      	orrs	r3, r1
 800ce74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	695b      	ldr	r3, [r3, #20]
 800ce7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ce82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce86:	6999      	ldr	r1, [r3, #24]
 800ce88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	ea40 0301 	orr.w	r3, r0, r1
 800ce92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	4b8f      	ldr	r3, [pc, #572]	; (800d0d8 <UART_SetConfig+0x2cc>)
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d005      	beq.n	800ceac <UART_SetConfig+0xa0>
 800cea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	4b8d      	ldr	r3, [pc, #564]	; (800d0dc <UART_SetConfig+0x2d0>)
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d104      	bne.n	800ceb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ceac:	f7fe f9a4 	bl	800b1f8 <HAL_RCC_GetPCLK2Freq>
 800ceb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ceb4:	e003      	b.n	800cebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ceb6:	f7fe f98b 	bl	800b1d0 <HAL_RCC_GetPCLK1Freq>
 800ceba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cec2:	69db      	ldr	r3, [r3, #28]
 800cec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cec8:	f040 810c 	bne.w	800d0e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ced0:	2200      	movs	r2, #0
 800ced2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ced6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ceda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cede:	4622      	mov	r2, r4
 800cee0:	462b      	mov	r3, r5
 800cee2:	1891      	adds	r1, r2, r2
 800cee4:	65b9      	str	r1, [r7, #88]	; 0x58
 800cee6:	415b      	adcs	r3, r3
 800cee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ceee:	4621      	mov	r1, r4
 800cef0:	eb12 0801 	adds.w	r8, r2, r1
 800cef4:	4629      	mov	r1, r5
 800cef6:	eb43 0901 	adc.w	r9, r3, r1
 800cefa:	f04f 0200 	mov.w	r2, #0
 800cefe:	f04f 0300 	mov.w	r3, #0
 800cf02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf0e:	4690      	mov	r8, r2
 800cf10:	4699      	mov	r9, r3
 800cf12:	4623      	mov	r3, r4
 800cf14:	eb18 0303 	adds.w	r3, r8, r3
 800cf18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	eb49 0303 	adc.w	r3, r9, r3
 800cf22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	18db      	adds	r3, r3, r3
 800cf3e:	653b      	str	r3, [r7, #80]	; 0x50
 800cf40:	4613      	mov	r3, r2
 800cf42:	eb42 0303 	adc.w	r3, r2, r3
 800cf46:	657b      	str	r3, [r7, #84]	; 0x54
 800cf48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf50:	f7f3 f94c 	bl	80001ec <__aeabi_uldivmod>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4b61      	ldr	r3, [pc, #388]	; (800d0e0 <UART_SetConfig+0x2d4>)
 800cf5a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf5e:	095b      	lsrs	r3, r3, #5
 800cf60:	011c      	lsls	r4, r3, #4
 800cf62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf66:	2200      	movs	r2, #0
 800cf68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf74:	4642      	mov	r2, r8
 800cf76:	464b      	mov	r3, r9
 800cf78:	1891      	adds	r1, r2, r2
 800cf7a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf7c:	415b      	adcs	r3, r3
 800cf7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cf84:	4641      	mov	r1, r8
 800cf86:	eb12 0a01 	adds.w	sl, r2, r1
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	eb43 0b01 	adc.w	fp, r3, r1
 800cf90:	f04f 0200 	mov.w	r2, #0
 800cf94:	f04f 0300 	mov.w	r3, #0
 800cf98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfa4:	4692      	mov	sl, r2
 800cfa6:	469b      	mov	fp, r3
 800cfa8:	4643      	mov	r3, r8
 800cfaa:	eb1a 0303 	adds.w	r3, sl, r3
 800cfae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfb2:	464b      	mov	r3, r9
 800cfb4:	eb4b 0303 	adc.w	r3, fp, r3
 800cfb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cfcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	18db      	adds	r3, r3, r3
 800cfd4:	643b      	str	r3, [r7, #64]	; 0x40
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	eb42 0303 	adc.w	r3, r2, r3
 800cfdc:	647b      	str	r3, [r7, #68]	; 0x44
 800cfde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cfe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cfe6:	f7f3 f901 	bl	80001ec <__aeabi_uldivmod>
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	4611      	mov	r1, r2
 800cff0:	4b3b      	ldr	r3, [pc, #236]	; (800d0e0 <UART_SetConfig+0x2d4>)
 800cff2:	fba3 2301 	umull	r2, r3, r3, r1
 800cff6:	095b      	lsrs	r3, r3, #5
 800cff8:	2264      	movs	r2, #100	; 0x64
 800cffa:	fb02 f303 	mul.w	r3, r2, r3
 800cffe:	1acb      	subs	r3, r1, r3
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d006:	4b36      	ldr	r3, [pc, #216]	; (800d0e0 <UART_SetConfig+0x2d4>)
 800d008:	fba3 2302 	umull	r2, r3, r3, r2
 800d00c:	095b      	lsrs	r3, r3, #5
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d014:	441c      	add	r4, r3
 800d016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d020:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d028:	4642      	mov	r2, r8
 800d02a:	464b      	mov	r3, r9
 800d02c:	1891      	adds	r1, r2, r2
 800d02e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d030:	415b      	adcs	r3, r3
 800d032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d038:	4641      	mov	r1, r8
 800d03a:	1851      	adds	r1, r2, r1
 800d03c:	6339      	str	r1, [r7, #48]	; 0x30
 800d03e:	4649      	mov	r1, r9
 800d040:	414b      	adcs	r3, r1
 800d042:	637b      	str	r3, [r7, #52]	; 0x34
 800d044:	f04f 0200 	mov.w	r2, #0
 800d048:	f04f 0300 	mov.w	r3, #0
 800d04c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d050:	4659      	mov	r1, fp
 800d052:	00cb      	lsls	r3, r1, #3
 800d054:	4651      	mov	r1, sl
 800d056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d05a:	4651      	mov	r1, sl
 800d05c:	00ca      	lsls	r2, r1, #3
 800d05e:	4610      	mov	r0, r2
 800d060:	4619      	mov	r1, r3
 800d062:	4603      	mov	r3, r0
 800d064:	4642      	mov	r2, r8
 800d066:	189b      	adds	r3, r3, r2
 800d068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d06c:	464b      	mov	r3, r9
 800d06e:	460a      	mov	r2, r1
 800d070:	eb42 0303 	adc.w	r3, r2, r3
 800d074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d084:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d08c:	460b      	mov	r3, r1
 800d08e:	18db      	adds	r3, r3, r3
 800d090:	62bb      	str	r3, [r7, #40]	; 0x28
 800d092:	4613      	mov	r3, r2
 800d094:	eb42 0303 	adc.w	r3, r2, r3
 800d098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d09a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d09e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d0a2:	f7f3 f8a3 	bl	80001ec <__aeabi_uldivmod>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	4b0d      	ldr	r3, [pc, #52]	; (800d0e0 <UART_SetConfig+0x2d4>)
 800d0ac:	fba3 1302 	umull	r1, r3, r3, r2
 800d0b0:	095b      	lsrs	r3, r3, #5
 800d0b2:	2164      	movs	r1, #100	; 0x64
 800d0b4:	fb01 f303 	mul.w	r3, r1, r3
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	3332      	adds	r3, #50	; 0x32
 800d0be:	4a08      	ldr	r2, [pc, #32]	; (800d0e0 <UART_SetConfig+0x2d4>)
 800d0c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0c4:	095b      	lsrs	r3, r3, #5
 800d0c6:	f003 0207 	and.w	r2, r3, #7
 800d0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4422      	add	r2, r4
 800d0d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0d4:	e105      	b.n	800d2e2 <UART_SetConfig+0x4d6>
 800d0d6:	bf00      	nop
 800d0d8:	40011000 	.word	0x40011000
 800d0dc:	40011400 	.word	0x40011400
 800d0e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d0f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d0f6:	4642      	mov	r2, r8
 800d0f8:	464b      	mov	r3, r9
 800d0fa:	1891      	adds	r1, r2, r2
 800d0fc:	6239      	str	r1, [r7, #32]
 800d0fe:	415b      	adcs	r3, r3
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
 800d102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d106:	4641      	mov	r1, r8
 800d108:	1854      	adds	r4, r2, r1
 800d10a:	4649      	mov	r1, r9
 800d10c:	eb43 0501 	adc.w	r5, r3, r1
 800d110:	f04f 0200 	mov.w	r2, #0
 800d114:	f04f 0300 	mov.w	r3, #0
 800d118:	00eb      	lsls	r3, r5, #3
 800d11a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d11e:	00e2      	lsls	r2, r4, #3
 800d120:	4614      	mov	r4, r2
 800d122:	461d      	mov	r5, r3
 800d124:	4643      	mov	r3, r8
 800d126:	18e3      	adds	r3, r4, r3
 800d128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d12c:	464b      	mov	r3, r9
 800d12e:	eb45 0303 	adc.w	r3, r5, r3
 800d132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d142:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	f04f 0300 	mov.w	r3, #0
 800d14e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d152:	4629      	mov	r1, r5
 800d154:	008b      	lsls	r3, r1, #2
 800d156:	4621      	mov	r1, r4
 800d158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d15c:	4621      	mov	r1, r4
 800d15e:	008a      	lsls	r2, r1, #2
 800d160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d164:	f7f3 f842 	bl	80001ec <__aeabi_uldivmod>
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	4b60      	ldr	r3, [pc, #384]	; (800d2f0 <UART_SetConfig+0x4e4>)
 800d16e:	fba3 2302 	umull	r2, r3, r3, r2
 800d172:	095b      	lsrs	r3, r3, #5
 800d174:	011c      	lsls	r4, r3, #4
 800d176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d17a:	2200      	movs	r2, #0
 800d17c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d180:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d188:	4642      	mov	r2, r8
 800d18a:	464b      	mov	r3, r9
 800d18c:	1891      	adds	r1, r2, r2
 800d18e:	61b9      	str	r1, [r7, #24]
 800d190:	415b      	adcs	r3, r3
 800d192:	61fb      	str	r3, [r7, #28]
 800d194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d198:	4641      	mov	r1, r8
 800d19a:	1851      	adds	r1, r2, r1
 800d19c:	6139      	str	r1, [r7, #16]
 800d19e:	4649      	mov	r1, r9
 800d1a0:	414b      	adcs	r3, r1
 800d1a2:	617b      	str	r3, [r7, #20]
 800d1a4:	f04f 0200 	mov.w	r2, #0
 800d1a8:	f04f 0300 	mov.w	r3, #0
 800d1ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1b0:	4659      	mov	r1, fp
 800d1b2:	00cb      	lsls	r3, r1, #3
 800d1b4:	4651      	mov	r1, sl
 800d1b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1ba:	4651      	mov	r1, sl
 800d1bc:	00ca      	lsls	r2, r1, #3
 800d1be:	4610      	mov	r0, r2
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	189b      	adds	r3, r3, r2
 800d1c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1cc:	464b      	mov	r3, r9
 800d1ce:	460a      	mov	r2, r1
 800d1d0:	eb42 0303 	adc.w	r3, r2, r3
 800d1d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d1e4:	f04f 0200 	mov.w	r2, #0
 800d1e8:	f04f 0300 	mov.w	r3, #0
 800d1ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	008b      	lsls	r3, r1, #2
 800d1f4:	4641      	mov	r1, r8
 800d1f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1fa:	4641      	mov	r1, r8
 800d1fc:	008a      	lsls	r2, r1, #2
 800d1fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d202:	f7f2 fff3 	bl	80001ec <__aeabi_uldivmod>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4b39      	ldr	r3, [pc, #228]	; (800d2f0 <UART_SetConfig+0x4e4>)
 800d20c:	fba3 1302 	umull	r1, r3, r3, r2
 800d210:	095b      	lsrs	r3, r3, #5
 800d212:	2164      	movs	r1, #100	; 0x64
 800d214:	fb01 f303 	mul.w	r3, r1, r3
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	011b      	lsls	r3, r3, #4
 800d21c:	3332      	adds	r3, #50	; 0x32
 800d21e:	4a34      	ldr	r2, [pc, #208]	; (800d2f0 <UART_SetConfig+0x4e4>)
 800d220:	fba2 2303 	umull	r2, r3, r2, r3
 800d224:	095b      	lsrs	r3, r3, #5
 800d226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d22a:	441c      	add	r4, r3
 800d22c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d230:	2200      	movs	r2, #0
 800d232:	673b      	str	r3, [r7, #112]	; 0x70
 800d234:	677a      	str	r2, [r7, #116]	; 0x74
 800d236:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d23a:	4642      	mov	r2, r8
 800d23c:	464b      	mov	r3, r9
 800d23e:	1891      	adds	r1, r2, r2
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	415b      	adcs	r3, r3
 800d244:	60fb      	str	r3, [r7, #12]
 800d246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d24a:	4641      	mov	r1, r8
 800d24c:	1851      	adds	r1, r2, r1
 800d24e:	6039      	str	r1, [r7, #0]
 800d250:	4649      	mov	r1, r9
 800d252:	414b      	adcs	r3, r1
 800d254:	607b      	str	r3, [r7, #4]
 800d256:	f04f 0200 	mov.w	r2, #0
 800d25a:	f04f 0300 	mov.w	r3, #0
 800d25e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d262:	4659      	mov	r1, fp
 800d264:	00cb      	lsls	r3, r1, #3
 800d266:	4651      	mov	r1, sl
 800d268:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d26c:	4651      	mov	r1, sl
 800d26e:	00ca      	lsls	r2, r1, #3
 800d270:	4610      	mov	r0, r2
 800d272:	4619      	mov	r1, r3
 800d274:	4603      	mov	r3, r0
 800d276:	4642      	mov	r2, r8
 800d278:	189b      	adds	r3, r3, r2
 800d27a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d27c:	464b      	mov	r3, r9
 800d27e:	460a      	mov	r2, r1
 800d280:	eb42 0303 	adc.w	r3, r2, r3
 800d284:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	663b      	str	r3, [r7, #96]	; 0x60
 800d290:	667a      	str	r2, [r7, #100]	; 0x64
 800d292:	f04f 0200 	mov.w	r2, #0
 800d296:	f04f 0300 	mov.w	r3, #0
 800d29a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d29e:	4649      	mov	r1, r9
 800d2a0:	008b      	lsls	r3, r1, #2
 800d2a2:	4641      	mov	r1, r8
 800d2a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2a8:	4641      	mov	r1, r8
 800d2aa:	008a      	lsls	r2, r1, #2
 800d2ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2b0:	f7f2 ff9c 	bl	80001ec <__aeabi_uldivmod>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	4b0d      	ldr	r3, [pc, #52]	; (800d2f0 <UART_SetConfig+0x4e4>)
 800d2ba:	fba3 1302 	umull	r1, r3, r3, r2
 800d2be:	095b      	lsrs	r3, r3, #5
 800d2c0:	2164      	movs	r1, #100	; 0x64
 800d2c2:	fb01 f303 	mul.w	r3, r1, r3
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	011b      	lsls	r3, r3, #4
 800d2ca:	3332      	adds	r3, #50	; 0x32
 800d2cc:	4a08      	ldr	r2, [pc, #32]	; (800d2f0 <UART_SetConfig+0x4e4>)
 800d2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d2d2:	095b      	lsrs	r3, r3, #5
 800d2d4:	f003 020f 	and.w	r2, r3, #15
 800d2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4422      	add	r2, r4
 800d2e0:	609a      	str	r2, [r3, #8]
}
 800d2e2:	bf00      	nop
 800d2e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2ee:	bf00      	nop
 800d2f0:	51eb851f 	.word	0x51eb851f

0800d2f4 <__libc_init_array>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	4d0d      	ldr	r5, [pc, #52]	; (800d32c <__libc_init_array+0x38>)
 800d2f8:	4c0d      	ldr	r4, [pc, #52]	; (800d330 <__libc_init_array+0x3c>)
 800d2fa:	1b64      	subs	r4, r4, r5
 800d2fc:	10a4      	asrs	r4, r4, #2
 800d2fe:	2600      	movs	r6, #0
 800d300:	42a6      	cmp	r6, r4
 800d302:	d109      	bne.n	800d318 <__libc_init_array+0x24>
 800d304:	4d0b      	ldr	r5, [pc, #44]	; (800d334 <__libc_init_array+0x40>)
 800d306:	4c0c      	ldr	r4, [pc, #48]	; (800d338 <__libc_init_array+0x44>)
 800d308:	f000 f87c 	bl	800d404 <_init>
 800d30c:	1b64      	subs	r4, r4, r5
 800d30e:	10a4      	asrs	r4, r4, #2
 800d310:	2600      	movs	r6, #0
 800d312:	42a6      	cmp	r6, r4
 800d314:	d105      	bne.n	800d322 <__libc_init_array+0x2e>
 800d316:	bd70      	pop	{r4, r5, r6, pc}
 800d318:	f855 3b04 	ldr.w	r3, [r5], #4
 800d31c:	4798      	blx	r3
 800d31e:	3601      	adds	r6, #1
 800d320:	e7ee      	b.n	800d300 <__libc_init_array+0xc>
 800d322:	f855 3b04 	ldr.w	r3, [r5], #4
 800d326:	4798      	blx	r3
 800d328:	3601      	adds	r6, #1
 800d32a:	e7f2      	b.n	800d312 <__libc_init_array+0x1e>
 800d32c:	080108e8 	.word	0x080108e8
 800d330:	080108e8 	.word	0x080108e8
 800d334:	080108e8 	.word	0x080108e8
 800d338:	080108ec 	.word	0x080108ec

0800d33c <__itoa>:
 800d33c:	1e93      	subs	r3, r2, #2
 800d33e:	2b22      	cmp	r3, #34	; 0x22
 800d340:	b510      	push	{r4, lr}
 800d342:	460c      	mov	r4, r1
 800d344:	d904      	bls.n	800d350 <__itoa+0x14>
 800d346:	2300      	movs	r3, #0
 800d348:	700b      	strb	r3, [r1, #0]
 800d34a:	461c      	mov	r4, r3
 800d34c:	4620      	mov	r0, r4
 800d34e:	bd10      	pop	{r4, pc}
 800d350:	2a0a      	cmp	r2, #10
 800d352:	d109      	bne.n	800d368 <__itoa+0x2c>
 800d354:	2800      	cmp	r0, #0
 800d356:	da07      	bge.n	800d368 <__itoa+0x2c>
 800d358:	232d      	movs	r3, #45	; 0x2d
 800d35a:	700b      	strb	r3, [r1, #0]
 800d35c:	4240      	negs	r0, r0
 800d35e:	2101      	movs	r1, #1
 800d360:	4421      	add	r1, r4
 800d362:	f000 f80d 	bl	800d380 <__utoa>
 800d366:	e7f1      	b.n	800d34c <__itoa+0x10>
 800d368:	2100      	movs	r1, #0
 800d36a:	e7f9      	b.n	800d360 <__itoa+0x24>

0800d36c <itoa>:
 800d36c:	f7ff bfe6 	b.w	800d33c <__itoa>

0800d370 <memset>:
 800d370:	4402      	add	r2, r0
 800d372:	4603      	mov	r3, r0
 800d374:	4293      	cmp	r3, r2
 800d376:	d100      	bne.n	800d37a <memset+0xa>
 800d378:	4770      	bx	lr
 800d37a:	f803 1b01 	strb.w	r1, [r3], #1
 800d37e:	e7f9      	b.n	800d374 <memset+0x4>

0800d380 <__utoa>:
 800d380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d382:	4c1f      	ldr	r4, [pc, #124]	; (800d400 <__utoa+0x80>)
 800d384:	b08b      	sub	sp, #44	; 0x2c
 800d386:	4605      	mov	r5, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	466e      	mov	r6, sp
 800d38c:	f104 0c20 	add.w	ip, r4, #32
 800d390:	6820      	ldr	r0, [r4, #0]
 800d392:	6861      	ldr	r1, [r4, #4]
 800d394:	4637      	mov	r7, r6
 800d396:	c703      	stmia	r7!, {r0, r1}
 800d398:	3408      	adds	r4, #8
 800d39a:	4564      	cmp	r4, ip
 800d39c:	463e      	mov	r6, r7
 800d39e:	d1f7      	bne.n	800d390 <__utoa+0x10>
 800d3a0:	7921      	ldrb	r1, [r4, #4]
 800d3a2:	7139      	strb	r1, [r7, #4]
 800d3a4:	1e91      	subs	r1, r2, #2
 800d3a6:	6820      	ldr	r0, [r4, #0]
 800d3a8:	6038      	str	r0, [r7, #0]
 800d3aa:	2922      	cmp	r1, #34	; 0x22
 800d3ac:	f04f 0100 	mov.w	r1, #0
 800d3b0:	d904      	bls.n	800d3bc <__utoa+0x3c>
 800d3b2:	7019      	strb	r1, [r3, #0]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	b00b      	add	sp, #44	; 0x2c
 800d3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3bc:	1e58      	subs	r0, r3, #1
 800d3be:	4684      	mov	ip, r0
 800d3c0:	fbb5 f7f2 	udiv	r7, r5, r2
 800d3c4:	fb02 5617 	mls	r6, r2, r7, r5
 800d3c8:	3628      	adds	r6, #40	; 0x28
 800d3ca:	446e      	add	r6, sp
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d3d2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d3d6:	462e      	mov	r6, r5
 800d3d8:	42b2      	cmp	r2, r6
 800d3da:	f101 0101 	add.w	r1, r1, #1
 800d3de:	463d      	mov	r5, r7
 800d3e0:	d9ee      	bls.n	800d3c0 <__utoa+0x40>
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	545a      	strb	r2, [r3, r1]
 800d3e6:	1919      	adds	r1, r3, r4
 800d3e8:	1aa5      	subs	r5, r4, r2
 800d3ea:	42aa      	cmp	r2, r5
 800d3ec:	dae3      	bge.n	800d3b6 <__utoa+0x36>
 800d3ee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d3f2:	780e      	ldrb	r6, [r1, #0]
 800d3f4:	7006      	strb	r6, [r0, #0]
 800d3f6:	3201      	adds	r2, #1
 800d3f8:	f801 5901 	strb.w	r5, [r1], #-1
 800d3fc:	e7f4      	b.n	800d3e8 <__utoa+0x68>
 800d3fe:	bf00      	nop
 800d400:	080108b8 	.word	0x080108b8

0800d404 <_init>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	bf00      	nop
 800d408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40a:	bc08      	pop	{r3}
 800d40c:	469e      	mov	lr, r3
 800d40e:	4770      	bx	lr

0800d410 <_fini>:
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	bf00      	nop
 800d414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d416:	bc08      	pop	{r3}
 800d418:	469e      	mov	lr, r3
 800d41a:	4770      	bx	lr
